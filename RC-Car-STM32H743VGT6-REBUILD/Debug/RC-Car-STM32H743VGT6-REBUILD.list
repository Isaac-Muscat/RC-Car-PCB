
RC-Car-STM32H743VGT6-REBUILD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b924  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800bbbc  0800bbbc  0000cbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc04  0800bc04  0000cc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc0c  0800bc0c  0000cc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bc10  0800bc10  0000cc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800bc14  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008bc  24000010  0800bc24  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008cc  0800bc24  0000d8cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022b5e  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000398f  00000000  00000000  0002fb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c20  00000000  00000000  00033530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001615  00000000  00000000  00035150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6a2  00000000  00000000  00036765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002464b  00000000  00000000  00070e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171e9c  00000000  00000000  00095452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002072ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b40  00000000  00000000  00207334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  0020ee74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bba4 	.word	0x0800bba4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800bba4 	.word	0x0800bba4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800060a:	f000 fcd9 	bl	8000fc0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 fad5 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f831 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fc2f 	bl	8000e78 <MX_GPIO_Init>
  MX_DCMI_Init();
 800061a:	f000 f8a9 	bl	8000770 <MX_DCMI_Init>
  MX_I2C2_Init();
 800061e:	f000 f8db 	bl	80007d8 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000622:	f000 f919 	bl	8000858 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000626:	f000 f93b 	bl	80008a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 800062a:	f000 f98f 	bl	800094c <MX_TIM1_Init>
  MX_TIM2_Init();
 800062e:	f000 fa1b 	bl	8000a68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000632:	f000 fa89 	bl	8000b48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000636:	f000 faed 	bl	8000c14 <MX_TIM4_Init>
  MX_TIM14_Init();
 800063a:	f000 fb51 	bl	8000ce0 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800063e:	f000 fb9d 	bl	8000d7c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000642:	f000 fbe7 	bl	8000e14 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint8_t tmp[] = "Hello World\n\r";
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <main+0x6c>)
 8000648:	1d3c      	adds	r4, r7, #4
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	c407      	stmia	r4!, {r0, r1, r2}
 800064e:	8023      	strh	r3, [r4, #0]
  int tmp_s = sizeof(tmp)/sizeof(uint8_t);
 8000650:	230e      	movs	r3, #14
 8000652:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, tmp, tmp_s, 0xFFFF);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	b29a      	uxth	r2, r3
 8000658:	1d39      	adds	r1, r7, #4
 800065a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <main+0x70>)
 8000660:	f008 fe48 	bl	80092f4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000668:	f001 fb3a 	bl	8001ce0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, tmp, tmp_s, 0xFFFF);
 800066c:	bf00      	nop
 800066e:	e7f1      	b.n	8000654 <main+0x50>
 8000670:	0800bbbc 	.word	0x0800bbbc
 8000674:	24000350 	.word	0x24000350

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	@ 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f00b fa5f 	bl	800bb4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00b fa59 	bl	800bb4a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000698:	2002      	movs	r0, #2
 800069a:	f003 f8bb 	bl	8003814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b31      	ldr	r3, [pc, #196]	@ (8000768 <SystemClock_Config+0xf0>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a6:	4a30      	ldr	r2, [pc, #192]	@ (8000768 <SystemClock_Config+0xf0>)
 80006a8:	f023 0301 	bic.w	r3, r3, #1
 80006ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <SystemClock_Config+0xf0>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <SystemClock_Config+0xf4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c0:	4a2a      	ldr	r2, [pc, #168]	@ (800076c <SystemClock_Config+0xf4>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <SystemClock_Config+0xf4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d4:	bf00      	nop
 80006d6:	4b25      	ldr	r3, [pc, #148]	@ (800076c <SystemClock_Config+0xf4>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006e2:	d1f8      	bne.n	80006d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006f6:	2305      	movs	r3, #5
 80006f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80006fa:	2330      	movs	r3, #48	@ 0x30
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800070a:	2308      	movs	r3, #8
 800070c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800070e:	2300      	movs	r3, #0
 8000710:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071a:	4618      	mov	r0, r3
 800071c:	f003 f8c4 	bl	80038a8 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000726:	f000 fc77 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	233f      	movs	r3, #63	@ 0x3f
 800072c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2303      	movs	r3, #3
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800073e:	2350      	movs	r3, #80	@ 0x50
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000742:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2102      	movs	r1, #2
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fd03 	bl	800415c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800075c:	f000 fc5c 	bl	8001018 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3770      	adds	r7, #112	@ 0x70
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	58000400 	.word	0x58000400
 800076c:	58024800 	.word	0x58024800

08000770 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000774:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_DCMI_Init+0x60>)
 8000776:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <MX_DCMI_Init+0x64>)
 8000778:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_DCMI_Init+0x60>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_DCMI_Init+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_DCMI_Init+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800078c:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_DCMI_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_DCMI_Init+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <MX_DCMI_Init+0x60>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_DCMI_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_DCMI_Init+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_DCMI_Init+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_DCMI_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_DCMI_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_DCMI_Init+0x60>)
 80007be:	f001 fc47 	bl	8002050 <HAL_DCMI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fc26 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2400002c 	.word	0x2400002c
 80007d4:	48020000 	.word	0x48020000

080007d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_I2C2_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <MX_I2C2_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x007074AF;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_I2C2_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <MX_I2C2_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_I2C2_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_I2C2_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_I2C2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	@ (800084c <MX_I2C2_Init+0x74>)
 8000814:	f001 fe60 	bl	80024d8 <HAL_I2C_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 fbfb 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <MX_I2C2_Init+0x74>)
 8000826:	f001 fef3 	bl	8002610 <HAL_I2CEx_ConfigAnalogFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 fbf2 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_I2C2_Init+0x74>)
 8000838:	f001 ff35 	bl	80026a6 <HAL_I2CEx_ConfigDigitalFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 fbe9 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2400007c 	.word	0x2400007c
 8000850:	40005800 	.word	0x40005800
 8000854:	007074af 	.word	0x007074af

08000858 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 800085e:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <MX_SDMMC1_SD_Init+0x44>)
 8000860:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000868:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 8000870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000874:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_SDMMC1_SD_Init+0x40>)
 8000884:	f006 fcf4 	bl	8007270 <HAL_SD_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800088e:	f000 fbc3 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	240000d0 	.word	0x240000d0
 800089c:	52007000 	.word	0x52007000

080008a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008a6:	4a28      	ldr	r2, [pc, #160]	@ (8000948 <MX_SPI2_Init+0xa8>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_SPI2_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_SPI2_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_SPI2_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_SPI2_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_SPI2_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_SPI2_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_SPI2_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_SPI2_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_SPI2_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_SPI2_Init+0xa4>)
 8000930:	f007 fd0c 	bl	800834c <HAL_SPI_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 800093a:	f000 fb6d 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2400014c 	.word	0x2400014c
 8000948:	40003800 	.word	0x40003800

0800094c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	@ 0x58
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	222c      	movs	r2, #44	@ 0x2c
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f00b f8e6 	bl	800bb4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097e:	4b38      	ldr	r3, [pc, #224]	@ (8000a60 <MX_TIM1_Init+0x114>)
 8000980:	4a38      	ldr	r2, [pc, #224]	@ (8000a64 <MX_TIM1_Init+0x118>)
 8000982:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000984:	4b36      	ldr	r3, [pc, #216]	@ (8000a60 <MX_TIM1_Init+0x114>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b35      	ldr	r3, [pc, #212]	@ (8000a60 <MX_TIM1_Init+0x114>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000990:	4b33      	ldr	r3, [pc, #204]	@ (8000a60 <MX_TIM1_Init+0x114>)
 8000992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <MX_TIM1_Init+0x114>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_TIM1_Init+0x114>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <MX_TIM1_Init+0x114>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009aa:	482d      	ldr	r0, [pc, #180]	@ (8000a60 <MX_TIM1_Init+0x114>)
 80009ac:	f007 fe64 	bl	8008678 <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 fb2f 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009ca:	4619      	mov	r1, r3
 80009cc:	4824      	ldr	r0, [pc, #144]	@ (8000a60 <MX_TIM1_Init+0x114>)
 80009ce:	f008 fb35 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009d8:	f000 fb1e 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2360      	movs	r3, #96	@ 0x60
 80009de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009f8:	220c      	movs	r2, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <MX_TIM1_Init+0x114>)
 80009fe:	f007 fe93 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a08:	f000 fb06 	bl	8001018 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <MX_TIM1_Init+0x114>)
 8000a42:	f008 fb89 	bl	8009158 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000a4c:	f000 fae4 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a50:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <MX_TIM1_Init+0x114>)
 8000a52:	f000 fddd 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	3758      	adds	r7, #88	@ 0x58
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	240001d4 	.word	0x240001d4
 8000a64:	40010000 	.word	0x40010000

08000a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab4:	4823      	ldr	r0, [pc, #140]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000ab6:	f007 fddf 	bl	8008678 <HAL_TIM_PWM_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 faaa 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481c      	ldr	r0, [pc, #112]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000ad4:	f008 fab2 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ade:	f000 fa9b 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae2:	2360      	movs	r3, #96	@ 0x60
 8000ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	4812      	ldr	r0, [pc, #72]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000afa:	f007 fe15 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b04:	f000 fa88 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000b10:	f007 fe0a 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b1a:	f000 fa7d 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2208      	movs	r2, #8
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000b26:	f007 fdff 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000b30:	f000 fa72 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <MX_TIM2_Init+0xdc>)
 8000b36:	f000 fd6b 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000220 	.word	0x24000220

08000b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b6e:	4a28      	ldr	r2, [pc, #160]	@ (8000c10 <MX_TIM3_Init+0xc8>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b92:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000b94:	f007 fd70 	bl	8008678 <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b9e:	f000 fa3b 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4816      	ldr	r0, [pc, #88]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000bb2:	f008 fa43 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000bbc:	f000 fa2c 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000bd8:	f007 fda6 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000be2:	f000 fa19 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	220c      	movs	r2, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000bee:	f007 fd9b 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bf8:	f000 fa0e 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bfc:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MX_TIM3_Init+0xc4>)
 8000bfe:	f000 fd07 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2400026c 	.word	0x2400026c
 8000c10:	40000400 	.word	0x40000400

08000c14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c26:	463b      	mov	r3, r7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c3a:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <MX_TIM4_Init+0xc8>)
 8000c3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c44:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c4a:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c5e:	481e      	ldr	r0, [pc, #120]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c60:	f007 fd0a 	bl	8008678 <HAL_TIM_PWM_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000c6a:	f000 f9d5 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4816      	ldr	r0, [pc, #88]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000c7e:	f008 f9dd 	bl	800903c <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000c88:	f000 f9c6 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8c:	2360      	movs	r3, #96	@ 0x60
 8000c8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000ca4:	f007 fd40 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000cae:	f000 f9b3 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000cba:	f007 fd35 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000cc4:	f000 f9a8 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <MX_TIM4_Init+0xc4>)
 8000cca:	f000 fca1 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	@ 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	240002b8 	.word	0x240002b8
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000d78 <MX_TIM14_Init+0x98>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d1e:	4815      	ldr	r0, [pc, #84]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d20:	f007 fc53 	bl	80085ca <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000d2a:	f000 f975 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000d2e:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d30:	f007 fca2 	bl	8008678 <HAL_TIM_PWM_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000d3a:	f000 f96d 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3e:	2360      	movs	r3, #96	@ 0x60
 8000d40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	4619      	mov	r1, r3
 8000d54:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d56:	f007 fce7 	bl	8008728 <HAL_TIM_PWM_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000d60:	f000 f95a 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000d64:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <MX_TIM14_Init+0x94>)
 8000d66:	f000 fc53 	bl	8001610 <HAL_TIM_MspPostInit>

}
 8000d6a:	bf00      	nop
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000304 	.word	0x24000304
 8000d78:	40002000 	.word	0x40002000

08000d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <MX_USART1_UART_Init+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc4:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dc6:	f008 fa45 	bl	8009254 <HAL_UART_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dd0:	f000 f922 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dd8:	f009 fadb 	bl	800a392 <HAL_UARTEx_SetTxFifoThreshold>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000de2:	f000 f919 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4808      	ldr	r0, [pc, #32]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dea:	f009 fb10 	bl	800a40e <HAL_UARTEx_SetRxFifoThreshold>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000df4:	f000 f910 	bl	8001018 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dfa:	f009 fa91 	bl	800a320 <HAL_UARTEx_DisableFifoMode>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f000 f908 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000350 	.word	0x24000350
 8000e10:	40011000 	.word	0x40011000

08000e14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e1a:	4a16      	ldr	r2, [pc, #88]	@ (8000e74 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e1e:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e20:	2209      	movs	r2, #9
 8000e22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e5c:	f001 fc6f 	bl	800273e <HAL_PCD_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e66:	f000 f8d7 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	240003e4 	.word	0x240003e4
 8000e74:	40080000 	.word	0x40080000

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b49      	ldr	r3, [pc, #292]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a47      	ldr	r2, [pc, #284]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b45      	ldr	r3, [pc, #276]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b41      	ldr	r3, [pc, #260]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	4a40      	ldr	r2, [pc, #256]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a38      	ldr	r2, [pc, #224]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	4a31      	ldr	r2, [pc, #196]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	4a29      	ldr	r2, [pc, #164]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f16:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	4a22      	ldr	r2, [pc, #136]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_ADC_Pin|SPI2_CS_ISENSE_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000f48:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <MX_GPIO_Init+0x140>)
 8000f4a:	f001 faab 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2108      	movs	r1, #8
 8000f52:	481a      	ldr	r0, [pc, #104]	@ (8000fbc <MX_GPIO_Init+0x144>)
 8000f54:	f001 faa6 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_CS_ADC_Pin SPI2_CS_ISENSE_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_ADC_Pin|SPI2_CS_ISENSE_Pin;
 8000f58:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <MX_GPIO_Init+0x140>)
 8000f72:	f001 f8e7 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISENSE_ALERT_Pin */
  GPIO_InitStruct.Pin = ISENSE_ALERT_Pin;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ISENSE_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <MX_GPIO_Init+0x140>)
 8000f8a:	f001 f8db 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_GPIO_Init+0x144>)
 8000fa6:	f001 f8cd 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	@ 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020800 	.word	0x58020800
 8000fbc:	58020000 	.word	0x58020000

08000fc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fd2:	f000 ffc5 	bl	8001f60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fe6:	2387      	movs	r3, #135	@ 0x87
 8000fe8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f000 ffe3 	bl	8001fd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800100a:	2004      	movs	r0, #4
 800100c:	f000 ffc0 	bl	8001f90 <HAL_MPU_Enable>

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <Error_Handler+0x8>

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_MspInit+0x30>)
 800102c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001030:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x30>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x30>)
 800103c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	58024400 	.word	0x58024400

08001058 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	@ 0x38
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a58      	ldr	r2, [pc, #352]	@ (80011d8 <HAL_DCMI_MspInit+0x180>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 80aa 	bne.w	80011d0 <HAL_DCMI_MspInit+0x178>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800107c:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 800107e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001082:	4a56      	ldr	r2, [pc, #344]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800108c:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 800108e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	4b50      	ldr	r3, [pc, #320]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a4e      	ldr	r2, [pc, #312]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b4c      	ldr	r3, [pc, #304]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b48      	ldr	r3, [pc, #288]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a47      	ldr	r2, [pc, #284]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a3f      	ldr	r2, [pc, #252]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b3d      	ldr	r3, [pc, #244]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f4:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001104:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	4a30      	ldr	r2, [pc, #192]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001122:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <HAL_DCMI_MspInit+0x184>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001130:	2373      	movs	r3, #115	@ 0x73
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001140:	230d      	movs	r3, #13
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4825      	ldr	r0, [pc, #148]	@ (80011e0 <HAL_DCMI_MspInit+0x188>)
 800114c:	f000 fffa 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001150:	2350      	movs	r3, #80	@ 0x50
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001160:	230d      	movs	r3, #13
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	481e      	ldr	r0, [pc, #120]	@ (80011e4 <HAL_DCMI_MspInit+0x18c>)
 800116c:	f000 ffea 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001170:	23c0      	movs	r3, #192	@ 0xc0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001180:	230d      	movs	r3, #13
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4817      	ldr	r0, [pc, #92]	@ (80011e8 <HAL_DCMI_MspInit+0x190>)
 800118c:	f000 ffda 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001190:	2308      	movs	r3, #8
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011a0:	230d      	movs	r3, #13
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4810      	ldr	r0, [pc, #64]	@ (80011ec <HAL_DCMI_MspInit+0x194>)
 80011ac:	f000 ffca 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c0:	230d      	movs	r3, #13
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4809      	ldr	r0, [pc, #36]	@ (80011f0 <HAL_DCMI_MspInit+0x198>)
 80011cc:	f000 ffba 	bl	8002144 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	3738      	adds	r7, #56	@ 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	48020000 	.word	0x48020000
 80011dc:	58024400 	.word	0x58024400
 80011e0:	58021000 	.word	0x58021000
 80011e4:	58020000 	.word	0x58020000
 80011e8:	58020800 	.word	0x58020800
 80011ec:	58020c00 	.word	0x58020c00
 80011f0:	58020400 	.word	0x58020400

080011f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ba      	sub	sp, #232	@ 0xe8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	22c0      	movs	r2, #192	@ 0xc0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f00a fc98 	bl	800bb4a <memset>
  if(hi2c->Instance==I2C2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a27      	ldr	r2, [pc, #156]	@ (80012bc <HAL_I2C_MspInit+0xc8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d146      	bne.n	80012b2 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001224:	f04f 0208 	mov.w	r2, #8
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fb1a 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001246:	f7ff fee7 	bl	8001018 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_I2C_MspInit+0xcc>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <HAL_I2C_MspInit+0xcc>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <HAL_I2C_MspInit+0xcc>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001268:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800126c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001282:	2304      	movs	r3, #4
 8001284:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800128c:	4619      	mov	r1, r3
 800128e:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <HAL_I2C_MspInit+0xd0>)
 8001290:	f000 ff58 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_I2C_MspInit+0xcc>)
 8001296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129a:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <HAL_I2C_MspInit+0xcc>)
 800129c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_I2C_MspInit+0xcc>)
 80012a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	37e8      	adds	r7, #232	@ 0xe8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40005800 	.word	0x40005800
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020400 	.word	0x58020400

080012c8 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0bc      	sub	sp, #240	@ 0xf0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	22c0      	movs	r2, #192	@ 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00a fc2e 	bl	800bb4a <memset>
  if(hsd->Instance==SDMMC1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a38      	ldr	r2, [pc, #224]	@ (80013d4 <HAL_SD_MspInit+0x10c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d169      	bne.n	80013cc <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80012f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001304:	2300      	movs	r3, #0
 8001306:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fab1 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001318:	f7ff fe7e 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800131c:	4b2e      	ldr	r3, [pc, #184]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 800131e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001322:	4a2d      	ldr	r2, [pc, #180]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800132c:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 800132e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001340:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	4a1e      	ldr	r2, [pc, #120]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <HAL_SD_MspInit+0x110>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001376:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800137a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001390:	230c      	movs	r3, #12
 8001392:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800139a:	4619      	mov	r1, r3
 800139c:	480f      	ldr	r0, [pc, #60]	@ (80013dc <HAL_SD_MspInit+0x114>)
 800139e:	f000 fed1 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a2:	2304      	movs	r3, #4
 80013a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80013ba:	230c      	movs	r3, #12
 80013bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <HAL_SD_MspInit+0x118>)
 80013c8:	f000 febc 	bl	8002144 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80013cc:	bf00      	nop
 80013ce:	37f0      	adds	r7, #240	@ 0xf0
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	52007000 	.word	0x52007000
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58020800 	.word	0x58020800
 80013e0:	58020c00 	.word	0x58020c00

080013e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0bc      	sub	sp, #240	@ 0xf0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	22c0      	movs	r2, #192	@ 0xc0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00a fba0 	bl	800bb4a <memset>
  if(hspi->Instance==SPI2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a38      	ldr	r2, [pc, #224]	@ (80014f0 <HAL_SPI_MspInit+0x10c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d169      	bne.n	80014e8 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001414:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001420:	2300      	movs	r3, #0
 8001422:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fa23 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001434:	f7ff fdf0 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001438:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 800143a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143e:	4a2d      	ldr	r2, [pc, #180]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001444:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001448:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 800144a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800144e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145c:	4a25      	ldr	r2, [pc, #148]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147a:	4a1e      	ldr	r2, [pc, #120]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_SPI_MspInit+0x110>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001492:	2306      	movs	r3, #6
 8001494:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014aa:	2305      	movs	r3, #5
 80014ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014b4:	4619      	mov	r1, r3
 80014b6:	4810      	ldr	r0, [pc, #64]	@ (80014f8 <HAL_SPI_MspInit+0x114>)
 80014b8:	f000 fe44 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d6:	2305      	movs	r3, #5
 80014d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014e0:	4619      	mov	r1, r3
 80014e2:	4806      	ldr	r0, [pc, #24]	@ (80014fc <HAL_SPI_MspInit+0x118>)
 80014e4:	f000 fe2e 	bl	8002144 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80014e8:	bf00      	nop
 80014ea:	37f0      	adds	r7, #240	@ 0xf0
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40003800 	.word	0x40003800
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58020800 	.word	0x58020800
 80014fc:	58020400 	.word	0x58020400

08001500 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2b      	ldr	r2, [pc, #172]	@ (80015bc <HAL_TIM_PWM_MspInit+0xbc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10f      	bne.n	8001532 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001518:	4a29      	ldr	r2, [pc, #164]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001530:	e03d      	b.n	80015ae <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800153a:	d10f      	bne.n	800155c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153c:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 800153e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001542:	4a1f      	ldr	r2, [pc, #124]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 800154e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
}
 800155a:	e028      	b.n	80015ae <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_TIM_PWM_MspInit+0xc4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10f      	bne.n	8001586 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156c:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001576:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	e013      	b.n	80015ae <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <HAL_TIM_PWM_MspInit+0xc8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d10e      	bne.n	80015ae <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015a0:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_TIM_PWM_MspInit+0xc0>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40010000 	.word	0x40010000
 80015c0:	58024400 	.word	0x58024400
 80015c4:	40000400 	.word	0x40000400
 80015c8:	40000800 	.word	0x40000800

080015cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_TIM_Base_MspInit+0x3c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10e      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_TIM_Base_MspInit+0x40>)
 80015e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015e4:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_TIM_Base_MspInit+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <HAL_TIM_Base_MspInit+0x40>)
 80015f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40002000 	.word	0x40002000
 800160c:	58024400 	.word	0x58024400

08001610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a5d      	ldr	r2, [pc, #372]	@ (80017a4 <HAL_TIM_MspPostInit+0x194>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d120      	bne.n	8001674 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b5d      	ldr	r3, [pc, #372]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a5b      	ldr	r2, [pc, #364]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001650:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001662:	2301      	movs	r3, #1
 8001664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	484f      	ldr	r0, [pc, #316]	@ (80017ac <HAL_TIM_MspPostInit+0x19c>)
 800166e:	f000 fd69 	bl	8002144 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001672:	e093      	b.n	800179c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800167c:	d11f      	bne.n	80016be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	4a48      	ldr	r2, [pc, #288]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800169c:	2307      	movs	r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <HAL_TIM_MspPostInit+0x1a0>)
 80016b8:	f000 fd44 	bl	8002144 <HAL_GPIO_Init>
}
 80016bc:	e06e      	b.n	800179c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a3c      	ldr	r2, [pc, #240]	@ (80017b4 <HAL_TIM_MspPostInit+0x1a4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d11f      	bne.n	8001708 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a36      	ldr	r2, [pc, #216]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b33      	ldr	r3, [pc, #204]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	482d      	ldr	r0, [pc, #180]	@ (80017b8 <HAL_TIM_MspPostInit+0x1a8>)
 8001702:	f000 fd1f 	bl	8002144 <HAL_GPIO_Init>
}
 8001706:	e049      	b.n	800179c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a2b      	ldr	r2, [pc, #172]	@ (80017bc <HAL_TIM_MspPostInit+0x1ac>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d120      	bne.n	8001754 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001718:	4a23      	ldr	r2, [pc, #140]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001730:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001742:	2302      	movs	r3, #2
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <HAL_TIM_MspPostInit+0x1a8>)
 800174e:	f000 fcf9 	bl	8002144 <HAL_GPIO_Init>
}
 8001752:	e023      	b.n	800179c <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <HAL_TIM_MspPostInit+0x1b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d11e      	bne.n	800179c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001764:	4a10      	ldr	r2, [pc, #64]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_TIM_MspPostInit+0x198>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DCMI_XCLK_Pin;
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800178c:	2309      	movs	r3, #9
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DCMI_XCLK_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <HAL_TIM_MspPostInit+0x1a0>)
 8001798:	f000 fcd4 	bl	8002144 <HAL_GPIO_Init>
}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	@ 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40010000 	.word	0x40010000
 80017a8:	58024400 	.word	0x58024400
 80017ac:	58021000 	.word	0x58021000
 80017b0:	58020000 	.word	0x58020000
 80017b4:	40000400 	.word	0x40000400
 80017b8:	58020400 	.word	0x58020400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40002000 	.word	0x40002000

080017c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0ba      	sub	sp, #232	@ 0xe8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	22c0      	movs	r2, #192	@ 0xc0
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00a f9b0 	bl	800bb4a <memset>
  if(huart->Instance==USART1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a27      	ldr	r2, [pc, #156]	@ (800188c <HAL_UART_MspInit+0xc8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d146      	bne.n	8001882 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017f4:	f04f 0201 	mov.w	r2, #1
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4618      	mov	r0, r3
 800180c:	f003 f832 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001816:	f7ff fbff 	bl	8001018 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <HAL_UART_MspInit+0xcc>)
 800181c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <HAL_UART_MspInit+0xcc>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800182a:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_UART_MspInit+0xcc>)
 800182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_UART_MspInit+0xcc>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183e:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <HAL_UART_MspInit+0xcc>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_UART_MspInit+0xcc>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001856:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800185a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001870:	2304      	movs	r3, #4
 8001872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <HAL_UART_MspInit+0xd0>)
 800187e:	f000 fc61 	bl	8002144 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	37e8      	adds	r7, #232	@ 0xe8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40011000 	.word	0x40011000
 8001890:	58024400 	.word	0x58024400
 8001894:	58020400 	.word	0x58020400

08001898 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0ba      	sub	sp, #232	@ 0xe8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	22c0      	movs	r2, #192	@ 0xc0
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00a f946 	bl	800bb4a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <HAL_PCD_MspInit+0xdc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d151      	bne.n	800196c <HAL_PCD_MspInit+0xd4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 ffc7 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80018ec:	f7ff fb94 	bl	8001018 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80018f0:	f001 ffca 	bl	8003888 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_PCD_MspInit+0xe0>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001978 <HAL_PCD_MspInit+0xe0>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_PCD_MspInit+0xe0>)
 8001906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001912:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800192c:	230a      	movs	r3, #10
 800192e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001936:	4619      	mov	r1, r3
 8001938:	4810      	ldr	r0, [pc, #64]	@ (800197c <HAL_PCD_MspInit+0xe4>)
 800193a:	f000 fc03 	bl	8002144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_PCD_MspInit+0xe0>)
 8001940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <HAL_PCD_MspInit+0xe0>)
 8001946:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800194a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_PCD_MspInit+0xe0>)
 8001950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2065      	movs	r0, #101	@ 0x65
 8001962:	f000 fac8 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001966:	2065      	movs	r0, #101	@ 0x65
 8001968:	f000 fadf 	bl	8001f2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800196c:	bf00      	nop
 800196e:	37e8      	adds	r7, #232	@ 0xe8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40080000 	.word	0x40080000
 8001978:	58024400 	.word	0x58024400
 800197c:	58020000 	.word	0x58020000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <NMI_Handler+0x4>

08001988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <MemManage_Handler+0x4>

08001998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d6:	f000 f963 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <OTG_FS_IRQHandler+0x10>)
 80019e6:	f000 ffb6 	bl	8002956 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	240003e4 	.word	0x240003e4

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f8:	4b43      	ldr	r3, [pc, #268]	@ (8001b08 <SystemInit+0x114>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fe:	4a42      	ldr	r2, [pc, #264]	@ (8001b08 <SystemInit+0x114>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a08:	4b40      	ldr	r3, [pc, #256]	@ (8001b0c <SystemInit+0x118>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	2b06      	cmp	r3, #6
 8001a12:	d807      	bhi.n	8001a24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a14:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <SystemInit+0x118>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 030f 	bic.w	r3, r3, #15
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b0c <SystemInit+0x118>)
 8001a1e:	f043 0307 	orr.w	r3, r3, #7
 8001a22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a24:	4b3a      	ldr	r3, [pc, #232]	@ (8001b10 <SystemInit+0x11c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a39      	ldr	r2, [pc, #228]	@ (8001b10 <SystemInit+0x11c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a30:	4b37      	ldr	r3, [pc, #220]	@ (8001b10 <SystemInit+0x11c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a36:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <SystemInit+0x11c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4935      	ldr	r1, [pc, #212]	@ (8001b10 <SystemInit+0x11c>)
 8001a3c:	4b35      	ldr	r3, [pc, #212]	@ (8001b14 <SystemInit+0x120>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a42:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <SystemInit+0x118>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b0c <SystemInit+0x118>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 030f 	bic.w	r3, r3, #15
 8001a56:	4a2d      	ldr	r2, [pc, #180]	@ (8001b0c <SystemInit+0x118>)
 8001a58:	f043 0307 	orr.w	r3, r3, #7
 8001a5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <SystemInit+0x11c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a64:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <SystemInit+0x11c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a6a:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <SystemInit+0x11c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a70:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <SystemInit+0x11c>)
 8001a72:	4a29      	ldr	r2, [pc, #164]	@ (8001b18 <SystemInit+0x124>)
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a76:	4b26      	ldr	r3, [pc, #152]	@ (8001b10 <SystemInit+0x11c>)
 8001a78:	4a28      	ldr	r2, [pc, #160]	@ (8001b1c <SystemInit+0x128>)
 8001a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <SystemInit+0x11c>)
 8001a7e:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <SystemInit+0x12c>)
 8001a80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a82:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <SystemInit+0x11c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <SystemInit+0x11c>)
 8001a8a:	4a25      	ldr	r2, [pc, #148]	@ (8001b20 <SystemInit+0x12c>)
 8001a8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <SystemInit+0x11c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <SystemInit+0x11c>)
 8001a96:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <SystemInit+0x12c>)
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <SystemInit+0x11c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <SystemInit+0x11c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <SystemInit+0x11c>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <SystemInit+0x11c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <SystemInit+0x130>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <SystemInit+0x134>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001abe:	d202      	bcs.n	8001ac6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <SystemInit+0x138>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <SystemInit+0x11c>)
 8001ac8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d113      	bne.n	8001afc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <SystemInit+0x11c>)
 8001ad6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ada:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <SystemInit+0x11c>)
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <SystemInit+0x13c>)
 8001ae6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001aea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <SystemInit+0x11c>)
 8001aee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001af2:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <SystemInit+0x11c>)
 8001af4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001af8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	52002000 	.word	0x52002000
 8001b10:	58024400 	.word	0x58024400
 8001b14:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b18:	02020200 	.word	0x02020200
 8001b1c:	01ff0000 	.word	0x01ff0000
 8001b20:	01010280 	.word	0x01010280
 8001b24:	5c001000 	.word	0x5c001000
 8001b28:	ffff0000 	.word	0xffff0000
 8001b2c:	51008108 	.word	0x51008108
 8001b30:	52004000 	.word	0x52004000

08001b34 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <ExitRun0Mode+0x2c>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <ExitRun0Mode+0x2c>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b44:	bf00      	nop
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <ExitRun0Mode+0x2c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f9      	beq.n	8001b46 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	58024800 	.word	0x58024800

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ba0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b68:	f7ff ffe4 	bl	8001b34 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b6c:	f7ff ff42 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f009 ffe1 	bl	800bb5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7fe fd33 	bl	8000604 <main>
  bx  lr
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ba4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ba8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001bac:	0800bc14 	.word	0x0800bc14
  ldr r2, =_sbss
 8001bb0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001bb4:	240008cc 	.word	0x240008cc

08001bb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC3_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f000 f98c 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bc8:	f002 fc7e 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_Init+0x68>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	4913      	ldr	r1, [pc, #76]	@ (8001c28 <HAL_Init+0x6c>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_Init+0x68>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_Init+0x6c>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_Init+0x70>)
 8001bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c00:	4a0b      	ldr	r2, [pc, #44]	@ (8001c30 <HAL_Init+0x74>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c06:	200f      	movs	r0, #15
 8001c08:	f000 f814 	bl	8001c34 <HAL_InitTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e002      	b.n	8001c1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c16:	f7ff fa05 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58024400 	.word	0x58024400
 8001c28:	0800bbcc 	.word	0x0800bbcc
 8001c2c:	24000004 	.word	0x24000004
 8001c30:	24000000 	.word	0x24000000

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e021      	b.n	8001c8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <HAL_InitTick+0x64>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_InitTick+0x60>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f971 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f93b 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_InitTick+0x68>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2400000c 	.word	0x2400000c
 8001c98:	24000000 	.word	0x24000000
 8001c9c:	24000008 	.word	0x24000008

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2400000c 	.word	0x2400000c
 8001cc4:	240008c8 	.word	0x240008c8

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	240008c8 	.word	0x240008c8

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2400000c 	.word	0x2400000c

08001d28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetREVID+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0c1b      	lsrs	r3, r3, #16
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	5c001000 	.word	0x5c001000

08001d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x40>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00
 8001d84:	05fa0000 	.word	0x05fa0000

08001d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	@ (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff40 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff90 	bl	8001e34 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5f 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa4 	bl	8001e9c <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f64:	f3bf 8f5f 	dmb	sy
}
 8001f68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_MPU_Disable+0x28>)
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	4a06      	ldr	r2, [pc, #24]	@ (8001f88 <HAL_MPU_Disable+0x28>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f74:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_MPU_Disable+0x2c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00
 8001f8c:	e000ed90 	.word	0xe000ed90

08001f90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f98:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc8 <HAL_MPU_Enable+0x38>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_MPU_Enable+0x3c>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	4a09      	ldr	r2, [pc, #36]	@ (8001fcc <HAL_MPU_Enable+0x3c>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fae:	f3bf 8f4f 	dsb	sy
}
 8001fb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fb4:	f3bf 8f6f 	isb	sy
}
 8001fb8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed90 	.word	0xe000ed90
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	785a      	ldrb	r2, [r3, #1]
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_MPU_ConfigRegion+0x7c>)
 8001fde:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <HAL_MPU_ConfigRegion+0x7c>)
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_MPU_ConfigRegion+0x7c>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fec:	4a17      	ldr	r2, [pc, #92]	@ (800204c <HAL_MPU_ConfigRegion+0x7c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7b1b      	ldrb	r3, [r3, #12]
 8001ff8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7adb      	ldrb	r3, [r3, #11]
 8001ffe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7a9b      	ldrb	r3, [r3, #10]
 8002006:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7b5b      	ldrb	r3, [r3, #13]
 800200e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b9b      	ldrb	r3, [r3, #14]
 8002016:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7bdb      	ldrb	r3, [r3, #15]
 800201e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7a5b      	ldrb	r3, [r3, #9]
 8002026:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7a1b      	ldrb	r3, [r3, #8]
 800202e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002030:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800203a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800203c:	6113      	str	r3, [r2, #16]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed90 	.word	0xe000ed90

08002050 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e069      	b.n	8002136 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fff2 	bl	8001058 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <HAL_DCMI_Init+0xf0>)
 8002096:	400b      	ands	r3, r1
 8002098:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020de:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d112      	bne.n	8002116 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7f1b      	ldrb	r3, [r3, #28]
 80020f4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7f5b      	ldrb	r3, [r3, #29]
 80020fa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80020fc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7f9b      	ldrb	r3, [r3, #30]
 8002102:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002104:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7fdb      	ldrb	r3, [r3, #31]
 800210c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002112:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002114:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 021e 	orr.w	r2, r2, #30
 8002124:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	ffe0f007 	.word	0xffe0f007

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	@ 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002152:	4b89      	ldr	r3, [pc, #548]	@ (8002378 <HAL_GPIO_Init+0x234>)
 8002154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002156:	e194      	b.n	8002482 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8186 	beq.w	800247c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d005      	beq.n	8002188 <HAL_GPIO_Init+0x44>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d130      	bne.n	80021ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021be:	2201      	movs	r2, #1
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 0201 	and.w	r2, r3, #1
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d017      	beq.n	8002226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d123      	bne.n	800227a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	69b9      	ldr	r1, [r7, #24]
 8002276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80e0 	beq.w	800247c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_GPIO_Init+0x238>)
 80022be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022c2:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <HAL_GPIO_Init+0x238>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_GPIO_Init+0x238>)
 80022ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a29      	ldr	r2, [pc, #164]	@ (8002380 <HAL_GPIO_Init+0x23c>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a20      	ldr	r2, [pc, #128]	@ (8002384 <HAL_GPIO_Init+0x240>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d052      	beq.n	80023ac <HAL_GPIO_Init+0x268>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1f      	ldr	r2, [pc, #124]	@ (8002388 <HAL_GPIO_Init+0x244>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_GPIO_Init+0x22e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1e      	ldr	r2, [pc, #120]	@ (800238c <HAL_GPIO_Init+0x248>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x22a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <HAL_GPIO_Init+0x24c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x226>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	@ (8002394 <HAL_GPIO_Init+0x250>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x222>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <HAL_GPIO_Init+0x254>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x21e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1a      	ldr	r2, [pc, #104]	@ (800239c <HAL_GPIO_Init+0x258>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x21a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <HAL_GPIO_Init+0x25c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x216>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a18      	ldr	r2, [pc, #96]	@ (80023a4 <HAL_GPIO_Init+0x260>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x212>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a17      	ldr	r2, [pc, #92]	@ (80023a8 <HAL_GPIO_Init+0x264>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x20e>
 800234e:	2309      	movs	r3, #9
 8002350:	e02d      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002352:	230a      	movs	r3, #10
 8002354:	e02b      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002356:	2308      	movs	r3, #8
 8002358:	e029      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800235a:	2307      	movs	r3, #7
 800235c:	e027      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800235e:	2306      	movs	r3, #6
 8002360:	e025      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002362:	2305      	movs	r3, #5
 8002364:	e023      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002366:	2304      	movs	r3, #4
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800236a:	2303      	movs	r3, #3
 800236c:	e01f      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800236e:	2302      	movs	r3, #2
 8002370:	e01d      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002372:	2301      	movs	r3, #1
 8002374:	e01b      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002376:	bf00      	nop
 8002378:	58000080 	.word	0x58000080
 800237c:	58024400 	.word	0x58024400
 8002380:	58000400 	.word	0x58000400
 8002384:	58020000 	.word	0x58020000
 8002388:	58020400 	.word	0x58020400
 800238c:	58020800 	.word	0x58020800
 8002390:	58020c00 	.word	0x58020c00
 8002394:	58021000 	.word	0x58021000
 8002398:	58021400 	.word	0x58021400
 800239c:	58021800 	.word	0x58021800
 80023a0:	58021c00 	.word	0x58021c00
 80023a4:	58022000 	.word	0x58022000
 80023a8:	58022400 	.word	0x58022400
 80023ac:	2300      	movs	r3, #0
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023be:	4938      	ldr	r1, [pc, #224]	@ (80024a0 <HAL_GPIO_Init+0x35c>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f ae63 	bne.w	8002158 <HAL_GPIO_Init+0x14>
  }
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	@ 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58000400 	.word	0x58000400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e08b      	b.n	8002602 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fe78 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	@ 0x24
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	e006      	b.n	8002560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800255e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d108      	bne.n	800257a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	e007      	b.n	800258a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_I2C_Init+0x134>)
 8002596:	430b      	orrs	r3, r1
 8002598:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69d9      	ldr	r1, [r3, #28]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1a      	ldr	r2, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	02008000 	.word	0x02008000

08002610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	d138      	bne.n	8002698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002630:	2302      	movs	r3, #2
 8002632:	e032      	b.n	800269a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2224      	movs	r2, #36	@ 0x24
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e000      	b.n	800269a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002698:	2302      	movs	r3, #2
  }
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d139      	bne.n	8002730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e033      	b.n	8002732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2224      	movs	r2, #36	@ 0x24
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af02      	add	r7, sp, #8
 8002744:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0fe      	b.n	800294e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d106      	bne.n	800276a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff f897 	bl	8001898 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2203      	movs	r2, #3
 800276e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f008 fcd8 	bl	800b12c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7c1a      	ldrb	r2, [r3, #16]
 8002784:	f88d 2000 	strb.w	r2, [sp]
 8002788:	3304      	adds	r3, #4
 800278a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278c:	f008 fbba 	bl	800af04 <USB_CoreInit>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0d5      	b.n	800294e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f008 fcd0 	bl	800b14e <USB_SetCurrentMode>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c6      	b.n	800294e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e04a      	b.n	800285c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3315      	adds	r3, #21
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3314      	adds	r3, #20
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	b298      	uxth	r0, r3
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	332e      	adds	r3, #46	@ 0x2e
 8002802:	4602      	mov	r2, r0
 8002804:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3318      	adds	r3, #24
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	331c      	adds	r3, #28
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3320      	adds	r3, #32
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3324      	adds	r3, #36	@ 0x24
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3af      	bcc.n	80027c6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e044      	b.n	80028f6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	3301      	adds	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	791b      	ldrb	r3, [r3, #4]
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3b5      	bcc.n	800286c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	7c1a      	ldrb	r2, [r3, #16]
 8002908:	f88d 2000 	strb.w	r2, [sp]
 800290c:	3304      	adds	r3, #4
 800290e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002910:	f008 fc6a 	bl	800b1e8 <USB_DevInit>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e013      	b.n	800294e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7b1b      	ldrb	r3, [r3, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 ff39 	bl	80037b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f008 ff8a 	bl	800b860 <USB_DevDisconnect>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002956:	b590      	push	{r4, r7, lr}
 8002958:	b08d      	sub	sp, #52	@ 0x34
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f009 f82b 	bl	800b9c8 <USB_GetMode>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 84b9 	bne.w	80032ec <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f008 ff8f 	bl	800b8a2 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 84af 	beq.w	80032ea <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f008 ff7c 	bl	800b8a2 <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d107      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f002 0202 	and.w	r2, r2, #2
 80029c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f008 ff6a 	bl	800b8a2 <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d161      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0210 	bic.w	r2, r2, #16
 80029e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	f003 020f 	and.w	r2, r3, #15
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002a0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a12:	d124      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d035      	beq.n	8002a8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	6a38      	ldr	r0, [r7, #32]
 8002a34:	f008 febc 	bl	800b7b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a44:	441a      	add	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a56:	441a      	add	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	e016      	b.n	8002a8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002a64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002a68:	d110      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a70:	2208      	movs	r2, #8
 8002a72:	4619      	mov	r1, r3
 8002a74:	6a38      	ldr	r0, [r7, #32]
 8002a76:	f008 fe9b 	bl	800b7b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a86:	441a      	add	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0210 	orr.w	r2, r2, #16
 8002a9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f008 fefe 	bl	800b8a2 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ab0:	f040 80a7 	bne.w	8002c02 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f008 ff03 	bl	800b8c8 <USB_ReadDevAllOutEpInterrupt>
 8002ac2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ac4:	e099      	b.n	8002bfa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 808e 	beq.w	8002bee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f008 ff27 	bl	800b930 <USB_ReadDevOutEPInterrupt>
 8002ae2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002afa:	461a      	mov	r2, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fd28 	bl	8003558 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00c      	beq.n	8002b2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2308      	movs	r3, #8
 8002b22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fdfe 	bl	8003728 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b42:	461a      	mov	r2, r3
 8002b44:	2310      	movs	r3, #16
 8002b46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d030      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5a:	2b80      	cmp	r3, #128	@ 0x80
 8002b5c:	d109      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	3304      	adds	r3, #4
 8002b86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	78db      	ldrb	r3, [r3, #3]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d108      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fbf2 	bl	8003386 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2320      	movs	r3, #32
 8002bce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be6:	461a      	mov	r2, r3
 8002be8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f af62 	bne.w	8002ac6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f008 fe4b 	bl	800b8a2 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c16:	f040 80db 	bne.w	8002dd0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f008 fe6c 	bl	800b8fc <USB_ReadDevAllInEpInterrupt>
 8002c24:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002c2a:	e0cd      	b.n	8002dc8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 80c2 	beq.w	8002dbc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f008 fe92 	bl	800b96c <USB_ReadDevInEPInterrupt>
 8002c48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d057      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69f9      	ldr	r1, [r7, #28]
 8002c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c74:	4013      	ands	r3, r2
 8002c76:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c84:	461a      	mov	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d132      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4403      	add	r3, r0
 8002cb2:	331c      	adds	r3, #28
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4419      	add	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4403      	add	r3, r0
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d113      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x3a2>
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3324      	adds	r3, #36	@ 0x24
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d108      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	f008 fe9a 	bl	800ba2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb03 	bl	800330a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d36:	461a      	mov	r2, r3
 8002d38:	2310      	movs	r3, #16
 8002d3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d52:	461a      	mov	r2, r3
 8002d54:	2340      	movs	r3, #64	@ 0x40
 8002d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d023      	beq.n	8002daa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d64:	6a38      	ldr	r0, [r7, #32]
 8002d66:	f008 fb9d 	bl	800b4a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	3310      	adds	r3, #16
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	78db      	ldrb	r3, [r3, #3]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fb03 	bl	800339e <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da4:	461a      	mov	r2, r3
 8002da6:	2302      	movs	r3, #2
 8002da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002db4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fb42 	bl	8003440 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f af2e 	bne.w	8002c2c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f008 fd64 	bl	800b8a2 <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002de4:	d122      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d108      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fcf4 	bl	80037fc <HAL_PCDEx_LPM_Callback>
 8002e14:	e002      	b.n	8002e1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 faab 	bl	8003372 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 fd36 	bl	800b8a2 <USB_ReadInterrupts>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e40:	d112      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d102      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa83 	bl	800335e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f008 fd18 	bl	800b8a2 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e7c:	d121      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002e8c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fca1 	bl	80037fc <HAL_PCDEx_LPM_Callback>
 8002eba:	e002      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fa4e 	bl	800335e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f008 fceb 	bl	800b8a2 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed6:	f040 80b7 	bne.w	8003048 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f008 fad5 	bl	800b4a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002efe:	e046      	b.n	8002f8e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f24:	0151      	lsls	r1, r2, #5
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	440a      	add	r2, r1
 8002f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f40:	461a      	mov	r2, r3
 8002f42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f58:	0151      	lsls	r1, r2, #5
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	440a      	add	r2, r1
 8002f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f78:	0151      	lsls	r1, r2, #5
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	440a      	add	r2, r1
 8002f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d3b2      	bcc.n	8002f00 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7bdb      	ldrb	r3, [r3, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fc6:	f043 030b 	orr.w	r3, r3, #11
 8002fca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fdc:	f043 030b 	orr.w	r3, r3, #11
 8002fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe2:	e015      	b.n	8003010 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800300a:	f043 030b 	orr.w	r3, r3, #11
 800300e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800301e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003022:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003032:	461a      	mov	r2, r3
 8003034:	f008 fcfa 	bl	800ba2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f008 fc28 	bl	800b8a2 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305c:	d123      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f008 fcbe 	bl	800b9e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f008 fa92 	bl	800b596 <USB_GetDevSpeed>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681c      	ldr	r4, [r3, #0]
 800307e:	f001 fb9d 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8003082:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003088:	461a      	mov	r2, r3
 800308a:	4620      	mov	r0, r4
 800308c:	f007 ffac 	bl	800afe8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f95a 	bl	800334a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f008 fbf9 	bl	800b8a2 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d10a      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f93b 	bl	8003336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f002 0208 	and.w	r2, r2, #8
 80030ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f008 fbe4 	bl	800b8a2 <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e0:	2b80      	cmp	r3, #128	@ 0x80
 80030e2:	d123      	bne.n	800312c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f4:	e014      	b.n	8003120 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f962 	bl	80033de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	3301      	adds	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	791b      	ldrb	r3, [r3, #4]
 8003124:	461a      	mov	r2, r3
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	4293      	cmp	r3, r2
 800312a:	d3e4      	bcc.n	80030f6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f008 fbb6 	bl	800b8a2 <USB_ReadInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003140:	d13c      	bne.n	80031bc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
 8003146:	e02b      	b.n	80031a0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3318      	adds	r3, #24
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d115      	bne.n	800319a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800316e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	da12      	bge.n	800319a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3317      	adds	r3, #23
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003190:	b2db      	uxtb	r3, r3
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f922 	bl	80033de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	791b      	ldrb	r3, [r3, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d3cd      	bcc.n	8003148 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f008 fb6e 	bl	800b8a2 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031d0:	d156      	bne.n	8003280 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d2:	2301      	movs	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d6:	e045      	b.n	8003264 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d12e      	bne.n	800325e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003200:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	da2b      	bge.n	800325e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	0c1a      	lsrs	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003210:	4053      	eors	r3, r2
 8003212:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	d121      	bne.n	800325e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800325a:	6053      	str	r3, [r2, #4]
            break;
 800325c:	e008      	b.n	8003270 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	3301      	adds	r3, #1
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	461a      	mov	r2, r3
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	4293      	cmp	r3, r2
 800326e:	d3b3      	bcc.n	80031d8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800327e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f008 fb0c 	bl	800b8a2 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003294:	d10a      	bne.n	80032ac <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f88d 	bl	80033b6 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f008 faf6 	bl	800b8a2 <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d115      	bne.n	80032ec <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f879 	bl	80033ca <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	e000      	b.n	80032ec <HAL_PCD_IRQHandler+0x996>
      return;
 80032ea:	bf00      	nop
    }
  }
}
 80032ec:	3734      	adds	r7, #52	@ 0x34
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80033ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	da0c      	bge.n	800340c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	3310      	adds	r3, #16
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e00c      	b.n	8003426 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 020f 	and.w	r2, r3, #15
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	4618      	mov	r0, r3
 800342e:	f008 f8d7 	bl	800b5e0 <USB_EPStopXfer>
 8003432:	4603      	mov	r3, r0
 8003434:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003436:	7afb      	ldrb	r3, [r7, #11]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	3310      	adds	r3, #16
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d901      	bls.n	8003478 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e06b      	b.n	8003550 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	429a      	cmp	r2, r3
 800348c:	d902      	bls.n	8003494 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3303      	adds	r3, #3
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800349c:	e02a      	b.n	80034f4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d902      	bls.n	80034ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3303      	adds	r3, #3
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68d9      	ldr	r1, [r3, #12]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f008 f92c 	bl	800b734 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	429a      	cmp	r2, r3
 8003508:	d809      	bhi.n	800351e <PCD_WriteEmptyTxFifo+0xde>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003512:	429a      	cmp	r2, r3
 8003514:	d203      	bcs.n	800351e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1bf      	bne.n	800349e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	429a      	cmp	r2, r3
 8003528:	d811      	bhi.n	800354e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	2201      	movs	r2, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800353e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	43db      	mvns	r3, r3
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800354a:	4013      	ands	r3, r2
 800354c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	333c      	adds	r3, #60	@ 0x3c
 8003570:	3304      	adds	r3, #4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	799b      	ldrb	r3, [r3, #6]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d17b      	bne.n	8003686 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4a61      	ldr	r2, [pc, #388]	@ (8003720 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	f240 80b9 	bls.w	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80b3 	beq.w	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035c0:	6093      	str	r3, [r2, #8]
 80035c2:	e0a7      	b.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	2320      	movs	r3, #32
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	e098      	b.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 8093 	bne.w	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d90f      	bls.n	8003616 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360c:	461a      	mov	r2, r3
 800360e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003612:	6093      	str	r3, [r2, #8]
 8003614:	e07e      	b.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	0159      	lsls	r1, r3, #5
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	440b      	add	r3, r1
 8003638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	1ad2      	subs	r2, r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d114      	bne.n	8003678 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003660:	461a      	mov	r2, r3
 8003662:	2101      	movs	r1, #1
 8003664:	f008 f9e2 	bl	800ba2c <USB_EP0_OutStart>
 8003668:	e006      	b.n	8003678 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	4619      	mov	r1, r3
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff fe37 	bl	80032f2 <HAL_PCD_DataOutStageCallback>
 8003684:	e046      	b.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d124      	bne.n	80036d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036aa:	6093      	str	r3, [r2, #8]
 80036ac:	e032      	b.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c4:	461a      	mov	r2, r3
 80036c6:	2320      	movs	r3, #32
 80036c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fe0e 	bl	80032f2 <HAL_PCD_DataOutStageCallback>
 80036d6:	e01d      	b.n	8003714 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d114      	bne.n	8003708 <PCD_EP_OutXfrComplete_int+0x1b0>
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003700:	461a      	mov	r2, r3
 8003702:	2100      	movs	r1, #0
 8003704:	f008 f992 	bl	800ba2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fdef 	bl	80032f2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	4f54300a 	.word	0x4f54300a
 8003724:	4f54310a 	.word	0x4f54310a

08003728 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	333c      	adds	r3, #60	@ 0x3c
 8003740:	3304      	adds	r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a15      	ldr	r2, [pc, #84]	@ (80037b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d90e      	bls.n	800377c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003764:	2b00      	cmp	r3, #0
 8003766:	d009      	beq.n	800377c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fdd0 	bl	8003322 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d90c      	bls.n	80037a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	799b      	ldrb	r3, [r3, #6]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d108      	bne.n	80037a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800379c:	461a      	mov	r2, r3
 800379e:	2101      	movs	r1, #1
 80037a0:	f008 f944 	bl	800ba2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	4f54300a 	.word	0x4f54300a

080037b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e2:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	10000003 	.word	0x10000003

080037fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800381c:	4b19      	ldr	r3, [pc, #100]	@ (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d00a      	beq.n	800383e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003828:	4b16      	ldr	r3, [pc, #88]	@ (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e01f      	b.n	800387a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e01d      	b.n	800387a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800383e:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	490f      	ldr	r1, [pc, #60]	@ (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800384e:	f7fe fa3b 	bl	8001cc8 <HAL_GetTick>
 8003852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003854:	e009      	b.n	800386a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003856:	f7fe fa37 	bl	8001cc8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003864:	d901      	bls.n	800386a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <HAL_PWREx_ConfigSupply+0x70>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003876:	d1ee      	bne.n	8003856 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	58024800 	.word	0x58024800

08003888 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003896:	60d3      	str	r3, [r2, #12]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	58024800 	.word	0x58024800

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	@ 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f000 bc48 	b.w	800414c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8088 	beq.w	80039da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4b99      	ldr	r3, [pc, #612]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038d4:	4b96      	ldr	r3, [pc, #600]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d007      	beq.n	80038f0 <HAL_RCC_OscConfig+0x48>
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	2b18      	cmp	r3, #24
 80038e4:	d111      	bne.n	800390a <HAL_RCC_OscConfig+0x62>
 80038e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d06d      	beq.n	80039d8 <HAL_RCC_OscConfig+0x130>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d169      	bne.n	80039d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f000 bc21 	b.w	800414c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x7a>
 8003914:	4b86      	ldr	r3, [pc, #536]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a85      	ldr	r2, [pc, #532]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e02e      	b.n	8003980 <HAL_RCC_OscConfig+0xd8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x9c>
 800392a:	4b81      	ldr	r3, [pc, #516]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a80      	ldr	r2, [pc, #512]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b7e      	ldr	r3, [pc, #504]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800393c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e01d      	b.n	8003980 <HAL_RCC_OscConfig+0xd8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0xc0>
 800394e:	4b78      	ldr	r3, [pc, #480]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a77      	ldr	r2, [pc, #476]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b75      	ldr	r3, [pc, #468]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a74      	ldr	r2, [pc, #464]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0xd8>
 8003968:	4b71      	ldr	r3, [pc, #452]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a70      	ldr	r2, [pc, #448]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	4b6e      	ldr	r3, [pc, #440]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6d      	ldr	r2, [pc, #436]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe f99e 	bl	8001cc8 <HAL_GetTick>
 800398c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe f99a 	bl	8001cc8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	@ 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e3d4      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a2:	4b63      	ldr	r3, [pc, #396]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0xe8>
 80039ae:	e014      	b.n	80039da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe f98a 	bl	8001cc8 <HAL_GetTick>
 80039b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe f986 	bl	8001cc8 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	@ 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e3c0      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ca:	4b59      	ldr	r3, [pc, #356]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x110>
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80ca 	beq.w	8003b7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039e8:	4b51      	ldr	r3, [pc, #324]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_RCC_OscConfig+0x166>
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2b18      	cmp	r3, #24
 8003a02:	d156      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x20a>
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d151      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0e:	4b48      	ldr	r3, [pc, #288]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x17e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e392      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a26:	4b42      	ldr	r3, [pc, #264]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 0219 	bic.w	r2, r3, #25
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	493f      	ldr	r1, [pc, #252]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f946 	bl	8001cc8 <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a40:	f7fe f942 	bl	8001cc8 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e37c      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a52:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	f7fe f963 	bl	8001d28 <HAL_GetREVID>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d817      	bhi.n	8003a9c <HAL_RCC_OscConfig+0x1f4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b40      	cmp	r3, #64	@ 0x40
 8003a72:	d108      	bne.n	8003a86 <HAL_RCC_OscConfig+0x1de>
 8003a74:	4b2e      	ldr	r3, [pc, #184]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a84:	e07a      	b.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	4926      	ldr	r1, [pc, #152]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9a:	e06f      	b.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	061b      	lsls	r3, r3, #24
 8003aaa:	4921      	ldr	r1, [pc, #132]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab0:	e064      	b.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d047      	beq.n	8003b4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aba:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 0219 	bic.w	r2, r3, #25
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	491a      	ldr	r1, [pc, #104]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe f8fc 	bl	8001cc8 <HAL_GetTick>
 8003ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fe f8f8 	bl	8001cc8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e332      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae6:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	f7fe f919 	bl	8001d28 <HAL_GetREVID>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d819      	bhi.n	8003b34 <HAL_RCC_OscConfig+0x28c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d108      	bne.n	8003b1a <HAL_RCC_OscConfig+0x272>
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b10:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b16:	6053      	str	r3, [r2, #4]
 8003b18:	e030      	b.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	031b      	lsls	r3, r3, #12
 8003b28:	4901      	ldr	r1, [pc, #4]	@ (8003b30 <HAL_RCC_OscConfig+0x288>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
 8003b2e:	e025      	b.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
 8003b30:	58024400 	.word	0x58024400
 8003b34:	4b9a      	ldr	r3, [pc, #616]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	4997      	ldr	r1, [pc, #604]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e018      	b.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b95      	ldr	r3, [pc, #596]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a94      	ldr	r2, [pc, #592]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fe f8b7 	bl	8001cc8 <HAL_GetTick>
 8003b5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fe f8b3 	bl	8001cc8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e2ed      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b70:	4b8b      	ldr	r3, [pc, #556]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a9 	beq.w	8003cdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8a:	4b85      	ldr	r3, [pc, #532]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b94:	4b82      	ldr	r3, [pc, #520]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d007      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x308>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b18      	cmp	r3, #24
 8003ba4:	d13a      	bne.n	8003c1c <HAL_RCC_OscConfig+0x374>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d135      	bne.n	8003c1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x320>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b80      	cmp	r3, #128	@ 0x80
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e2c1      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bc8:	f7fe f8ae 	bl	8001d28 <HAL_GetREVID>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d817      	bhi.n	8003c06 <HAL_RCC_OscConfig+0x35e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x348>
 8003bde:	4b70      	ldr	r3, [pc, #448]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003be6:	4a6e      	ldr	r2, [pc, #440]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003be8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bee:	e075      	b.n	8003cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	069b      	lsls	r3, r3, #26
 8003bfe:	4968      	ldr	r1, [pc, #416]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c04:	e06a      	b.n	8003cdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c06:	4b66      	ldr	r3, [pc, #408]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	4962      	ldr	r1, [pc, #392]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c1a:	e05f      	b.n	8003cdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d042      	beq.n	8003caa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c24:	4b5e      	ldr	r3, [pc, #376]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5d      	ldr	r2, [pc, #372]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe f84a 	bl	8001cc8 <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c38:	f7fe f846 	bl	8001cc8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e280      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c4a:	4b55      	ldr	r3, [pc, #340]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c56:	f7fe f867 	bl	8001d28 <HAL_GetREVID>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d817      	bhi.n	8003c94 <HAL_RCC_OscConfig+0x3ec>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d108      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3d6>
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c74:	4a4a      	ldr	r2, [pc, #296]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c7a:	6053      	str	r3, [r2, #4]
 8003c7c:	e02e      	b.n	8003cdc <HAL_RCC_OscConfig+0x434>
 8003c7e:	4b48      	ldr	r3, [pc, #288]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	069b      	lsls	r3, r3, #26
 8003c8c:	4944      	ldr	r1, [pc, #272]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
 8003c92:	e023      	b.n	8003cdc <HAL_RCC_OscConfig+0x434>
 8003c94:	4b42      	ldr	r3, [pc, #264]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	493f      	ldr	r1, [pc, #252]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60cb      	str	r3, [r1, #12]
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003caa:	4b3d      	ldr	r3, [pc, #244]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3c      	ldr	r2, [pc, #240]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f807 	bl	8001cc8 <HAL_GetTick>
 8003cba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f803 	bl	8001cc8 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e23d      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cd0:	4b33      	ldr	r3, [pc, #204]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d036      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd ffe4 	bl	8001cc8 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d04:	f7fd ffe0 	bl	8001cc8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e21a      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d16:	4b22      	ldr	r3, [pc, #136]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x45c>
 8003d22:	e018      	b.n	8003d56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d24:	4b1e      	ldr	r3, [pc, #120]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d28:	4a1d      	ldr	r2, [pc, #116]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd ffca 	bl	8001cc8 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fd ffc6 	bl	8001cc8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e200      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d4a:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d039      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01c      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d76:	f7fd ffa7 	bl	8001cc8 <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d7e:	f7fd ffa3 	bl	8001cc8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e1dd      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d90:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x4d6>
 8003d9c:	e01b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x52e>
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003da4:	4b9b      	ldr	r3, [pc, #620]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a9a      	ldr	r2, [pc, #616]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003daa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003db0:	f7fd ff8a 	bl	8001cc8 <HAL_GetTick>
 8003db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db8:	f7fd ff86 	bl	8001cc8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1c0      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dca:	4b92      	ldr	r3, [pc, #584]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8081 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003de4:	4b8c      	ldr	r3, [pc, #560]	@ (8004018 <HAL_RCC_OscConfig+0x770>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a8b      	ldr	r2, [pc, #556]	@ (8004018 <HAL_RCC_OscConfig+0x770>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df0:	f7fd ff6a 	bl	8001cc8 <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd ff66 	bl	8001cc8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	@ 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1a0      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0a:	4b83      	ldr	r3, [pc, #524]	@ (8004018 <HAL_RCC_OscConfig+0x770>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x584>
 8003e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	4a7c      	ldr	r2, [pc, #496]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2a:	e02d      	b.n	8003e88 <HAL_RCC_OscConfig+0x5e0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x5a6>
 8003e34:	4b77      	ldr	r3, [pc, #476]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a76      	ldr	r2, [pc, #472]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e40:	4b74      	ldr	r3, [pc, #464]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a73      	ldr	r2, [pc, #460]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	e01c      	b.n	8003e88 <HAL_RCC_OscConfig+0x5e0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5c8>
 8003e56:	4b6f      	ldr	r3, [pc, #444]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	f043 0304 	orr.w	r3, r3, #4
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e62:	4b6c      	ldr	r3, [pc, #432]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	4a6b      	ldr	r2, [pc, #428]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCC_OscConfig+0x5e0>
 8003e70:	4b68      	ldr	r3, [pc, #416]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e74:	4a67      	ldr	r2, [pc, #412]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7c:	4b65      	ldr	r3, [pc, #404]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e80:	4a64      	ldr	r2, [pc, #400]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd ff1a 	bl	8001cc8 <HAL_GetTick>
 8003e94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fd ff16 	bl	8001cc8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e14e      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eae:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0ee      	beq.n	8003e98 <HAL_RCC_OscConfig+0x5f0>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd ff04 	bl	8001cc8 <HAL_GetTick>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd ff00 	bl	8001cc8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e138      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eda:	4b4e      	ldr	r3, [pc, #312]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ee      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 812d 	beq.w	800414a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ef0:	4b48      	ldr	r3, [pc, #288]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ef8:	2b18      	cmp	r3, #24
 8003efa:	f000 80bd 	beq.w	8004078 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	f040 809e 	bne.w	8004044 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f08:	4b42      	ldr	r3, [pc, #264]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a41      	ldr	r2, [pc, #260]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fed8 	bl	8001cc8 <HAL_GetTick>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd fed4 	bl	8001cc8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e10e      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2e:	4b39      	ldr	r3, [pc, #228]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3a:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f3e:	4b37      	ldr	r3, [pc, #220]	@ (800401c <HAL_RCC_OscConfig+0x774>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	4931      	ldr	r1, [pc, #196]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f62:	3b01      	subs	r3, #1
 8003f64:	025b      	lsls	r3, r3, #9
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f84:	4923      	ldr	r1, [pc, #140]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f8a:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	4a21      	ldr	r2, [pc, #132]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f96:	4b1f      	ldr	r3, [pc, #124]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9a:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <HAL_RCC_OscConfig+0x778>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fa2:	00d2      	lsls	r2, r2, #3
 8003fa4:	491b      	ldr	r1, [pc, #108]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	f023 020c 	bic.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	4917      	ldr	r1, [pc, #92]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	f023 0202 	bic.w	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc8:	4912      	ldr	r1, [pc, #72]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fce:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	4a10      	ldr	r2, [pc, #64]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fda:	4b0e      	ldr	r3, [pc, #56]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fde:	4a0d      	ldr	r2, [pc, #52]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ff2:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4a07      	ldr	r2, [pc, #28]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a04      	ldr	r2, [pc, #16]	@ (8004014 <HAL_RCC_OscConfig+0x76c>)
 8004004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400a:	f7fd fe5d 	bl	8001cc8 <HAL_GetTick>
 800400e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004010:	e011      	b.n	8004036 <HAL_RCC_OscConfig+0x78e>
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	58024800 	.word	0x58024800
 800401c:	fffffc0c 	.word	0xfffffc0c
 8004020:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004024:	f7fd fe50 	bl	8001cc8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e08a      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x77c>
 8004042:	e082      	b.n	800414a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004044:	4b43      	ldr	r3, [pc, #268]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a42      	ldr	r2, [pc, #264]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 800404a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fd fe3a 	bl	8001cc8 <HAL_GetTick>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004058:	f7fd fe36 	bl	8001cc8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e070      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800406a:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x7b0>
 8004076:	e068      	b.n	800414a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004078:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800407e:	4b35      	ldr	r3, [pc, #212]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b01      	cmp	r3, #1
 800408a:	d031      	beq.n	80040f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f003 0203 	and.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d12a      	bne.n	80040f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d122      	bne.n	80040f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d11a      	bne.n	80040f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	0a5b      	lsrs	r3, r3, #9
 80040be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d111      	bne.n	80040f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d108      	bne.n	80040f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e02b      	b.n	800414c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040f4:	4b17      	ldr	r3, [pc, #92]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 80040f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d01f      	beq.n	800414a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800410a:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	4a11      	ldr	r2, [pc, #68]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004116:	f7fd fdd7 	bl	8001cc8 <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800411c:	bf00      	nop
 800411e:	f7fd fdd3 	bl	8001cc8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	4293      	cmp	r3, r2
 8004128:	d0f9      	beq.n	800411e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 800412c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_RCC_OscConfig+0x8b0>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004136:	00d2      	lsls	r2, r2, #3
 8004138:	4906      	ldr	r1, [pc, #24]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 800413a:	4313      	orrs	r3, r2
 800413c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800413e:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a04      	ldr	r2, [pc, #16]	@ (8004154 <HAL_RCC_OscConfig+0x8ac>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	@ 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	ffff0007 	.word	0xffff0007

0800415c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e19c      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004170:	4b8a      	ldr	r3, [pc, #552]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d910      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b87      	ldr	r3, [pc, #540]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	4985      	ldr	r1, [pc, #532]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b83      	ldr	r3, [pc, #524]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e184      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	4b7b      	ldr	r3, [pc, #492]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d908      	bls.n	80041ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041bc:	4b78      	ldr	r3, [pc, #480]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4975      	ldr	r1, [pc, #468]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	4b70      	ldr	r3, [pc, #448]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d908      	bls.n	80041fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ea:	4b6d      	ldr	r3, [pc, #436]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	496a      	ldr	r1, [pc, #424]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	4b64      	ldr	r3, [pc, #400]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004214:	429a      	cmp	r2, r3
 8004216:	d908      	bls.n	800422a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004218:	4b61      	ldr	r3, [pc, #388]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	495e      	ldr	r1, [pc, #376]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004226:	4313      	orrs	r3, r2
 8004228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004242:	429a      	cmp	r2, r3
 8004244:	d908      	bls.n	8004258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004246:	4b56      	ldr	r3, [pc, #344]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4953      	ldr	r1, [pc, #332]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004254:	4313      	orrs	r3, r2
 8004256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	4b4d      	ldr	r3, [pc, #308]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	429a      	cmp	r2, r3
 8004272:	d908      	bls.n	8004286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b4a      	ldr	r3, [pc, #296]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f023 020f 	bic.w	r2, r3, #15
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4947      	ldr	r1, [pc, #284]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004282:	4313      	orrs	r3, r2
 8004284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d055      	beq.n	800433e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004292:	4b43      	ldr	r3, [pc, #268]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4940      	ldr	r1, [pc, #256]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042ac:	4b3c      	ldr	r3, [pc, #240]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d121      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0f6      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042c4:	4b36      	ldr	r3, [pc, #216]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d115      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ea      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042dc:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0de      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ec:	4b2c      	ldr	r3, [pc, #176]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0d6      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042fc:	4b28      	ldr	r3, [pc, #160]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	f023 0207 	bic.w	r2, r3, #7
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4925      	ldr	r1, [pc, #148]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800430a:	4313      	orrs	r3, r2
 800430c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430e:	f7fd fcdb 	bl	8001cc8 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004314:	e00a      	b.n	800432c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004316:	f7fd fcd7 	bl	8001cc8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e0be      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432c:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	429a      	cmp	r2, r3
 800433c:	d1eb      	bne.n	8004316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d010      	beq.n	800436c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	429a      	cmp	r2, r3
 8004358:	d208      	bcs.n	800436c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800435a:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f023 020f 	bic.w	r2, r3, #15
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	490e      	ldr	r1, [pc, #56]	@ (80043a0 <HAL_RCC_ClockConfig+0x244>)
 8004368:	4313      	orrs	r3, r2
 800436a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d214      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	4906      	ldr	r1, [pc, #24]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b04      	ldr	r3, [pc, #16]	@ (800439c <HAL_RCC_ClockConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e086      	b.n	80044aa <HAL_RCC_ClockConfig+0x34e>
 800439c:	52002000 	.word	0x52002000
 80043a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	4b3f      	ldr	r3, [pc, #252]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043bc:	429a      	cmp	r2, r3
 80043be:	d208      	bcs.n	80043d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043c0:	4b3c      	ldr	r3, [pc, #240]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	4939      	ldr	r1, [pc, #228]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d010      	beq.n	8004400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	4b34      	ldr	r3, [pc, #208]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d208      	bcs.n	8004400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ee:	4b31      	ldr	r3, [pc, #196]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	492e      	ldr	r1, [pc, #184]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004418:	429a      	cmp	r2, r3
 800441a:	d208      	bcs.n	800442e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4922      	ldr	r1, [pc, #136]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800442a:	4313      	orrs	r3, r2
 800442c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d010      	beq.n	800445c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004446:	429a      	cmp	r2, r3
 8004448:	d208      	bcs.n	800445c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800444a:	4b1a      	ldr	r3, [pc, #104]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4917      	ldr	r1, [pc, #92]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004458:	4313      	orrs	r3, r2
 800445a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800445c:	f000 f834 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b14      	ldr	r3, [pc, #80]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	4912      	ldr	r1, [pc, #72]	@ (80044b8 <HAL_RCC_ClockConfig+0x35c>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
 8004478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800447a:	4b0e      	ldr	r3, [pc, #56]	@ (80044b4 <HAL_RCC_ClockConfig+0x358>)
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <HAL_RCC_ClockConfig+0x35c>)
 8004484:	5cd3      	ldrb	r3, [r2, r3]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x360>)
 8004492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004494:	4a0a      	ldr	r2, [pc, #40]	@ (80044c0 <HAL_RCC_ClockConfig+0x364>)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800449a:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <HAL_RCC_ClockConfig+0x368>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd fbc8 	bl	8001c34 <HAL_InitTick>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	58024400 	.word	0x58024400
 80044b8:	0800bbcc 	.word	0x0800bbcc
 80044bc:	24000004 	.word	0x24000004
 80044c0:	24000000 	.word	0x24000000
 80044c4:	24000008 	.word	0x24000008

080044c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	@ 0x24
 80044cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ce:	4bb3      	ldr	r3, [pc, #716]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044d6:	2b18      	cmp	r3, #24
 80044d8:	f200 8155 	bhi.w	8004786 <HAL_RCC_GetSysClockFreq+0x2be>
 80044dc:	a201      	add	r2, pc, #4	@ (adr r2, 80044e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004549 	.word	0x08004549
 80044e8:	08004787 	.word	0x08004787
 80044ec:	08004787 	.word	0x08004787
 80044f0:	08004787 	.word	0x08004787
 80044f4:	08004787 	.word	0x08004787
 80044f8:	08004787 	.word	0x08004787
 80044fc:	08004787 	.word	0x08004787
 8004500:	08004787 	.word	0x08004787
 8004504:	0800456f 	.word	0x0800456f
 8004508:	08004787 	.word	0x08004787
 800450c:	08004787 	.word	0x08004787
 8004510:	08004787 	.word	0x08004787
 8004514:	08004787 	.word	0x08004787
 8004518:	08004787 	.word	0x08004787
 800451c:	08004787 	.word	0x08004787
 8004520:	08004787 	.word	0x08004787
 8004524:	08004575 	.word	0x08004575
 8004528:	08004787 	.word	0x08004787
 800452c:	08004787 	.word	0x08004787
 8004530:	08004787 	.word	0x08004787
 8004534:	08004787 	.word	0x08004787
 8004538:	08004787 	.word	0x08004787
 800453c:	08004787 	.word	0x08004787
 8004540:	08004787 	.word	0x08004787
 8004544:	0800457b 	.word	0x0800457b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004548:	4b94      	ldr	r3, [pc, #592]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004554:	4b91      	ldr	r3, [pc, #580]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	4a90      	ldr	r2, [pc, #576]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004566:	e111      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004568:	4b8d      	ldr	r3, [pc, #564]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800456a:	61bb      	str	r3, [r7, #24]
      break;
 800456c:	e10e      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800456e:	4b8d      	ldr	r3, [pc, #564]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004570:	61bb      	str	r3, [r7, #24]
      break;
 8004572:	e10b      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004574:	4b8c      	ldr	r3, [pc, #560]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004576:	61bb      	str	r3, [r7, #24]
      break;
 8004578:	e108      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800457a:	4b88      	ldr	r3, [pc, #544]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004584:	4b85      	ldr	r3, [pc, #532]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800458e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004590:	4b82      	ldr	r3, [pc, #520]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800459a:	4b80      	ldr	r3, [pc, #512]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	08db      	lsrs	r3, r3, #3
 80045a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80e1 	beq.w	8004780 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f000 8083 	beq.w	80046cc <HAL_RCC_GetSysClockFreq+0x204>
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	f200 80a1 	bhi.w	8004710 <HAL_RCC_GetSysClockFreq+0x248>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x114>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d056      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045da:	e099      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045dc:	4b6f      	ldr	r3, [pc, #444]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02d      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045e8:	4b6c      	ldr	r3, [pc, #432]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	4a6b      	ldr	r2, [pc, #428]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
 80045f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b62      	ldr	r3, [pc, #392]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004642:	e087      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b51      	ldr	r3, [pc, #324]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004686:	e065      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b40      	ldr	r3, [pc, #256]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ca:	e043      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b2f      	ldr	r3, [pc, #188]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800470e:	e021      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800471e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004722:	4b1e      	ldr	r3, [pc, #120]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004732:	ed97 6a02 	vldr	s12, [r7, #8]
 8004736:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800473a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800473e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004754:	4b11      	ldr	r3, [pc, #68]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004758:	0a5b      	lsrs	r3, r3, #9
 800475a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800475e:	3301      	adds	r3, #1
 8004760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800476c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004778:	ee17 3a90 	vmov	r3, s15
 800477c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800477e:	e005      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	61bb      	str	r3, [r7, #24]
      break;
 8004784:	e002      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004786:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004788:	61bb      	str	r3, [r7, #24]
      break;
 800478a:	bf00      	nop
  }

  return sysclockfreq;
 800478c:	69bb      	ldr	r3, [r7, #24]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3724      	adds	r7, #36	@ 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	58024400 	.word	0x58024400
 80047a0:	03d09000 	.word	0x03d09000
 80047a4:	003d0900 	.word	0x003d0900
 80047a8:	017d7840 	.word	0x017d7840
 80047ac:	46000000 	.word	0x46000000
 80047b0:	4c742400 	.word	0x4c742400
 80047b4:	4a742400 	.word	0x4a742400
 80047b8:	4bbebc20 	.word	0x4bbebc20

080047bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047c2:	f7ff fe81 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 80047c6:	4602      	mov	r2, r0
 80047c8:	4b10      	ldr	r3, [pc, #64]	@ (800480c <HAL_RCC_GetHCLKFreq+0x50>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	490f      	ldr	r1, [pc, #60]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x54>)
 80047d4:	5ccb      	ldrb	r3, [r1, r3]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047e0:	4b0a      	ldr	r3, [pc, #40]	@ (800480c <HAL_RCC_GetHCLKFreq+0x50>)
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	4a09      	ldr	r2, [pc, #36]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x54>)
 80047ea:	5cd3      	ldrb	r3, [r2, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	fa22 f303 	lsr.w	r3, r2, r3
 80047f6:	4a07      	ldr	r2, [pc, #28]	@ (8004814 <HAL_RCC_GetHCLKFreq+0x58>)
 80047f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047fa:	4a07      	ldr	r2, [pc, #28]	@ (8004818 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <HAL_RCC_GetHCLKFreq+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	58024400 	.word	0x58024400
 8004810:	0800bbcc 	.word	0x0800bbcc
 8004814:	24000004 	.word	0x24000004
 8004818:	24000000 	.word	0x24000000

0800481c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004820:	f7ff ffcc 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	@ (8004844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	0800bbcc 	.word	0x0800bbcc

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800484c:	f7ff ffb6 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4904      	ldr	r1, [pc, #16]	@ (8004870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	58024400 	.word	0x58024400
 8004870:	0800bbcc 	.word	0x0800bbcc

08004874 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004878:	b0ca      	sub	sp, #296	@ 0x128
 800487a:	af00      	add	r7, sp, #0
 800487c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004886:	2300      	movs	r3, #0
 8004888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004898:	2500      	movs	r5, #0
 800489a:	ea54 0305 	orrs.w	r3, r4, r5
 800489e:	d049      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048aa:	d02f      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048b0:	d828      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b6:	d01a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048bc:	d822      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048c6:	d007      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048c8:	e01c      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ca:	4bb8      	ldr	r3, [pc, #736]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	4ab7      	ldr	r2, [pc, #732]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048d6:	e01a      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	3308      	adds	r3, #8
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f002 fb61 	bl	8006fa8 <RCCEx_PLL2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	3328      	adds	r3, #40	@ 0x28
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f002 fc08 	bl	800710c <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004916:	4ba5      	ldr	r3, [pc, #660]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800491a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004924:	4aa1      	ldr	r2, [pc, #644]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004926:	430b      	orrs	r3, r1
 8004928:	6513      	str	r3, [r2, #80]	@ 0x50
 800492a:	e003      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004940:	f04f 0900 	mov.w	r9, #0
 8004944:	ea58 0309 	orrs.w	r3, r8, r9
 8004948:	d047      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004950:	2b04      	cmp	r3, #4
 8004952:	d82a      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004954:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004971 	.word	0x08004971
 8004960:	0800497f 	.word	0x0800497f
 8004964:	08004995 	.word	0x08004995
 8004968:	080049b3 	.word	0x080049b3
 800496c:	080049b3 	.word	0x080049b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004970:	4b8e      	ldr	r3, [pc, #568]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	4a8d      	ldr	r2, [pc, #564]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800497c:	e01a      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	3308      	adds	r3, #8
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f002 fb0e 	bl	8006fa8 <RCCEx_PLL2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004992:	e00f      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004998:	3328      	adds	r3, #40	@ 0x28
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f002 fbb5 	bl	800710c <RCCEx_PLL3_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049bc:	4b7b      	ldr	r3, [pc, #492]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c0:	f023 0107 	bic.w	r1, r3, #7
 80049c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ca:	4a78      	ldr	r2, [pc, #480]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049e6:	f04f 0b00 	mov.w	fp, #0
 80049ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80049ee:	d04c      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fa:	d030      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a00:	d829      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a04:	d02d      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a08:	d825      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a0a:	2b80      	cmp	r3, #128	@ 0x80
 8004a0c:	d018      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a0e:	2b80      	cmp	r3, #128	@ 0x80
 8004a10:	d821      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d007      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a1a:	e01c      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1c:	4b63      	ldr	r3, [pc, #396]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	4a62      	ldr	r2, [pc, #392]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a28:	e01c      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2e:	3308      	adds	r3, #8
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f002 fab8 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a3e:	e011      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a44:	3328      	adds	r3, #40	@ 0x28
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f002 fb5f 	bl	800710c <RCCEx_PLL3_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a54:	e006      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a5c:	e002      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a80:	e003      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004aa0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	d053      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ab6:	d035      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004abc:	d82e      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004abe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ac2:	d031      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ac8:	d828      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ace:	d01a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad4:	d822      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ade:	d007      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ae0:	e01c      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae2:	4b32      	ldr	r3, [pc, #200]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	4a31      	ldr	r2, [pc, #196]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004aee:	e01c      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	3308      	adds	r3, #8
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fa55 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b04:	e011      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0a:	3328      	adds	r3, #40	@ 0x28
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f002 fafc 	bl	800710c <RCCEx_PLL3_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b1a:	e006      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b32:	4b1e      	ldr	r3, [pc, #120]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b42:	4a1a      	ldr	r2, [pc, #104]	@ (8004bac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b48:	e003      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b62:	2300      	movs	r3, #0
 8004b64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d056      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b7e:	d038      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b84:	d831      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b8a:	d034      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b90:	d82b      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b96:	d01d      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b9c:	d825      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ba8:	e01f      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004baa:	bf00      	nop
 8004bac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb0:	4ba2      	ldr	r3, [pc, #648]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	4aa1      	ldr	r2, [pc, #644]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e01c      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f002 f9ee 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e011      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	3328      	adds	r3, #40	@ 0x28
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 fa95 	bl	800710c <RCCEx_PLL3_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c00:	4b8e      	ldr	r3, [pc, #568]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c10:	4a8a      	ldr	r2, [pc, #552]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c12:	430b      	orrs	r3, r1
 8004c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	d03a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c46:	2b30      	cmp	r3, #48	@ 0x30
 8004c48:	d01f      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c4a:	2b30      	cmp	r3, #48	@ 0x30
 8004c4c:	d819      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d00c      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d815      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d019      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d111      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c5e:	4b77      	ldr	r3, [pc, #476]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	4a76      	ldr	r2, [pc, #472]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c6a:	e011      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c70:	3308      	adds	r3, #8
 8004c72:	2102      	movs	r1, #2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 f997 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c88:	e002      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c98:	4b68      	ldr	r3, [pc, #416]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	4a65      	ldr	r2, [pc, #404]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004cc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ccc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d051      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce0:	d035      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce6:	d82e      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ce8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cec:	d031      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004cee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cf2:	d828      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf8:	d01a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfe:	d822      	bhi.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d08:	d007      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d0a:	e01c      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4a4a      	ldr	r2, [pc, #296]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d18:	e01c      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1e:	3308      	adds	r3, #8
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f002 f940 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d2e:	e011      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	3328      	adds	r3, #40	@ 0x28
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f002 f9e7 	bl	800710c <RCCEx_PLL3_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d4c:	e002      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d5c:	4b37      	ldr	r3, [pc, #220]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6a:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d70:	e003      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d94:	460b      	mov	r3, r1
 8004d96:	4313      	orrs	r3, r2
 8004d98:	d056      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004da4:	d033      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004da6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004daa:	d82c      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004db0:	d02f      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004db2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004db6:	d826      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004db8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dbc:	d02b      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004dbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dc2:	d820      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc8:	d012      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dce:	d81a      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d022      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd8:	d115      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dde:	3308      	adds	r3, #8
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f002 f8e0 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dee:	e015      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df4:	3328      	adds	r3, #40	@ 0x28
 8004df6:	2101      	movs	r1, #1
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f002 f987 	bl	800710c <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e04:	e00a      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e004      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10d      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e24:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e32:	4a02      	ldr	r2, [pc, #8]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d055      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e74:	d033      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e7a:	d82c      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d02f      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d826      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e8c:	d02b      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e92:	d820      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e98:	d012      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e9e:	d81a      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d022      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ea8:	d115      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eae:	3308      	adds	r3, #8
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f002 f878 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ebe:	e015      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	3328      	adds	r3, #40	@ 0x28
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f002 f91f 	bl	800710c <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ed4:	e00a      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e004      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ef4:	4ba3      	ldr	r3, [pc, #652]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f04:	4a9f      	ldr	r2, [pc, #636]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d037      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3e:	d00e      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f44:	d816      	bhi.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4e:	d111      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f50:	4b8c      	ldr	r3, [pc, #560]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	4a8b      	ldr	r2, [pc, #556]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f5c:	e00f      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	3308      	adds	r3, #8
 8004f64:	2101      	movs	r1, #1
 8004f66:	4618      	mov	r0, r3
 8004f68:	f002 f81e 	bl	8006fa8 <RCCEx_PLL2_Config>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f72:	e004      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f7a:	e000      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a7b      	ldr	r2, [pc, #492]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f96:	430b      	orrs	r3, r1
 8004f98:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f9a:	e003      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	d039      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d81c      	bhi.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004fce:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08005011 	.word	0x08005011
 8004fd8:	08004fe5 	.word	0x08004fe5
 8004fdc:	08004ff3 	.word	0x08004ff3
 8004fe0:	08005011 	.word	0x08005011
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe4:	4b67      	ldr	r3, [pc, #412]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	4a66      	ldr	r2, [pc, #408]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ff0:	e00f      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f001 ffd4 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005006:	e004      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800500e:	e000      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800501a:	4b5a      	ldr	r3, [pc, #360]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501e:	f023 0103 	bic.w	r1, r3, #3
 8005022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005028:	4a56      	ldr	r2, [pc, #344]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800502a:	430b      	orrs	r3, r1
 800502c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800502e:	e003      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005048:	2300      	movs	r3, #0
 800504a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800504e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005052:	460b      	mov	r3, r1
 8005054:	4313      	orrs	r3, r2
 8005056:	f000 809f 	beq.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800505a:	4b4b      	ldr	r3, [pc, #300]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a4a      	ldr	r2, [pc, #296]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005066:	f7fc fe2f 	bl	8001cc8 <HAL_GetTick>
 800506a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506e:	e00b      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fc fe2a 	bl	8001cc8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b64      	cmp	r3, #100	@ 0x64
 800507e:	d903      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005086:	e005      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ed      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005098:	2b00      	cmp	r3, #0
 800509a:	d179      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800509c:	4b39      	ldr	r3, [pc, #228]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800509e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050a8:	4053      	eors	r3, r2
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d015      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b2:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050be:	4b31      	ldr	r3, [pc, #196]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	4a30      	ldr	r2, [pc, #192]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ea:	d118      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fc fdec 	bl	8001cc8 <HAL_GetTick>
 80050f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050f4:	e00d      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fc fde7 	bl	8001cc8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005100:	1ad2      	subs	r2, r2, r3
 8005102:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005106:	429a      	cmp	r2, r3
 8005108:	d903      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005110:	e005      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005112:	4b1c      	ldr	r3, [pc, #112]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0eb      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800511e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005122:	2b00      	cmp	r3, #0
 8005124:	d129      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800512a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800512e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005136:	d10e      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005138:	4b12      	ldr	r3, [pc, #72]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005144:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005148:	091a      	lsrs	r2, r3, #4
 800514a:	4b10      	ldr	r3, [pc, #64]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800514c:	4013      	ands	r3, r2
 800514e:	4a0d      	ldr	r2, [pc, #52]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	430b      	orrs	r3, r1
 8005152:	6113      	str	r3, [r2, #16]
 8005154:	e005      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005156:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	4a0a      	ldr	r2, [pc, #40]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005160:	6113      	str	r3, [r2, #16]
 8005162:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005164:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800516e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005172:	4a04      	ldr	r2, [pc, #16]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	e00e      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005182:	e009      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005184:	58024400 	.word	0x58024400
 8005188:	58024800 	.word	0x58024800
 800518c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f002 0301 	and.w	r3, r2, #1
 80051a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f000 8089 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c0:	2b28      	cmp	r3, #40	@ 0x28
 80051c2:	d86b      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80051c4:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080052a5 	.word	0x080052a5
 80051d0:	0800529d 	.word	0x0800529d
 80051d4:	0800529d 	.word	0x0800529d
 80051d8:	0800529d 	.word	0x0800529d
 80051dc:	0800529d 	.word	0x0800529d
 80051e0:	0800529d 	.word	0x0800529d
 80051e4:	0800529d 	.word	0x0800529d
 80051e8:	0800529d 	.word	0x0800529d
 80051ec:	08005271 	.word	0x08005271
 80051f0:	0800529d 	.word	0x0800529d
 80051f4:	0800529d 	.word	0x0800529d
 80051f8:	0800529d 	.word	0x0800529d
 80051fc:	0800529d 	.word	0x0800529d
 8005200:	0800529d 	.word	0x0800529d
 8005204:	0800529d 	.word	0x0800529d
 8005208:	0800529d 	.word	0x0800529d
 800520c:	08005287 	.word	0x08005287
 8005210:	0800529d 	.word	0x0800529d
 8005214:	0800529d 	.word	0x0800529d
 8005218:	0800529d 	.word	0x0800529d
 800521c:	0800529d 	.word	0x0800529d
 8005220:	0800529d 	.word	0x0800529d
 8005224:	0800529d 	.word	0x0800529d
 8005228:	0800529d 	.word	0x0800529d
 800522c:	080052a5 	.word	0x080052a5
 8005230:	0800529d 	.word	0x0800529d
 8005234:	0800529d 	.word	0x0800529d
 8005238:	0800529d 	.word	0x0800529d
 800523c:	0800529d 	.word	0x0800529d
 8005240:	0800529d 	.word	0x0800529d
 8005244:	0800529d 	.word	0x0800529d
 8005248:	0800529d 	.word	0x0800529d
 800524c:	080052a5 	.word	0x080052a5
 8005250:	0800529d 	.word	0x0800529d
 8005254:	0800529d 	.word	0x0800529d
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	0800529d 	.word	0x0800529d
 8005264:	0800529d 	.word	0x0800529d
 8005268:	0800529d 	.word	0x0800529d
 800526c:	080052a5 	.word	0x080052a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005274:	3308      	adds	r3, #8
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f001 fe95 	bl	8006fa8 <RCCEx_PLL2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005284:	e00f      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528a:	3328      	adds	r3, #40	@ 0x28
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f001 ff3c 	bl	800710c <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052ae:	4bbf      	ldr	r3, [pc, #764]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80052b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052bc:	4abb      	ldr	r2, [pc, #748]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052be:	430b      	orrs	r3, r1
 80052c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f002 0302 	and.w	r3, r2, #2
 80052d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052dc:	2300      	movs	r3, #0
 80052de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80052e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	d041      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d824      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052f6:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005349 	.word	0x08005349
 8005300:	08005315 	.word	0x08005315
 8005304:	0800532b 	.word	0x0800532b
 8005308:	08005349 	.word	0x08005349
 800530c:	08005349 	.word	0x08005349
 8005310:	08005349 	.word	0x08005349
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	3308      	adds	r3, #8
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fe43 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005328:	e00f      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	3328      	adds	r3, #40	@ 0x28
 8005330:	2101      	movs	r1, #1
 8005332:	4618      	mov	r0, r3
 8005334:	f001 feea 	bl	800710c <RCCEx_PLL3_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800533e:	e004      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005346:	e000      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005352:	4b96      	ldr	r3, [pc, #600]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	f023 0107 	bic.w	r1, r3, #7
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005360:	4a92      	ldr	r2, [pc, #584]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005362:	430b      	orrs	r3, r1
 8005364:	6553      	str	r3, [r2, #84]	@ 0x54
 8005366:	e003      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800536c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f002 0304 	and.w	r3, r2, #4
 800537c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005386:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800538a:	460b      	mov	r3, r1
 800538c:	4313      	orrs	r3, r2
 800538e:	d044      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005398:	2b05      	cmp	r3, #5
 800539a:	d825      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053f1 	.word	0x080053f1
 80053a8:	080053bd 	.word	0x080053bd
 80053ac:	080053d3 	.word	0x080053d3
 80053b0:	080053f1 	.word	0x080053f1
 80053b4:	080053f1 	.word	0x080053f1
 80053b8:	080053f1 	.word	0x080053f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	3308      	adds	r3, #8
 80053c2:	2101      	movs	r1, #1
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fdef 	bl	8006fa8 <RCCEx_PLL2_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053d0:	e00f      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	3328      	adds	r3, #40	@ 0x28
 80053d8:	2101      	movs	r1, #1
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 fe96 	bl	800710c <RCCEx_PLL3_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053e6:	e004      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80053f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053fa:	4b6c      	ldr	r3, [pc, #432]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fe:	f023 0107 	bic.w	r1, r3, #7
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540a:	4a68      	ldr	r2, [pc, #416]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800540c:	430b      	orrs	r3, r1
 800540e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005410:	e003      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800541a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f002 0320 	and.w	r3, r2, #32
 8005426:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d055      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800543a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005446:	d033      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800544c:	d82c      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d02f      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005458:	d826      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800545a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800545e:	d02b      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005460:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005464:	d820      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800546a:	d012      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800546c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005470:	d81a      	bhi.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d022      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800547a:	d115      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	3308      	adds	r3, #8
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f001 fd8f 	bl	8006fa8 <RCCEx_PLL2_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005490:	e015      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	3328      	adds	r3, #40	@ 0x28
 8005498:	2102      	movs	r1, #2
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fe36 	bl	800710c <RCCEx_PLL3_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054a6:	e00a      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ae:	e006      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b0:	bf00      	nop
 80054b2:	e004      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b4:	bf00      	nop
 80054b6:	e002      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b8:	bf00      	nop
 80054ba:	e000      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10b      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c6:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	4a35      	ldr	r2, [pc, #212]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054d8:	430b      	orrs	r3, r1
 80054da:	6553      	str	r3, [r2, #84]	@ 0x54
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054f6:	2300      	movs	r3, #0
 80054f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005500:	460b      	mov	r3, r1
 8005502:	4313      	orrs	r3, r2
 8005504:	d058      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800550e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005512:	d033      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005514:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005518:	d82c      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551e:	d02f      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005524:	d826      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005526:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800552a:	d02b      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800552c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005530:	d820      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005536:	d012      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800553c:	d81a      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d022      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005546:	d115      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800554c:	3308      	adds	r3, #8
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fd29 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800555c:	e015      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005562:	3328      	adds	r3, #40	@ 0x28
 8005564:	2102      	movs	r1, #2
 8005566:	4618      	mov	r0, r3
 8005568:	f001 fdd0 	bl	800710c <RCCEx_PLL3_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005572:	e00a      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800557a:	e006      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800557c:	bf00      	nop
 800557e:	e004      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005580:	bf00      	nop
 8005582:	e002      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005584:	bf00      	nop
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10e      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005596:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055a2:	4a02      	ldr	r2, [pc, #8]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055aa:	bf00      	nop
 80055ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d055      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055e4:	d033      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80055e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055ea:	d82c      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f0:	d02f      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f6:	d826      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055fc:	d02b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005602:	d820      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005608:	d012      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800560a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800560e:	d81a      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005618:	d115      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561e:	3308      	adds	r3, #8
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fcc0 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800562e:	e015      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005634:	3328      	adds	r3, #40	@ 0x28
 8005636:	2102      	movs	r1, #2
 8005638:	4618      	mov	r0, r3
 800563a:	f001 fd67 	bl	800710c <RCCEx_PLL3_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005644:	e00a      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800564e:	bf00      	nop
 8005650:	e004      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005664:	4ba1      	ldr	r3, [pc, #644]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005674:	4a9d      	ldr	r2, [pc, #628]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005676:	430b      	orrs	r3, r1
 8005678:	6593      	str	r3, [r2, #88]	@ 0x58
 800567a:	e003      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f002 0308 	and.w	r3, r2, #8
 8005690:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800569a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800569e:	460b      	mov	r3, r1
 80056a0:	4313      	orrs	r3, r2
 80056a2:	d01e      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80056a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056b0:	d10c      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	3328      	adds	r3, #40	@ 0x28
 80056b8:	2102      	movs	r1, #2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 fd26 	bl	800710c <RCCEx_PLL3_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056cc:	4b87      	ldr	r3, [pc, #540]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056dc:	4a83      	ldr	r2, [pc, #524]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f002 0310 	and.w	r3, r2, #16
 80056ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056f2:	2300      	movs	r3, #0
 80056f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056fc:	460b      	mov	r3, r1
 80056fe:	4313      	orrs	r3, r2
 8005700:	d01e      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800570a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570e:	d10c      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005714:	3328      	adds	r3, #40	@ 0x28
 8005716:	2102      	movs	r1, #2
 8005718:	4618      	mov	r0, r3
 800571a:	f001 fcf7 	bl	800710c <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800572a:	4b70      	ldr	r3, [pc, #448]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800573a:	4a6c      	ldr	r2, [pc, #432]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800573c:	430b      	orrs	r3, r1
 800573e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800574c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005756:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800575a:	460b      	mov	r3, r1
 800575c:	4313      	orrs	r3, r2
 800575e:	d03e      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576c:	d022      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800576e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005772:	d81b      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577c:	d00b      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800577e:	e015      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	3308      	adds	r3, #8
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fc0d 	bl	8006fa8 <RCCEx_PLL2_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005794:	e00f      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	3328      	adds	r3, #40	@ 0x28
 800579c:	2102      	movs	r1, #2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fcb4 	bl	800710c <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057aa:	e004      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057b2:	e000      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80057b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057be:	4b4b      	ldr	r3, [pc, #300]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057ce:	4a47      	ldr	r2, [pc, #284]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057ec:	2300      	movs	r3, #0
 80057ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057f4:	460b      	mov	r3, r1
 80057f6:	4313      	orrs	r3, r2
 80057f8:	d03b      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005802:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005806:	d01f      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005808:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800580c:	d818      	bhi.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800580e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005812:	d003      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005818:	d007      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800581a:	e011      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	4b33      	ldr	r3, [pc, #204]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	4a32      	ldr	r2, [pc, #200]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005828:	e00f      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	3328      	adds	r3, #40	@ 0x28
 8005830:	2101      	movs	r1, #1
 8005832:	4618      	mov	r0, r3
 8005834:	f001 fc6a 	bl	800710c <RCCEx_PLL3_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800583e:	e004      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005852:	4b26      	ldr	r3, [pc, #152]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005856:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800585a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	4a22      	ldr	r2, [pc, #136]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005864:	430b      	orrs	r3, r1
 8005866:	6553      	str	r3, [r2, #84]	@ 0x54
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800587e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005880:	2300      	movs	r3, #0
 8005882:	677b      	str	r3, [r7, #116]	@ 0x74
 8005884:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005888:	460b      	mov	r3, r1
 800588a:	4313      	orrs	r3, r2
 800588c:	d034      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d007      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800589e:	e011      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a0:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a4:	4a11      	ldr	r2, [pc, #68]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058ac:	e00e      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	3308      	adds	r3, #8
 80058b4:	2102      	movs	r1, #2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fb76 	bl	8006fa8 <RCCEx_PLL2_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058c2:	e003      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e2:	4a02      	ldr	r2, [pc, #8]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058e4:	430b      	orrs	r3, r1
 80058e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e8:	e006      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058ea:	bf00      	nop
 80058ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005906:	2300      	movs	r3, #0
 8005908:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800590a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800590e:	460b      	mov	r3, r1
 8005910:	4313      	orrs	r3, r2
 8005912:	d00c      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	3328      	adds	r3, #40	@ 0x28
 800591a:	2102      	movs	r1, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fbf5 	bl	800710c <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800592e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800593a:	663b      	str	r3, [r7, #96]	@ 0x60
 800593c:	2300      	movs	r3, #0
 800593e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005940:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005944:	460b      	mov	r3, r1
 8005946:	4313      	orrs	r3, r2
 8005948:	d038      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005956:	d018      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800595c:	d811      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800595e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005962:	d014      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005968:	d80b      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d011      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800596e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005972:	d106      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005974:	4bc3      	ldr	r3, [pc, #780]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	4ac2      	ldr	r2, [pc, #776]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800597a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800597e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005980:	e008      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005988:	e004      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800599c:	4bb9      	ldr	r3, [pc, #740]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800599e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ac:	4ab5      	ldr	r2, [pc, #724]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ae:	430b      	orrs	r3, r1
 80059b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80059b2:	e003      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059ca:	2300      	movs	r3, #0
 80059cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059d8:	4baa      	ldr	r3, [pc, #680]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e6:	4aa7      	ldr	r2, [pc, #668]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80059f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80059fa:	2300      	movs	r3, #0
 80059fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80059fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a08:	4b9e      	ldr	r3, [pc, #632]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a18:	4a9a      	ldr	r2, [pc, #616]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a3a:	4b92      	ldr	r3, [pc, #584]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a48:	4a8e      	ldr	r2, [pc, #568]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a64:	460b      	mov	r3, r1
 8005a66:	4313      	orrs	r3, r2
 8005a68:	d00e      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a6a:	4b86      	ldr	r3, [pc, #536]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	4a85      	ldr	r2, [pc, #532]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a74:	6113      	str	r3, [r2, #16]
 8005a76:	4b83      	ldr	r3, [pc, #524]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a78:	6919      	ldr	r1, [r3, #16]
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a82:	4a80      	ldr	r2, [pc, #512]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a96:	2300      	movs	r3, #0
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d009      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005aa4:	4b77      	ldr	r3, [pc, #476]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	4a74      	ldr	r2, [pc, #464]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	d00a      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ae4:	4a67      	ldr	r2, [pc, #412]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	2100      	movs	r1, #0
 8005af4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b00:	460b      	mov	r3, r1
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d011      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fa4a 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	2100      	movs	r1, #0
 8005b34:	6239      	str	r1, [r7, #32]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b40:	460b      	mov	r3, r1
 8005b42:	4313      	orrs	r3, r2
 8005b44:	d011      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fa2a 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	2100      	movs	r1, #0
 8005b74:	61b9      	str	r1, [r7, #24]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d011      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fa0a 	bl	8006fa8 <RCCEx_PLL2_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6139      	str	r1, [r7, #16]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	d011      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	3328      	adds	r3, #40	@ 0x28
 8005bcc:	2100      	movs	r1, #0
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fa9c 	bl	800710c <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c00:	460b      	mov	r3, r1
 8005c02:	4313      	orrs	r3, r2
 8005c04:	d011      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	3328      	adds	r3, #40	@ 0x28
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fa7c 	bl	800710c <RCCEx_PLL3_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	2100      	movs	r1, #0
 8005c34:	6039      	str	r1, [r7, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c40:	460b      	mov	r3, r1
 8005c42:	4313      	orrs	r3, r2
 8005c44:	d011      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	3328      	adds	r3, #40	@ 0x28
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fa5c 	bl	800710c <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005c6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c84:	58024400 	.word	0x58024400

08005c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b090      	sub	sp, #64	@ 0x40
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c96:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	f040 8094 	bne.w	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ca0:	4b9e      	ldr	r3, [pc, #632]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	f200 8087 	bhi.w	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005ccd 	.word	0x08005ccd
 8005cbc:	08005cf5 	.word	0x08005cf5
 8005cc0:	08005d1d 	.word	0x08005d1d
 8005cc4:	08005db9 	.word	0x08005db9
 8005cc8:	08005d45 	.word	0x08005d45
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ccc:	4b93      	ldr	r3, [pc, #588]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cd8:	d108      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f810 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ce8:	f000 bd45 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf0:	f000 bd41 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cf4:	4b89      	ldr	r3, [pc, #548]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d00:	d108      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d02:	f107 0318 	add.w	r3, r7, #24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fd54 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d10:	f000 bd31 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d18:	f000 bd2d 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d1c:	4b7f      	ldr	r3, [pc, #508]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d28:	d108      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fe94 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d38:	f000 bd1d 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d40:	f000 bd19 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d44:	4b75      	ldr	r3, [pc, #468]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d4c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d4e:	4b73      	ldr	r3, [pc, #460]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d10c      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d60:	4b6e      	ldr	r3, [pc, #440]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	08db      	lsrs	r3, r3, #3
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	4a6d      	ldr	r2, [pc, #436]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d72:	e01f      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d74:	4b69      	ldr	r3, [pc, #420]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d80:	d106      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d88:	d102      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005d8a:	4b66      	ldr	r3, [pc, #408]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d8e:	e011      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d90:	4b62      	ldr	r3, [pc, #392]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d9c:	d106      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da4:	d102      	bne.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005da6:	4b60      	ldr	r3, [pc, #384]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005daa:	e003      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005db0:	f000 bce1 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005db4:	f000 bcdf 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005db8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dbc:	f000 bcdb 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc4:	f000 bcd7 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dcc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	f040 80ad 	bne.w	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005dd6:	4b51      	ldr	r3, [pc, #324]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dda:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005dde:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de6:	d056      	beq.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dee:	f200 8090 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005df6:	f000 8088 	beq.w	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dfe:	f200 8088 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	2b80      	cmp	r3, #128	@ 0x80
 8005e06:	d032      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	2b80      	cmp	r3, #128	@ 0x80
 8005e0c:	f200 8081 	bhi.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	2b40      	cmp	r3, #64	@ 0x40
 8005e1a:	d014      	beq.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005e1c:	e079      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e2a:	d108      	bne.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 ff67 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e3a:	f000 bc9c 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e42:	f000 bc98 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e46:	4b35      	ldr	r3, [pc, #212]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e52:	d108      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e54:	f107 0318 	add.w	r3, r7, #24
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fcab 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e62:	f000 bc88 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6a:	f000 bc84 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7a:	d108      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e7c:	f107 030c 	add.w	r3, r7, #12
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fdeb 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e8a:	f000 bc74 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e92:	f000 bc70 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e96:	4b21      	ldr	r3, [pc, #132]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec4:	e01f      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ec6:	4b15      	ldr	r3, [pc, #84]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eda:	d102      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005edc:	4b11      	ldr	r3, [pc, #68]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee0:	e011      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eee:	d106      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef6:	d102      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005efc:	e003      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f02:	f000 bc38 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f06:	f000 bc36 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f0a:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0e:	f000 bc32 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f16:	f000 bc2e 	b.w	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f1a:	bf00      	nop
 8005f1c:	58024400 	.word	0x58024400
 8005f20:	03d09000 	.word	0x03d09000
 8005f24:	003d0900 	.word	0x003d0900
 8005f28:	017d7840 	.word	0x017d7840
 8005f2c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f34:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	f040 809c 	bne.w	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f3e:	4b9e      	ldr	r3, [pc, #632]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f42:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005f46:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f4e:	d054      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f56:	f200 808b 	bhi.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f60:	f000 8083 	beq.w	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f6a:	f200 8081 	bhi.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f74:	d02f      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f7c:	d878      	bhi.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f8a:	d012      	beq.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005f8c:	e070      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f8e:	4b8a      	ldr	r3, [pc, #552]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f9a:	d107      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 feaf 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005faa:	e3e4      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb0:	e3e1      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fb2:	4b81      	ldr	r3, [pc, #516]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fc0:	f107 0318 	add.w	r3, r7, #24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fbf5 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fce:	e3d2      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fd4:	e3cf      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fd6:	4b78      	ldr	r3, [pc, #480]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fe4:	f107 030c 	add.w	r3, r7, #12
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fd37 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ff2:	e3c0      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff8:	e3bd      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ffe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006004:	4b6c      	ldr	r3, [pc, #432]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d10c      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006016:	4b68      	ldr	r3, [pc, #416]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	4a66      	ldr	r2, [pc, #408]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006028:	e01e      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800602a:	4b63      	ldr	r3, [pc, #396]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006036:	d106      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800603e:	d102      	bne.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006040:	4b5f      	ldr	r3, [pc, #380]	@ (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006044:	e010      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006046:	4b5c      	ldr	r3, [pc, #368]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006052:	d106      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605a:	d102      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800605c:	4b59      	ldr	r3, [pc, #356]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006060:	e002      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006066:	e386      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006068:	e385      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800606a:	4b57      	ldr	r3, [pc, #348]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800606e:	e382      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e37f      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800607e:	430b      	orrs	r3, r1
 8006080:	f040 80a7 	bne.w	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006084:	4b4c      	ldr	r3, [pc, #304]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800608c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006094:	d055      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800609c:	f200 8096 	bhi.w	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060a6:	f000 8084 	beq.w	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060b0:	f200 808c 	bhi.w	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060ba:	d030      	beq.n	800611e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060c2:	f200 8083 	bhi.w	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060d2:	d012      	beq.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80060d4:	e07a      	b.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060d6:	4b38      	ldr	r3, [pc, #224]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e2:	d107      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fe0b 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f2:	e340      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060f8:	e33d      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060fa:	4b2f      	ldr	r3, [pc, #188]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006106:	d107      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006108:	f107 0318 	add.w	r3, r7, #24
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fb51 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006116:	e32e      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800611c:	e32b      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800611e:	4b26      	ldr	r3, [pc, #152]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800612a:	d107      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fc93 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800613a:	e31c      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006140:	e319      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006142:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006146:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800614a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800614c:	4b1a      	ldr	r3, [pc, #104]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d10c      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800615e:	4b16      	ldr	r3, [pc, #88]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	4a14      	ldr	r2, [pc, #80]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006170:	e01e      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006172:	4b11      	ldr	r3, [pc, #68]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800617e:	d106      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006186:	d102      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006188:	4b0d      	ldr	r3, [pc, #52]	@ (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800618c:	e010      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800619a:	d106      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a2:	d102      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80061a4:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061a8:	e002      	b.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80061ae:	e2e2      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061b0:	e2e1      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80061b2:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b6:	e2de      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80061b8:	58024400 	.word	0x58024400
 80061bc:	03d09000 	.word	0x03d09000
 80061c0:	003d0900 	.word	0x003d0900
 80061c4:	017d7840 	.word	0x017d7840
 80061c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d0:	e2d1      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80061d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80061da:	430b      	orrs	r3, r1
 80061dc:	f040 809c 	bne.w	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80061e0:	4b93      	ldr	r3, [pc, #588]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80061e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80061e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061f0:	d054      	beq.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061f8:	f200 808b 	bhi.w	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006202:	f000 8083 	beq.w	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006208:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800620c:	f200 8081 	bhi.w	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006216:	d02f      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800621e:	d878      	bhi.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622c:	d012      	beq.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800622e:	e070      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006230:	4b7f      	ldr	r3, [pc, #508]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800623c:	d107      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800623e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fd5e 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800624c:	e293      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006252:	e290      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006254:	4b76      	ldr	r3, [pc, #472]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800625c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006262:	f107 0318 	add.w	r3, r7, #24
 8006266:	4618      	mov	r0, r3
 8006268:	f000 faa4 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006270:	e281      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006276:	e27e      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006278:	4b6d      	ldr	r3, [pc, #436]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006284:	d107      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006286:	f107 030c 	add.w	r3, r7, #12
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fbe6 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006294:	e26f      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800629a:	e26c      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800629c:	4b64      	ldr	r3, [pc, #400]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800629e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062a6:	4b62      	ldr	r3, [pc, #392]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d10c      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80062b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	4a5c      	ldr	r2, [pc, #368]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ca:	e01e      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062cc:	4b58      	ldr	r3, [pc, #352]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d8:	d106      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80062da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e0:	d102      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80062e2:	4b55      	ldr	r3, [pc, #340]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80062e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e6:	e010      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062e8:	4b51      	ldr	r3, [pc, #324]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062f4:	d106      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fc:	d102      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80062fe:	4b4f      	ldr	r3, [pc, #316]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006302:	e002      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006308:	e235      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800630a:	e234      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800630c:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006310:	e231      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006316:	e22e      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800631c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006320:	430b      	orrs	r3, r1
 8006322:	f040 808f 	bne.w	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006326:	4b42      	ldr	r3, [pc, #264]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800632e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006336:	d06b      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800633e:	d874      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006346:	d056      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800634e:	d86c      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006356:	d03b      	beq.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800635e:	d864      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006366:	d021      	beq.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636e:	d85c      	bhi.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800637c:	d004      	beq.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800637e:	e054      	b.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006380:	f7fe fa4c 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8006384:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006386:	e1f6      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006388:	4b29      	ldr	r3, [pc, #164]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006394:	d107      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006396:	f107 0318 	add.w	r3, r7, #24
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fa0a 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063a4:	e1e7      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063aa:	e1e4      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063ac:	4b20      	ldr	r3, [pc, #128]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b8:	d107      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fb4c 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063c8:	e1d5      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ce:	e1d2      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d0:	4b17      	ldr	r3, [pc, #92]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d109      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	08db      	lsrs	r3, r3, #3
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	4a13      	ldr	r2, [pc, #76]	@ (8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ee:	e1c2      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f4:	e1bf      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80063f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006402:	d102      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006404:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006408:	e1b5      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640e:	e1b2      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006410:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800641c:	d102      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800641e:	4b07      	ldr	r3, [pc, #28]	@ (800643c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006422:	e1a8      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006428:	e1a5      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	e1a2      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006430:	58024400 	.word	0x58024400
 8006434:	03d09000 	.word	0x03d09000
 8006438:	003d0900 	.word	0x003d0900
 800643c:	017d7840 	.word	0x017d7840
 8006440:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006448:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800644c:	430b      	orrs	r3, r1
 800644e:	d173      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006450:	4b9c      	ldr	r3, [pc, #624]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006458:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006460:	d02f      	beq.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006468:	d863      	bhi.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006476:	d012      	beq.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006478:	e05b      	b.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800647a:	4b92      	ldr	r3, [pc, #584]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006486:	d107      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006488:	f107 0318 	add.w	r3, r7, #24
 800648c:	4618      	mov	r0, r3
 800648e:	f000 f991 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006496:	e16e      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800649c:	e16b      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800649e:	4b89      	ldr	r3, [pc, #548]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064aa:	d107      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ac:	f107 030c 	add.w	r3, r7, #12
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fad3 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ba:	e15c      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c0:	e159      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064c2:	4b80      	ldr	r3, [pc, #512]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064cc:	4b7d      	ldr	r3, [pc, #500]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d10c      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80064d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064de:	4b79      	ldr	r3, [pc, #484]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	08db      	lsrs	r3, r3, #3
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	4a77      	ldr	r2, [pc, #476]	@ (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f0:	e01e      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064f2:	4b74      	ldr	r3, [pc, #464]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fe:	d106      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006506:	d102      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006508:	4b70      	ldr	r3, [pc, #448]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800650c:	e010      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800650e:	4b6d      	ldr	r3, [pc, #436]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800651a:	d106      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800651c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006522:	d102      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006524:	4b6a      	ldr	r3, [pc, #424]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800652e:	e122      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006530:	e121      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006536:	e11e      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800653c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006540:	430b      	orrs	r3, r1
 8006542:	d133      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006544:	4b5f      	ldr	r3, [pc, #380]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800654c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655a:	d012      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800655c:	e023      	b.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800655e:	4b59      	ldr	r3, [pc, #356]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006566:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800656a:	d107      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800656c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fbc7 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800657a:	e0fc      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006580:	e0f9      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006582:	4b50      	ldr	r3, [pc, #320]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800658a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800658e:	d107      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006590:	f107 0318 	add.w	r3, r7, #24
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f90d 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800659e:	e0ea      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a4:	e0e7      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065aa:	e0e4      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80065ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80065b4:	430b      	orrs	r3, r1
 80065b6:	f040 808d 	bne.w	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80065ba:	4b42      	ldr	r3, [pc, #264]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80065c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80065c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ca:	d06b      	beq.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065d2:	d874      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065da:	d056      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d86c      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ea:	d03b      	beq.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80065ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065f2:	d864      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065fa:	d021      	beq.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006602:	d85c      	bhi.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800660a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006610:	d004      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006612:	e054      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006614:	f000 f8b8 	bl	8006788 <HAL_RCCEx_GetD3PCLK1Freq>
 8006618:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800661a:	e0ac      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800661c:	4b29      	ldr	r3, [pc, #164]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006628:	d107      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f8c0 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006638:	e09d      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800663e:	e09a      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006640:	4b20      	ldr	r3, [pc, #128]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d107      	bne.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800664e:	f107 030c 	add.w	r3, r7, #12
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fa02 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665c:	e08b      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006662:	e088      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006664:	4b17      	ldr	r3, [pc, #92]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d109      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006670:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	4a13      	ldr	r2, [pc, #76]	@ (80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800667c:	fa22 f303 	lsr.w	r3, r2, r3
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006682:	e078      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006688:	e075      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800668a:	4b0e      	ldr	r3, [pc, #56]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006696:	d102      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006698:	4b0c      	ldr	r3, [pc, #48]	@ (80066cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800669c:	e06b      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a2:	e068      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066a4:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b0:	d102      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80066b2:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80066b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b6:	e05e      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066bc:	e05b      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c2:	e058      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066c4:	58024400 	.word	0x58024400
 80066c8:	03d09000 	.word	0x03d09000
 80066cc:	003d0900 	.word	0x003d0900
 80066d0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80066d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80066dc:	430b      	orrs	r3, r1
 80066de:	d148      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80066e0:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f0:	d02a      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f8:	d838      	bhi.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006706:	d00d      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006708:	e030      	b.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800670a:	4b1d      	ldr	r3, [pc, #116]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006716:	d102      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006718:	4b1a      	ldr	r3, [pc, #104]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800671a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671c:	e02b      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006722:	e028      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006724:	4b16      	ldr	r3, [pc, #88]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006730:	d107      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fae4 	bl	8006d04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006740:	e019      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006746:	e016      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006748:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f82a 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006764:	e007      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676a:	e004      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006770:	e001      	b.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006778:	4618      	mov	r0, r3
 800677a:	3740      	adds	r7, #64	@ 0x40
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	58024400 	.word	0x58024400
 8006784:	017d7840 	.word	0x017d7840

08006788 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800678c:	f7fe f816 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8006790:	4602      	mov	r2, r0
 8006792:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	4904      	ldr	r1, [pc, #16]	@ (80067b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800679e:	5ccb      	ldrb	r3, [r1, r3]
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	58024400 	.word	0x58024400
 80067b0:	0800bbcc 	.word	0x0800bbcc

080067b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	@ 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80067c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	0b1b      	lsrs	r3, r3, #12
 80067cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80067d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	091b      	lsrs	r3, r3, #4
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80067de:	4b99      	ldr	r3, [pc, #612]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e2:	08db      	lsrs	r3, r3, #3
 80067e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8111 	beq.w	8006a24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b02      	cmp	r3, #2
 8006806:	f000 8083 	beq.w	8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b02      	cmp	r3, #2
 800680e:	f200 80a1 	bhi.w	8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d056      	beq.n	80068cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800681e:	e099      	b.n	8006954 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006820:	4b88      	ldr	r3, [pc, #544]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02d      	beq.n	8006888 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800682c:	4b85      	ldr	r3, [pc, #532]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	08db      	lsrs	r3, r3, #3
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	4a84      	ldr	r2, [pc, #528]	@ (8006a48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
 800683c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006856:	4b7b      	ldr	r3, [pc, #492]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	ed97 6a03 	vldr	s12, [r7, #12]
 800686a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800686e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800687a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006882:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006886:	e087      	b.n	8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689a:	4b6a      	ldr	r3, [pc, #424]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800689c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ca:	e065      	b.n	8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068de:	4b59      	ldr	r3, [pc, #356]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800690e:	e043      	b.n	8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800691e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006922:	4b48      	ldr	r3, [pc, #288]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006932:	ed97 6a03 	vldr	s12, [r7, #12]
 8006936:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800693a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006952:	e021      	b.n	8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006966:	4b37      	ldr	r3, [pc, #220]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006976:	ed97 6a03 	vldr	s12, [r7, #12]
 800697a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800697e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800698a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006996:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006998:	4b2a      	ldr	r3, [pc, #168]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	0a5b      	lsrs	r3, r3, #9
 800699e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069be:	ee17 2a90 	vmov	r2, s15
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80069c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ca:	0c1b      	lsrs	r3, r3, #16
 80069cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069d0:	ee07 3a90 	vmov	s15, r3
 80069d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ec:	ee17 2a90 	vmov	r2, s15
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80069f4:	4b13      	ldr	r3, [pc, #76]	@ (8006a44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	0e1b      	lsrs	r3, r3, #24
 80069fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a1a:	ee17 2a90 	vmov	r2, s15
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a22:	e008      	b.n	8006a36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	609a      	str	r2, [r3, #8]
}
 8006a36:	bf00      	nop
 8006a38:	3724      	adds	r7, #36	@ 0x24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	58024400 	.word	0x58024400
 8006a48:	03d09000 	.word	0x03d09000
 8006a4c:	46000000 	.word	0x46000000
 8006a50:	4c742400 	.word	0x4c742400
 8006a54:	4a742400 	.word	0x4a742400
 8006a58:	4bbebc20 	.word	0x4bbebc20

08006a5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	@ 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a64:	4ba1      	ldr	r3, [pc, #644]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	0d1b      	lsrs	r3, r3, #20
 8006a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a86:	4b99      	ldr	r3, [pc, #612]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	08db      	lsrs	r3, r3, #3
 8006a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	fb02 f303 	mul.w	r3, r2, r3
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8111 	beq.w	8006ccc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	f000 8083 	beq.w	8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f200 80a1 	bhi.w	8006bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d056      	beq.n	8006b74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ac6:	e099      	b.n	8006bfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac8:	4b88      	ldr	r3, [pc, #544]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d02d      	beq.n	8006b30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad4:	4b85      	ldr	r3, [pc, #532]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	4a84      	ldr	r2, [pc, #528]	@ (8006cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afe:	4b7b      	ldr	r3, [pc, #492]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b2e:	e087      	b.n	8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b42:	4b6a      	ldr	r3, [pc, #424]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b72:	e065      	b.n	8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b86:	4b59      	ldr	r3, [pc, #356]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb6:	e043      	b.n	8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bca:	4b48      	ldr	r3, [pc, #288]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfa:	e021      	b.n	8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0e:	4b37      	ldr	r3, [pc, #220]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006c40:	4b2a      	ldr	r3, [pc, #168]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c66:	ee17 2a90 	vmov	r2, s15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	0c1b      	lsrs	r3, r3, #16
 8006c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c94:	ee17 2a90 	vmov	r2, s15
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c9c:	4b13      	ldr	r3, [pc, #76]	@ (8006cec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	0e1b      	lsrs	r3, r3, #24
 8006ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc2:	ee17 2a90 	vmov	r2, s15
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006cca:	e008      	b.n	8006cde <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	3724      	adds	r7, #36	@ 0x24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	03d09000 	.word	0x03d09000
 8006cf4:	46000000 	.word	0x46000000
 8006cf8:	4c742400 	.word	0x4c742400
 8006cfc:	4a742400 	.word	0x4a742400
 8006d00:	4bbebc20 	.word	0x4bbebc20

08006d04 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	@ 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d0c:	4ba0      	ldr	r3, [pc, #640]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006d16:	4b9e      	ldr	r3, [pc, #632]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	091b      	lsrs	r3, r3, #4
 8006d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d20:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006d22:	4b9b      	ldr	r3, [pc, #620]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d2c:	4b98      	ldr	r3, [pc, #608]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d44:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 8111 	beq.w	8006f72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	f000 8083 	beq.w	8006e5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	f200 80a1 	bhi.w	8006ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d056      	beq.n	8006e1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006d6c:	e099      	b.n	8006ea2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d6e:	4b88      	ldr	r3, [pc, #544]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d02d      	beq.n	8006dd6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d7a:	4b85      	ldr	r3, [pc, #532]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	08db      	lsrs	r3, r3, #3
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	4a83      	ldr	r2, [pc, #524]	@ (8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d86:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da4:	4b7a      	ldr	r3, [pc, #488]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dd4:	e087      	b.n	8006ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de8:	4b69      	ldr	r3, [pc, #420]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df0:	ee07 3a90 	vmov	s15, r3
 8006df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e18:	e065      	b.n	8006ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	ee07 3a90 	vmov	s15, r3
 8006e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e24:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2c:	4b58      	ldr	r3, [pc, #352]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e40:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5c:	e043      	b.n	8006ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	ee07 3a90 	vmov	s15, r3
 8006e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e68:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006e6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e70:	4b47      	ldr	r3, [pc, #284]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e78:	ee07 3a90 	vmov	s15, r3
 8006e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e80:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e84:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea0:	e021      	b.n	8006ee6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006f9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb4:	4b36      	ldr	r3, [pc, #216]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebc:	ee07 3a90 	vmov	s15, r3
 8006ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ec8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ed8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eea:	0a5b      	lsrs	r3, r3, #9
 8006eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0c:	ee17 2a90 	vmov	r2, s15
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006f14:	4b1e      	ldr	r3, [pc, #120]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3a:	ee17 2a90 	vmov	r2, s15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006f42:	4b13      	ldr	r3, [pc, #76]	@ (8006f90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f46:	0e1b      	lsrs	r3, r3, #24
 8006f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f68:	ee17 2a90 	vmov	r2, s15
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006f70:	e008      	b.n	8006f84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	609a      	str	r2, [r3, #8]
}
 8006f84:	bf00      	nop
 8006f86:	3724      	adds	r7, #36	@ 0x24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	58024400 	.word	0x58024400
 8006f94:	03d09000 	.word	0x03d09000
 8006f98:	46000000 	.word	0x46000000
 8006f9c:	4c742400 	.word	0x4c742400
 8006fa0:	4a742400 	.word	0x4a742400
 8006fa4:	4bbebc20 	.word	0x4bbebc20

08006fa8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fb6:	4b53      	ldr	r3, [pc, #332]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d101      	bne.n	8006fc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e099      	b.n	80070fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4e      	ldr	r2, [pc, #312]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fa fe79 	bl	8001cc8 <HAL_GetTick>
 8006fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fd8:	e008      	b.n	8006fec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fda:	f7fa fe75 	bl	8001cc8 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e086      	b.n	80070fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fec:	4b45      	ldr	r3, [pc, #276]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f0      	bne.n	8006fda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ff8:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	031b      	lsls	r3, r3, #12
 8007006:	493f      	ldr	r1, [pc, #252]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	628b      	str	r3, [r1, #40]	@ 0x28
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	025b      	lsls	r3, r3, #9
 800701e:	b29b      	uxth	r3, r3
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	3b01      	subs	r3, #1
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800703c:	4931      	ldr	r1, [pc, #196]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007042:	4b30      	ldr	r3, [pc, #192]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	492d      	ldr	r1, [pc, #180]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007054:	4b2b      	ldr	r3, [pc, #172]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	f023 0220 	bic.w	r2, r3, #32
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	4928      	ldr	r1, [pc, #160]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007062:	4313      	orrs	r3, r2
 8007064:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007066:	4b27      	ldr	r3, [pc, #156]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	4a26      	ldr	r2, [pc, #152]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007072:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007076:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <RCCEx_PLL2_Config+0x160>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	69d2      	ldr	r2, [r2, #28]
 800707e:	00d2      	lsls	r2, r2, #3
 8007080:	4920      	ldr	r1, [pc, #128]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007086:	4b1f      	ldr	r3, [pc, #124]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708a:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f043 0310 	orr.w	r3, r3, #16
 8007090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007098:	4b1a      	ldr	r3, [pc, #104]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	4a19      	ldr	r2, [pc, #100]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 800709e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070a4:	e00f      	b.n	80070c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d106      	bne.n	80070ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070ac:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4a14      	ldr	r2, [pc, #80]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070b8:	e005      	b.n	80070c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070ba:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070be:	4a11      	ldr	r2, [pc, #68]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d2:	f7fa fdf9 	bl	8001cc8 <HAL_GetTick>
 80070d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070d8:	e008      	b.n	80070ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070da:	f7fa fdf5 	bl	8001cc8 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <RCCEx_PLL2_Config+0x15c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	ffff0007 	.word	0xffff0007

0800710c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800711a:	4b53      	ldr	r3, [pc, #332]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 800711c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b03      	cmp	r3, #3
 8007124:	d101      	bne.n	800712a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e099      	b.n	800725e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800712a:	4b4f      	ldr	r3, [pc, #316]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a4e      	ldr	r2, [pc, #312]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007136:	f7fa fdc7 	bl	8001cc8 <HAL_GetTick>
 800713a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800713c:	e008      	b.n	8007150 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800713e:	f7fa fdc3 	bl	8001cc8 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e086      	b.n	800725e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007150:	4b45      	ldr	r3, [pc, #276]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f0      	bne.n	800713e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800715c:	4b42      	ldr	r3, [pc, #264]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	051b      	lsls	r3, r3, #20
 800716a:	493f      	ldr	r1, [pc, #252]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 800716c:	4313      	orrs	r3, r2
 800716e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	3b01      	subs	r3, #1
 8007176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	3b01      	subs	r3, #1
 8007180:	025b      	lsls	r3, r3, #9
 8007182:	b29b      	uxth	r3, r3
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	3b01      	subs	r3, #1
 800718c:	041b      	lsls	r3, r3, #16
 800718e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	3b01      	subs	r3, #1
 800719a:	061b      	lsls	r3, r3, #24
 800719c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071a0:	4931      	ldr	r1, [pc, #196]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071a6:	4b30      	ldr	r3, [pc, #192]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	492d      	ldr	r1, [pc, #180]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	4928      	ldr	r1, [pc, #160]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071ca:	4b27      	ldr	r3, [pc, #156]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	4a26      	ldr	r2, [pc, #152]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071d6:	4b24      	ldr	r3, [pc, #144]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <RCCEx_PLL3_Config+0x160>)
 80071dc:	4013      	ands	r3, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	69d2      	ldr	r2, [r2, #28]
 80071e2:	00d2      	lsls	r2, r2, #3
 80071e4:	4920      	ldr	r1, [pc, #128]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 80071fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007200:	4a19      	ldr	r2, [pc, #100]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007202:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007208:	e00f      	b.n	800722a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d106      	bne.n	800721e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007210:	4b15      	ldr	r3, [pc, #84]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007214:	4a14      	ldr	r2, [pc, #80]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007216:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800721a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800721c:	e005      	b.n	800722a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800721e:	4b12      	ldr	r3, [pc, #72]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	4a11      	ldr	r2, [pc, #68]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007224:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007228:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800722a:	4b0f      	ldr	r3, [pc, #60]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a0e      	ldr	r2, [pc, #56]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007236:	f7fa fd47 	bl	8001cc8 <HAL_GetTick>
 800723a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800723c:	e008      	b.n	8007250 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800723e:	f7fa fd43 	bl	8001cc8 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e006      	b.n	800725e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007250:	4b05      	ldr	r3, [pc, #20]	@ (8007268 <RCCEx_PLL3_Config+0x15c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0f0      	beq.n	800723e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800725c:	7bfb      	ldrb	r3, [r7, #15]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	58024400 	.word	0x58024400
 800726c:	ffff0007 	.word	0xffff0007

08007270 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	@ 0x28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e075      	b.n	800736e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fa f817 	bl	80012c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2204      	movs	r2, #4
 800729e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f868 	bl	8007378 <HAL_SD_InitCard>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e05d      	b.n	800736e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa9d 	bl	80077f8 <HAL_SD_GetCardStatus>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e052      	b.n	800736e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80072c8:	7e3b      	ldrb	r3, [r7, #24]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80072ce:	7e7b      	ldrb	r3, [r7, #25]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d10a      	bne.n	80072f2 <HAL_SD_Init+0x82>
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_SD_Init+0x78>
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80072f0:	e00b      	b.n	800730a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d104      	bne.n	8007304 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007300:	659a      	str	r2, [r3, #88]	@ 0x58
 8007302:	e002      	b.n	800730a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fb2f 	bl	8007974 <HAL_SD_ConfigWideBusOperation>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e026      	b.n	800736e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007320:	f7fa fcd2 	bl	8001cc8 <HAL_GetTick>
 8007324:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007326:	e011      	b.n	800734c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007328:	f7fa fcce 	bl	8001cc8 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d109      	bne.n	800734c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800733e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e010      	b.n	800736e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fc23 	bl	8007b98 <HAL_SD_GetCardState>
 8007352:	4603      	mov	r3, r0
 8007354:	2b04      	cmp	r3, #4
 8007356:	d1e7      	bne.n	8007328 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3728      	adds	r7, #40	@ 0x28
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b08d      	sub	sp, #52	@ 0x34
 800737c:	af02      	add	r7, sp, #8
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007384:	2300      	movs	r3, #0
 8007386:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007390:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007394:	f04f 0100 	mov.w	r1, #0
 8007398:	f7fe fc76 	bl	8005c88 <HAL_RCCEx_GetPeriphCLKFreq>
 800739c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80073b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e070      	b.n	800749a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	4a39      	ldr	r2, [pc, #228]	@ (80074a4 <HAL_SD_InitCard+0x12c>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	091b      	lsrs	r3, r3, #4
 80073c4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681c      	ldr	r4, [r3, #0]
 80073ca:	466a      	mov	r2, sp
 80073cc:	f107 0318 	add.w	r3, r7, #24
 80073d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80073d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073de:	4620      	mov	r0, r4
 80073e0:	f003 f8a2 	bl	800a528 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f003 f8d4 	bl	800a596 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007406:	4a28      	ldr	r2, [pc, #160]	@ (80074a8 <HAL_SD_InitCard+0x130>)
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	fbb2 f3f3 	udiv	r3, r2, r3
 800740e:	3301      	adds	r3, #1
 8007410:	4618      	mov	r0, r3
 8007412:	f7fa fc65 	bl	8001ce0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fcac 	bl	8007d74 <SD_PowerON>
 800741c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e02e      	b.n	800749a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fbcb 	bl	8007bd8 <SD_InitCard>
 8007442:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e01b      	b.n	800749a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800746a:	4618      	mov	r0, r3
 800746c:	f003 f928 	bl	800a6c0 <SDMMC_CmdBlockLength>
 8007470:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00f      	beq.n	8007498 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a0b      	ldr	r2, [pc, #44]	@ (80074ac <HAL_SD_InitCard+0x134>)
 800747e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	372c      	adds	r7, #44	@ 0x2c
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}
 80074a2:	bf00      	nop
 80074a4:	014f8b59 	.word	0x014f8b59
 80074a8:	00012110 	.word	0x00012110
 80074ac:	1fe00fff 	.word	0x1fe00fff

080074b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074be:	0f9b      	lsrs	r3, r3, #30
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ca:	0e9b      	lsrs	r3, r3, #26
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074dc:	0e1b      	lsrs	r3, r3, #24
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007506:	b2da      	uxtb	r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007510:	0d1b      	lsrs	r3, r3, #20
 8007512:	b29a      	uxth	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800751c:	0c1b      	lsrs	r3, r3, #16
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	b2da      	uxtb	r2, r3
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800752e:	0bdb      	lsrs	r3, r3, #15
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007540:	0b9b      	lsrs	r3, r3, #14
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	b2da      	uxtb	r2, r3
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007552:	0b5b      	lsrs	r3, r3, #13
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007564:	0b1b      	lsrs	r3, r3, #12
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	d163      	bne.n	8007648 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007584:	009a      	lsls	r2, r3, #2
 8007586:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800758a:	4013      	ands	r3, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8007590:	0f92      	lsrs	r2, r2, #30
 8007592:	431a      	orrs	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800759c:	0edb      	lsrs	r3, r3, #27
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ae:	0e1b      	lsrs	r3, r3, #24
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c0:	0d5b      	lsrs	r3, r3, #21
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075d2:	0c9b      	lsrs	r3, r3, #18
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075e4:	0bdb      	lsrs	r3, r3, #15
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	7e1b      	ldrb	r3, [r3, #24]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	3302      	adds	r3, #2
 8007608:	2201      	movs	r2, #1
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007612:	fb03 f202 	mul.w	r2, r3, r2
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	7a1b      	ldrb	r3, [r3, #8]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	2201      	movs	r2, #1
 8007626:	409a      	lsls	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007634:	0a52      	lsrs	r2, r2, #9
 8007636:	fb03 f202 	mul.w	r2, r3, r2
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007644:	655a      	str	r2, [r3, #84]	@ 0x54
 8007646:	e031      	b.n	80076ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764c:	2b01      	cmp	r3, #1
 800764e:	d11d      	bne.n	800768c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007654:	041b      	lsls	r3, r3, #16
 8007656:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800765e:	0c1b      	lsrs	r3, r3, #16
 8007660:	431a      	orrs	r2, r3
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	3301      	adds	r3, #1
 800766c:	029a      	lsls	r2, r3, #10
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007680:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	655a      	str	r2, [r3, #84]	@ 0x54
 800768a:	e00f      	b.n	80076ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a58      	ldr	r2, [pc, #352]	@ (80077f4 <HAL_SD_GetCardCSD+0x344>)
 8007692:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007698:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e09d      	b.n	80077e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b0:	0b9b      	lsrs	r3, r3, #14
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c2:	09db      	lsrs	r3, r3, #7
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076e4:	0fdb      	lsrs	r3, r3, #31
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076f0:	0f5b      	lsrs	r3, r3, #29
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007702:	0e9b      	lsrs	r3, r3, #26
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	b2da      	uxtb	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007714:	0d9b      	lsrs	r3, r3, #22
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	b2da      	uxtb	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007726:	0d5b      	lsrs	r3, r3, #21
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007742:	0c1b      	lsrs	r3, r3, #16
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007756:	0bdb      	lsrs	r3, r3, #15
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	b2da      	uxtb	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800776a:	0b9b      	lsrs	r3, r3, #14
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	b2da      	uxtb	r2, r3
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800777e:	0b5b      	lsrs	r3, r3, #13
 8007780:	b2db      	uxtb	r3, r3
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	b2da      	uxtb	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007792:	0b1b      	lsrs	r3, r3, #12
 8007794:	b2db      	uxtb	r3, r3
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	b2da      	uxtb	r2, r3
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077a6:	0a9b      	lsrs	r3, r3, #10
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	1fe00fff 	.word	0x1fe00fff

080077f8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b094      	sub	sp, #80	@ 0x50
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b03      	cmp	r3, #3
 8007812:	d101      	bne.n	8007818 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0a7      	b.n	8007968 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007818:	f107 0308 	add.w	r3, r7, #8
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb36 	bl	8007e90 <SD_SendSDStatus>
 8007824:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007828:	2b00      	cmp	r3, #0
 800782a:	d011      	beq.n	8007850 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a4f      	ldr	r2, [pc, #316]	@ (8007970 <HAL_SD_GetCardStatus+0x178>)
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800784e:	e070      	b.n	8007932 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	099b      	lsrs	r3, r3, #6
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	b2da      	uxtb	r2, r3
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b29b      	uxth	r3, r3
 8007876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800787a:	b29a      	uxth	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	0e1b      	lsrs	r3, r3, #24
 8007880:	b29b      	uxth	r3, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	b29a      	uxth	r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	061a      	lsls	r2, r3, #24
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007896:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80078a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	0e1b      	lsrs	r3, r3, #24
 80078a6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	0a1b      	lsrs	r3, r3, #8
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	0d1b      	lsrs	r3, r3, #20
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	0c1b      	lsrs	r3, r3, #16
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80078d8:	b29a      	uxth	r2, r3
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	0a9b      	lsrs	r3, r3, #10
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	0a1b      	lsrs	r3, r3, #8
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	b2da      	uxtb	r2, r3
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	091b      	lsrs	r3, r3, #4
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	b2da      	uxtb	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	b2da      	uxtb	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	0e1b      	lsrs	r3, r3, #24
 800792c:	b2da      	uxtb	r2, r3
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800793a:	4618      	mov	r0, r3
 800793c:	f002 fec0 	bl	800a6c0 <SDMMC_CmdBlockLength>
 8007940:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00d      	beq.n	8007964 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a08      	ldr	r2, [pc, #32]	@ (8007970 <HAL_SD_GetCardStatus+0x178>)
 800794e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007954:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8007964:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007968:	4618      	mov	r0, r3
 800796a:	3750      	adds	r7, #80	@ 0x50
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	1fe00fff 	.word	0x1fe00fff

08007974 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007974:	b590      	push	{r4, r7, lr}
 8007976:	b08d      	sub	sp, #52	@ 0x34
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2203      	movs	r2, #3
 8007988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007990:	2b03      	cmp	r3, #3
 8007992:	d02e      	beq.n	80079f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800799a:	d106      	bne.n	80079aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80079a8:	e029      	b.n	80079fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079b0:	d10a      	bne.n	80079c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fb64 	bl	8008080 <SD_WideBus_Enable>
 80079b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80079c6:	e01a      	b.n	80079fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fba1 	bl	8008116 <SD_WideBus_Disable>
 80079d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80079e2:	e00c      	b.n	80079fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80079f0:	e005      	b.n	80079fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8007b88 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007a0c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007a14:	e096      	b.n	8007b44 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a16:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007a1a:	f04f 0100 	mov.w	r1, #0
 8007a1e:	f7fe f933 	bl	8005c88 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a22:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8083 	beq.w	8007b32 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695a      	ldr	r2, [r3, #20]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4950      	ldr	r1, [pc, #320]	@ (8007b8c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a4a:	fba1 1303 	umull	r1, r3, r1, r3
 8007a4e:	0e1b      	lsrs	r3, r3, #24
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d303      	bcc.n	8007a5c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	e05a      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a64:	d103      	bne.n	8007a6e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	61bb      	str	r3, [r7, #24]
 8007a6c:	e051      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a76:	d126      	bne.n	8007ac6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10e      	bne.n	8007a9e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4a43      	ldr	r2, [pc, #268]	@ (8007b90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d906      	bls.n	8007a96 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4a40      	ldr	r2, [pc, #256]	@ (8007b8c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a90:	0e5b      	lsrs	r3, r3, #25
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	e03d      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	e039      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aaa:	4a39      	ldr	r2, [pc, #228]	@ (8007b90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d906      	bls.n	8007abe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4a36      	ldr	r2, [pc, #216]	@ (8007b8c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	0e5b      	lsrs	r3, r3, #25
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	e029      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	e025      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10e      	bne.n	8007aec <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	4a30      	ldr	r2, [pc, #192]	@ (8007b94 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d906      	bls.n	8007ae4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8007b8c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0e1b      	lsrs	r3, r3, #24
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	e016      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	e012      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af8:	4a26      	ldr	r2, [pc, #152]	@ (8007b94 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d906      	bls.n	8007b0c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4a22      	ldr	r2, [pc, #136]	@ (8007b8c <HAL_SD_ConfigWideBusOperation+0x218>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	0e1b      	lsrs	r3, r3, #24
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e002      	b.n	8007b12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681c      	ldr	r4, [r3, #0]
 8007b16:	466a      	mov	r2, sp
 8007b18:	f107 0314 	add.w	r3, r7, #20
 8007b1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b20:	e882 0003 	stmia.w	r2, {r0, r1}
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f002 fcfc 	bl	800a528 <SDMMC_Init>
 8007b30:	e008      	b.n	8007b44 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f002 fdb7 	bl	800a6c0 <SDMMC_CmdBlockLength>
 8007b52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00c      	beq.n	8007b74 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b88 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007b60:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	372c      	adds	r7, #44	@ 0x2c
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd90      	pop	{r4, r7, pc}
 8007b88:	1fe00fff 	.word	0x1fe00fff
 8007b8c:	55e63b89 	.word	0x55e63b89
 8007b90:	02faf080 	.word	0x02faf080
 8007b94:	017d7840 	.word	0x017d7840

08007b98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ba4:	f107 030c 	add.w	r3, r7, #12
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa40 	bl	8008030 <SD_SendStatus>
 8007bb0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	0a5b      	lsrs	r3, r3, #9
 8007bc8:	f003 030f 	and.w	r3, r3, #15
 8007bcc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007bce:	693b      	ldr	r3, [r7, #16]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b090      	sub	sp, #64	@ 0x40
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007be4:	f7fa f870 	bl	8001cc8 <HAL_GetTick>
 8007be8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f002 fce2 	bl	800a5b8 <SDMMC_GetPowerState>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d102      	bne.n	8007c00 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007bfa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007bfe:	e0b5      	b.n	8007d6c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d02e      	beq.n	8007c66 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f002 fe63 	bl	800a8d8 <SDMMC_CmdSendCID>
 8007c12:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <SD_InitCard+0x46>
    {
      return errorstate;
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1c:	e0a6      	b.n	8007d6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2100      	movs	r1, #0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f002 fd0c 	bl	800a642 <SDMMC_GetResponse>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2104      	movs	r1, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f002 fd03 	bl	800a642 <SDMMC_GetResponse>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2108      	movs	r1, #8
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 fcfa 	bl	800a642 <SDMMC_GetResponse>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	210c      	movs	r1, #12
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f002 fcf1 	bl	800a642 <SDMMC_GetResponse>
 8007c60:	4602      	mov	r2, r0
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d01d      	beq.n	8007caa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007c6e:	e019      	b.n	8007ca4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f107 020a 	add.w	r2, r7, #10
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f002 fe6b 	bl	800a956 <SDMMC_CmdSetRelAdd>
 8007c80:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <SD_InitCard+0xb4>
      {
        return errorstate;
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	e06f      	b.n	8007d6c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007c8c:	f7fa f81c 	bl	8001cc8 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	f241 3287 	movw	r2, #4999	@ 0x1387
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d902      	bls.n	8007ca4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007c9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007ca2:	e063      	b.n	8007d6c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007ca4:	897b      	ldrh	r3, [r7, #10]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0e2      	beq.n	8007c70 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d036      	beq.n	8007d20 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007cb2:	897b      	ldrh	r3, [r7, #10]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	041b      	lsls	r3, r3, #16
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f002 fe25 	bl	800a916 <SDMMC_CmdSendCSD>
 8007ccc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <SD_InitCard+0x100>
    {
      return errorstate;
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	e049      	b.n	8007d6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f002 fcaf 	bl	800a642 <SDMMC_GetResponse>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2104      	movs	r1, #4
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f002 fca6 	bl	800a642 <SDMMC_GetResponse>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2108      	movs	r1, #8
 8007d02:	4618      	mov	r0, r3
 8007d04:	f002 fc9d 	bl	800a642 <SDMMC_GetResponse>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	210c      	movs	r1, #12
 8007d14:	4618      	mov	r0, r3
 8007d16:	f002 fc94 	bl	800a642 <SDMMC_GetResponse>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2104      	movs	r1, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f002 fc8b 	bl	800a642 <SDMMC_GetResponse>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	0d1a      	lsrs	r2, r3, #20
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff fbb8 	bl	80074b0 <HAL_SD_GetCardCSD>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d4a:	e00f      	b.n	8007d6c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	4619      	mov	r1, r3
 8007d58:	4610      	mov	r0, r2
 8007d5a:	f002 fcd4 	bl	800a706 <SDMMC_CmdSelDesel>
 8007d5e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <SD_InitCard+0x192>
  {
    return errorstate;
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	e000      	b.n	8007d6c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3740      	adds	r7, #64	@ 0x40
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f002 fcdd 	bl	800a74c <SDMMC_CmdGoIdleState>
 8007d92:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	e072      	b.n	8007e84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f002 fcf0 	bl	800a788 <SDMMC_CmdOperCond>
 8007da8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db0:	d10d      	bne.n	8007dce <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 fcc5 	bl	800a74c <SDMMC_CmdGoIdleState>
 8007dc2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d004      	beq.n	8007dd4 <SD_PowerON+0x60>
    {
      return errorstate;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e05a      	b.n	8007e84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d137      	bne.n	8007e4c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f002 fcf0 	bl	800a7c8 <SDMMC_CmdAppCommand>
 8007de8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02d      	beq.n	8007e4c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007df0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007df4:	e046      	b.n	8007e84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f002 fce3 	bl	800a7c8 <SDMMC_CmdAppCommand>
 8007e02:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <SD_PowerON+0x9a>
    {
      return errorstate;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e03a      	b.n	8007e84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	491e      	ldr	r1, [pc, #120]	@ (8007e8c <SD_PowerON+0x118>)
 8007e14:	4618      	mov	r0, r3
 8007e16:	f002 fcfa 	bl	800a80e <SDMMC_CmdAppOperCommand>
 8007e1a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007e26:	e02d      	b.n	8007e84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 fc07 	bl	800a642 <SDMMC_GetResponse>
 8007e34:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	0fdb      	lsrs	r3, r3, #31
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <SD_PowerON+0xce>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <SD_PowerON+0xd0>
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]

    count++;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d802      	bhi.n	8007e5c <SD_PowerON+0xe8>
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0cc      	beq.n	8007df6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d902      	bls.n	8007e6c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e6a:	e00b      	b.n	8007e84 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	c1100000 	.word	0xc1100000

08007e90 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08c      	sub	sp, #48	@ 0x30
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e9a:	f7f9 ff15 	bl	8001cc8 <HAL_GetTick>
 8007e9e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 fbc9 	bl	800a642 <SDMMC_GetResponse>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eba:	d102      	bne.n	8007ec2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ebc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ec0:	e0b0      	b.n	8008024 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2140      	movs	r1, #64	@ 0x40
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f002 fbf9 	bl	800a6c0 <SDMMC_CmdBlockLength>
 8007ece:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d005      	beq.n	8007ee2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	e0a0      	b.n	8008024 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	041b      	lsls	r3, r3, #16
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f002 fc6a 	bl	800a7c8 <SDMMC_CmdAppCommand>
 8007ef4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d005      	beq.n	8007f08 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	e08d      	b.n	8008024 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007f0e:	2340      	movs	r3, #64	@ 0x40
 8007f10:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007f12:	2360      	movs	r3, #96	@ 0x60
 8007f14:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f16:	2302      	movs	r3, #2
 8007f18:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f107 0208 	add.w	r2, r7, #8
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f002 fb9b 	bl	800a668 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f002 fd52 	bl	800a9e0 <SDMMC_CmdStatusRegister>
 8007f3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d02b      	beq.n	8007f9c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	e069      	b.n	8008024 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d013      	beq.n	8007f86 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f62:	e00d      	b.n	8007f80 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f002 fb07 	bl	800a57c <SDMMC_ReadFIFO>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f72:	601a      	str	r2, [r3, #0]
        pData++;
 8007f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f76:	3304      	adds	r3, #4
 8007f78:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8007f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f82:	2b07      	cmp	r3, #7
 8007f84:	d9ee      	bls.n	8007f64 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007f86:	f7f9 fe9f 	bl	8001cc8 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f94:	d102      	bne.n	8007f9c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f9a:	e043      	b.n	8008024 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0d2      	beq.n	8007f50 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007fb8:	2308      	movs	r3, #8
 8007fba:	e033      	b.n	8008024 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e02a      	b.n	8008024 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d017      	beq.n	800800c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007fdc:	2320      	movs	r3, #32
 8007fde:	e021      	b.n	8008024 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 fac9 	bl	800a57c <SDMMC_ReadFIFO>
 8007fea:	4602      	mov	r2, r0
 8007fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fee:	601a      	str	r2, [r3, #0]
    pData++;
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007ff6:	f7f9 fe67 	bl	8001cc8 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d102      	bne.n	800800c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008006:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800800a:	e00b      	b.n	8008024 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008012:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e2      	bne.n	8007fe0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a03      	ldr	r2, [pc, #12]	@ (800802c <SD_SendSDStatus+0x19c>)
 8008020:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3730      	adds	r7, #48	@ 0x30
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	18000f3a 	.word	0x18000f3a

08008030 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008040:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008044:	e018      	b.n	8008078 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f002 fca1 	bl	800a99a <SDMMC_CmdSendStatus>
 8008058:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	e009      	b.n	8008078 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2100      	movs	r1, #0
 800806a:	4618      	mov	r0, r3
 800806c:	f002 fae9 	bl	800a642 <SDMMC_GetResponse>
 8008070:	4602      	mov	r2, r0
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f002 fad3 	bl	800a642 <SDMMC_GetResponse>
 800809c:	4603      	mov	r3, r0
 800809e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080a6:	d102      	bne.n	80080ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080ac:	e02f      	b.n	800810e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080ae:	f107 030c 	add.w	r3, r7, #12
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f879 	bl	80081ac <SD_FindSCR>
 80080ba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	e023      	b.n	800810e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01c      	beq.n	800810a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d8:	041b      	lsls	r3, r3, #16
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f002 fb73 	bl	800a7c8 <SDMMC_CmdAppCommand>
 80080e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	e00f      	b.n	800810e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f002 fbaa 	bl	800a84e <SDMMC_CmdBusWidth>
 80080fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	e003      	b.n	800810e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008106:	2300      	movs	r3, #0
 8008108:	e001      	b.n	800810e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800810a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	2300      	movs	r3, #0
 8008124:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f002 fa88 	bl	800a642 <SDMMC_GetResponse>
 8008132:	4603      	mov	r3, r0
 8008134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008138:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800813c:	d102      	bne.n	8008144 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800813e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008142:	e02f      	b.n	80081a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008144:	f107 030c 	add.w	r3, r7, #12
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f82e 	bl	80081ac <SD_FindSCR>
 8008150:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	e023      	b.n	80081a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01c      	beq.n	80081a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f002 fb28 	bl	800a7c8 <SDMMC_CmdAppCommand>
 8008178:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	e00f      	b.n	80081a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f002 fb5f 	bl	800a84e <SDMMC_CmdBusWidth>
 8008190:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	e003      	b.n	80081a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800819c:	2300      	movs	r3, #0
 800819e:	e001      	b.n	80081a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081a0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	@ 0x38
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081b6:	f7f9 fd87 	bl	8001cc8 <HAL_GetTick>
 80081ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80081c0:	2300      	movs	r3, #0
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2108      	movs	r1, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f002 fa74 	bl	800a6c0 <SDMMC_CmdBlockLength>
 80081d8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	e0ad      	b.n	8008340 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ec:	041b      	lsls	r3, r3, #16
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f002 fae9 	bl	800a7c8 <SDMMC_CmdAppCommand>
 80081f6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80081f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <SD_FindSCR+0x56>
  {
    return errorstate;
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	e09e      	b.n	8008340 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008208:	2308      	movs	r3, #8
 800820a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800820c:	2330      	movs	r3, #48	@ 0x30
 800820e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008210:	2302      	movs	r3, #2
 8008212:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008214:	2300      	movs	r3, #0
 8008216:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008218:	2301      	movs	r3, #1
 800821a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f107 0210 	add.w	r2, r7, #16
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f002 fa1e 	bl	800a668 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4618      	mov	r0, r3
 8008232:	f002 fb2f 	bl	800a894 <SDMMC_CmdSendSCR>
 8008236:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	d027      	beq.n	800828e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	e07e      	b.n	8008340 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008248:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d113      	bne.n	8008278 <SD_FindSCR+0xcc>
 8008250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008252:	2b00      	cmp	r3, #0
 8008254:	d110      	bne.n	8008278 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f002 f98e 	bl	800a57c <SDMMC_ReadFIFO>
 8008260:	4603      	mov	r3, r0
 8008262:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f002 f987 	bl	800a57c <SDMMC_ReadFIFO>
 800826e:	4603      	mov	r3, r0
 8008270:	60fb      	str	r3, [r7, #12]
      index++;
 8008272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008274:	3301      	adds	r3, #1
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8008278:	f7f9 fd26 	bl	8001cc8 <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d102      	bne.n	800828e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800828c:	e058      	b.n	8008340 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008294:	f240 532a 	movw	r3, #1322	@ 0x52a
 8008298:	4013      	ands	r3, r2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0d1      	beq.n	8008242 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2208      	movs	r2, #8
 80082b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80082b4:	2308      	movs	r3, #8
 80082b6:	e043      	b.n	8008340 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2202      	movs	r2, #2
 80082cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80082ce:	2302      	movs	r3, #2
 80082d0:	e036      	b.n	8008340 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2220      	movs	r2, #32
 80082e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80082e8:	2320      	movs	r3, #32
 80082ea:	e029      	b.n	8008340 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a15      	ldr	r2, [pc, #84]	@ (8008348 <SD_FindSCR+0x19c>)
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	061a      	lsls	r2, r3, #24
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	021b      	lsls	r3, r3, #8
 80082fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008300:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	0a1b      	lsrs	r3, r3, #8
 8008306:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800830a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	0e1b      	lsrs	r3, r3, #24
 8008310:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8008312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008314:	601a      	str	r2, [r3, #0]
    scr++;
 8008316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008318:	3304      	adds	r3, #4
 800831a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	061a      	lsls	r2, r3, #24
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008328:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	0a1b      	lsrs	r3, r3, #8
 800832e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8008332:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	0e1b      	lsrs	r3, r3, #24
 8008338:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3738      	adds	r7, #56	@ 0x38
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	18000f3a 	.word	0x18000f3a

0800834c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e10f      	b.n	800857e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a87      	ldr	r2, [pc, #540]	@ (8008588 <HAL_SPI_Init+0x23c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00f      	beq.n	800838e <HAL_SPI_Init+0x42>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a86      	ldr	r2, [pc, #536]	@ (800858c <HAL_SPI_Init+0x240>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00a      	beq.n	800838e <HAL_SPI_Init+0x42>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a84      	ldr	r2, [pc, #528]	@ (8008590 <HAL_SPI_Init+0x244>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d005      	beq.n	800838e <HAL_SPI_Init+0x42>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	2b0f      	cmp	r3, #15
 8008388:	d901      	bls.n	800838e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e0f7      	b.n	800857e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f900 	bl	8008594 <SPI_GetPacketSize>
 8008394:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a7b      	ldr	r2, [pc, #492]	@ (8008588 <HAL_SPI_Init+0x23c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00c      	beq.n	80083ba <HAL_SPI_Init+0x6e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a79      	ldr	r2, [pc, #484]	@ (800858c <HAL_SPI_Init+0x240>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d007      	beq.n	80083ba <HAL_SPI_Init+0x6e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a78      	ldr	r2, [pc, #480]	@ (8008590 <HAL_SPI_Init+0x244>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d002      	beq.n	80083ba <HAL_SPI_Init+0x6e>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d811      	bhi.n	80083de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80083be:	4a72      	ldr	r2, [pc, #456]	@ (8008588 <HAL_SPI_Init+0x23c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d009      	beq.n	80083d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a70      	ldr	r2, [pc, #448]	@ (800858c <HAL_SPI_Init+0x240>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d004      	beq.n	80083d8 <HAL_SPI_Init+0x8c>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008590 <HAL_SPI_Init+0x244>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d104      	bne.n	80083e2 <HAL_SPI_Init+0x96>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b10      	cmp	r3, #16
 80083dc:	d901      	bls.n	80083e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e0cd      	b.n	800857e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f8 fff4 	bl	80013e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0201 	bic.w	r2, r2, #1
 8008412:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800841e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008428:	d119      	bne.n	800845e <HAL_SPI_Init+0x112>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008432:	d103      	bne.n	800843c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10c      	bne.n	800845e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844c:	d107      	bne.n	800845e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800845c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00f      	beq.n	800848a <HAL_SPI_Init+0x13e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b06      	cmp	r3, #6
 8008470:	d90b      	bls.n	800848a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	e007      	b.n	800849a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008498:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69da      	ldr	r2, [r3, #28]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a2:	431a      	orrs	r2, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ac:	ea42 0103 	orr.w	r1, r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	431a      	orrs	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fa:	ea42 0103 	orr.w	r1, r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d113      	bne.n	800853a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008524:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008538:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40013000 	.word	0x40013000
 800858c:	40003800 	.word	0x40003800
 8008590:	40003c00 	.word	0x40003c00

08008594 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	3301      	adds	r3, #1
 80085ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	3307      	adds	r3, #7
 80085b2:	08db      	lsrs	r3, r3, #3
 80085b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e049      	b.n	8008670 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7f8 ffeb 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f000 f9a1 	bl	8008950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e049      	b.n	800871e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7f8 ff2e 	bl	8001500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f000 f94a 	bl	8008950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
	...

08008728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008742:	2302      	movs	r3, #2
 8008744:	e0ff      	b.n	8008946 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b14      	cmp	r3, #20
 8008752:	f200 80f0 	bhi.w	8008936 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008756:	a201      	add	r2, pc, #4	@ (adr r2, 800875c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	080087b1 	.word	0x080087b1
 8008760:	08008937 	.word	0x08008937
 8008764:	08008937 	.word	0x08008937
 8008768:	08008937 	.word	0x08008937
 800876c:	080087f1 	.word	0x080087f1
 8008770:	08008937 	.word	0x08008937
 8008774:	08008937 	.word	0x08008937
 8008778:	08008937 	.word	0x08008937
 800877c:	08008833 	.word	0x08008833
 8008780:	08008937 	.word	0x08008937
 8008784:	08008937 	.word	0x08008937
 8008788:	08008937 	.word	0x08008937
 800878c:	08008873 	.word	0x08008873
 8008790:	08008937 	.word	0x08008937
 8008794:	08008937 	.word	0x08008937
 8008798:	08008937 	.word	0x08008937
 800879c:	080088b5 	.word	0x080088b5
 80087a0:	08008937 	.word	0x08008937
 80087a4:	08008937 	.word	0x08008937
 80087a8:	08008937 	.word	0x08008937
 80087ac:	080088f5 	.word	0x080088f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68b9      	ldr	r1, [r7, #8]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f96a 	bl	8008a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0208 	orr.w	r2, r2, #8
 80087ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699a      	ldr	r2, [r3, #24]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0204 	bic.w	r2, r2, #4
 80087da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6999      	ldr	r1, [r3, #24]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	691a      	ldr	r2, [r3, #16]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	619a      	str	r2, [r3, #24]
      break;
 80087ee:	e0a5      	b.n	800893c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f9da 	bl	8008bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800880a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800881a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6999      	ldr	r1, [r3, #24]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	021a      	lsls	r2, r3, #8
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	619a      	str	r2, [r3, #24]
      break;
 8008830:	e084      	b.n	800893c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fa43 	bl	8008cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0208 	orr.w	r2, r2, #8
 800884c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0204 	bic.w	r2, r2, #4
 800885c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69d9      	ldr	r1, [r3, #28]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	61da      	str	r2, [r3, #28]
      break;
 8008870:	e064      	b.n	800893c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	4618      	mov	r0, r3
 800887a:	f000 faab 	bl	8008dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800888c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800889c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69d9      	ldr	r1, [r3, #28]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	021a      	lsls	r2, r3, #8
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	61da      	str	r2, [r3, #28]
      break;
 80088b2:	e043      	b.n	800893c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 faf4 	bl	8008ea8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0208 	orr.w	r2, r2, #8
 80088ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0204 	bic.w	r2, r2, #4
 80088de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80088f2:	e023      	b.n	800893c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fb38 	bl	8008f70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800890e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800891e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	021a      	lsls	r2, r3, #8
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008934:	e002      	b.n	800893c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
      break;
 800893a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop

08008950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a43      	ldr	r2, [pc, #268]	@ (8008a70 <TIM_Base_SetConfig+0x120>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d013      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800896e:	d00f      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a40      	ldr	r2, [pc, #256]	@ (8008a74 <TIM_Base_SetConfig+0x124>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00b      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a3f      	ldr	r2, [pc, #252]	@ (8008a78 <TIM_Base_SetConfig+0x128>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d007      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a3e      	ldr	r2, [pc, #248]	@ (8008a7c <TIM_Base_SetConfig+0x12c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_Base_SetConfig+0x40>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a3d      	ldr	r2, [pc, #244]	@ (8008a80 <TIM_Base_SetConfig+0x130>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d108      	bne.n	80089a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a32      	ldr	r2, [pc, #200]	@ (8008a70 <TIM_Base_SetConfig+0x120>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d01f      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089b0:	d01b      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008a74 <TIM_Base_SetConfig+0x124>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d017      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008a78 <TIM_Base_SetConfig+0x128>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d013      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a2d      	ldr	r2, [pc, #180]	@ (8008a7c <TIM_Base_SetConfig+0x12c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00f      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008a80 <TIM_Base_SetConfig+0x130>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00b      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008a84 <TIM_Base_SetConfig+0x134>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d007      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008a88 <TIM_Base_SetConfig+0x138>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d003      	beq.n	80089ea <TIM_Base_SetConfig+0x9a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a29      	ldr	r2, [pc, #164]	@ (8008a8c <TIM_Base_SetConfig+0x13c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d108      	bne.n	80089fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a14      	ldr	r2, [pc, #80]	@ (8008a70 <TIM_Base_SetConfig+0x120>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00f      	beq.n	8008a42 <TIM_Base_SetConfig+0xf2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a16      	ldr	r2, [pc, #88]	@ (8008a80 <TIM_Base_SetConfig+0x130>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00b      	beq.n	8008a42 <TIM_Base_SetConfig+0xf2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a15      	ldr	r2, [pc, #84]	@ (8008a84 <TIM_Base_SetConfig+0x134>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d007      	beq.n	8008a42 <TIM_Base_SetConfig+0xf2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a14      	ldr	r2, [pc, #80]	@ (8008a88 <TIM_Base_SetConfig+0x138>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d003      	beq.n	8008a42 <TIM_Base_SetConfig+0xf2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a13      	ldr	r2, [pc, #76]	@ (8008a8c <TIM_Base_SetConfig+0x13c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d103      	bne.n	8008a4a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	691a      	ldr	r2, [r3, #16]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f043 0204 	orr.w	r2, r3, #4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40010000 	.word	0x40010000
 8008a74:	40000400 	.word	0x40000400
 8008a78:	40000800 	.word	0x40000800
 8008a7c:	40000c00 	.word	0x40000c00
 8008a80:	40010400 	.word	0x40010400
 8008a84:	40014000 	.word	0x40014000
 8008a88:	40014400 	.word	0x40014400
 8008a8c:	40014800 	.word	0x40014800

08008a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	f023 0201 	bic.w	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	4b37      	ldr	r3, [pc, #220]	@ (8008b98 <TIM_OC1_SetConfig+0x108>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f023 0302 	bic.w	r3, r3, #2
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8008b9c <TIM_OC1_SetConfig+0x10c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00f      	beq.n	8008b0c <TIM_OC1_SetConfig+0x7c>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a2c      	ldr	r2, [pc, #176]	@ (8008ba0 <TIM_OC1_SetConfig+0x110>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_OC1_SetConfig+0x7c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a2b      	ldr	r2, [pc, #172]	@ (8008ba4 <TIM_OC1_SetConfig+0x114>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_OC1_SetConfig+0x7c>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba8 <TIM_OC1_SetConfig+0x118>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_OC1_SetConfig+0x7c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a29      	ldr	r2, [pc, #164]	@ (8008bac <TIM_OC1_SetConfig+0x11c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d10c      	bne.n	8008b26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f023 0308 	bic.w	r3, r3, #8
 8008b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f023 0304 	bic.w	r3, r3, #4
 8008b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a1c      	ldr	r2, [pc, #112]	@ (8008b9c <TIM_OC1_SetConfig+0x10c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00f      	beq.n	8008b4e <TIM_OC1_SetConfig+0xbe>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba0 <TIM_OC1_SetConfig+0x110>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <TIM_OC1_SetConfig+0xbe>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba4 <TIM_OC1_SetConfig+0x114>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <TIM_OC1_SetConfig+0xbe>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a19      	ldr	r2, [pc, #100]	@ (8008ba8 <TIM_OC1_SetConfig+0x118>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_OC1_SetConfig+0xbe>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a18      	ldr	r2, [pc, #96]	@ (8008bac <TIM_OC1_SetConfig+0x11c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d111      	bne.n	8008b72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	621a      	str	r2, [r3, #32]
}
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	fffeff8f 	.word	0xfffeff8f
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40010400 	.word	0x40010400
 8008ba4:	40014000 	.word	0x40014000
 8008ba8:	40014400 	.word	0x40014400
 8008bac:	40014800 	.word	0x40014800

08008bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	f023 0210 	bic.w	r2, r3, #16
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4b34      	ldr	r3, [pc, #208]	@ (8008cac <TIM_OC2_SetConfig+0xfc>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	f023 0320 	bic.w	r3, r3, #32
 8008bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a29      	ldr	r2, [pc, #164]	@ (8008cb0 <TIM_OC2_SetConfig+0x100>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d003      	beq.n	8008c18 <TIM_OC2_SetConfig+0x68>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a28      	ldr	r2, [pc, #160]	@ (8008cb4 <TIM_OC2_SetConfig+0x104>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d10d      	bne.n	8008c34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb0 <TIM_OC2_SetConfig+0x100>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00f      	beq.n	8008c5c <TIM_OC2_SetConfig+0xac>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb4 <TIM_OC2_SetConfig+0x104>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00b      	beq.n	8008c5c <TIM_OC2_SetConfig+0xac>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb8 <TIM_OC2_SetConfig+0x108>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d007      	beq.n	8008c5c <TIM_OC2_SetConfig+0xac>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8008cbc <TIM_OC2_SetConfig+0x10c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d003      	beq.n	8008c5c <TIM_OC2_SetConfig+0xac>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc0 <TIM_OC2_SetConfig+0x110>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d113      	bne.n	8008c84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	621a      	str	r2, [r3, #32]
}
 8008c9e:	bf00      	nop
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	feff8fff 	.word	0xfeff8fff
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400
 8008cb8:	40014000 	.word	0x40014000
 8008cbc:	40014400 	.word	0x40014400
 8008cc0:	40014800 	.word	0x40014800

08008cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4b33      	ldr	r3, [pc, #204]	@ (8008dbc <TIM_OC3_SetConfig+0xf8>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a28      	ldr	r2, [pc, #160]	@ (8008dc0 <TIM_OC3_SetConfig+0xfc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC3_SetConfig+0x66>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a27      	ldr	r2, [pc, #156]	@ (8008dc4 <TIM_OC3_SetConfig+0x100>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10d      	bne.n	8008d46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc0 <TIM_OC3_SetConfig+0xfc>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00f      	beq.n	8008d6e <TIM_OC3_SetConfig+0xaa>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc4 <TIM_OC3_SetConfig+0x100>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00b      	beq.n	8008d6e <TIM_OC3_SetConfig+0xaa>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc8 <TIM_OC3_SetConfig+0x104>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d007      	beq.n	8008d6e <TIM_OC3_SetConfig+0xaa>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1a      	ldr	r2, [pc, #104]	@ (8008dcc <TIM_OC3_SetConfig+0x108>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d003      	beq.n	8008d6e <TIM_OC3_SetConfig+0xaa>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a19      	ldr	r2, [pc, #100]	@ (8008dd0 <TIM_OC3_SetConfig+0x10c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d113      	bne.n	8008d96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	621a      	str	r2, [r3, #32]
}
 8008db0:	bf00      	nop
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	fffeff8f 	.word	0xfffeff8f
 8008dc0:	40010000 	.word	0x40010000
 8008dc4:	40010400 	.word	0x40010400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40014400 	.word	0x40014400
 8008dd0:	40014800 	.word	0x40014800

08008dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4b24      	ldr	r3, [pc, #144]	@ (8008e90 <TIM_OC4_SetConfig+0xbc>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	031b      	lsls	r3, r3, #12
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a19      	ldr	r2, [pc, #100]	@ (8008e94 <TIM_OC4_SetConfig+0xc0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00f      	beq.n	8008e54 <TIM_OC4_SetConfig+0x80>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a18      	ldr	r2, [pc, #96]	@ (8008e98 <TIM_OC4_SetConfig+0xc4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00b      	beq.n	8008e54 <TIM_OC4_SetConfig+0x80>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a17      	ldr	r2, [pc, #92]	@ (8008e9c <TIM_OC4_SetConfig+0xc8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d007      	beq.n	8008e54 <TIM_OC4_SetConfig+0x80>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a16      	ldr	r2, [pc, #88]	@ (8008ea0 <TIM_OC4_SetConfig+0xcc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d003      	beq.n	8008e54 <TIM_OC4_SetConfig+0x80>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a15      	ldr	r2, [pc, #84]	@ (8008ea4 <TIM_OC4_SetConfig+0xd0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d109      	bne.n	8008e68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	019b      	lsls	r3, r3, #6
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	feff8fff 	.word	0xfeff8fff
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800

08008ea8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b21      	ldr	r3, [pc, #132]	@ (8008f58 <TIM_OC5_SetConfig+0xb0>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008ee8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a18      	ldr	r2, [pc, #96]	@ (8008f5c <TIM_OC5_SetConfig+0xb4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00f      	beq.n	8008f1e <TIM_OC5_SetConfig+0x76>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a17      	ldr	r2, [pc, #92]	@ (8008f60 <TIM_OC5_SetConfig+0xb8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00b      	beq.n	8008f1e <TIM_OC5_SetConfig+0x76>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a16      	ldr	r2, [pc, #88]	@ (8008f64 <TIM_OC5_SetConfig+0xbc>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d007      	beq.n	8008f1e <TIM_OC5_SetConfig+0x76>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a15      	ldr	r2, [pc, #84]	@ (8008f68 <TIM_OC5_SetConfig+0xc0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d003      	beq.n	8008f1e <TIM_OC5_SetConfig+0x76>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <TIM_OC5_SetConfig+0xc4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d109      	bne.n	8008f32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	fffeff8f 	.word	0xfffeff8f
 8008f5c:	40010000 	.word	0x40010000
 8008f60:	40010400 	.word	0x40010400
 8008f64:	40014000 	.word	0x40014000
 8008f68:	40014400 	.word	0x40014400
 8008f6c:	40014800 	.word	0x40014800

08008f70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4b22      	ldr	r3, [pc, #136]	@ (8009024 <TIM_OC6_SetConfig+0xb4>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	021b      	lsls	r3, r3, #8
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	051b      	lsls	r3, r3, #20
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a19      	ldr	r2, [pc, #100]	@ (8009028 <TIM_OC6_SetConfig+0xb8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00f      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x78>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a18      	ldr	r2, [pc, #96]	@ (800902c <TIM_OC6_SetConfig+0xbc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00b      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x78>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a17      	ldr	r2, [pc, #92]	@ (8009030 <TIM_OC6_SetConfig+0xc0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d007      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x78>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a16      	ldr	r2, [pc, #88]	@ (8009034 <TIM_OC6_SetConfig+0xc4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d003      	beq.n	8008fe8 <TIM_OC6_SetConfig+0x78>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a15      	ldr	r2, [pc, #84]	@ (8009038 <TIM_OC6_SetConfig+0xc8>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d109      	bne.n	8008ffc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	621a      	str	r2, [r3, #32]
}
 8009016:	bf00      	nop
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	feff8fff 	.word	0xfeff8fff
 8009028:	40010000 	.word	0x40010000
 800902c:	40010400 	.word	0x40010400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800

0800903c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800904c:	2b01      	cmp	r3, #1
 800904e:	d101      	bne.n	8009054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009050:	2302      	movs	r3, #2
 8009052:	e06d      	b.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a30      	ldr	r2, [pc, #192]	@ (800913c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d004      	beq.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a2f      	ldr	r2, [pc, #188]	@ (8009140 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d108      	bne.n	800909a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800908e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a20      	ldr	r2, [pc, #128]	@ (800913c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d022      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090c6:	d01d      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009144 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d018      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009148 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d013      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1a      	ldr	r2, [pc, #104]	@ (800914c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00e      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a15      	ldr	r2, [pc, #84]	@ (8009140 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d009      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a16      	ldr	r2, [pc, #88]	@ (8009150 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d004      	beq.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a15      	ldr	r2, [pc, #84]	@ (8009154 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d10c      	bne.n	800911e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800910a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	4313      	orrs	r3, r2
 8009114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3714      	adds	r7, #20
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	40010000 	.word	0x40010000
 8009140:	40010400 	.word	0x40010400
 8009144:	40000400 	.word	0x40000400
 8009148:	40000800 	.word	0x40000800
 800914c:	40000c00 	.word	0x40000c00
 8009150:	40001800 	.word	0x40001800
 8009154:	40014000 	.word	0x40014000

08009158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009170:	2302      	movs	r3, #2
 8009172:	e065      	b.n	8009240 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	041b      	lsls	r3, r3, #16
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a16      	ldr	r2, [pc, #88]	@ (800924c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a14      	ldr	r2, [pc, #80]	@ (8009250 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d115      	bne.n	800922e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920c:	051b      	lsls	r3, r3, #20
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	40010000 	.word	0x40010000
 8009250:	40010400 	.word	0x40010400

08009254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e042      	b.n	80092ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7f8 faa3 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2224      	movs	r2, #36	@ 0x24
 8009282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fe1e 	bl	8009ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f8b3 	bl	8009410 <UART_SetConfig>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e01b      	b.n	80092ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0201 	orr.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fe9d 	bl	800a024 <UART_CheckIdleState>
 80092ea:	4603      	mov	r3, r0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	@ 0x28
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	4613      	mov	r3, r2
 8009302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930a:	2b20      	cmp	r3, #32
 800930c:	d17b      	bne.n	8009406 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <HAL_UART_Transmit+0x26>
 8009314:	88fb      	ldrh	r3, [r7, #6]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e074      	b.n	8009408 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2221      	movs	r2, #33	@ 0x21
 800932a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800932e:	f7f8 fccb 	bl	8001cc8 <HAL_GetTick>
 8009332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	88fa      	ldrh	r2, [r7, #6]
 8009338:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800934c:	d108      	bne.n	8009360 <HAL_UART_Transmit+0x6c>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d104      	bne.n	8009360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	61bb      	str	r3, [r7, #24]
 800935e:	e003      	b.n	8009368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009364:	2300      	movs	r3, #0
 8009366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009368:	e030      	b.n	80093cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2200      	movs	r2, #0
 8009372:	2180      	movs	r1, #128	@ 0x80
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 feff 	bl	800a178 <UART_WaitOnFlagUntilTimeout>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e03d      	b.n	8009408 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10b      	bne.n	80093aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	3302      	adds	r3, #2
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	e007      	b.n	80093ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	781a      	ldrb	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3301      	adds	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1c8      	bne.n	800936a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2200      	movs	r2, #0
 80093e0:	2140      	movs	r1, #64	@ 0x40
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 fec8 	bl	800a178 <UART_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e006      	b.n	8009408 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	e000      	b.n	8009408 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009406:	2302      	movs	r3, #2
  }
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009414:	b092      	sub	sp, #72	@ 0x48
 8009416:	af00      	add	r7, sp, #0
 8009418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	431a      	orrs	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	431a      	orrs	r2, r3
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	4313      	orrs	r3, r2
 8009436:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4bbe      	ldr	r3, [pc, #760]	@ (8009738 <UART_SetConfig+0x328>)
 8009440:	4013      	ands	r3, r2
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009448:	430b      	orrs	r3, r1
 800944a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	68da      	ldr	r2, [r3, #12]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4ab3      	ldr	r2, [pc, #716]	@ (800973c <UART_SetConfig+0x32c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d004      	beq.n	800947c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009478:	4313      	orrs	r3, r2
 800947a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	4baf      	ldr	r3, [pc, #700]	@ (8009740 <UART_SetConfig+0x330>)
 8009484:	4013      	ands	r3, r2
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	6812      	ldr	r2, [r2, #0]
 800948a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800948c:	430b      	orrs	r3, r1
 800948e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	f023 010f 	bic.w	r1, r3, #15
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4aa6      	ldr	r2, [pc, #664]	@ (8009744 <UART_SetConfig+0x334>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d177      	bne.n	80095a0 <UART_SetConfig+0x190>
 80094b0:	4ba5      	ldr	r3, [pc, #660]	@ (8009748 <UART_SetConfig+0x338>)
 80094b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094b8:	2b28      	cmp	r3, #40	@ 0x28
 80094ba:	d86d      	bhi.n	8009598 <UART_SetConfig+0x188>
 80094bc:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <UART_SetConfig+0xb4>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	08009569 	.word	0x08009569
 80094c8:	08009599 	.word	0x08009599
 80094cc:	08009599 	.word	0x08009599
 80094d0:	08009599 	.word	0x08009599
 80094d4:	08009599 	.word	0x08009599
 80094d8:	08009599 	.word	0x08009599
 80094dc:	08009599 	.word	0x08009599
 80094e0:	08009599 	.word	0x08009599
 80094e4:	08009571 	.word	0x08009571
 80094e8:	08009599 	.word	0x08009599
 80094ec:	08009599 	.word	0x08009599
 80094f0:	08009599 	.word	0x08009599
 80094f4:	08009599 	.word	0x08009599
 80094f8:	08009599 	.word	0x08009599
 80094fc:	08009599 	.word	0x08009599
 8009500:	08009599 	.word	0x08009599
 8009504:	08009579 	.word	0x08009579
 8009508:	08009599 	.word	0x08009599
 800950c:	08009599 	.word	0x08009599
 8009510:	08009599 	.word	0x08009599
 8009514:	08009599 	.word	0x08009599
 8009518:	08009599 	.word	0x08009599
 800951c:	08009599 	.word	0x08009599
 8009520:	08009599 	.word	0x08009599
 8009524:	08009581 	.word	0x08009581
 8009528:	08009599 	.word	0x08009599
 800952c:	08009599 	.word	0x08009599
 8009530:	08009599 	.word	0x08009599
 8009534:	08009599 	.word	0x08009599
 8009538:	08009599 	.word	0x08009599
 800953c:	08009599 	.word	0x08009599
 8009540:	08009599 	.word	0x08009599
 8009544:	08009589 	.word	0x08009589
 8009548:	08009599 	.word	0x08009599
 800954c:	08009599 	.word	0x08009599
 8009550:	08009599 	.word	0x08009599
 8009554:	08009599 	.word	0x08009599
 8009558:	08009599 	.word	0x08009599
 800955c:	08009599 	.word	0x08009599
 8009560:	08009599 	.word	0x08009599
 8009564:	08009591 	.word	0x08009591
 8009568:	2301      	movs	r3, #1
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956e:	e222      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009570:	2304      	movs	r3, #4
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e21e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009578:	2308      	movs	r3, #8
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e21a      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009580:	2310      	movs	r3, #16
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e216      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009588:	2320      	movs	r3, #32
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e212      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009590:	2340      	movs	r3, #64	@ 0x40
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e20e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009598:	2380      	movs	r3, #128	@ 0x80
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e20a      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a69      	ldr	r2, [pc, #420]	@ (800974c <UART_SetConfig+0x33c>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d130      	bne.n	800960c <UART_SetConfig+0x1fc>
 80095aa:	4b67      	ldr	r3, [pc, #412]	@ (8009748 <UART_SetConfig+0x338>)
 80095ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	d826      	bhi.n	8009604 <UART_SetConfig+0x1f4>
 80095b6:	a201      	add	r2, pc, #4	@ (adr r2, 80095bc <UART_SetConfig+0x1ac>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095d5 	.word	0x080095d5
 80095c0:	080095dd 	.word	0x080095dd
 80095c4:	080095e5 	.word	0x080095e5
 80095c8:	080095ed 	.word	0x080095ed
 80095cc:	080095f5 	.word	0x080095f5
 80095d0:	080095fd 	.word	0x080095fd
 80095d4:	2300      	movs	r3, #0
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e1ec      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80095dc:	2304      	movs	r3, #4
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e1e8      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80095e4:	2308      	movs	r3, #8
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ea:	e1e4      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80095ec:	2310      	movs	r3, #16
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e1e0      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80095f4:	2320      	movs	r3, #32
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e1dc      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80095fc:	2340      	movs	r3, #64	@ 0x40
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e1d8      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009604:	2380      	movs	r3, #128	@ 0x80
 8009606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960a:	e1d4      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a4f      	ldr	r2, [pc, #316]	@ (8009750 <UART_SetConfig+0x340>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d130      	bne.n	8009678 <UART_SetConfig+0x268>
 8009616:	4b4c      	ldr	r3, [pc, #304]	@ (8009748 <UART_SetConfig+0x338>)
 8009618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	2b05      	cmp	r3, #5
 8009620:	d826      	bhi.n	8009670 <UART_SetConfig+0x260>
 8009622:	a201      	add	r2, pc, #4	@ (adr r2, 8009628 <UART_SetConfig+0x218>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	08009641 	.word	0x08009641
 800962c:	08009649 	.word	0x08009649
 8009630:	08009651 	.word	0x08009651
 8009634:	08009659 	.word	0x08009659
 8009638:	08009661 	.word	0x08009661
 800963c:	08009669 	.word	0x08009669
 8009640:	2300      	movs	r3, #0
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e1b6      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009648:	2304      	movs	r3, #4
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e1b2      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009650:	2308      	movs	r3, #8
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e1ae      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009658:	2310      	movs	r3, #16
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e1aa      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009660:	2320      	movs	r3, #32
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e1a6      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009668:	2340      	movs	r3, #64	@ 0x40
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e1a2      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009670:	2380      	movs	r3, #128	@ 0x80
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e19e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a35      	ldr	r2, [pc, #212]	@ (8009754 <UART_SetConfig+0x344>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d130      	bne.n	80096e4 <UART_SetConfig+0x2d4>
 8009682:	4b31      	ldr	r3, [pc, #196]	@ (8009748 <UART_SetConfig+0x338>)
 8009684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	2b05      	cmp	r3, #5
 800968c:	d826      	bhi.n	80096dc <UART_SetConfig+0x2cc>
 800968e:	a201      	add	r2, pc, #4	@ (adr r2, 8009694 <UART_SetConfig+0x284>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096ad 	.word	0x080096ad
 8009698:	080096b5 	.word	0x080096b5
 800969c:	080096bd 	.word	0x080096bd
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096cd 	.word	0x080096cd
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	2300      	movs	r3, #0
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e180      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096b4:	2304      	movs	r3, #4
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e17c      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096bc:	2308      	movs	r3, #8
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e178      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096c4:	2310      	movs	r3, #16
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e174      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096cc:	2320      	movs	r3, #32
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e170      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096d4:	2340      	movs	r3, #64	@ 0x40
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e16c      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096dc:	2380      	movs	r3, #128	@ 0x80
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e168      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009758 <UART_SetConfig+0x348>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d142      	bne.n	8009774 <UART_SetConfig+0x364>
 80096ee:	4b16      	ldr	r3, [pc, #88]	@ (8009748 <UART_SetConfig+0x338>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d838      	bhi.n	800976c <UART_SetConfig+0x35c>
 80096fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <UART_SetConfig+0x2f0>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	08009719 	.word	0x08009719
 8009704:	08009721 	.word	0x08009721
 8009708:	08009729 	.word	0x08009729
 800970c:	08009731 	.word	0x08009731
 8009710:	0800975d 	.word	0x0800975d
 8009714:	08009765 	.word	0x08009765
 8009718:	2300      	movs	r3, #0
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e14a      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009720:	2304      	movs	r3, #4
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e146      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009728:	2308      	movs	r3, #8
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e142      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009730:	2310      	movs	r3, #16
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e13e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009738:	cfff69f3 	.word	0xcfff69f3
 800973c:	58000c00 	.word	0x58000c00
 8009740:	11fff4ff 	.word	0x11fff4ff
 8009744:	40011000 	.word	0x40011000
 8009748:	58024400 	.word	0x58024400
 800974c:	40004400 	.word	0x40004400
 8009750:	40004800 	.word	0x40004800
 8009754:	40004c00 	.word	0x40004c00
 8009758:	40005000 	.word	0x40005000
 800975c:	2320      	movs	r3, #32
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009762:	e128      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009764:	2340      	movs	r3, #64	@ 0x40
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e124      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800976c:	2380      	movs	r3, #128	@ 0x80
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e120      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4acb      	ldr	r2, [pc, #812]	@ (8009aa8 <UART_SetConfig+0x698>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d176      	bne.n	800986c <UART_SetConfig+0x45c>
 800977e:	4bcb      	ldr	r3, [pc, #812]	@ (8009aac <UART_SetConfig+0x69c>)
 8009780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009786:	2b28      	cmp	r3, #40	@ 0x28
 8009788:	d86c      	bhi.n	8009864 <UART_SetConfig+0x454>
 800978a:	a201      	add	r2, pc, #4	@ (adr r2, 8009790 <UART_SetConfig+0x380>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	08009835 	.word	0x08009835
 8009794:	08009865 	.word	0x08009865
 8009798:	08009865 	.word	0x08009865
 800979c:	08009865 	.word	0x08009865
 80097a0:	08009865 	.word	0x08009865
 80097a4:	08009865 	.word	0x08009865
 80097a8:	08009865 	.word	0x08009865
 80097ac:	08009865 	.word	0x08009865
 80097b0:	0800983d 	.word	0x0800983d
 80097b4:	08009865 	.word	0x08009865
 80097b8:	08009865 	.word	0x08009865
 80097bc:	08009865 	.word	0x08009865
 80097c0:	08009865 	.word	0x08009865
 80097c4:	08009865 	.word	0x08009865
 80097c8:	08009865 	.word	0x08009865
 80097cc:	08009865 	.word	0x08009865
 80097d0:	08009845 	.word	0x08009845
 80097d4:	08009865 	.word	0x08009865
 80097d8:	08009865 	.word	0x08009865
 80097dc:	08009865 	.word	0x08009865
 80097e0:	08009865 	.word	0x08009865
 80097e4:	08009865 	.word	0x08009865
 80097e8:	08009865 	.word	0x08009865
 80097ec:	08009865 	.word	0x08009865
 80097f0:	0800984d 	.word	0x0800984d
 80097f4:	08009865 	.word	0x08009865
 80097f8:	08009865 	.word	0x08009865
 80097fc:	08009865 	.word	0x08009865
 8009800:	08009865 	.word	0x08009865
 8009804:	08009865 	.word	0x08009865
 8009808:	08009865 	.word	0x08009865
 800980c:	08009865 	.word	0x08009865
 8009810:	08009855 	.word	0x08009855
 8009814:	08009865 	.word	0x08009865
 8009818:	08009865 	.word	0x08009865
 800981c:	08009865 	.word	0x08009865
 8009820:	08009865 	.word	0x08009865
 8009824:	08009865 	.word	0x08009865
 8009828:	08009865 	.word	0x08009865
 800982c:	08009865 	.word	0x08009865
 8009830:	0800985d 	.word	0x0800985d
 8009834:	2301      	movs	r3, #1
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983a:	e0bc      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800983c:	2304      	movs	r3, #4
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009842:	e0b8      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009844:	2308      	movs	r3, #8
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e0b4      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800984c:	2310      	movs	r3, #16
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e0b0      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009854:	2320      	movs	r3, #32
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e0ac      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800985c:	2340      	movs	r3, #64	@ 0x40
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e0a8      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009864:	2380      	movs	r3, #128	@ 0x80
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e0a4      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a8f      	ldr	r2, [pc, #572]	@ (8009ab0 <UART_SetConfig+0x6a0>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d130      	bne.n	80098d8 <UART_SetConfig+0x4c8>
 8009876:	4b8d      	ldr	r3, [pc, #564]	@ (8009aac <UART_SetConfig+0x69c>)
 8009878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	2b05      	cmp	r3, #5
 8009880:	d826      	bhi.n	80098d0 <UART_SetConfig+0x4c0>
 8009882:	a201      	add	r2, pc, #4	@ (adr r2, 8009888 <UART_SetConfig+0x478>)
 8009884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009888:	080098a1 	.word	0x080098a1
 800988c:	080098a9 	.word	0x080098a9
 8009890:	080098b1 	.word	0x080098b1
 8009894:	080098b9 	.word	0x080098b9
 8009898:	080098c1 	.word	0x080098c1
 800989c:	080098c9 	.word	0x080098c9
 80098a0:	2300      	movs	r3, #0
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a6:	e086      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098a8:	2304      	movs	r3, #4
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ae:	e082      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098b0:	2308      	movs	r3, #8
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e07e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098b8:	2310      	movs	r3, #16
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e07a      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098c0:	2320      	movs	r3, #32
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e076      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098c8:	2340      	movs	r3, #64	@ 0x40
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e072      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098d0:	2380      	movs	r3, #128	@ 0x80
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e06e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a75      	ldr	r2, [pc, #468]	@ (8009ab4 <UART_SetConfig+0x6a4>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d130      	bne.n	8009944 <UART_SetConfig+0x534>
 80098e2:	4b72      	ldr	r3, [pc, #456]	@ (8009aac <UART_SetConfig+0x69c>)
 80098e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	2b05      	cmp	r3, #5
 80098ec:	d826      	bhi.n	800993c <UART_SetConfig+0x52c>
 80098ee:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <UART_SetConfig+0x4e4>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	0800990d 	.word	0x0800990d
 80098f8:	08009915 	.word	0x08009915
 80098fc:	0800991d 	.word	0x0800991d
 8009900:	08009925 	.word	0x08009925
 8009904:	0800992d 	.word	0x0800992d
 8009908:	08009935 	.word	0x08009935
 800990c:	2300      	movs	r3, #0
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009912:	e050      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009914:	2304      	movs	r3, #4
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991a:	e04c      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800991c:	2308      	movs	r3, #8
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009922:	e048      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009924:	2310      	movs	r3, #16
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992a:	e044      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800992c:	2320      	movs	r3, #32
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009932:	e040      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009934:	2340      	movs	r3, #64	@ 0x40
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993a:	e03c      	b.n	80099b6 <UART_SetConfig+0x5a6>
 800993c:	2380      	movs	r3, #128	@ 0x80
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e038      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a5b      	ldr	r2, [pc, #364]	@ (8009ab8 <UART_SetConfig+0x6a8>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d130      	bne.n	80099b0 <UART_SetConfig+0x5a0>
 800994e:	4b57      	ldr	r3, [pc, #348]	@ (8009aac <UART_SetConfig+0x69c>)
 8009950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b05      	cmp	r3, #5
 8009958:	d826      	bhi.n	80099a8 <UART_SetConfig+0x598>
 800995a:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <UART_SetConfig+0x550>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009979 	.word	0x08009979
 8009964:	08009981 	.word	0x08009981
 8009968:	08009989 	.word	0x08009989
 800996c:	08009991 	.word	0x08009991
 8009970:	08009999 	.word	0x08009999
 8009974:	080099a1 	.word	0x080099a1
 8009978:	2302      	movs	r3, #2
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e01a      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009980:	2304      	movs	r3, #4
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e016      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009988:	2308      	movs	r3, #8
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e012      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009990:	2310      	movs	r3, #16
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e00e      	b.n	80099b6 <UART_SetConfig+0x5a6>
 8009998:	2320      	movs	r3, #32
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e00a      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80099a0:	2340      	movs	r3, #64	@ 0x40
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e006      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80099a8:	2380      	movs	r3, #128	@ 0x80
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e002      	b.n	80099b6 <UART_SetConfig+0x5a6>
 80099b0:	2380      	movs	r3, #128	@ 0x80
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a3f      	ldr	r2, [pc, #252]	@ (8009ab8 <UART_SetConfig+0x6a8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	f040 80f8 	bne.w	8009bb2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	dc46      	bgt.n	8009a58 <UART_SetConfig+0x648>
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	f2c0 8082 	blt.w	8009ad4 <UART_SetConfig+0x6c4>
 80099d0:	3b02      	subs	r3, #2
 80099d2:	2b1e      	cmp	r3, #30
 80099d4:	d87e      	bhi.n	8009ad4 <UART_SetConfig+0x6c4>
 80099d6:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <UART_SetConfig+0x5cc>)
 80099d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099dc:	08009a5f 	.word	0x08009a5f
 80099e0:	08009ad5 	.word	0x08009ad5
 80099e4:	08009a67 	.word	0x08009a67
 80099e8:	08009ad5 	.word	0x08009ad5
 80099ec:	08009ad5 	.word	0x08009ad5
 80099f0:	08009ad5 	.word	0x08009ad5
 80099f4:	08009a77 	.word	0x08009a77
 80099f8:	08009ad5 	.word	0x08009ad5
 80099fc:	08009ad5 	.word	0x08009ad5
 8009a00:	08009ad5 	.word	0x08009ad5
 8009a04:	08009ad5 	.word	0x08009ad5
 8009a08:	08009ad5 	.word	0x08009ad5
 8009a0c:	08009ad5 	.word	0x08009ad5
 8009a10:	08009ad5 	.word	0x08009ad5
 8009a14:	08009a87 	.word	0x08009a87
 8009a18:	08009ad5 	.word	0x08009ad5
 8009a1c:	08009ad5 	.word	0x08009ad5
 8009a20:	08009ad5 	.word	0x08009ad5
 8009a24:	08009ad5 	.word	0x08009ad5
 8009a28:	08009ad5 	.word	0x08009ad5
 8009a2c:	08009ad5 	.word	0x08009ad5
 8009a30:	08009ad5 	.word	0x08009ad5
 8009a34:	08009ad5 	.word	0x08009ad5
 8009a38:	08009ad5 	.word	0x08009ad5
 8009a3c:	08009ad5 	.word	0x08009ad5
 8009a40:	08009ad5 	.word	0x08009ad5
 8009a44:	08009ad5 	.word	0x08009ad5
 8009a48:	08009ad5 	.word	0x08009ad5
 8009a4c:	08009ad5 	.word	0x08009ad5
 8009a50:	08009ad5 	.word	0x08009ad5
 8009a54:	08009ac7 	.word	0x08009ac7
 8009a58:	2b40      	cmp	r3, #64	@ 0x40
 8009a5a:	d037      	beq.n	8009acc <UART_SetConfig+0x6bc>
 8009a5c:	e03a      	b.n	8009ad4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a5e:	f7fc fe93 	bl	8006788 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a64:	e03c      	b.n	8009ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fc fea2 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a74:	e034      	b.n	8009ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a76:	f107 0318 	add.w	r3, r7, #24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fc ffee 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a84:	e02c      	b.n	8009ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a86:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <UART_SetConfig+0x69c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d016      	beq.n	8009ac0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a92:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <UART_SetConfig+0x69c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	4a07      	ldr	r2, [pc, #28]	@ (8009abc <UART_SetConfig+0x6ac>)
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa4:	e01c      	b.n	8009ae0 <UART_SetConfig+0x6d0>
 8009aa6:	bf00      	nop
 8009aa8:	40011400 	.word	0x40011400
 8009aac:	58024400 	.word	0x58024400
 8009ab0:	40007800 	.word	0x40007800
 8009ab4:	40007c00 	.word	0x40007c00
 8009ab8:	58000c00 	.word	0x58000c00
 8009abc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009ac0:	4b9d      	ldr	r3, [pc, #628]	@ (8009d38 <UART_SetConfig+0x928>)
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e00c      	b.n	8009ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ac6:	4b9d      	ldr	r3, [pc, #628]	@ (8009d3c <UART_SetConfig+0x92c>)
 8009ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aca:	e009      	b.n	8009ae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009acc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad2:	e005      	b.n	8009ae0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ade:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 81de 	beq.w	8009ea4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aec:	4a94      	ldr	r2, [pc, #592]	@ (8009d40 <UART_SetConfig+0x930>)
 8009aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009af2:	461a      	mov	r2, r3
 8009af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009afa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	4613      	mov	r3, r2
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d305      	bcc.n	8009b18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d903      	bls.n	8009b20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b1e:	e1c1      	b.n	8009ea4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b22:	2200      	movs	r2, #0
 8009b24:	60bb      	str	r3, [r7, #8]
 8009b26:	60fa      	str	r2, [r7, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2c:	4a84      	ldr	r2, [pc, #528]	@ (8009d40 <UART_SetConfig+0x930>)
 8009b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2200      	movs	r2, #0
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b42:	f7f6 fbc9 	bl	80002d8 <__aeabi_uldivmod>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f04f 0200 	mov.w	r2, #0
 8009b52:	f04f 0300 	mov.w	r3, #0
 8009b56:	020b      	lsls	r3, r1, #8
 8009b58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b5c:	0202      	lsls	r2, r0, #8
 8009b5e:	6979      	ldr	r1, [r7, #20]
 8009b60:	6849      	ldr	r1, [r1, #4]
 8009b62:	0849      	lsrs	r1, r1, #1
 8009b64:	2000      	movs	r0, #0
 8009b66:	460c      	mov	r4, r1
 8009b68:	4605      	mov	r5, r0
 8009b6a:	eb12 0804 	adds.w	r8, r2, r4
 8009b6e:	eb43 0905 	adc.w	r9, r3, r5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	469a      	mov	sl, r3
 8009b7a:	4693      	mov	fp, r2
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	465b      	mov	r3, fp
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 fba8 	bl	80002d8 <__aeabi_uldivmod>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b96:	d308      	bcc.n	8009baa <UART_SetConfig+0x79a>
 8009b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9e:	d204      	bcs.n	8009baa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ba6:	60da      	str	r2, [r3, #12]
 8009ba8:	e17c      	b.n	8009ea4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bb0:	e178      	b.n	8009ea4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bba:	f040 80c5 	bne.w	8009d48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009bbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	dc48      	bgt.n	8009c58 <UART_SetConfig+0x848>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	db7b      	blt.n	8009cc2 <UART_SetConfig+0x8b2>
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d879      	bhi.n	8009cc2 <UART_SetConfig+0x8b2>
 8009bce:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd4 <UART_SetConfig+0x7c4>)
 8009bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd4:	08009c5f 	.word	0x08009c5f
 8009bd8:	08009c67 	.word	0x08009c67
 8009bdc:	08009cc3 	.word	0x08009cc3
 8009be0:	08009cc3 	.word	0x08009cc3
 8009be4:	08009c6f 	.word	0x08009c6f
 8009be8:	08009cc3 	.word	0x08009cc3
 8009bec:	08009cc3 	.word	0x08009cc3
 8009bf0:	08009cc3 	.word	0x08009cc3
 8009bf4:	08009c7f 	.word	0x08009c7f
 8009bf8:	08009cc3 	.word	0x08009cc3
 8009bfc:	08009cc3 	.word	0x08009cc3
 8009c00:	08009cc3 	.word	0x08009cc3
 8009c04:	08009cc3 	.word	0x08009cc3
 8009c08:	08009cc3 	.word	0x08009cc3
 8009c0c:	08009cc3 	.word	0x08009cc3
 8009c10:	08009cc3 	.word	0x08009cc3
 8009c14:	08009c8f 	.word	0x08009c8f
 8009c18:	08009cc3 	.word	0x08009cc3
 8009c1c:	08009cc3 	.word	0x08009cc3
 8009c20:	08009cc3 	.word	0x08009cc3
 8009c24:	08009cc3 	.word	0x08009cc3
 8009c28:	08009cc3 	.word	0x08009cc3
 8009c2c:	08009cc3 	.word	0x08009cc3
 8009c30:	08009cc3 	.word	0x08009cc3
 8009c34:	08009cc3 	.word	0x08009cc3
 8009c38:	08009cc3 	.word	0x08009cc3
 8009c3c:	08009cc3 	.word	0x08009cc3
 8009c40:	08009cc3 	.word	0x08009cc3
 8009c44:	08009cc3 	.word	0x08009cc3
 8009c48:	08009cc3 	.word	0x08009cc3
 8009c4c:	08009cc3 	.word	0x08009cc3
 8009c50:	08009cc3 	.word	0x08009cc3
 8009c54:	08009cb5 	.word	0x08009cb5
 8009c58:	2b40      	cmp	r3, #64	@ 0x40
 8009c5a:	d02e      	beq.n	8009cba <UART_SetConfig+0x8aa>
 8009c5c:	e031      	b.n	8009cc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c5e:	f7fa fddd 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8009c62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c64:	e033      	b.n	8009cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c66:	f7fa fdef 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8009c6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c6c:	e02f      	b.n	8009cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fc fd9e 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c7c:	e027      	b.n	8009cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7e:	f107 0318 	add.w	r3, r7, #24
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fc feea 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c8c:	e01f      	b.n	8009cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009d44 <UART_SetConfig+0x934>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0320 	and.w	r3, r3, #32
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8009d44 <UART_SetConfig+0x934>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	08db      	lsrs	r3, r3, #3
 8009ca0:	f003 0303 	and.w	r3, r3, #3
 8009ca4:	4a24      	ldr	r2, [pc, #144]	@ (8009d38 <UART_SetConfig+0x928>)
 8009ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8009caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cac:	e00f      	b.n	8009cce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009cae:	4b22      	ldr	r3, [pc, #136]	@ (8009d38 <UART_SetConfig+0x928>)
 8009cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb2:	e00c      	b.n	8009cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb4:	4b21      	ldr	r3, [pc, #132]	@ (8009d3c <UART_SetConfig+0x92c>)
 8009cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb8:	e009      	b.n	8009cce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc0:	e005      	b.n	8009cce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 80e7 	beq.w	8009ea4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cda:	4a19      	ldr	r2, [pc, #100]	@ (8009d40 <UART_SetConfig+0x930>)
 8009cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce8:	005a      	lsls	r2, r3, #1
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	085b      	lsrs	r3, r3, #1
 8009cf0:	441a      	add	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d916      	bls.n	8009d30 <UART_SetConfig+0x920>
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d08:	d212      	bcs.n	8009d30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	f023 030f 	bic.w	r3, r3, #15
 8009d12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d16:	085b      	lsrs	r3, r3, #1
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	f003 0307 	and.w	r3, r3, #7
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d22:	4313      	orrs	r3, r2
 8009d24:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d2c:	60da      	str	r2, [r3, #12]
 8009d2e:	e0b9      	b.n	8009ea4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d36:	e0b5      	b.n	8009ea4 <UART_SetConfig+0xa94>
 8009d38:	03d09000 	.word	0x03d09000
 8009d3c:	003d0900 	.word	0x003d0900
 8009d40:	0800bbdc 	.word	0x0800bbdc
 8009d44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	dc49      	bgt.n	8009de4 <UART_SetConfig+0x9d4>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db7c      	blt.n	8009e4e <UART_SetConfig+0xa3e>
 8009d54:	2b20      	cmp	r3, #32
 8009d56:	d87a      	bhi.n	8009e4e <UART_SetConfig+0xa3e>
 8009d58:	a201      	add	r2, pc, #4	@ (adr r2, 8009d60 <UART_SetConfig+0x950>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009deb 	.word	0x08009deb
 8009d64:	08009df3 	.word	0x08009df3
 8009d68:	08009e4f 	.word	0x08009e4f
 8009d6c:	08009e4f 	.word	0x08009e4f
 8009d70:	08009dfb 	.word	0x08009dfb
 8009d74:	08009e4f 	.word	0x08009e4f
 8009d78:	08009e4f 	.word	0x08009e4f
 8009d7c:	08009e4f 	.word	0x08009e4f
 8009d80:	08009e0b 	.word	0x08009e0b
 8009d84:	08009e4f 	.word	0x08009e4f
 8009d88:	08009e4f 	.word	0x08009e4f
 8009d8c:	08009e4f 	.word	0x08009e4f
 8009d90:	08009e4f 	.word	0x08009e4f
 8009d94:	08009e4f 	.word	0x08009e4f
 8009d98:	08009e4f 	.word	0x08009e4f
 8009d9c:	08009e4f 	.word	0x08009e4f
 8009da0:	08009e1b 	.word	0x08009e1b
 8009da4:	08009e4f 	.word	0x08009e4f
 8009da8:	08009e4f 	.word	0x08009e4f
 8009dac:	08009e4f 	.word	0x08009e4f
 8009db0:	08009e4f 	.word	0x08009e4f
 8009db4:	08009e4f 	.word	0x08009e4f
 8009db8:	08009e4f 	.word	0x08009e4f
 8009dbc:	08009e4f 	.word	0x08009e4f
 8009dc0:	08009e4f 	.word	0x08009e4f
 8009dc4:	08009e4f 	.word	0x08009e4f
 8009dc8:	08009e4f 	.word	0x08009e4f
 8009dcc:	08009e4f 	.word	0x08009e4f
 8009dd0:	08009e4f 	.word	0x08009e4f
 8009dd4:	08009e4f 	.word	0x08009e4f
 8009dd8:	08009e4f 	.word	0x08009e4f
 8009ddc:	08009e4f 	.word	0x08009e4f
 8009de0:	08009e41 	.word	0x08009e41
 8009de4:	2b40      	cmp	r3, #64	@ 0x40
 8009de6:	d02e      	beq.n	8009e46 <UART_SetConfig+0xa36>
 8009de8:	e031      	b.n	8009e4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dea:	f7fa fd17 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8009dee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009df0:	e033      	b.n	8009e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df2:	f7fa fd29 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 8009df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009df8:	e02f      	b.n	8009e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fc fcd8 	bl	80067b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e08:	e027      	b.n	8009e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0a:	f107 0318 	add.w	r3, r7, #24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fc fe24 	bl	8006a5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e18:	e01f      	b.n	8009e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed0 <UART_SetConfig+0xac0>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d009      	beq.n	8009e3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e26:	4b2a      	ldr	r3, [pc, #168]	@ (8009ed0 <UART_SetConfig+0xac0>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	08db      	lsrs	r3, r3, #3
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	4a28      	ldr	r2, [pc, #160]	@ (8009ed4 <UART_SetConfig+0xac4>)
 8009e32:	fa22 f303 	lsr.w	r3, r2, r3
 8009e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e38:	e00f      	b.n	8009e5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009e3a:	4b26      	ldr	r3, [pc, #152]	@ (8009ed4 <UART_SetConfig+0xac4>)
 8009e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3e:	e00c      	b.n	8009e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e40:	4b25      	ldr	r3, [pc, #148]	@ (8009ed8 <UART_SetConfig+0xac8>)
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e44:	e009      	b.n	8009e5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e005      	b.n	8009e5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e58:	bf00      	nop
    }

    if (pclk != 0U)
 8009e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d021      	beq.n	8009ea4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e64:	4a1d      	ldr	r2, [pc, #116]	@ (8009edc <UART_SetConfig+0xacc>)
 8009e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	441a      	add	r2, r3
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	d909      	bls.n	8009e9e <UART_SetConfig+0xa8e>
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e90:	d205      	bcs.n	8009e9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60da      	str	r2, [r3, #12]
 8009e9c:	e002      	b.n	8009ea4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ec0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3748      	adds	r7, #72	@ 0x48
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ece:	bf00      	nop
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	03d09000 	.word	0x03d09000
 8009ed8:	003d0900 	.word	0x003d0900
 8009edc:	0800bbdc 	.word	0x0800bbdc

08009ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00a      	beq.n	8009f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00a      	beq.n	8009f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f52:	f003 0304 	and.w	r3, r3, #4
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01a      	beq.n	8009ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fde:	d10a      	bne.n	8009ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	430a      	orrs	r2, r1
 800a016:	605a      	str	r2, [r3, #4]
  }
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b098      	sub	sp, #96	@ 0x60
 800a028:	af02      	add	r7, sp, #8
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a034:	f7f7 fe48 	bl	8001cc8 <HAL_GetTick>
 800a038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0308 	and.w	r3, r3, #8
 800a044:	2b08      	cmp	r3, #8
 800a046:	d12f      	bne.n	800a0a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a050:	2200      	movs	r2, #0
 800a052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f88e 	bl	800a178 <UART_WaitOnFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d022      	beq.n	800a0a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	e853 3f00 	ldrex	r3, [r3]
 800a06e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a076:	653b      	str	r3, [r7, #80]	@ 0x50
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	461a      	mov	r2, r3
 800a07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a080:	647b      	str	r3, [r7, #68]	@ 0x44
 800a082:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e6      	bne.n	800a062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0a4:	2303      	movs	r3, #3
 800a0a6:	e063      	b.n	800a170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	d149      	bne.n	800a14a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f857 	bl	800a178 <UART_WaitOnFlagUntilTimeout>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d03c      	beq.n	800a14a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f6:	e841 2300 	strex	r3, r2, [r1]
 800a0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1e6      	bne.n	800a0d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3308      	adds	r3, #8
 800a108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	60fb      	str	r3, [r7, #12]
   return(result);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f023 0301 	bic.w	r3, r3, #1
 800a118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3308      	adds	r3, #8
 800a120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a122:	61fa      	str	r2, [r7, #28]
 800a124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	69b9      	ldr	r1, [r7, #24]
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	617b      	str	r3, [r7, #20]
   return(result);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e5      	bne.n	800a102 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e012      	b.n	800a170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2220      	movs	r2, #32
 800a14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3758      	adds	r7, #88	@ 0x58
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	4613      	mov	r3, r2
 800a186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a188:	e04f      	b.n	800a22a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d04b      	beq.n	800a22a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a192:	f7f7 fd99 	bl	8001cc8 <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	69ba      	ldr	r2, [r7, #24]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d302      	bcc.n	800a1a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e04e      	b.n	800a24a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d037      	beq.n	800a22a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b80      	cmp	r3, #128	@ 0x80
 800a1be:	d034      	beq.n	800a22a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b40      	cmp	r3, #64	@ 0x40
 800a1c4:	d031      	beq.n	800a22a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d110      	bne.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f839 	bl	800a254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e029      	b.n	800a24a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a204:	d111      	bne.n	800a22a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a20e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f81f 	bl	800a254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2220      	movs	r2, #32
 800a21a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e00f      	b.n	800a24a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69da      	ldr	r2, [r3, #28]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4013      	ands	r3, r2
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	429a      	cmp	r2, r3
 800a238:	bf0c      	ite	eq
 800a23a:	2301      	moveq	r3, #1
 800a23c:	2300      	movne	r3, #0
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	461a      	mov	r2, r3
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	429a      	cmp	r2, r3
 800a246:	d0a0      	beq.n	800a18a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b095      	sub	sp, #84	@ 0x54
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a27a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a27c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a282:	e841 2300 	strex	r3, r2, [r1]
 800a286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e6      	bne.n	800a25c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a31c <UART_EndRxTransfer+0xc8>)
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e5      	bne.n	800a28e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d118      	bne.n	800a2fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f023 0310 	bic.w	r3, r3, #16
 800a2de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2e8:	61bb      	str	r3, [r7, #24]
 800a2ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6979      	ldr	r1, [r7, #20]
 800a2ee:	69ba      	ldr	r2, [r7, #24]
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e6      	bne.n	800a2ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a310:	bf00      	nop
 800a312:	3754      	adds	r7, #84	@ 0x54
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	effffffe 	.word	0xeffffffe

0800a320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_UARTEx_DisableFifoMode+0x16>
 800a332:	2302      	movs	r3, #2
 800a334:	e027      	b.n	800a386 <HAL_UARTEx_DisableFifoMode+0x66>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2224      	movs	r2, #36	@ 0x24
 800a342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0201 	bic.w	r2, r2, #1
 800a35c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e02d      	b.n	800a406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2224      	movs	r2, #36	@ 0x24
 800a3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f850 	bl	800a48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a422:	2302      	movs	r3, #2
 800a424:	e02d      	b.n	800a482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2224      	movs	r2, #36	@ 0x24
 800a432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0201 	bic.w	r2, r2, #1
 800a44c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f812 	bl	800a48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2220      	movs	r2, #32
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d108      	bne.n	800a4ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4ac:	e031      	b.n	800a512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4ae:	2310      	movs	r3, #16
 800a4b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	0e5b      	lsrs	r3, r3, #25
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	f003 0307 	and.w	r3, r3, #7
 800a4c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	0f5b      	lsrs	r3, r3, #29
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	f003 0307 	and.w	r3, r3, #7
 800a4d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
 800a4d8:	7b3a      	ldrb	r2, [r7, #12]
 800a4da:	4911      	ldr	r1, [pc, #68]	@ (800a520 <UARTEx_SetNbDataToProcess+0x94>)
 800a4dc:	5c8a      	ldrb	r2, [r1, r2]
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4e2:	7b3a      	ldrb	r2, [r7, #12]
 800a4e4:	490f      	ldr	r1, [pc, #60]	@ (800a524 <UARTEx_SetNbDataToProcess+0x98>)
 800a4e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	7b7a      	ldrb	r2, [r7, #13]
 800a4f8:	4909      	ldr	r1, [pc, #36]	@ (800a520 <UARTEx_SetNbDataToProcess+0x94>)
 800a4fa:	5c8a      	ldrb	r2, [r1, r2]
 800a4fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a500:	7b7a      	ldrb	r2, [r7, #13]
 800a502:	4908      	ldr	r1, [pc, #32]	@ (800a524 <UARTEx_SetNbDataToProcess+0x98>)
 800a504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a506:	fb93 f3f2 	sdiv	r3, r3, r2
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	0800bbf4 	.word	0x0800bbf4
 800a524:	0800bbfc 	.word	0x0800bbfc

0800a528 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a528:	b084      	sub	sp, #16
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	f107 001c 	add.w	r0, r7, #28
 800a536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a53e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a540:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a542:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a546:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a54a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a54e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <SDMMC_Init+0x50>)
 800a55c:	4013      	ands	r3, r2
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	431a      	orrs	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	b004      	add	sp, #16
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	ffc02c00 	.word	0xffc02c00

0800a57c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f043 0203 	orr.w	r2, r3, #3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0303 	and.w	r3, r3, #3
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a5f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a5f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a5fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	4b06      	ldr	r3, [pc, #24]	@ (800a624 <SDMMC_SendCommand+0x50>)
 800a60c:	4013      	ands	r3, r2
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	431a      	orrs	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	fffee0c0 	.word	0xfffee0c0

0800a628 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	b2db      	uxtb	r3, r3
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a642:	b480      	push	{r7}
 800a644:	b085      	sub	sp, #20
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3314      	adds	r3, #20
 800a650:	461a      	mov	r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	4413      	add	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3714      	adds	r7, #20
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a68e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a694:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a69a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0

}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a6ce:	2310      	movs	r3, #16
 800a6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e2:	f107 0308 	add.w	r3, r7, #8
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ff73 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a6ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f2:	2110      	movs	r1, #16
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f995 	bl	800aa24 <SDMMC_GetCmdResp1>
 800a6fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3720      	adds	r7, #32
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b088      	sub	sp, #32
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a714:	2307      	movs	r3, #7
 800a716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71e:	2300      	movs	r3, #0
 800a720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff ff50 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a734:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a738:	2107      	movs	r1, #7
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f972 	bl	800aa24 <SDMMC_GetCmdResp1>
 800a740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a742:	69fb      	ldr	r3, [r7, #28]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3720      	adds	r7, #32
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a758:	2300      	movs	r3, #0
 800a75a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a75c:	2300      	movs	r3, #0
 800a75e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	4619      	mov	r1, r3
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ff2f 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fb96 	bl	800aea8 <SDMMC_GetCmdError>
 800a77c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77e:	69fb      	ldr	r3, [r7, #28]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3720      	adds	r7, #32
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a790:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a796:	2308      	movs	r3, #8
 800a798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a79a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7aa:	f107 0308 	add.w	r3, r7, #8
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ff0f 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fb28 	bl	800ae0c <SDMMC_GetCmdResp7>
 800a7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7be:	69fb      	ldr	r3, [r7, #28]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a7d6:	2337      	movs	r3, #55	@ 0x37
 800a7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7ea:	f107 0308 	add.w	r3, r7, #8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff feef 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a7f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7fa:	2137      	movs	r1, #55	@ 0x37
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f911 	bl	800aa24 <SDMMC_GetCmdResp1>
 800a802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a804:	69fb      	ldr	r3, [r7, #28]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b088      	sub	sp, #32
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a81c:	2329      	movs	r3, #41	@ 0x29
 800a81e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a826:	2300      	movs	r3, #0
 800a828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a82a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a82e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a830:	f107 0308 	add.w	r3, r7, #8
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f7ff fecc 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fa2d 	bl	800ac9c <SDMMC_GetCmdResp3>
 800a842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a844:	69fb      	ldr	r3, [r7, #28]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3720      	adds	r7, #32
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b088      	sub	sp, #32
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a85c:	2306      	movs	r3, #6
 800a85e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a866:	2300      	movs	r3, #0
 800a868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a86a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a86e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff feac 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a87c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a880:	2106      	movs	r1, #6
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8ce 	bl	800aa24 <SDMMC_GetCmdResp1>
 800a888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a88a:	69fb      	ldr	r3, [r7, #28]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3720      	adds	r7, #32
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a8a0:	2333      	movs	r3, #51	@ 0x33
 800a8a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8b4:	f107 0308 	add.w	r3, r7, #8
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fe8a 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a8c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8c4:	2133      	movs	r1, #51	@ 0x33
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f8ac 	bl	800aa24 <SDMMC_GetCmdResp1>
 800a8cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3720      	adds	r7, #32
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a8e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8f8:	f107 0308 	add.w	r3, r7, #8
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff fe68 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f97f 	bl	800ac08 <SDMMC_GetCmdResp2>
 800a90a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a90c:	69fb      	ldr	r3, [r7, #28]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b088      	sub	sp, #32
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a924:	2309      	movs	r3, #9
 800a926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a928:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a92c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a92e:	2300      	movs	r3, #0
 800a930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a938:	f107 0308 	add.w	r3, r7, #8
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fe48 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f95f 	bl	800ac08 <SDMMC_GetCmdResp2>
 800a94a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a94c:	69fb      	ldr	r3, [r7, #28]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3720      	adds	r7, #32
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b088      	sub	sp, #32
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a960:	2300      	movs	r3, #0
 800a962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a964:	2303      	movs	r3, #3
 800a966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a96c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a96e:	2300      	movs	r3, #0
 800a970:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a976:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a978:	f107 0308 	add.w	r3, r7, #8
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff fe28 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	2103      	movs	r1, #3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f9c7 	bl	800ad1c <SDMMC_GetCmdResp6>
 800a98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a990:	69fb      	ldr	r3, [r7, #28]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b088      	sub	sp, #32
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9a8:	230d      	movs	r3, #13
 800a9aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9bc:	f107 0308 	add.w	r3, r7, #8
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7ff fe06 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a9c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9cc:	210d      	movs	r1, #13
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f828 	bl	800aa24 <SDMMC_GetCmdResp1>
 800a9d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d6:	69fb      	ldr	r3, [r7, #28]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3720      	adds	r7, #32
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a9ec:	230d      	movs	r3, #13
 800a9ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa00:	f107 0308 	add.w	r3, r7, #8
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7ff fde4 	bl	800a5d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800aa0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa10:	210d      	movs	r1, #13
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f806 	bl	800aa24 <SDMMC_GetCmdResp1>
 800aa18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3720      	adds	r7, #32
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800aa32:	4b70      	ldr	r3, [pc, #448]	@ (800abf4 <SDMMC_GetCmdResp1+0x1d0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a70      	ldr	r2, [pc, #448]	@ (800abf8 <SDMMC_GetCmdResp1+0x1d4>)
 800aa38:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3c:	0a5a      	lsrs	r2, r3, #9
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	fb02 f303 	mul.w	r3, r2, r3
 800aa44:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	61fa      	str	r2, [r7, #28]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d102      	bne.n	800aa56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa54:	e0c9      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa5a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	4b67      	ldr	r3, [pc, #412]	@ (800abfc <SDMMC_GetCmdResp1+0x1d8>)
 800aa60:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0ef      	beq.n	800aa46 <SDMMC_GetCmdResp1+0x22>
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1ea      	bne.n	800aa46 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2204      	movs	r2, #4
 800aa80:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa82:	2304      	movs	r3, #4
 800aa84:	e0b1      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2201      	movs	r2, #1
 800aa96:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e0a6      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4a58      	ldr	r2, [pc, #352]	@ (800ac00 <SDMMC_GetCmdResp1+0x1dc>)
 800aaa0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff fdc0 	bl	800a628 <SDMMC_GetCommandResponse>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	461a      	mov	r2, r3
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d001      	beq.n	800aab6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e099      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aab6:	2100      	movs	r1, #0
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f7ff fdc2 	bl	800a642 <SDMMC_GetResponse>
 800aabe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4b50      	ldr	r3, [pc, #320]	@ (800ac04 <SDMMC_GetCmdResp1+0x1e0>)
 800aac4:	4013      	ands	r3, r2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e08d      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da02      	bge.n	800aada <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aad4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aad8:	e087      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aae4:	2340      	movs	r3, #64	@ 0x40
 800aae6:	e080      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aaf2:	2380      	movs	r3, #128	@ 0x80
 800aaf4:	e079      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ab00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab04:	e071      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ab10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab14:	e069      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ab20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab24:	e061      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ab30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab34:	e059      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab44:	e051      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab54:	e049      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab64:	e041      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab74:	e039      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ab84:	e031      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ab94:	e029      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aba0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aba4:	e021      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800abb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800abb4:	e019      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800abc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800abc4:	e011      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800abd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800abd4:	e009      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800abe0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800abe4:	e001      	b.n	800abea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800abea:	4618      	mov	r0, r3
 800abec:	3720      	adds	r7, #32
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	24000000 	.word	0x24000000
 800abf8:	10624dd3 	.word	0x10624dd3
 800abfc:	00200045 	.word	0x00200045
 800ac00:	002000c5 	.word	0x002000c5
 800ac04:	fdffe008 	.word	0xfdffe008

0800ac08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac10:	4b1f      	ldr	r3, [pc, #124]	@ (800ac90 <SDMMC_GetCmdResp2+0x88>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a1f      	ldr	r2, [pc, #124]	@ (800ac94 <SDMMC_GetCmdResp2+0x8c>)
 800ac16:	fba2 2303 	umull	r2, r3, r2, r3
 800ac1a:	0a5b      	lsrs	r3, r3, #9
 800ac1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac20:	fb02 f303 	mul.w	r3, r2, r3
 800ac24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	1e5a      	subs	r2, r3, #1
 800ac2a:	60fa      	str	r2, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac34:	e026      	b.n	800ac84 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d0ef      	beq.n	800ac26 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1ea      	bne.n	800ac26 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d004      	beq.n	800ac66 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2204      	movs	r2, #4
 800ac60:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac62:	2304      	movs	r3, #4
 800ac64:	e00e      	b.n	800ac84 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d004      	beq.n	800ac7c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e003      	b.n	800ac84 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a06      	ldr	r2, [pc, #24]	@ (800ac98 <SDMMC_GetCmdResp2+0x90>)
 800ac80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	24000000 	.word	0x24000000
 800ac94:	10624dd3 	.word	0x10624dd3
 800ac98:	002000c5 	.word	0x002000c5

0800ac9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aca4:	4b1a      	ldr	r3, [pc, #104]	@ (800ad10 <SDMMC_GetCmdResp3+0x74>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a1a      	ldr	r2, [pc, #104]	@ (800ad14 <SDMMC_GetCmdResp3+0x78>)
 800acaa:	fba2 2303 	umull	r2, r3, r2, r3
 800acae:	0a5b      	lsrs	r3, r3, #9
 800acb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb4:	fb02 f303 	mul.w	r3, r2, r3
 800acb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	1e5a      	subs	r2, r3, #1
 800acbe:	60fa      	str	r2, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acc8:	e01b      	b.n	800ad02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0ef      	beq.n	800acba <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1ea      	bne.n	800acba <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace8:	f003 0304 	and.w	r3, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	d004      	beq.n	800acfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2204      	movs	r2, #4
 800acf4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acf6:	2304      	movs	r3, #4
 800acf8:	e003      	b.n	800ad02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a06      	ldr	r2, [pc, #24]	@ (800ad18 <SDMMC_GetCmdResp3+0x7c>)
 800acfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	24000000 	.word	0x24000000
 800ad14:	10624dd3 	.word	0x10624dd3
 800ad18:	002000c5 	.word	0x002000c5

0800ad1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b088      	sub	sp, #32
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	460b      	mov	r3, r1
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ad2a:	4b35      	ldr	r3, [pc, #212]	@ (800ae00 <SDMMC_GetCmdResp6+0xe4>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a35      	ldr	r2, [pc, #212]	@ (800ae04 <SDMMC_GetCmdResp6+0xe8>)
 800ad30:	fba2 2303 	umull	r2, r3, r2, r3
 800ad34:	0a5b      	lsrs	r3, r3, #9
 800ad36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	1e5a      	subs	r2, r3, #1
 800ad44:	61fa      	str	r2, [r7, #28]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d102      	bne.n	800ad50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad4e:	e052      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad54:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0ef      	beq.n	800ad40 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1ea      	bne.n	800ad40 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d004      	beq.n	800ad80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2204      	movs	r2, #4
 800ad7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	e03a      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d004      	beq.n	800ad96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e02f      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f7ff fc46 	bl	800a628 <SDMMC_GetCommandResponse>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	461a      	mov	r2, r3
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d001      	beq.n	800adaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e025      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <SDMMC_GetCmdResp6+0xec>)
 800adae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800adb0:	2100      	movs	r1, #0
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7ff fc45 	bl	800a642 <SDMMC_GetResponse>
 800adb8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	0c1b      	lsrs	r3, r3, #16
 800adc8:	b29a      	uxth	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800adce:	2300      	movs	r3, #0
 800add0:	e011      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800addc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ade0:	e009      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800adec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adf0:	e001      	b.n	800adf6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3720      	adds	r7, #32
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	24000000 	.word	0x24000000
 800ae04:	10624dd3 	.word	0x10624dd3
 800ae08:	002000c5 	.word	0x002000c5

0800ae0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae14:	4b22      	ldr	r3, [pc, #136]	@ (800aea0 <SDMMC_GetCmdResp7+0x94>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a22      	ldr	r2, [pc, #136]	@ (800aea4 <SDMMC_GetCmdResp7+0x98>)
 800ae1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1e:	0a5b      	lsrs	r3, r3, #9
 800ae20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae24:	fb02 f303 	mul.w	r3, r2, r3
 800ae28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	60fa      	str	r2, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae38:	e02c      	b.n	800ae94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0ef      	beq.n	800ae2a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1ea      	bne.n	800ae2a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2204      	movs	r2, #4
 800ae64:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae66:	2304      	movs	r3, #4
 800ae68:	e014      	b.n	800ae94 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e009      	b.n	800ae94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2240      	movs	r2, #64	@ 0x40
 800ae90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae92:	2300      	movs	r3, #0

}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	24000000 	.word	0x24000000
 800aea4:	10624dd3 	.word	0x10624dd3

0800aea8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aeb0:	4b11      	ldr	r3, [pc, #68]	@ (800aef8 <SDMMC_GetCmdError+0x50>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a11      	ldr	r2, [pc, #68]	@ (800aefc <SDMMC_GetCmdError+0x54>)
 800aeb6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeba:	0a5b      	lsrs	r3, r3, #9
 800aebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aec0:	fb02 f303 	mul.w	r3, r2, r3
 800aec4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	1e5a      	subs	r2, r3, #1
 800aeca:	60fa      	str	r2, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aed0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aed4:	e009      	b.n	800aeea <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0f1      	beq.n	800aec6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a06      	ldr	r2, [pc, #24]	@ (800af00 <SDMMC_GetCmdError+0x58>)
 800aee6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	24000000 	.word	0x24000000
 800aefc:	10624dd3 	.word	0x10624dd3
 800af00:	002000c5 	.word	0x002000c5

0800af04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af04:	b084      	sub	sp, #16
 800af06:	b580      	push	{r7, lr}
 800af08:	b084      	sub	sp, #16
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	f107 001c 	add.w	r0, r7, #28
 800af12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d121      	bne.n	800af62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	4b2c      	ldr	r3, [pc, #176]	@ (800afe0 <USB_CoreInit+0xdc>)
 800af30:	4013      	ands	r3, r2
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af46:	2b01      	cmp	r3, #1
 800af48:	d105      	bne.n	800af56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fdc6 	bl	800bae8 <USB_CoreReset>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]
 800af60:	e01b      	b.n	800af9a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fdba 	bl	800bae8 <USB_CoreReset>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800af78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d106      	bne.n	800af8e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	639a      	str	r2, [r3, #56]	@ 0x38
 800af8c:	e005      	b.n	800af9a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800af9a:	7fbb      	ldrb	r3, [r7, #30]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d116      	bne.n	800afce <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <USB_CoreInit+0xe0>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f043 0206 	orr.w	r2, r3, #6
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f043 0220 	orr.w	r2, r3, #32
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afda:	b004      	add	sp, #16
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	ffbdffbf 	.word	0xffbdffbf
 800afe4:	03ee0000 	.word	0x03ee0000

0800afe8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800afe8:	b480      	push	{r7}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	4613      	mov	r3, r2
 800aff4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d165      	bne.n	800b0c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	4a41      	ldr	r2, [pc, #260]	@ (800b104 <USB_SetTurnaroundTime+0x11c>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d906      	bls.n	800b012 <USB_SetTurnaroundTime+0x2a>
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	4a40      	ldr	r2, [pc, #256]	@ (800b108 <USB_SetTurnaroundTime+0x120>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d202      	bcs.n	800b012 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b00c:	230f      	movs	r3, #15
 800b00e:	617b      	str	r3, [r7, #20]
 800b010:	e062      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	4a3c      	ldr	r2, [pc, #240]	@ (800b108 <USB_SetTurnaroundTime+0x120>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d306      	bcc.n	800b028 <USB_SetTurnaroundTime+0x40>
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	4a3b      	ldr	r2, [pc, #236]	@ (800b10c <USB_SetTurnaroundTime+0x124>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d202      	bcs.n	800b028 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b022:	230e      	movs	r3, #14
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	e057      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	4a38      	ldr	r2, [pc, #224]	@ (800b10c <USB_SetTurnaroundTime+0x124>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d306      	bcc.n	800b03e <USB_SetTurnaroundTime+0x56>
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4a37      	ldr	r2, [pc, #220]	@ (800b110 <USB_SetTurnaroundTime+0x128>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d202      	bcs.n	800b03e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b038:	230d      	movs	r3, #13
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e04c      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	4a33      	ldr	r2, [pc, #204]	@ (800b110 <USB_SetTurnaroundTime+0x128>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d306      	bcc.n	800b054 <USB_SetTurnaroundTime+0x6c>
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	4a32      	ldr	r2, [pc, #200]	@ (800b114 <USB_SetTurnaroundTime+0x12c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d802      	bhi.n	800b054 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b04e:	230c      	movs	r3, #12
 800b050:	617b      	str	r3, [r7, #20]
 800b052:	e041      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	4a2f      	ldr	r2, [pc, #188]	@ (800b114 <USB_SetTurnaroundTime+0x12c>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d906      	bls.n	800b06a <USB_SetTurnaroundTime+0x82>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4a2e      	ldr	r2, [pc, #184]	@ (800b118 <USB_SetTurnaroundTime+0x130>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d802      	bhi.n	800b06a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b064:	230b      	movs	r3, #11
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e036      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	4a2a      	ldr	r2, [pc, #168]	@ (800b118 <USB_SetTurnaroundTime+0x130>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d906      	bls.n	800b080 <USB_SetTurnaroundTime+0x98>
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	4a29      	ldr	r2, [pc, #164]	@ (800b11c <USB_SetTurnaroundTime+0x134>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d802      	bhi.n	800b080 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b07a:	230a      	movs	r3, #10
 800b07c:	617b      	str	r3, [r7, #20]
 800b07e:	e02b      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4a26      	ldr	r2, [pc, #152]	@ (800b11c <USB_SetTurnaroundTime+0x134>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d906      	bls.n	800b096 <USB_SetTurnaroundTime+0xae>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	4a25      	ldr	r2, [pc, #148]	@ (800b120 <USB_SetTurnaroundTime+0x138>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d202      	bcs.n	800b096 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b090:	2309      	movs	r3, #9
 800b092:	617b      	str	r3, [r7, #20]
 800b094:	e020      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	4a21      	ldr	r2, [pc, #132]	@ (800b120 <USB_SetTurnaroundTime+0x138>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d306      	bcc.n	800b0ac <USB_SetTurnaroundTime+0xc4>
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	4a20      	ldr	r2, [pc, #128]	@ (800b124 <USB_SetTurnaroundTime+0x13c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d802      	bhi.n	800b0ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b0a6:	2308      	movs	r3, #8
 800b0a8:	617b      	str	r3, [r7, #20]
 800b0aa:	e015      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	4a1d      	ldr	r2, [pc, #116]	@ (800b124 <USB_SetTurnaroundTime+0x13c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d906      	bls.n	800b0c2 <USB_SetTurnaroundTime+0xda>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	4a1c      	ldr	r2, [pc, #112]	@ (800b128 <USB_SetTurnaroundTime+0x140>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d202      	bcs.n	800b0c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b0bc:	2307      	movs	r3, #7
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	e00a      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b0c2:	2306      	movs	r3, #6
 800b0c4:	617b      	str	r3, [r7, #20]
 800b0c6:	e007      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d102      	bne.n	800b0d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b0ce:	2309      	movs	r3, #9
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	e001      	b.n	800b0d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b0d4:	2309      	movs	r3, #9
 800b0d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	029b      	lsls	r3, r3, #10
 800b0ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b0f0:	431a      	orrs	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	371c      	adds	r7, #28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	00d8acbf 	.word	0x00d8acbf
 800b108:	00e4e1c0 	.word	0x00e4e1c0
 800b10c:	00f42400 	.word	0x00f42400
 800b110:	01067380 	.word	0x01067380
 800b114:	011a499f 	.word	0x011a499f
 800b118:	01312cff 	.word	0x01312cff
 800b11c:	014ca43f 	.word	0x014ca43f
 800b120:	016e3600 	.word	0x016e3600
 800b124:	01a6ab1f 	.word	0x01a6ab1f
 800b128:	01e84800 	.word	0x01e84800

0800b12c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f023 0201 	bic.w	r2, r3, #1
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b16a:	78fb      	ldrb	r3, [r7, #3]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d115      	bne.n	800b19c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b17c:	200a      	movs	r0, #10
 800b17e:	f7f6 fdaf 	bl	8001ce0 <HAL_Delay>
      ms += 10U;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	330a      	adds	r3, #10
 800b186:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fc1d 	bl	800b9c8 <USB_GetMode>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b01      	cmp	r3, #1
 800b192:	d01e      	beq.n	800b1d2 <USB_SetCurrentMode+0x84>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2bc7      	cmp	r3, #199	@ 0xc7
 800b198:	d9f0      	bls.n	800b17c <USB_SetCurrentMode+0x2e>
 800b19a:	e01a      	b.n	800b1d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d115      	bne.n	800b1ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1ae:	200a      	movs	r0, #10
 800b1b0:	f7f6 fd96 	bl	8001ce0 <HAL_Delay>
      ms += 10U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	330a      	adds	r3, #10
 800b1b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fc04 	bl	800b9c8 <USB_GetMode>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d005      	beq.n	800b1d2 <USB_SetCurrentMode+0x84>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1ca:	d9f0      	bls.n	800b1ae <USB_SetCurrentMode+0x60>
 800b1cc:	e001      	b.n	800b1d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e005      	b.n	800b1de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2bc8      	cmp	r3, #200	@ 0xc8
 800b1d6:	d101      	bne.n	800b1dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e000      	b.n	800b1de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b1f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
 800b206:	e009      	b.n	800b21c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	3340      	adds	r3, #64	@ 0x40
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	2200      	movs	r2, #0
 800b214:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	3301      	adds	r3, #1
 800b21a:	613b      	str	r3, [r7, #16]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b0e      	cmp	r3, #14
 800b220:	d9f2      	bls.n	800b208 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b222:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b226:	2b00      	cmp	r3, #0
 800b228:	d11c      	bne.n	800b264 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b238:	f043 0302 	orr.w	r3, r3, #2
 800b23c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b242:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e005      	b.n	800b270 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b268:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b276:	461a      	mov	r2, r3
 800b278:	2300      	movs	r3, #0
 800b27a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b27c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b280:	2b01      	cmp	r3, #1
 800b282:	d10d      	bne.n	800b2a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d104      	bne.n	800b296 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b28c:	2100      	movs	r1, #0
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f968 	bl	800b564 <USB_SetDevSpeed>
 800b294:	e008      	b.n	800b2a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b296:	2101      	movs	r1, #1
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f963 	bl	800b564 <USB_SetDevSpeed>
 800b29e:	e003      	b.n	800b2a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2a0:	2103      	movs	r1, #3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f95e 	bl	800b564 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2a8:	2110      	movs	r1, #16
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f8fa 	bl	800b4a4 <USB_FlushTxFifo>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f924 	bl	800b508 <USB_FlushRxFifo>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2dc:	461a      	mov	r2, r3
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	e043      	b.n	800b37c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b306:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b30a:	d118      	bne.n	800b33e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b31e:	461a      	mov	r2, r3
 800b320:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	e013      	b.n	800b350 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b334:	461a      	mov	r2, r3
 800b336:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	e008      	b.n	800b350 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b34a:	461a      	mov	r2, r3
 800b34c:	2300      	movs	r3, #0
 800b34e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b35c:	461a      	mov	r2, r3
 800b35e:	2300      	movs	r3, #0
 800b360:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b36e:	461a      	mov	r2, r3
 800b370:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b380:	461a      	mov	r2, r3
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	4293      	cmp	r3, r2
 800b386:	d3b5      	bcc.n	800b2f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b388:	2300      	movs	r3, #0
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	e043      	b.n	800b416 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3a4:	d118      	bne.n	800b3d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10a      	bne.n	800b3c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	e013      	b.n	800b3ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	e008      	b.n	800b3ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b408:	461a      	mov	r2, r3
 800b40a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b40e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	3301      	adds	r3, #1
 800b414:	613b      	str	r3, [r7, #16]
 800b416:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b41a:	461a      	mov	r2, r3
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	4293      	cmp	r3, r2
 800b420:	d3b5      	bcc.n	800b38e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b434:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b442:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b444:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d105      	bne.n	800b458 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	f043 0210 	orr.w	r2, r3, #16
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	699a      	ldr	r2, [r3, #24]
 800b45c:	4b0f      	ldr	r3, [pc, #60]	@ (800b49c <USB_DevInit+0x2b4>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b464:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d005      	beq.n	800b478 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	f043 0208 	orr.w	r2, r3, #8
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b478:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d105      	bne.n	800b48c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	699a      	ldr	r2, [r3, #24]
 800b484:	4b06      	ldr	r3, [pc, #24]	@ (800b4a0 <USB_DevInit+0x2b8>)
 800b486:	4313      	orrs	r3, r2
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b498:	b004      	add	sp, #16
 800b49a:	4770      	bx	lr
 800b49c:	803c3800 	.word	0x803c3800
 800b4a0:	40000004 	.word	0x40000004

0800b4a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4be:	d901      	bls.n	800b4c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e01b      	b.n	800b4fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	daf2      	bge.n	800b4b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	019b      	lsls	r3, r3, #6
 800b4d4:	f043 0220 	orr.w	r2, r3, #32
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4e8:	d901      	bls.n	800b4ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e006      	b.n	800b4fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d0f0      	beq.n	800b4dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b510:	2300      	movs	r3, #0
 800b512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3301      	adds	r3, #1
 800b518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b520:	d901      	bls.n	800b526 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e018      	b.n	800b558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	daf2      	bge.n	800b514 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2210      	movs	r2, #16
 800b536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3301      	adds	r3, #1
 800b53c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b544:	d901      	bls.n	800b54a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e006      	b.n	800b558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	f003 0310 	and.w	r3, r3, #16
 800b552:	2b10      	cmp	r3, #16
 800b554:	d0f0      	beq.n	800b538 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	68f9      	ldr	r1, [r7, #12]
 800b580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b584:	4313      	orrs	r3, r2
 800b586:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b596:	b480      	push	{r7}
 800b598:	b087      	sub	sp, #28
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 0306 	and.w	r3, r3, #6
 800b5ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d102      	bne.n	800b5bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	75fb      	strb	r3, [r7, #23]
 800b5ba:	e00a      	b.n	800b5d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d002      	beq.n	800b5c8 <USB_GetDevSpeed+0x32>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b06      	cmp	r3, #6
 800b5c6:	d102      	bne.n	800b5ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	75fb      	strb	r3, [r7, #23]
 800b5cc:	e001      	b.n	800b5d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b5ce:	230f      	movs	r3, #15
 800b5d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	371c      	adds	r7, #28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	785b      	ldrb	r3, [r3, #1]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d14a      	bne.n	800b694 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b616:	f040 8086 	bne.w	800b726 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	7812      	ldrb	r2, [r2, #0]
 800b62e:	0151      	lsls	r1, r2, #5
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	440a      	add	r2, r1
 800b634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b638:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b63c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	7812      	ldrb	r2, [r2, #0]
 800b652:	0151      	lsls	r1, r2, #5
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	440a      	add	r2, r1
 800b658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b65c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b660:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3301      	adds	r3, #1
 800b666:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b66e:	4293      	cmp	r3, r2
 800b670:	d902      	bls.n	800b678 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	75fb      	strb	r3, [r7, #23]
          break;
 800b676:	e056      	b.n	800b726 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b68c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b690:	d0e7      	beq.n	800b662 <USB_EPStopXfer+0x82>
 800b692:	e048      	b.n	800b726 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b6a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6ac:	d13b      	bne.n	800b726 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	7812      	ldrb	r2, [r2, #0]
 800b6c2:	0151      	lsls	r1, r2, #5
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	440a      	add	r2, r1
 800b6c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b6d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	015a      	lsls	r2, r3, #5
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	7812      	ldrb	r2, [r2, #0]
 800b6e6:	0151      	lsls	r1, r2, #5
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	440a      	add	r2, r1
 800b6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b6f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b702:	4293      	cmp	r3, r2
 800b704:	d902      	bls.n	800b70c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	75fb      	strb	r3, [r7, #23]
          break;
 800b70a:	e00c      	b.n	800b726 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	4413      	add	r3, r2
 800b716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b724:	d0e7      	beq.n	800b6f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b726:	7dfb      	ldrb	r3, [r7, #23]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b734:	b480      	push	{r7}
 800b736:	b089      	sub	sp, #36	@ 0x24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	4611      	mov	r1, r2
 800b740:	461a      	mov	r2, r3
 800b742:	460b      	mov	r3, r1
 800b744:	71fb      	strb	r3, [r7, #7]
 800b746:	4613      	mov	r3, r2
 800b748:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b752:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b756:	2b00      	cmp	r3, #0
 800b758:	d123      	bne.n	800b7a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b75a:	88bb      	ldrh	r3, [r7, #4]
 800b75c:	3303      	adds	r3, #3
 800b75e:	089b      	lsrs	r3, r3, #2
 800b760:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b762:	2300      	movs	r3, #0
 800b764:	61bb      	str	r3, [r7, #24]
 800b766:	e018      	b.n	800b79a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	031a      	lsls	r2, r3, #12
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b774:	461a      	mov	r2, r3
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	3301      	adds	r3, #1
 800b780:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	3301      	adds	r3, #1
 800b786:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	3301      	adds	r3, #1
 800b78c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	3301      	adds	r3, #1
 800b792:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	3301      	adds	r3, #1
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d3e2      	bcc.n	800b768 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3724      	adds	r7, #36	@ 0x24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b08b      	sub	sp, #44	@ 0x2c
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b7c6:	88fb      	ldrh	r3, [r7, #6]
 800b7c8:	089b      	lsrs	r3, r3, #2
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	623b      	str	r3, [r7, #32]
 800b7da:	e014      	b.n	800b806 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	3301      	adds	r3, #1
 800b804:	623b      	str	r3, [r7, #32]
 800b806:	6a3a      	ldr	r2, [r7, #32]
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3e6      	bcc.n	800b7dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b80e:	8bfb      	ldrh	r3, [r7, #30]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01e      	beq.n	800b852 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b81e:	461a      	mov	r2, r3
 800b820:	f107 0310 	add.w	r3, r7, #16
 800b824:	6812      	ldr	r2, [r2, #0]
 800b826:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	fa22 f303 	lsr.w	r3, r2, r3
 800b834:	b2da      	uxtb	r2, r3
 800b836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b838:	701a      	strb	r2, [r3, #0]
      i++;
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	3301      	adds	r3, #1
 800b83e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b842:	3301      	adds	r3, #1
 800b844:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b846:	8bfb      	ldrh	r3, [r7, #30]
 800b848:	3b01      	subs	r3, #1
 800b84a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b84c:	8bfb      	ldrh	r3, [r7, #30]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1ea      	bne.n	800b828 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b854:	4618      	mov	r0, r3
 800b856:	372c      	adds	r7, #44	@ 0x2c
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b87a:	f023 0303 	bic.w	r3, r3, #3
 800b87e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b88e:	f043 0302 	orr.w	r3, r3, #2
 800b892:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	68ba      	ldr	r2, [r7, #8]
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	0c1b      	lsrs	r3, r3, #16
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b918:	69db      	ldr	r3, [r3, #28]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	4013      	ands	r3, r2
 800b91e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	b29b      	uxth	r3, r3
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	4013      	ands	r3, r2
 800b95c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b95e:	68bb      	ldr	r3, [r7, #8]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b98c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b98e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b990:	78fb      	ldrb	r3, [r7, #3]
 800b992:	f003 030f 	and.w	r3, r3, #15
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	fa22 f303 	lsr.w	r3, r2, r3
 800b99c:	01db      	lsls	r3, r3, #7
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9a6:	78fb      	ldrb	r3, [r7, #3]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	371c      	adds	r7, #28
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4b09      	ldr	r3, [pc, #36]	@ (800ba28 <USB_ActivateSetup+0x44>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	fffff800 	.word	0xfffff800

0800ba2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	460b      	mov	r3, r1
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	333c      	adds	r3, #60	@ 0x3c
 800ba42:	3304      	adds	r3, #4
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	4a26      	ldr	r2, [pc, #152]	@ (800bae4 <USB_EP0_OutStart+0xb8>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d90a      	bls.n	800ba66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba60:	d101      	bne.n	800ba66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e037      	b.n	800bad6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba94:	f043 0318 	orr.w	r3, r3, #24
 800ba98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800baa8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800baac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d10f      	bne.n	800bad4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bace:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	4f54300a 	.word	0x4f54300a

0800bae8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3301      	adds	r3, #1
 800baf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb00:	d901      	bls.n	800bb06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e01b      	b.n	800bb3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	daf2      	bge.n	800baf4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	f043 0201 	orr.w	r2, r3, #1
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3301      	adds	r3, #1
 800bb22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb2a:	d901      	bls.n	800bb30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e006      	b.n	800bb3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d0f0      	beq.n	800bb1e <USB_CoreReset+0x36>

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <memset>:
 800bb4a:	4402      	add	r2, r0
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d100      	bne.n	800bb54 <memset+0xa>
 800bb52:	4770      	bx	lr
 800bb54:	f803 1b01 	strb.w	r1, [r3], #1
 800bb58:	e7f9      	b.n	800bb4e <memset+0x4>
	...

0800bb5c <__libc_init_array>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	4d0d      	ldr	r5, [pc, #52]	@ (800bb94 <__libc_init_array+0x38>)
 800bb60:	4c0d      	ldr	r4, [pc, #52]	@ (800bb98 <__libc_init_array+0x3c>)
 800bb62:	1b64      	subs	r4, r4, r5
 800bb64:	10a4      	asrs	r4, r4, #2
 800bb66:	2600      	movs	r6, #0
 800bb68:	42a6      	cmp	r6, r4
 800bb6a:	d109      	bne.n	800bb80 <__libc_init_array+0x24>
 800bb6c:	4d0b      	ldr	r5, [pc, #44]	@ (800bb9c <__libc_init_array+0x40>)
 800bb6e:	4c0c      	ldr	r4, [pc, #48]	@ (800bba0 <__libc_init_array+0x44>)
 800bb70:	f000 f818 	bl	800bba4 <_init>
 800bb74:	1b64      	subs	r4, r4, r5
 800bb76:	10a4      	asrs	r4, r4, #2
 800bb78:	2600      	movs	r6, #0
 800bb7a:	42a6      	cmp	r6, r4
 800bb7c:	d105      	bne.n	800bb8a <__libc_init_array+0x2e>
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}
 800bb80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb84:	4798      	blx	r3
 800bb86:	3601      	adds	r6, #1
 800bb88:	e7ee      	b.n	800bb68 <__libc_init_array+0xc>
 800bb8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb8e:	4798      	blx	r3
 800bb90:	3601      	adds	r6, #1
 800bb92:	e7f2      	b.n	800bb7a <__libc_init_array+0x1e>
 800bb94:	0800bc0c 	.word	0x0800bc0c
 800bb98:	0800bc0c 	.word	0x0800bc0c
 800bb9c:	0800bc0c 	.word	0x0800bc0c
 800bba0:	0800bc10 	.word	0x0800bc10

0800bba4 <_init>:
 800bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba6:	bf00      	nop
 800bba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbaa:	bc08      	pop	{r3}
 800bbac:	469e      	mov	lr, r3
 800bbae:	4770      	bx	lr

0800bbb0 <_fini>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	bf00      	nop
 800bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb6:	bc08      	pop	{r3}
 800bbb8:	469e      	mov	lr, r3
 800bbba:	4770      	bx	lr
