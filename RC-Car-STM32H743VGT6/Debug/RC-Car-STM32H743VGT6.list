
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001212c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080123cc  080123cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080125e8  080125e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080125f0  080125f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080125f4  080125f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  080125f8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f4c  24000154  0801274c  00014154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240020a0  0801274c  000150a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014154  2**0
                  CONTENTS, READONLY
 10 .debug_info   000260ad  00000000  00000000  00014182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004aae  00000000  00000000  0003a22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c48  00000000  00000000  0003ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015fe  00000000  00000000  00040928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b76d  00000000  00000000  00041f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028c24  00000000  00000000  0007d693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a87a  00000000  00000000  000a62b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00210b31  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007db8  00000000  00000000  00210b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0021892c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080123b4 	.word	0x080123b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	080123b4 	.word	0x080123b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 80006c2:	b09e      	sub	sp, #120	@ 0x78
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c6:	f000 fc97 	bl	8000ff8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f001 f8dd 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f95d 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fb0b 	bl	8000cec <MX_GPIO_Init>
  MX_DMA_Init();
 80006d6:	f000 fae1 	bl	8000c9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fa93 	bl	8000c04 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f010 fc83 	bl	8010fe8 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 f9cf 	bl	8000a84 <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 fa01 	bl	8000aec <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fa3f 	bl	8000b6c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80006ee:	2100      	movs	r1, #0
 80006f0:	489b      	ldr	r0, [pc, #620]	@ (8000960 <main+0x2a4>)
 80006f2:	f00b f933 	bl	800b95c <HAL_TIM_PWM_Start>

  // SETUP CAMERA STREAM
  uint8_t camera_mem[CAM_WIDTH * CAM_HEIGHT * CAM_BYTES_PER_PIXEL];
  uint8_t usb_msg[100] = {0};
 80006f6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80006fa:	f5a3 6307 	sub.w	r3, r3, #2160	@ 0x870
 80006fe:	4618      	mov	r0, r3
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	461a      	mov	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f011 f9d7 	bl	8011ab8 <memset>
  //        COM7  [2] = 1 (RGB Selection 2)
  //        COM7  [4] = 1 (QVGA Resolution)
  // (0x15) COM10 [6] = 1 (Switch HREF to HSYNC)
  uint8_t cam_regCache;

  cam_regCache = 0x00;
 800070a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800070e:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x0C, &cam_regCache, 1);
 8000716:	4b93      	ldr	r3, [pc, #588]	@ (8000964 <main+0x2a8>)
 8000718:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800071c:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000720:	443b      	add	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	200c      	movs	r0, #12
 8000728:	f000 fb46 	bl	8000db8 <CAM_GetRegister>
  cam_regCache |= 0b00001000;
 800072c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000730:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	b2da      	uxtb	r2, r3
 800073c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000740:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000744:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x0C, cam_regCache, 1);
 8000746:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800074a:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	200c      	movs	r0, #12
 8000756:	f000 fba9 	bl	8000eac <CAM_SetRegister>

  cam_regCache = 0x00;
 800075a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800075e:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x12, &cam_regCache, 1);
 8000766:	4b7f      	ldr	r3, [pc, #508]	@ (8000964 <main+0x2a8>)
 8000768:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800076c:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000770:	443b      	add	r3, r7
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	2012      	movs	r0, #18
 8000778:	f000 fb1e 	bl	8000db8 <CAM_GetRegister>
  cam_regCache &= 0b11000000;
 800077c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000780:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800078a:	b2da      	uxtb	r2, r3
 800078c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000790:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000794:	701a      	strb	r2, [r3, #0]
  cam_regCache |= 0b00010100;
 8000796:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800079a:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f043 0314 	orr.w	r3, r3, #20
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007aa:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007ae:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x12, cam_regCache, 1);
 80007b0:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007b4:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	2012      	movs	r0, #18
 80007c0:	f000 fb74 	bl	8000eac <CAM_SetRegister>

  cam_regCache = 0x00;
 80007c4:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007c8:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
  CAM_GetRegister(0x15, &cam_regCache, 1);
 80007d0:	4b64      	ldr	r3, [pc, #400]	@ (8000964 <main+0x2a8>)
 80007d2:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 80007d6:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80007da:	443b      	add	r3, r7
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	2015      	movs	r0, #21
 80007e2:	f000 fae9 	bl	8000db8 <CAM_GetRegister>
  cam_regCache |= 0b01000000;
 80007e6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007ea:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80007fa:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 80007fe:	701a      	strb	r2, [r3, #0]
  CAM_SetRegister(0x15, cam_regCache, 1);
 8000800:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8000804:	f6a3 0371 	subw	r3, r3, #2161	@ 0x871
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	2015      	movs	r0, #21
 8000810:	f000 fb4c 	bl	8000eac <CAM_SetRegister>
	  // I2C CMD example
	  // HAL_StatusTypeDef tx_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &ov7670_CMD_PID, 1, 100);
	  // HAL_StatusTypeDef rx_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, i2c_readback, 1, 100);

	  // TESTING
	  HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, (CAM_WIDTH * CAM_HEIGHT * CAM_BYTES_PER_PIXEL) / 4);
 8000814:	4a54      	ldr	r2, [pc, #336]	@ (8000968 <main+0x2ac>)
 8000816:	4b55      	ldr	r3, [pc, #340]	@ (800096c <main+0x2b0>)
 8000818:	4413      	add	r3, r2
 800081a:	19da      	adds	r2, r3, r7
 800081c:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000820:	2102      	movs	r1, #2
 8000822:	4853      	ldr	r0, [pc, #332]	@ (8000970 <main+0x2b4>)
 8000824:	f001 faf4 	bl	8001e10 <HAL_DCMI_Start_DMA>
 8000828:	4603      	mov	r3, r0
 800082a:	4a52      	ldr	r2, [pc, #328]	@ (8000974 <main+0x2b8>)
 800082c:	443a      	add	r2, r7
 800082e:	7013      	strb	r3, [r2, #0]
	  if (ovStat) {
 8000830:	4b50      	ldr	r3, [pc, #320]	@ (8000974 <main+0x2b8>)
 8000832:	443b      	add	r3, r7
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d020      	beq.n	800087c <main+0x1c0>
		  // ERROR
		  sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 800083a:	4b4e      	ldr	r3, [pc, #312]	@ (8000974 <main+0x2b8>)
 800083c:	443b      	add	r3, r7
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	4b4d      	ldr	r3, [pc, #308]	@ (8000978 <main+0x2bc>)
 8000842:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000846:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800084a:	443b      	add	r3, r7
 800084c:	494b      	ldr	r1, [pc, #300]	@ (800097c <main+0x2c0>)
 800084e:	4618      	mov	r0, r3
 8000850:	f011 f910 	bl	8011a74 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000854:	4b48      	ldr	r3, [pc, #288]	@ (8000978 <main+0x2bc>)
 8000856:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800085a:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800085e:	443b      	add	r3, r7
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fd3d 	bl	80002e0 <strlen>
 8000866:	4602      	mov	r2, r0
 8000868:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <main+0x2bc>)
 800086a:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800086e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000872:	443b      	add	r3, r7
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f010 fc7c 	bl	8011174 <CDC_Transmit_FS>
	  }
	  HAL_Delay(2000);
 800087c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000880:	f001 f894 	bl	80019ac <HAL_Delay>

	  // Get the first byte of the DMA field
	  for (int i = 0; i < 32; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	4a3e      	ldr	r2, [pc, #248]	@ (8000980 <main+0x2c4>)
 8000888:	443a      	add	r2, r7
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	e05a      	b.n	8000944 <main+0x288>
		  uint32_t pixbuf_0 = (camera_mem[i*4]<<24) | (camera_mem[i*4+1]<<16) | (camera_mem[i*4+2]<<8) | (camera_mem[i*4+3]);
 800088e:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <main+0x2c4>)
 8000890:	443b      	add	r3, r7
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800089a:	f6a2 020c 	subw	r2, r2, #2060	@ 0x80c
 800089e:	5cd3      	ldrb	r3, [r2, r3]
 80008a0:	061a      	lsls	r2, r3, #24
 80008a2:	4b37      	ldr	r3, [pc, #220]	@ (8000980 <main+0x2c4>)
 80008a4:	443b      	add	r3, r7
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	3301      	adds	r3, #1
 80008ac:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 80008b0:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 80008b4:	5ccb      	ldrb	r3, [r1, r3]
 80008b6:	041b      	lsls	r3, r3, #16
 80008b8:	431a      	orrs	r2, r3
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <main+0x2c4>)
 80008bc:	443b      	add	r3, r7
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	3302      	adds	r3, #2
 80008c4:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 80008c8:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 80008cc:	5ccb      	ldrb	r3, [r1, r3]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	4313      	orrs	r3, r2
 80008d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000980 <main+0x2c4>)
 80008d4:	443a      	add	r2, r7
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	3203      	adds	r2, #3
 80008dc:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 80008e0:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 80008e4:	5c8a      	ldrb	r2, [r1, r2]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	4a26      	ldr	r2, [pc, #152]	@ (8000984 <main+0x2c8>)
 80008ea:	443a      	add	r2, r7
 80008ec:	6013      	str	r3, [r2, #0]
		  sprintf(usb_msg, "%d - 0x%X\r\n", i, pixbuf_0);
 80008ee:	4822      	ldr	r0, [pc, #136]	@ (8000978 <main+0x2bc>)
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <main+0x2b0>)
 80008f2:	4403      	add	r3, r0
 80008f4:	19d8      	adds	r0, r3, r7
 80008f6:	4b23      	ldr	r3, [pc, #140]	@ (8000984 <main+0x2c8>)
 80008f8:	443b      	add	r3, r7
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a20      	ldr	r2, [pc, #128]	@ (8000980 <main+0x2c4>)
 80008fe:	443a      	add	r2, r7
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	4921      	ldr	r1, [pc, #132]	@ (8000988 <main+0x2cc>)
 8000904:	f011 f8b6 	bl	8011a74 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <main+0x2bc>)
 800090a:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 800090e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000912:	443b      	add	r3, r7
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fce3 	bl	80002e0 <strlen>
 800091a:	4602      	mov	r2, r0
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <main+0x2bc>)
 800091e:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000922:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000926:	443b      	add	r3, r7
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f010 fc22 	bl	8011174 <CDC_Transmit_FS>
		  HAL_Delay(5);
 8000930:	2005      	movs	r0, #5
 8000932:	f001 f83b 	bl	80019ac <HAL_Delay>
	  for (int i = 0; i < 32; i++) {
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <main+0x2c4>)
 8000938:	443b      	add	r3, r7
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <main+0x2c4>)
 8000940:	443a      	add	r2, r7
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <main+0x2c4>)
 8000946:	443b      	add	r3, r7
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b1f      	cmp	r3, #31
 800094c:	dd9f      	ble.n	800088e <main+0x1d2>
	  }
	  HAL_Delay(500);
 800094e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000952:	f001 f82b 	bl	80019ac <HAL_Delay>

	  HAL_DCMI_Stop(&hdcmi);
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <main+0x2b4>)
 8000958:	f001 fb1c 	bl	8001f94 <HAL_DCMI_Stop>
  {
 800095c:	e75a      	b.n	8000814 <main+0x158>
 800095e:	bf00      	nop
 8000960:	2400028c 	.word	0x2400028c
 8000964:	fffda78f 	.word	0xfffda78f
 8000968:	fffda7f4 	.word	0xfffda7f4
 800096c:	00025878 	.word	0x00025878
 8000970:	24000170 	.word	0x24000170
 8000974:	00025873 	.word	0x00025873
 8000978:	fffda790 	.word	0xfffda790
 800097c:	080123cc 	.word	0x080123cc
 8000980:	00025874 	.word	0x00025874
 8000984:	0002586c 	.word	0x0002586c
 8000988:	080123ec 	.word	0x080123ec

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	@ 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	224c      	movs	r2, #76	@ 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f011 f88c 	bl	8011ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f011 f886 	bl	8011ab8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ac:	2002      	movs	r0, #2
 80009ae:	f008 f8c1 	bl	8008b34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <SystemClock_Config+0xf0>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	4a30      	ldr	r2, [pc, #192]	@ (8000a7c <SystemClock_Config+0xf0>)
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009c2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <SystemClock_Config+0xf0>)
 80009c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <SystemClock_Config+0xf4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a80 <SystemClock_Config+0xf4>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <SystemClock_Config+0xf4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e8:	bf00      	nop
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <SystemClock_Config+0xf4>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f6:	d1f8      	bne.n	80009ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a22:	2302      	movs	r3, #2
 8000a24:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f008 f8ca 	bl	8008bc8 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a3a:	f000 fb09 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	233f      	movs	r3, #63	@ 0x3f
 8000a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2303      	movs	r3, #3
 8000a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000a56:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2101      	movs	r1, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 fd09 	bl	800947c <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a70:	f000 faee 	bl	8001050 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3770      	adds	r7, #112	@ 0x70
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58000400 	.word	0x58000400
 8000a80:	58024800 	.word	0x58024800

08000a84 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <MX_DCMI_Init+0x64>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000a96:	2220      	movs	r2, #32
 8000a98:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_DCMI_Init+0x60>)
 8000ad2:	f001 f923 	bl	8001d1c <HAL_DCMI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f000 fab8 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000170 	.word	0x24000170
 8000ae8:	48020000 	.word	0x48020000

08000aec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b64 <MX_I2C2_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <MX_I2C2_Init+0x7c>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b26:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b28:	f005 f898 	bl	8005c5c <HAL_I2C_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b32:	f000 fa8d 	bl	8001050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b3a:	f006 fcc3 	bl	80074c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 fa84 	bl	8001050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b4c:	f006 fd05 	bl	800755a <HAL_I2CEx_ConfigDigitalFilter>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fa7b 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000238 	.word	0x24000238
 8000b64:	40005800 	.word	0x40005800
 8000b68:	00c0eaff 	.word	0x00c0eaff

08000b6c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000b86:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <MX_TIM14_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000b98:	2205      	movs	r2, #5
 8000b9a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ba8:	4814      	ldr	r0, [pc, #80]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000baa:	f00a fe1f 	bl	800b7ec <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000bb4:	f000 fa4c 	bl	8001050 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000bb8:	4810      	ldr	r0, [pc, #64]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000bba:	f00a fe6e 	bl	800b89a <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000bc4:	f000 fa44 	bl	8001050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc8:	2360      	movs	r3, #96	@ 0x60
 8000bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000be0:	f00b f8d2 	bl	800bd88 <HAL_TIM_PWM_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000bea:	f000 fa31 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <MX_TIM14_Init+0x90>)
 8000bf0:	f000 fc18 	bl	8001424 <HAL_TIM_MspPostInit>

}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2400028c 	.word	0x2400028c
 8000c00:	40002000 	.word	0x40002000

08000c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c0a:	4a23      	ldr	r2, [pc, #140]	@ (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4c:	4811      	ldr	r0, [pc, #68]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c4e:	f00b fd9a 	bl	800c786 <HAL_UART_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c58:	f000 f9fa 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c60:	f00c fda3 	bl	800d7aa <HAL_UARTEx_SetTxFifoThreshold>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6a:	f000 f9f1 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4808      	ldr	r0, [pc, #32]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c72:	f00c fdd8 	bl	800d826 <HAL_UARTEx_SetRxFifoThreshold>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c7c:	f000 f9e8 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	@ (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c82:	f00c fd59 	bl	800d738 <HAL_UARTEx_DisableFifoMode>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f000 f9e0 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	240002d8 	.word	0x240002d8
 8000c98:	40011000 	.word	0x40011000

08000c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_DMA_Init+0x4c>)
 8000ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <MX_DMA_Init+0x4c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <MX_DMA_Init+0x4c>)
 8000cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	200b      	movs	r0, #11
 8000cc6:	f000 ff7c 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cca:	200b      	movs	r0, #11
 8000ccc:	f000 ff93 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2066      	movs	r0, #102	@ 0x66
 8000cd6:	f000 ff74 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000cda:	2066      	movs	r0, #102	@ 0x66
 8000cdc:	f000 ff8b 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58024400 	.word	0x58024400

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf2:	4b30      	ldr	r3, [pc, #192]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0310 	and.w	r3, r3, #16
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d10:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	4a09      	ldr	r2, [pc, #36]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_GPIO_Init+0xc8>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	58024400 	.word	0x58024400

08000db8 <CAM_GetRegister>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09e      	sub	sp, #120	@ 0x78
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	71bb      	strb	r3, [r7, #6]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2264      	movs	r2, #100	@ 0x64
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f010 fe71 	bl	8011ab8 <memset>

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8000dd6:	1dfa      	adds	r2, r7, #7
 8000dd8:	2364      	movs	r3, #100	@ 0x64
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2143      	movs	r1, #67	@ 0x43
 8000de0:	482f      	ldr	r0, [pc, #188]	@ (8000ea0 <CAM_GetRegister+0xe8>)
 8000de2:	f004 ffd7 	bl	8005d94 <HAL_I2C_Master_Transmit>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 8000dec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d020      	beq.n	8000e36 <CAM_GetRegister+0x7e>
		  if (haltOnError) {
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01a      	beq.n	8000e30 <CAM_GetRegister+0x78>
			  sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e02:	f107 0008 	add.w	r0, r7, #8
 8000e06:	4927      	ldr	r1, [pc, #156]	@ (8000ea4 <CAM_GetRegister+0xec>)
 8000e08:	f010 fe34 	bl	8011a74 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fa65 	bl	80002e0 <strlen>
 8000e16:	4602      	mov	r2, r0
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f010 f9a8 	bl	8011174 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e28:	f000 fdc0 	bl	80019ac <HAL_Delay>
			  while (1) {
 8000e2c:	bf00      	nop
 8000e2e:	e7ed      	b.n	8000e0c <CAM_GetRegister+0x54>
			  }
		  }
		  return ov_result;
 8000e30:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e34:	e030      	b.n	8000e98 <CAM_GetRegister+0xe0>
	  }


	  ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8000e36:	2364      	movs	r3, #100	@ 0x64
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	2143      	movs	r1, #67	@ 0x43
 8000e40:	4817      	ldr	r0, [pc, #92]	@ (8000ea0 <CAM_GetRegister+0xe8>)
 8000e42:	f005 f8bf 	bl	8005fc4 <HAL_I2C_Master_Receive>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 8000e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <CAM_GetRegister+0xde>
		  if (haltOnError) {
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d01a      	beq.n	8000e90 <CAM_GetRegister+0xd8>
			  sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e62:	f107 0008 	add.w	r0, r7, #8
 8000e66:	4910      	ldr	r1, [pc, #64]	@ (8000ea8 <CAM_GetRegister+0xf0>)
 8000e68:	f010 fe04 	bl	8011a74 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fa35 	bl	80002e0 <strlen>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f010 f978 	bl	8011174 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e88:	f000 fd90 	bl	80019ac <HAL_Delay>
			  while (1) {
 8000e8c:	bf00      	nop
 8000e8e:	e7ed      	b.n	8000e6c <CAM_GetRegister+0xb4>
			  }
		  }
		  return ov_result;
 8000e90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000e94:	e000      	b.n	8000e98 <CAM_GetRegister+0xe0>
	  }


	  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3770      	adds	r7, #112	@ 0x70
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000238 	.word	0x24000238
 8000ea4:	080123f8 	.word	0x080123f8
 8000ea8:	08012434 	.word	0x08012434

08000eac <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0a0      	sub	sp, #128	@ 0x80
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	71bb      	strb	r3, [r7, #6]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	717b      	strb	r3, [r7, #5]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	2264      	movs	r2, #100	@ 0x64
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f010 fdf6 	bl	8011ab8 <memset>

	  uint8_t reg_set[2] = {addr, data};
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	733b      	strb	r3, [r7, #12]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	737b      	strb	r3, [r7, #13]

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2302      	movs	r3, #2
 8000ede:	2142      	movs	r1, #66	@ 0x42
 8000ee0:	4841      	ldr	r0, [pc, #260]	@ (8000fe8 <CAM_SetRegister+0x13c>)
 8000ee2:	f004 ff57 	bl	8005d94 <HAL_I2C_Master_Transmit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 8000eec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01f      	beq.n	8000f34 <CAM_SetRegister+0x88>
		  if (haltOnError) {
 8000ef4:	797b      	ldrb	r3, [r7, #5]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d019      	beq.n	8000f2e <CAM_SetRegister+0x82>
			  sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f00:	f107 0010 	add.w	r0, r7, #16
 8000f04:	4939      	ldr	r1, [pc, #228]	@ (8000fec <CAM_SetRegister+0x140>)
 8000f06:	f010 fdb5 	bl	8011a74 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9e6 	bl	80002e0 <strlen>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f010 f929 	bl	8011174 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f26:	f000 fd41 	bl	80019ac <HAL_Delay>
			  while (1) {
 8000f2a:	bf00      	nop
 8000f2c:	e7ed      	b.n	8000f0a <CAM_SetRegister+0x5e>
			  }
		  }
		  return ov_result;
 8000f2e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f32:	e054      	b.n	8000fde <CAM_SetRegister+0x132>
	  }

	  // Confirm write
	  uint8_t reg_get = 0x00;
 8000f34:	2300      	movs	r3, #0
 8000f36:	72fb      	strb	r3, [r7, #11]
	  ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8000f38:	f107 010b 	add.w	r1, r7, #11
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff39 	bl	8000db8 <CAM_GetRegister>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 8000f4c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d01f      	beq.n	8000f94 <CAM_SetRegister+0xe8>
		  if (haltOnError) {
 8000f54:	797b      	ldrb	r3, [r7, #5]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d019      	beq.n	8000f8e <CAM_SetRegister+0xe2>
			  sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f60:	f107 0010 	add.w	r0, r7, #16
 8000f64:	4922      	ldr	r1, [pc, #136]	@ (8000ff0 <CAM_SetRegister+0x144>)
 8000f66:	f010 fd85 	bl	8011a74 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f9b6 	bl	80002e0 <strlen>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f010 f8f9 	bl	8011174 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f86:	f000 fd11 	bl	80019ac <HAL_Delay>
			  while (1) {
 8000f8a:	bf00      	nop
 8000f8c:	e7ed      	b.n	8000f6a <CAM_SetRegister+0xbe>
			  }
		  }
		  else {
			  return ov_result;
 8000f8e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000f92:	e024      	b.n	8000fde <CAM_SetRegister+0x132>
		  }
	  }

	  if (reg_get != data) {
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	79ba      	ldrb	r2, [r7, #6]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d01f      	beq.n	8000fdc <CAM_SetRegister+0x130>
		  // Error, bad write
		  if (haltOnError) {
 8000f9c:	797b      	ldrb	r3, [r7, #5]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d01a      	beq.n	8000fd8 <CAM_SetRegister+0x12c>
			  sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	7af9      	ldrb	r1, [r7, #11]
 8000fa8:	f107 0010 	add.w	r0, r7, #16
 8000fac:	9100      	str	r1, [sp, #0]
 8000fae:	4911      	ldr	r1, [pc, #68]	@ (8000ff4 <CAM_SetRegister+0x148>)
 8000fb0:	f010 fd60 	bl	8011a74 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f991 	bl	80002e0 <strlen>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f010 f8d4 	bl	8011174 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd0:	f000 fcec 	bl	80019ac <HAL_Delay>
			  while (1) {
 8000fd4:	bf00      	nop
 8000fd6:	e7ed      	b.n	8000fb4 <CAM_SetRegister+0x108>
			  }
		  }
		  return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <CAM_SetRegister+0x132>
	  }

	  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3778      	adds	r7, #120	@ 0x78
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	24000238 	.word	0x24000238
 8000fec:	08012470 	.word	0x08012470
 8000ff0:	080124ac 	.word	0x080124ac
 8000ff4:	080124e8 	.word	0x080124e8

08000ff8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800100a:	f000 fe0f 	bl	8001c2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800100e:	2301      	movs	r3, #1
 8001010:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001012:	2300      	movs	r3, #0
 8001014:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800101a:	231f      	movs	r3, #31
 800101c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800101e:	2387      	movs	r3, #135	@ 0x87
 8001020:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001022:	2300      	movs	r3, #0
 8001024:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001026:	2300      	movs	r3, #0
 8001028:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800102e:	2301      	movs	r3, #1
 8001030:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800103a:	463b      	mov	r3, r7
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fe2d 	bl	8001c9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001042:	2004      	movs	r0, #4
 8001044:	f000 fe0a 	bl	8001c5c <HAL_MPU_Enable>

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001068:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x30>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x30>)
 8001074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	58024400 	.word	0x58024400

08001090 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	@ 0x38
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a7a      	ldr	r2, [pc, #488]	@ (8001298 <HAL_DCMI_MspInit+0x208>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	f040 80ed 	bne.w	800128e <HAL_DCMI_MspInit+0x1fe>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80010b4:	4b79      	ldr	r3, [pc, #484]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80010ba:	4a78      	ldr	r2, [pc, #480]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80010c4:	4b75      	ldr	r3, [pc, #468]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	4b72      	ldr	r3, [pc, #456]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	4a70      	ldr	r2, [pc, #448]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e2:	4b6e      	ldr	r3, [pc, #440]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b6a      	ldr	r3, [pc, #424]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	4a69      	ldr	r2, [pc, #420]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001100:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b63      	ldr	r3, [pc, #396]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	4a61      	ldr	r2, [pc, #388]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800111e:	4b5f      	ldr	r3, [pc, #380]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113c:	4b57      	ldr	r3, [pc, #348]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b54      	ldr	r3, [pc, #336]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001150:	4a52      	ldr	r2, [pc, #328]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115a:	4b50      	ldr	r3, [pc, #320]	@ (800129c <HAL_DCMI_MspInit+0x20c>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001168:	2370      	movs	r3, #112	@ 0x70
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001178:	230d      	movs	r3, #13
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4847      	ldr	r0, [pc, #284]	@ (80012a0 <HAL_DCMI_MspInit+0x210>)
 8001184:	f004 fbba 	bl	80058fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001188:	2350      	movs	r3, #80	@ 0x50
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001198:	230d      	movs	r3, #13
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	4840      	ldr	r0, [pc, #256]	@ (80012a4 <HAL_DCMI_MspInit+0x214>)
 80011a4:	f004 fbaa 	bl	80058fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011a8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011ba:	230d      	movs	r3, #13
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	4838      	ldr	r0, [pc, #224]	@ (80012a8 <HAL_DCMI_MspInit+0x218>)
 80011c6:	f004 fb99 	bl	80058fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ca:	2308      	movs	r3, #8
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011da:	230d      	movs	r3, #13
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4831      	ldr	r0, [pc, #196]	@ (80012ac <HAL_DCMI_MspInit+0x21c>)
 80011e6:	f004 fb89 	bl	80058fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011fa:	230d      	movs	r3, #13
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	482a      	ldr	r0, [pc, #168]	@ (80012b0 <HAL_DCMI_MspInit+0x220>)
 8001206:	f004 fb79 	bl	80058fc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800120a:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800120c:	4a2a      	ldr	r2, [pc, #168]	@ (80012b8 <HAL_DCMI_MspInit+0x228>)
 800120e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001210:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001212:	224b      	movs	r2, #75	@ 0x4b
 8001214:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001216:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001222:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001224:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001228:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800122c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001230:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001234:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001238:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800123c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001240:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001244:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001248:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800124c:	2204      	movs	r2, #4
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001252:	2203      	movs	r2, #3
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001258:	2200      	movs	r2, #0
 800125a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800125e:	2200      	movs	r2, #0
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001262:	4814      	ldr	r0, [pc, #80]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001264:	f001 f850 	bl	8002308 <HAL_DMA_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_DCMI_MspInit+0x1e2>
    {
      Error_Handler();
 800126e:	f7ff feef 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 8001276:	649a      	str	r2, [r3, #72]	@ 0x48
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <HAL_DCMI_MspInit+0x224>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	204e      	movs	r0, #78	@ 0x4e
 8001284:	f000 fc9d 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001288:	204e      	movs	r0, #78	@ 0x4e
 800128a:	f000 fcb4 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 800128e:	bf00      	nop
 8001290:	3738      	adds	r7, #56	@ 0x38
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	48020000 	.word	0x48020000
 800129c:	58024400 	.word	0x58024400
 80012a0:	58021000 	.word	0x58021000
 80012a4:	58020000 	.word	0x58020000
 80012a8:	58020800 	.word	0x58020800
 80012ac:	58020c00 	.word	0x58020c00
 80012b0:	58020400 	.word	0x58020400
 80012b4:	240001c0 	.word	0x240001c0
 80012b8:	40020010 	.word	0x40020010

080012bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ba      	sub	sp, #232	@ 0xe8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	22c0      	movs	r2, #192	@ 0xc0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f010 fbeb 	bl	8011ab8 <memset>
  if(hi2c->Instance==I2C2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a38      	ldr	r2, [pc, #224]	@ (80013c8 <HAL_I2C_MspInit+0x10c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d169      	bne.n	80013c0 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012ec:	f04f 0208 	mov.w	r2, #8
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 80012fc:	230c      	movs	r3, #12
 80012fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8001308:	2303      	movs	r3, #3
 800130a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800130c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001310:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001316:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800131c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001320:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4618      	mov	r0, r3
 800132a:	f008 fc33 	bl	8009b94 <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8001334:	f7ff fe8c 	bl	8001050 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_I2C_MspInit+0x110>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133e:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <HAL_I2C_MspInit+0x110>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_I2C_MspInit+0x110>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001356:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800135a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001364:	2301      	movs	r3, #1
 8001366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001370:	2304      	movs	r3, #4
 8001372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800137a:	4619      	mov	r1, r3
 800137c:	4814      	ldr	r0, [pc, #80]	@ (80013d0 <HAL_I2C_MspInit+0x114>)
 800137e:	f004 fabd 	bl	80058fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_I2C_MspInit+0x110>)
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001388:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_I2C_MspInit+0x110>)
 800138a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800138e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_I2C_MspInit+0x110>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2021      	movs	r0, #33	@ 0x21
 80013a6:	f000 fc0c 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013aa:	2021      	movs	r0, #33	@ 0x21
 80013ac:	f000 fc23 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2022      	movs	r0, #34	@ 0x22
 80013b6:	f000 fc04 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80013ba:	2022      	movs	r0, #34	@ 0x22
 80013bc:	f000 fc1b 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80013c0:	bf00      	nop
 80013c2:	37e8      	adds	r7, #232	@ 0xe8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005800 	.word	0x40005800
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020400 	.word	0x58020400

080013d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <HAL_TIM_Base_MspInit+0x48>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d116      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <HAL_TIM_Base_MspInit+0x4c>)
 80013e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <HAL_TIM_Base_MspInit+0x4c>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_TIM_Base_MspInit+0x4c>)
 80013f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	202d      	movs	r0, #45	@ 0x2d
 800140a:	f000 fbda 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800140e:	202d      	movs	r0, #45	@ 0x2d
 8001410:	f000 fbf1 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40002000 	.word	0x40002000
 8001420:	58024400 	.word	0x58024400

08001424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <HAL_TIM_MspPostInit+0x68>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d11e      	bne.n	8001484 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM14_MspPostInit 0 */

    /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_TIM_MspPostInit+0x6c>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144c:	4a10      	ldr	r2, [pc, #64]	@ (8001490 <HAL_TIM_MspPostInit+0x6c>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_TIM_MspPostInit+0x6c>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001474:	2309      	movs	r3, #9
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <HAL_TIM_MspPostInit+0x70>)
 8001480:	f004 fa3c 	bl	80058fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40002000 	.word	0x40002000
 8001490:	58024400 	.word	0x58024400
 8001494:	58020000 	.word	0x58020000

08001498 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ba      	sub	sp, #232	@ 0xe8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	22c0      	movs	r2, #192	@ 0xc0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f010 fafd 	bl	8011ab8 <memset>
  if(huart->Instance==USART1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a27      	ldr	r2, [pc, #156]	@ (8001560 <HAL_UART_MspInit+0xc8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d146      	bne.n	8001556 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014c8:	f04f 0201 	mov.w	r2, #1
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 fb58 	bl	8009b94 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014ea:	f7ff fdb1 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <HAL_UART_MspInit+0xcc>)
 80014f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001564 <HAL_UART_MspInit+0xcc>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_UART_MspInit+0xcc>)
 8001500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_UART_MspInit+0xcc>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <HAL_UART_MspInit+0xcc>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_UART_MspInit+0xcc>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800152a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800152e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001544:	2304      	movs	r3, #4
 8001546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_UART_MspInit+0xd0>)
 8001552:	f004 f9d3 	bl	80058fc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	37e8      	adds	r7, #232	@ 0xe8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40011000 	.word	0x40011000
 8001564:	58024400 	.word	0x58024400
 8001568:	58020400 	.word	0x58020400

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f9d3 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <DMA1_Stream0_IRQHandler+0x10>)
 80015d2:	f002 f9c3 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	240001c0 	.word	0x240001c0

080015e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <I2C2_EV_IRQHandler+0x10>)
 80015e6:	f004 fde3 	bl	80061b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	24000238 	.word	0x24000238

080015f4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <I2C2_ER_IRQHandler+0x10>)
 80015fa:	f004 fdf3 	bl	80061e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	24000238 	.word	0x24000238

08001608 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800160e:	f00a fab3 	bl	800bb78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2400028c 	.word	0x2400028c

0800161c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <DCMI_IRQHandler+0x10>)
 8001622:	f000 fd17 	bl	8002054 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	24000170 	.word	0x24000170

08001630 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <OTG_FS_IRQHandler+0x10>)
 8001636:	f006 f91d 	bl	8007874 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	24001854 	.word	0x24001854

08001644 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f010 fa20 	bl	8011ac8 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	24080000 	.word	0x24080000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	2400036c 	.word	0x2400036c
 80016bc:	240020a0 	.word	0x240020a0

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c4:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <SystemInit+0x114>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a42      	ldr	r2, [pc, #264]	@ (80017d4 <SystemInit+0x114>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d4:	4b40      	ldr	r3, [pc, #256]	@ (80017d8 <SystemInit+0x118>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d807      	bhi.n	80016f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e0:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <SystemInit+0x118>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 030f 	bic.w	r3, r3, #15
 80016e8:	4a3b      	ldr	r2, [pc, #236]	@ (80017d8 <SystemInit+0x118>)
 80016ea:	f043 0307 	orr.w	r3, r3, #7
 80016ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016f0:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <SystemInit+0x11c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	@ (80017dc <SystemInit+0x11c>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016fc:	4b37      	ldr	r3, [pc, #220]	@ (80017dc <SystemInit+0x11c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001702:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <SystemInit+0x11c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4935      	ldr	r1, [pc, #212]	@ (80017dc <SystemInit+0x11c>)
 8001708:	4b35      	ldr	r3, [pc, #212]	@ (80017e0 <SystemInit+0x120>)
 800170a:	4013      	ands	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <SystemInit+0x118>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <SystemInit+0x118>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 030f 	bic.w	r3, r3, #15
 8001722:	4a2d      	ldr	r2, [pc, #180]	@ (80017d8 <SystemInit+0x118>)
 8001724:	f043 0307 	orr.w	r3, r3, #7
 8001728:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800172a:	4b2c      	ldr	r3, [pc, #176]	@ (80017dc <SystemInit+0x11c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001730:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <SystemInit+0x11c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <SystemInit+0x11c>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <SystemInit+0x11c>)
 800173e:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <SystemInit+0x124>)
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001742:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <SystemInit+0x11c>)
 8001744:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <SystemInit+0x128>)
 8001746:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <SystemInit+0x11c>)
 800174a:	4a28      	ldr	r2, [pc, #160]	@ (80017ec <SystemInit+0x12c>)
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800174e:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <SystemInit+0x11c>)
 8001750:	2200      	movs	r2, #0
 8001752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <SystemInit+0x11c>)
 8001756:	4a25      	ldr	r2, [pc, #148]	@ (80017ec <SystemInit+0x12c>)
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <SystemInit+0x11c>)
 800175c:	2200      	movs	r2, #0
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <SystemInit+0x11c>)
 8001762:	4a22      	ldr	r2, [pc, #136]	@ (80017ec <SystemInit+0x12c>)
 8001764:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001766:	4b1d      	ldr	r3, [pc, #116]	@ (80017dc <SystemInit+0x11c>)
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <SystemInit+0x11c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	@ (80017dc <SystemInit+0x11c>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <SystemInit+0x11c>)
 800177a:	2200      	movs	r2, #0
 800177c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <SystemInit+0x130>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <SystemInit+0x134>)
 8001784:	4013      	ands	r3, r2
 8001786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800178a:	d202      	bcs.n	8001792 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <SystemInit+0x138>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001792:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <SystemInit+0x11c>)
 8001794:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d113      	bne.n	80017c8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <SystemInit+0x11c>)
 80017a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017a6:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <SystemInit+0x11c>)
 80017a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <SystemInit+0x13c>)
 80017b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <SystemInit+0x11c>)
 80017ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <SystemInit+0x11c>)
 80017c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	52002000 	.word	0x52002000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017e4:	02020200 	.word	0x02020200
 80017e8:	01ff0000 	.word	0x01ff0000
 80017ec:	01010280 	.word	0x01010280
 80017f0:	5c001000 	.word	0x5c001000
 80017f4:	ffff0000 	.word	0xffff0000
 80017f8:	51008108 	.word	0x51008108
 80017fc:	52004000 	.word	0x52004000

08001800 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <ExitRun0Mode+0x2c>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a08      	ldr	r2, [pc, #32]	@ (800182c <ExitRun0Mode+0x2c>)
 800180a:	f043 0302 	orr.w	r3, r3, #2
 800180e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001810:	bf00      	nop
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <ExitRun0Mode+0x2c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f9      	beq.n	8001812 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	58024800 	.word	0x58024800

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800186c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001834:	f7ff ffe4 	bl	8001800 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001838:	f7ff ff42 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001862:	f010 f937 	bl	8011ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7fe ff29 	bl	80006bc <main>
  bx  lr
 800186a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001870:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001874:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8001878:	080125f8 	.word	0x080125f8
  ldr r2, =_sbss
 800187c:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001880:	240020a0 	.word	0x240020a0

08001884 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC3_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188e:	2003      	movs	r0, #3
 8001890:	f000 f98c 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001894:	f007 ffa8 	bl	80097e8 <HAL_RCC_GetSysClockFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_Init+0x68>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	4913      	ldr	r1, [pc, #76]	@ (80018f4 <HAL_Init+0x6c>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_Init+0x68>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_Init+0x6c>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <HAL_Init+0x70>)
 80018ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018cc:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_Init+0x74>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f814 	bl	8001900 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e002      	b.n	80018e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018e2:	f7ff fbbb 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58024400 	.word	0x58024400
 80018f4:	08012574 	.word	0x08012574
 80018f8:	24000004 	.word	0x24000004
 80018fc:	24000000 	.word	0x24000000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_InitTick+0x60>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e021      	b.n	8001958 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_InitTick+0x64>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_InitTick+0x60>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f971 	bl	8001c12 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f93b 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_InitTick+0x68>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2400000c 	.word	0x2400000c
 8001964:	24000000 	.word	0x24000000
 8001968:	24000008 	.word	0x24000008

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2400000c 	.word	0x2400000c
 8001990:	24000370 	.word	0x24000370

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	24000370 	.word	0x24000370

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2400000c 	.word	0x2400000c

080019f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetREVID+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0c1b      	lsrs	r3, r3, #16
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	5c001000 	.word	0x5c001000

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	05fa0000 	.word	0x05fa0000

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	@ (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	@ (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff29 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff40 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff90 	bl	8001b00 <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5f 	bl	8001aac <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff33 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa4 	bl	8001b68 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c30:	f3bf 8f5f 	dmb	sy
}
 8001c34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <HAL_MPU_Disable+0x28>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	4a06      	ldr	r2, [pc, #24]	@ (8001c54 <HAL_MPU_Disable+0x28>)
 8001c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_MPU_Disable+0x2c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	e000ed90 	.word	0xe000ed90

08001c5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c64:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <HAL_MPU_Enable+0x38>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_MPU_Enable+0x3c>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_MPU_Enable+0x3c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7a:	f3bf 8f4f 	dsb	sy
}
 8001c7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c80:	f3bf 8f6f 	isb	sy
}
 8001c84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed90 	.word	0xe000ed90
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	785a      	ldrb	r2, [r3, #1]
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001caa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cb8:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7b1b      	ldrb	r3, [r3, #12]
 8001cc4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7adb      	ldrb	r3, [r3, #11]
 8001cca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ccc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7a9b      	ldrb	r3, [r3, #10]
 8001cd2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7b5b      	ldrb	r3, [r3, #13]
 8001cda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7b9b      	ldrb	r3, [r3, #14]
 8001ce2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ce4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7bdb      	ldrb	r3, [r3, #15]
 8001cea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7a5b      	ldrb	r3, [r3, #9]
 8001cf2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7a1b      	ldrb	r3, [r3, #8]
 8001cfa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cfc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d06:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d08:	6113      	str	r3, [r2, #16]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed90 	.word	0xe000ed90

08001d1c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e069      	b.n	8001e02 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff f9a8 	bl	8001090 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_DCMI_Init+0xf0>)
 8001d62:	400b      	ands	r3, r1
 8001d64:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001d7a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001d86:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001d92:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001d9e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001daa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d112      	bne.n	8001de2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7f1b      	ldrb	r3, [r3, #28]
 8001dc0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7f5b      	ldrb	r3, [r3, #29]
 8001dc6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001dc8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7f9b      	ldrb	r3, [r3, #30]
 8001dce:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001dd0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7fdb      	ldrb	r3, [r3, #31]
 8001dd8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001dde:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001de0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 021e 	orr.w	r2, r2, #30
 8001df0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	ffe0f007 	.word	0xffe0f007

08001e10 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_DCMI_Start_DMA+0x1c>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0ab      	b.n	8001f84 <HAL_DCMI_Start_DMA+0x174>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0202 	bic.w	r2, r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e70:	4a46      	ldr	r2, [pc, #280]	@ (8001f8c <HAL_DCMI_Start_DMA+0x17c>)
 8001e72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e78:	4a45      	ldr	r2, [pc, #276]	@ (8001f90 <HAL_DCMI_Start_DMA+0x180>)
 8001e7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e80:	2200      	movs	r2, #0
 8001e82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d219      	bcs.n	8001ed8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3328      	adds	r3, #40	@ 0x28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	f000 fd84 	bl	80029c0 <HAL_DMA_Start_IT>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d055      	beq.n	8001f6a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2240      	movs	r2, #64	@ 0x40
 8001ec2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e055      	b.n	8001f84 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001edc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f8c <HAL_DCMI_Start_DMA+0x17c>)
 8001ede:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001ef2:	e009      	b.n	8001f08 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	085a      	lsrs	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f02:	005a      	lsls	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f10:	d2f0      	bcs.n	8001ef4 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f16:	1e9a      	subs	r2, r3, #2
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3328      	adds	r3, #40	@ 0x28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	f003 f829 	bl	8004f9c <HAL_DMAEx_MultiBufferStart_IT>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00c      	beq.n	8001f6a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00c      	b.n	8001f84 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	080021a9 	.word	0x080021a9
 8001f90:	080022cf 	.word	0x080022cf

08001f94 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_DCMI_Stop+0xb8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <HAL_DCMI_Stop+0xbc>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0a5b      	lsrs	r3, r3, #9
 8001fa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_DCMI_Stop+0x30>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e03f      	b.n	8002044 <HAL_DCMI_Stop+0xb0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d108      	bne.n	8002002 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8002000:	e006      	b.n	8002010 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800201e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002024:	4618      	mov	r0, r3
 8002026:	f000 ff35 	bl	8002e94 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002042:	7afb      	ldrb	r3, [r7, #11]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	24000000 	.word	0x24000000
 8002050:	10624dd3 	.word	0x10624dd3

08002054 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2204      	movs	r2, #4
 8002074:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208e:	4a31      	ldr	r2, [pc, #196]	@ (8002154 <HAL_DCMI_IRQHandler+0x100>)
 8002090:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fa1a 	bl	80034d0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d016      	beq.n	80020d4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2202      	movs	r2, #2
 80020ac:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c6:	4a23      	ldr	r2, [pc, #140]	@ (8002154 <HAL_DCMI_IRQHandler+0x100>)
 80020c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	4618      	mov	r0, r3
 80020d0:	f001 f9fe 	bl	80034d0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2210      	movs	r2, #16
 80020e4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f840 	bl	800216c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2208      	movs	r2, #8
 80020fc:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f83e 	bl	8002180 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01d      	beq.n	800214a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d107      	bne.n	800212c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 021e 	bic.w	r2, r2, #30
 800212a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f825 	bl	8002194 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	080022cf 	.word	0x080022cf

08002158 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d043      	beq.n	8002246 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ca:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d118      	bne.n	800220a <DCMI_DMAXferCplt+0x62>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	00da      	lsls	r2, r3, #3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	f003 fa2d 	bl	8005658 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	639a      	str	r2, [r3, #56]	@ 0x38
 8002208:	e044      	b.n	8002294 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d13c      	bne.n	8002294 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	00da      	lsls	r2, r3, #3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	2201      	movs	r2, #1
 8002234:	4619      	mov	r1, r3
 8002236:	f003 fa0f 	bl	8005658 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223e:	1e5a      	subs	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	639a      	str	r2, [r3, #56]	@ 0x38
 8002244:	e026      	b.n	8002294 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	e017      	b.n	8002294 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10f      	bne.n	8002294 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	440a      	add	r2, r1
 800228a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	429a      	cmp	r2, r3
 800229e:	d112      	bne.n	80022c6 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d103      	bne.n	80022c6 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022da:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d009      	beq.n	80022fa <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff ff2c 	bl	8002158 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff fb40 	bl	8001994 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e316      	b.n	800294e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a66      	ldr	r2, [pc, #408]	@ (80024c0 <HAL_DMA_Init+0x1b8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d04a      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a65      	ldr	r2, [pc, #404]	@ (80024c4 <HAL_DMA_Init+0x1bc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d045      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a63      	ldr	r2, [pc, #396]	@ (80024c8 <HAL_DMA_Init+0x1c0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d040      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a62      	ldr	r2, [pc, #392]	@ (80024cc <HAL_DMA_Init+0x1c4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d03b      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a60      	ldr	r2, [pc, #384]	@ (80024d0 <HAL_DMA_Init+0x1c8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5f      	ldr	r2, [pc, #380]	@ (80024d4 <HAL_DMA_Init+0x1cc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d031      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5d      	ldr	r2, [pc, #372]	@ (80024d8 <HAL_DMA_Init+0x1d0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02c      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5c      	ldr	r2, [pc, #368]	@ (80024dc <HAL_DMA_Init+0x1d4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d027      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5a      	ldr	r2, [pc, #360]	@ (80024e0 <HAL_DMA_Init+0x1d8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d022      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a59      	ldr	r2, [pc, #356]	@ (80024e4 <HAL_DMA_Init+0x1dc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d01d      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a57      	ldr	r2, [pc, #348]	@ (80024e8 <HAL_DMA_Init+0x1e0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d018      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a56      	ldr	r2, [pc, #344]	@ (80024ec <HAL_DMA_Init+0x1e4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_DMA_Init+0x1e8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00e      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a53      	ldr	r2, [pc, #332]	@ (80024f4 <HAL_DMA_Init+0x1ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a51      	ldr	r2, [pc, #324]	@ (80024f8 <HAL_DMA_Init+0x1f0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_Init+0xb8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a50      	ldr	r2, [pc, #320]	@ (80024fc <HAL_DMA_Init+0x1f4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0xbc>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_Init+0xbe>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 813b 	beq.w	8002642 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a37      	ldr	r2, [pc, #220]	@ (80024c0 <HAL_DMA_Init+0x1b8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d04a      	beq.n	800247c <HAL_DMA_Init+0x174>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a36      	ldr	r2, [pc, #216]	@ (80024c4 <HAL_DMA_Init+0x1bc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d045      	beq.n	800247c <HAL_DMA_Init+0x174>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a34      	ldr	r2, [pc, #208]	@ (80024c8 <HAL_DMA_Init+0x1c0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d040      	beq.n	800247c <HAL_DMA_Init+0x174>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a33      	ldr	r2, [pc, #204]	@ (80024cc <HAL_DMA_Init+0x1c4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d03b      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a31      	ldr	r2, [pc, #196]	@ (80024d0 <HAL_DMA_Init+0x1c8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d036      	beq.n	800247c <HAL_DMA_Init+0x174>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a30      	ldr	r2, [pc, #192]	@ (80024d4 <HAL_DMA_Init+0x1cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d031      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2e      	ldr	r2, [pc, #184]	@ (80024d8 <HAL_DMA_Init+0x1d0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d02c      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a2d      	ldr	r2, [pc, #180]	@ (80024dc <HAL_DMA_Init+0x1d4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d027      	beq.n	800247c <HAL_DMA_Init+0x174>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2b      	ldr	r2, [pc, #172]	@ (80024e0 <HAL_DMA_Init+0x1d8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d022      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2a      	ldr	r2, [pc, #168]	@ (80024e4 <HAL_DMA_Init+0x1dc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d01d      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <HAL_DMA_Init+0x1e0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d018      	beq.n	800247c <HAL_DMA_Init+0x174>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a27      	ldr	r2, [pc, #156]	@ (80024ec <HAL_DMA_Init+0x1e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a25      	ldr	r2, [pc, #148]	@ (80024f0 <HAL_DMA_Init+0x1e8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00e      	beq.n	800247c <HAL_DMA_Init+0x174>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a24      	ldr	r2, [pc, #144]	@ (80024f4 <HAL_DMA_Init+0x1ec>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a22      	ldr	r2, [pc, #136]	@ (80024f8 <HAL_DMA_Init+0x1f0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_DMA_Init+0x174>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <HAL_DMA_Init+0x1f4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d108      	bne.n	800248e <HAL_DMA_Init+0x186>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_DMA_Init+0x196>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800249e:	e02f      	b.n	8002500 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a0:	f7ff fa78 	bl	8001994 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d928      	bls.n	8002500 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e246      	b.n	800294e <HAL_DMA_Init+0x646>
 80024c0:	40020010 	.word	0x40020010
 80024c4:	40020028 	.word	0x40020028
 80024c8:	40020040 	.word	0x40020040
 80024cc:	40020058 	.word	0x40020058
 80024d0:	40020070 	.word	0x40020070
 80024d4:	40020088 	.word	0x40020088
 80024d8:	400200a0 	.word	0x400200a0
 80024dc:	400200b8 	.word	0x400200b8
 80024e0:	40020410 	.word	0x40020410
 80024e4:	40020428 	.word	0x40020428
 80024e8:	40020440 	.word	0x40020440
 80024ec:	40020458 	.word	0x40020458
 80024f0:	40020470 	.word	0x40020470
 80024f4:	40020488 	.word	0x40020488
 80024f8:	400204a0 	.word	0x400204a0
 80024fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1c8      	bne.n	80024a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4b83      	ldr	r3, [pc, #524]	@ (8002728 <HAL_DMA_Init+0x420>)
 800251a:	4013      	ands	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002526:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	4313      	orrs	r3, r2
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002564:	4b71      	ldr	r3, [pc, #452]	@ (800272c <HAL_DMA_Init+0x424>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b71      	ldr	r3, [pc, #452]	@ (8002730 <HAL_DMA_Init+0x428>)
 800256a:	4013      	ands	r3, r2
 800256c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002570:	d328      	bcc.n	80025c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b28      	cmp	r3, #40	@ 0x28
 8002578:	d903      	bls.n	8002582 <HAL_DMA_Init+0x27a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002580:	d917      	bls.n	80025b2 <HAL_DMA_Init+0x2aa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b3e      	cmp	r3, #62	@ 0x3e
 8002588:	d903      	bls.n	8002592 <HAL_DMA_Init+0x28a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b42      	cmp	r3, #66	@ 0x42
 8002590:	d90f      	bls.n	80025b2 <HAL_DMA_Init+0x2aa>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b46      	cmp	r3, #70	@ 0x46
 8002598:	d903      	bls.n	80025a2 <HAL_DMA_Init+0x29a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b48      	cmp	r3, #72	@ 0x48
 80025a0:	d907      	bls.n	80025b2 <HAL_DMA_Init+0x2aa>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80025a8:	d905      	bls.n	80025b6 <HAL_DMA_Init+0x2ae>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b52      	cmp	r3, #82	@ 0x52
 80025b0:	d801      	bhi.n	80025b6 <HAL_DMA_Init+0x2ae>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_Init+0x2b0>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d117      	bne.n	800261e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f002 fb41 	bl	8004c88 <DMA_CheckFifoParam>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	@ 0x40
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e197      	b.n	800294e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f002 fa7c 	bl	8004b24 <DMA_CalcBaseAndBitshift>
 800262c:	4603      	mov	r3, r0
 800262e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	223f      	movs	r2, #63	@ 0x3f
 800263a:	409a      	lsls	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e0cd      	b.n	80027de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a3b      	ldr	r2, [pc, #236]	@ (8002734 <HAL_DMA_Init+0x42c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a39      	ldr	r2, [pc, #228]	@ (8002738 <HAL_DMA_Init+0x430>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a38      	ldr	r2, [pc, #224]	@ (800273c <HAL_DMA_Init+0x434>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a36      	ldr	r2, [pc, #216]	@ (8002740 <HAL_DMA_Init+0x438>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a35      	ldr	r2, [pc, #212]	@ (8002744 <HAL_DMA_Init+0x43c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a33      	ldr	r2, [pc, #204]	@ (8002748 <HAL_DMA_Init+0x440>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a32      	ldr	r2, [pc, #200]	@ (800274c <HAL_DMA_Init+0x444>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_DMA_Init+0x38a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a30      	ldr	r2, [pc, #192]	@ (8002750 <HAL_DMA_Init+0x448>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_DMA_Init+0x38e>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_DMA_Init+0x390>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8097 	beq.w	80027cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a24      	ldr	r2, [pc, #144]	@ (8002734 <HAL_DMA_Init+0x42c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d021      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a22      	ldr	r2, [pc, #136]	@ (8002738 <HAL_DMA_Init+0x430>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01c      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a21      	ldr	r2, [pc, #132]	@ (800273c <HAL_DMA_Init+0x434>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d017      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <HAL_DMA_Init+0x438>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d012      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <HAL_DMA_Init+0x43c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00d      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_DMA_Init+0x440>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d008      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1b      	ldr	r2, [pc, #108]	@ (800274c <HAL_DMA_Init+0x444>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <HAL_DMA_Init+0x3e4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	@ (8002750 <HAL_DMA_Init+0x448>)
 80026ea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <HAL_DMA_Init+0x44c>)
 8002708:	4013      	ands	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b40      	cmp	r3, #64	@ 0x40
 8002712:	d021      	beq.n	8002758 <HAL_DMA_Init+0x450>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b80      	cmp	r3, #128	@ 0x80
 800271a:	d102      	bne.n	8002722 <HAL_DMA_Init+0x41a>
 800271c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002720:	e01b      	b.n	800275a <HAL_DMA_Init+0x452>
 8002722:	2300      	movs	r3, #0
 8002724:	e019      	b.n	800275a <HAL_DMA_Init+0x452>
 8002726:	bf00      	nop
 8002728:	fe10803f 	.word	0xfe10803f
 800272c:	5c001000 	.word	0x5c001000
 8002730:	ffff0000 	.word	0xffff0000
 8002734:	58025408 	.word	0x58025408
 8002738:	5802541c 	.word	0x5802541c
 800273c:	58025430 	.word	0x58025430
 8002740:	58025444 	.word	0x58025444
 8002744:	58025458 	.word	0x58025458
 8002748:	5802546c 	.word	0x5802546c
 800274c:	58025480 	.word	0x58025480
 8002750:	58025494 	.word	0x58025494
 8002754:	fffe000f 	.word	0xfffe000f
 8002758:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002760:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002768:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002770:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002788:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b6e      	ldr	r3, [pc, #440]	@ (8002958 <HAL_DMA_Init+0x650>)
 80027a0:	4413      	add	r3, r2
 80027a2:	4a6e      	ldr	r2, [pc, #440]	@ (800295c <HAL_DMA_Init+0x654>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	009a      	lsls	r2, r3, #2
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f002 f9b7 	bl	8004b24 <DMA_CalcBaseAndBitshift>
 80027b6:	4603      	mov	r3, r0
 80027b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	2201      	movs	r2, #1
 80027c4:	409a      	lsls	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	e008      	b.n	80027de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0b7      	b.n	800294e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_DMA_Init+0x658>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d072      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002964 <HAL_DMA_Init+0x65c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d06d      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002968 <HAL_DMA_Init+0x660>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d068      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5a      	ldr	r2, [pc, #360]	@ (800296c <HAL_DMA_Init+0x664>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d063      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a59      	ldr	r2, [pc, #356]	@ (8002970 <HAL_DMA_Init+0x668>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d05e      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a57      	ldr	r2, [pc, #348]	@ (8002974 <HAL_DMA_Init+0x66c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d059      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_DMA_Init+0x670>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d054      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a54      	ldr	r2, [pc, #336]	@ (800297c <HAL_DMA_Init+0x674>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d04f      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a53      	ldr	r2, [pc, #332]	@ (8002980 <HAL_DMA_Init+0x678>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d04a      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a51      	ldr	r2, [pc, #324]	@ (8002984 <HAL_DMA_Init+0x67c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d045      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a50      	ldr	r2, [pc, #320]	@ (8002988 <HAL_DMA_Init+0x680>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d040      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a4e      	ldr	r2, [pc, #312]	@ (800298c <HAL_DMA_Init+0x684>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d03b      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a4d      	ldr	r2, [pc, #308]	@ (8002990 <HAL_DMA_Init+0x688>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d036      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4b      	ldr	r2, [pc, #300]	@ (8002994 <HAL_DMA_Init+0x68c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d031      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a4a      	ldr	r2, [pc, #296]	@ (8002998 <HAL_DMA_Init+0x690>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d02c      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a48      	ldr	r2, [pc, #288]	@ (800299c <HAL_DMA_Init+0x694>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d027      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a47      	ldr	r2, [pc, #284]	@ (80029a0 <HAL_DMA_Init+0x698>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a45      	ldr	r2, [pc, #276]	@ (80029a4 <HAL_DMA_Init+0x69c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01d      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a44      	ldr	r2, [pc, #272]	@ (80029a8 <HAL_DMA_Init+0x6a0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d018      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a42      	ldr	r2, [pc, #264]	@ (80029ac <HAL_DMA_Init+0x6a4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a41      	ldr	r2, [pc, #260]	@ (80029b0 <HAL_DMA_Init+0x6a8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00e      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3f      	ldr	r2, [pc, #252]	@ (80029b4 <HAL_DMA_Init+0x6ac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3e      	ldr	r2, [pc, #248]	@ (80029b8 <HAL_DMA_Init+0x6b0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d004      	beq.n	80028ce <HAL_DMA_Init+0x5c6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3c      	ldr	r2, [pc, #240]	@ (80029bc <HAL_DMA_Init+0x6b4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA_Init+0x5ca>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_DMA_Init+0x5cc>
 80028d2:	2300      	movs	r3, #0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d032      	beq.n	800293e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f002 fa51 	bl	8004d80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b80      	cmp	r3, #128	@ 0x80
 80028e4:	d102      	bne.n	80028ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002900:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d010      	beq.n	800292c <HAL_DMA_Init+0x624>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d80c      	bhi.n	800292c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f002 face 	bl	8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	e008      	b.n	800293e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	a7fdabf8 	.word	0xa7fdabf8
 800295c:	cccccccd 	.word	0xcccccccd
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8
 80029a0:	58025408 	.word	0x58025408
 80029a4:	5802541c 	.word	0x5802541c
 80029a8:	58025430 	.word	0x58025430
 80029ac:	58025444 	.word	0x58025444
 80029b0:	58025458 	.word	0x58025458
 80029b4:	5802546c 	.word	0x5802546c
 80029b8:	58025480 	.word	0x58025480
 80029bc:	58025494 	.word	0x58025494

080029c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e226      	b.n	8002e2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_DMA_Start_IT+0x2a>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e21f      	b.n	8002e2a <HAL_DMA_Start_IT+0x46a>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f040 820a 	bne.w	8002e14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a68      	ldr	r2, [pc, #416]	@ (8002bb4 <HAL_DMA_Start_IT+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d04a      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a66      	ldr	r2, [pc, #408]	@ (8002bb8 <HAL_DMA_Start_IT+0x1f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d045      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a65      	ldr	r2, [pc, #404]	@ (8002bbc <HAL_DMA_Start_IT+0x1fc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d040      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a63      	ldr	r2, [pc, #396]	@ (8002bc0 <HAL_DMA_Start_IT+0x200>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d03b      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a62      	ldr	r2, [pc, #392]	@ (8002bc4 <HAL_DMA_Start_IT+0x204>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d036      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a60      	ldr	r2, [pc, #384]	@ (8002bc8 <HAL_DMA_Start_IT+0x208>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bcc <HAL_DMA_Start_IT+0x20c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d02c      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd0 <HAL_DMA_Start_IT+0x210>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d027      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <HAL_DMA_Start_IT+0x214>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd8 <HAL_DMA_Start_IT+0x218>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01d      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a59      	ldr	r2, [pc, #356]	@ (8002bdc <HAL_DMA_Start_IT+0x21c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_DMA_Start_IT+0x220>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a56      	ldr	r2, [pc, #344]	@ (8002be4 <HAL_DMA_Start_IT+0x224>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00e      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a54      	ldr	r2, [pc, #336]	@ (8002be8 <HAL_DMA_Start_IT+0x228>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a53      	ldr	r2, [pc, #332]	@ (8002bec <HAL_DMA_Start_IT+0x22c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_Start_IT+0xee>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a51      	ldr	r2, [pc, #324]	@ (8002bf0 <HAL_DMA_Start_IT+0x230>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <HAL_DMA_Start_IT+0x100>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e007      	b.n	8002ad0 <HAL_DMA_Start_IT+0x110>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f001 fe78 	bl	80047cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a34      	ldr	r2, [pc, #208]	@ (8002bb4 <HAL_DMA_Start_IT+0x1f4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d04a      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a33      	ldr	r2, [pc, #204]	@ (8002bb8 <HAL_DMA_Start_IT+0x1f8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d045      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <HAL_DMA_Start_IT+0x1fc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d040      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a30      	ldr	r2, [pc, #192]	@ (8002bc0 <HAL_DMA_Start_IT+0x200>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d03b      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc4 <HAL_DMA_Start_IT+0x204>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d036      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc8 <HAL_DMA_Start_IT+0x208>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d031      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bcc <HAL_DMA_Start_IT+0x20c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02c      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd0 <HAL_DMA_Start_IT+0x210>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d027      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a28      	ldr	r2, [pc, #160]	@ (8002bd4 <HAL_DMA_Start_IT+0x214>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d022      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	@ (8002bd8 <HAL_DMA_Start_IT+0x218>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d01d      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a25      	ldr	r2, [pc, #148]	@ (8002bdc <HAL_DMA_Start_IT+0x21c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d018      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a24      	ldr	r2, [pc, #144]	@ (8002be0 <HAL_DMA_Start_IT+0x220>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <HAL_DMA_Start_IT+0x224>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00e      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a21      	ldr	r2, [pc, #132]	@ (8002be8 <HAL_DMA_Start_IT+0x228>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <HAL_DMA_Start_IT+0x22c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_DMA_Start_IT+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf0 <HAL_DMA_Start_IT+0x230>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d101      	bne.n	8002b80 <HAL_DMA_Start_IT+0x1c0>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_DMA_Start_IT+0x1c2>
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d036      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 021e 	bic.w	r2, r3, #30
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0216 	orr.w	r2, r2, #22
 8002b98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03e      	beq.n	8002c20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e035      	b.n	8002c20 <HAL_DMA_Start_IT+0x260>
 8002bb4:	40020010 	.word	0x40020010
 8002bb8:	40020028 	.word	0x40020028
 8002bbc:	40020040 	.word	0x40020040
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	40020070 	.word	0x40020070
 8002bc8:	40020088 	.word	0x40020088
 8002bcc:	400200a0 	.word	0x400200a0
 8002bd0:	400200b8 	.word	0x400200b8
 8002bd4:	40020410 	.word	0x40020410
 8002bd8:	40020428 	.word	0x40020428
 8002bdc:	40020440 	.word	0x40020440
 8002be0:	40020458 	.word	0x40020458
 8002be4:	40020470 	.word	0x40020470
 8002be8:	40020488 	.word	0x40020488
 8002bec:	400204a0 	.word	0x400204a0
 8002bf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 020e 	bic.w	r2, r3, #14
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 020a 	orr.w	r2, r2, #10
 8002c06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0204 	orr.w	r2, r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a83      	ldr	r2, [pc, #524]	@ (8002e34 <HAL_DMA_Start_IT+0x474>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d072      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a82      	ldr	r2, [pc, #520]	@ (8002e38 <HAL_DMA_Start_IT+0x478>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d06d      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a80      	ldr	r2, [pc, #512]	@ (8002e3c <HAL_DMA_Start_IT+0x47c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d068      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7f      	ldr	r2, [pc, #508]	@ (8002e40 <HAL_DMA_Start_IT+0x480>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d063      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e44 <HAL_DMA_Start_IT+0x484>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d05e      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7c      	ldr	r2, [pc, #496]	@ (8002e48 <HAL_DMA_Start_IT+0x488>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d059      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7a      	ldr	r2, [pc, #488]	@ (8002e4c <HAL_DMA_Start_IT+0x48c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d054      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a79      	ldr	r2, [pc, #484]	@ (8002e50 <HAL_DMA_Start_IT+0x490>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d04f      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a77      	ldr	r2, [pc, #476]	@ (8002e54 <HAL_DMA_Start_IT+0x494>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d04a      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a76      	ldr	r2, [pc, #472]	@ (8002e58 <HAL_DMA_Start_IT+0x498>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d045      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	@ (8002e5c <HAL_DMA_Start_IT+0x49c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d040      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	@ (8002e60 <HAL_DMA_Start_IT+0x4a0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d03b      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a71      	ldr	r2, [pc, #452]	@ (8002e64 <HAL_DMA_Start_IT+0x4a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d036      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	@ (8002e68 <HAL_DMA_Start_IT+0x4a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d031      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e6c <HAL_DMA_Start_IT+0x4ac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02c      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6d      	ldr	r2, [pc, #436]	@ (8002e70 <HAL_DMA_Start_IT+0x4b0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d027      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e74 <HAL_DMA_Start_IT+0x4b4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6a      	ldr	r2, [pc, #424]	@ (8002e78 <HAL_DMA_Start_IT+0x4b8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01d      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a68      	ldr	r2, [pc, #416]	@ (8002e7c <HAL_DMA_Start_IT+0x4bc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a67      	ldr	r2, [pc, #412]	@ (8002e80 <HAL_DMA_Start_IT+0x4c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a65      	ldr	r2, [pc, #404]	@ (8002e84 <HAL_DMA_Start_IT+0x4c4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a64      	ldr	r2, [pc, #400]	@ (8002e88 <HAL_DMA_Start_IT+0x4c8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a62      	ldr	r2, [pc, #392]	@ (8002e8c <HAL_DMA_Start_IT+0x4cc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_DMA_Start_IT+0x350>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a61      	ldr	r2, [pc, #388]	@ (8002e90 <HAL_DMA_Start_IT+0x4d0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Start_IT+0x354>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_Start_IT+0x356>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d01a      	beq.n	8002d50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a37      	ldr	r2, [pc, #220]	@ (8002e34 <HAL_DMA_Start_IT+0x474>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a36      	ldr	r2, [pc, #216]	@ (8002e38 <HAL_DMA_Start_IT+0x478>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a34      	ldr	r2, [pc, #208]	@ (8002e3c <HAL_DMA_Start_IT+0x47c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a33      	ldr	r2, [pc, #204]	@ (8002e40 <HAL_DMA_Start_IT+0x480>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a31      	ldr	r2, [pc, #196]	@ (8002e44 <HAL_DMA_Start_IT+0x484>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a30      	ldr	r2, [pc, #192]	@ (8002e48 <HAL_DMA_Start_IT+0x488>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2e      	ldr	r2, [pc, #184]	@ (8002e4c <HAL_DMA_Start_IT+0x48c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e50 <HAL_DMA_Start_IT+0x490>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <HAL_DMA_Start_IT+0x494>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <HAL_DMA_Start_IT+0x498>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a28      	ldr	r2, [pc, #160]	@ (8002e5c <HAL_DMA_Start_IT+0x49c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a27      	ldr	r2, [pc, #156]	@ (8002e60 <HAL_DMA_Start_IT+0x4a0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	@ (8002e64 <HAL_DMA_Start_IT+0x4a4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	@ (8002e68 <HAL_DMA_Start_IT+0x4a8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <HAL_DMA_Start_IT+0x4ac>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_DMA_Start_IT+0x430>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <HAL_DMA_Start_IT+0x4b0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <HAL_DMA_Start_IT+0x442>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e012      	b.n	8002e28 <HAL_DMA_Start_IT+0x468>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e009      	b.n	8002e28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40020010 	.word	0x40020010
 8002e38:	40020028 	.word	0x40020028
 8002e3c:	40020040 	.word	0x40020040
 8002e40:	40020058 	.word	0x40020058
 8002e44:	40020070 	.word	0x40020070
 8002e48:	40020088 	.word	0x40020088
 8002e4c:	400200a0 	.word	0x400200a0
 8002e50:	400200b8 	.word	0x400200b8
 8002e54:	40020410 	.word	0x40020410
 8002e58:	40020428 	.word	0x40020428
 8002e5c:	40020440 	.word	0x40020440
 8002e60:	40020458 	.word	0x40020458
 8002e64:	40020470 	.word	0x40020470
 8002e68:	40020488 	.word	0x40020488
 8002e6c:	400204a0 	.word	0x400204a0
 8002e70:	400204b8 	.word	0x400204b8
 8002e74:	58025408 	.word	0x58025408
 8002e78:	5802541c 	.word	0x5802541c
 8002e7c:	58025430 	.word	0x58025430
 8002e80:	58025444 	.word	0x58025444
 8002e84:	58025458 	.word	0x58025458
 8002e88:	5802546c 	.word	0x5802546c
 8002e8c:	58025480 	.word	0x58025480
 8002e90:	58025494 	.word	0x58025494

08002e94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7fe fd7a 	bl	8001994 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e2dc      	b.n	8003466 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d008      	beq.n	8002eca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e2cd      	b.n	8003466 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a76      	ldr	r2, [pc, #472]	@ (80030a8 <HAL_DMA_Abort+0x214>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d04a      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a74      	ldr	r2, [pc, #464]	@ (80030ac <HAL_DMA_Abort+0x218>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d045      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a73      	ldr	r2, [pc, #460]	@ (80030b0 <HAL_DMA_Abort+0x21c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d040      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a71      	ldr	r2, [pc, #452]	@ (80030b4 <HAL_DMA_Abort+0x220>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d03b      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a70      	ldr	r2, [pc, #448]	@ (80030b8 <HAL_DMA_Abort+0x224>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d036      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_DMA_Abort+0x228>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d031      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80030c0 <HAL_DMA_Abort+0x22c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d02c      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6b      	ldr	r2, [pc, #428]	@ (80030c4 <HAL_DMA_Abort+0x230>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d027      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80030c8 <HAL_DMA_Abort+0x234>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a68      	ldr	r2, [pc, #416]	@ (80030cc <HAL_DMA_Abort+0x238>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a67      	ldr	r2, [pc, #412]	@ (80030d0 <HAL_DMA_Abort+0x23c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a65      	ldr	r2, [pc, #404]	@ (80030d4 <HAL_DMA_Abort+0x240>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a64      	ldr	r2, [pc, #400]	@ (80030d8 <HAL_DMA_Abort+0x244>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a62      	ldr	r2, [pc, #392]	@ (80030dc <HAL_DMA_Abort+0x248>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a61      	ldr	r2, [pc, #388]	@ (80030e0 <HAL_DMA_Abort+0x24c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_DMA_Abort+0xd6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5f      	ldr	r2, [pc, #380]	@ (80030e4 <HAL_DMA_Abort+0x250>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_DMA_Abort+0xda>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_Abort+0xdc>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 021e 	bic.w	r2, r2, #30
 8002f82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e00a      	b.n	8002fb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 020e 	bic.w	r2, r2, #14
 8002faa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80030a8 <HAL_DMA_Abort+0x214>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d072      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <HAL_DMA_Abort+0x218>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d06d      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a39      	ldr	r2, [pc, #228]	@ (80030b0 <HAL_DMA_Abort+0x21c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d068      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <HAL_DMA_Abort+0x220>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d063      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a36      	ldr	r2, [pc, #216]	@ (80030b8 <HAL_DMA_Abort+0x224>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d05e      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a34      	ldr	r2, [pc, #208]	@ (80030bc <HAL_DMA_Abort+0x228>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d059      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a33      	ldr	r2, [pc, #204]	@ (80030c0 <HAL_DMA_Abort+0x22c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d054      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a31      	ldr	r2, [pc, #196]	@ (80030c4 <HAL_DMA_Abort+0x230>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d04f      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a30      	ldr	r2, [pc, #192]	@ (80030c8 <HAL_DMA_Abort+0x234>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d04a      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a2e      	ldr	r2, [pc, #184]	@ (80030cc <HAL_DMA_Abort+0x238>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d045      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a2d      	ldr	r2, [pc, #180]	@ (80030d0 <HAL_DMA_Abort+0x23c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d040      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2b      	ldr	r2, [pc, #172]	@ (80030d4 <HAL_DMA_Abort+0x240>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d03b      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2a      	ldr	r2, [pc, #168]	@ (80030d8 <HAL_DMA_Abort+0x244>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d036      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	@ (80030dc <HAL_DMA_Abort+0x248>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d031      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a27      	ldr	r2, [pc, #156]	@ (80030e0 <HAL_DMA_Abort+0x24c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d02c      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a25      	ldr	r2, [pc, #148]	@ (80030e4 <HAL_DMA_Abort+0x250>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d027      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a24      	ldr	r2, [pc, #144]	@ (80030e8 <HAL_DMA_Abort+0x254>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d022      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <HAL_DMA_Abort+0x258>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01d      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a21      	ldr	r2, [pc, #132]	@ (80030f0 <HAL_DMA_Abort+0x25c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d018      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1f      	ldr	r2, [pc, #124]	@ (80030f4 <HAL_DMA_Abort+0x260>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <HAL_DMA_Abort+0x264>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1c      	ldr	r2, [pc, #112]	@ (80030fc <HAL_DMA_Abort+0x268>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	@ (8003100 <HAL_DMA_Abort+0x26c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_DMA_Abort+0x20e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a19      	ldr	r2, [pc, #100]	@ (8003104 <HAL_DMA_Abort+0x270>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d132      	bne.n	8003108 <HAL_DMA_Abort+0x274>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e031      	b.n	800310a <HAL_DMA_Abort+0x276>
 80030a6:	bf00      	nop
 80030a8:	40020010 	.word	0x40020010
 80030ac:	40020028 	.word	0x40020028
 80030b0:	40020040 	.word	0x40020040
 80030b4:	40020058 	.word	0x40020058
 80030b8:	40020070 	.word	0x40020070
 80030bc:	40020088 	.word	0x40020088
 80030c0:	400200a0 	.word	0x400200a0
 80030c4:	400200b8 	.word	0x400200b8
 80030c8:	40020410 	.word	0x40020410
 80030cc:	40020428 	.word	0x40020428
 80030d0:	40020440 	.word	0x40020440
 80030d4:	40020458 	.word	0x40020458
 80030d8:	40020470 	.word	0x40020470
 80030dc:	40020488 	.word	0x40020488
 80030e0:	400204a0 	.word	0x400204a0
 80030e4:	400204b8 	.word	0x400204b8
 80030e8:	58025408 	.word	0x58025408
 80030ec:	5802541c 	.word	0x5802541c
 80030f0:	58025430 	.word	0x58025430
 80030f4:	58025444 	.word	0x58025444
 80030f8:	58025458 	.word	0x58025458
 80030fc:	5802546c 	.word	0x5802546c
 8003100:	58025480 	.word	0x58025480
 8003104:	58025494 	.word	0x58025494
 8003108:	2300      	movs	r3, #0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800311c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6d      	ldr	r2, [pc, #436]	@ (80032d8 <HAL_DMA_Abort+0x444>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d04a      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6b      	ldr	r2, [pc, #428]	@ (80032dc <HAL_DMA_Abort+0x448>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d045      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6a      	ldr	r2, [pc, #424]	@ (80032e0 <HAL_DMA_Abort+0x44c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d040      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	@ (80032e4 <HAL_DMA_Abort+0x450>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d03b      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a67      	ldr	r2, [pc, #412]	@ (80032e8 <HAL_DMA_Abort+0x454>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d036      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a65      	ldr	r2, [pc, #404]	@ (80032ec <HAL_DMA_Abort+0x458>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d031      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a64      	ldr	r2, [pc, #400]	@ (80032f0 <HAL_DMA_Abort+0x45c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d02c      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a62      	ldr	r2, [pc, #392]	@ (80032f4 <HAL_DMA_Abort+0x460>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d027      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a61      	ldr	r2, [pc, #388]	@ (80032f8 <HAL_DMA_Abort+0x464>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d022      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5f      	ldr	r2, [pc, #380]	@ (80032fc <HAL_DMA_Abort+0x468>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d01d      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5e      	ldr	r2, [pc, #376]	@ (8003300 <HAL_DMA_Abort+0x46c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d018      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a5c      	ldr	r2, [pc, #368]	@ (8003304 <HAL_DMA_Abort+0x470>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5b      	ldr	r2, [pc, #364]	@ (8003308 <HAL_DMA_Abort+0x474>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a59      	ldr	r2, [pc, #356]	@ (800330c <HAL_DMA_Abort+0x478>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d009      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a58      	ldr	r2, [pc, #352]	@ (8003310 <HAL_DMA_Abort+0x47c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_DMA_Abort+0x32a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a56      	ldr	r2, [pc, #344]	@ (8003314 <HAL_DMA_Abort+0x480>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <HAL_DMA_Abort+0x33c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e007      	b.n	80031e0 <HAL_DMA_Abort+0x34c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031e0:	e013      	b.n	800320a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e2:	f7fe fbd7 	bl	8001994 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d90c      	bls.n	800320a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2203      	movs	r2, #3
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e12d      	b.n	8003466 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2f      	ldr	r2, [pc, #188]	@ (80032d8 <HAL_DMA_Abort+0x444>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04a      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2d      	ldr	r2, [pc, #180]	@ (80032dc <HAL_DMA_Abort+0x448>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d045      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2c      	ldr	r2, [pc, #176]	@ (80032e0 <HAL_DMA_Abort+0x44c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d040      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2a      	ldr	r2, [pc, #168]	@ (80032e4 <HAL_DMA_Abort+0x450>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03b      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a29      	ldr	r2, [pc, #164]	@ (80032e8 <HAL_DMA_Abort+0x454>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d036      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a27      	ldr	r2, [pc, #156]	@ (80032ec <HAL_DMA_Abort+0x458>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d031      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a26      	ldr	r2, [pc, #152]	@ (80032f0 <HAL_DMA_Abort+0x45c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d02c      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a24      	ldr	r2, [pc, #144]	@ (80032f4 <HAL_DMA_Abort+0x460>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d027      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a23      	ldr	r2, [pc, #140]	@ (80032f8 <HAL_DMA_Abort+0x464>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a21      	ldr	r2, [pc, #132]	@ (80032fc <HAL_DMA_Abort+0x468>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a20      	ldr	r2, [pc, #128]	@ (8003300 <HAL_DMA_Abort+0x46c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1e      	ldr	r2, [pc, #120]	@ (8003304 <HAL_DMA_Abort+0x470>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <HAL_DMA_Abort+0x474>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1b      	ldr	r2, [pc, #108]	@ (800330c <HAL_DMA_Abort+0x478>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <HAL_DMA_Abort+0x47c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_Abort+0x422>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_DMA_Abort+0x480>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <HAL_DMA_Abort+0x426>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <HAL_DMA_Abort+0x428>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02b      	beq.n	8003318 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	223f      	movs	r2, #63	@ 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
 80032d6:	e02a      	b.n	800332e <HAL_DMA_Abort+0x49a>
 80032d8:	40020010 	.word	0x40020010
 80032dc:	40020028 	.word	0x40020028
 80032e0:	40020040 	.word	0x40020040
 80032e4:	40020058 	.word	0x40020058
 80032e8:	40020070 	.word	0x40020070
 80032ec:	40020088 	.word	0x40020088
 80032f0:	400200a0 	.word	0x400200a0
 80032f4:	400200b8 	.word	0x400200b8
 80032f8:	40020410 	.word	0x40020410
 80032fc:	40020428 	.word	0x40020428
 8003300:	40020440 	.word	0x40020440
 8003304:	40020458 	.word	0x40020458
 8003308:	40020470 	.word	0x40020470
 800330c:	40020488 	.word	0x40020488
 8003310:	400204a0 	.word	0x400204a0
 8003314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2201      	movs	r2, #1
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a4f      	ldr	r2, [pc, #316]	@ (8003470 <HAL_DMA_Abort+0x5dc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d072      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a4d      	ldr	r2, [pc, #308]	@ (8003474 <HAL_DMA_Abort+0x5e0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d06d      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a4c      	ldr	r2, [pc, #304]	@ (8003478 <HAL_DMA_Abort+0x5e4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d068      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a4a      	ldr	r2, [pc, #296]	@ (800347c <HAL_DMA_Abort+0x5e8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d063      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a49      	ldr	r2, [pc, #292]	@ (8003480 <HAL_DMA_Abort+0x5ec>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d05e      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a47      	ldr	r2, [pc, #284]	@ (8003484 <HAL_DMA_Abort+0x5f0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d059      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a46      	ldr	r2, [pc, #280]	@ (8003488 <HAL_DMA_Abort+0x5f4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d054      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a44      	ldr	r2, [pc, #272]	@ (800348c <HAL_DMA_Abort+0x5f8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d04f      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a43      	ldr	r2, [pc, #268]	@ (8003490 <HAL_DMA_Abort+0x5fc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04a      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a41      	ldr	r2, [pc, #260]	@ (8003494 <HAL_DMA_Abort+0x600>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d045      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a40      	ldr	r2, [pc, #256]	@ (8003498 <HAL_DMA_Abort+0x604>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d040      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3e      	ldr	r2, [pc, #248]	@ (800349c <HAL_DMA_Abort+0x608>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03b      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a3d      	ldr	r2, [pc, #244]	@ (80034a0 <HAL_DMA_Abort+0x60c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d036      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_DMA_Abort+0x610>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3a      	ldr	r2, [pc, #232]	@ (80034a8 <HAL_DMA_Abort+0x614>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d02c      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a38      	ldr	r2, [pc, #224]	@ (80034ac <HAL_DMA_Abort+0x618>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d027      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a37      	ldr	r2, [pc, #220]	@ (80034b0 <HAL_DMA_Abort+0x61c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a35      	ldr	r2, [pc, #212]	@ (80034b4 <HAL_DMA_Abort+0x620>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a34      	ldr	r2, [pc, #208]	@ (80034b8 <HAL_DMA_Abort+0x624>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d018      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a32      	ldr	r2, [pc, #200]	@ (80034bc <HAL_DMA_Abort+0x628>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <HAL_DMA_Abort+0x62c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2f      	ldr	r2, [pc, #188]	@ (80034c4 <HAL_DMA_Abort+0x630>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2e      	ldr	r2, [pc, #184]	@ (80034c8 <HAL_DMA_Abort+0x634>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_DMA_Abort+0x58a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2c      	ldr	r2, [pc, #176]	@ (80034cc <HAL_DMA_Abort+0x638>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_DMA_Abort+0x58e>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_DMA_Abort+0x590>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003430:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003444:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003448:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003452:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40020010 	.word	0x40020010
 8003474:	40020028 	.word	0x40020028
 8003478:	40020040 	.word	0x40020040
 800347c:	40020058 	.word	0x40020058
 8003480:	40020070 	.word	0x40020070
 8003484:	40020088 	.word	0x40020088
 8003488:	400200a0 	.word	0x400200a0
 800348c:	400200b8 	.word	0x400200b8
 8003490:	40020410 	.word	0x40020410
 8003494:	40020428 	.word	0x40020428
 8003498:	40020440 	.word	0x40020440
 800349c:	40020458 	.word	0x40020458
 80034a0:	40020470 	.word	0x40020470
 80034a4:	40020488 	.word	0x40020488
 80034a8:	400204a0 	.word	0x400204a0
 80034ac:	400204b8 	.word	0x400204b8
 80034b0:	58025408 	.word	0x58025408
 80034b4:	5802541c 	.word	0x5802541c
 80034b8:	58025430 	.word	0x58025430
 80034bc:	58025444 	.word	0x58025444
 80034c0:	58025458 	.word	0x58025458
 80034c4:	5802546c 	.word	0x5802546c
 80034c8:	58025480 	.word	0x58025480
 80034cc:	58025494 	.word	0x58025494

080034d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e237      	b.n	8003952 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e22c      	b.n	8003952 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a5c      	ldr	r2, [pc, #368]	@ (8003670 <HAL_DMA_Abort_IT+0x1a0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d04a      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a5b      	ldr	r2, [pc, #364]	@ (8003674 <HAL_DMA_Abort_IT+0x1a4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d045      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a59      	ldr	r2, [pc, #356]	@ (8003678 <HAL_DMA_Abort_IT+0x1a8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d040      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a58      	ldr	r2, [pc, #352]	@ (800367c <HAL_DMA_Abort_IT+0x1ac>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d03b      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a56      	ldr	r2, [pc, #344]	@ (8003680 <HAL_DMA_Abort_IT+0x1b0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d036      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a55      	ldr	r2, [pc, #340]	@ (8003684 <HAL_DMA_Abort_IT+0x1b4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d031      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a53      	ldr	r2, [pc, #332]	@ (8003688 <HAL_DMA_Abort_IT+0x1b8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d02c      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a52      	ldr	r2, [pc, #328]	@ (800368c <HAL_DMA_Abort_IT+0x1bc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d027      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a50      	ldr	r2, [pc, #320]	@ (8003690 <HAL_DMA_Abort_IT+0x1c0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d022      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4f      	ldr	r2, [pc, #316]	@ (8003694 <HAL_DMA_Abort_IT+0x1c4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a4d      	ldr	r2, [pc, #308]	@ (8003698 <HAL_DMA_Abort_IT+0x1c8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d018      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a4c      	ldr	r2, [pc, #304]	@ (800369c <HAL_DMA_Abort_IT+0x1cc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <HAL_DMA_Abort_IT+0x1d0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a49      	ldr	r2, [pc, #292]	@ (80036a4 <HAL_DMA_Abort_IT+0x1d4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a47      	ldr	r2, [pc, #284]	@ (80036a8 <HAL_DMA_Abort_IT+0x1d8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_DMA_Abort_IT+0xc8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a46      	ldr	r2, [pc, #280]	@ (80036ac <HAL_DMA_Abort_IT+0x1dc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_DMA_Abort_IT+0xcc>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_DMA_Abort_IT+0xce>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8086 	beq.w	80036b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2204      	movs	r2, #4
 80035a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003670 <HAL_DMA_Abort_IT+0x1a0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04a      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003674 <HAL_DMA_Abort_IT+0x1a4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d045      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003678 <HAL_DMA_Abort_IT+0x1a8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d040      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2b      	ldr	r2, [pc, #172]	@ (800367c <HAL_DMA_Abort_IT+0x1ac>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d03b      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a29      	ldr	r2, [pc, #164]	@ (8003680 <HAL_DMA_Abort_IT+0x1b0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d036      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a28      	ldr	r2, [pc, #160]	@ (8003684 <HAL_DMA_Abort_IT+0x1b4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d031      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a26      	ldr	r2, [pc, #152]	@ (8003688 <HAL_DMA_Abort_IT+0x1b8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02c      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a25      	ldr	r2, [pc, #148]	@ (800368c <HAL_DMA_Abort_IT+0x1bc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d027      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a23      	ldr	r2, [pc, #140]	@ (8003690 <HAL_DMA_Abort_IT+0x1c0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d022      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a22      	ldr	r2, [pc, #136]	@ (8003694 <HAL_DMA_Abort_IT+0x1c4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01d      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a20      	ldr	r2, [pc, #128]	@ (8003698 <HAL_DMA_Abort_IT+0x1c8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d018      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <HAL_DMA_Abort_IT+0x1cc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <HAL_DMA_Abort_IT+0x1d0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00e      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1c      	ldr	r2, [pc, #112]	@ (80036a4 <HAL_DMA_Abort_IT+0x1d4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <HAL_DMA_Abort_IT+0x1d8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_DMA_Abort_IT+0x17c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <HAL_DMA_Abort_IT+0x1dc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <HAL_DMA_Abort_IT+0x18e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e178      	b.n	8003950 <HAL_DMA_Abort_IT+0x480>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e16f      	b.n	8003950 <HAL_DMA_Abort_IT+0x480>
 8003670:	40020010 	.word	0x40020010
 8003674:	40020028 	.word	0x40020028
 8003678:	40020040 	.word	0x40020040
 800367c:	40020058 	.word	0x40020058
 8003680:	40020070 	.word	0x40020070
 8003684:	40020088 	.word	0x40020088
 8003688:	400200a0 	.word	0x400200a0
 800368c:	400200b8 	.word	0x400200b8
 8003690:	40020410 	.word	0x40020410
 8003694:	40020428 	.word	0x40020428
 8003698:	40020440 	.word	0x40020440
 800369c:	40020458 	.word	0x40020458
 80036a0:	40020470 	.word	0x40020470
 80036a4:	40020488 	.word	0x40020488
 80036a8:	400204a0 	.word	0x400204a0
 80036ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6c      	ldr	r2, [pc, #432]	@ (8003878 <HAL_DMA_Abort_IT+0x3a8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d04a      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6b      	ldr	r2, [pc, #428]	@ (800387c <HAL_DMA_Abort_IT+0x3ac>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d045      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a69      	ldr	r2, [pc, #420]	@ (8003880 <HAL_DMA_Abort_IT+0x3b0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d040      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a68      	ldr	r2, [pc, #416]	@ (8003884 <HAL_DMA_Abort_IT+0x3b4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d03b      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a66      	ldr	r2, [pc, #408]	@ (8003888 <HAL_DMA_Abort_IT+0x3b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d036      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a65      	ldr	r2, [pc, #404]	@ (800388c <HAL_DMA_Abort_IT+0x3bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d031      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a63      	ldr	r2, [pc, #396]	@ (8003890 <HAL_DMA_Abort_IT+0x3c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d02c      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a62      	ldr	r2, [pc, #392]	@ (8003894 <HAL_DMA_Abort_IT+0x3c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d027      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a60      	ldr	r2, [pc, #384]	@ (8003898 <HAL_DMA_Abort_IT+0x3c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d022      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5f      	ldr	r2, [pc, #380]	@ (800389c <HAL_DMA_Abort_IT+0x3cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d01d      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5d      	ldr	r2, [pc, #372]	@ (80038a0 <HAL_DMA_Abort_IT+0x3d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d018      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	@ (80038a4 <HAL_DMA_Abort_IT+0x3d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5a      	ldr	r2, [pc, #360]	@ (80038a8 <HAL_DMA_Abort_IT+0x3d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a59      	ldr	r2, [pc, #356]	@ (80038ac <HAL_DMA_Abort_IT+0x3dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a57      	ldr	r2, [pc, #348]	@ (80038b0 <HAL_DMA_Abort_IT+0x3e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_DMA_Abort_IT+0x290>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a56      	ldr	r2, [pc, #344]	@ (80038b4 <HAL_DMA_Abort_IT+0x3e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d108      	bne.n	8003772 <HAL_DMA_Abort_IT+0x2a2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e007      	b.n	8003782 <HAL_DMA_Abort_IT+0x2b2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <HAL_DMA_Abort_IT+0x3a8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d072      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3a      	ldr	r2, [pc, #232]	@ (800387c <HAL_DMA_Abort_IT+0x3ac>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d06d      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a39      	ldr	r2, [pc, #228]	@ (8003880 <HAL_DMA_Abort_IT+0x3b0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d068      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a37      	ldr	r2, [pc, #220]	@ (8003884 <HAL_DMA_Abort_IT+0x3b4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d063      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a36      	ldr	r2, [pc, #216]	@ (8003888 <HAL_DMA_Abort_IT+0x3b8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d05e      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a34      	ldr	r2, [pc, #208]	@ (800388c <HAL_DMA_Abort_IT+0x3bc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d059      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a33      	ldr	r2, [pc, #204]	@ (8003890 <HAL_DMA_Abort_IT+0x3c0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d054      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a31      	ldr	r2, [pc, #196]	@ (8003894 <HAL_DMA_Abort_IT+0x3c4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d04f      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a30      	ldr	r2, [pc, #192]	@ (8003898 <HAL_DMA_Abort_IT+0x3c8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <HAL_DMA_Abort_IT+0x3cc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2d      	ldr	r2, [pc, #180]	@ (80038a0 <HAL_DMA_Abort_IT+0x3d0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2b      	ldr	r2, [pc, #172]	@ (80038a4 <HAL_DMA_Abort_IT+0x3d4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2a      	ldr	r2, [pc, #168]	@ (80038a8 <HAL_DMA_Abort_IT+0x3d8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <HAL_DMA_Abort_IT+0x3dc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a27      	ldr	r2, [pc, #156]	@ (80038b0 <HAL_DMA_Abort_IT+0x3e0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a25      	ldr	r2, [pc, #148]	@ (80038b4 <HAL_DMA_Abort_IT+0x3e4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a24      	ldr	r2, [pc, #144]	@ (80038b8 <HAL_DMA_Abort_IT+0x3e8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_DMA_Abort_IT+0x3ec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a21      	ldr	r2, [pc, #132]	@ (80038c0 <HAL_DMA_Abort_IT+0x3f0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1f      	ldr	r2, [pc, #124]	@ (80038c4 <HAL_DMA_Abort_IT+0x3f4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1e      	ldr	r2, [pc, #120]	@ (80038c8 <HAL_DMA_Abort_IT+0x3f8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <HAL_DMA_Abort_IT+0x3fc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1b      	ldr	r2, [pc, #108]	@ (80038d0 <HAL_DMA_Abort_IT+0x400>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_Abort_IT+0x3a2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_DMA_Abort_IT+0x404>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d132      	bne.n	80038d8 <HAL_DMA_Abort_IT+0x408>
 8003872:	2301      	movs	r3, #1
 8003874:	e031      	b.n	80038da <HAL_DMA_Abort_IT+0x40a>
 8003876:	bf00      	nop
 8003878:	40020010 	.word	0x40020010
 800387c:	40020028 	.word	0x40020028
 8003880:	40020040 	.word	0x40020040
 8003884:	40020058 	.word	0x40020058
 8003888:	40020070 	.word	0x40020070
 800388c:	40020088 	.word	0x40020088
 8003890:	400200a0 	.word	0x400200a0
 8003894:	400200b8 	.word	0x400200b8
 8003898:	40020410 	.word	0x40020410
 800389c:	40020428 	.word	0x40020428
 80038a0:	40020440 	.word	0x40020440
 80038a4:	40020458 	.word	0x40020458
 80038a8:	40020470 	.word	0x40020470
 80038ac:	40020488 	.word	0x40020488
 80038b0:	400204a0 	.word	0x400204a0
 80038b4:	400204b8 	.word	0x400204b8
 80038b8:	58025408 	.word	0x58025408
 80038bc:	5802541c 	.word	0x5802541c
 80038c0:	58025430 	.word	0x58025430
 80038c4:	58025444 	.word	0x58025444
 80038c8:	58025458 	.word	0x58025458
 80038cc:	5802546c 	.word	0x5802546c
 80038d0:	58025480 	.word	0x58025480
 80038d4:	58025494 	.word	0x58025494
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d028      	beq.n	8003930 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800390c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003924:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800392e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop

0800395c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	@ 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003968:	4b67      	ldr	r3, [pc, #412]	@ (8003b08 <HAL_DMA_IRQHandler+0x1ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a67      	ldr	r2, [pc, #412]	@ (8003b0c <HAL_DMA_IRQHandler+0x1b0>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5f      	ldr	r2, [pc, #380]	@ (8003b10 <HAL_DMA_IRQHandler+0x1b4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d04a      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b14 <HAL_DMA_IRQHandler+0x1b8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d045      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b18 <HAL_DMA_IRQHandler+0x1bc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d040      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b1c <HAL_DMA_IRQHandler+0x1c0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d03b      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a59      	ldr	r2, [pc, #356]	@ (8003b20 <HAL_DMA_IRQHandler+0x1c4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d036      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a57      	ldr	r2, [pc, #348]	@ (8003b24 <HAL_DMA_IRQHandler+0x1c8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d031      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <HAL_DMA_IRQHandler+0x1cc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d02c      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a54      	ldr	r2, [pc, #336]	@ (8003b2c <HAL_DMA_IRQHandler+0x1d0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d027      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a53      	ldr	r2, [pc, #332]	@ (8003b30 <HAL_DMA_IRQHandler+0x1d4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a51      	ldr	r2, [pc, #324]	@ (8003b34 <HAL_DMA_IRQHandler+0x1d8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a50      	ldr	r2, [pc, #320]	@ (8003b38 <HAL_DMA_IRQHandler+0x1dc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4e      	ldr	r2, [pc, #312]	@ (8003b3c <HAL_DMA_IRQHandler+0x1e0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b40 <HAL_DMA_IRQHandler+0x1e4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	@ (8003b44 <HAL_DMA_IRQHandler+0x1e8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b48 <HAL_DMA_IRQHandler+0x1ec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xd2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a48      	ldr	r2, [pc, #288]	@ (8003b4c <HAL_DMA_IRQHandler+0x1f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_DMA_IRQHandler+0xd6>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_DMA_IRQHandler+0xd8>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 842b 	beq.w	8004290 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2208      	movs	r2, #8
 8003a44:	409a      	lsls	r2, r3
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 80a2 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	@ (8003b10 <HAL_DMA_IRQHandler+0x1b4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04a      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b14 <HAL_DMA_IRQHandler+0x1b8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d045      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2b      	ldr	r2, [pc, #172]	@ (8003b18 <HAL_DMA_IRQHandler+0x1bc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d040      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2a      	ldr	r2, [pc, #168]	@ (8003b1c <HAL_DMA_IRQHandler+0x1c0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d03b      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a28      	ldr	r2, [pc, #160]	@ (8003b20 <HAL_DMA_IRQHandler+0x1c4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d036      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <HAL_DMA_IRQHandler+0x1c8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a25      	ldr	r2, [pc, #148]	@ (8003b28 <HAL_DMA_IRQHandler+0x1cc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d02c      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a24      	ldr	r2, [pc, #144]	@ (8003b2c <HAL_DMA_IRQHandler+0x1d0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d027      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a22      	ldr	r2, [pc, #136]	@ (8003b30 <HAL_DMA_IRQHandler+0x1d4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d022      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a21      	ldr	r2, [pc, #132]	@ (8003b34 <HAL_DMA_IRQHandler+0x1d8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d01d      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b38 <HAL_DMA_IRQHandler+0x1dc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b3c <HAL_DMA_IRQHandler+0x1e0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b40 <HAL_DMA_IRQHandler+0x1e4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b44 <HAL_DMA_IRQHandler+0x1e8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	@ (8003b48 <HAL_DMA_IRQHandler+0x1ec>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x194>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <HAL_DMA_IRQHandler+0x1f0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d12f      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x1f4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e02e      	b.n	8003b64 <HAL_DMA_IRQHandler+0x208>
 8003b06:	bf00      	nop
 8003b08:	24000000 	.word	0x24000000
 8003b0c:	1b4e81b5 	.word	0x1b4e81b5
 8003b10:	40020010 	.word	0x40020010
 8003b14:	40020028 	.word	0x40020028
 8003b18:	40020040 	.word	0x40020040
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	40020070 	.word	0x40020070
 8003b24:	40020088 	.word	0x40020088
 8003b28:	400200a0 	.word	0x400200a0
 8003b2c:	400200b8 	.word	0x400200b8
 8003b30:	40020410 	.word	0x40020410
 8003b34:	40020428 	.word	0x40020428
 8003b38:	40020440 	.word	0x40020440
 8003b3c:	40020458 	.word	0x40020458
 8003b40:	40020470 	.word	0x40020470
 8003b44:	40020488 	.word	0x40020488
 8003b48:	400204a0 	.word	0x400204a0
 8003b4c:	400204b8 	.word	0x400204b8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d015      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	2208      	movs	r2, #8
 8003b82:	409a      	lsls	r2, r3
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06e      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a69      	ldr	r2, [pc, #420]	@ (8003d54 <HAL_DMA_IRQHandler+0x3f8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04a      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a67      	ldr	r2, [pc, #412]	@ (8003d58 <HAL_DMA_IRQHandler+0x3fc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d045      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a66      	ldr	r2, [pc, #408]	@ (8003d5c <HAL_DMA_IRQHandler+0x400>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d040      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a64      	ldr	r2, [pc, #400]	@ (8003d60 <HAL_DMA_IRQHandler+0x404>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d03b      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a63      	ldr	r2, [pc, #396]	@ (8003d64 <HAL_DMA_IRQHandler+0x408>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d036      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a61      	ldr	r2, [pc, #388]	@ (8003d68 <HAL_DMA_IRQHandler+0x40c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d031      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a60      	ldr	r2, [pc, #384]	@ (8003d6c <HAL_DMA_IRQHandler+0x410>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d02c      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a5e      	ldr	r2, [pc, #376]	@ (8003d70 <HAL_DMA_IRQHandler+0x414>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d027      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8003d74 <HAL_DMA_IRQHandler+0x418>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5b      	ldr	r2, [pc, #364]	@ (8003d78 <HAL_DMA_IRQHandler+0x41c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01d      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5a      	ldr	r2, [pc, #360]	@ (8003d7c <HAL_DMA_IRQHandler+0x420>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <HAL_DMA_IRQHandler+0x424>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a57      	ldr	r2, [pc, #348]	@ (8003d84 <HAL_DMA_IRQHandler+0x428>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a55      	ldr	r2, [pc, #340]	@ (8003d88 <HAL_DMA_IRQHandler+0x42c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a54      	ldr	r2, [pc, #336]	@ (8003d8c <HAL_DMA_IRQHandler+0x430>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2ee>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a52      	ldr	r2, [pc, #328]	@ (8003d90 <HAL_DMA_IRQHandler+0x434>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10a      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x304>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e003      	b.n	8003c68 <HAL_DMA_IRQHandler+0x30c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f043 0202 	orr.w	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2204      	movs	r2, #4
 8003c92:	409a      	lsls	r2, r3
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 808f 	beq.w	8003dbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <HAL_DMA_IRQHandler+0x3f8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04a      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2a      	ldr	r2, [pc, #168]	@ (8003d58 <HAL_DMA_IRQHandler+0x3fc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d045      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a29      	ldr	r2, [pc, #164]	@ (8003d5c <HAL_DMA_IRQHandler+0x400>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d040      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <HAL_DMA_IRQHandler+0x404>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d03b      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a26      	ldr	r2, [pc, #152]	@ (8003d64 <HAL_DMA_IRQHandler+0x408>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d036      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a24      	ldr	r2, [pc, #144]	@ (8003d68 <HAL_DMA_IRQHandler+0x40c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d031      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a23      	ldr	r2, [pc, #140]	@ (8003d6c <HAL_DMA_IRQHandler+0x410>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d02c      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	@ (8003d70 <HAL_DMA_IRQHandler+0x414>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d027      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	@ (8003d74 <HAL_DMA_IRQHandler+0x418>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <HAL_DMA_IRQHandler+0x41c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_DMA_IRQHandler+0x420>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <HAL_DMA_IRQHandler+0x424>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <HAL_DMA_IRQHandler+0x428>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a18      	ldr	r2, [pc, #96]	@ (8003d88 <HAL_DMA_IRQHandler+0x42c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	@ (8003d8c <HAL_DMA_IRQHandler+0x430>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x3e2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a15      	ldr	r2, [pc, #84]	@ (8003d90 <HAL_DMA_IRQHandler+0x434>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12a      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x438>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e023      	b.n	8003d9c <HAL_DMA_IRQHandler+0x440>
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00d      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2204      	movs	r2, #4
 8003daa:	409a      	lsls	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a6 	beq.w	8003f1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a85      	ldr	r2, [pc, #532]	@ (8003fec <HAL_DMA_IRQHandler+0x690>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a83      	ldr	r2, [pc, #524]	@ (8003ff0 <HAL_DMA_IRQHandler+0x694>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a82      	ldr	r2, [pc, #520]	@ (8003ff4 <HAL_DMA_IRQHandler+0x698>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a80      	ldr	r2, [pc, #512]	@ (8003ff8 <HAL_DMA_IRQHandler+0x69c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7f      	ldr	r2, [pc, #508]	@ (8003ffc <HAL_DMA_IRQHandler+0x6a0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7d      	ldr	r2, [pc, #500]	@ (8004000 <HAL_DMA_IRQHandler+0x6a4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7c      	ldr	r2, [pc, #496]	@ (8004004 <HAL_DMA_IRQHandler+0x6a8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004008 <HAL_DMA_IRQHandler+0x6ac>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a79      	ldr	r2, [pc, #484]	@ (800400c <HAL_DMA_IRQHandler+0x6b0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a77      	ldr	r2, [pc, #476]	@ (8004010 <HAL_DMA_IRQHandler+0x6b4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a76      	ldr	r2, [pc, #472]	@ (8004014 <HAL_DMA_IRQHandler+0x6b8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a74      	ldr	r2, [pc, #464]	@ (8004018 <HAL_DMA_IRQHandler+0x6bc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a73      	ldr	r2, [pc, #460]	@ (800401c <HAL_DMA_IRQHandler+0x6c0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a71      	ldr	r2, [pc, #452]	@ (8004020 <HAL_DMA_IRQHandler+0x6c4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a70      	ldr	r2, [pc, #448]	@ (8004024 <HAL_DMA_IRQHandler+0x6c8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x516>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004028 <HAL_DMA_IRQHandler+0x6cc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10a      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x52c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e009      	b.n	8003e9c <HAL_DMA_IRQHandler+0x540>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf14      	ite	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d108      	bne.n	8003ede <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d024      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e01f      	b.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
 8003eee:	e016      	b.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2220      	movs	r2, #32
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8110 	beq.w	8004154 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	@ (8003fec <HAL_DMA_IRQHandler+0x690>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d04a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2b      	ldr	r2, [pc, #172]	@ (8003ff0 <HAL_DMA_IRQHandler+0x694>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d045      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	@ (8003ff4 <HAL_DMA_IRQHandler+0x698>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d040      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a28      	ldr	r2, [pc, #160]	@ (8003ff8 <HAL_DMA_IRQHandler+0x69c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d03b      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a26      	ldr	r2, [pc, #152]	@ (8003ffc <HAL_DMA_IRQHandler+0x6a0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d036      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a25      	ldr	r2, [pc, #148]	@ (8004000 <HAL_DMA_IRQHandler+0x6a4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d031      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a23      	ldr	r2, [pc, #140]	@ (8004004 <HAL_DMA_IRQHandler+0x6a8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02c      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a22      	ldr	r2, [pc, #136]	@ (8004008 <HAL_DMA_IRQHandler+0x6ac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d027      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a20      	ldr	r2, [pc, #128]	@ (800400c <HAL_DMA_IRQHandler+0x6b0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d022      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1f      	ldr	r2, [pc, #124]	@ (8004010 <HAL_DMA_IRQHandler+0x6b4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d01d      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004014 <HAL_DMA_IRQHandler+0x6b8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8004018 <HAL_DMA_IRQHandler+0x6bc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800401c <HAL_DMA_IRQHandler+0x6c0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a19      	ldr	r2, [pc, #100]	@ (8004020 <HAL_DMA_IRQHandler+0x6c4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	@ (8004024 <HAL_DMA_IRQHandler+0x6c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x678>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <HAL_DMA_IRQHandler+0x6cc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d12b      	bne.n	800402c <HAL_DMA_IRQHandler+0x6d0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e02a      	b.n	8004040 <HAL_DMA_IRQHandler+0x6e4>
 8003fea:	bf00      	nop
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8087 	beq.w	8004154 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2220      	movs	r2, #32
 8004050:	409a      	lsls	r2, r3
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b04      	cmp	r3, #4
 8004060:	d139      	bne.n	80040d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0216 	bic.w	r2, r2, #22
 8004070:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004080:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <HAL_DMA_IRQHandler+0x736>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0208 	bic.w	r2, r2, #8
 80040a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	223f      	movs	r2, #63	@ 0x3f
 80040ac:	409a      	lsls	r2, r3
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 834a 	beq.w	8004760 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
          }
          return;
 80040d4:	e344      	b.n	8004760 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d018      	beq.n	8004116 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02c      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
 8004102:	e027      	b.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d023      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	e01e      	b.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10f      	bne.n	8004144 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0210 	bic.w	r2, r2, #16
 8004132:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8306 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8088 	beq.w	800427c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7a      	ldr	r2, [pc, #488]	@ (8004364 <HAL_DMA_IRQHandler+0xa08>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04a      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a79      	ldr	r2, [pc, #484]	@ (8004368 <HAL_DMA_IRQHandler+0xa0c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d045      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a77      	ldr	r2, [pc, #476]	@ (800436c <HAL_DMA_IRQHandler+0xa10>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d040      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a76      	ldr	r2, [pc, #472]	@ (8004370 <HAL_DMA_IRQHandler+0xa14>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d03b      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a74      	ldr	r2, [pc, #464]	@ (8004374 <HAL_DMA_IRQHandler+0xa18>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d036      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a73      	ldr	r2, [pc, #460]	@ (8004378 <HAL_DMA_IRQHandler+0xa1c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d031      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a71      	ldr	r2, [pc, #452]	@ (800437c <HAL_DMA_IRQHandler+0xa20>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02c      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a70      	ldr	r2, [pc, #448]	@ (8004380 <HAL_DMA_IRQHandler+0xa24>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d027      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004384 <HAL_DMA_IRQHandler+0xa28>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a6d      	ldr	r2, [pc, #436]	@ (8004388 <HAL_DMA_IRQHandler+0xa2c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d01d      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6b      	ldr	r2, [pc, #428]	@ (800438c <HAL_DMA_IRQHandler+0xa30>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a6a      	ldr	r2, [pc, #424]	@ (8004390 <HAL_DMA_IRQHandler+0xa34>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d013      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a68      	ldr	r2, [pc, #416]	@ (8004394 <HAL_DMA_IRQHandler+0xa38>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00e      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a67      	ldr	r2, [pc, #412]	@ (8004398 <HAL_DMA_IRQHandler+0xa3c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	@ (800439c <HAL_DMA_IRQHandler+0xa40>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <HAL_DMA_IRQHandler+0x8b8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a64      	ldr	r2, [pc, #400]	@ (80043a0 <HAL_DMA_IRQHandler+0xa44>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <HAL_DMA_IRQHandler+0x8ca>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <HAL_DMA_IRQHandler+0x8da>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3301      	adds	r3, #1
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423e:	429a      	cmp	r2, r3
 8004240:	d307      	bcc.n	8004252 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f2      	bne.n	8004236 <HAL_DMA_IRQHandler+0x8da>
 8004250:	e000      	b.n	8004254 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004252:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2203      	movs	r2, #3
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800426a:	e003      	b.n	8004274 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8272 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
 800428e:	e26c      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a43      	ldr	r2, [pc, #268]	@ (80043a4 <HAL_DMA_IRQHandler+0xa48>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a42      	ldr	r2, [pc, #264]	@ (80043a8 <HAL_DMA_IRQHandler+0xa4c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01d      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a40      	ldr	r2, [pc, #256]	@ (80043ac <HAL_DMA_IRQHandler+0xa50>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3f      	ldr	r2, [pc, #252]	@ (80043b0 <HAL_DMA_IRQHandler+0xa54>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a3d      	ldr	r2, [pc, #244]	@ (80043b4 <HAL_DMA_IRQHandler+0xa58>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3c      	ldr	r2, [pc, #240]	@ (80043b8 <HAL_DMA_IRQHandler+0xa5c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3a      	ldr	r2, [pc, #232]	@ (80043bc <HAL_DMA_IRQHandler+0xa60>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x984>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a39      	ldr	r2, [pc, #228]	@ (80043c0 <HAL_DMA_IRQHandler+0xa64>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x988>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_IRQHandler+0x98a>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 823f 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	2204      	movs	r2, #4
 80042fe:	409a      	lsls	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80cd 	beq.w	80044a4 <HAL_DMA_IRQHandler+0xb48>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80c7 	beq.w	80044a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2204      	movs	r2, #4
 8004320:	409a      	lsls	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d049      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8210 	beq.w	8004764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800434c:	e20a      	b.n	8004764 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8206 	beq.w	8004764 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004360:	e200      	b.n	8004764 <HAL_DMA_IRQHandler+0xe08>
 8004362:	bf00      	nop
 8004364:	40020010 	.word	0x40020010
 8004368:	40020028 	.word	0x40020028
 800436c:	40020040 	.word	0x40020040
 8004370:	40020058 	.word	0x40020058
 8004374:	40020070 	.word	0x40020070
 8004378:	40020088 	.word	0x40020088
 800437c:	400200a0 	.word	0x400200a0
 8004380:	400200b8 	.word	0x400200b8
 8004384:	40020410 	.word	0x40020410
 8004388:	40020428 	.word	0x40020428
 800438c:	40020440 	.word	0x40020440
 8004390:	40020458 	.word	0x40020458
 8004394:	40020470 	.word	0x40020470
 8004398:	40020488 	.word	0x40020488
 800439c:	400204a0 	.word	0x400204a0
 80043a0:	400204b8 	.word	0x400204b8
 80043a4:	58025408 	.word	0x58025408
 80043a8:	5802541c 	.word	0x5802541c
 80043ac:	58025430 	.word	0x58025430
 80043b0:	58025444 	.word	0x58025444
 80043b4:	58025458 	.word	0x58025458
 80043b8:	5802546c 	.word	0x5802546c
 80043bc:	58025480 	.word	0x58025480
 80043c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d160      	bne.n	8004490 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a7f      	ldr	r2, [pc, #508]	@ (80045d0 <HAL_DMA_IRQHandler+0xc74>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d04a      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a7d      	ldr	r2, [pc, #500]	@ (80045d4 <HAL_DMA_IRQHandler+0xc78>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d045      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7c      	ldr	r2, [pc, #496]	@ (80045d8 <HAL_DMA_IRQHandler+0xc7c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d040      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7a      	ldr	r2, [pc, #488]	@ (80045dc <HAL_DMA_IRQHandler+0xc80>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d03b      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a79      	ldr	r2, [pc, #484]	@ (80045e0 <HAL_DMA_IRQHandler+0xc84>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d036      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a77      	ldr	r2, [pc, #476]	@ (80045e4 <HAL_DMA_IRQHandler+0xc88>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d031      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a76      	ldr	r2, [pc, #472]	@ (80045e8 <HAL_DMA_IRQHandler+0xc8c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d02c      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a74      	ldr	r2, [pc, #464]	@ (80045ec <HAL_DMA_IRQHandler+0xc90>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d027      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a73      	ldr	r2, [pc, #460]	@ (80045f0 <HAL_DMA_IRQHandler+0xc94>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d022      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a71      	ldr	r2, [pc, #452]	@ (80045f4 <HAL_DMA_IRQHandler+0xc98>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d01d      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a70      	ldr	r2, [pc, #448]	@ (80045f8 <HAL_DMA_IRQHandler+0xc9c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d018      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6e      	ldr	r2, [pc, #440]	@ (80045fc <HAL_DMA_IRQHandler+0xca0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6d      	ldr	r2, [pc, #436]	@ (8004600 <HAL_DMA_IRQHandler+0xca4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00e      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6b      	ldr	r2, [pc, #428]	@ (8004604 <HAL_DMA_IRQHandler+0xca8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d009      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6a      	ldr	r2, [pc, #424]	@ (8004608 <HAL_DMA_IRQHandler+0xcac>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_DMA_IRQHandler+0xb12>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a68      	ldr	r2, [pc, #416]	@ (800460c <HAL_DMA_IRQHandler+0xcb0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <HAL_DMA_IRQHandler+0xb24>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e007      	b.n	8004490 <HAL_DMA_IRQHandler+0xb34>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8165 	beq.w	8004764 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a2:	e15f      	b.n	8004764 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2202      	movs	r2, #2
 80044ae:	409a      	lsls	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80c5 	beq.w	8004644 <HAL_DMA_IRQHandler+0xce8>
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80bf 	beq.w	8004644 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2202      	movs	r2, #2
 80044d0:	409a      	lsls	r2, r3
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d018      	beq.n	8004512 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 813a 	beq.w	8004768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	e134      	b.n	8004768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8130 	beq.w	8004768 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004510:	e12a      	b.n	8004768 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 8089 	bne.w	8004630 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2b      	ldr	r2, [pc, #172]	@ (80045d0 <HAL_DMA_IRQHandler+0xc74>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d04a      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a29      	ldr	r2, [pc, #164]	@ (80045d4 <HAL_DMA_IRQHandler+0xc78>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d045      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a28      	ldr	r2, [pc, #160]	@ (80045d8 <HAL_DMA_IRQHandler+0xc7c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d040      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <HAL_DMA_IRQHandler+0xc80>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d03b      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a25      	ldr	r2, [pc, #148]	@ (80045e0 <HAL_DMA_IRQHandler+0xc84>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d036      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a23      	ldr	r2, [pc, #140]	@ (80045e4 <HAL_DMA_IRQHandler+0xc88>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d031      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a22      	ldr	r2, [pc, #136]	@ (80045e8 <HAL_DMA_IRQHandler+0xc8c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d02c      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a20      	ldr	r2, [pc, #128]	@ (80045ec <HAL_DMA_IRQHandler+0xc90>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d027      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1f      	ldr	r2, [pc, #124]	@ (80045f0 <HAL_DMA_IRQHandler+0xc94>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <HAL_DMA_IRQHandler+0xc98>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01d      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <HAL_DMA_IRQHandler+0xc9c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1a      	ldr	r2, [pc, #104]	@ (80045fc <HAL_DMA_IRQHandler+0xca0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <HAL_DMA_IRQHandler+0xca4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <HAL_DMA_IRQHandler+0xca8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a16      	ldr	r2, [pc, #88]	@ (8004608 <HAL_DMA_IRQHandler+0xcac>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_DMA_IRQHandler+0xc62>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a14      	ldr	r2, [pc, #80]	@ (800460c <HAL_DMA_IRQHandler+0xcb0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d128      	bne.n	8004610 <HAL_DMA_IRQHandler+0xcb4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0214 	bic.w	r2, r2, #20
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e027      	b.n	8004620 <HAL_DMA_IRQHandler+0xcc4>
 80045d0:	40020010 	.word	0x40020010
 80045d4:	40020028 	.word	0x40020028
 80045d8:	40020040 	.word	0x40020040
 80045dc:	40020058 	.word	0x40020058
 80045e0:	40020070 	.word	0x40020070
 80045e4:	40020088 	.word	0x40020088
 80045e8:	400200a0 	.word	0x400200a0
 80045ec:	400200b8 	.word	0x400200b8
 80045f0:	40020410 	.word	0x40020410
 80045f4:	40020428 	.word	0x40020428
 80045f8:	40020440 	.word	0x40020440
 80045fc:	40020458 	.word	0x40020458
 8004600:	40020470 	.word	0x40020470
 8004604:	40020488 	.word	0x40020488
 8004608:	400204a0 	.word	0x400204a0
 800460c:	400204b8 	.word	0x400204b8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 020a 	bic.w	r2, r2, #10
 800461e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8097 	beq.w	8004768 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004642:	e091      	b.n	8004768 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2208      	movs	r2, #8
 800464e:	409a      	lsls	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8088 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 8082 	beq.w	800476a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a41      	ldr	r2, [pc, #260]	@ (8004770 <HAL_DMA_IRQHandler+0xe14>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3f      	ldr	r2, [pc, #252]	@ (8004774 <HAL_DMA_IRQHandler+0xe18>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3e      	ldr	r2, [pc, #248]	@ (8004778 <HAL_DMA_IRQHandler+0xe1c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3c      	ldr	r2, [pc, #240]	@ (800477c <HAL_DMA_IRQHandler+0xe20>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a3b      	ldr	r2, [pc, #236]	@ (8004780 <HAL_DMA_IRQHandler+0xe24>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a39      	ldr	r2, [pc, #228]	@ (8004784 <HAL_DMA_IRQHandler+0xe28>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a38      	ldr	r2, [pc, #224]	@ (8004788 <HAL_DMA_IRQHandler+0xe2c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a36      	ldr	r2, [pc, #216]	@ (800478c <HAL_DMA_IRQHandler+0xe30>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a35      	ldr	r2, [pc, #212]	@ (8004790 <HAL_DMA_IRQHandler+0xe34>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a33      	ldr	r2, [pc, #204]	@ (8004794 <HAL_DMA_IRQHandler+0xe38>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a32      	ldr	r2, [pc, #200]	@ (8004798 <HAL_DMA_IRQHandler+0xe3c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a30      	ldr	r2, [pc, #192]	@ (800479c <HAL_DMA_IRQHandler+0xe40>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <HAL_DMA_IRQHandler+0xe44>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2d      	ldr	r2, [pc, #180]	@ (80047a4 <HAL_DMA_IRQHandler+0xe48>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	@ (80047a8 <HAL_DMA_IRQHandler+0xe4c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_DMA_IRQHandler+0xdaa>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2a      	ldr	r2, [pc, #168]	@ (80047ac <HAL_DMA_IRQHandler+0xe50>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <HAL_DMA_IRQHandler+0xdbc>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 021c 	bic.w	r2, r2, #28
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	e007      	b.n	8004728 <HAL_DMA_IRQHandler+0xdcc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020e 	bic.w	r2, r2, #14
 8004726:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2201      	movs	r2, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	4798      	blx	r3
 800475e:	e004      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004760:	bf00      	nop
 8004762:	e002      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004768:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800476a:	3728      	adds	r7, #40	@ 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40020010 	.word	0x40020010
 8004774:	40020028 	.word	0x40020028
 8004778:	40020040 	.word	0x40020040
 800477c:	40020058 	.word	0x40020058
 8004780:	40020070 	.word	0x40020070
 8004784:	40020088 	.word	0x40020088
 8004788:	400200a0 	.word	0x400200a0
 800478c:	400200b8 	.word	0x400200b8
 8004790:	40020410 	.word	0x40020410
 8004794:	40020428 	.word	0x40020428
 8004798:	40020440 	.word	0x40020440
 800479c:	40020458 	.word	0x40020458
 80047a0:	40020470 	.word	0x40020470
 80047a4:	40020488 	.word	0x40020488
 80047a8:	400204a0 	.word	0x400204a0
 80047ac:	400204b8 	.word	0x400204b8

080047b0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047be:	b2db      	uxtb	r3, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a7f      	ldr	r2, [pc, #508]	@ (80049e8 <DMA_SetConfig+0x21c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d072      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7d      	ldr	r2, [pc, #500]	@ (80049ec <DMA_SetConfig+0x220>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d06d      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a7c      	ldr	r2, [pc, #496]	@ (80049f0 <DMA_SetConfig+0x224>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d068      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7a      	ldr	r2, [pc, #488]	@ (80049f4 <DMA_SetConfig+0x228>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d063      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a79      	ldr	r2, [pc, #484]	@ (80049f8 <DMA_SetConfig+0x22c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d05e      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a77      	ldr	r2, [pc, #476]	@ (80049fc <DMA_SetConfig+0x230>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d059      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a76      	ldr	r2, [pc, #472]	@ (8004a00 <DMA_SetConfig+0x234>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d054      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a74      	ldr	r2, [pc, #464]	@ (8004a04 <DMA_SetConfig+0x238>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04f      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a73      	ldr	r2, [pc, #460]	@ (8004a08 <DMA_SetConfig+0x23c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d04a      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a71      	ldr	r2, [pc, #452]	@ (8004a0c <DMA_SetConfig+0x240>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d045      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a70      	ldr	r2, [pc, #448]	@ (8004a10 <DMA_SetConfig+0x244>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d040      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a6e      	ldr	r2, [pc, #440]	@ (8004a14 <DMA_SetConfig+0x248>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d03b      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6d      	ldr	r2, [pc, #436]	@ (8004a18 <DMA_SetConfig+0x24c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d036      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a6b      	ldr	r2, [pc, #428]	@ (8004a1c <DMA_SetConfig+0x250>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d031      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a6a      	ldr	r2, [pc, #424]	@ (8004a20 <DMA_SetConfig+0x254>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d02c      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a68      	ldr	r2, [pc, #416]	@ (8004a24 <DMA_SetConfig+0x258>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d027      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a67      	ldr	r2, [pc, #412]	@ (8004a28 <DMA_SetConfig+0x25c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d022      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a65      	ldr	r2, [pc, #404]	@ (8004a2c <DMA_SetConfig+0x260>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01d      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a64      	ldr	r2, [pc, #400]	@ (8004a30 <DMA_SetConfig+0x264>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d018      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a62      	ldr	r2, [pc, #392]	@ (8004a34 <DMA_SetConfig+0x268>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a61      	ldr	r2, [pc, #388]	@ (8004a38 <DMA_SetConfig+0x26c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00e      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5f      	ldr	r2, [pc, #380]	@ (8004a3c <DMA_SetConfig+0x270>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d009      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a40 <DMA_SetConfig+0x274>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <DMA_SetConfig+0x10a>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004a44 <DMA_SetConfig+0x278>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <DMA_SetConfig+0x10e>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <DMA_SetConfig+0x110>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00d      	beq.n	80048fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a39      	ldr	r2, [pc, #228]	@ (80049e8 <DMA_SetConfig+0x21c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d04a      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a38      	ldr	r2, [pc, #224]	@ (80049ec <DMA_SetConfig+0x220>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d045      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a36      	ldr	r2, [pc, #216]	@ (80049f0 <DMA_SetConfig+0x224>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d040      	beq.n	800499c <DMA_SetConfig+0x1d0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a35      	ldr	r2, [pc, #212]	@ (80049f4 <DMA_SetConfig+0x228>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d03b      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a33      	ldr	r2, [pc, #204]	@ (80049f8 <DMA_SetConfig+0x22c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d036      	beq.n	800499c <DMA_SetConfig+0x1d0>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a32      	ldr	r2, [pc, #200]	@ (80049fc <DMA_SetConfig+0x230>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d031      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a30      	ldr	r2, [pc, #192]	@ (8004a00 <DMA_SetConfig+0x234>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d02c      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2f      	ldr	r2, [pc, #188]	@ (8004a04 <DMA_SetConfig+0x238>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d027      	beq.n	800499c <DMA_SetConfig+0x1d0>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2d      	ldr	r2, [pc, #180]	@ (8004a08 <DMA_SetConfig+0x23c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a0c <DMA_SetConfig+0x240>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01d      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2a      	ldr	r2, [pc, #168]	@ (8004a10 <DMA_SetConfig+0x244>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <DMA_SetConfig+0x1d0>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a29      	ldr	r2, [pc, #164]	@ (8004a14 <DMA_SetConfig+0x248>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a27      	ldr	r2, [pc, #156]	@ (8004a18 <DMA_SetConfig+0x24c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <DMA_SetConfig+0x1d0>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a26      	ldr	r2, [pc, #152]	@ (8004a1c <DMA_SetConfig+0x250>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a24      	ldr	r2, [pc, #144]	@ (8004a20 <DMA_SetConfig+0x254>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <DMA_SetConfig+0x1d0>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a23      	ldr	r2, [pc, #140]	@ (8004a24 <DMA_SetConfig+0x258>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <DMA_SetConfig+0x1d4>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <DMA_SetConfig+0x1d6>
 80049a0:	2300      	movs	r3, #0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d059      	beq.n	8004a5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	223f      	movs	r2, #63	@ 0x3f
 80049b0:	409a      	lsls	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d138      	bne.n	8004a48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049e6:	e086      	b.n	8004af6 <DMA_SetConfig+0x32a>
 80049e8:	40020010 	.word	0x40020010
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020040 	.word	0x40020040
 80049f4:	40020058 	.word	0x40020058
 80049f8:	40020070 	.word	0x40020070
 80049fc:	40020088 	.word	0x40020088
 8004a00:	400200a0 	.word	0x400200a0
 8004a04:	400200b8 	.word	0x400200b8
 8004a08:	40020410 	.word	0x40020410
 8004a0c:	40020428 	.word	0x40020428
 8004a10:	40020440 	.word	0x40020440
 8004a14:	40020458 	.word	0x40020458
 8004a18:	40020470 	.word	0x40020470
 8004a1c:	40020488 	.word	0x40020488
 8004a20:	400204a0 	.word	0x400204a0
 8004a24:	400204b8 	.word	0x400204b8
 8004a28:	58025408 	.word	0x58025408
 8004a2c:	5802541c 	.word	0x5802541c
 8004a30:	58025430 	.word	0x58025430
 8004a34:	58025444 	.word	0x58025444
 8004a38:	58025458 	.word	0x58025458
 8004a3c:	5802546c 	.word	0x5802546c
 8004a40:	58025480 	.word	0x58025480
 8004a44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]
}
 8004a58:	e04d      	b.n	8004af6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a29      	ldr	r2, [pc, #164]	@ (8004b04 <DMA_SetConfig+0x338>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d022      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a27      	ldr	r2, [pc, #156]	@ (8004b08 <DMA_SetConfig+0x33c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01d      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a26      	ldr	r2, [pc, #152]	@ (8004b0c <DMA_SetConfig+0x340>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <DMA_SetConfig+0x344>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a23      	ldr	r2, [pc, #140]	@ (8004b14 <DMA_SetConfig+0x348>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a21      	ldr	r2, [pc, #132]	@ (8004b18 <DMA_SetConfig+0x34c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a20      	ldr	r2, [pc, #128]	@ (8004b1c <DMA_SetConfig+0x350>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <DMA_SetConfig+0x2de>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b20 <DMA_SetConfig+0x354>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <DMA_SetConfig+0x2e2>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <DMA_SetConfig+0x2e4>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d020      	beq.n	8004af6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2201      	movs	r2, #1
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d108      	bne.n	8004ae6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	60da      	str	r2, [r3, #12]
}
 8004ae4:	e007      	b.n	8004af6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	58025408 	.word	0x58025408
 8004b08:	5802541c 	.word	0x5802541c
 8004b0c:	58025430 	.word	0x58025430
 8004b10:	58025444 	.word	0x58025444
 8004b14:	58025458 	.word	0x58025458
 8004b18:	5802546c 	.word	0x5802546c
 8004b1c:	58025480 	.word	0x58025480
 8004b20:	58025494 	.word	0x58025494

08004b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a42      	ldr	r2, [pc, #264]	@ (8004c3c <DMA_CalcBaseAndBitshift+0x118>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d04a      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a41      	ldr	r2, [pc, #260]	@ (8004c40 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d045      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a3f      	ldr	r2, [pc, #252]	@ (8004c44 <DMA_CalcBaseAndBitshift+0x120>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d040      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c48 <DMA_CalcBaseAndBitshift+0x124>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d03b      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3c      	ldr	r2, [pc, #240]	@ (8004c4c <DMA_CalcBaseAndBitshift+0x128>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d036      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a3b      	ldr	r2, [pc, #236]	@ (8004c50 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d031      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a39      	ldr	r2, [pc, #228]	@ (8004c54 <DMA_CalcBaseAndBitshift+0x130>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d02c      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a38      	ldr	r2, [pc, #224]	@ (8004c58 <DMA_CalcBaseAndBitshift+0x134>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d027      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a36      	ldr	r2, [pc, #216]	@ (8004c5c <DMA_CalcBaseAndBitshift+0x138>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a35      	ldr	r2, [pc, #212]	@ (8004c60 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d01d      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a33      	ldr	r2, [pc, #204]	@ (8004c64 <DMA_CalcBaseAndBitshift+0x140>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a32      	ldr	r2, [pc, #200]	@ (8004c68 <DMA_CalcBaseAndBitshift+0x144>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a30      	ldr	r2, [pc, #192]	@ (8004c6c <DMA_CalcBaseAndBitshift+0x148>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c70 <DMA_CalcBaseAndBitshift+0x14c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c74 <DMA_CalcBaseAndBitshift+0x150>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <DMA_CalcBaseAndBitshift+0xa8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c78 <DMA_CalcBaseAndBitshift+0x154>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d101      	bne.n	8004bd0 <DMA_CalcBaseAndBitshift+0xac>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <DMA_CalcBaseAndBitshift+0xae>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d024      	beq.n	8004c20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3b10      	subs	r3, #16
 8004bde:	4a27      	ldr	r2, [pc, #156]	@ (8004c7c <DMA_CalcBaseAndBitshift+0x158>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	4a24      	ldr	r2, [pc, #144]	@ (8004c80 <DMA_CalcBaseAndBitshift+0x15c>)
 8004bf0:	5cd3      	ldrb	r3, [r2, r3]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d908      	bls.n	8004c10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	4b1f      	ldr	r3, [pc, #124]	@ (8004c84 <DMA_CalcBaseAndBitshift+0x160>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	1d1a      	adds	r2, r3, #4
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c0e:	e00d      	b.n	8004c2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <DMA_CalcBaseAndBitshift+0x160>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c1e:	e005      	b.n	8004c2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40020010 	.word	0x40020010
 8004c40:	40020028 	.word	0x40020028
 8004c44:	40020040 	.word	0x40020040
 8004c48:	40020058 	.word	0x40020058
 8004c4c:	40020070 	.word	0x40020070
 8004c50:	40020088 	.word	0x40020088
 8004c54:	400200a0 	.word	0x400200a0
 8004c58:	400200b8 	.word	0x400200b8
 8004c5c:	40020410 	.word	0x40020410
 8004c60:	40020428 	.word	0x40020428
 8004c64:	40020440 	.word	0x40020440
 8004c68:	40020458 	.word	0x40020458
 8004c6c:	40020470 	.word	0x40020470
 8004c70:	40020488 	.word	0x40020488
 8004c74:	400204a0 	.word	0x400204a0
 8004c78:	400204b8 	.word	0x400204b8
 8004c7c:	aaaaaaab 	.word	0xaaaaaaab
 8004c80:	08012584 	.word	0x08012584
 8004c84:	fffffc00 	.word	0xfffffc00

08004c88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d120      	bne.n	8004cde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d858      	bhi.n	8004d56 <DMA_CheckFifoParam+0xce>
 8004ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <DMA_CheckFifoParam+0x24>)
 8004ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004caa:	bf00      	nop
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004ccf 	.word	0x08004ccf
 8004cb4:	08004cbd 	.word	0x08004cbd
 8004cb8:	08004d57 	.word	0x08004d57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d048      	beq.n	8004d5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ccc:	e045      	b.n	8004d5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cd6:	d142      	bne.n	8004d5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cdc:	e03f      	b.n	8004d5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce6:	d123      	bne.n	8004d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d838      	bhi.n	8004d62 <DMA_CheckFifoParam+0xda>
 8004cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf8 <DMA_CheckFifoParam+0x70>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d0f 	.word	0x08004d0f
 8004d00:	08004d09 	.word	0x08004d09
 8004d04:	08004d21 	.word	0x08004d21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8004d0c:	e030      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d025      	beq.n	8004d66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d1e:	e022      	b.n	8004d66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d28:	d11f      	bne.n	8004d6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d2e:	e01c      	b.n	8004d6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d902      	bls.n	8004d3e <DMA_CheckFifoParam+0xb6>
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d003      	beq.n	8004d44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d3c:	e018      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
        break;
 8004d42:	e015      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
    break;
 8004d54:	e00b      	b.n	8004d6e <DMA_CheckFifoParam+0xe6>
        break;
 8004d56:	bf00      	nop
 8004d58:	e00a      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e008      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e006      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        break;
 8004d62:	bf00      	nop
 8004d64:	e004      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        break;
 8004d66:	bf00      	nop
 8004d68:	e002      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <DMA_CheckFifoParam+0xe8>
    break;
 8004d6e:	bf00      	nop
    }
  }

  return status;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop

08004d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a38      	ldr	r2, [pc, #224]	@ (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a36      	ldr	r2, [pc, #216]	@ (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01d      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a35      	ldr	r2, [pc, #212]	@ (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a33      	ldr	r2, [pc, #204]	@ (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a32      	ldr	r2, [pc, #200]	@ (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a30      	ldr	r2, [pc, #192]	@ (8004e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2f      	ldr	r2, [pc, #188]	@ (8004e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d101      	bne.n	8004de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01a      	beq.n	8004e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	3b08      	subs	r3, #8
 8004df0:	4a28      	ldr	r2, [pc, #160]	@ (8004e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4b26      	ldr	r3, [pc, #152]	@ (8004e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a24      	ldr	r2, [pc, #144]	@ (8004e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2201      	movs	r2, #1
 8004e16:	409a      	lsls	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004e1c:	e024      	b.n	8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	3b10      	subs	r3, #16
 8004e26:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d806      	bhi.n	8004e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d902      	bls.n	8004e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3308      	adds	r3, #8
 8004e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4b18      	ldr	r3, [pc, #96]	@ (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a16      	ldr	r2, [pc, #88]	@ (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2201      	movs	r2, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	58025408 	.word	0x58025408
 8004e78:	5802541c 	.word	0x5802541c
 8004e7c:	58025430 	.word	0x58025430
 8004e80:	58025444 	.word	0x58025444
 8004e84:	58025458 	.word	0x58025458
 8004e88:	5802546c 	.word	0x5802546c
 8004e8c:	58025480 	.word	0x58025480
 8004e90:	58025494 	.word	0x58025494
 8004e94:	cccccccd 	.word	0xcccccccd
 8004e98:	16009600 	.word	0x16009600
 8004e9c:	58025880 	.word	0x58025880
 8004ea0:	aaaaaaab 	.word	0xaaaaaaab
 8004ea4:	400204b8 	.word	0x400204b8
 8004ea8:	4002040f 	.word	0x4002040f
 8004eac:	10008200 	.word	0x10008200
 8004eb0:	40020880 	.word	0x40020880

08004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04a      	beq.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d847      	bhi.n	8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a25      	ldr	r2, [pc, #148]	@ (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a24      	ldr	r2, [pc, #144]	@ (8004f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d01d      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a22      	ldr	r2, [pc, #136]	@ (8004f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a21      	ldr	r2, [pc, #132]	@ (8004f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1e      	ldr	r2, [pc, #120]	@ (8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4b17      	ldr	r3, [pc, #92]	@ (8004f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f3c:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f3e:	e009      	b.n	8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4b14      	ldr	r3, [pc, #80]	@ (8004f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f52:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	2201      	movs	r2, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	58025408 	.word	0x58025408
 8004f70:	5802541c 	.word	0x5802541c
 8004f74:	58025430 	.word	0x58025430
 8004f78:	58025444 	.word	0x58025444
 8004f7c:	58025458 	.word	0x58025458
 8004f80:	5802546c 	.word	0x5802546c
 8004f84:	58025480 	.word	0x58025480
 8004f88:	58025494 	.word	0x58025494
 8004f8c:	1600963f 	.word	0x1600963f
 8004f90:	58025940 	.word	0x58025940
 8004f94:	1000823f 	.word	0x1000823f
 8004f98:	40020940 	.word	0x40020940

08004f9c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d105      	bne.n	8004fc2 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e315      	b.n	80055ee <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e30e      	b.n	80055ee <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f040 82fd 	bne.w	80055e0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a82      	ldr	r2, [pc, #520]	@ (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d04a      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a81      	ldr	r2, [pc, #516]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d045      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a7f      	ldr	r2, [pc, #508]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d040      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7e      	ldr	r2, [pc, #504]	@ (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d03b      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a7c      	ldr	r2, [pc, #496]	@ (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d036      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a7b      	ldr	r2, [pc, #492]	@ (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d031      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a79      	ldr	r2, [pc, #484]	@ (800521c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d02c      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a78      	ldr	r2, [pc, #480]	@ (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d027      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a76      	ldr	r2, [pc, #472]	@ (8005224 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d022      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a75      	ldr	r2, [pc, #468]	@ (8005228 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d01d      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a73      	ldr	r2, [pc, #460]	@ (800522c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d018      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a72      	ldr	r2, [pc, #456]	@ (8005230 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a70      	ldr	r2, [pc, #448]	@ (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00e      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a6f      	ldr	r2, [pc, #444]	@ (8005238 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6d      	ldr	r2, [pc, #436]	@ (800523c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6c      	ldr	r2, [pc, #432]	@ (8005240 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80050ac:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ba:	3308      	adds	r3, #8
 80050bc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	223f      	movs	r2, #63	@ 0x3f
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e018      	b.n	8005102 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	f248 0320 	movw	r3, #32800	@ 0x8020
 80050de:	430b      	orrs	r3, r1
 80050e0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ee:	3304      	adds	r3, #4
 80050f0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2201      	movs	r2, #1
 80050fc:	409a      	lsls	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fb41 	bl	8005790 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3c      	ldr	r2, [pc, #240]	@ (8005204 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d072      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a3a      	ldr	r2, [pc, #232]	@ (8005208 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d06d      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a39      	ldr	r2, [pc, #228]	@ (800520c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d068      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a37      	ldr	r2, [pc, #220]	@ (8005210 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d063      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a36      	ldr	r2, [pc, #216]	@ (8005214 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d05e      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a34      	ldr	r2, [pc, #208]	@ (8005218 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d059      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a33      	ldr	r2, [pc, #204]	@ (800521c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d054      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a31      	ldr	r2, [pc, #196]	@ (8005220 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04f      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a30      	ldr	r2, [pc, #192]	@ (8005224 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d04a      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2e      	ldr	r2, [pc, #184]	@ (8005228 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d045      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2d      	ldr	r2, [pc, #180]	@ (800522c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d040      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a2b      	ldr	r2, [pc, #172]	@ (8005230 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d03b      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2a      	ldr	r2, [pc, #168]	@ (8005234 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d036      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a28      	ldr	r2, [pc, #160]	@ (8005238 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d031      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a27      	ldr	r2, [pc, #156]	@ (800523c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d02c      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a25      	ldr	r2, [pc, #148]	@ (8005240 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d027      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a24      	ldr	r2, [pc, #144]	@ (8005244 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d022      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a22      	ldr	r2, [pc, #136]	@ (8005248 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01d      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a21      	ldr	r2, [pc, #132]	@ (800524c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d018      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005250 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1e      	ldr	r2, [pc, #120]	@ (8005254 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1b      	ldr	r2, [pc, #108]	@ (800525c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a19      	ldr	r2, [pc, #100]	@ (8005260 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d132      	bne.n	8005264 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80051fe:	2301      	movs	r3, #1
 8005200:	e031      	b.n	8005266 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005202:	bf00      	nop
 8005204:	40020010 	.word	0x40020010
 8005208:	40020028 	.word	0x40020028
 800520c:	40020040 	.word	0x40020040
 8005210:	40020058 	.word	0x40020058
 8005214:	40020070 	.word	0x40020070
 8005218:	40020088 	.word	0x40020088
 800521c:	400200a0 	.word	0x400200a0
 8005220:	400200b8 	.word	0x400200b8
 8005224:	40020410 	.word	0x40020410
 8005228:	40020428 	.word	0x40020428
 800522c:	40020440 	.word	0x40020440
 8005230:	40020458 	.word	0x40020458
 8005234:	40020470 	.word	0x40020470
 8005238:	40020488 	.word	0x40020488
 800523c:	400204a0 	.word	0x400204a0
 8005240:	400204b8 	.word	0x400204b8
 8005244:	58025408 	.word	0x58025408
 8005248:	5802541c 	.word	0x5802541c
 800524c:	58025430 	.word	0x58025430
 8005250:	58025444 	.word	0x58025444
 8005254:	58025458 	.word	0x58025458
 8005258:	5802546c 	.word	0x5802546c
 800525c:	58025480 	.word	0x58025480
 8005260:	58025494 	.word	0x58025494
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005272:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005284:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a3b      	ldr	r2, [pc, #236]	@ (8005378 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a39      	ldr	r2, [pc, #228]	@ (800537c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a38      	ldr	r2, [pc, #224]	@ (8005380 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a36      	ldr	r2, [pc, #216]	@ (8005384 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a35      	ldr	r2, [pc, #212]	@ (8005388 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a33      	ldr	r2, [pc, #204]	@ (800538c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a32      	ldr	r2, [pc, #200]	@ (8005390 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a30      	ldr	r2, [pc, #192]	@ (8005394 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2f      	ldr	r2, [pc, #188]	@ (8005398 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2d      	ldr	r2, [pc, #180]	@ (800539c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2c      	ldr	r2, [pc, #176]	@ (80053a0 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2a      	ldr	r2, [pc, #168]	@ (80053a4 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a29      	ldr	r2, [pc, #164]	@ (80053a8 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a27      	ldr	r2, [pc, #156]	@ (80053ac <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a26      	ldr	r2, [pc, #152]	@ (80053b0 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a24      	ldr	r2, [pc, #144]	@ (80053b4 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d043      	beq.n	80053b8 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 021e 	bic.w	r2, r3, #30
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0216 	orr.w	r2, r2, #22
 8005342:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005352:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005360:	2b00      	cmp	r3, #0
 8005362:	d043      	beq.n	80053ec <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e03a      	b.n	80053ec <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005376:	bf00      	nop
 8005378:	40020010 	.word	0x40020010
 800537c:	40020028 	.word	0x40020028
 8005380:	40020040 	.word	0x40020040
 8005384:	40020058 	.word	0x40020058
 8005388:	40020070 	.word	0x40020070
 800538c:	40020088 	.word	0x40020088
 8005390:	400200a0 	.word	0x400200a0
 8005394:	400200b8 	.word	0x400200b8
 8005398:	40020410 	.word	0x40020410
 800539c:	40020428 	.word	0x40020428
 80053a0:	40020440 	.word	0x40020440
 80053a4:	40020458 	.word	0x40020458
 80053a8:	40020470 	.word	0x40020470
 80053ac:	40020488 	.word	0x40020488
 80053b0:	400204a0 	.word	0x400204a0
 80053b4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 020e 	bic.w	r2, r3, #14
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 020a 	orr.w	r2, r2, #10
 80053ca:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0204 	orr.w	r2, r2, #4
 80053ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a81      	ldr	r2, [pc, #516]	@ (80055f8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d072      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a80      	ldr	r2, [pc, #512]	@ (80055fc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d06d      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7e      	ldr	r2, [pc, #504]	@ (8005600 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d068      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a7d      	ldr	r2, [pc, #500]	@ (8005604 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d063      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a7b      	ldr	r2, [pc, #492]	@ (8005608 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d05e      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7a      	ldr	r2, [pc, #488]	@ (800560c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d059      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a78      	ldr	r2, [pc, #480]	@ (8005610 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d054      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a77      	ldr	r2, [pc, #476]	@ (8005614 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d04f      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a75      	ldr	r2, [pc, #468]	@ (8005618 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d04a      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a74      	ldr	r2, [pc, #464]	@ (800561c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d045      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a72      	ldr	r2, [pc, #456]	@ (8005620 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d040      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a71      	ldr	r2, [pc, #452]	@ (8005624 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d03b      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6f      	ldr	r2, [pc, #444]	@ (8005628 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d036      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6e      	ldr	r2, [pc, #440]	@ (800562c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d031      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a6c      	ldr	r2, [pc, #432]	@ (8005630 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02c      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6b      	ldr	r2, [pc, #428]	@ (8005634 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d027      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a69      	ldr	r2, [pc, #420]	@ (8005638 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d022      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a68      	ldr	r2, [pc, #416]	@ (800563c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d01d      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a66      	ldr	r2, [pc, #408]	@ (8005640 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d018      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a65      	ldr	r2, [pc, #404]	@ (8005644 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a63      	ldr	r2, [pc, #396]	@ (8005648 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00e      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a62      	ldr	r2, [pc, #392]	@ (800564c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d009      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a60      	ldr	r2, [pc, #384]	@ (8005650 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005654 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d101      	bne.n	80054e0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80054e0:	2300      	movs	r3, #0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01a      	beq.n	800551c <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005502:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005516:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800551a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a35      	ldr	r2, [pc, #212]	@ (80055f8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d04a      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a34      	ldr	r2, [pc, #208]	@ (80055fc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d045      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a32      	ldr	r2, [pc, #200]	@ (8005600 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d040      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a31      	ldr	r2, [pc, #196]	@ (8005604 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d03b      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2f      	ldr	r2, [pc, #188]	@ (8005608 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d036      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2e      	ldr	r2, [pc, #184]	@ (800560c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d031      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02c      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d027      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a29      	ldr	r2, [pc, #164]	@ (8005618 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d022      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a28      	ldr	r2, [pc, #160]	@ (800561c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d01d      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a26      	ldr	r2, [pc, #152]	@ (8005620 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a25      	ldr	r2, [pc, #148]	@ (8005624 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a23      	ldr	r2, [pc, #140]	@ (8005628 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a20      	ldr	r2, [pc, #128]	@ (8005630 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e00e      	b.n	80055ec <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e005      	b.n	80055ec <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40020010 	.word	0x40020010
 80055fc:	40020028 	.word	0x40020028
 8005600:	40020040 	.word	0x40020040
 8005604:	40020058 	.word	0x40020058
 8005608:	40020070 	.word	0x40020070
 800560c:	40020088 	.word	0x40020088
 8005610:	400200a0 	.word	0x400200a0
 8005614:	400200b8 	.word	0x400200b8
 8005618:	40020410 	.word	0x40020410
 800561c:	40020428 	.word	0x40020428
 8005620:	40020440 	.word	0x40020440
 8005624:	40020458 	.word	0x40020458
 8005628:	40020470 	.word	0x40020470
 800562c:	40020488 	.word	0x40020488
 8005630:	400204a0 	.word	0x400204a0
 8005634:	400204b8 	.word	0x400204b8
 8005638:	58025408 	.word	0x58025408
 800563c:	5802541c 	.word	0x5802541c
 8005640:	58025430 	.word	0x58025430
 8005644:	58025444 	.word	0x58025444
 8005648:	58025458 	.word	0x58025458
 800564c:	5802546c 	.word	0x5802546c
 8005650:	58025480 	.word	0x58025480
 8005654:	58025494 	.word	0x58025494

08005658 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a39      	ldr	r2, [pc, #228]	@ (8005750 <HAL_DMAEx_ChangeMemory+0xf8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d04a      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a37      	ldr	r2, [pc, #220]	@ (8005754 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d045      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a36      	ldr	r2, [pc, #216]	@ (8005758 <HAL_DMAEx_ChangeMemory+0x100>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d040      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a34      	ldr	r2, [pc, #208]	@ (800575c <HAL_DMAEx_ChangeMemory+0x104>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d03b      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a33      	ldr	r2, [pc, #204]	@ (8005760 <HAL_DMAEx_ChangeMemory+0x108>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d036      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a31      	ldr	r2, [pc, #196]	@ (8005764 <HAL_DMAEx_ChangeMemory+0x10c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d031      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a30      	ldr	r2, [pc, #192]	@ (8005768 <HAL_DMAEx_ChangeMemory+0x110>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d02c      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2e      	ldr	r2, [pc, #184]	@ (800576c <HAL_DMAEx_ChangeMemory+0x114>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d027      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005770 <HAL_DMAEx_ChangeMemory+0x118>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005774 <HAL_DMAEx_ChangeMemory+0x11c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01d      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <HAL_DMAEx_ChangeMemory+0x120>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a28      	ldr	r2, [pc, #160]	@ (800577c <HAL_DMAEx_ChangeMemory+0x124>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <HAL_DMAEx_ChangeMemory+0x128>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a25      	ldr	r2, [pc, #148]	@ (8005784 <HAL_DMAEx_ChangeMemory+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_DMAEx_ChangeMemory+0x130>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_DMAEx_ChangeMemory+0xae>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a22      	ldr	r2, [pc, #136]	@ (800578c <HAL_DMAEx_ChangeMemory+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_DMAEx_ChangeMemory+0xb2>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_DMAEx_ChangeMemory+0xb4>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	e010      	b.n	8005742 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	611a      	str	r2, [r3, #16]
 8005728:	e00b      	b.n	8005742 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e003      	b.n	8005742 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40020010 	.word	0x40020010
 8005754:	40020028 	.word	0x40020028
 8005758:	40020040 	.word	0x40020040
 800575c:	40020058 	.word	0x40020058
 8005760:	40020070 	.word	0x40020070
 8005764:	40020088 	.word	0x40020088
 8005768:	400200a0 	.word	0x400200a0
 800576c:	400200b8 	.word	0x400200b8
 8005770:	40020410 	.word	0x40020410
 8005774:	40020428 	.word	0x40020428
 8005778:	40020440 	.word	0x40020440
 800577c:	40020458 	.word	0x40020458
 8005780:	40020470 	.word	0x40020470
 8005784:	40020488 	.word	0x40020488
 8005788:	400204a0 	.word	0x400204a0
 800578c:	400204b8 	.word	0x400204b8

08005790 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a46      	ldr	r2, [pc, #280]	@ (80058bc <DMA_MultiBufferSetConfig+0x12c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d04a      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a44      	ldr	r2, [pc, #272]	@ (80058c0 <DMA_MultiBufferSetConfig+0x130>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d045      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a43      	ldr	r2, [pc, #268]	@ (80058c4 <DMA_MultiBufferSetConfig+0x134>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d040      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a41      	ldr	r2, [pc, #260]	@ (80058c8 <DMA_MultiBufferSetConfig+0x138>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d03b      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a40      	ldr	r2, [pc, #256]	@ (80058cc <DMA_MultiBufferSetConfig+0x13c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d036      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a3e      	ldr	r2, [pc, #248]	@ (80058d0 <DMA_MultiBufferSetConfig+0x140>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d031      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a3d      	ldr	r2, [pc, #244]	@ (80058d4 <DMA_MultiBufferSetConfig+0x144>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d02c      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3b      	ldr	r2, [pc, #236]	@ (80058d8 <DMA_MultiBufferSetConfig+0x148>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d027      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a3a      	ldr	r2, [pc, #232]	@ (80058dc <DMA_MultiBufferSetConfig+0x14c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d022      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a38      	ldr	r2, [pc, #224]	@ (80058e0 <DMA_MultiBufferSetConfig+0x150>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01d      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a37      	ldr	r2, [pc, #220]	@ (80058e4 <DMA_MultiBufferSetConfig+0x154>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d018      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a35      	ldr	r2, [pc, #212]	@ (80058e8 <DMA_MultiBufferSetConfig+0x158>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a34      	ldr	r2, [pc, #208]	@ (80058ec <DMA_MultiBufferSetConfig+0x15c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00e      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a32      	ldr	r2, [pc, #200]	@ (80058f0 <DMA_MultiBufferSetConfig+0x160>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d009      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a31      	ldr	r2, [pc, #196]	@ (80058f4 <DMA_MultiBufferSetConfig+0x164>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <DMA_MultiBufferSetConfig+0xae>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2f      	ldr	r2, [pc, #188]	@ (80058f8 <DMA_MultiBufferSetConfig+0x168>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <DMA_MultiBufferSetConfig+0xb2>
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <DMA_MultiBufferSetConfig+0xb4>
 8005842:	2300      	movs	r3, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d019      	beq.n	800587c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d108      	bne.n	800586a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8005868:	e021      	b.n	80058ae <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
}
 800587a:	e018      	b.n	80058ae <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	d108      	bne.n	800589e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	60da      	str	r2, [r3, #12]
}
 800589c:	e007      	b.n	80058ae <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	60da      	str	r2, [r3, #12]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8

080058fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	@ 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800590a:	4b89      	ldr	r3, [pc, #548]	@ (8005b30 <HAL_GPIO_Init+0x234>)
 800590c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800590e:	e194      	b.n	8005c3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	2101      	movs	r1, #1
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8186 	beq.w	8005c34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d005      	beq.n	8005940 <HAL_GPIO_Init+0x44>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d130      	bne.n	80059a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	2203      	movs	r2, #3
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005976:	2201      	movs	r2, #1
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	f003 0201 	and.w	r2, r3, #1
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d017      	beq.n	80059de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2203      	movs	r2, #3
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d123      	bne.n	8005a32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	08da      	lsrs	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3208      	adds	r2, #8
 80059f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	220f      	movs	r2, #15
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	08da      	lsrs	r2, r3, #3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3208      	adds	r2, #8
 8005a2c:	69b9      	ldr	r1, [r7, #24]
 8005a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0203 	and.w	r2, r3, #3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80e0 	beq.w	8005c34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a74:	4b2f      	ldr	r3, [pc, #188]	@ (8005b34 <HAL_GPIO_Init+0x238>)
 8005a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b34 <HAL_GPIO_Init+0x238>)
 8005a7c:	f043 0302 	orr.w	r3, r3, #2
 8005a80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005a84:	4b2b      	ldr	r3, [pc, #172]	@ (8005b34 <HAL_GPIO_Init+0x238>)
 8005a86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a92:	4a29      	ldr	r2, [pc, #164]	@ (8005b38 <HAL_GPIO_Init+0x23c>)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	3302      	adds	r3, #2
 8005a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	220f      	movs	r2, #15
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a20      	ldr	r2, [pc, #128]	@ (8005b3c <HAL_GPIO_Init+0x240>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d052      	beq.n	8005b64 <HAL_GPIO_Init+0x268>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b40 <HAL_GPIO_Init+0x244>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d031      	beq.n	8005b2a <HAL_GPIO_Init+0x22e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b44 <HAL_GPIO_Init+0x248>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d02b      	beq.n	8005b26 <HAL_GPIO_Init+0x22a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b48 <HAL_GPIO_Init+0x24c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d025      	beq.n	8005b22 <HAL_GPIO_Init+0x226>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b4c <HAL_GPIO_Init+0x250>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01f      	beq.n	8005b1e <HAL_GPIO_Init+0x222>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b50 <HAL_GPIO_Init+0x254>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d019      	beq.n	8005b1a <HAL_GPIO_Init+0x21e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b54 <HAL_GPIO_Init+0x258>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <HAL_GPIO_Init+0x21a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a19      	ldr	r2, [pc, #100]	@ (8005b58 <HAL_GPIO_Init+0x25c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00d      	beq.n	8005b12 <HAL_GPIO_Init+0x216>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <HAL_GPIO_Init+0x260>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d007      	beq.n	8005b0e <HAL_GPIO_Init+0x212>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a17      	ldr	r2, [pc, #92]	@ (8005b60 <HAL_GPIO_Init+0x264>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d101      	bne.n	8005b0a <HAL_GPIO_Init+0x20e>
 8005b06:	2309      	movs	r3, #9
 8005b08:	e02d      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b0a:	230a      	movs	r3, #10
 8005b0c:	e02b      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b0e:	2308      	movs	r3, #8
 8005b10:	e029      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b12:	2307      	movs	r3, #7
 8005b14:	e027      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b16:	2306      	movs	r3, #6
 8005b18:	e025      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b1a:	2305      	movs	r3, #5
 8005b1c:	e023      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b1e:	2304      	movs	r3, #4
 8005b20:	e021      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b22:	2303      	movs	r3, #3
 8005b24:	e01f      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e01d      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e01b      	b.n	8005b66 <HAL_GPIO_Init+0x26a>
 8005b2e:	bf00      	nop
 8005b30:	58000080 	.word	0x58000080
 8005b34:	58024400 	.word	0x58024400
 8005b38:	58000400 	.word	0x58000400
 8005b3c:	58020000 	.word	0x58020000
 8005b40:	58020400 	.word	0x58020400
 8005b44:	58020800 	.word	0x58020800
 8005b48:	58020c00 	.word	0x58020c00
 8005b4c:	58021000 	.word	0x58021000
 8005b50:	58021400 	.word	0x58021400
 8005b54:	58021800 	.word	0x58021800
 8005b58:	58021c00 	.word	0x58021c00
 8005b5c:	58022000 	.word	0x58022000
 8005b60:	58022400 	.word	0x58022400
 8005b64:	2300      	movs	r3, #0
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	f002 0203 	and.w	r2, r2, #3
 8005b6c:	0092      	lsls	r2, r2, #2
 8005b6e:	4093      	lsls	r3, r2
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b76:	4938      	ldr	r1, [pc, #224]	@ (8005c58 <HAL_GPIO_Init+0x35c>)
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	3302      	adds	r3, #2
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f47f ae63 	bne.w	8005910 <HAL_GPIO_Init+0x14>
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3724      	adds	r7, #36	@ 0x24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	58000400 	.word	0x58000400

08005c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e08b      	b.n	8005d86 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb fb1a 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	@ 0x24
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	e006      	b.n	8005ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d108      	bne.n	8005cfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	e007      	b.n	8005d0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <HAL_I2C_Init+0x134>)
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	02008000 	.word	0x02008000

08005d94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	460b      	mov	r3, r1
 8005da2:	817b      	strh	r3, [r7, #10]
 8005da4:	4613      	mov	r3, r2
 8005da6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	f040 80fd 	bne.w	8005fb0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_I2C_Master_Transmit+0x30>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e0f6      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fb fde2 	bl	8001994 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	2319      	movs	r3, #25
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f001 f891 	bl	8006f06 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0e1      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2221      	movs	r2, #33	@ 0x21
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2210      	movs	r2, #16
 8005dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	893a      	ldrh	r2, [r7, #8]
 8005e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2bff      	cmp	r3, #255	@ 0xff
 8005e1e:	d906      	bls.n	8005e2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	22ff      	movs	r2, #255	@ 0xff
 8005e24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e007      	b.n	8005e3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d024      	beq.n	8005e90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	4b4e      	ldr	r3, [pc, #312]	@ (8005fbc <HAL_I2C_Master_Transmit+0x228>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f001 fa8b 	bl	80073a4 <I2C_TransferConfig>
 8005e8e:	e066      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	8979      	ldrh	r1, [r7, #10]
 8005e98:	4b48      	ldr	r3, [pc, #288]	@ (8005fbc <HAL_I2C_Master_Transmit+0x228>)
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f001 fa80 	bl	80073a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005ea4:	e05b      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	6a39      	ldr	r1, [r7, #32]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f001 f884 	bl	8006fb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07b      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d034      	beq.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d130      	bne.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2180      	movs	r1, #128	@ 0x80
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fffd 	bl	8006f06 <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e04d      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2bff      	cmp	r3, #255	@ 0xff
 8005f1e:	d90e      	bls.n	8005f3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	@ 0xff
 8005f24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8979      	ldrh	r1, [r7, #10]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f001 fa34 	bl	80073a4 <I2C_TransferConfig>
 8005f3c:	e00f      	b.n	8005f5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	2300      	movs	r3, #0
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fa23 	bl	80073a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d19e      	bne.n	8005ea6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	6a39      	ldr	r1, [r7, #32]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f001 f86a 	bl	8007046 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e01a      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2220      	movs	r2, #32
 8005f82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <HAL_I2C_Master_Transmit+0x22c>)
 8005f90:	400b      	ands	r3, r1
 8005f92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
  }
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	80002000 	.word	0x80002000
 8005fc0:	fe00e800 	.word	0xfe00e800

08005fc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	817b      	strh	r3, [r7, #10]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	f040 80db 	bne.w	800619c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_I2C_Master_Receive+0x30>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e0d4      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ffc:	f7fb fcca 	bl	8001994 <HAL_GetTick>
 8006000:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	2319      	movs	r3, #25
 8006008:	2201      	movs	r2, #1
 800600a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 ff79 	bl	8006f06 <I2C_WaitOnFlagUntilTimeout>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0bf      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2222      	movs	r2, #34	@ 0x22
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2210      	movs	r2, #16
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	893a      	ldrh	r2, [r7, #8]
 800603e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2bff      	cmp	r3, #255	@ 0xff
 800604e:	d90e      	bls.n	800606e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	22ff      	movs	r2, #255	@ 0xff
 8006054:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605a:	b2da      	uxtb	r2, r3
 800605c:	8979      	ldrh	r1, [r7, #10]
 800605e:	4b52      	ldr	r3, [pc, #328]	@ (80061a8 <HAL_I2C_Master_Receive+0x1e4>)
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f001 f99c 	bl	80073a4 <I2C_TransferConfig>
 800606c:	e06d      	b.n	800614a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	8979      	ldrh	r1, [r7, #10]
 8006080:	4b49      	ldr	r3, [pc, #292]	@ (80061a8 <HAL_I2C_Master_Receive+0x1e4>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 f98b 	bl	80073a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800608e:	e05c      	b.n	800614a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	6a39      	ldr	r1, [r7, #32]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 f819 	bl	80070cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e07c      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d034      	beq.n	800614a <HAL_I2C_Master_Receive+0x186>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d130      	bne.n	800614a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2180      	movs	r1, #128	@ 0x80
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 ff07 	bl	8006f06 <I2C_WaitOnFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e04d      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2bff      	cmp	r3, #255	@ 0xff
 800610a:	d90e      	bls.n	800612a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	22ff      	movs	r2, #255	@ 0xff
 8006110:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006116:	b2da      	uxtb	r2, r3
 8006118:	8979      	ldrh	r1, [r7, #10]
 800611a:	2300      	movs	r3, #0
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f001 f93e 	bl	80073a4 <I2C_TransferConfig>
 8006128:	e00f      	b.n	800614a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006138:	b2da      	uxtb	r2, r3
 800613a:	8979      	ldrh	r1, [r7, #10]
 800613c:	2300      	movs	r3, #0
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 f92d 	bl	80073a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d19d      	bne.n	8006090 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	6a39      	ldr	r1, [r7, #32]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 ff74 	bl	8007046 <I2C_WaitOnSTOPFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e01a      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2220      	movs	r2, #32
 800616e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <HAL_I2C_Master_Receive+0x1e8>)
 800617c:	400b      	ands	r3, r1
 800617e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e000      	b.n	800619e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800619c:	2302      	movs	r3, #2
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	80002400 	.word	0x80002400
 80061ac:	fe00e800 	.word	0xfe00e800

080061b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	68f9      	ldr	r1, [r7, #12]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
  }
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d010      	beq.n	800622a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006218:	f043 0201 	orr.w	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006228:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	0a9b      	lsrs	r3, r3, #10
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d010      	beq.n	8006258 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	09db      	lsrs	r3, r3, #7
 800623a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	f043 0208 	orr.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006256:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	0a5b      	lsrs	r3, r3, #9
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d010      	beq.n	8006286 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	09db      	lsrs	r3, r3, #7
 8006268:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006274:	f043 0202 	orr.w	r2, r3, #2
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006284:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 030b 	and.w	r3, r3, #11
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006296:	68f9      	ldr	r1, [r7, #12]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fcdb 	bl	8006c54 <I2C_ITError>
  }
}
 800629e:	bf00      	nop
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
 80062da:	4613      	mov	r3, r2
 80062dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <I2C_Slave_ISR_IT+0x24>
 8006346:	2302      	movs	r3, #2
 8006348:	e0ed      	b.n	8006526 <I2C_Slave_ISR_IT+0x200>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800636a:	6939      	ldr	r1, [r7, #16]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9c1 	bl	80066f4 <I2C_ITSlaveCplt>
 8006372:	e0d3      	b.n	800651c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	2b00      	cmp	r3, #0
 800637e:	d04d      	beq.n	800641c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	091b      	lsrs	r3, r3, #4
 8006384:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006388:	2b00      	cmp	r3, #0
 800638a:	d047      	beq.n	800641c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d128      	bne.n	80063e8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b28      	cmp	r3, #40	@ 0x28
 80063a0:	d108      	bne.n	80063b4 <I2C_Slave_ISR_IT+0x8e>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063a8:	d104      	bne.n	80063b4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80063aa:	6939      	ldr	r1, [r7, #16]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fbfb 	bl	8006ba8 <I2C_ITListenCplt>
 80063b2:	e032      	b.n	800641a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b29      	cmp	r3, #41	@ 0x29
 80063be:	d10e      	bne.n	80063de <I2C_Slave_ISR_IT+0xb8>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063c6:	d00a      	beq.n	80063de <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2210      	movs	r2, #16
 80063ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fd56 	bl	8006e82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f92d 	bl	8006636 <I2C_ITSlaveSeqCplt>
 80063dc:	e01d      	b.n	800641a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80063e6:	e096      	b.n	8006516 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2210      	movs	r2, #16
 80063ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f4:	f043 0204 	orr.w	r2, r3, #4
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <I2C_Slave_ISR_IT+0xe6>
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006408:	f040 8085 	bne.w	8006516 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006410:	4619      	mov	r1, r3
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fc1e 	bl	8006c54 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006418:	e07d      	b.n	8006516 <I2C_Slave_ISR_IT+0x1f0>
 800641a:	e07c      	b.n	8006516 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	089b      	lsrs	r3, r3, #2
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d030      	beq.n	800648a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	089b      	lsrs	r3, r3, #2
 800642c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02a      	beq.n	800648a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d018      	beq.n	8006470 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d14f      	bne.n	800651a <I2C_Slave_ISR_IT+0x1f4>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006480:	d04b      	beq.n	800651a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f8d7 	bl	8006636 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006488:	e047      	b.n	800651a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	08db      	lsrs	r3, r3, #3
 800649a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80064a2:	6939      	ldr	r1, [r7, #16]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f842 	bl	800652e <I2C_ITAddrCplt>
 80064aa:	e037      	b.n	800651c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d031      	beq.n	800651c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d02b      	beq.n	800651c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d018      	beq.n	8006500 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80064fe:	e00d      	b.n	800651c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006506:	d002      	beq.n	800650e <I2C_Slave_ISR_IT+0x1e8>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f891 	bl	8006636 <I2C_ITSlaveSeqCplt>
 8006514:	e002      	b.n	800651c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006516:	bf00      	nop
 8006518:	e000      	b.n	800651c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800651a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006544:	2b28      	cmp	r3, #40	@ 0x28
 8006546:	d16a      	bne.n	800661e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	b29b      	uxth	r3, r3
 8006562:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006566:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006574:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006582:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d138      	bne.n	80065fe <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800658c:	897b      	ldrh	r3, [r7, #10]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	b29a      	uxth	r2, r3
 8006592:	89bb      	ldrh	r3, [r7, #12]
 8006594:	4053      	eors	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	f003 0306 	and.w	r3, r3, #6
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11c      	bne.n	80065da <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80065a0:	897b      	ldrh	r3, [r7, #10]
 80065a2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d13b      	bne.n	800662e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2208      	movs	r2, #8
 80065c2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065cc:	89ba      	ldrh	r2, [r7, #12]
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fe7b 	bl	80062ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065d8:	e029      	b.n	800662e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80065da:	893b      	ldrh	r3, [r7, #8]
 80065dc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ff10 	bl	8007408 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065f0:	89ba      	ldrh	r2, [r7, #12]
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fe69 	bl	80062ce <HAL_I2C_AddrCallback>
}
 80065fc:	e017      	b.n	800662e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 ff00 	bl	8007408 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006610:	89ba      	ldrh	r2, [r7, #12]
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff fe59 	bl	80062ce <HAL_I2C_AddrCallback>
}
 800661c:	e007      	b.n	800662e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2208      	movs	r2, #8
 8006624:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	0b9b      	lsrs	r3, r3, #14
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e00d      	b.n	8006688 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	0bdb      	lsrs	r3, r3, #15
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006686:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b29      	cmp	r3, #41	@ 0x29
 8006692:	d112      	bne.n	80066ba <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2228      	movs	r2, #40	@ 0x28
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2221      	movs	r2, #33	@ 0x21
 80066a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066a2:	2101      	movs	r1, #1
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 feaf 	bl	8007408 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fdf7 	bl	80062a6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80066b8:	e017      	b.n	80066ea <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066c4:	d111      	bne.n	80066ea <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2228      	movs	r2, #40	@ 0x28
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2222      	movs	r2, #34	@ 0x22
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066d4:	2102      	movs	r1, #2
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fe96 	bl	8007408 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff fde8 	bl	80062ba <HAL_I2C_SlaveRxCpltCallback>
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006716:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2220      	movs	r2, #32
 800671e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	2b21      	cmp	r3, #33	@ 0x21
 8006724:	d002      	beq.n	800672c <I2C_ITSlaveCplt+0x38>
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b29      	cmp	r3, #41	@ 0x29
 800672a:	d108      	bne.n	800673e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800672c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fe69 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2221      	movs	r2, #33	@ 0x21
 800673a:	631a      	str	r2, [r3, #48]	@ 0x30
 800673c:	e019      	b.n	8006772 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	2b22      	cmp	r3, #34	@ 0x22
 8006742:	d002      	beq.n	800674a <I2C_ITSlaveCplt+0x56>
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	2b2a      	cmp	r3, #42	@ 0x2a
 8006748:	d108      	bne.n	800675c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800674a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fe5a 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2222      	movs	r2, #34	@ 0x22
 8006758:	631a      	str	r2, [r3, #48]	@ 0x30
 800675a:	e00a      	b.n	8006772 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	2b28      	cmp	r3, #40	@ 0x28
 8006760:	d107      	bne.n	8006772 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006762:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fe4e 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006780:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6859      	ldr	r1, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b80      	ldr	r3, [pc, #512]	@ (8006990 <I2C_ITSlaveCplt+0x29c>)
 800678e:	400b      	ands	r3, r1
 8006790:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fb75 	bl	8006e82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	0b9b      	lsrs	r3, r3, #14
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d07a      	beq.n	800689a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8112 	beq.w	80069e2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a73      	ldr	r2, [pc, #460]	@ (8006994 <I2C_ITSlaveCplt+0x2a0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d059      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a71      	ldr	r2, [pc, #452]	@ (8006998 <I2C_ITSlaveCplt+0x2a4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d053      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6f      	ldr	r2, [pc, #444]	@ (800699c <I2C_ITSlaveCplt+0x2a8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d04d      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6d      	ldr	r2, [pc, #436]	@ (80069a0 <I2C_ITSlaveCplt+0x2ac>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d047      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6b      	ldr	r2, [pc, #428]	@ (80069a4 <I2C_ITSlaveCplt+0x2b0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d041      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a69      	ldr	r2, [pc, #420]	@ (80069a8 <I2C_ITSlaveCplt+0x2b4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d03b      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a67      	ldr	r2, [pc, #412]	@ (80069ac <I2C_ITSlaveCplt+0x2b8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d035      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a65      	ldr	r2, [pc, #404]	@ (80069b0 <I2C_ITSlaveCplt+0x2bc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d02f      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a63      	ldr	r2, [pc, #396]	@ (80069b4 <I2C_ITSlaveCplt+0x2c0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d029      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a61      	ldr	r2, [pc, #388]	@ (80069b8 <I2C_ITSlaveCplt+0x2c4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d023      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a5f      	ldr	r2, [pc, #380]	@ (80069bc <I2C_ITSlaveCplt+0x2c8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a5d      	ldr	r2, [pc, #372]	@ (80069c0 <I2C_ITSlaveCplt+0x2cc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d017      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a5b      	ldr	r2, [pc, #364]	@ (80069c4 <I2C_ITSlaveCplt+0x2d0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d011      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a59      	ldr	r2, [pc, #356]	@ (80069c8 <I2C_ITSlaveCplt+0x2d4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a57      	ldr	r2, [pc, #348]	@ (80069cc <I2C_ITSlaveCplt+0x2d8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d005      	beq.n	800687e <I2C_ITSlaveCplt+0x18a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a55      	ldr	r2, [pc, #340]	@ (80069d0 <I2C_ITSlaveCplt+0x2dc>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d105      	bne.n	800688a <I2C_ITSlaveCplt+0x196>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b29b      	uxth	r3, r3
 8006888:	e004      	b.n	8006894 <I2C_ITSlaveCplt+0x1a0>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	b29b      	uxth	r3, r3
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8006898:	e0a3      	b.n	80069e2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	0bdb      	lsrs	r3, r3, #15
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 809d 	beq.w	80069e2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8090 	beq.w	80069e2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a32      	ldr	r2, [pc, #200]	@ (8006994 <I2C_ITSlaveCplt+0x2a0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d059      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a30      	ldr	r2, [pc, #192]	@ (8006998 <I2C_ITSlaveCplt+0x2a4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d053      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2e      	ldr	r2, [pc, #184]	@ (800699c <I2C_ITSlaveCplt+0x2a8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04d      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2c      	ldr	r2, [pc, #176]	@ (80069a0 <I2C_ITSlaveCplt+0x2ac>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d047      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <I2C_ITSlaveCplt+0x2b0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d041      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a28      	ldr	r2, [pc, #160]	@ (80069a8 <I2C_ITSlaveCplt+0x2b4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d03b      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a26      	ldr	r2, [pc, #152]	@ (80069ac <I2C_ITSlaveCplt+0x2b8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d035      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a24      	ldr	r2, [pc, #144]	@ (80069b0 <I2C_ITSlaveCplt+0x2bc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02f      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a22      	ldr	r2, [pc, #136]	@ (80069b4 <I2C_ITSlaveCplt+0x2c0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d029      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a20      	ldr	r2, [pc, #128]	@ (80069b8 <I2C_ITSlaveCplt+0x2c4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d023      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <I2C_ITSlaveCplt+0x2c8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01d      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	@ (80069c0 <I2C_ITSlaveCplt+0x2cc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d017      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1a      	ldr	r2, [pc, #104]	@ (80069c4 <I2C_ITSlaveCplt+0x2d0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d011      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a18      	ldr	r2, [pc, #96]	@ (80069c8 <I2C_ITSlaveCplt+0x2d4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <I2C_ITSlaveCplt+0x2d8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d005      	beq.n	8006982 <I2C_ITSlaveCplt+0x28e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a14      	ldr	r2, [pc, #80]	@ (80069d0 <I2C_ITSlaveCplt+0x2dc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d128      	bne.n	80069d4 <I2C_ITSlaveCplt+0x2e0>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b29b      	uxth	r3, r3
 800698c:	e027      	b.n	80069de <I2C_ITSlaveCplt+0x2ea>
 800698e:	bf00      	nop
 8006990:	fe00e800 	.word	0xfe00e800
 8006994:	40020010 	.word	0x40020010
 8006998:	40020028 	.word	0x40020028
 800699c:	40020040 	.word	0x40020040
 80069a0:	40020058 	.word	0x40020058
 80069a4:	40020070 	.word	0x40020070
 80069a8:	40020088 	.word	0x40020088
 80069ac:	400200a0 	.word	0x400200a0
 80069b0:	400200b8 	.word	0x400200b8
 80069b4:	40020410 	.word	0x40020410
 80069b8:	40020428 	.word	0x40020428
 80069bc:	40020440 	.word	0x40020440
 80069c0:	40020458 	.word	0x40020458
 80069c4:	40020470 	.word	0x40020470
 80069c8:	40020488 	.word	0x40020488
 80069cc:	400204a0 	.word	0x400204a0
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	089b      	lsrs	r3, r3, #2
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d020      	beq.n	8006a30 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 0304 	bic.w	r3, r3, #4
 80069f4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00c      	beq.n	8006a30 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	f043 0204 	orr.w	r2, r3, #4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d04a      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d044      	beq.n	8006ae8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d128      	bne.n	8006aba <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b28      	cmp	r3, #40	@ 0x28
 8006a72:	d108      	bne.n	8006a86 <I2C_ITSlaveCplt+0x392>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a7a:	d104      	bne.n	8006a86 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a7c:	6979      	ldr	r1, [r7, #20]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f892 	bl	8006ba8 <I2C_ITListenCplt>
 8006a84:	e030      	b.n	8006ae8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b29      	cmp	r3, #41	@ 0x29
 8006a90:	d10e      	bne.n	8006ab0 <I2C_ITSlaveCplt+0x3bc>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a98:	d00a      	beq.n	8006ab0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2210      	movs	r2, #16
 8006aa0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9ed 	bl	8006e82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fdc4 	bl	8006636 <I2C_ITSlaveSeqCplt>
 8006aae:	e01b      	b.n	8006ae8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2210      	movs	r2, #16
 8006ab6:	61da      	str	r2, [r3, #28]
 8006ab8:	e016      	b.n	8006ae8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac6:	f043 0204 	orr.w	r2, r3, #4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <I2C_ITSlaveCplt+0x3e8>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ada:	d105      	bne.n	8006ae8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8b6 	bl	8006c54 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d010      	beq.n	8006b20 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f8a5 	bl	8006c54 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b28      	cmp	r3, #40	@ 0x28
 8006b14:	d141      	bne.n	8006b9a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f845 	bl	8006ba8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b1e:	e03c      	b.n	8006b9a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b28:	d014      	beq.n	8006b54 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fd83 	bl	8006636 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba4 <I2C_ITSlaveCplt+0x4b0>)
 8006b34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fbcc 	bl	80062ea <HAL_I2C_ListenCpltCallback>
}
 8006b52:	e022      	b.n	8006b9a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b22      	cmp	r3, #34	@ 0x22
 8006b5e:	d10e      	bne.n	8006b7e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fb9f 	bl	80062ba <HAL_I2C_SlaveRxCpltCallback>
}
 8006b7c:	e00d      	b.n	8006b9a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fb86 	bl	80062a6 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b9a:	bf00      	nop
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	ffff0000 	.word	0xffff0000

08006ba8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a26      	ldr	r2, [pc, #152]	@ (8006c50 <I2C_ITListenCplt+0xa8>)
 8006bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	089b      	lsrs	r3, r3, #2
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d022      	beq.n	8006c26 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1e:	f043 0204 	orr.w	r2, r3, #4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c26:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fbec 	bl	8007408 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2210      	movs	r2, #16
 8006c36:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff fb52 	bl	80062ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	ffff0000 	.word	0xffff0000

08006c54 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c64:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a6d      	ldr	r2, [pc, #436]	@ (8006e28 <I2C_ITError+0x1d4>)
 8006c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	2b28      	cmp	r3, #40	@ 0x28
 8006c8a:	d005      	beq.n	8006c98 <I2C_ITError+0x44>
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b29      	cmp	r3, #41	@ 0x29
 8006c90:	d002      	beq.n	8006c98 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c96:	d10b      	bne.n	8006cb0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c98:	2103      	movs	r1, #3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fbb4 	bl	8007408 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2228      	movs	r2, #40	@ 0x28
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a60      	ldr	r2, [pc, #384]	@ (8006e2c <I2C_ITError+0x1d8>)
 8006cac:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cae:	e030      	b.n	8006d12 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006cb0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fba7 	bl	8007408 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8e1 	bl	8006e82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b60      	cmp	r3, #96	@ 0x60
 8006cca:	d01f      	beq.n	8006d0c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d114      	bne.n	8006d0c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d109      	bne.n	8006d04 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfc:	f043 0204 	orr.w	r2, r3, #4
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d039      	beq.n	8006d94 <I2C_ITError+0x140>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b11      	cmp	r3, #17
 8006d24:	d002      	beq.n	8006d2c <I2C_ITError+0xd8>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b21      	cmp	r3, #33	@ 0x21
 8006d2a:	d133      	bne.n	8006d94 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d3a:	d107      	bne.n	8006d4c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fd fd2d 	bl	80047b0 <HAL_DMA_GetState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d017      	beq.n	8006d8c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	4a33      	ldr	r2, [pc, #204]	@ (8006e30 <I2C_ITError+0x1dc>)
 8006d62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fc fbad 	bl	80034d0 <HAL_DMA_Abort_IT>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d04d      	beq.n	8006e18 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d86:	4610      	mov	r0, r2
 8006d88:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d8a:	e045      	b.n	8006e18 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f851 	bl	8006e34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d92:	e041      	b.n	8006e18 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d039      	beq.n	8006e10 <I2C_ITError+0x1bc>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b12      	cmp	r3, #18
 8006da0:	d002      	beq.n	8006da8 <I2C_ITError+0x154>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b22      	cmp	r3, #34	@ 0x22
 8006da6:	d133      	bne.n	8006e10 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db6:	d107      	bne.n	8006dc8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dc6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fd fcef 	bl	80047b0 <HAL_DMA_GetState>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d017      	beq.n	8006e08 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	4a14      	ldr	r2, [pc, #80]	@ (8006e30 <I2C_ITError+0x1dc>)
 8006dde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fc fb6f 	bl	80034d0 <HAL_DMA_Abort_IT>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d011      	beq.n	8006e1c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e02:	4610      	mov	r0, r2
 8006e04:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e06:	e009      	b.n	8006e1c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f813 	bl	8006e34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e0e:	e005      	b.n	8006e1c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f80f 	bl	8006e34 <I2C_TreatErrorCallback>
  }
}
 8006e16:	e002      	b.n	8006e1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e18:	bf00      	nop
 8006e1a:	e000      	b.n	8006e1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e1c:	bf00      	nop
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	ffff0000 	.word	0xffff0000
 8006e2c:	08006327 	.word	0x08006327
 8006e30:	08006ecb 	.word	0x08006ecb

08006e34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b60      	cmp	r3, #96	@ 0x60
 8006e46:	d10e      	bne.n	8006e66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fa57 	bl	8006312 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e64:	e009      	b.n	8006e7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fa42 	bl	80062fe <HAL_I2C_ErrorCallback>
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d103      	bne.n	8006ea0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d007      	beq.n	8006ebe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	619a      	str	r2, [r3, #24]
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ff9b 	bl	8006e34 <I2C_TreatErrorCallback>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f16:	e03b      	b.n	8006f90 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f961 	bl	80071e4 <I2C_IsErrorOccurred>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e041      	b.n	8006fb0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d02d      	beq.n	8006f90 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f34:	f7fa fd2e 	bl	8001994 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d302      	bcc.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x44>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d122      	bne.n	8006f90 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4013      	ands	r3, r2
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d113      	bne.n	8006f90 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6c:	f043 0220 	orr.w	r2, r3, #32
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e00f      	b.n	8006fb0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	bf0c      	ite	eq
 8006fa0:	2301      	moveq	r3, #1
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d0b4      	beq.n	8006f18 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fc4:	e033      	b.n	800702e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f90a 	bl	80071e4 <I2C_IsErrorOccurred>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e031      	b.n	800703e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d025      	beq.n	800702e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fa fcd7 	bl	8001994 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d11a      	bne.n	800702e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b02      	cmp	r3, #2
 8007004:	d013      	beq.n	800702e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e007      	b.n	800703e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b02      	cmp	r3, #2
 800703a:	d1c4      	bne.n	8006fc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007052:	e02f      	b.n	80070b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f8c3 	bl	80071e4 <I2C_IsErrorOccurred>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e02d      	b.n	80070c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007068:	f7fa fc94 	bl	8001994 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d11a      	bne.n	80070b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b20      	cmp	r3, #32
 800708a:	d013      	beq.n	80070b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e007      	b.n	80070c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d1c8      	bne.n	8007054 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80070dc:	e071      	b.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f87e 	bl	80071e4 <I2C_IsErrorOccurred>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d13b      	bne.n	8007178 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d138      	bne.n	8007178 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b04      	cmp	r3, #4
 8007112:	d105      	bne.n	8007120 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f003 0310 	and.w	r3, r3, #16
 800712a:	2b10      	cmp	r3, #16
 800712c:	d121      	bne.n	8007172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2210      	movs	r2, #16
 8007134:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2204      	movs	r2, #4
 800713a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2220      	movs	r2, #32
 8007142:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b24      	ldr	r3, [pc, #144]	@ (80071e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007150:	400b      	ands	r3, r1
 8007152:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
 8007170:	e002      	b.n	8007178 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007178:	f7fa fc0c 	bl	8001994 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d119      	bne.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d116      	bne.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d00f      	beq.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a6:	f043 0220 	orr.w	r2, r3, #32
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d002      	beq.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d083      	beq.n	80070de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	fe00e800 	.word	0xfe00e800

080071e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	@ 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b00      	cmp	r3, #0
 800720e:	d068      	beq.n	80072e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2210      	movs	r2, #16
 8007216:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007218:	e049      	b.n	80072ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d045      	beq.n	80072ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fa fbb7 	bl	8001994 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <I2C_IsErrorOccurred+0x54>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d13a      	bne.n	80072ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007242:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800724a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800725a:	d121      	bne.n	80072a0 <I2C_IsErrorOccurred+0xbc>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007262:	d01d      	beq.n	80072a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d01a      	beq.n	80072a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007278:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800727a:	f7fa fb8b 	bl	8001994 <HAL_GetTick>
 800727e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007280:	e00e      	b.n	80072a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007282:	f7fa fb87 	bl	8001994 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b19      	cmp	r3, #25
 800728e:	d907      	bls.n	80072a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	f043 0320 	orr.w	r3, r3, #32
 8007296:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800729e:	e006      	b.n	80072ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d1e9      	bne.n	8007282 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d003      	beq.n	80072c4 <I2C_IsErrorOccurred+0xe0>
 80072bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0aa      	beq.n	800721a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2220      	movs	r2, #32
 80072d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f043 0304 	orr.w	r3, r3, #4
 80072da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	f043 0308 	orr.w	r3, r3, #8
 800731c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007326:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	f043 0302 	orr.w	r3, r3, #2
 800733e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01c      	beq.n	8007392 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff fd92 	bl	8006e82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6859      	ldr	r1, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <I2C_IsErrorOccurred+0x1bc>)
 800736a:	400b      	ands	r3, r1
 800736c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	431a      	orrs	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007396:	4618      	mov	r0, r3
 8007398:	3728      	adds	r7, #40	@ 0x28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	fe00e800 	.word	0xfe00e800

080073a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	817b      	strh	r3, [r7, #10]
 80073b2:	4613      	mov	r3, r2
 80073b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073b6:	897b      	ldrh	r3, [r7, #10]
 80073b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073bc:	7a7b      	ldrb	r3, [r7, #9]
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073c4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073d2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	0d5b      	lsrs	r3, r3, #21
 80073de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80073e2:	4b08      	ldr	r3, [pc, #32]	@ (8007404 <I2C_TransferConfig+0x60>)
 80073e4:	430b      	orrs	r3, r1
 80073e6:	43db      	mvns	r3, r3
 80073e8:	ea02 0103 	and.w	r1, r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	03ff63ff 	.word	0x03ff63ff

08007408 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007418:	887b      	ldrh	r3, [r7, #2]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00f      	beq.n	8007442 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007428:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007436:	2b28      	cmp	r3, #40	@ 0x28
 8007438:	d003      	beq.n	8007442 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007440:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00f      	beq.n	800746c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007452:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007460:	2b28      	cmp	r3, #40	@ 0x28
 8007462:	d003      	beq.n	800746c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800746a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800746c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007470:	2b00      	cmp	r3, #0
 8007472:	da03      	bge.n	800747c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800747a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800747c:	887b      	ldrh	r3, [r7, #2]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d103      	bne.n	800748a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007488:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800748a:	887b      	ldrh	r3, [r7, #2]
 800748c:	2b20      	cmp	r3, #32
 800748e:	d103      	bne.n	8007498 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f043 0320 	orr.w	r3, r3, #32
 8007496:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007498:	887b      	ldrh	r3, [r7, #2]
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d103      	bne.n	80074a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6819      	ldr	r1, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	43da      	mvns	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	400a      	ands	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d138      	bne.n	800754c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e032      	b.n	800754e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2224      	movs	r2, #36	@ 0x24
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0201 	bic.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b20      	cmp	r3, #32
 800756e:	d139      	bne.n	80075e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800757a:	2302      	movs	r3, #2
 800757c:	e033      	b.n	80075e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2224      	movs	r2, #36	@ 0x24
 800758a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80075ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af02      	add	r7, sp, #8
 80075f8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e0fe      	b.n	8007802 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f009 fef3 	bl	8011404 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2203      	movs	r2, #3
 8007622:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f006 faad 	bl	800db8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7c1a      	ldrb	r2, [r3, #16]
 8007638:	f88d 2000 	strb.w	r2, [sp]
 800763c:	3304      	adds	r3, #4
 800763e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007640:	f006 f97e 	bl	800d940 <USB_CoreInit>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e0d5      	b.n	8007802 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f006 faa5 	bl	800dbac <USB_SetCurrentMode>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0c6      	b.n	8007802 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]
 8007678:	e04a      	b.n	8007710 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800767a:	7bfa      	ldrb	r2, [r7, #15]
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	3315      	adds	r3, #21
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800768e:	7bfa      	ldrb	r2, [r7, #15]
 8007690:	6879      	ldr	r1, [r7, #4]
 8007692:	4613      	mov	r3, r2
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	3314      	adds	r3, #20
 800769e:	7bfa      	ldrb	r2, [r7, #15]
 80076a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80076a2:	7bfa      	ldrb	r2, [r7, #15]
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	b298      	uxth	r0, r3
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	332e      	adds	r3, #46	@ 0x2e
 80076b6:	4602      	mov	r2, r0
 80076b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80076ba:	7bfa      	ldrb	r2, [r7, #15]
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	3318      	adds	r3, #24
 80076ca:	2200      	movs	r2, #0
 80076cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80076ce:	7bfa      	ldrb	r2, [r7, #15]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	331c      	adds	r3, #28
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80076e2:	7bfa      	ldrb	r2, [r7, #15]
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	3320      	adds	r3, #32
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80076f6:	7bfa      	ldrb	r2, [r7, #15]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	3324      	adds	r3, #36	@ 0x24
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	3301      	adds	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	791b      	ldrb	r3, [r3, #4]
 8007714:	7bfa      	ldrb	r2, [r7, #15]
 8007716:	429a      	cmp	r2, r3
 8007718:	d3af      	bcc.n	800767a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	e044      	b.n	80077aa <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007720:	7bfa      	ldrb	r2, [r7, #15]
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007736:	7bfa      	ldrb	r2, [r7, #15]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	00db      	lsls	r3, r3, #3
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007748:	7bfa      	ldrb	r2, [r7, #15]
 800774a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800774c:	7bfa      	ldrb	r2, [r7, #15]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007762:	7bfa      	ldrb	r2, [r7, #15]
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	440b      	add	r3, r1
 8007770:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007778:	7bfa      	ldrb	r2, [r7, #15]
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800778e:	7bfa      	ldrb	r2, [r7, #15]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	3301      	adds	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	791b      	ldrb	r3, [r3, #4]
 80077ae:	7bfa      	ldrb	r2, [r7, #15]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d3b5      	bcc.n	8007720 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	7c1a      	ldrb	r2, [r3, #16]
 80077bc:	f88d 2000 	strb.w	r2, [sp]
 80077c0:	3304      	adds	r3, #4
 80077c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077c4:	f006 fa3e 	bl	800dc44 <USB_DevInit>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e013      	b.n	8007802 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7b1b      	ldrb	r3, [r3, #12]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d102      	bne.n	80077f6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f96f 	bl	8008ad4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f007 fa81 	bl	800ed02 <USB_DevDisconnect>

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_PCD_Start+0x1c>
 8007822:	2302      	movs	r3, #2
 8007824:	e022      	b.n	800786c <HAL_PCD_Start+0x62>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800783e:	2b01      	cmp	r3, #1
 8007840:	d105      	bne.n	800784e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f006 f988 	bl	800db68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f007 fa2f 	bl	800ecc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b08d      	sub	sp, #52	@ 0x34
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f007 faed 	bl	800ee6a <USB_GetMode>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	f040 84b9 	bne.w	800820a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f007 fa51 	bl	800ed44 <USB_ReadInterrupts>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 84af 	beq.w	8008208 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f007 fa3e 	bl	800ed44 <USB_ReadInterrupts>
 80078c8:	4603      	mov	r3, r0
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d107      	bne.n	80078e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f002 0202 	and.w	r2, r2, #2
 80078e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f007 fa2c 	bl	800ed44 <USB_ReadInterrupts>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f003 0310 	and.w	r3, r3, #16
 80078f2:	2b10      	cmp	r3, #16
 80078f4:	d161      	bne.n	80079ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0210 	bic.w	r2, r2, #16
 8007904:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f003 020f 	and.w	r2, r3, #15
 8007912:	4613      	mov	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	3304      	adds	r3, #4
 8007924:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800792c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007930:	d124      	bne.n	800797c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d035      	beq.n	80079aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	6a38      	ldr	r0, [r7, #32]
 8007952:	f007 f863 	bl	800ea1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007962:	441a      	add	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	695a      	ldr	r2, [r3, #20]
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	091b      	lsrs	r3, r3, #4
 8007970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007974:	441a      	add	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	615a      	str	r2, [r3, #20]
 800797a:	e016      	b.n	80079aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007982:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007986:	d110      	bne.n	80079aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800798e:	2208      	movs	r2, #8
 8007990:	4619      	mov	r1, r3
 8007992:	6a38      	ldr	r0, [r7, #32]
 8007994:	f007 f842 	bl	800ea1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	091b      	lsrs	r3, r3, #4
 80079a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079a4:	441a      	add	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0210 	orr.w	r2, r2, #16
 80079b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f007 f9c0 	bl	800ed44 <USB_ReadInterrupts>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079ce:	f040 80a7 	bne.w	8007b20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f007 f9c5 	bl	800ed6a <USB_ReadDevAllOutEpInterrupt>
 80079e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80079e2:	e099      	b.n	8007b18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80079e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 808e 	beq.w	8007b0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f007 f9e9 	bl	800edd2 <USB_ReadDevOutEPInterrupt>
 8007a00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00c      	beq.n	8007a26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007a1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fed1 	bl	80087c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00c      	beq.n	8007a4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	2308      	movs	r3, #8
 8007a40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 ffa7 	bl	8008998 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a60:	461a      	mov	r2, r3
 8007a62:	2310      	movs	r3, #16
 8007a64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d030      	beq.n	8007ad2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a78:	2b80      	cmp	r3, #128	@ 0x80
 8007a7a:	d109      	bne.n	8007a90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007a8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a92:	4613      	mov	r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	78db      	ldrb	r3, [r3, #3]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d108      	bne.n	8007ac0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f009 fdc8 	bl	8011650 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007acc:	461a      	mov	r2, r3
 8007ace:	2302      	movs	r3, #2
 8007ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2320      	movs	r3, #32
 8007aec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b04:	461a      	mov	r2, r3
 8007b06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007b0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f47f af62 	bne.w	80079e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f007 f90d 	bl	800ed44 <USB_ReadInterrupts>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b34:	f040 80db 	bne.w	8007cee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f007 f92e 	bl	800ed9e <USB_ReadDevAllInEpInterrupt>
 8007b42:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007b48:	e0cd      	b.n	8007ce6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80c2 	beq.w	8007cda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f007 f954 	bl	800ee0e <USB_ReadDevInEPInterrupt>
 8007b66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d057      	beq.n	8007c22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	2201      	movs	r2, #1
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	43db      	mvns	r3, r3
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b92:	4013      	ands	r3, r2
 8007b94:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	799b      	ldrb	r3, [r3, #6]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d132      	bne.n	8007c16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	3320      	adds	r3, #32
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4403      	add	r3, r0
 8007bd0:	331c      	adds	r3, #28
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4419      	add	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4403      	add	r3, r0
 8007be4:	3320      	adds	r3, #32
 8007be6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d113      	bne.n	8007c16 <HAL_PCD_IRQHandler+0x3a2>
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	3324      	adds	r3, #36	@ 0x24
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d108      	bne.n	8007c16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2101      	movs	r1, #1
 8007c12:	f007 f95d 	bl	800eed0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f009 fc92 	bl	8011546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c38:	461a      	mov	r2, r3
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d008      	beq.n	8007c5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c54:	461a      	mov	r2, r3
 8007c56:	2310      	movs	r3, #16
 8007c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c70:	461a      	mov	r2, r3
 8007c72:	2340      	movs	r3, #64	@ 0x40
 8007c74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d023      	beq.n	8007cc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c82:	6a38      	ldr	r0, [r7, #32]
 8007c84:	f006 f93c 	bl	800df00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	3310      	adds	r3, #16
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	4413      	add	r3, r2
 8007c98:	3304      	adds	r3, #4
 8007c9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	78db      	ldrb	r3, [r3, #3]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d108      	bne.n	8007cb6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f009 fcdf 	bl	8011674 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fcea 	bl	80086ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	3301      	adds	r3, #1
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f af2e 	bne.w	8007b4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f007 f826 	bl	800ed44 <USB_ReadInterrupts>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d02:	d122      	bne.n	8007d4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d108      	bne.n	8007d34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fef5 	bl	8008b1c <HAL_PCDEx_LPM_Callback>
 8007d32:	e002      	b.n	8007d3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f009 fc7d 	bl	8011634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695a      	ldr	r2, [r3, #20]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f006 fff8 	bl	800ed44 <USB_ReadInterrupts>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d5e:	d112      	bne.n	8007d86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d102      	bne.n	8007d76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f009 fc39 	bl	80115e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f006 ffda 	bl	800ed44 <USB_ReadInterrupts>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d9a:	d121      	bne.n	8007de0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007daa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d111      	bne.n	8007dda <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc4:	089b      	lsrs	r3, r3, #2
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fea2 	bl	8008b1c <HAL_PCDEx_LPM_Callback>
 8007dd8:	e002      	b.n	8007de0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f009 fc04 	bl	80115e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f006 ffad 	bl	800ed44 <USB_ReadInterrupts>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df4:	f040 80b7 	bne.w	8007f66 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2110      	movs	r1, #16
 8007e12:	4618      	mov	r0, r3
 8007e14:	f006 f874 	bl	800df00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e1c:	e046      	b.n	8007eac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	69fa      	ldr	r2, [r7, #28]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ea4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	791b      	ldrb	r3, [r3, #4]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d3b2      	bcc.n	8007e1e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ec6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007eca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	7bdb      	ldrb	r3, [r3, #15]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d016      	beq.n	8007f02 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ee4:	f043 030b 	orr.w	r3, r3, #11
 8007ee8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007efa:	f043 030b 	orr.w	r3, r3, #11
 8007efe:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f00:	e015      	b.n	8007f2e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f08:	695a      	ldr	r2, [r3, #20]
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f10:	4619      	mov	r1, r3
 8007f12:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007f16:	4313      	orrs	r3, r2
 8007f18:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f28:	f043 030b 	orr.w	r3, r3, #11
 8007f2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007f50:	461a      	mov	r2, r3
 8007f52:	f006 ffbd 	bl	800eed0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	695a      	ldr	r2, [r3, #20]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f006 feea 	bl	800ed44 <USB_ReadInterrupts>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f7a:	d123      	bne.n	8007fc4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f006 ff81 	bl	800ee88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f006 f831 	bl	800dff2 <USB_GetDevSpeed>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681c      	ldr	r4, [r3, #0]
 8007f9c:	f001 fd9e 	bl	8009adc <HAL_RCC_GetHCLKFreq>
 8007fa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f005 fd3b 	bl	800da24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f009 faf1 	bl	8011596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695a      	ldr	r2, [r3, #20]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f006 febb 	bl	800ed44 <USB_ReadInterrupts>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d10a      	bne.n	8007fee <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f009 face 	bl	801157a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	695a      	ldr	r2, [r3, #20]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f002 0208 	and.w	r2, r2, #8
 8007fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f006 fea6 	bl	800ed44 <USB_ReadInterrupts>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffe:	2b80      	cmp	r3, #128	@ 0x80
 8008000:	d123      	bne.n	800804a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800800e:	2301      	movs	r3, #1
 8008010:	627b      	str	r3, [r7, #36]	@ 0x24
 8008012:	e014      	b.n	800803e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d105      	bne.n	8008038 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	b2db      	uxtb	r3, r3
 8008030:	4619      	mov	r1, r3
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fb0a 	bl	800864c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	3301      	adds	r3, #1
 800803c:	627b      	str	r3, [r7, #36]	@ 0x24
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	791b      	ldrb	r3, [r3, #4]
 8008042:	461a      	mov	r2, r3
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	4293      	cmp	r3, r2
 8008048:	d3e4      	bcc.n	8008014 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f006 fe78 	bl	800ed44 <USB_ReadInterrupts>
 8008054:	4603      	mov	r3, r0
 8008056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800805a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800805e:	d13c      	bne.n	80080da <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008060:	2301      	movs	r3, #1
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24
 8008064:	e02b      	b.n	80080be <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800807a:	4613      	mov	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	3318      	adds	r3, #24
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d115      	bne.n	80080b8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800808c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800808e:	2b00      	cmp	r3, #0
 8008090:	da12      	bge.n	80080b8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	3317      	adds	r3, #23
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 faca 	bl	800864c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d3cd      	bcc.n	8008066 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695a      	ldr	r2, [r3, #20]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80080d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f006 fe30 	bl	800ed44 <USB_ReadInterrupts>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ee:	d156      	bne.n	800819e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080f0:	2301      	movs	r3, #1
 80080f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f4:	e045      	b.n	8008182 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800810a:	4613      	mov	r3, r2
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d12e      	bne.n	800817c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800811e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008120:	2b00      	cmp	r3, #0
 8008122:	da2b      	bge.n	800817c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	0c1a      	lsrs	r2, r3, #16
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800812e:	4053      	eors	r3, r2
 8008130:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008134:	2b00      	cmp	r3, #0
 8008136:	d121      	bne.n	800817c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800813c:	4613      	mov	r3, r2
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800814a:	2201      	movs	r2, #1
 800814c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008174:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008178:	6053      	str	r3, [r2, #4]
            break;
 800817a:	e008      	b.n	800818e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	3301      	adds	r3, #1
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	791b      	ldrb	r3, [r3, #4]
 8008186:	461a      	mov	r2, r3
 8008188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818a:	4293      	cmp	r3, r2
 800818c:	d3b3      	bcc.n	80080f6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695a      	ldr	r2, [r3, #20]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800819c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f006 fdce 	bl	800ed44 <USB_ReadInterrupts>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80081ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b2:	d10a      	bne.n	80081ca <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f009 fa6f 	bl	8011698 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695a      	ldr	r2, [r3, #20]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80081c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f006 fdb8 	bl	800ed44 <USB_ReadInterrupts>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d115      	bne.n	800820a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f009 fa5f 	bl	80116b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6859      	ldr	r1, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	430a      	orrs	r2, r1
 8008204:	605a      	str	r2, [r3, #4]
 8008206:	e000      	b.n	800820a <HAL_PCD_IRQHandler+0x996>
      return;
 8008208:	bf00      	nop
    }
  }
}
 800820a:	3734      	adds	r7, #52	@ 0x34
 800820c:	46bd      	mov	sp, r7
 800820e:	bd90      	pop	{r4, r7, pc}

08008210 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_PCD_SetAddress+0x1a>
 8008226:	2302      	movs	r3, #2
 8008228:	e012      	b.n	8008250 <HAL_PCD_SetAddress+0x40>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f006 fd17 	bl	800ec74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4608      	mov	r0, r1
 8008262:	4611      	mov	r1, r2
 8008264:	461a      	mov	r2, r3
 8008266:	4603      	mov	r3, r0
 8008268:	70fb      	strb	r3, [r7, #3]
 800826a:	460b      	mov	r3, r1
 800826c:	803b      	strh	r3, [r7, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800827a:	2b00      	cmp	r3, #0
 800827c:	da0f      	bge.n	800829e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	f003 020f 	and.w	r2, r3, #15
 8008284:	4613      	mov	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	3310      	adds	r3, #16
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	3304      	adds	r3, #4
 8008294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	705a      	strb	r2, [r3, #1]
 800829c:	e00f      	b.n	80082be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	f003 020f 	and.w	r2, r3, #15
 80082a4:	4613      	mov	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	4413      	add	r3, r2
 80082b4:	3304      	adds	r3, #4
 80082b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80082ca:	883b      	ldrh	r3, [r7, #0]
 80082cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	78ba      	ldrb	r2, [r7, #2]
 80082d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80082ec:	78bb      	ldrb	r3, [r7, #2]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d102      	bne.n	80082f8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_PCD_EP_Open+0xae>
 8008302:	2302      	movs	r3, #2
 8008304:	e00e      	b.n	8008324 <HAL_PCD_EP_Open+0xcc>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	4618      	mov	r0, r3
 8008316:	f005 fe91 	bl	800e03c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008322:	7afb      	ldrb	r3, [r7, #11]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800833c:	2b00      	cmp	r3, #0
 800833e:	da0f      	bge.n	8008360 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	f003 020f 	and.w	r2, r3, #15
 8008346:	4613      	mov	r3, r2
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	3310      	adds	r3, #16
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	3304      	adds	r3, #4
 8008356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	705a      	strb	r2, [r3, #1]
 800835e:	e00f      	b.n	8008380 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	f003 020f 	and.w	r2, r3, #15
 8008366:	4613      	mov	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_PCD_EP_Close+0x6e>
 8008396:	2302      	movs	r3, #2
 8008398:	e00e      	b.n	80083b8 <HAL_PCD_EP_Close+0x8c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68f9      	ldr	r1, [r7, #12]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f005 fecf 	bl	800e14c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	460b      	mov	r3, r1
 80083ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	f003 020f 	and.w	r2, r3, #15
 80083d6:	4613      	mov	r3, r2
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4413      	add	r3, r2
 80083e6:	3304      	adds	r3, #4
 80083e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2200      	movs	r2, #0
 80083fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2200      	movs	r2, #0
 8008400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008402:	7afb      	ldrb	r3, [r7, #11]
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	b2da      	uxtb	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	799b      	ldrb	r3, [r3, #6]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d102      	bne.n	800841c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	799b      	ldrb	r3, [r3, #6]
 8008424:	461a      	mov	r2, r3
 8008426:	6979      	ldr	r1, [r7, #20]
 8008428:	f005 ff6c 	bl	800e304 <USB_EPStartXfer>

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	f003 020f 	and.w	r2, r3, #15
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008458:	681b      	ldr	r3, [r3, #0]
}
 800845a:	4618      	mov	r0, r3
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	460b      	mov	r3, r1
 8008474:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	f003 020f 	and.w	r2, r3, #15
 800847c:	4613      	mov	r3, r2
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	3310      	adds	r3, #16
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	3304      	adds	r3, #4
 800848c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2201      	movs	r2, #1
 80084a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084a6:	7afb      	ldrb	r3, [r7, #11]
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	799b      	ldrb	r3, [r3, #6]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d102      	bne.n	80084c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	799b      	ldrb	r3, [r3, #6]
 80084c8:	461a      	mov	r2, r3
 80084ca:	6979      	ldr	r1, [r7, #20]
 80084cc:	f005 ff1a 	bl	800e304 <USB_EPStartXfer>

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	7912      	ldrb	r2, [r2, #4]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d901      	bls.n	80084f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e04f      	b.n	8008598 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	da0f      	bge.n	8008520 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	f003 020f 	and.w	r2, r3, #15
 8008506:	4613      	mov	r3, r2
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	3310      	adds	r3, #16
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	3304      	adds	r3, #4
 8008516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	705a      	strb	r2, [r3, #1]
 800851e:	e00d      	b.n	800853c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008520:	78fa      	ldrb	r2, [r7, #3]
 8008522:	4613      	mov	r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	3304      	adds	r3, #4
 8008534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2201      	movs	r2, #1
 8008540:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	b2da      	uxtb	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_PCD_EP_SetStall+0x82>
 8008558:	2302      	movs	r3, #2
 800855a:	e01d      	b.n	8008598 <HAL_PCD_EP_SetStall+0xbe>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68f9      	ldr	r1, [r7, #12]
 800856a:	4618      	mov	r0, r3
 800856c:	f006 faae 	bl	800eacc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	7999      	ldrb	r1, [r3, #6]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008588:	461a      	mov	r2, r3
 800858a:	f006 fca1 	bl	800eed0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	7912      	ldrb	r2, [r2, #4]
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d901      	bls.n	80085be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e042      	b.n	8008644 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80085be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da0f      	bge.n	80085e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	f003 020f 	and.w	r2, r3, #15
 80085cc:	4613      	mov	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	3310      	adds	r3, #16
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	4413      	add	r3, r2
 80085da:	3304      	adds	r3, #4
 80085dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	705a      	strb	r2, [r3, #1]
 80085e4:	e00f      	b.n	8008606 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	f003 020f 	and.w	r2, r3, #15
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	4413      	add	r3, r2
 80085fc:	3304      	adds	r3, #4
 80085fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	b2da      	uxtb	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800861e:	2b01      	cmp	r3, #1
 8008620:	d101      	bne.n	8008626 <HAL_PCD_EP_ClrStall+0x86>
 8008622:	2302      	movs	r3, #2
 8008624:	e00e      	b.n	8008644 <HAL_PCD_EP_ClrStall+0xa4>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68f9      	ldr	r1, [r7, #12]
 8008634:	4618      	mov	r0, r3
 8008636:	f006 fab7 	bl	800eba8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	da0c      	bge.n	800867a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	f003 020f 	and.w	r2, r3, #15
 8008666:	4613      	mov	r3, r2
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	3310      	adds	r3, #16
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4413      	add	r3, r2
 8008674:	3304      	adds	r3, #4
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e00c      	b.n	8008694 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	f003 020f 	and.w	r2, r3, #15
 8008680:	4613      	mov	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	4413      	add	r3, r2
 8008690:	3304      	adds	r3, #4
 8008692:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	4618      	mov	r0, r3
 800869c:	f006 f8d6 	bl	800e84c <USB_EPStopXfer>
 80086a0:	4603      	mov	r3, r0
 80086a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80086a4:	7afb      	ldrb	r3, [r7, #11]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b08a      	sub	sp, #40	@ 0x28
 80086b2:	af02      	add	r7, sp, #8
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	3310      	adds	r3, #16
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	3304      	adds	r3, #4
 80086d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	695a      	ldr	r2, [r3, #20]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d901      	bls.n	80086e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e06b      	b.n	80087be <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	691a      	ldr	r2, [r3, #16]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d902      	bls.n	8008702 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	3303      	adds	r3, #3
 8008706:	089b      	lsrs	r3, r3, #2
 8008708:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800870a:	e02a      	b.n	8008762 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	69fa      	ldr	r2, [r7, #28]
 800871e:	429a      	cmp	r2, r3
 8008720:	d902      	bls.n	8008728 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	3303      	adds	r3, #3
 800872c:	089b      	lsrs	r3, r3, #2
 800872e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68d9      	ldr	r1, [r3, #12]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	b2da      	uxtb	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	4603      	mov	r3, r0
 8008744:	6978      	ldr	r0, [r7, #20]
 8008746:	f006 f92b 	bl	800e9a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	441a      	add	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	441a      	add	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	429a      	cmp	r2, r3
 8008776:	d809      	bhi.n	800878c <PCD_WriteEmptyTxFifo+0xde>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	695a      	ldr	r2, [r3, #20]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008780:	429a      	cmp	r2, r3
 8008782:	d203      	bcs.n	800878c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1bf      	bne.n	800870c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	429a      	cmp	r2, r3
 8008796:	d811      	bhi.n	80087bc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	2201      	movs	r2, #1
 80087a0:	fa02 f303 	lsl.w	r3, r2, r3
 80087a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	6939      	ldr	r1, [r7, #16]
 80087b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087b8:	4013      	ands	r3, r2
 80087ba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	333c      	adds	r3, #60	@ 0x3c
 80087e0:	3304      	adds	r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	799b      	ldrb	r3, [r3, #6]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d17b      	bne.n	80088f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b00      	cmp	r3, #0
 8008806:	d015      	beq.n	8008834 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	4a61      	ldr	r2, [pc, #388]	@ (8008990 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800880c:	4293      	cmp	r3, r2
 800880e:	f240 80b9 	bls.w	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80b3 	beq.w	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800882a:	461a      	mov	r2, r3
 800882c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008830:	6093      	str	r3, [r2, #8]
 8008832:	e0a7      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884a:	461a      	mov	r2, r3
 800884c:	2320      	movs	r3, #32
 800884e:	6093      	str	r3, [r2, #8]
 8008850:	e098      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008858:	2b00      	cmp	r3, #0
 800885a:	f040 8093 	bne.w	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4a4b      	ldr	r2, [pc, #300]	@ (8008990 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d90f      	bls.n	8008886 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00a      	beq.n	8008886 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887c:	461a      	mov	r2, r3
 800887e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008882:	6093      	str	r3, [r2, #8]
 8008884:	e07e      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	3304      	adds	r3, #4
 800889a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6a1a      	ldr	r2, [r3, #32]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	0159      	lsls	r1, r3, #5
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	440b      	add	r3, r1
 80088a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088b2:	1ad2      	subs	r2, r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d114      	bne.n	80088e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088d0:	461a      	mov	r2, r3
 80088d2:	2101      	movs	r1, #1
 80088d4:	f006 fafc 	bl	800eed0 <USB_EP0_OutStart>
 80088d8:	e006      	b.n	80088e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	441a      	add	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f008 fe0e 	bl	8011510 <HAL_PCD_DataOutStageCallback>
 80088f4:	e046      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	4a26      	ldr	r2, [pc, #152]	@ (8008994 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d124      	bne.n	8008948 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008914:	461a      	mov	r2, r3
 8008916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800891a:	6093      	str	r3, [r2, #8]
 800891c:	e032      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008934:	461a      	mov	r2, r3
 8008936:	2320      	movs	r3, #32
 8008938:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f008 fde5 	bl	8011510 <HAL_PCD_DataOutStageCallback>
 8008946:	e01d      	b.n	8008984 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d114      	bne.n	8008978 <PCD_EP_OutXfrComplete_int+0x1b0>
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	4613      	mov	r3, r2
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	4413      	add	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	440b      	add	r3, r1
 800895c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008970:	461a      	mov	r2, r3
 8008972:	2100      	movs	r1, #0
 8008974:	f006 faac 	bl	800eed0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f008 fdc6 	bl	8011510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	4f54300a 	.word	0x4f54300a
 8008994:	4f54310a 	.word	0x4f54310a

08008998 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	333c      	adds	r3, #60	@ 0x3c
 80089b0:	3304      	adds	r3, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4a15      	ldr	r2, [pc, #84]	@ (8008a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d90e      	bls.n	80089ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d009      	beq.n	80089ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e4:	461a      	mov	r2, r3
 80089e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f008 fd7d 	bl	80114ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d90c      	bls.n	8008a14 <PCD_EP_OutSetupPacket_int+0x7c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	799b      	ldrb	r3, [r3, #6]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d108      	bne.n	8008a14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2101      	movs	r1, #1
 8008a10:	f006 fa5e 	bl	800eed0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	4f54300a 	.word	0x4f54300a

08008a24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
 8008a30:	4613      	mov	r3, r2
 8008a32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d107      	bne.n	8008a52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008a42:	883b      	ldrh	r3, [r7, #0]
 8008a44:	0419      	lsls	r1, r3, #16
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a50:	e028      	b.n	8008aa4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a58:	0c1b      	lsrs	r3, r3, #16
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e00d      	b.n	8008a82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	3340      	adds	r3, #64	@ 0x40
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
 8008a82:	7bfa      	ldrb	r2, [r7, #15]
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d3ec      	bcc.n	8008a66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008a8c:	883b      	ldrh	r3, [r7, #0]
 8008a8e:	0418      	lsls	r0, r3, #16
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4302      	orrs	r2, r0
 8008a9c:	3340      	adds	r3, #64	@ 0x40
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	460b      	mov	r3, r1
 8008abc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	887a      	ldrh	r2, [r7, #2]
 8008ac4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b02:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <HAL_PCDEx_ActivateLPM+0x44>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	10000003 	.word	0x10000003

08008b1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008b3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d00a      	beq.n	8008b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008b48:	4b16      	ldr	r3, [pc, #88]	@ (8008ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d001      	beq.n	8008b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e01f      	b.n	8008b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e01d      	b.n	8008b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008b5e:	4b11      	ldr	r3, [pc, #68]	@ (8008ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f023 0207 	bic.w	r2, r3, #7
 8008b66:	490f      	ldr	r1, [pc, #60]	@ (8008ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008b6e:	f7f8 ff11 	bl	8001994 <HAL_GetTick>
 8008b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b74:	e009      	b.n	8008b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008b76:	f7f8 ff0d 	bl	8001994 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b84:	d901      	bls.n	8008b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e007      	b.n	8008b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008b8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b96:	d1ee      	bne.n	8008b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	58024800 	.word	0x58024800

08008ba8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008bac:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a04      	ldr	r2, [pc, #16]	@ (8008bc4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bb6:	60d3      	str	r3, [r2, #12]
}
 8008bb8:	bf00      	nop
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	58024800 	.word	0x58024800

08008bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08c      	sub	sp, #48	@ 0x30
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f000 bc48 	b.w	800946c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8088 	beq.w	8008cfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bea:	4b99      	ldr	r3, [pc, #612]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bf4:	4b96      	ldr	r3, [pc, #600]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d007      	beq.n	8008c10 <HAL_RCC_OscConfig+0x48>
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	2b18      	cmp	r3, #24
 8008c04:	d111      	bne.n	8008c2a <HAL_RCC_OscConfig+0x62>
 8008c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d10c      	bne.n	8008c2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c10:	4b8f      	ldr	r3, [pc, #572]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d06d      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x130>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d169      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	f000 bc21 	b.w	800946c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c32:	d106      	bne.n	8008c42 <HAL_RCC_OscConfig+0x7a>
 8008c34:	4b86      	ldr	r3, [pc, #536]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a85      	ldr	r2, [pc, #532]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	e02e      	b.n	8008ca0 <HAL_RCC_OscConfig+0xd8>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10c      	bne.n	8008c64 <HAL_RCC_OscConfig+0x9c>
 8008c4a:	4b81      	ldr	r3, [pc, #516]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a80      	ldr	r2, [pc, #512]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	4b7e      	ldr	r3, [pc, #504]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a7d      	ldr	r2, [pc, #500]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	e01d      	b.n	8008ca0 <HAL_RCC_OscConfig+0xd8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c6c:	d10c      	bne.n	8008c88 <HAL_RCC_OscConfig+0xc0>
 8008c6e:	4b78      	ldr	r3, [pc, #480]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a77      	ldr	r2, [pc, #476]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	4b75      	ldr	r3, [pc, #468]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a74      	ldr	r2, [pc, #464]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	e00b      	b.n	8008ca0 <HAL_RCC_OscConfig+0xd8>
 8008c88:	4b71      	ldr	r3, [pc, #452]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a70      	ldr	r2, [pc, #448]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	4b6e      	ldr	r3, [pc, #440]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a6d      	ldr	r2, [pc, #436]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d013      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca8:	f7f8 fe74 	bl	8001994 <HAL_GetTick>
 8008cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cb0:	f7f8 fe70 	bl	8001994 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b64      	cmp	r3, #100	@ 0x64
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e3d4      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cc2:	4b63      	ldr	r3, [pc, #396]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f0      	beq.n	8008cb0 <HAL_RCC_OscConfig+0xe8>
 8008cce:	e014      	b.n	8008cfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd0:	f7f8 fe60 	bl	8001994 <HAL_GetTick>
 8008cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cd8:	f7f8 fe5c 	bl	8001994 <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b64      	cmp	r3, #100	@ 0x64
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e3c0      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cea:	4b59      	ldr	r3, [pc, #356]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f0      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x110>
 8008cf6:	e000      	b.n	8008cfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 80ca 	beq.w	8008e9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d08:	4b51      	ldr	r3, [pc, #324]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d12:	4b4f      	ldr	r3, [pc, #316]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <HAL_RCC_OscConfig+0x166>
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	2b18      	cmp	r3, #24
 8008d22:	d156      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x20a>
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f003 0303 	and.w	r3, r3, #3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d151      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d2e:	4b48      	ldr	r3, [pc, #288]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <HAL_RCC_OscConfig+0x17e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e392      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008d46:	4b42      	ldr	r3, [pc, #264]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f023 0219 	bic.w	r2, r3, #25
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	493f      	ldr	r1, [pc, #252]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d58:	f7f8 fe1c 	bl	8001994 <HAL_GetTick>
 8008d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d5e:	e008      	b.n	8008d72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d60:	f7f8 fe18 	bl	8001994 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d901      	bls.n	8008d72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e37c      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d72:	4b37      	ldr	r3, [pc, #220]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0f0      	beq.n	8008d60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d7e:	f7f8 fe39 	bl	80019f4 <HAL_GetREVID>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d817      	bhi.n	8008dbc <HAL_RCC_OscConfig+0x1f4>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b40      	cmp	r3, #64	@ 0x40
 8008d92:	d108      	bne.n	8008da6 <HAL_RCC_OscConfig+0x1de>
 8008d94:	4b2e      	ldr	r3, [pc, #184]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008da4:	e07a      	b.n	8008e9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da6:	4b2a      	ldr	r3, [pc, #168]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	031b      	lsls	r3, r3, #12
 8008db4:	4926      	ldr	r1, [pc, #152]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dba:	e06f      	b.n	8008e9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dbc:	4b24      	ldr	r3, [pc, #144]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	061b      	lsls	r3, r3, #24
 8008dca:	4921      	ldr	r1, [pc, #132]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dd0:	e064      	b.n	8008e9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d047      	beq.n	8008e6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008dda:	4b1d      	ldr	r3, [pc, #116]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f023 0219 	bic.w	r2, r3, #25
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	491a      	ldr	r1, [pc, #104]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008de8:	4313      	orrs	r3, r2
 8008dea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dec:	f7f8 fdd2 	bl	8001994 <HAL_GetTick>
 8008df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008df2:	e008      	b.n	8008e06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008df4:	f7f8 fdce 	bl	8001994 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e332      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e06:	4b12      	ldr	r3, [pc, #72]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0304 	and.w	r3, r3, #4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0f0      	beq.n	8008df4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e12:	f7f8 fdef 	bl	80019f4 <HAL_GetREVID>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d819      	bhi.n	8008e54 <HAL_RCC_OscConfig+0x28c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b40      	cmp	r3, #64	@ 0x40
 8008e26:	d108      	bne.n	8008e3a <HAL_RCC_OscConfig+0x272>
 8008e28:	4b09      	ldr	r3, [pc, #36]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008e30:	4a07      	ldr	r2, [pc, #28]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e36:	6053      	str	r3, [r2, #4]
 8008e38:	e030      	b.n	8008e9c <HAL_RCC_OscConfig+0x2d4>
 8008e3a:	4b05      	ldr	r3, [pc, #20]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	031b      	lsls	r3, r3, #12
 8008e48:	4901      	ldr	r1, [pc, #4]	@ (8008e50 <HAL_RCC_OscConfig+0x288>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	604b      	str	r3, [r1, #4]
 8008e4e:	e025      	b.n	8008e9c <HAL_RCC_OscConfig+0x2d4>
 8008e50:	58024400 	.word	0x58024400
 8008e54:	4b9a      	ldr	r3, [pc, #616]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	4997      	ldr	r1, [pc, #604]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	604b      	str	r3, [r1, #4]
 8008e68:	e018      	b.n	8008e9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e6a:	4b95      	ldr	r3, [pc, #596]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a94      	ldr	r2, [pc, #592]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008e70:	f023 0301 	bic.w	r3, r3, #1
 8008e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e76:	f7f8 fd8d 	bl	8001994 <HAL_GetTick>
 8008e7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e7e:	f7f8 fd89 	bl	8001994 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e2ed      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e90:	4b8b      	ldr	r3, [pc, #556]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f0      	bne.n	8008e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80a9 	beq.w	8008ffc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eaa:	4b85      	ldr	r3, [pc, #532]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008eb4:	4b82      	ldr	r3, [pc, #520]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d007      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x308>
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	2b18      	cmp	r3, #24
 8008ec4:	d13a      	bne.n	8008f3c <HAL_RCC_OscConfig+0x374>
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d135      	bne.n	8008f3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x320>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	2b80      	cmp	r3, #128	@ 0x80
 8008ee2:	d001      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e2c1      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ee8:	f7f8 fd84 	bl	80019f4 <HAL_GetREVID>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d817      	bhi.n	8008f26 <HAL_RCC_OscConfig+0x35e>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	2b20      	cmp	r3, #32
 8008efc:	d108      	bne.n	8008f10 <HAL_RCC_OscConfig+0x348>
 8008efe:	4b70      	ldr	r3, [pc, #448]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008f06:	4a6e      	ldr	r2, [pc, #440]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f0e:	e075      	b.n	8008ffc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f10:	4b6b      	ldr	r3, [pc, #428]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	069b      	lsls	r3, r3, #26
 8008f1e:	4968      	ldr	r1, [pc, #416]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f24:	e06a      	b.n	8008ffc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f26:	4b66      	ldr	r3, [pc, #408]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	4962      	ldr	r1, [pc, #392]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f3a:	e05f      	b.n	8008ffc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d042      	beq.n	8008fca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f44:	4b5e      	ldr	r3, [pc, #376]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a5d      	ldr	r2, [pc, #372]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f50:	f7f8 fd20 	bl	8001994 <HAL_GetTick>
 8008f54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f56:	e008      	b.n	8008f6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f58:	f7f8 fd1c 	bl	8001994 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e280      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f6a:	4b55      	ldr	r3, [pc, #340]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0f0      	beq.n	8008f58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f76:	f7f8 fd3d 	bl	80019f4 <HAL_GetREVID>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d817      	bhi.n	8008fb4 <HAL_RCC_OscConfig+0x3ec>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d108      	bne.n	8008f9e <HAL_RCC_OscConfig+0x3d6>
 8008f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008f94:	4a4a      	ldr	r2, [pc, #296]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008f96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f9a:	6053      	str	r3, [r2, #4]
 8008f9c:	e02e      	b.n	8008ffc <HAL_RCC_OscConfig+0x434>
 8008f9e:	4b48      	ldr	r3, [pc, #288]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	069b      	lsls	r3, r3, #26
 8008fac:	4944      	ldr	r1, [pc, #272]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	604b      	str	r3, [r1, #4]
 8008fb2:	e023      	b.n	8008ffc <HAL_RCC_OscConfig+0x434>
 8008fb4:	4b42      	ldr	r3, [pc, #264]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	061b      	lsls	r3, r3, #24
 8008fc2:	493f      	ldr	r1, [pc, #252]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60cb      	str	r3, [r1, #12]
 8008fc8:	e018      	b.n	8008ffc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008fca:	4b3d      	ldr	r3, [pc, #244]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a3c      	ldr	r2, [pc, #240]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd6:	f7f8 fcdd 	bl	8001994 <HAL_GetTick>
 8008fda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fdc:	e008      	b.n	8008ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fde:	f7f8 fcd9 	bl	8001994 <HAL_GetTick>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d901      	bls.n	8008ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e23d      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ff0:	4b33      	ldr	r3, [pc, #204]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f0      	bne.n	8008fde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d036      	beq.n	8009076 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d019      	beq.n	8009044 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009010:	4b2b      	ldr	r3, [pc, #172]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8009012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009014:	4a2a      	ldr	r2, [pc, #168]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800901c:	f7f8 fcba 	bl	8001994 <HAL_GetTick>
 8009020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009022:	e008      	b.n	8009036 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009024:	f7f8 fcb6 	bl	8001994 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d901      	bls.n	8009036 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e21a      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009036:	4b22      	ldr	r3, [pc, #136]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8009038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0f0      	beq.n	8009024 <HAL_RCC_OscConfig+0x45c>
 8009042:	e018      	b.n	8009076 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009044:	4b1e      	ldr	r3, [pc, #120]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8009046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009048:	4a1d      	ldr	r2, [pc, #116]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009050:	f7f8 fca0 	bl	8001994 <HAL_GetTick>
 8009054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009056:	e008      	b.n	800906a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009058:	f7f8 fc9c 	bl	8001994 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d901      	bls.n	800906a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e200      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800906a:	4b15      	ldr	r3, [pc, #84]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 800906c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1f0      	bne.n	8009058 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d039      	beq.n	80090f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01c      	beq.n	80090c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800908a:	4b0d      	ldr	r3, [pc, #52]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a0c      	ldr	r2, [pc, #48]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 8009090:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009094:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009096:	f7f8 fc7d 	bl	8001994 <HAL_GetTick>
 800909a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800909c:	e008      	b.n	80090b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800909e:	f7f8 fc79 	bl	8001994 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e1dd      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80090b0:	4b03      	ldr	r3, [pc, #12]	@ (80090c0 <HAL_RCC_OscConfig+0x4f8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d0f0      	beq.n	800909e <HAL_RCC_OscConfig+0x4d6>
 80090bc:	e01b      	b.n	80090f6 <HAL_RCC_OscConfig+0x52e>
 80090be:	bf00      	nop
 80090c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090c4:	4b9b      	ldr	r3, [pc, #620]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a9a      	ldr	r2, [pc, #616]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80090ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090d0:	f7f8 fc60 	bl	8001994 <HAL_GetTick>
 80090d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090d6:	e008      	b.n	80090ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090d8:	f7f8 fc5c 	bl	8001994 <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e1c0      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090ea:	4b92      	ldr	r3, [pc, #584]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1f0      	bne.n	80090d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 8081 	beq.w	8009206 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009104:	4b8c      	ldr	r3, [pc, #560]	@ (8009338 <HAL_RCC_OscConfig+0x770>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a8b      	ldr	r2, [pc, #556]	@ (8009338 <HAL_RCC_OscConfig+0x770>)
 800910a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800910e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009110:	f7f8 fc40 	bl	8001994 <HAL_GetTick>
 8009114:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009116:	e008      	b.n	800912a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009118:	f7f8 fc3c 	bl	8001994 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b64      	cmp	r3, #100	@ 0x64
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e1a0      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800912a:	4b83      	ldr	r3, [pc, #524]	@ (8009338 <HAL_RCC_OscConfig+0x770>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0f0      	beq.n	8009118 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d106      	bne.n	800914c <HAL_RCC_OscConfig+0x584>
 800913e:	4b7d      	ldr	r3, [pc, #500]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009142:	4a7c      	ldr	r2, [pc, #496]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	6713      	str	r3, [r2, #112]	@ 0x70
 800914a:	e02d      	b.n	80091a8 <HAL_RCC_OscConfig+0x5e0>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10c      	bne.n	800916e <HAL_RCC_OscConfig+0x5a6>
 8009154:	4b77      	ldr	r3, [pc, #476]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009158:	4a76      	ldr	r2, [pc, #472]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800915a:	f023 0301 	bic.w	r3, r3, #1
 800915e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009160:	4b74      	ldr	r3, [pc, #464]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009164:	4a73      	ldr	r2, [pc, #460]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009166:	f023 0304 	bic.w	r3, r3, #4
 800916a:	6713      	str	r3, [r2, #112]	@ 0x70
 800916c:	e01c      	b.n	80091a8 <HAL_RCC_OscConfig+0x5e0>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	2b05      	cmp	r3, #5
 8009174:	d10c      	bne.n	8009190 <HAL_RCC_OscConfig+0x5c8>
 8009176:	4b6f      	ldr	r3, [pc, #444]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800917a:	4a6e      	ldr	r2, [pc, #440]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800917c:	f043 0304 	orr.w	r3, r3, #4
 8009180:	6713      	str	r3, [r2, #112]	@ 0x70
 8009182:	4b6c      	ldr	r3, [pc, #432]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009186:	4a6b      	ldr	r2, [pc, #428]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009188:	f043 0301 	orr.w	r3, r3, #1
 800918c:	6713      	str	r3, [r2, #112]	@ 0x70
 800918e:	e00b      	b.n	80091a8 <HAL_RCC_OscConfig+0x5e0>
 8009190:	4b68      	ldr	r3, [pc, #416]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009194:	4a67      	ldr	r2, [pc, #412]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009196:	f023 0301 	bic.w	r3, r3, #1
 800919a:	6713      	str	r3, [r2, #112]	@ 0x70
 800919c:	4b65      	ldr	r3, [pc, #404]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800919e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a0:	4a64      	ldr	r2, [pc, #400]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80091a2:	f023 0304 	bic.w	r3, r3, #4
 80091a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d015      	beq.n	80091dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b0:	f7f8 fbf0 	bl	8001994 <HAL_GetTick>
 80091b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091b6:	e00a      	b.n	80091ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091b8:	f7f8 fbec 	bl	8001994 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e14e      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091ce:	4b59      	ldr	r3, [pc, #356]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80091d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0ee      	beq.n	80091b8 <HAL_RCC_OscConfig+0x5f0>
 80091da:	e014      	b.n	8009206 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091dc:	f7f8 fbda 	bl	8001994 <HAL_GetTick>
 80091e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091e2:	e00a      	b.n	80091fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091e4:	f7f8 fbd6 	bl	8001994 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e138      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091fa:	4b4e      	ldr	r3, [pc, #312]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80091fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1ee      	bne.n	80091e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 812d 	beq.w	800946a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009210:	4b48      	ldr	r3, [pc, #288]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009218:	2b18      	cmp	r3, #24
 800921a:	f000 80bd 	beq.w	8009398 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009222:	2b02      	cmp	r3, #2
 8009224:	f040 809e 	bne.w	8009364 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009228:	4b42      	ldr	r3, [pc, #264]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a41      	ldr	r2, [pc, #260]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800922e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009234:	f7f8 fbae 	bl	8001994 <HAL_GetTick>
 8009238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800923c:	f7f8 fbaa 	bl	8001994 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e10e      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800924e:	4b39      	ldr	r3, [pc, #228]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f0      	bne.n	800923c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800925a:	4b36      	ldr	r3, [pc, #216]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800925c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800925e:	4b37      	ldr	r3, [pc, #220]	@ (800933c <HAL_RCC_OscConfig+0x774>)
 8009260:	4013      	ands	r3, r2
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800926a:	0112      	lsls	r2, r2, #4
 800926c:	430a      	orrs	r2, r1
 800926e:	4931      	ldr	r1, [pc, #196]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009270:	4313      	orrs	r3, r2
 8009272:	628b      	str	r3, [r1, #40]	@ 0x28
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009278:	3b01      	subs	r3, #1
 800927a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009282:	3b01      	subs	r3, #1
 8009284:	025b      	lsls	r3, r3, #9
 8009286:	b29b      	uxth	r3, r3
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928e:	3b01      	subs	r3, #1
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929c:	3b01      	subs	r3, #1
 800929e:	061b      	lsls	r3, r3, #24
 80092a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092a4:	4923      	ldr	r1, [pc, #140]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80092aa:	4b22      	ldr	r3, [pc, #136]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ae:	4a21      	ldr	r2, [pc, #132]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092b0:	f023 0301 	bic.w	r3, r3, #1
 80092b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ba:	4b21      	ldr	r3, [pc, #132]	@ (8009340 <HAL_RCC_OscConfig+0x778>)
 80092bc:	4013      	ands	r3, r2
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80092c2:	00d2      	lsls	r2, r2, #3
 80092c4:	491b      	ldr	r1, [pc, #108]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ce:	f023 020c 	bic.w	r2, r3, #12
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d6:	4917      	ldr	r1, [pc, #92]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092dc:	4b15      	ldr	r3, [pc, #84]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	f023 0202 	bic.w	r2, r3, #2
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e8:	4912      	ldr	r1, [pc, #72]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092ee:	4b11      	ldr	r3, [pc, #68]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	4a10      	ldr	r2, [pc, #64]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 80092fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009306:	4b0b      	ldr	r3, [pc, #44]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930a:	4a0a      	ldr	r2, [pc, #40]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 800930c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009310:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009312:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009316:	4a07      	ldr	r2, [pc, #28]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800931e:	4b05      	ldr	r3, [pc, #20]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a04      	ldr	r2, [pc, #16]	@ (8009334 <HAL_RCC_OscConfig+0x76c>)
 8009324:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800932a:	f7f8 fb33 	bl	8001994 <HAL_GetTick>
 800932e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009330:	e011      	b.n	8009356 <HAL_RCC_OscConfig+0x78e>
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400
 8009338:	58024800 	.word	0x58024800
 800933c:	fffffc0c 	.word	0xfffffc0c
 8009340:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009344:	f7f8 fb26 	bl	8001994 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e08a      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009356:	4b47      	ldr	r3, [pc, #284]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0f0      	beq.n	8009344 <HAL_RCC_OscConfig+0x77c>
 8009362:	e082      	b.n	800946a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009364:	4b43      	ldr	r3, [pc, #268]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a42      	ldr	r2, [pc, #264]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 800936a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800936e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009370:	f7f8 fb10 	bl	8001994 <HAL_GetTick>
 8009374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009376:	e008      	b.n	800938a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009378:	f7f8 fb0c 	bl	8001994 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	2b02      	cmp	r3, #2
 8009384:	d901      	bls.n	800938a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e070      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800938a:	4b3a      	ldr	r3, [pc, #232]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f0      	bne.n	8009378 <HAL_RCC_OscConfig+0x7b0>
 8009396:	e068      	b.n	800946a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009398:	4b36      	ldr	r3, [pc, #216]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 800939a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800939e:	4b35      	ldr	r3, [pc, #212]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 80093a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d031      	beq.n	8009410 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f003 0203 	and.w	r2, r3, #3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d12a      	bne.n	8009410 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d122      	bne.n	8009410 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d11a      	bne.n	8009410 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	0a5b      	lsrs	r3, r3, #9
 80093de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d111      	bne.n	8009410 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	0c1b      	lsrs	r3, r3, #16
 80093f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d108      	bne.n	8009410 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	0e1b      	lsrs	r3, r3, #24
 8009402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800940c:	429a      	cmp	r2, r3
 800940e:	d001      	beq.n	8009414 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e02b      	b.n	800946c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009414:	4b17      	ldr	r3, [pc, #92]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 8009416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009418:	08db      	lsrs	r3, r3, #3
 800941a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800941e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	429a      	cmp	r2, r3
 8009428:	d01f      	beq.n	800946a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800942a:	4b12      	ldr	r3, [pc, #72]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009436:	f7f8 faad 	bl	8001994 <HAL_GetTick>
 800943a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800943c:	bf00      	nop
 800943e:	f7f8 faa9 	bl	8001994 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	4293      	cmp	r3, r2
 8009448:	d0f9      	beq.n	800943e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800944a:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 800944c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800944e:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <HAL_RCC_OscConfig+0x8b0>)
 8009450:	4013      	ands	r3, r2
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009456:	00d2      	lsls	r2, r2, #3
 8009458:	4906      	ldr	r1, [pc, #24]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 800945a:	4313      	orrs	r3, r2
 800945c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800945e:	4b05      	ldr	r3, [pc, #20]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009462:	4a04      	ldr	r2, [pc, #16]	@ (8009474 <HAL_RCC_OscConfig+0x8ac>)
 8009464:	f043 0301 	orr.w	r3, r3, #1
 8009468:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3730      	adds	r7, #48	@ 0x30
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	58024400 	.word	0x58024400
 8009478:	ffff0007 	.word	0xffff0007

0800947c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e19c      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009490:	4b8a      	ldr	r3, [pc, #552]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d910      	bls.n	80094c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800949e:	4b87      	ldr	r3, [pc, #540]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f023 020f 	bic.w	r2, r3, #15
 80094a6:	4985      	ldr	r1, [pc, #532]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ae:	4b83      	ldr	r3, [pc, #524]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 030f 	and.w	r3, r3, #15
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d001      	beq.n	80094c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e184      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d010      	beq.n	80094ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691a      	ldr	r2, [r3, #16]
 80094d0:	4b7b      	ldr	r3, [pc, #492]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094d8:	429a      	cmp	r2, r3
 80094da:	d908      	bls.n	80094ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094dc:	4b78      	ldr	r3, [pc, #480]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	4975      	ldr	r1, [pc, #468]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d010      	beq.n	800951c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695a      	ldr	r2, [r3, #20]
 80094fe:	4b70      	ldr	r3, [pc, #448]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009506:	429a      	cmp	r2, r3
 8009508:	d908      	bls.n	800951c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800950a:	4b6d      	ldr	r3, [pc, #436]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	496a      	ldr	r1, [pc, #424]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009518:	4313      	orrs	r3, r2
 800951a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0310 	and.w	r3, r3, #16
 8009524:	2b00      	cmp	r3, #0
 8009526:	d010      	beq.n	800954a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699a      	ldr	r2, [r3, #24]
 800952c:	4b64      	ldr	r3, [pc, #400]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009534:	429a      	cmp	r2, r3
 8009536:	d908      	bls.n	800954a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009538:	4b61      	ldr	r3, [pc, #388]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	495e      	ldr	r1, [pc, #376]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009546:	4313      	orrs	r3, r2
 8009548:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	d010      	beq.n	8009578 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	4b59      	ldr	r3, [pc, #356]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009562:	429a      	cmp	r2, r3
 8009564:	d908      	bls.n	8009578 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009566:	4b56      	ldr	r3, [pc, #344]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	4953      	ldr	r1, [pc, #332]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009574:	4313      	orrs	r3, r2
 8009576:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d010      	beq.n	80095a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	4b4d      	ldr	r3, [pc, #308]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f003 030f 	and.w	r3, r3, #15
 8009590:	429a      	cmp	r2, r3
 8009592:	d908      	bls.n	80095a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009594:	4b4a      	ldr	r3, [pc, #296]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f023 020f 	bic.w	r2, r3, #15
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4947      	ldr	r1, [pc, #284]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d055      	beq.n	800965e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80095b2:	4b43      	ldr	r3, [pc, #268]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	4940      	ldr	r1, [pc, #256]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d107      	bne.n	80095dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095cc:	4b3c      	ldr	r3, [pc, #240]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d121      	bne.n	800961c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e0f6      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d107      	bne.n	80095f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095e4:	4b36      	ldr	r3, [pc, #216]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d115      	bne.n	800961c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0ea      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d107      	bne.n	800960c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095fc:	4b30      	ldr	r3, [pc, #192]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009604:	2b00      	cmp	r3, #0
 8009606:	d109      	bne.n	800961c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e0de      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800960c:	4b2c      	ldr	r3, [pc, #176]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e0d6      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800961c:	4b28      	ldr	r3, [pc, #160]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f023 0207 	bic.w	r2, r3, #7
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	4925      	ldr	r1, [pc, #148]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800962a:	4313      	orrs	r3, r2
 800962c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800962e:	f7f8 f9b1 	bl	8001994 <HAL_GetTick>
 8009632:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009634:	e00a      	b.n	800964c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009636:	f7f8 f9ad 	bl	8001994 <HAL_GetTick>
 800963a:	4602      	mov	r2, r0
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009644:	4293      	cmp	r3, r2
 8009646:	d901      	bls.n	800964c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e0be      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964c:	4b1c      	ldr	r3, [pc, #112]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	429a      	cmp	r2, r3
 800965c:	d1eb      	bne.n	8009636 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d010      	beq.n	800968c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	4b14      	ldr	r3, [pc, #80]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	429a      	cmp	r2, r3
 8009678:	d208      	bcs.n	800968c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800967a:	4b11      	ldr	r3, [pc, #68]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f023 020f 	bic.w	r2, r3, #15
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	490e      	ldr	r1, [pc, #56]	@ (80096c0 <HAL_RCC_ClockConfig+0x244>)
 8009688:	4313      	orrs	r3, r2
 800968a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800968c:	4b0b      	ldr	r3, [pc, #44]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d214      	bcs.n	80096c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800969a:	4b08      	ldr	r3, [pc, #32]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f023 020f 	bic.w	r2, r3, #15
 80096a2:	4906      	ldr	r1, [pc, #24]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096aa:	4b04      	ldr	r3, [pc, #16]	@ (80096bc <HAL_RCC_ClockConfig+0x240>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d005      	beq.n	80096c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e086      	b.n	80097ca <HAL_RCC_ClockConfig+0x34e>
 80096bc:	52002000 	.word	0x52002000
 80096c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d010      	beq.n	80096f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	4b3f      	ldr	r3, [pc, #252]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096dc:	429a      	cmp	r2, r3
 80096de:	d208      	bcs.n	80096f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096e0:	4b3c      	ldr	r3, [pc, #240]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	4939      	ldr	r1, [pc, #228]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0308 	and.w	r3, r3, #8
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d010      	beq.n	8009720 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	695a      	ldr	r2, [r3, #20]
 8009702:	4b34      	ldr	r3, [pc, #208]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800970a:	429a      	cmp	r2, r3
 800970c:	d208      	bcs.n	8009720 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800970e:	4b31      	ldr	r3, [pc, #196]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	492e      	ldr	r1, [pc, #184]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 800971c:	4313      	orrs	r3, r2
 800971e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b00      	cmp	r3, #0
 800972a:	d010      	beq.n	800974e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699a      	ldr	r2, [r3, #24]
 8009730:	4b28      	ldr	r3, [pc, #160]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 8009732:	69db      	ldr	r3, [r3, #28]
 8009734:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009738:	429a      	cmp	r2, r3
 800973a:	d208      	bcs.n	800974e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800973c:	4b25      	ldr	r3, [pc, #148]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	4922      	ldr	r1, [pc, #136]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 800974a:	4313      	orrs	r3, r2
 800974c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0320 	and.w	r3, r3, #32
 8009756:	2b00      	cmp	r3, #0
 8009758:	d010      	beq.n	800977c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69da      	ldr	r2, [r3, #28]
 800975e:	4b1d      	ldr	r3, [pc, #116]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009766:	429a      	cmp	r2, r3
 8009768:	d208      	bcs.n	800977c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800976a:	4b1a      	ldr	r3, [pc, #104]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	4917      	ldr	r1, [pc, #92]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 8009778:	4313      	orrs	r3, r2
 800977a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800977c:	f000 f834 	bl	80097e8 <HAL_RCC_GetSysClockFreq>
 8009780:	4602      	mov	r2, r0
 8009782:	4b14      	ldr	r3, [pc, #80]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	4912      	ldr	r1, [pc, #72]	@ (80097d8 <HAL_RCC_ClockConfig+0x35c>)
 800978e:	5ccb      	ldrb	r3, [r1, r3]
 8009790:	f003 031f 	and.w	r3, r3, #31
 8009794:	fa22 f303 	lsr.w	r3, r2, r3
 8009798:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800979a:	4b0e      	ldr	r3, [pc, #56]	@ (80097d4 <HAL_RCC_ClockConfig+0x358>)
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	4a0d      	ldr	r2, [pc, #52]	@ (80097d8 <HAL_RCC_ClockConfig+0x35c>)
 80097a4:	5cd3      	ldrb	r3, [r2, r3]
 80097a6:	f003 031f 	and.w	r3, r3, #31
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	fa22 f303 	lsr.w	r3, r2, r3
 80097b0:	4a0a      	ldr	r2, [pc, #40]	@ (80097dc <HAL_RCC_ClockConfig+0x360>)
 80097b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097b4:	4a0a      	ldr	r2, [pc, #40]	@ (80097e0 <HAL_RCC_ClockConfig+0x364>)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80097ba:	4b0a      	ldr	r3, [pc, #40]	@ (80097e4 <HAL_RCC_ClockConfig+0x368>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f8 f89e 	bl	8001900 <HAL_InitTick>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	58024400 	.word	0x58024400
 80097d8:	08012574 	.word	0x08012574
 80097dc:	24000004 	.word	0x24000004
 80097e0:	24000000 	.word	0x24000000
 80097e4:	24000008 	.word	0x24000008

080097e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b089      	sub	sp, #36	@ 0x24
 80097ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097ee:	4bb3      	ldr	r3, [pc, #716]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097f6:	2b18      	cmp	r3, #24
 80097f8:	f200 8155 	bhi.w	8009aa6 <HAL_RCC_GetSysClockFreq+0x2be>
 80097fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009804 <HAL_RCC_GetSysClockFreq+0x1c>)
 80097fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009802:	bf00      	nop
 8009804:	08009869 	.word	0x08009869
 8009808:	08009aa7 	.word	0x08009aa7
 800980c:	08009aa7 	.word	0x08009aa7
 8009810:	08009aa7 	.word	0x08009aa7
 8009814:	08009aa7 	.word	0x08009aa7
 8009818:	08009aa7 	.word	0x08009aa7
 800981c:	08009aa7 	.word	0x08009aa7
 8009820:	08009aa7 	.word	0x08009aa7
 8009824:	0800988f 	.word	0x0800988f
 8009828:	08009aa7 	.word	0x08009aa7
 800982c:	08009aa7 	.word	0x08009aa7
 8009830:	08009aa7 	.word	0x08009aa7
 8009834:	08009aa7 	.word	0x08009aa7
 8009838:	08009aa7 	.word	0x08009aa7
 800983c:	08009aa7 	.word	0x08009aa7
 8009840:	08009aa7 	.word	0x08009aa7
 8009844:	08009895 	.word	0x08009895
 8009848:	08009aa7 	.word	0x08009aa7
 800984c:	08009aa7 	.word	0x08009aa7
 8009850:	08009aa7 	.word	0x08009aa7
 8009854:	08009aa7 	.word	0x08009aa7
 8009858:	08009aa7 	.word	0x08009aa7
 800985c:	08009aa7 	.word	0x08009aa7
 8009860:	08009aa7 	.word	0x08009aa7
 8009864:	0800989b 	.word	0x0800989b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009868:	4b94      	ldr	r3, [pc, #592]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0320 	and.w	r3, r3, #32
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009874:	4b91      	ldr	r3, [pc, #580]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	08db      	lsrs	r3, r3, #3
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	4a90      	ldr	r2, [pc, #576]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
 8009884:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009886:	e111      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009888:	4b8d      	ldr	r3, [pc, #564]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800988a:	61bb      	str	r3, [r7, #24]
      break;
 800988c:	e10e      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800988e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009890:	61bb      	str	r3, [r7, #24]
      break;
 8009892:	e10b      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009894:	4b8c      	ldr	r3, [pc, #560]	@ (8009ac8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009896:	61bb      	str	r3, [r7, #24]
      break;
 8009898:	e108      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800989a:	4b88      	ldr	r3, [pc, #544]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800989c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80098a4:	4b85      	ldr	r3, [pc, #532]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a8:	091b      	lsrs	r3, r3, #4
 80098aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098b0:	4b82      	ldr	r3, [pc, #520]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098ba:	4b80      	ldr	r3, [pc, #512]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098be:	08db      	lsrs	r3, r3, #3
 80098c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80e1 	beq.w	8009aa0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f000 8083 	beq.w	80099ec <HAL_RCC_GetSysClockFreq+0x204>
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	f200 80a1 	bhi.w	8009a30 <HAL_RCC_GetSysClockFreq+0x248>
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_RCC_GetSysClockFreq+0x114>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d056      	beq.n	80099a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80098fa:	e099      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098fc:	4b6f      	ldr	r3, [pc, #444]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02d      	beq.n	8009964 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009908:	4b6c      	ldr	r3, [pc, #432]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	08db      	lsrs	r3, r3, #3
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	4a6b      	ldr	r2, [pc, #428]	@ (8009ac0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009914:	fa22 f303 	lsr.w	r3, r2, r3
 8009918:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009932:	4b62      	ldr	r3, [pc, #392]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009942:	ed97 6a02 	vldr	s12, [r7, #8]
 8009946:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800994a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009962:	e087      	b.n	8009a74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009ad0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009976:	4b51      	ldr	r3, [pc, #324]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009986:	ed97 6a02 	vldr	s12, [r7, #8]
 800998a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2e4>
 800998e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099a6:	e065      	b.n	8009a74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ba:	4b40      	ldr	r3, [pc, #256]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2e4>
 80099d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80099ea:	e043      	b.n	8009a74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009ad8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b2f      	ldr	r3, [pc, #188]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a2e:	e021      	b.n	8009a74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009ad4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b1e      	ldr	r3, [pc, #120]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009acc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009a74:	4b11      	ldr	r3, [pc, #68]	@ (8009abc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a78:	0a5b      	lsrs	r3, r3, #9
 8009a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a7e:	3301      	adds	r3, #1
 8009a80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a98:	ee17 3a90 	vmov	r3, s15
 8009a9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009a9e:	e005      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61bb      	str	r3, [r7, #24]
      break;
 8009aa4:	e002      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009aa6:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009aa8:	61bb      	str	r3, [r7, #24]
      break;
 8009aaa:	bf00      	nop
  }

  return sysclockfreq;
 8009aac:	69bb      	ldr	r3, [r7, #24]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3724      	adds	r7, #36	@ 0x24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	58024400 	.word	0x58024400
 8009ac0:	03d09000 	.word	0x03d09000
 8009ac4:	003d0900 	.word	0x003d0900
 8009ac8:	017d7840 	.word	0x017d7840
 8009acc:	46000000 	.word	0x46000000
 8009ad0:	4c742400 	.word	0x4c742400
 8009ad4:	4a742400 	.word	0x4a742400
 8009ad8:	4bbebc20 	.word	0x4bbebc20

08009adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ae2:	f7ff fe81 	bl	80097e8 <HAL_RCC_GetSysClockFreq>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	0a1b      	lsrs	r3, r3, #8
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	490f      	ldr	r1, [pc, #60]	@ (8009b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009af4:	5ccb      	ldrb	r3, [r1, r3]
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b00:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	4a09      	ldr	r2, [pc, #36]	@ (8009b30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b0a:	5cd3      	ldrb	r3, [r2, r3]
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	fa22 f303 	lsr.w	r3, r2, r3
 8009b16:	4a07      	ldr	r2, [pc, #28]	@ (8009b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b1a:	4a07      	ldr	r2, [pc, #28]	@ (8009b38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009b20:	4b04      	ldr	r3, [pc, #16]	@ (8009b34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b22:	681b      	ldr	r3, [r3, #0]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	58024400 	.word	0x58024400
 8009b30:	08012574 	.word	0x08012574
 8009b34:	24000004 	.word	0x24000004
 8009b38:	24000000 	.word	0x24000000

08009b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b40:	f7ff ffcc 	bl	8009adc <HAL_RCC_GetHCLKFreq>
 8009b44:	4602      	mov	r2, r0
 8009b46:	4b06      	ldr	r3, [pc, #24]	@ (8009b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	091b      	lsrs	r3, r3, #4
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	4904      	ldr	r1, [pc, #16]	@ (8009b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b52:	5ccb      	ldrb	r3, [r1, r3]
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	58024400 	.word	0x58024400
 8009b64:	08012574 	.word	0x08012574

08009b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b6c:	f7ff ffb6 	bl	8009adc <HAL_RCC_GetHCLKFreq>
 8009b70:	4602      	mov	r2, r0
 8009b72:	4b06      	ldr	r3, [pc, #24]	@ (8009b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	4904      	ldr	r1, [pc, #16]	@ (8009b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b7e:	5ccb      	ldrb	r3, [r1, r3]
 8009b80:	f003 031f 	and.w	r3, r3, #31
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	08012574 	.word	0x08012574

08009b94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b98:	b0ca      	sub	sp, #296	@ 0x128
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009bb8:	2500      	movs	r5, #0
 8009bba:	ea54 0305 	orrs.w	r3, r4, r5
 8009bbe:	d049      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bca:	d02f      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009bcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bd0:	d828      	bhi.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bd6:	d01a      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009bd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bdc:	d822      	bhi.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be6:	d007      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009be8:	e01c      	b.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bea:	4bb8      	ldr	r3, [pc, #736]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bee:	4ab7      	ldr	r2, [pc, #732]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009bf6:	e01a      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	2102      	movs	r1, #2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f001 fc8f 	bl	800b524 <RCCEx_PLL2_Config>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c0c:	e00f      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c12:	3328      	adds	r3, #40	@ 0x28
 8009c14:	2102      	movs	r1, #2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fd36 	bl	800b688 <RCCEx_PLL3_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c22:	e004      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c2a:	e000      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c36:	4ba5      	ldr	r3, [pc, #660]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c44:	4aa1      	ldr	r2, [pc, #644]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c46:	430b      	orrs	r3, r1
 8009c48:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009c60:	f04f 0900 	mov.w	r9, #0
 8009c64:	ea58 0309 	orrs.w	r3, r8, r9
 8009c68:	d047      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d82a      	bhi.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009c74:	a201      	add	r2, pc, #4	@ (adr r2, 8009c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7a:	bf00      	nop
 8009c7c:	08009c91 	.word	0x08009c91
 8009c80:	08009c9f 	.word	0x08009c9f
 8009c84:	08009cb5 	.word	0x08009cb5
 8009c88:	08009cd3 	.word	0x08009cd3
 8009c8c:	08009cd3 	.word	0x08009cd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c90:	4b8e      	ldr	r3, [pc, #568]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c94:	4a8d      	ldr	r2, [pc, #564]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c9c:	e01a      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 fc3c 	bl	800b524 <RCCEx_PLL2_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cb2:	e00f      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb8:	3328      	adds	r3, #40	@ 0x28
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 fce3 	bl	800b688 <RCCEx_PLL3_Config>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cc8:	e004      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce0:	f023 0107 	bic.w	r1, r3, #7
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cea:	4a78      	ldr	r2, [pc, #480]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6513      	str	r3, [r2, #80]	@ 0x50
 8009cf0:	e003      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009d06:	f04f 0b00 	mov.w	fp, #0
 8009d0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8009d0e:	d04c      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d1a:	d030      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d20:	d829      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d24:	d02d      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d28:	d825      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d2a:	2b80      	cmp	r3, #128	@ 0x80
 8009d2c:	d018      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009d2e:	2b80      	cmp	r3, #128	@ 0x80
 8009d30:	d821      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d002      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009d36:	2b40      	cmp	r3, #64	@ 0x40
 8009d38:	d007      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009d3a:	e01c      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d3c:	4b63      	ldr	r3, [pc, #396]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d40:	4a62      	ldr	r2, [pc, #392]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d48:	e01c      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4e:	3308      	adds	r3, #8
 8009d50:	2100      	movs	r1, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 fbe6 	bl	800b524 <RCCEx_PLL2_Config>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d5e:	e011      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d64:	3328      	adds	r3, #40	@ 0x28
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f001 fc8d 	bl	800b688 <RCCEx_PLL3_Config>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009d74:	e006      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d7c:	e002      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d7e:	bf00      	nop
 8009d80:	e000      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d90:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009da0:	e003      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009db6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009dc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	d053      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009dd6:	d035      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ddc:	d82e      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009de2:	d031      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009de4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009de8:	d828      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dee:	d01a      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009df0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009df4:	d822      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009dfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dfe:	d007      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009e00:	e01c      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e02:	4b32      	ldr	r3, [pc, #200]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e06:	4a31      	ldr	r2, [pc, #196]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e0e:	e01c      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e14:	3308      	adds	r3, #8
 8009e16:	2100      	movs	r1, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fb83 	bl	800b524 <RCCEx_PLL2_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e24:	e011      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2a:	3328      	adds	r3, #40	@ 0x28
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f001 fc2a 	bl	800b688 <RCCEx_PLL3_Config>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e3a:	e006      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e42:	e002      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e44:	bf00      	nop
 8009e46:	e000      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e52:	4b1e      	ldr	r3, [pc, #120]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e56:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e62:	4a1a      	ldr	r2, [pc, #104]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e64:	430b      	orrs	r3, r1
 8009e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e68:	e003      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009e7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009e82:	2300      	movs	r3, #0
 8009e84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009e88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	d056      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e9e:	d038      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009ea0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ea4:	d831      	bhi.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ea6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009eaa:	d034      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009eac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009eb0:	d82b      	bhi.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eb6:	d01d      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009eb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ebc:	d825      	bhi.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d006      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009ec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ec6:	d00a      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009ec8:	e01f      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009eca:	bf00      	nop
 8009ecc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed4:	4aa1      	ldr	r2, [pc, #644]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009edc:	e01c      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fb1c 	bl	800b524 <RCCEx_PLL2_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ef2:	e011      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef8:	3328      	adds	r3, #40	@ 0x28
 8009efa:	2100      	movs	r1, #0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 fbc3 	bl	800b688 <RCCEx_PLL3_Config>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f08:	e006      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f10:	e002      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f12:	bf00      	nop
 8009f14:	e000      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10b      	bne.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f20:	4b8e      	ldr	r3, [pc, #568]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f30:	4a8a      	ldr	r2, [pc, #552]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f32:	430b      	orrs	r3, r1
 8009f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f36:	e003      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f50:	2300      	movs	r3, #0
 8009f52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d03a      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f66:	2b30      	cmp	r3, #48	@ 0x30
 8009f68:	d01f      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009f6a:	2b30      	cmp	r3, #48	@ 0x30
 8009f6c:	d819      	bhi.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d00c      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	d815      	bhi.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d019      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009f7a:	2b10      	cmp	r3, #16
 8009f7c:	d111      	bne.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f7e:	4b77      	ldr	r3, [pc, #476]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f82:	4a76      	ldr	r2, [pc, #472]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009f8a:	e011      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f90:	3308      	adds	r3, #8
 8009f92:	2102      	movs	r1, #2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f001 fac5 	bl	800b524 <RCCEx_PLL2_Config>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009fa0:	e006      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fa8:	e002      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009faa:	bf00      	nop
 8009fac:	e000      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009fb8:	4b68      	ldr	r3, [pc, #416]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fc6:	4a65      	ldr	r2, [pc, #404]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009fcc:	e003      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009fe2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009fec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	d051      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a000:	d035      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a006:	d82e      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a008:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a00c:	d031      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a00e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a012:	d828      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a018:	d01a      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a01a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a01e:	d822      	bhi.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a028:	d007      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a02a:	e01c      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a02c:	4b4b      	ldr	r3, [pc, #300]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	4a4a      	ldr	r2, [pc, #296]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a038:	e01c      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03e:	3308      	adds	r3, #8
 800a040:	2100      	movs	r1, #0
 800a042:	4618      	mov	r0, r3
 800a044:	f001 fa6e 	bl	800b524 <RCCEx_PLL2_Config>
 800a048:	4603      	mov	r3, r0
 800a04a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a04e:	e011      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a054:	3328      	adds	r3, #40	@ 0x28
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fb15 	bl	800b688 <RCCEx_PLL3_Config>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a064:	e006      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a06c:	e002      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a06e:	bf00      	nop
 800a070:	e000      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a072:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a07c:	4b37      	ldr	r3, [pc, #220]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a080:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a08a:	4a34      	ldr	r2, [pc, #208]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a090:	e003      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a0a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a0b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	d056      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0c4:	d033      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a0c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0ca:	d82c      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0d0:	d02f      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a0d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0d6:	d826      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0d8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0dc:	d02b      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a0de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0e2:	d820      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0e8:	d012      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a0ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0ee:	d81a      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d022      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0f8:	d115      	bne.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fe:	3308      	adds	r3, #8
 800a100:	2101      	movs	r1, #1
 800a102:	4618      	mov	r0, r3
 800a104:	f001 fa0e 	bl	800b524 <RCCEx_PLL2_Config>
 800a108:	4603      	mov	r3, r0
 800a10a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a10e:	e015      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a114:	3328      	adds	r3, #40	@ 0x28
 800a116:	2101      	movs	r1, #1
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 fab5 	bl	800b688 <RCCEx_PLL3_Config>
 800a11e:	4603      	mov	r3, r0
 800a120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a124:	e00a      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a12c:	e006      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a12e:	bf00      	nop
 800a130:	e004      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a132:	bf00      	nop
 800a134:	e002      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a136:	bf00      	nop
 800a138:	e000      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a13a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10d      	bne.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a144:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a148:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a152:	4a02      	ldr	r2, [pc, #8]	@ (800a15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a154:	430b      	orrs	r3, r1
 800a156:	6513      	str	r3, [r2, #80]	@ 0x50
 800a158:	e006      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a178:	2300      	movs	r3, #0
 800a17a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a17e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a182:	460b      	mov	r3, r1
 800a184:	4313      	orrs	r3, r2
 800a186:	d055      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a194:	d033      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a19a:	d82c      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a0:	d02f      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a6:	d826      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a1ac:	d02b      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a1ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a1b2:	d820      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1b8:	d012      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a1ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1be:	d81a      	bhi.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d022      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a1c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1c8:	d115      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f001 f9a6 	bl	800b524 <RCCEx_PLL2_Config>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1de:	e015      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e4:	3328      	adds	r3, #40	@ 0x28
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f001 fa4d 	bl	800b688 <RCCEx_PLL3_Config>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1f4:	e00a      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1fc:	e006      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a1fe:	bf00      	nop
 800a200:	e004      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a202:	bf00      	nop
 800a204:	e002      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a206:	bf00      	nop
 800a208:	e000      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a20a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a20c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a214:	4ba3      	ldr	r3, [pc, #652]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a218:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a224:	4a9f      	ldr	r2, [pc, #636]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a226:	430b      	orrs	r3, r1
 800a228:	6593      	str	r3, [r2, #88]	@ 0x58
 800a22a:	e003      	b.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a244:	2300      	movs	r3, #0
 800a246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a24a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a24e:	460b      	mov	r3, r1
 800a250:	4313      	orrs	r3, r2
 800a252:	d037      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a25a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a25e:	d00e      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a264:	d816      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a266:	2b00      	cmp	r3, #0
 800a268:	d018      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a26a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a26e:	d111      	bne.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a270:	4b8c      	ldr	r3, [pc, #560]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a274:	4a8b      	ldr	r2, [pc, #556]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a27a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a27c:	e00f      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a282:	3308      	adds	r3, #8
 800a284:	2101      	movs	r1, #1
 800a286:	4618      	mov	r0, r3
 800a288:	f001 f94c 	bl	800b524 <RCCEx_PLL2_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a292:	e004      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a29a:	e000      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a29c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2a6:	4b7f      	ldr	r3, [pc, #508]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2b4:	4a7b      	ldr	r2, [pc, #492]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2ba:	e003      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a2d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a2da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	d039      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d81c      	bhi.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a2ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a331 	.word	0x0800a331
 800a2f8:	0800a305 	.word	0x0800a305
 800a2fc:	0800a313 	.word	0x0800a313
 800a300:	0800a331 	.word	0x0800a331
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a304:	4b67      	ldr	r3, [pc, #412]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a308:	4a66      	ldr	r2, [pc, #408]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a30a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a30e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a310:	e00f      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a316:	3308      	adds	r3, #8
 800a318:	2102      	movs	r1, #2
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 f902 	bl	800b524 <RCCEx_PLL2_Config>
 800a320:	4603      	mov	r3, r0
 800a322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a326:	e004      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a32e:	e000      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a33a:	4b5a      	ldr	r3, [pc, #360]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a33c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a33e:	f023 0103 	bic.w	r1, r3, #3
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a348:	4a56      	ldr	r2, [pc, #344]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a34a:	430b      	orrs	r3, r1
 800a34c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a34e:	e003      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a368:	2300      	movs	r3, #0
 800a36a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a36e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a372:	460b      	mov	r3, r1
 800a374:	4313      	orrs	r3, r2
 800a376:	f000 809f 	beq.w	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a37a:	4b4b      	ldr	r3, [pc, #300]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a4a      	ldr	r2, [pc, #296]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a384:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a386:	f7f7 fb05 	bl	8001994 <HAL_GetTick>
 800a38a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a38e:	e00b      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a390:	f7f7 fb00 	bl	8001994 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	2b64      	cmp	r3, #100	@ 0x64
 800a39e:	d903      	bls.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3a6:	e005      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3a8:	4b3f      	ldr	r3, [pc, #252]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0ed      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a3b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d179      	bne.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3bc:	4b39      	ldr	r3, [pc, #228]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3c8:	4053      	eors	r3, r2
 800a3ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d015      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3d2:	4b34      	ldr	r3, [pc, #208]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3de:	4b31      	ldr	r3, [pc, #196]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e2:	4a30      	ldr	r2, [pc, #192]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3ea:	4b2e      	ldr	r3, [pc, #184]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ee:	4a2d      	ldr	r2, [pc, #180]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3f6:	4a2b      	ldr	r2, [pc, #172]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a3fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a40a:	d118      	bne.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a40c:	f7f7 fac2 	bl	8001994 <HAL_GetTick>
 800a410:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a414:	e00d      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a416:	f7f7 fabd 	bl	8001994 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a420:	1ad2      	subs	r2, r2, r3
 800a422:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a426:	429a      	cmp	r2, r3
 800a428:	d903      	bls.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a430:	e005      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a432:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0eb      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a43e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a442:	2b00      	cmp	r3, #0
 800a444:	d129      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a44a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a44e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a456:	d10e      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a458:	4b12      	ldr	r3, [pc, #72]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a468:	091a      	lsrs	r2, r3, #4
 800a46a:	4b10      	ldr	r3, [pc, #64]	@ (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a46c:	4013      	ands	r3, r2
 800a46e:	4a0d      	ldr	r2, [pc, #52]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a470:	430b      	orrs	r3, r1
 800a472:	6113      	str	r3, [r2, #16]
 800a474:	e005      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a476:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a47c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a480:	6113      	str	r3, [r2, #16]
 800a482:	4b08      	ldr	r3, [pc, #32]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a484:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a48e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a492:	4a04      	ldr	r2, [pc, #16]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a494:	430b      	orrs	r3, r1
 800a496:	6713      	str	r3, [r2, #112]	@ 0x70
 800a498:	e00e      	b.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a49e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a4a2:	e009      	b.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a4a4:	58024400 	.word	0x58024400
 800a4a8:	58024800 	.word	0x58024800
 800a4ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	f002 0301 	and.w	r3, r2, #1
 800a4c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	f000 8089 	beq.w	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4e0:	2b28      	cmp	r3, #40	@ 0x28
 800a4e2:	d86b      	bhi.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a4e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ea:	bf00      	nop
 800a4ec:	0800a5c5 	.word	0x0800a5c5
 800a4f0:	0800a5bd 	.word	0x0800a5bd
 800a4f4:	0800a5bd 	.word	0x0800a5bd
 800a4f8:	0800a5bd 	.word	0x0800a5bd
 800a4fc:	0800a5bd 	.word	0x0800a5bd
 800a500:	0800a5bd 	.word	0x0800a5bd
 800a504:	0800a5bd 	.word	0x0800a5bd
 800a508:	0800a5bd 	.word	0x0800a5bd
 800a50c:	0800a591 	.word	0x0800a591
 800a510:	0800a5bd 	.word	0x0800a5bd
 800a514:	0800a5bd 	.word	0x0800a5bd
 800a518:	0800a5bd 	.word	0x0800a5bd
 800a51c:	0800a5bd 	.word	0x0800a5bd
 800a520:	0800a5bd 	.word	0x0800a5bd
 800a524:	0800a5bd 	.word	0x0800a5bd
 800a528:	0800a5bd 	.word	0x0800a5bd
 800a52c:	0800a5a7 	.word	0x0800a5a7
 800a530:	0800a5bd 	.word	0x0800a5bd
 800a534:	0800a5bd 	.word	0x0800a5bd
 800a538:	0800a5bd 	.word	0x0800a5bd
 800a53c:	0800a5bd 	.word	0x0800a5bd
 800a540:	0800a5bd 	.word	0x0800a5bd
 800a544:	0800a5bd 	.word	0x0800a5bd
 800a548:	0800a5bd 	.word	0x0800a5bd
 800a54c:	0800a5c5 	.word	0x0800a5c5
 800a550:	0800a5bd 	.word	0x0800a5bd
 800a554:	0800a5bd 	.word	0x0800a5bd
 800a558:	0800a5bd 	.word	0x0800a5bd
 800a55c:	0800a5bd 	.word	0x0800a5bd
 800a560:	0800a5bd 	.word	0x0800a5bd
 800a564:	0800a5bd 	.word	0x0800a5bd
 800a568:	0800a5bd 	.word	0x0800a5bd
 800a56c:	0800a5c5 	.word	0x0800a5c5
 800a570:	0800a5bd 	.word	0x0800a5bd
 800a574:	0800a5bd 	.word	0x0800a5bd
 800a578:	0800a5bd 	.word	0x0800a5bd
 800a57c:	0800a5bd 	.word	0x0800a5bd
 800a580:	0800a5bd 	.word	0x0800a5bd
 800a584:	0800a5bd 	.word	0x0800a5bd
 800a588:	0800a5bd 	.word	0x0800a5bd
 800a58c:	0800a5c5 	.word	0x0800a5c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a594:	3308      	adds	r3, #8
 800a596:	2101      	movs	r1, #1
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 ffc3 	bl	800b524 <RCCEx_PLL2_Config>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5a4:	e00f      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5aa:	3328      	adds	r3, #40	@ 0x28
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f001 f86a 	bl	800b688 <RCCEx_PLL3_Config>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5ba:	e004      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5c2:	e000      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a5c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10a      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5ce:	4bbf      	ldr	r3, [pc, #764]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5dc:	4abb      	ldr	r2, [pc, #748]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a5e2:	e003      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	f002 0302 	and.w	r3, r2, #2
 800a5f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a602:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a606:	460b      	mov	r3, r1
 800a608:	4313      	orrs	r3, r2
 800a60a:	d041      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a612:	2b05      	cmp	r3, #5
 800a614:	d824      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a616:	a201      	add	r2, pc, #4	@ (adr r2, 800a61c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a669 	.word	0x0800a669
 800a620:	0800a635 	.word	0x0800a635
 800a624:	0800a64b 	.word	0x0800a64b
 800a628:	0800a669 	.word	0x0800a669
 800a62c:	0800a669 	.word	0x0800a669
 800a630:	0800a669 	.word	0x0800a669
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a638:	3308      	adds	r3, #8
 800a63a:	2101      	movs	r1, #1
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 ff71 	bl	800b524 <RCCEx_PLL2_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a648:	e00f      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64e:	3328      	adds	r3, #40	@ 0x28
 800a650:	2101      	movs	r1, #1
 800a652:	4618      	mov	r0, r3
 800a654:	f001 f818 	bl	800b688 <RCCEx_PLL3_Config>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a65e:	e004      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a666:	e000      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a672:	4b96      	ldr	r3, [pc, #600]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a676:	f023 0107 	bic.w	r1, r3, #7
 800a67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a680:	4a92      	ldr	r2, [pc, #584]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a682:	430b      	orrs	r3, r1
 800a684:	6553      	str	r3, [r2, #84]	@ 0x54
 800a686:	e003      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a68c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f002 0304 	and.w	r3, r2, #4
 800a69c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	d044      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6b8:	2b05      	cmp	r3, #5
 800a6ba:	d825      	bhi.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a711 	.word	0x0800a711
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6f3 	.word	0x0800a6f3
 800a6d0:	0800a711 	.word	0x0800a711
 800a6d4:	0800a711 	.word	0x0800a711
 800a6d8:	0800a711 	.word	0x0800a711
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 ff1d 	bl	800b524 <RCCEx_PLL2_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a6f0:	e00f      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f6:	3328      	adds	r3, #40	@ 0x28
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 ffc4 	bl	800b688 <RCCEx_PLL3_Config>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a706:	e004      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a70e:	e000      	b.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10b      	bne.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a71a:	4b6c      	ldr	r3, [pc, #432]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a71e:	f023 0107 	bic.w	r1, r3, #7
 800a722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a72a:	4a68      	ldr	r2, [pc, #416]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a72c:	430b      	orrs	r3, r1
 800a72e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a730:	e003      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f002 0320 	and.w	r3, r2, #32
 800a746:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a74a:	2300      	movs	r3, #0
 800a74c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a754:	460b      	mov	r3, r1
 800a756:	4313      	orrs	r3, r2
 800a758:	d055      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a766:	d033      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a76c:	d82c      	bhi.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a76e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a772:	d02f      	beq.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a778:	d826      	bhi.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a77a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a77e:	d02b      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a780:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a784:	d820      	bhi.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a78a:	d012      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a78c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a790:	d81a      	bhi.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d022      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a79a:	d115      	bne.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 febd 	bl	800b524 <RCCEx_PLL2_Config>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7b0:	e015      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b6:	3328      	adds	r3, #40	@ 0x28
 800a7b8:	2102      	movs	r1, #2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 ff64 	bl	800b688 <RCCEx_PLL3_Config>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7c6:	e00a      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7ce:	e006      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7d0:	bf00      	nop
 800a7d2:	e004      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7d4:	bf00      	nop
 800a7d6:	e002      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7d8:	bf00      	nop
 800a7da:	e000      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10b      	bne.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7e6:	4b39      	ldr	r3, [pc, #228]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7f6:	4a35      	ldr	r2, [pc, #212]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7f8:	430b      	orrs	r3, r1
 800a7fa:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7fc:	e003      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a816:	2300      	movs	r3, #0
 800a818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a81c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a820:	460b      	mov	r3, r1
 800a822:	4313      	orrs	r3, r2
 800a824:	d058      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a82a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a82e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a832:	d033      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a834:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a838:	d82c      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a83a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a83e:	d02f      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a844:	d826      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a846:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a84a:	d02b      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a84c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a850:	d820      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a856:	d012      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a85c:	d81a      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d022      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a866:	d115      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a86c:	3308      	adds	r3, #8
 800a86e:	2100      	movs	r1, #0
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fe57 	bl	800b524 <RCCEx_PLL2_Config>
 800a876:	4603      	mov	r3, r0
 800a878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a87c:	e015      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a882:	3328      	adds	r3, #40	@ 0x28
 800a884:	2102      	movs	r1, #2
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fefe 	bl	800b688 <RCCEx_PLL3_Config>
 800a88c:	4603      	mov	r3, r0
 800a88e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a892:	e00a      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a89a:	e006      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a89c:	bf00      	nop
 800a89e:	e004      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8a0:	bf00      	nop
 800a8a2:	e002      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a8a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10e      	bne.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8b2:	4b06      	ldr	r3, [pc, #24]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8c2:	4a02      	ldr	r2, [pc, #8]	@ (800a8cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8c8:	e006      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a8ca:	bf00      	nop
 800a8cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a8e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	d055      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a900:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a904:	d033      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a906:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a90a:	d82c      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a90c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a910:	d02f      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a912:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a916:	d826      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a918:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a91c:	d02b      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a91e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a922:	d820      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a928:	d012      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a92a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a92e:	d81a      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a930:	2b00      	cmp	r3, #0
 800a932:	d022      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a938:	d115      	bne.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93e:	3308      	adds	r3, #8
 800a940:	2100      	movs	r1, #0
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fdee 	bl	800b524 <RCCEx_PLL2_Config>
 800a948:	4603      	mov	r3, r0
 800a94a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a94e:	e015      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a954:	3328      	adds	r3, #40	@ 0x28
 800a956:	2102      	movs	r1, #2
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fe95 	bl	800b688 <RCCEx_PLL3_Config>
 800a95e:	4603      	mov	r3, r0
 800a960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a964:	e00a      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a96c:	e006      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a96e:	bf00      	nop
 800a970:	e004      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a972:	bf00      	nop
 800a974:	e002      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a976:	bf00      	nop
 800a978:	e000      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a97a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a97c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a984:	4ba1      	ldr	r3, [pc, #644]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a988:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a994:	4a9d      	ldr	r2, [pc, #628]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a996:	430b      	orrs	r3, r1
 800a998:	6593      	str	r3, [r2, #88]	@ 0x58
 800a99a:	e003      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f002 0308 	and.w	r3, r2, #8
 800a9b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	d01e      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9d0:	d10c      	bne.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d6:	3328      	adds	r3, #40	@ 0x28
 800a9d8:	2102      	movs	r1, #2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fe54 	bl	800b688 <RCCEx_PLL3_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9ec:	4b87      	ldr	r3, [pc, #540]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9fc:	4a83      	ldr	r2, [pc, #524]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f002 0310 	and.w	r3, r2, #16
 800aa0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aa12:	2300      	movs	r3, #0
 800aa14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aa18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	d01e      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa2e:	d10c      	bne.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa34:	3328      	adds	r3, #40	@ 0x28
 800aa36:	2102      	movs	r1, #2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 fe25 	bl	800b688 <RCCEx_PLL3_Config>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa4a:	4b70      	ldr	r3, [pc, #448]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa5a:	4a6c      	ldr	r2, [pc, #432]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800aa6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d03e      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa8c:	d022      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800aa8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa92:	d81b      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800aa98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa9c:	d00b      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800aa9e:	e015      	b.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 fd3b 	bl	800b524 <RCCEx_PLL2_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aab4:	e00f      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaba:	3328      	adds	r3, #40	@ 0x28
 800aabc:	2102      	movs	r1, #2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fde2 	bl	800b688 <RCCEx_PLL3_Config>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aaca:	e004      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aad2:	e000      	b.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800aad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10b      	bne.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aade:	4b4b      	ldr	r3, [pc, #300]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aaee:	4a47      	ldr	r2, [pc, #284]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaf4:	e003      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aafa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ab0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ab14:	460b      	mov	r3, r1
 800ab16:	4313      	orrs	r3, r2
 800ab18:	d03b      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab26:	d01f      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ab28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab2c:	d818      	bhi.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ab2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab32:	d003      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ab34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab38:	d007      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ab3a:	e011      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab3c:	4b33      	ldr	r3, [pc, #204]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab40:	4a32      	ldr	r2, [pc, #200]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab48:	e00f      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab4e:	3328      	adds	r3, #40	@ 0x28
 800ab50:	2101      	movs	r1, #1
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fd98 	bl	800b688 <RCCEx_PLL3_Config>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab5e:	e004      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab66:	e000      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ab68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10b      	bne.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab72:	4b26      	ldr	r3, [pc, #152]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab82:	4a22      	ldr	r2, [pc, #136]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab84:	430b      	orrs	r3, r1
 800ab86:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab88:	e003      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ab9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800aba0:	2300      	movs	r3, #0
 800aba2:	677b      	str	r3, [r7, #116]	@ 0x74
 800aba4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aba8:	460b      	mov	r3, r1
 800abaa:	4313      	orrs	r3, r2
 800abac:	d034      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800abae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800abb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abbc:	d007      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800abbe:	e011      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abc0:	4b12      	ldr	r3, [pc, #72]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc4:	4a11      	ldr	r2, [pc, #68]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abcc:	e00e      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd2:	3308      	adds	r3, #8
 800abd4:	2102      	movs	r1, #2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fca4 	bl	800b524 <RCCEx_PLL2_Config>
 800abdc:	4603      	mov	r3, r0
 800abde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abe2:	e003      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10d      	bne.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800abf4:	4b05      	ldr	r3, [pc, #20]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abf8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac02:	4a02      	ldr	r2, [pc, #8]	@ (800ac0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac04:	430b      	orrs	r3, r1
 800ac06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac08:	e006      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ac0a:	bf00      	nop
 800ac0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ac24:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac26:	2300      	movs	r3, #0
 800ac28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4313      	orrs	r3, r2
 800ac32:	d00c      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac38:	3328      	adds	r3, #40	@ 0x28
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fd23 	bl	800b688 <RCCEx_PLL3_Config>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ac5a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ac64:	460b      	mov	r3, r1
 800ac66:	4313      	orrs	r3, r2
 800ac68:	d038      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac76:	d018      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ac78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac7c:	d811      	bhi.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac82:	d014      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ac84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac88:	d80b      	bhi.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d011      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ac8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac92:	d106      	bne.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac94:	4bc3      	ldr	r3, [pc, #780]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	4ac2      	ldr	r2, [pc, #776]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aca0:	e008      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aca8:	e004      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800acb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10b      	bne.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acbc:	4bb9      	ldr	r3, [pc, #740]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acc0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800acc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800accc:	4ab5      	ldr	r2, [pc, #724]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acce:	430b      	orrs	r3, r1
 800acd0:	6553      	str	r3, [r2, #84]	@ 0x54
 800acd2:	e003      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ace8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acea:	2300      	movs	r3, #0
 800acec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800acee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800acf2:	460b      	mov	r3, r1
 800acf4:	4313      	orrs	r3, r2
 800acf6:	d009      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800acf8:	4baa      	ldr	r3, [pc, #680]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad06:	4aa7      	ldr	r2, [pc, #668]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad08:	430b      	orrs	r3, r1
 800ad0a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ad0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ad18:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ad22:	460b      	mov	r3, r1
 800ad24:	4313      	orrs	r3, r2
 800ad26:	d00a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ad28:	4b9e      	ldr	r3, [pc, #632]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ad30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ad38:	4a9a      	ldr	r2, [pc, #616]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad3a:	430b      	orrs	r3, r1
 800ad3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ad4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ad54:	460b      	mov	r3, r1
 800ad56:	4313      	orrs	r3, r2
 800ad58:	d009      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad5a:	4b92      	ldr	r3, [pc, #584]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad5e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ad62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad68:	4a8e      	ldr	r2, [pc, #568]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad6a:	430b      	orrs	r3, r1
 800ad6c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ad7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ad84:	460b      	mov	r3, r1
 800ad86:	4313      	orrs	r3, r2
 800ad88:	d00e      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad8a:	4b86      	ldr	r3, [pc, #536]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	4a85      	ldr	r2, [pc, #532]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ad94:	6113      	str	r3, [r2, #16]
 800ad96:	4b83      	ldr	r3, [pc, #524]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad98:	6919      	ldr	r1, [r3, #16]
 800ad9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ada2:	4a80      	ldr	r2, [pc, #512]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800adb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800adb6:	2300      	movs	r3, #0
 800adb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800adbe:	460b      	mov	r3, r1
 800adc0:	4313      	orrs	r3, r2
 800adc2:	d009      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800adc4:	4b77      	ldr	r3, [pc, #476]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adc8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800adcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800add2:	4a74      	ldr	r2, [pc, #464]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800add4:	430b      	orrs	r3, r1
 800add6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800add8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ade4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ade6:	2300      	movs	r3, #0
 800ade8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800adee:	460b      	mov	r3, r1
 800adf0:	4313      	orrs	r3, r2
 800adf2:	d00a      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adf4:	4b6b      	ldr	r3, [pc, #428]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adf8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800adfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae04:	4a67      	ldr	r2, [pc, #412]	@ (800afa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae06:	430b      	orrs	r3, r1
 800ae08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	2100      	movs	r1, #0
 800ae14:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ae20:	460b      	mov	r3, r1
 800ae22:	4313      	orrs	r3, r2
 800ae24:	d011      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fb78 	bl	800b524 <RCCEx_PLL2_Config>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	2100      	movs	r1, #0
 800ae54:	6239      	str	r1, [r7, #32]
 800ae56:	f003 0302 	and.w	r3, r3, #2
 800ae5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae60:	460b      	mov	r3, r1
 800ae62:	4313      	orrs	r3, r2
 800ae64:	d011      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 fb58 	bl	800b524 <RCCEx_PLL2_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	2100      	movs	r1, #0
 800ae94:	61b9      	str	r1, [r7, #24]
 800ae96:	f003 0304 	and.w	r3, r3, #4
 800ae9a:	61fb      	str	r3, [r7, #28]
 800ae9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aea0:	460b      	mov	r3, r1
 800aea2:	4313      	orrs	r3, r2
 800aea4:	d011      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeaa:	3308      	adds	r3, #8
 800aeac:	2102      	movs	r1, #2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 fb38 	bl	800b524 <RCCEx_PLL2_Config>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aeba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	2100      	movs	r1, #0
 800aed4:	6139      	str	r1, [r7, #16]
 800aed6:	f003 0308 	and.w	r3, r3, #8
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aee0:	460b      	mov	r3, r1
 800aee2:	4313      	orrs	r3, r2
 800aee4:	d011      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeea:	3328      	adds	r3, #40	@ 0x28
 800aeec:	2100      	movs	r1, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 fbca 	bl	800b688 <RCCEx_PLL3_Config>
 800aef4:	4603      	mov	r3, r0
 800aef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800aefa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	2100      	movs	r1, #0
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	f003 0310 	and.w	r3, r3, #16
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800af20:	460b      	mov	r3, r1
 800af22:	4313      	orrs	r3, r2
 800af24:	d011      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af2a:	3328      	adds	r3, #40	@ 0x28
 800af2c:	2101      	movs	r1, #1
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 fbaa 	bl	800b688 <RCCEx_PLL3_Config>
 800af34:	4603      	mov	r3, r0
 800af36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	2100      	movs	r1, #0
 800af54:	6039      	str	r1, [r7, #0]
 800af56:	f003 0320 	and.w	r3, r3, #32
 800af5a:	607b      	str	r3, [r7, #4]
 800af5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af60:	460b      	mov	r3, r1
 800af62:	4313      	orrs	r3, r2
 800af64:	d011      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af6a:	3328      	adds	r3, #40	@ 0x28
 800af6c:	2102      	movs	r1, #2
 800af6e:	4618      	mov	r0, r3
 800af70:	f000 fb8a 	bl	800b688 <RCCEx_PLL3_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800af8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	e000      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
}
 800af98:	4618      	mov	r0, r3
 800af9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800af9e:	46bd      	mov	sp, r7
 800afa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afa4:	58024400 	.word	0x58024400

0800afa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afac:	f7fe fd96 	bl	8009adc <HAL_RCC_GetHCLKFreq>
 800afb0:	4602      	mov	r2, r0
 800afb2:	4b06      	ldr	r3, [pc, #24]	@ (800afcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	091b      	lsrs	r3, r3, #4
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	4904      	ldr	r1, [pc, #16]	@ (800afd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afbe:	5ccb      	ldrb	r3, [r1, r3]
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afc8:	4618      	mov	r0, r3
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	58024400 	.word	0x58024400
 800afd0:	08012574 	.word	0x08012574

0800afd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b089      	sub	sp, #36	@ 0x24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afdc:	4ba1      	ldr	r3, [pc, #644]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800afe6:	4b9f      	ldr	r3, [pc, #636]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	0b1b      	lsrs	r3, r3, #12
 800afec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aff0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aff2:	4b9c      	ldr	r3, [pc, #624]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff6:	091b      	lsrs	r3, r3, #4
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800affe:	4b99      	ldr	r3, [pc, #612]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b002:	08db      	lsrs	r3, r3, #3
 800b004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	fb02 f303 	mul.w	r3, r2, r3
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8111 	beq.w	800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	2b02      	cmp	r3, #2
 800b026:	f000 8083 	beq.w	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	f200 80a1 	bhi.w	800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d056      	beq.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b03e:	e099      	b.n	800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b040:	4b88      	ldr	r3, [pc, #544]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d02d      	beq.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b04c:	4b85      	ldr	r3, [pc, #532]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	08db      	lsrs	r3, r3, #3
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	4a84      	ldr	r2, [pc, #528]	@ (800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b058:	fa22 f303 	lsr.w	r3, r2, r3
 800b05c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b7b      	ldr	r3, [pc, #492]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0a6:	e087      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ea:	e065      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fe:	4b59      	ldr	r3, [pc, #356]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b112:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12e:	e043      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b142:	4b48      	ldr	r3, [pc, #288]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b152:	ed97 6a03 	vldr	s12, [r7, #12]
 800b156:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b172:	e021      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b186:	4b37      	ldr	r3, [pc, #220]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18e:	ee07 3a90 	vmov	s15, r3
 800b192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b196:	ed97 6a03 	vldr	s12, [r7, #12]
 800b19a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1bc:	0a5b      	lsrs	r3, r3, #9
 800b1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1de:	ee17 2a90 	vmov	r2, s15
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ea:	0c1b      	lsrs	r3, r3, #16
 800b1ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b200:	edd7 6a07 	vldr	s13, [r7, #28]
 800b204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b20c:	ee17 2a90 	vmov	r2, s15
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b214:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b218:	0e1b      	lsrs	r3, r3, #24
 800b21a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b22a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b22e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b23a:	ee17 2a90 	vmov	r2, s15
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b242:	e008      	b.n	800b256 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	609a      	str	r2, [r3, #8]
}
 800b256:	bf00      	nop
 800b258:	3724      	adds	r7, #36	@ 0x24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	58024400 	.word	0x58024400
 800b268:	03d09000 	.word	0x03d09000
 800b26c:	46000000 	.word	0x46000000
 800b270:	4c742400 	.word	0x4c742400
 800b274:	4a742400 	.word	0x4a742400
 800b278:	4bbebc20 	.word	0x4bbebc20

0800b27c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b089      	sub	sp, #36	@ 0x24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b284:	4ba1      	ldr	r3, [pc, #644]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b288:	f003 0303 	and.w	r3, r3, #3
 800b28c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b28e:	4b9f      	ldr	r3, [pc, #636]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b292:	0d1b      	lsrs	r3, r3, #20
 800b294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b298:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b29a:	4b9c      	ldr	r3, [pc, #624]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b2a6:	4b99      	ldr	r3, [pc, #612]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	08db      	lsrs	r3, r3, #3
 800b2ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	fb02 f303 	mul.w	r3, r2, r3
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 8111 	beq.w	800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	f000 8083 	beq.w	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	f200 80a1 	bhi.w	800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d056      	beq.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2e6:	e099      	b.n	800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2e8:	4b88      	ldr	r3, [pc, #544]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d02d      	beq.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2f4:	4b85      	ldr	r3, [pc, #532]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	08db      	lsrs	r3, r3, #3
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	4a84      	ldr	r2, [pc, #528]	@ (800b510 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b300:	fa22 f303 	lsr.w	r3, r2, r3
 800b304:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b7b      	ldr	r3, [pc, #492]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b34e:	e087      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b6a      	ldr	r3, [pc, #424]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a03 	vldr	s12, [r7, #12]
 800b376:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b392:	e065      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a6:	4b59      	ldr	r3, [pc, #356]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d6:	e043      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ea:	4b48      	ldr	r3, [pc, #288]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b41a:	e021      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42e:	4b37      	ldr	r3, [pc, #220]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b442:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b45e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b460:	4b2a      	ldr	r3, [pc, #168]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b464:	0a5b      	lsrs	r3, r3, #9
 800b466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b47a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b47e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b486:	ee17 2a90 	vmov	r2, s15
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b48e:	4b1f      	ldr	r3, [pc, #124]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b492:	0c1b      	lsrs	r3, r3, #16
 800b494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b498:	ee07 3a90 	vmov	s15, r3
 800b49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4b4:	ee17 2a90 	vmov	r2, s15
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4bc:	4b13      	ldr	r3, [pc, #76]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c0:	0e1b      	lsrs	r3, r3, #24
 800b4c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e2:	ee17 2a90 	vmov	r2, s15
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4ea:	e008      	b.n	800b4fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	609a      	str	r2, [r3, #8]
}
 800b4fe:	bf00      	nop
 800b500:	3724      	adds	r7, #36	@ 0x24
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	58024400 	.word	0x58024400
 800b510:	03d09000 	.word	0x03d09000
 800b514:	46000000 	.word	0x46000000
 800b518:	4c742400 	.word	0x4c742400
 800b51c:	4a742400 	.word	0x4a742400
 800b520:	4bbebc20 	.word	0x4bbebc20

0800b524 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b532:	4b53      	ldr	r3, [pc, #332]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d101      	bne.n	800b542 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e099      	b.n	800b676 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b542:	4b4f      	ldr	r3, [pc, #316]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a4e      	ldr	r2, [pc, #312]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b548:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b54c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b54e:	f7f6 fa21 	bl	8001994 <HAL_GetTick>
 800b552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b554:	e008      	b.n	800b568 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b556:	f7f6 fa1d 	bl	8001994 <HAL_GetTick>
 800b55a:	4602      	mov	r2, r0
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	2b02      	cmp	r3, #2
 800b562:	d901      	bls.n	800b568 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	e086      	b.n	800b676 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b568:	4b45      	ldr	r3, [pc, #276]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f0      	bne.n	800b556 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b574:	4b42      	ldr	r3, [pc, #264]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b578:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	031b      	lsls	r3, r3, #12
 800b582:	493f      	ldr	r1, [pc, #252]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b584:	4313      	orrs	r3, r2
 800b586:	628b      	str	r3, [r1, #40]	@ 0x28
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	3b01      	subs	r3, #1
 800b598:	025b      	lsls	r3, r3, #9
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	431a      	orrs	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	041b      	lsls	r3, r3, #16
 800b5a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	061b      	lsls	r3, r3, #24
 800b5b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5b8:	4931      	ldr	r1, [pc, #196]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5be:	4b30      	ldr	r3, [pc, #192]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	492d      	ldr	r1, [pc, #180]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b5d0:	4b2b      	ldr	r3, [pc, #172]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d4:	f023 0220 	bic.w	r2, r3, #32
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	4928      	ldr	r1, [pc, #160]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b5e2:	4b27      	ldr	r3, [pc, #156]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e6:	4a26      	ldr	r2, [pc, #152]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5e8:	f023 0310 	bic.w	r3, r3, #16
 800b5ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5ee:	4b24      	ldr	r3, [pc, #144]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5f2:	4b24      	ldr	r3, [pc, #144]	@ (800b684 <RCCEx_PLL2_Config+0x160>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	69d2      	ldr	r2, [r2, #28]
 800b5fa:	00d2      	lsls	r2, r2, #3
 800b5fc:	4920      	ldr	r1, [pc, #128]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b602:	4b1f      	ldr	r3, [pc, #124]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b606:	4a1e      	ldr	r2, [pc, #120]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b608:	f043 0310 	orr.w	r3, r3, #16
 800b60c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d106      	bne.n	800b622 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b614:	4b1a      	ldr	r3, [pc, #104]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b618:	4a19      	ldr	r2, [pc, #100]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b61a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b61e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b620:	e00f      	b.n	800b642 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d106      	bne.n	800b636 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b628:	4b15      	ldr	r3, [pc, #84]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62c:	4a14      	ldr	r2, [pc, #80]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b62e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b634:	e005      	b.n	800b642 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b636:	4b12      	ldr	r3, [pc, #72]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63a:	4a11      	ldr	r2, [pc, #68]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b63c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b640:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b642:	4b0f      	ldr	r3, [pc, #60]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a0e      	ldr	r2, [pc, #56]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b648:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b64c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b64e:	f7f6 f9a1 	bl	8001994 <HAL_GetTick>
 800b652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b654:	e008      	b.n	800b668 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b656:	f7f6 f99d 	bl	8001994 <HAL_GetTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	2b02      	cmp	r3, #2
 800b662:	d901      	bls.n	800b668 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e006      	b.n	800b676 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b668:	4b05      	ldr	r3, [pc, #20]	@ (800b680 <RCCEx_PLL2_Config+0x15c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d0f0      	beq.n	800b656 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b674:	7bfb      	ldrb	r3, [r7, #15]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	58024400 	.word	0x58024400
 800b684:	ffff0007 	.word	0xffff0007

0800b688 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b696:	4b53      	ldr	r3, [pc, #332]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69a:	f003 0303 	and.w	r3, r3, #3
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d101      	bne.n	800b6a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e099      	b.n	800b7da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b6ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b2:	f7f6 f96f 	bl	8001994 <HAL_GetTick>
 800b6b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6b8:	e008      	b.n	800b6cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6ba:	f7f6 f96b 	bl	8001994 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d901      	bls.n	800b6cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	e086      	b.n	800b7da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6cc:	4b45      	ldr	r3, [pc, #276]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1f0      	bne.n	800b6ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b6d8:	4b42      	ldr	r3, [pc, #264]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	051b      	lsls	r3, r3, #20
 800b6e6:	493f      	ldr	r1, [pc, #252]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	025b      	lsls	r3, r3, #9
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	431a      	orrs	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	3b01      	subs	r3, #1
 800b708:	041b      	lsls	r3, r3, #16
 800b70a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b70e:	431a      	orrs	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	3b01      	subs	r3, #1
 800b716:	061b      	lsls	r3, r3, #24
 800b718:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b71c:	4931      	ldr	r1, [pc, #196]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b71e:	4313      	orrs	r3, r2
 800b720:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b722:	4b30      	ldr	r3, [pc, #192]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b726:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	492d      	ldr	r1, [pc, #180]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b730:	4313      	orrs	r3, r2
 800b732:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b734:	4b2b      	ldr	r3, [pc, #172]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b738:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	4928      	ldr	r1, [pc, #160]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b742:	4313      	orrs	r3, r2
 800b744:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b746:	4b27      	ldr	r3, [pc, #156]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74a:	4a26      	ldr	r2, [pc, #152]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b74c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b750:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b752:	4b24      	ldr	r3, [pc, #144]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b756:	4b24      	ldr	r3, [pc, #144]	@ (800b7e8 <RCCEx_PLL3_Config+0x160>)
 800b758:	4013      	ands	r3, r2
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	69d2      	ldr	r2, [r2, #28]
 800b75e:	00d2      	lsls	r2, r2, #3
 800b760:	4920      	ldr	r1, [pc, #128]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b762:	4313      	orrs	r3, r2
 800b764:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b766:	4b1f      	ldr	r3, [pc, #124]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76a:	4a1e      	ldr	r2, [pc, #120]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d106      	bne.n	800b786 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b778:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77c:	4a19      	ldr	r2, [pc, #100]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b77e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b784:	e00f      	b.n	800b7a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d106      	bne.n	800b79a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b78c:	4b15      	ldr	r3, [pc, #84]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b790:	4a14      	ldr	r2, [pc, #80]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b792:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b796:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b798:	e005      	b.n	800b7a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b79a:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79e:	4a11      	ldr	r2, [pc, #68]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b7a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b7a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b7ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7b2:	f7f6 f8ef 	bl	8001994 <HAL_GetTick>
 800b7b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7b8:	e008      	b.n	800b7cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7ba:	f7f6 f8eb 	bl	8001994 <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d901      	bls.n	800b7cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e006      	b.n	800b7da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7cc:	4b05      	ldr	r3, [pc, #20]	@ (800b7e4 <RCCEx_PLL3_Config+0x15c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0f0      	beq.n	800b7ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	58024400 	.word	0x58024400
 800b7e8:	ffff0007 	.word	0xffff0007

0800b7ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e049      	b.n	800b892 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7f5 fdde 	bl	80013d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3304      	adds	r3, #4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f000 fbf2 	bl	800c014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3708      	adds	r7, #8
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e049      	b.n	800b940 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f841 	bl	800b948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f000 fb9b 	bl	800c014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d109      	bne.n	800b980 <HAL_TIM_PWM_Start+0x24>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b01      	cmp	r3, #1
 800b976:	bf14      	ite	ne
 800b978:	2301      	movne	r3, #1
 800b97a:	2300      	moveq	r3, #0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	e03c      	b.n	800b9fa <HAL_TIM_PWM_Start+0x9e>
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	2b04      	cmp	r3, #4
 800b984:	d109      	bne.n	800b99a <HAL_TIM_PWM_Start+0x3e>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b01      	cmp	r3, #1
 800b990:	bf14      	ite	ne
 800b992:	2301      	movne	r3, #1
 800b994:	2300      	moveq	r3, #0
 800b996:	b2db      	uxtb	r3, r3
 800b998:	e02f      	b.n	800b9fa <HAL_TIM_PWM_Start+0x9e>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b08      	cmp	r3, #8
 800b99e:	d109      	bne.n	800b9b4 <HAL_TIM_PWM_Start+0x58>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	bf14      	ite	ne
 800b9ac:	2301      	movne	r3, #1
 800b9ae:	2300      	moveq	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	e022      	b.n	800b9fa <HAL_TIM_PWM_Start+0x9e>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2b0c      	cmp	r3, #12
 800b9b8:	d109      	bne.n	800b9ce <HAL_TIM_PWM_Start+0x72>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	bf14      	ite	ne
 800b9c6:	2301      	movne	r3, #1
 800b9c8:	2300      	moveq	r3, #0
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	e015      	b.n	800b9fa <HAL_TIM_PWM_Start+0x9e>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b10      	cmp	r3, #16
 800b9d2:	d109      	bne.n	800b9e8 <HAL_TIM_PWM_Start+0x8c>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	bf14      	ite	ne
 800b9e0:	2301      	movne	r3, #1
 800b9e2:	2300      	moveq	r3, #0
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	e008      	b.n	800b9fa <HAL_TIM_PWM_Start+0x9e>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	bf14      	ite	ne
 800b9f4:	2301      	movne	r3, #1
 800b9f6:	2300      	moveq	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e0a1      	b.n	800bb46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d104      	bne.n	800ba12 <HAL_TIM_PWM_Start+0xb6>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba10:	e023      	b.n	800ba5a <HAL_TIM_PWM_Start+0xfe>
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d104      	bne.n	800ba22 <HAL_TIM_PWM_Start+0xc6>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba20:	e01b      	b.n	800ba5a <HAL_TIM_PWM_Start+0xfe>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b08      	cmp	r3, #8
 800ba26:	d104      	bne.n	800ba32 <HAL_TIM_PWM_Start+0xd6>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba30:	e013      	b.n	800ba5a <HAL_TIM_PWM_Start+0xfe>
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b0c      	cmp	r3, #12
 800ba36:	d104      	bne.n	800ba42 <HAL_TIM_PWM_Start+0xe6>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ba40:	e00b      	b.n	800ba5a <HAL_TIM_PWM_Start+0xfe>
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b10      	cmp	r3, #16
 800ba46:	d104      	bne.n	800ba52 <HAL_TIM_PWM_Start+0xf6>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ba50:	e003      	b.n	800ba5a <HAL_TIM_PWM_Start+0xfe>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2202      	movs	r2, #2
 800ba56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 fe4c 	bl	800c700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a38      	ldr	r2, [pc, #224]	@ (800bb50 <HAL_TIM_PWM_Start+0x1f4>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d013      	beq.n	800ba9a <HAL_TIM_PWM_Start+0x13e>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a37      	ldr	r2, [pc, #220]	@ (800bb54 <HAL_TIM_PWM_Start+0x1f8>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d00e      	beq.n	800ba9a <HAL_TIM_PWM_Start+0x13e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a35      	ldr	r2, [pc, #212]	@ (800bb58 <HAL_TIM_PWM_Start+0x1fc>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d009      	beq.n	800ba9a <HAL_TIM_PWM_Start+0x13e>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a34      	ldr	r2, [pc, #208]	@ (800bb5c <HAL_TIM_PWM_Start+0x200>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d004      	beq.n	800ba9a <HAL_TIM_PWM_Start+0x13e>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a32      	ldr	r2, [pc, #200]	@ (800bb60 <HAL_TIM_PWM_Start+0x204>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d101      	bne.n	800ba9e <HAL_TIM_PWM_Start+0x142>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e000      	b.n	800baa0 <HAL_TIM_PWM_Start+0x144>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bab2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a25      	ldr	r2, [pc, #148]	@ (800bb50 <HAL_TIM_PWM_Start+0x1f4>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d022      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bac6:	d01d      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a25      	ldr	r2, [pc, #148]	@ (800bb64 <HAL_TIM_PWM_Start+0x208>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d018      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a24      	ldr	r2, [pc, #144]	@ (800bb68 <HAL_TIM_PWM_Start+0x20c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d013      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a22      	ldr	r2, [pc, #136]	@ (800bb6c <HAL_TIM_PWM_Start+0x210>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d00e      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a1a      	ldr	r2, [pc, #104]	@ (800bb54 <HAL_TIM_PWM_Start+0x1f8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d009      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a1e      	ldr	r2, [pc, #120]	@ (800bb70 <HAL_TIM_PWM_Start+0x214>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d004      	beq.n	800bb04 <HAL_TIM_PWM_Start+0x1a8>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a16      	ldr	r2, [pc, #88]	@ (800bb58 <HAL_TIM_PWM_Start+0x1fc>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d115      	bne.n	800bb30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689a      	ldr	r2, [r3, #8]
 800bb0a:	4b1a      	ldr	r3, [pc, #104]	@ (800bb74 <HAL_TIM_PWM_Start+0x218>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b06      	cmp	r3, #6
 800bb14:	d015      	beq.n	800bb42 <HAL_TIM_PWM_Start+0x1e6>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb1c:	d011      	beq.n	800bb42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f042 0201 	orr.w	r2, r2, #1
 800bb2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb2e:	e008      	b.n	800bb42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f042 0201 	orr.w	r2, r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]
 800bb40:	e000      	b.n	800bb44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	40010000 	.word	0x40010000
 800bb54:	40010400 	.word	0x40010400
 800bb58:	40014000 	.word	0x40014000
 800bb5c:	40014400 	.word	0x40014400
 800bb60:	40014800 	.word	0x40014800
 800bb64:	40000400 	.word	0x40000400
 800bb68:	40000800 	.word	0x40000800
 800bb6c:	40000c00 	.word	0x40000c00
 800bb70:	40001800 	.word	0x40001800
 800bb74:	00010007 	.word	0x00010007

0800bb78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d020      	beq.n	800bbdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01b      	beq.n	800bbdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f06f 0202 	mvn.w	r2, #2
 800bbac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	f003 0303 	and.w	r3, r3, #3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fa08 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bbc8:	e005      	b.n	800bbd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f9fa 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fa0b 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	f003 0304 	and.w	r3, r3, #4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d020      	beq.n	800bc28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d01b      	beq.n	800bc28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0204 	mvn.w	r2, #4
 800bbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d003      	beq.n	800bc16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f9e2 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bc14:	e005      	b.n	800bc22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f9d4 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f9e5 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f003 0308 	and.w	r3, r3, #8
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d020      	beq.n	800bc74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f003 0308 	and.w	r3, r3, #8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01b      	beq.n	800bc74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0208 	mvn.w	r2, #8
 800bc44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2204      	movs	r2, #4
 800bc4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f003 0303 	and.w	r3, r3, #3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f9bc 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bc60:	e005      	b.n	800bc6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f9ae 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f9bf 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f003 0310 	and.w	r3, r3, #16
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d020      	beq.n	800bcc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f003 0310 	and.w	r3, r3, #16
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01b      	beq.n	800bcc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f06f 0210 	mvn.w	r2, #16
 800bc90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2208      	movs	r2, #8
 800bc96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	69db      	ldr	r3, [r3, #28]
 800bc9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f996 	bl	800bfd8 <HAL_TIM_IC_CaptureCallback>
 800bcac:	e005      	b.n	800bcba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 f988 	bl	800bfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f999 	bl	800bfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f003 0301 	and.w	r3, r3, #1
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00c      	beq.n	800bce4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f003 0301 	and.w	r3, r3, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d007      	beq.n	800bce4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f06f 0201 	mvn.w	r2, #1
 800bcdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f966 	bl	800bfb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d104      	bne.n	800bcf8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00c      	beq.n	800bd12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d007      	beq.n	800bd12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bd0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fd26 	bl	800c75e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00c      	beq.n	800bd36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fd1e 	bl	800c772 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00c      	beq.n	800bd5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d007      	beq.n	800bd5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f953 	bl	800c000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	f003 0320 	and.w	r3, r3, #32
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00c      	beq.n	800bd7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d007      	beq.n	800bd7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f06f 0220 	mvn.w	r2, #32
 800bd76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fce6 	bl	800c74a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d101      	bne.n	800bda6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bda2:	2302      	movs	r3, #2
 800bda4:	e0ff      	b.n	800bfa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b14      	cmp	r3, #20
 800bdb2:	f200 80f0 	bhi.w	800bf96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800bf97 	.word	0x0800bf97
 800bdc4:	0800bf97 	.word	0x0800bf97
 800bdc8:	0800bf97 	.word	0x0800bf97
 800bdcc:	0800be51 	.word	0x0800be51
 800bdd0:	0800bf97 	.word	0x0800bf97
 800bdd4:	0800bf97 	.word	0x0800bf97
 800bdd8:	0800bf97 	.word	0x0800bf97
 800bddc:	0800be93 	.word	0x0800be93
 800bde0:	0800bf97 	.word	0x0800bf97
 800bde4:	0800bf97 	.word	0x0800bf97
 800bde8:	0800bf97 	.word	0x0800bf97
 800bdec:	0800bed3 	.word	0x0800bed3
 800bdf0:	0800bf97 	.word	0x0800bf97
 800bdf4:	0800bf97 	.word	0x0800bf97
 800bdf8:	0800bf97 	.word	0x0800bf97
 800bdfc:	0800bf15 	.word	0x0800bf15
 800be00:	0800bf97 	.word	0x0800bf97
 800be04:	0800bf97 	.word	0x0800bf97
 800be08:	0800bf97 	.word	0x0800bf97
 800be0c:	0800bf55 	.word	0x0800bf55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68b9      	ldr	r1, [r7, #8]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f99c 	bl	800c154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	699a      	ldr	r2, [r3, #24]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f042 0208 	orr.w	r2, r2, #8
 800be2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	699a      	ldr	r2, [r3, #24]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 0204 	bic.w	r2, r2, #4
 800be3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6999      	ldr	r1, [r3, #24]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	691a      	ldr	r2, [r3, #16]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	430a      	orrs	r2, r1
 800be4c:	619a      	str	r2, [r3, #24]
      break;
 800be4e:	e0a5      	b.n	800bf9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68b9      	ldr	r1, [r7, #8]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fa0c 	bl	800c274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	699a      	ldr	r2, [r3, #24]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	699a      	ldr	r2, [r3, #24]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6999      	ldr	r1, [r3, #24]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	021a      	lsls	r2, r3, #8
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	619a      	str	r2, [r3, #24]
      break;
 800be90:	e084      	b.n	800bf9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68b9      	ldr	r1, [r7, #8]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fa75 	bl	800c388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	69da      	ldr	r2, [r3, #28]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f042 0208 	orr.w	r2, r2, #8
 800beac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69da      	ldr	r2, [r3, #28]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0204 	bic.w	r2, r2, #4
 800bebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69d9      	ldr	r1, [r3, #28]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	691a      	ldr	r2, [r3, #16]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	430a      	orrs	r2, r1
 800bece:	61da      	str	r2, [r3, #28]
      break;
 800bed0:	e064      	b.n	800bf9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 fadd 	bl	800c498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	69da      	ldr	r2, [r3, #28]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800beec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	69da      	ldr	r2, [r3, #28]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800befc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	69d9      	ldr	r1, [r3, #28]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	021a      	lsls	r2, r3, #8
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	430a      	orrs	r2, r1
 800bf10:	61da      	str	r2, [r3, #28]
      break;
 800bf12:	e043      	b.n	800bf9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 fb26 	bl	800c56c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f042 0208 	orr.w	r2, r2, #8
 800bf2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f022 0204 	bic.w	r2, r2, #4
 800bf3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	691a      	ldr	r2, [r3, #16]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf52:	e023      	b.n	800bf9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68b9      	ldr	r1, [r7, #8]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fb6a 	bl	800c634 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	021a      	lsls	r2, r3, #8
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	430a      	orrs	r2, r1
 800bf92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf94:	e002      	b.n	800bf9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	75fb      	strb	r3, [r7, #23]
      break;
 800bf9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop

0800bfb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a43      	ldr	r2, [pc, #268]	@ (800c134 <TIM_Base_SetConfig+0x120>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d013      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c032:	d00f      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a40      	ldr	r2, [pc, #256]	@ (800c138 <TIM_Base_SetConfig+0x124>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00b      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a3f      	ldr	r2, [pc, #252]	@ (800c13c <TIM_Base_SetConfig+0x128>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d007      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a3e      	ldr	r2, [pc, #248]	@ (800c140 <TIM_Base_SetConfig+0x12c>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d003      	beq.n	800c054 <TIM_Base_SetConfig+0x40>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a3d      	ldr	r2, [pc, #244]	@ (800c144 <TIM_Base_SetConfig+0x130>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d108      	bne.n	800c066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c05a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4313      	orrs	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a32      	ldr	r2, [pc, #200]	@ (800c134 <TIM_Base_SetConfig+0x120>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d01f      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c074:	d01b      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a2f      	ldr	r2, [pc, #188]	@ (800c138 <TIM_Base_SetConfig+0x124>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d017      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a2e      	ldr	r2, [pc, #184]	@ (800c13c <TIM_Base_SetConfig+0x128>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d013      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a2d      	ldr	r2, [pc, #180]	@ (800c140 <TIM_Base_SetConfig+0x12c>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d00f      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a2c      	ldr	r2, [pc, #176]	@ (800c144 <TIM_Base_SetConfig+0x130>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d00b      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a2b      	ldr	r2, [pc, #172]	@ (800c148 <TIM_Base_SetConfig+0x134>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d007      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c14c <TIM_Base_SetConfig+0x138>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d003      	beq.n	800c0ae <TIM_Base_SetConfig+0x9a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a29      	ldr	r2, [pc, #164]	@ (800c150 <TIM_Base_SetConfig+0x13c>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d108      	bne.n	800c0c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	689a      	ldr	r2, [r3, #8]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a14      	ldr	r2, [pc, #80]	@ (800c134 <TIM_Base_SetConfig+0x120>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00f      	beq.n	800c106 <TIM_Base_SetConfig+0xf2>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a16      	ldr	r2, [pc, #88]	@ (800c144 <TIM_Base_SetConfig+0x130>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d00b      	beq.n	800c106 <TIM_Base_SetConfig+0xf2>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a15      	ldr	r2, [pc, #84]	@ (800c148 <TIM_Base_SetConfig+0x134>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d007      	beq.n	800c106 <TIM_Base_SetConfig+0xf2>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a14      	ldr	r2, [pc, #80]	@ (800c14c <TIM_Base_SetConfig+0x138>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d003      	beq.n	800c106 <TIM_Base_SetConfig+0xf2>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a13      	ldr	r2, [pc, #76]	@ (800c150 <TIM_Base_SetConfig+0x13c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d103      	bne.n	800c10e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	691a      	ldr	r2, [r3, #16]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f043 0204 	orr.w	r2, r3, #4
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	601a      	str	r2, [r3, #0]
}
 800c126:	bf00      	nop
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	40010000 	.word	0x40010000
 800c138:	40000400 	.word	0x40000400
 800c13c:	40000800 	.word	0x40000800
 800c140:	40000c00 	.word	0x40000c00
 800c144:	40010400 	.word	0x40010400
 800c148:	40014000 	.word	0x40014000
 800c14c:	40014400 	.word	0x40014400
 800c150:	40014800 	.word	0x40014800

0800c154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c154:	b480      	push	{r7}
 800c156:	b087      	sub	sp, #28
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a1b      	ldr	r3, [r3, #32]
 800c162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	f023 0201 	bic.w	r2, r3, #1
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	4b37      	ldr	r3, [pc, #220]	@ (800c25c <TIM_OC1_SetConfig+0x108>)
 800c180:	4013      	ands	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f023 0303 	bic.w	r3, r3, #3
 800c18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	4313      	orrs	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f023 0302 	bic.w	r3, r3, #2
 800c19c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c260 <TIM_OC1_SetConfig+0x10c>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d00f      	beq.n	800c1d0 <TIM_OC1_SetConfig+0x7c>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a2c      	ldr	r2, [pc, #176]	@ (800c264 <TIM_OC1_SetConfig+0x110>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d00b      	beq.n	800c1d0 <TIM_OC1_SetConfig+0x7c>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a2b      	ldr	r2, [pc, #172]	@ (800c268 <TIM_OC1_SetConfig+0x114>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d007      	beq.n	800c1d0 <TIM_OC1_SetConfig+0x7c>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c26c <TIM_OC1_SetConfig+0x118>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d003      	beq.n	800c1d0 <TIM_OC1_SetConfig+0x7c>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a29      	ldr	r2, [pc, #164]	@ (800c270 <TIM_OC1_SetConfig+0x11c>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d10c      	bne.n	800c1ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f023 0308 	bic.w	r3, r3, #8
 800c1d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f023 0304 	bic.w	r3, r3, #4
 800c1e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c260 <TIM_OC1_SetConfig+0x10c>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d00f      	beq.n	800c212 <TIM_OC1_SetConfig+0xbe>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c264 <TIM_OC1_SetConfig+0x110>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d00b      	beq.n	800c212 <TIM_OC1_SetConfig+0xbe>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800c268 <TIM_OC1_SetConfig+0x114>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d007      	beq.n	800c212 <TIM_OC1_SetConfig+0xbe>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a19      	ldr	r2, [pc, #100]	@ (800c26c <TIM_OC1_SetConfig+0x118>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d003      	beq.n	800c212 <TIM_OC1_SetConfig+0xbe>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a18      	ldr	r2, [pc, #96]	@ (800c270 <TIM_OC1_SetConfig+0x11c>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d111      	bne.n	800c236 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	4313      	orrs	r3, r2
 800c22a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	693a      	ldr	r2, [r7, #16]
 800c232:	4313      	orrs	r3, r2
 800c234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	68fa      	ldr	r2, [r7, #12]
 800c240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	697a      	ldr	r2, [r7, #20]
 800c24e:	621a      	str	r2, [r3, #32]
}
 800c250:	bf00      	nop
 800c252:	371c      	adds	r7, #28
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	fffeff8f 	.word	0xfffeff8f
 800c260:	40010000 	.word	0x40010000
 800c264:	40010400 	.word	0x40010400
 800c268:	40014000 	.word	0x40014000
 800c26c:	40014400 	.word	0x40014400
 800c270:	40014800 	.word	0x40014800

0800c274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c274:	b480      	push	{r7}
 800c276:	b087      	sub	sp, #28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	f023 0210 	bic.w	r2, r3, #16
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	4b34      	ldr	r3, [pc, #208]	@ (800c370 <TIM_OC2_SetConfig+0xfc>)
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	021b      	lsls	r3, r3, #8
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f023 0320 	bic.w	r3, r3, #32
 800c2be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	011b      	lsls	r3, r3, #4
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a29      	ldr	r2, [pc, #164]	@ (800c374 <TIM_OC2_SetConfig+0x100>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d003      	beq.n	800c2dc <TIM_OC2_SetConfig+0x68>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a28      	ldr	r2, [pc, #160]	@ (800c378 <TIM_OC2_SetConfig+0x104>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d10d      	bne.n	800c2f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	011b      	lsls	r3, r3, #4
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a1e      	ldr	r2, [pc, #120]	@ (800c374 <TIM_OC2_SetConfig+0x100>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d00f      	beq.n	800c320 <TIM_OC2_SetConfig+0xac>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a1d      	ldr	r2, [pc, #116]	@ (800c378 <TIM_OC2_SetConfig+0x104>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d00b      	beq.n	800c320 <TIM_OC2_SetConfig+0xac>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a1c      	ldr	r2, [pc, #112]	@ (800c37c <TIM_OC2_SetConfig+0x108>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d007      	beq.n	800c320 <TIM_OC2_SetConfig+0xac>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a1b      	ldr	r2, [pc, #108]	@ (800c380 <TIM_OC2_SetConfig+0x10c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d003      	beq.n	800c320 <TIM_OC2_SetConfig+0xac>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a1a      	ldr	r2, [pc, #104]	@ (800c384 <TIM_OC2_SetConfig+0x110>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d113      	bne.n	800c348 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c32e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	4313      	orrs	r3, r2
 800c33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	4313      	orrs	r3, r2
 800c346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	621a      	str	r2, [r3, #32]
}
 800c362:	bf00      	nop
 800c364:	371c      	adds	r7, #28
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	feff8fff 	.word	0xfeff8fff
 800c374:	40010000 	.word	0x40010000
 800c378:	40010400 	.word	0x40010400
 800c37c:	40014000 	.word	0x40014000
 800c380:	40014400 	.word	0x40014400
 800c384:	40014800 	.word	0x40014800

0800c388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a1b      	ldr	r3, [r3, #32]
 800c39c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	69db      	ldr	r3, [r3, #28]
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4b33      	ldr	r3, [pc, #204]	@ (800c480 <TIM_OC3_SetConfig+0xf8>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c3d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	021b      	lsls	r3, r3, #8
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a28      	ldr	r2, [pc, #160]	@ (800c484 <TIM_OC3_SetConfig+0xfc>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d003      	beq.n	800c3ee <TIM_OC3_SetConfig+0x66>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a27      	ldr	r2, [pc, #156]	@ (800c488 <TIM_OC3_SetConfig+0x100>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d10d      	bne.n	800c40a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	021b      	lsls	r3, r3, #8
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a1d      	ldr	r2, [pc, #116]	@ (800c484 <TIM_OC3_SetConfig+0xfc>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d00f      	beq.n	800c432 <TIM_OC3_SetConfig+0xaa>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a1c      	ldr	r2, [pc, #112]	@ (800c488 <TIM_OC3_SetConfig+0x100>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d00b      	beq.n	800c432 <TIM_OC3_SetConfig+0xaa>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a1b      	ldr	r2, [pc, #108]	@ (800c48c <TIM_OC3_SetConfig+0x104>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d007      	beq.n	800c432 <TIM_OC3_SetConfig+0xaa>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a1a      	ldr	r2, [pc, #104]	@ (800c490 <TIM_OC3_SetConfig+0x108>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d003      	beq.n	800c432 <TIM_OC3_SetConfig+0xaa>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a19      	ldr	r2, [pc, #100]	@ (800c494 <TIM_OC3_SetConfig+0x10c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d113      	bne.n	800c45a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	011b      	lsls	r3, r3, #4
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	4313      	orrs	r3, r2
 800c458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	621a      	str	r2, [r3, #32]
}
 800c474:	bf00      	nop
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	fffeff8f 	.word	0xfffeff8f
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400
 800c48c:	40014000 	.word	0x40014000
 800c490:	40014400 	.word	0x40014400
 800c494:	40014800 	.word	0x40014800

0800c498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c498:	b480      	push	{r7}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4b24      	ldr	r3, [pc, #144]	@ (800c554 <TIM_OC4_SetConfig+0xbc>)
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	021b      	lsls	r3, r3, #8
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	031b      	lsls	r3, r3, #12
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a19      	ldr	r2, [pc, #100]	@ (800c558 <TIM_OC4_SetConfig+0xc0>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d00f      	beq.n	800c518 <TIM_OC4_SetConfig+0x80>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a18      	ldr	r2, [pc, #96]	@ (800c55c <TIM_OC4_SetConfig+0xc4>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d00b      	beq.n	800c518 <TIM_OC4_SetConfig+0x80>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a17      	ldr	r2, [pc, #92]	@ (800c560 <TIM_OC4_SetConfig+0xc8>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d007      	beq.n	800c518 <TIM_OC4_SetConfig+0x80>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a16      	ldr	r2, [pc, #88]	@ (800c564 <TIM_OC4_SetConfig+0xcc>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d003      	beq.n	800c518 <TIM_OC4_SetConfig+0x80>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a15      	ldr	r2, [pc, #84]	@ (800c568 <TIM_OC4_SetConfig+0xd0>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d109      	bne.n	800c52c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c51e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	019b      	lsls	r3, r3, #6
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	4313      	orrs	r3, r2
 800c52a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	685a      	ldr	r2, [r3, #4]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	621a      	str	r2, [r3, #32]
}
 800c546:	bf00      	nop
 800c548:	371c      	adds	r7, #28
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	feff8fff 	.word	0xfeff8fff
 800c558:	40010000 	.word	0x40010000
 800c55c:	40010400 	.word	0x40010400
 800c560:	40014000 	.word	0x40014000
 800c564:	40014400 	.word	0x40014400
 800c568:	40014800 	.word	0x40014800

0800c56c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	4b21      	ldr	r3, [pc, #132]	@ (800c61c <TIM_OC5_SetConfig+0xb0>)
 800c598:	4013      	ands	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c5ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	041b      	lsls	r3, r3, #16
 800c5b4:	693a      	ldr	r2, [r7, #16]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a18      	ldr	r2, [pc, #96]	@ (800c620 <TIM_OC5_SetConfig+0xb4>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d00f      	beq.n	800c5e2 <TIM_OC5_SetConfig+0x76>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a17      	ldr	r2, [pc, #92]	@ (800c624 <TIM_OC5_SetConfig+0xb8>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d00b      	beq.n	800c5e2 <TIM_OC5_SetConfig+0x76>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a16      	ldr	r2, [pc, #88]	@ (800c628 <TIM_OC5_SetConfig+0xbc>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d007      	beq.n	800c5e2 <TIM_OC5_SetConfig+0x76>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a15      	ldr	r2, [pc, #84]	@ (800c62c <TIM_OC5_SetConfig+0xc0>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d003      	beq.n	800c5e2 <TIM_OC5_SetConfig+0x76>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a14      	ldr	r2, [pc, #80]	@ (800c630 <TIM_OC5_SetConfig+0xc4>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d109      	bne.n	800c5f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	021b      	lsls	r3, r3, #8
 800c5f0:	697a      	ldr	r2, [r7, #20]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	697a      	ldr	r2, [r7, #20]
 800c5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	621a      	str	r2, [r3, #32]
}
 800c610:	bf00      	nop
 800c612:	371c      	adds	r7, #28
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	fffeff8f 	.word	0xfffeff8f
 800c620:	40010000 	.word	0x40010000
 800c624:	40010400 	.word	0x40010400
 800c628:	40014000 	.word	0x40014000
 800c62c:	40014400 	.word	0x40014400
 800c630:	40014800 	.word	0x40014800

0800c634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4b22      	ldr	r3, [pc, #136]	@ (800c6e8 <TIM_OC6_SetConfig+0xb4>)
 800c660:	4013      	ands	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	021b      	lsls	r3, r3, #8
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	051b      	lsls	r3, r3, #20
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	4313      	orrs	r3, r2
 800c682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a19      	ldr	r2, [pc, #100]	@ (800c6ec <TIM_OC6_SetConfig+0xb8>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d00f      	beq.n	800c6ac <TIM_OC6_SetConfig+0x78>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a18      	ldr	r2, [pc, #96]	@ (800c6f0 <TIM_OC6_SetConfig+0xbc>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00b      	beq.n	800c6ac <TIM_OC6_SetConfig+0x78>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a17      	ldr	r2, [pc, #92]	@ (800c6f4 <TIM_OC6_SetConfig+0xc0>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d007      	beq.n	800c6ac <TIM_OC6_SetConfig+0x78>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a16      	ldr	r2, [pc, #88]	@ (800c6f8 <TIM_OC6_SetConfig+0xc4>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_OC6_SetConfig+0x78>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a15      	ldr	r2, [pc, #84]	@ (800c6fc <TIM_OC6_SetConfig+0xc8>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d109      	bne.n	800c6c0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	029b      	lsls	r3, r3, #10
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	621a      	str	r2, [r3, #32]
}
 800c6da:	bf00      	nop
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	feff8fff 	.word	0xfeff8fff
 800c6ec:	40010000 	.word	0x40010000
 800c6f0:	40010400 	.word	0x40010400
 800c6f4:	40014000 	.word	0x40014000
 800c6f8:	40014400 	.word	0x40014400
 800c6fc:	40014800 	.word	0x40014800

0800c700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f003 031f 	and.w	r3, r3, #31
 800c712:	2201      	movs	r2, #1
 800c714:	fa02 f303 	lsl.w	r3, r2, r3
 800c718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a1a      	ldr	r2, [r3, #32]
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	43db      	mvns	r3, r3
 800c722:	401a      	ands	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6a1a      	ldr	r2, [r3, #32]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f003 031f 	and.w	r3, r3, #31
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	fa01 f303 	lsl.w	r3, r1, r3
 800c738:	431a      	orrs	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	621a      	str	r2, [r3, #32]
}
 800c73e:	bf00      	nop
 800c740:	371c      	adds	r7, #28
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c74a:	b480      	push	{r7}
 800c74c:	b083      	sub	sp, #12
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c752:	bf00      	nop
 800c754:	370c      	adds	r7, #12
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c75e:	b480      	push	{r7}
 800c760:	b083      	sub	sp, #12
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c766:	bf00      	nop
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c77a:	bf00      	nop
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	e042      	b.n	800c81e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d106      	bne.n	800c7b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7f4 fe74 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2224      	movs	r2, #36	@ 0x24
 800c7b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f022 0201 	bic.w	r2, r2, #1
 800c7c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fd91 	bl	800d2f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f826 	bl	800c828 <UART_SetConfig>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d101      	bne.n	800c7e6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e01b      	b.n	800c81e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c7f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c804:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f042 0201 	orr.w	r2, r2, #1
 800c814:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fe10 	bl	800d43c <UART_CheckIdleState>
 800c81c:	4603      	mov	r3, r0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c82c:	b092      	sub	sp, #72	@ 0x48
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	689a      	ldr	r2, [r3, #8]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	431a      	orrs	r2, r3
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	431a      	orrs	r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	69db      	ldr	r3, [r3, #28]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	4bbe      	ldr	r3, [pc, #760]	@ (800cb50 <UART_SetConfig+0x328>)
 800c858:	4013      	ands	r3, r2
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	6812      	ldr	r2, [r2, #0]
 800c85e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c860:	430b      	orrs	r3, r1
 800c862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4ab3      	ldr	r2, [pc, #716]	@ (800cb54 <UART_SetConfig+0x32c>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d004      	beq.n	800c894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c890:	4313      	orrs	r3, r2
 800c892:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	4baf      	ldr	r3, [pc, #700]	@ (800cb58 <UART_SetConfig+0x330>)
 800c89c:	4013      	ands	r3, r2
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	6812      	ldr	r2, [r2, #0]
 800c8a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ae:	f023 010f 	bic.w	r1, r3, #15
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4aa6      	ldr	r2, [pc, #664]	@ (800cb5c <UART_SetConfig+0x334>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d177      	bne.n	800c9b8 <UART_SetConfig+0x190>
 800c8c8:	4ba5      	ldr	r3, [pc, #660]	@ (800cb60 <UART_SetConfig+0x338>)
 800c8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8d0:	2b28      	cmp	r3, #40	@ 0x28
 800c8d2:	d86d      	bhi.n	800c9b0 <UART_SetConfig+0x188>
 800c8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c8dc <UART_SetConfig+0xb4>)
 800c8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8da:	bf00      	nop
 800c8dc:	0800c981 	.word	0x0800c981
 800c8e0:	0800c9b1 	.word	0x0800c9b1
 800c8e4:	0800c9b1 	.word	0x0800c9b1
 800c8e8:	0800c9b1 	.word	0x0800c9b1
 800c8ec:	0800c9b1 	.word	0x0800c9b1
 800c8f0:	0800c9b1 	.word	0x0800c9b1
 800c8f4:	0800c9b1 	.word	0x0800c9b1
 800c8f8:	0800c9b1 	.word	0x0800c9b1
 800c8fc:	0800c989 	.word	0x0800c989
 800c900:	0800c9b1 	.word	0x0800c9b1
 800c904:	0800c9b1 	.word	0x0800c9b1
 800c908:	0800c9b1 	.word	0x0800c9b1
 800c90c:	0800c9b1 	.word	0x0800c9b1
 800c910:	0800c9b1 	.word	0x0800c9b1
 800c914:	0800c9b1 	.word	0x0800c9b1
 800c918:	0800c9b1 	.word	0x0800c9b1
 800c91c:	0800c991 	.word	0x0800c991
 800c920:	0800c9b1 	.word	0x0800c9b1
 800c924:	0800c9b1 	.word	0x0800c9b1
 800c928:	0800c9b1 	.word	0x0800c9b1
 800c92c:	0800c9b1 	.word	0x0800c9b1
 800c930:	0800c9b1 	.word	0x0800c9b1
 800c934:	0800c9b1 	.word	0x0800c9b1
 800c938:	0800c9b1 	.word	0x0800c9b1
 800c93c:	0800c999 	.word	0x0800c999
 800c940:	0800c9b1 	.word	0x0800c9b1
 800c944:	0800c9b1 	.word	0x0800c9b1
 800c948:	0800c9b1 	.word	0x0800c9b1
 800c94c:	0800c9b1 	.word	0x0800c9b1
 800c950:	0800c9b1 	.word	0x0800c9b1
 800c954:	0800c9b1 	.word	0x0800c9b1
 800c958:	0800c9b1 	.word	0x0800c9b1
 800c95c:	0800c9a1 	.word	0x0800c9a1
 800c960:	0800c9b1 	.word	0x0800c9b1
 800c964:	0800c9b1 	.word	0x0800c9b1
 800c968:	0800c9b1 	.word	0x0800c9b1
 800c96c:	0800c9b1 	.word	0x0800c9b1
 800c970:	0800c9b1 	.word	0x0800c9b1
 800c974:	0800c9b1 	.word	0x0800c9b1
 800c978:	0800c9b1 	.word	0x0800c9b1
 800c97c:	0800c9a9 	.word	0x0800c9a9
 800c980:	2301      	movs	r3, #1
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c986:	e222      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c988:	2304      	movs	r3, #4
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c98e:	e21e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c990:	2308      	movs	r3, #8
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c996:	e21a      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c998:	2310      	movs	r3, #16
 800c99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99e:	e216      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c9a0:	2320      	movs	r3, #32
 800c9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9a6:	e212      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c9a8:	2340      	movs	r3, #64	@ 0x40
 800c9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ae:	e20e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c9b0:	2380      	movs	r3, #128	@ 0x80
 800c9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9b6:	e20a      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a69      	ldr	r2, [pc, #420]	@ (800cb64 <UART_SetConfig+0x33c>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d130      	bne.n	800ca24 <UART_SetConfig+0x1fc>
 800c9c2:	4b67      	ldr	r3, [pc, #412]	@ (800cb60 <UART_SetConfig+0x338>)
 800c9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	2b05      	cmp	r3, #5
 800c9cc:	d826      	bhi.n	800ca1c <UART_SetConfig+0x1f4>
 800c9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d4 <UART_SetConfig+0x1ac>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9ed 	.word	0x0800c9ed
 800c9d8:	0800c9f5 	.word	0x0800c9f5
 800c9dc:	0800c9fd 	.word	0x0800c9fd
 800c9e0:	0800ca05 	.word	0x0800ca05
 800c9e4:	0800ca0d 	.word	0x0800ca0d
 800c9e8:	0800ca15 	.word	0x0800ca15
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9f2:	e1ec      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c9f4:	2304      	movs	r3, #4
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fa:	e1e8      	b.n	800cdce <UART_SetConfig+0x5a6>
 800c9fc:	2308      	movs	r3, #8
 800c9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca02:	e1e4      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca04:	2310      	movs	r3, #16
 800ca06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0a:	e1e0      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca0c:	2320      	movs	r3, #32
 800ca0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca12:	e1dc      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca14:	2340      	movs	r3, #64	@ 0x40
 800ca16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1a:	e1d8      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca1c:	2380      	movs	r3, #128	@ 0x80
 800ca1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca22:	e1d4      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a4f      	ldr	r2, [pc, #316]	@ (800cb68 <UART_SetConfig+0x340>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d130      	bne.n	800ca90 <UART_SetConfig+0x268>
 800ca2e:	4b4c      	ldr	r3, [pc, #304]	@ (800cb60 <UART_SetConfig+0x338>)
 800ca30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca32:	f003 0307 	and.w	r3, r3, #7
 800ca36:	2b05      	cmp	r3, #5
 800ca38:	d826      	bhi.n	800ca88 <UART_SetConfig+0x260>
 800ca3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca40 <UART_SetConfig+0x218>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca59 	.word	0x0800ca59
 800ca44:	0800ca61 	.word	0x0800ca61
 800ca48:	0800ca69 	.word	0x0800ca69
 800ca4c:	0800ca71 	.word	0x0800ca71
 800ca50:	0800ca79 	.word	0x0800ca79
 800ca54:	0800ca81 	.word	0x0800ca81
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5e:	e1b6      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca60:	2304      	movs	r3, #4
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca66:	e1b2      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca68:	2308      	movs	r3, #8
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6e:	e1ae      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca70:	2310      	movs	r3, #16
 800ca72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca76:	e1aa      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7e:	e1a6      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca80:	2340      	movs	r3, #64	@ 0x40
 800ca82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca86:	e1a2      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca88:	2380      	movs	r3, #128	@ 0x80
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8e:	e19e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a35      	ldr	r2, [pc, #212]	@ (800cb6c <UART_SetConfig+0x344>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d130      	bne.n	800cafc <UART_SetConfig+0x2d4>
 800ca9a:	4b31      	ldr	r3, [pc, #196]	@ (800cb60 <UART_SetConfig+0x338>)
 800ca9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	2b05      	cmp	r3, #5
 800caa4:	d826      	bhi.n	800caf4 <UART_SetConfig+0x2cc>
 800caa6:	a201      	add	r2, pc, #4	@ (adr r2, 800caac <UART_SetConfig+0x284>)
 800caa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caac:	0800cac5 	.word	0x0800cac5
 800cab0:	0800cacd 	.word	0x0800cacd
 800cab4:	0800cad5 	.word	0x0800cad5
 800cab8:	0800cadd 	.word	0x0800cadd
 800cabc:	0800cae5 	.word	0x0800cae5
 800cac0:	0800caed 	.word	0x0800caed
 800cac4:	2300      	movs	r3, #0
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caca:	e180      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cacc:	2304      	movs	r3, #4
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad2:	e17c      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cad4:	2308      	movs	r3, #8
 800cad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cada:	e178      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cadc:	2310      	movs	r3, #16
 800cade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae2:	e174      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cae4:	2320      	movs	r3, #32
 800cae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caea:	e170      	b.n	800cdce <UART_SetConfig+0x5a6>
 800caec:	2340      	movs	r3, #64	@ 0x40
 800caee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caf2:	e16c      	b.n	800cdce <UART_SetConfig+0x5a6>
 800caf4:	2380      	movs	r3, #128	@ 0x80
 800caf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cafa:	e168      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a1b      	ldr	r2, [pc, #108]	@ (800cb70 <UART_SetConfig+0x348>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d142      	bne.n	800cb8c <UART_SetConfig+0x364>
 800cb06:	4b16      	ldr	r3, [pc, #88]	@ (800cb60 <UART_SetConfig+0x338>)
 800cb08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb0a:	f003 0307 	and.w	r3, r3, #7
 800cb0e:	2b05      	cmp	r3, #5
 800cb10:	d838      	bhi.n	800cb84 <UART_SetConfig+0x35c>
 800cb12:	a201      	add	r2, pc, #4	@ (adr r2, 800cb18 <UART_SetConfig+0x2f0>)
 800cb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb18:	0800cb31 	.word	0x0800cb31
 800cb1c:	0800cb39 	.word	0x0800cb39
 800cb20:	0800cb41 	.word	0x0800cb41
 800cb24:	0800cb49 	.word	0x0800cb49
 800cb28:	0800cb75 	.word	0x0800cb75
 800cb2c:	0800cb7d 	.word	0x0800cb7d
 800cb30:	2300      	movs	r3, #0
 800cb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb36:	e14a      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb38:	2304      	movs	r3, #4
 800cb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3e:	e146      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb40:	2308      	movs	r3, #8
 800cb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb46:	e142      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb48:	2310      	movs	r3, #16
 800cb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4e:	e13e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb50:	cfff69f3 	.word	0xcfff69f3
 800cb54:	58000c00 	.word	0x58000c00
 800cb58:	11fff4ff 	.word	0x11fff4ff
 800cb5c:	40011000 	.word	0x40011000
 800cb60:	58024400 	.word	0x58024400
 800cb64:	40004400 	.word	0x40004400
 800cb68:	40004800 	.word	0x40004800
 800cb6c:	40004c00 	.word	0x40004c00
 800cb70:	40005000 	.word	0x40005000
 800cb74:	2320      	movs	r3, #32
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb7a:	e128      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb7c:	2340      	movs	r3, #64	@ 0x40
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb82:	e124      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb84:	2380      	movs	r3, #128	@ 0x80
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb8a:	e120      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4acb      	ldr	r2, [pc, #812]	@ (800cec0 <UART_SetConfig+0x698>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d176      	bne.n	800cc84 <UART_SetConfig+0x45c>
 800cb96:	4bcb      	ldr	r3, [pc, #812]	@ (800cec4 <UART_SetConfig+0x69c>)
 800cb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb9e:	2b28      	cmp	r3, #40	@ 0x28
 800cba0:	d86c      	bhi.n	800cc7c <UART_SetConfig+0x454>
 800cba2:	a201      	add	r2, pc, #4	@ (adr r2, 800cba8 <UART_SetConfig+0x380>)
 800cba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba8:	0800cc4d 	.word	0x0800cc4d
 800cbac:	0800cc7d 	.word	0x0800cc7d
 800cbb0:	0800cc7d 	.word	0x0800cc7d
 800cbb4:	0800cc7d 	.word	0x0800cc7d
 800cbb8:	0800cc7d 	.word	0x0800cc7d
 800cbbc:	0800cc7d 	.word	0x0800cc7d
 800cbc0:	0800cc7d 	.word	0x0800cc7d
 800cbc4:	0800cc7d 	.word	0x0800cc7d
 800cbc8:	0800cc55 	.word	0x0800cc55
 800cbcc:	0800cc7d 	.word	0x0800cc7d
 800cbd0:	0800cc7d 	.word	0x0800cc7d
 800cbd4:	0800cc7d 	.word	0x0800cc7d
 800cbd8:	0800cc7d 	.word	0x0800cc7d
 800cbdc:	0800cc7d 	.word	0x0800cc7d
 800cbe0:	0800cc7d 	.word	0x0800cc7d
 800cbe4:	0800cc7d 	.word	0x0800cc7d
 800cbe8:	0800cc5d 	.word	0x0800cc5d
 800cbec:	0800cc7d 	.word	0x0800cc7d
 800cbf0:	0800cc7d 	.word	0x0800cc7d
 800cbf4:	0800cc7d 	.word	0x0800cc7d
 800cbf8:	0800cc7d 	.word	0x0800cc7d
 800cbfc:	0800cc7d 	.word	0x0800cc7d
 800cc00:	0800cc7d 	.word	0x0800cc7d
 800cc04:	0800cc7d 	.word	0x0800cc7d
 800cc08:	0800cc65 	.word	0x0800cc65
 800cc0c:	0800cc7d 	.word	0x0800cc7d
 800cc10:	0800cc7d 	.word	0x0800cc7d
 800cc14:	0800cc7d 	.word	0x0800cc7d
 800cc18:	0800cc7d 	.word	0x0800cc7d
 800cc1c:	0800cc7d 	.word	0x0800cc7d
 800cc20:	0800cc7d 	.word	0x0800cc7d
 800cc24:	0800cc7d 	.word	0x0800cc7d
 800cc28:	0800cc6d 	.word	0x0800cc6d
 800cc2c:	0800cc7d 	.word	0x0800cc7d
 800cc30:	0800cc7d 	.word	0x0800cc7d
 800cc34:	0800cc7d 	.word	0x0800cc7d
 800cc38:	0800cc7d 	.word	0x0800cc7d
 800cc3c:	0800cc7d 	.word	0x0800cc7d
 800cc40:	0800cc7d 	.word	0x0800cc7d
 800cc44:	0800cc7d 	.word	0x0800cc7d
 800cc48:	0800cc75 	.word	0x0800cc75
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc52:	e0bc      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc54:	2304      	movs	r3, #4
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5a:	e0b8      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc5c:	2308      	movs	r3, #8
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc62:	e0b4      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc64:	2310      	movs	r3, #16
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6a:	e0b0      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc6c:	2320      	movs	r3, #32
 800cc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc72:	e0ac      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc74:	2340      	movs	r3, #64	@ 0x40
 800cc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7a:	e0a8      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc7c:	2380      	movs	r3, #128	@ 0x80
 800cc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc82:	e0a4      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a8f      	ldr	r2, [pc, #572]	@ (800cec8 <UART_SetConfig+0x6a0>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d130      	bne.n	800ccf0 <UART_SetConfig+0x4c8>
 800cc8e:	4b8d      	ldr	r3, [pc, #564]	@ (800cec4 <UART_SetConfig+0x69c>)
 800cc90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc92:	f003 0307 	and.w	r3, r3, #7
 800cc96:	2b05      	cmp	r3, #5
 800cc98:	d826      	bhi.n	800cce8 <UART_SetConfig+0x4c0>
 800cc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cca0 <UART_SetConfig+0x478>)
 800cc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca0:	0800ccb9 	.word	0x0800ccb9
 800cca4:	0800ccc1 	.word	0x0800ccc1
 800cca8:	0800ccc9 	.word	0x0800ccc9
 800ccac:	0800ccd1 	.word	0x0800ccd1
 800ccb0:	0800ccd9 	.word	0x0800ccd9
 800ccb4:	0800cce1 	.word	0x0800cce1
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccbe:	e086      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ccc0:	2304      	movs	r3, #4
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc6:	e082      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ccc8:	2308      	movs	r3, #8
 800ccca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccce:	e07e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ccd0:	2310      	movs	r3, #16
 800ccd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd6:	e07a      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ccd8:	2320      	movs	r3, #32
 800ccda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccde:	e076      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cce0:	2340      	movs	r3, #64	@ 0x40
 800cce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce6:	e072      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cce8:	2380      	movs	r3, #128	@ 0x80
 800ccea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccee:	e06e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a75      	ldr	r2, [pc, #468]	@ (800cecc <UART_SetConfig+0x6a4>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d130      	bne.n	800cd5c <UART_SetConfig+0x534>
 800ccfa:	4b72      	ldr	r3, [pc, #456]	@ (800cec4 <UART_SetConfig+0x69c>)
 800ccfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccfe:	f003 0307 	and.w	r3, r3, #7
 800cd02:	2b05      	cmp	r3, #5
 800cd04:	d826      	bhi.n	800cd54 <UART_SetConfig+0x52c>
 800cd06:	a201      	add	r2, pc, #4	@ (adr r2, 800cd0c <UART_SetConfig+0x4e4>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cd25 	.word	0x0800cd25
 800cd10:	0800cd2d 	.word	0x0800cd2d
 800cd14:	0800cd35 	.word	0x0800cd35
 800cd18:	0800cd3d 	.word	0x0800cd3d
 800cd1c:	0800cd45 	.word	0x0800cd45
 800cd20:	0800cd4d 	.word	0x0800cd4d
 800cd24:	2300      	movs	r3, #0
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2a:	e050      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd2c:	2304      	movs	r3, #4
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd32:	e04c      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd34:	2308      	movs	r3, #8
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3a:	e048      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd3c:	2310      	movs	r3, #16
 800cd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd42:	e044      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd44:	2320      	movs	r3, #32
 800cd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4a:	e040      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd4c:	2340      	movs	r3, #64	@ 0x40
 800cd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd52:	e03c      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd54:	2380      	movs	r3, #128	@ 0x80
 800cd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5a:	e038      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a5b      	ldr	r2, [pc, #364]	@ (800ced0 <UART_SetConfig+0x6a8>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d130      	bne.n	800cdc8 <UART_SetConfig+0x5a0>
 800cd66:	4b57      	ldr	r3, [pc, #348]	@ (800cec4 <UART_SetConfig+0x69c>)
 800cd68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd6a:	f003 0307 	and.w	r3, r3, #7
 800cd6e:	2b05      	cmp	r3, #5
 800cd70:	d826      	bhi.n	800cdc0 <UART_SetConfig+0x598>
 800cd72:	a201      	add	r2, pc, #4	@ (adr r2, 800cd78 <UART_SetConfig+0x550>)
 800cd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd78:	0800cd91 	.word	0x0800cd91
 800cd7c:	0800cd99 	.word	0x0800cd99
 800cd80:	0800cda1 	.word	0x0800cda1
 800cd84:	0800cda9 	.word	0x0800cda9
 800cd88:	0800cdb1 	.word	0x0800cdb1
 800cd8c:	0800cdb9 	.word	0x0800cdb9
 800cd90:	2302      	movs	r3, #2
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd96:	e01a      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cd98:	2304      	movs	r3, #4
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9e:	e016      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cda0:	2308      	movs	r3, #8
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda6:	e012      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cda8:	2310      	movs	r3, #16
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdae:	e00e      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cdb0:	2320      	movs	r3, #32
 800cdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb6:	e00a      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cdb8:	2340      	movs	r3, #64	@ 0x40
 800cdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdbe:	e006      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cdc0:	2380      	movs	r3, #128	@ 0x80
 800cdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc6:	e002      	b.n	800cdce <UART_SetConfig+0x5a6>
 800cdc8:	2380      	movs	r3, #128	@ 0x80
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a3f      	ldr	r2, [pc, #252]	@ (800ced0 <UART_SetConfig+0x6a8>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	f040 80f8 	bne.w	800cfca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cdde:	2b20      	cmp	r3, #32
 800cde0:	dc46      	bgt.n	800ce70 <UART_SetConfig+0x648>
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	f2c0 8082 	blt.w	800ceec <UART_SetConfig+0x6c4>
 800cde8:	3b02      	subs	r3, #2
 800cdea:	2b1e      	cmp	r3, #30
 800cdec:	d87e      	bhi.n	800ceec <UART_SetConfig+0x6c4>
 800cdee:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf4 <UART_SetConfig+0x5cc>)
 800cdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf4:	0800ce77 	.word	0x0800ce77
 800cdf8:	0800ceed 	.word	0x0800ceed
 800cdfc:	0800ce7f 	.word	0x0800ce7f
 800ce00:	0800ceed 	.word	0x0800ceed
 800ce04:	0800ceed 	.word	0x0800ceed
 800ce08:	0800ceed 	.word	0x0800ceed
 800ce0c:	0800ce8f 	.word	0x0800ce8f
 800ce10:	0800ceed 	.word	0x0800ceed
 800ce14:	0800ceed 	.word	0x0800ceed
 800ce18:	0800ceed 	.word	0x0800ceed
 800ce1c:	0800ceed 	.word	0x0800ceed
 800ce20:	0800ceed 	.word	0x0800ceed
 800ce24:	0800ceed 	.word	0x0800ceed
 800ce28:	0800ceed 	.word	0x0800ceed
 800ce2c:	0800ce9f 	.word	0x0800ce9f
 800ce30:	0800ceed 	.word	0x0800ceed
 800ce34:	0800ceed 	.word	0x0800ceed
 800ce38:	0800ceed 	.word	0x0800ceed
 800ce3c:	0800ceed 	.word	0x0800ceed
 800ce40:	0800ceed 	.word	0x0800ceed
 800ce44:	0800ceed 	.word	0x0800ceed
 800ce48:	0800ceed 	.word	0x0800ceed
 800ce4c:	0800ceed 	.word	0x0800ceed
 800ce50:	0800ceed 	.word	0x0800ceed
 800ce54:	0800ceed 	.word	0x0800ceed
 800ce58:	0800ceed 	.word	0x0800ceed
 800ce5c:	0800ceed 	.word	0x0800ceed
 800ce60:	0800ceed 	.word	0x0800ceed
 800ce64:	0800ceed 	.word	0x0800ceed
 800ce68:	0800ceed 	.word	0x0800ceed
 800ce6c:	0800cedf 	.word	0x0800cedf
 800ce70:	2b40      	cmp	r3, #64	@ 0x40
 800ce72:	d037      	beq.n	800cee4 <UART_SetConfig+0x6bc>
 800ce74:	e03a      	b.n	800ceec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce76:	f7fe f897 	bl	800afa8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce7c:	e03c      	b.n	800cef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fe f8a6 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce8c:	e034      	b.n	800cef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce8e:	f107 0318 	add.w	r3, r7, #24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe f9f2 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce9c:	e02c      	b.n	800cef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce9e:	4b09      	ldr	r3, [pc, #36]	@ (800cec4 <UART_SetConfig+0x69c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d016      	beq.n	800ced8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceaa:	4b06      	ldr	r3, [pc, #24]	@ (800cec4 <UART_SetConfig+0x69c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	08db      	lsrs	r3, r3, #3
 800ceb0:	f003 0303 	and.w	r3, r3, #3
 800ceb4:	4a07      	ldr	r2, [pc, #28]	@ (800ced4 <UART_SetConfig+0x6ac>)
 800ceb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ceba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cebc:	e01c      	b.n	800cef8 <UART_SetConfig+0x6d0>
 800cebe:	bf00      	nop
 800cec0:	40011400 	.word	0x40011400
 800cec4:	58024400 	.word	0x58024400
 800cec8:	40007800 	.word	0x40007800
 800cecc:	40007c00 	.word	0x40007c00
 800ced0:	58000c00 	.word	0x58000c00
 800ced4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ced8:	4b9d      	ldr	r3, [pc, #628]	@ (800d150 <UART_SetConfig+0x928>)
 800ceda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cedc:	e00c      	b.n	800cef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cede:	4b9d      	ldr	r3, [pc, #628]	@ (800d154 <UART_SetConfig+0x92c>)
 800cee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cee2:	e009      	b.n	800cef8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceea:	e005      	b.n	800cef8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ceec:	2300      	movs	r3, #0
 800ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f000 81de 	beq.w	800d2bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf04:	4a94      	ldr	r2, [pc, #592]	@ (800d158 <UART_SetConfig+0x930>)
 800cf06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	4613      	mov	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	4413      	add	r3, r2
 800cf1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d305      	bcc.n	800cf30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d903      	bls.n	800cf38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf36:	e1c1      	b.n	800d2bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	60bb      	str	r3, [r7, #8]
 800cf3e:	60fa      	str	r2, [r7, #12]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf44:	4a84      	ldr	r2, [pc, #528]	@ (800d158 <UART_SetConfig+0x930>)
 800cf46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	607a      	str	r2, [r7, #4]
 800cf52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf5a:	f7f3 fa19 	bl	8000390 <__aeabi_uldivmod>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	460b      	mov	r3, r1
 800cf62:	4610      	mov	r0, r2
 800cf64:	4619      	mov	r1, r3
 800cf66:	f04f 0200 	mov.w	r2, #0
 800cf6a:	f04f 0300 	mov.w	r3, #0
 800cf6e:	020b      	lsls	r3, r1, #8
 800cf70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf74:	0202      	lsls	r2, r0, #8
 800cf76:	6979      	ldr	r1, [r7, #20]
 800cf78:	6849      	ldr	r1, [r1, #4]
 800cf7a:	0849      	lsrs	r1, r1, #1
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	460c      	mov	r4, r1
 800cf80:	4605      	mov	r5, r0
 800cf82:	eb12 0804 	adds.w	r8, r2, r4
 800cf86:	eb43 0905 	adc.w	r9, r3, r5
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	469a      	mov	sl, r3
 800cf92:	4693      	mov	fp, r2
 800cf94:	4652      	mov	r2, sl
 800cf96:	465b      	mov	r3, fp
 800cf98:	4640      	mov	r0, r8
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	f7f3 f9f8 	bl	8000390 <__aeabi_uldivmod>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfae:	d308      	bcc.n	800cfc2 <UART_SetConfig+0x79a>
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfb6:	d204      	bcs.n	800cfc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfbe:	60da      	str	r2, [r3, #12]
 800cfc0:	e17c      	b.n	800d2bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cfc8:	e178      	b.n	800d2bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	69db      	ldr	r3, [r3, #28]
 800cfce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfd2:	f040 80c5 	bne.w	800d160 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cfd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cfda:	2b20      	cmp	r3, #32
 800cfdc:	dc48      	bgt.n	800d070 <UART_SetConfig+0x848>
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	db7b      	blt.n	800d0da <UART_SetConfig+0x8b2>
 800cfe2:	2b20      	cmp	r3, #32
 800cfe4:	d879      	bhi.n	800d0da <UART_SetConfig+0x8b2>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <UART_SetConfig+0x7c4>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d077 	.word	0x0800d077
 800cff0:	0800d07f 	.word	0x0800d07f
 800cff4:	0800d0db 	.word	0x0800d0db
 800cff8:	0800d0db 	.word	0x0800d0db
 800cffc:	0800d087 	.word	0x0800d087
 800d000:	0800d0db 	.word	0x0800d0db
 800d004:	0800d0db 	.word	0x0800d0db
 800d008:	0800d0db 	.word	0x0800d0db
 800d00c:	0800d097 	.word	0x0800d097
 800d010:	0800d0db 	.word	0x0800d0db
 800d014:	0800d0db 	.word	0x0800d0db
 800d018:	0800d0db 	.word	0x0800d0db
 800d01c:	0800d0db 	.word	0x0800d0db
 800d020:	0800d0db 	.word	0x0800d0db
 800d024:	0800d0db 	.word	0x0800d0db
 800d028:	0800d0db 	.word	0x0800d0db
 800d02c:	0800d0a7 	.word	0x0800d0a7
 800d030:	0800d0db 	.word	0x0800d0db
 800d034:	0800d0db 	.word	0x0800d0db
 800d038:	0800d0db 	.word	0x0800d0db
 800d03c:	0800d0db 	.word	0x0800d0db
 800d040:	0800d0db 	.word	0x0800d0db
 800d044:	0800d0db 	.word	0x0800d0db
 800d048:	0800d0db 	.word	0x0800d0db
 800d04c:	0800d0db 	.word	0x0800d0db
 800d050:	0800d0db 	.word	0x0800d0db
 800d054:	0800d0db 	.word	0x0800d0db
 800d058:	0800d0db 	.word	0x0800d0db
 800d05c:	0800d0db 	.word	0x0800d0db
 800d060:	0800d0db 	.word	0x0800d0db
 800d064:	0800d0db 	.word	0x0800d0db
 800d068:	0800d0db 	.word	0x0800d0db
 800d06c:	0800d0cd 	.word	0x0800d0cd
 800d070:	2b40      	cmp	r3, #64	@ 0x40
 800d072:	d02e      	beq.n	800d0d2 <UART_SetConfig+0x8aa>
 800d074:	e031      	b.n	800d0da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d076:	f7fc fd61 	bl	8009b3c <HAL_RCC_GetPCLK1Freq>
 800d07a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d07c:	e033      	b.n	800d0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d07e:	f7fc fd73 	bl	8009b68 <HAL_RCC_GetPCLK2Freq>
 800d082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d084:	e02f      	b.n	800d0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fd ffa2 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d094:	e027      	b.n	800d0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d096:	f107 0318 	add.w	r3, r7, #24
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe f8ee 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a4:	e01f      	b.n	800d0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800d15c <UART_SetConfig+0x934>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0320 	and.w	r3, r3, #32
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d009      	beq.n	800d0c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0b2:	4b2a      	ldr	r3, [pc, #168]	@ (800d15c <UART_SetConfig+0x934>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	08db      	lsrs	r3, r3, #3
 800d0b8:	f003 0303 	and.w	r3, r3, #3
 800d0bc:	4a24      	ldr	r2, [pc, #144]	@ (800d150 <UART_SetConfig+0x928>)
 800d0be:	fa22 f303 	lsr.w	r3, r2, r3
 800d0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0c4:	e00f      	b.n	800d0e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d0c6:	4b22      	ldr	r3, [pc, #136]	@ (800d150 <UART_SetConfig+0x928>)
 800d0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0ca:	e00c      	b.n	800d0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0cc:	4b21      	ldr	r3, [pc, #132]	@ (800d154 <UART_SetConfig+0x92c>)
 800d0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0d0:	e009      	b.n	800d0e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0d8:	e005      	b.n	800d0e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d0e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 80e7 	beq.w	800d2bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f2:	4a19      	ldr	r2, [pc, #100]	@ (800d158 <UART_SetConfig+0x930>)
 800d0f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d100:	005a      	lsls	r2, r3, #1
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	085b      	lsrs	r3, r3, #1
 800d108:	441a      	add	r2, r3
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d112:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	2b0f      	cmp	r3, #15
 800d118:	d916      	bls.n	800d148 <UART_SetConfig+0x920>
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d120:	d212      	bcs.n	800d148 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	b29b      	uxth	r3, r3
 800d126:	f023 030f 	bic.w	r3, r3, #15
 800d12a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12e:	085b      	lsrs	r3, r3, #1
 800d130:	b29b      	uxth	r3, r3
 800d132:	f003 0307 	and.w	r3, r3, #7
 800d136:	b29a      	uxth	r2, r3
 800d138:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d13a:	4313      	orrs	r3, r2
 800d13c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d144:	60da      	str	r2, [r3, #12]
 800d146:	e0b9      	b.n	800d2bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d14e:	e0b5      	b.n	800d2bc <UART_SetConfig+0xa94>
 800d150:	03d09000 	.word	0x03d09000
 800d154:	003d0900 	.word	0x003d0900
 800d158:	0801258c 	.word	0x0801258c
 800d15c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d160:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d164:	2b20      	cmp	r3, #32
 800d166:	dc49      	bgt.n	800d1fc <UART_SetConfig+0x9d4>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	db7c      	blt.n	800d266 <UART_SetConfig+0xa3e>
 800d16c:	2b20      	cmp	r3, #32
 800d16e:	d87a      	bhi.n	800d266 <UART_SetConfig+0xa3e>
 800d170:	a201      	add	r2, pc, #4	@ (adr r2, 800d178 <UART_SetConfig+0x950>)
 800d172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d176:	bf00      	nop
 800d178:	0800d203 	.word	0x0800d203
 800d17c:	0800d20b 	.word	0x0800d20b
 800d180:	0800d267 	.word	0x0800d267
 800d184:	0800d267 	.word	0x0800d267
 800d188:	0800d213 	.word	0x0800d213
 800d18c:	0800d267 	.word	0x0800d267
 800d190:	0800d267 	.word	0x0800d267
 800d194:	0800d267 	.word	0x0800d267
 800d198:	0800d223 	.word	0x0800d223
 800d19c:	0800d267 	.word	0x0800d267
 800d1a0:	0800d267 	.word	0x0800d267
 800d1a4:	0800d267 	.word	0x0800d267
 800d1a8:	0800d267 	.word	0x0800d267
 800d1ac:	0800d267 	.word	0x0800d267
 800d1b0:	0800d267 	.word	0x0800d267
 800d1b4:	0800d267 	.word	0x0800d267
 800d1b8:	0800d233 	.word	0x0800d233
 800d1bc:	0800d267 	.word	0x0800d267
 800d1c0:	0800d267 	.word	0x0800d267
 800d1c4:	0800d267 	.word	0x0800d267
 800d1c8:	0800d267 	.word	0x0800d267
 800d1cc:	0800d267 	.word	0x0800d267
 800d1d0:	0800d267 	.word	0x0800d267
 800d1d4:	0800d267 	.word	0x0800d267
 800d1d8:	0800d267 	.word	0x0800d267
 800d1dc:	0800d267 	.word	0x0800d267
 800d1e0:	0800d267 	.word	0x0800d267
 800d1e4:	0800d267 	.word	0x0800d267
 800d1e8:	0800d267 	.word	0x0800d267
 800d1ec:	0800d267 	.word	0x0800d267
 800d1f0:	0800d267 	.word	0x0800d267
 800d1f4:	0800d267 	.word	0x0800d267
 800d1f8:	0800d259 	.word	0x0800d259
 800d1fc:	2b40      	cmp	r3, #64	@ 0x40
 800d1fe:	d02e      	beq.n	800d25e <UART_SetConfig+0xa36>
 800d200:	e031      	b.n	800d266 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d202:	f7fc fc9b 	bl	8009b3c <HAL_RCC_GetPCLK1Freq>
 800d206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d208:	e033      	b.n	800d272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d20a:	f7fc fcad 	bl	8009b68 <HAL_RCC_GetPCLK2Freq>
 800d20e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d210:	e02f      	b.n	800d272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d216:	4618      	mov	r0, r3
 800d218:	f7fd fedc 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d220:	e027      	b.n	800d272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d222:	f107 0318 	add.w	r3, r7, #24
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe f828 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d230:	e01f      	b.n	800d272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d232:	4b2d      	ldr	r3, [pc, #180]	@ (800d2e8 <UART_SetConfig+0xac0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0320 	and.w	r3, r3, #32
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d009      	beq.n	800d252 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d23e:	4b2a      	ldr	r3, [pc, #168]	@ (800d2e8 <UART_SetConfig+0xac0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	08db      	lsrs	r3, r3, #3
 800d244:	f003 0303 	and.w	r3, r3, #3
 800d248:	4a28      	ldr	r2, [pc, #160]	@ (800d2ec <UART_SetConfig+0xac4>)
 800d24a:	fa22 f303 	lsr.w	r3, r2, r3
 800d24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d250:	e00f      	b.n	800d272 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d252:	4b26      	ldr	r3, [pc, #152]	@ (800d2ec <UART_SetConfig+0xac4>)
 800d254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d256:	e00c      	b.n	800d272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d258:	4b25      	ldr	r3, [pc, #148]	@ (800d2f0 <UART_SetConfig+0xac8>)
 800d25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d25c:	e009      	b.n	800d272 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d264:	e005      	b.n	800d272 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d266:	2300      	movs	r3, #0
 800d268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d270:	bf00      	nop
    }

    if (pclk != 0U)
 800d272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d021      	beq.n	800d2bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f4 <UART_SetConfig+0xacc>)
 800d27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d282:	461a      	mov	r2, r3
 800d284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d286:	fbb3 f2f2 	udiv	r2, r3, r2
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	085b      	lsrs	r3, r3, #1
 800d290:	441a      	add	r2, r3
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	fbb2 f3f3 	udiv	r3, r2, r3
 800d29a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29e:	2b0f      	cmp	r3, #15
 800d2a0:	d909      	bls.n	800d2b6 <UART_SetConfig+0xa8e>
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2a8:	d205      	bcs.n	800d2b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	60da      	str	r2, [r3, #12]
 800d2b4:	e002      	b.n	800d2bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d2d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3748      	adds	r7, #72	@ 0x48
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2e6:	bf00      	nop
 800d2e8:	58024400 	.word	0x58024400
 800d2ec:	03d09000 	.word	0x03d09000
 800d2f0:	003d0900 	.word	0x003d0900
 800d2f4:	0801258c 	.word	0x0801258c

0800d2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d304:	f003 0308 	and.w	r3, r3, #8
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00a      	beq.n	800d322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	430a      	orrs	r2, r1
 800d320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00a      	beq.n	800d344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	430a      	orrs	r2, r1
 800d342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d348:	f003 0302 	and.w	r3, r3, #2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00a      	beq.n	800d366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	430a      	orrs	r2, r1
 800d364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36a:	f003 0304 	and.w	r3, r3, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00a      	beq.n	800d388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	430a      	orrs	r2, r1
 800d386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38c:	f003 0310 	and.w	r3, r3, #16
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00a      	beq.n	800d3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ae:	f003 0320 	and.w	r3, r3, #32
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00a      	beq.n	800d3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	430a      	orrs	r2, r1
 800d3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01a      	beq.n	800d40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	430a      	orrs	r2, r1
 800d3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3f6:	d10a      	bne.n	800d40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	430a      	orrs	r2, r1
 800d40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00a      	beq.n	800d430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	605a      	str	r2, [r3, #4]
  }
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b098      	sub	sp, #96	@ 0x60
 800d440:	af02      	add	r7, sp, #8
 800d442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d44c:	f7f4 faa2 	bl	8001994 <HAL_GetTick>
 800d450:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f003 0308 	and.w	r3, r3, #8
 800d45c:	2b08      	cmp	r3, #8
 800d45e:	d12f      	bne.n	800d4c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d460:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d468:	2200      	movs	r2, #0
 800d46a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f88e 	bl	800d590 <UART_WaitOnFlagUntilTimeout>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d022      	beq.n	800d4c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d482:	e853 3f00 	ldrex	r3, [r3]
 800d486:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d48a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d48e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	461a      	mov	r2, r3
 800d496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d498:	647b      	str	r3, [r7, #68]	@ 0x44
 800d49a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d49e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4a0:	e841 2300 	strex	r3, r2, [r1]
 800d4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e6      	bne.n	800d47a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2220      	movs	r2, #32
 800d4b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	e063      	b.n	800d588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 0304 	and.w	r3, r3, #4
 800d4ca:	2b04      	cmp	r3, #4
 800d4cc:	d149      	bne.n	800d562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f857 	bl	800d590 <UART_WaitOnFlagUntilTimeout>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d03c      	beq.n	800d562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	e853 3f00 	ldrex	r3, [r3]
 800d4f4:	623b      	str	r3, [r7, #32]
   return(result);
 800d4f6:	6a3b      	ldr	r3, [r7, #32]
 800d4f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	461a      	mov	r2, r3
 800d504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d506:	633b      	str	r3, [r7, #48]	@ 0x30
 800d508:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d50e:	e841 2300 	strex	r3, r2, [r1]
 800d512:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1e6      	bne.n	800d4e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3308      	adds	r3, #8
 800d520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	e853 3f00 	ldrex	r3, [r3]
 800d528:	60fb      	str	r3, [r7, #12]
   return(result);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f023 0301 	bic.w	r3, r3, #1
 800d530:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3308      	adds	r3, #8
 800d538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d53a:	61fa      	str	r2, [r7, #28]
 800d53c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53e:	69b9      	ldr	r1, [r7, #24]
 800d540:	69fa      	ldr	r2, [r7, #28]
 800d542:	e841 2300 	strex	r3, r2, [r1]
 800d546:	617b      	str	r3, [r7, #20]
   return(result);
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1e5      	bne.n	800d51a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2220      	movs	r2, #32
 800d552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d55e:	2303      	movs	r3, #3
 800d560:	e012      	b.n	800d588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2220      	movs	r2, #32
 800d566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2220      	movs	r2, #32
 800d56e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3758      	adds	r7, #88	@ 0x58
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	603b      	str	r3, [r7, #0]
 800d59c:	4613      	mov	r3, r2
 800d59e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5a0:	e04f      	b.n	800d642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a8:	d04b      	beq.n	800d642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5aa:	f7f4 f9f3 	bl	8001994 <HAL_GetTick>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	69ba      	ldr	r2, [r7, #24]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d302      	bcc.n	800d5c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d101      	bne.n	800d5c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	e04e      	b.n	800d662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 0304 	and.w	r3, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d037      	beq.n	800d642 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	2b80      	cmp	r3, #128	@ 0x80
 800d5d6:	d034      	beq.n	800d642 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2b40      	cmp	r3, #64	@ 0x40
 800d5dc:	d031      	beq.n	800d642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	69db      	ldr	r3, [r3, #28]
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b08      	cmp	r3, #8
 800d5ea:	d110      	bne.n	800d60e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2208      	movs	r2, #8
 800d5f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 f839 	bl	800d66c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2208      	movs	r2, #8
 800d5fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e029      	b.n	800d662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	69db      	ldr	r3, [r3, #28]
 800d614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d61c:	d111      	bne.n	800d642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 f81f 	bl	800d66c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2220      	movs	r2, #32
 800d632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d63e:	2303      	movs	r3, #3
 800d640:	e00f      	b.n	800d662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	69da      	ldr	r2, [r3, #28]
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	4013      	ands	r3, r2
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	429a      	cmp	r2, r3
 800d650:	bf0c      	ite	eq
 800d652:	2301      	moveq	r3, #1
 800d654:	2300      	movne	r3, #0
 800d656:	b2db      	uxtb	r3, r3
 800d658:	461a      	mov	r2, r3
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d0a0      	beq.n	800d5a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b095      	sub	sp, #84	@ 0x54
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67c:	e853 3f00 	ldrex	r3, [r3]
 800d680:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d692:	643b      	str	r3, [r7, #64]	@ 0x40
 800d694:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d696:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d698:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e6      	bne.n	800d674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	e853 3f00 	ldrex	r3, [r3]
 800d6b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6b6:	69fa      	ldr	r2, [r7, #28]
 800d6b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d734 <UART_EndRxTransfer+0xc8>)
 800d6ba:	4013      	ands	r3, r2
 800d6bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3308      	adds	r3, #8
 800d6c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6ce:	e841 2300 	strex	r3, r2, [r1]
 800d6d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1e5      	bne.n	800d6a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d118      	bne.n	800d714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	e853 3f00 	ldrex	r3, [r3]
 800d6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f023 0310 	bic.w	r3, r3, #16
 800d6f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d700:	61bb      	str	r3, [r7, #24]
 800d702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d704:	6979      	ldr	r1, [r7, #20]
 800d706:	69ba      	ldr	r2, [r7, #24]
 800d708:	e841 2300 	strex	r3, r2, [r1]
 800d70c:	613b      	str	r3, [r7, #16]
   return(result);
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1e6      	bne.n	800d6e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2220      	movs	r2, #32
 800d718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d728:	bf00      	nop
 800d72a:	3754      	adds	r7, #84	@ 0x54
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	effffffe 	.word	0xeffffffe

0800d738 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d738:	b480      	push	{r7}
 800d73a:	b085      	sub	sp, #20
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d746:	2b01      	cmp	r3, #1
 800d748:	d101      	bne.n	800d74e <HAL_UARTEx_DisableFifoMode+0x16>
 800d74a:	2302      	movs	r3, #2
 800d74c:	e027      	b.n	800d79e <HAL_UARTEx_DisableFifoMode+0x66>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2201      	movs	r2, #1
 800d752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2224      	movs	r2, #36	@ 0x24
 800d75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f022 0201 	bic.w	r2, r2, #1
 800d774:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d77c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2220      	movs	r2, #32
 800d790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d101      	bne.n	800d7c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e02d      	b.n	800d81e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2224      	movs	r2, #36	@ 0x24
 800d7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f022 0201 	bic.w	r2, r2, #1
 800d7e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	683a      	ldr	r2, [r7, #0]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f850 	bl	800d8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2220      	movs	r2, #32
 800d810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b084      	sub	sp, #16
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d836:	2b01      	cmp	r3, #1
 800d838:	d101      	bne.n	800d83e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d83a:	2302      	movs	r3, #2
 800d83c:	e02d      	b.n	800d89a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2224      	movs	r2, #36	@ 0x24
 800d84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f022 0201 	bic.w	r2, r2, #1
 800d864:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	430a      	orrs	r2, r1
 800d878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f812 	bl	800d8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2220      	movs	r2, #32
 800d88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d898:	2300      	movs	r3, #0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
	...

0800d8a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d108      	bne.n	800d8c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8c4:	e031      	b.n	800d92a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8c6:	2310      	movs	r3, #16
 800d8c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8ca:	2310      	movs	r3, #16
 800d8cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	0e5b      	lsrs	r3, r3, #25
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	f003 0307 	and.w	r3, r3, #7
 800d8dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	0f5b      	lsrs	r3, r3, #29
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 0307 	and.w	r3, r3, #7
 800d8ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8ee:	7bbb      	ldrb	r3, [r7, #14]
 800d8f0:	7b3a      	ldrb	r2, [r7, #12]
 800d8f2:	4911      	ldr	r1, [pc, #68]	@ (800d938 <UARTEx_SetNbDataToProcess+0x94>)
 800d8f4:	5c8a      	ldrb	r2, [r1, r2]
 800d8f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8fa:	7b3a      	ldrb	r2, [r7, #12]
 800d8fc:	490f      	ldr	r1, [pc, #60]	@ (800d93c <UARTEx_SetNbDataToProcess+0x98>)
 800d8fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d900:	fb93 f3f2 	sdiv	r3, r3, r2
 800d904:	b29a      	uxth	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	7b7a      	ldrb	r2, [r7, #13]
 800d910:	4909      	ldr	r1, [pc, #36]	@ (800d938 <UARTEx_SetNbDataToProcess+0x94>)
 800d912:	5c8a      	ldrb	r2, [r1, r2]
 800d914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d918:	7b7a      	ldrb	r2, [r7, #13]
 800d91a:	4908      	ldr	r1, [pc, #32]	@ (800d93c <UARTEx_SetNbDataToProcess+0x98>)
 800d91c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d91e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d922:	b29a      	uxth	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d92a:	bf00      	nop
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	080125a4 	.word	0x080125a4
 800d93c:	080125ac 	.word	0x080125ac

0800d940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d940:	b084      	sub	sp, #16
 800d942:	b580      	push	{r7, lr}
 800d944:	b084      	sub	sp, #16
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	f107 001c 	add.w	r0, r7, #28
 800d94e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d952:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d956:	2b01      	cmp	r3, #1
 800d958:	d121      	bne.n	800d99e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68da      	ldr	r2, [r3, #12]
 800d96a:	4b2c      	ldr	r3, [pc, #176]	@ (800da1c <USB_CoreInit+0xdc>)
 800d96c:	4013      	ands	r3, r2
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d97e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d982:	2b01      	cmp	r3, #1
 800d984:	d105      	bne.n	800d992 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f001 fafa 	bl	800ef8c <USB_CoreReset>
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]
 800d99c:	e01b      	b.n	800d9d6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f001 faee 	bl	800ef8c <USB_CoreReset>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d9b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d106      	bne.n	800d9ca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800d9c8:	e005      	b.n	800d9d6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d9d6:	7fbb      	ldrb	r3, [r7, #30]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d116      	bne.n	800da0a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d9ea:	4b0d      	ldr	r3, [pc, #52]	@ (800da20 <USB_CoreInit+0xe0>)
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	689b      	ldr	r3, [r3, #8]
 800d9f6:	f043 0206 	orr.w	r2, r3, #6
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	f043 0220 	orr.w	r2, r3, #32
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da16:	b004      	add	sp, #16
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	ffbdffbf 	.word	0xffbdffbf
 800da20:	03ee0000 	.word	0x03ee0000

0800da24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	4613      	mov	r3, r2
 800da30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800da32:	79fb      	ldrb	r3, [r7, #7]
 800da34:	2b02      	cmp	r3, #2
 800da36:	d165      	bne.n	800db04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	4a41      	ldr	r2, [pc, #260]	@ (800db40 <USB_SetTurnaroundTime+0x11c>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d906      	bls.n	800da4e <USB_SetTurnaroundTime+0x2a>
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	4a40      	ldr	r2, [pc, #256]	@ (800db44 <USB_SetTurnaroundTime+0x120>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d202      	bcs.n	800da4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800da48:	230f      	movs	r3, #15
 800da4a:	617b      	str	r3, [r7, #20]
 800da4c:	e062      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	4a3c      	ldr	r2, [pc, #240]	@ (800db44 <USB_SetTurnaroundTime+0x120>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d306      	bcc.n	800da64 <USB_SetTurnaroundTime+0x40>
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	4a3b      	ldr	r2, [pc, #236]	@ (800db48 <USB_SetTurnaroundTime+0x124>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d202      	bcs.n	800da64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800da5e:	230e      	movs	r3, #14
 800da60:	617b      	str	r3, [r7, #20]
 800da62:	e057      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	4a38      	ldr	r2, [pc, #224]	@ (800db48 <USB_SetTurnaroundTime+0x124>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d306      	bcc.n	800da7a <USB_SetTurnaroundTime+0x56>
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	4a37      	ldr	r2, [pc, #220]	@ (800db4c <USB_SetTurnaroundTime+0x128>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d202      	bcs.n	800da7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800da74:	230d      	movs	r3, #13
 800da76:	617b      	str	r3, [r7, #20]
 800da78:	e04c      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	4a33      	ldr	r2, [pc, #204]	@ (800db4c <USB_SetTurnaroundTime+0x128>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d306      	bcc.n	800da90 <USB_SetTurnaroundTime+0x6c>
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	4a32      	ldr	r2, [pc, #200]	@ (800db50 <USB_SetTurnaroundTime+0x12c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d802      	bhi.n	800da90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800da8a:	230c      	movs	r3, #12
 800da8c:	617b      	str	r3, [r7, #20]
 800da8e:	e041      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	4a2f      	ldr	r2, [pc, #188]	@ (800db50 <USB_SetTurnaroundTime+0x12c>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d906      	bls.n	800daa6 <USB_SetTurnaroundTime+0x82>
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	4a2e      	ldr	r2, [pc, #184]	@ (800db54 <USB_SetTurnaroundTime+0x130>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d802      	bhi.n	800daa6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800daa0:	230b      	movs	r3, #11
 800daa2:	617b      	str	r3, [r7, #20]
 800daa4:	e036      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	4a2a      	ldr	r2, [pc, #168]	@ (800db54 <USB_SetTurnaroundTime+0x130>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d906      	bls.n	800dabc <USB_SetTurnaroundTime+0x98>
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	4a29      	ldr	r2, [pc, #164]	@ (800db58 <USB_SetTurnaroundTime+0x134>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d802      	bhi.n	800dabc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dab6:	230a      	movs	r3, #10
 800dab8:	617b      	str	r3, [r7, #20]
 800daba:	e02b      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	4a26      	ldr	r2, [pc, #152]	@ (800db58 <USB_SetTurnaroundTime+0x134>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d906      	bls.n	800dad2 <USB_SetTurnaroundTime+0xae>
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	4a25      	ldr	r2, [pc, #148]	@ (800db5c <USB_SetTurnaroundTime+0x138>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d202      	bcs.n	800dad2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dacc:	2309      	movs	r3, #9
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	e020      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	4a21      	ldr	r2, [pc, #132]	@ (800db5c <USB_SetTurnaroundTime+0x138>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d306      	bcc.n	800dae8 <USB_SetTurnaroundTime+0xc4>
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	4a20      	ldr	r2, [pc, #128]	@ (800db60 <USB_SetTurnaroundTime+0x13c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d802      	bhi.n	800dae8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dae2:	2308      	movs	r3, #8
 800dae4:	617b      	str	r3, [r7, #20]
 800dae6:	e015      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	4a1d      	ldr	r2, [pc, #116]	@ (800db60 <USB_SetTurnaroundTime+0x13c>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d906      	bls.n	800dafe <USB_SetTurnaroundTime+0xda>
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4a1c      	ldr	r2, [pc, #112]	@ (800db64 <USB_SetTurnaroundTime+0x140>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d202      	bcs.n	800dafe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800daf8:	2307      	movs	r3, #7
 800dafa:	617b      	str	r3, [r7, #20]
 800dafc:	e00a      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dafe:	2306      	movs	r3, #6
 800db00:	617b      	str	r3, [r7, #20]
 800db02:	e007      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d102      	bne.n	800db10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800db0a:	2309      	movs	r3, #9
 800db0c:	617b      	str	r3, [r7, #20]
 800db0e:	e001      	b.n	800db14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800db10:	2309      	movs	r3, #9
 800db12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	68da      	ldr	r2, [r3, #12]
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	029b      	lsls	r3, r3, #10
 800db28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800db2c:	431a      	orrs	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	371c      	adds	r7, #28
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	00d8acbf 	.word	0x00d8acbf
 800db44:	00e4e1c0 	.word	0x00e4e1c0
 800db48:	00f42400 	.word	0x00f42400
 800db4c:	01067380 	.word	0x01067380
 800db50:	011a499f 	.word	0x011a499f
 800db54:	01312cff 	.word	0x01312cff
 800db58:	014ca43f 	.word	0x014ca43f
 800db5c:	016e3600 	.word	0x016e3600
 800db60:	01a6ab1f 	.word	0x01a6ab1f
 800db64:	01e84800 	.word	0x01e84800

0800db68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	f043 0201 	orr.w	r2, r3, #1
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b083      	sub	sp, #12
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	f023 0201 	bic.w	r2, r3, #1
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d115      	bne.n	800dbfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dbda:	200a      	movs	r0, #10
 800dbdc:	f7f3 fee6 	bl	80019ac <HAL_Delay>
      ms += 10U;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	330a      	adds	r3, #10
 800dbe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f001 f93f 	bl	800ee6a <USB_GetMode>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d01e      	beq.n	800dc30 <USB_SetCurrentMode+0x84>
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2bc7      	cmp	r3, #199	@ 0xc7
 800dbf6:	d9f0      	bls.n	800dbda <USB_SetCurrentMode+0x2e>
 800dbf8:	e01a      	b.n	800dc30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dbfa:	78fb      	ldrb	r3, [r7, #3]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d115      	bne.n	800dc2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dc0c:	200a      	movs	r0, #10
 800dc0e:	f7f3 fecd 	bl	80019ac <HAL_Delay>
      ms += 10U;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	330a      	adds	r3, #10
 800dc16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f001 f926 	bl	800ee6a <USB_GetMode>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d005      	beq.n	800dc30 <USB_SetCurrentMode+0x84>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2bc7      	cmp	r3, #199	@ 0xc7
 800dc28:	d9f0      	bls.n	800dc0c <USB_SetCurrentMode+0x60>
 800dc2a:	e001      	b.n	800dc30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e005      	b.n	800dc3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2bc8      	cmp	r3, #200	@ 0xc8
 800dc34:	d101      	bne.n	800dc3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e000      	b.n	800dc3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc44:	b084      	sub	sp, #16
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b086      	sub	sp, #24
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dc52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dc5e:	2300      	movs	r3, #0
 800dc60:	613b      	str	r3, [r7, #16]
 800dc62:	e009      	b.n	800dc78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	3340      	adds	r3, #64	@ 0x40
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	3301      	adds	r3, #1
 800dc76:	613b      	str	r3, [r7, #16]
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	2b0e      	cmp	r3, #14
 800dc7c:	d9f2      	bls.n	800dc64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dc7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d11c      	bne.n	800dcc0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc94:	f043 0302 	orr.w	r3, r3, #2
 800dc98:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc9e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	601a      	str	r2, [r3, #0]
 800dcbe:	e005      	b.n	800dccc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d10d      	bne.n	800dcfc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d104      	bne.n	800dcf2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dce8:	2100      	movs	r1, #0
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f968 	bl	800dfc0 <USB_SetDevSpeed>
 800dcf0:	e008      	b.n	800dd04 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f963 	bl	800dfc0 <USB_SetDevSpeed>
 800dcfa:	e003      	b.n	800dd04 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dcfc:	2103      	movs	r1, #3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f95e 	bl	800dfc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd04:	2110      	movs	r1, #16
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f8fa 	bl	800df00 <USB_FlushTxFifo>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 f924 	bl	800df64 <USB_FlushRxFifo>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	2300      	movs	r3, #0
 800dd30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd38:	461a      	mov	r2, r3
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd44:	461a      	mov	r2, r3
 800dd46:	2300      	movs	r3, #0
 800dd48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	613b      	str	r3, [r7, #16]
 800dd4e:	e043      	b.n	800ddd8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd66:	d118      	bne.n	800dd9a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	015a      	lsls	r2, r3, #5
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	e013      	b.n	800ddac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	015a      	lsls	r2, r3, #5
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd90:	461a      	mov	r2, r3
 800dd92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	e008      	b.n	800ddac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	015a      	lsls	r2, r3, #5
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	4413      	add	r3, r2
 800dda2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dda6:	461a      	mov	r2, r3
 800dda8:	2300      	movs	r3, #0
 800ddaa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	015a      	lsls	r2, r3, #5
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddb8:	461a      	mov	r2, r3
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	015a      	lsls	r2, r3, #5
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ddca:	461a      	mov	r2, r3
 800ddcc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ddd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	613b      	str	r3, [r7, #16]
 800ddd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dddc:	461a      	mov	r2, r3
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d3b5      	bcc.n	800dd50 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dde4:	2300      	movs	r3, #0
 800dde6:	613b      	str	r3, [r7, #16]
 800dde8:	e043      	b.n	800de72 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	015a      	lsls	r2, r3, #5
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ddfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de00:	d118      	bne.n	800de34 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10a      	bne.n	800de1e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	015a      	lsls	r2, r3, #5
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	4413      	add	r3, r2
 800de10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de14:	461a      	mov	r2, r3
 800de16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	e013      	b.n	800de46 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	4413      	add	r3, r2
 800de26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de2a:	461a      	mov	r2, r3
 800de2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800de30:	6013      	str	r3, [r2, #0]
 800de32:	e008      	b.n	800de46 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	015a      	lsls	r2, r3, #5
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4413      	add	r3, r2
 800de3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de40:	461a      	mov	r2, r3
 800de42:	2300      	movs	r3, #0
 800de44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	015a      	lsls	r2, r3, #5
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	4413      	add	r3, r2
 800de4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de52:	461a      	mov	r2, r3
 800de54:	2300      	movs	r3, #0
 800de56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	015a      	lsls	r2, r3, #5
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4413      	add	r3, r2
 800de60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de64:	461a      	mov	r2, r3
 800de66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800de6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	3301      	adds	r3, #1
 800de70:	613b      	str	r3, [r7, #16]
 800de72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800de76:	461a      	mov	r2, r3
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d3b5      	bcc.n	800ddea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800de9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dea0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d105      	bne.n	800deb4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	f043 0210 	orr.w	r2, r3, #16
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	699a      	ldr	r2, [r3, #24]
 800deb8:	4b0f      	ldr	r3, [pc, #60]	@ (800def8 <USB_DevInit+0x2b4>)
 800deba:	4313      	orrs	r3, r2
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dec0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d005      	beq.n	800ded4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	f043 0208 	orr.w	r2, r3, #8
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ded4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d105      	bne.n	800dee8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	699a      	ldr	r2, [r3, #24]
 800dee0:	4b06      	ldr	r3, [pc, #24]	@ (800defc <USB_DevInit+0x2b8>)
 800dee2:	4313      	orrs	r3, r2
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800def4:	b004      	add	sp, #16
 800def6:	4770      	bx	lr
 800def8:	803c3800 	.word	0x803c3800
 800defc:	40000004 	.word	0x40000004

0800df00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df00:	b480      	push	{r7}
 800df02:	b085      	sub	sp, #20
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df0a:	2300      	movs	r3, #0
 800df0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3301      	adds	r3, #1
 800df12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df1a:	d901      	bls.n	800df20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e01b      	b.n	800df58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	daf2      	bge.n	800df0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800df28:	2300      	movs	r3, #0
 800df2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	019b      	lsls	r3, r3, #6
 800df30:	f043 0220 	orr.w	r2, r3, #32
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df44:	d901      	bls.n	800df4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800df46:	2303      	movs	r3, #3
 800df48:	e006      	b.n	800df58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	f003 0320 	and.w	r3, r3, #32
 800df52:	2b20      	cmp	r3, #32
 800df54:	d0f0      	beq.n	800df38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df64:	b480      	push	{r7}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df6c:	2300      	movs	r3, #0
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	3301      	adds	r3, #1
 800df74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df7c:	d901      	bls.n	800df82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e018      	b.n	800dfb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	2b00      	cmp	r3, #0
 800df88:	daf2      	bge.n	800df70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df8a:	2300      	movs	r3, #0
 800df8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2210      	movs	r2, #16
 800df92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3301      	adds	r3, #1
 800df98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dfa0:	d901      	bls.n	800dfa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	e006      	b.n	800dfb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	f003 0310 	and.w	r3, r3, #16
 800dfae:	2b10      	cmp	r3, #16
 800dfb0:	d0f0      	beq.n	800df94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	78fb      	ldrb	r3, [r7, #3]
 800dfda:	68f9      	ldr	r1, [r7, #12]
 800dfdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800dff2:	b480      	push	{r7}
 800dff4:	b087      	sub	sp, #28
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	f003 0306 	and.w	r3, r3, #6
 800e00a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e012:	2300      	movs	r3, #0
 800e014:	75fb      	strb	r3, [r7, #23]
 800e016:	e00a      	b.n	800e02e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d002      	beq.n	800e024 <USB_GetDevSpeed+0x32>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b06      	cmp	r3, #6
 800e022:	d102      	bne.n	800e02a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e024:	2302      	movs	r3, #2
 800e026:	75fb      	strb	r3, [r7, #23]
 800e028:	e001      	b.n	800e02e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e02a:	230f      	movs	r3, #15
 800e02c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e030:	4618      	mov	r0, r3
 800e032:	371c      	adds	r7, #28
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	785b      	ldrb	r3, [r3, #1]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d139      	bne.n	800e0cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e05e:	69da      	ldr	r2, [r3, #28]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f003 030f 	and.w	r3, r3, #15
 800e068:	2101      	movs	r1, #1
 800e06a:	fa01 f303 	lsl.w	r3, r1, r3
 800e06e:	b29b      	uxth	r3, r3
 800e070:	68f9      	ldr	r1, [r7, #12]
 800e072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e076:	4313      	orrs	r3, r2
 800e078:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	015a      	lsls	r2, r3, #5
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4413      	add	r3, r2
 800e082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d153      	bne.n	800e138 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	015a      	lsls	r2, r3, #5
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4413      	add	r3, r2
 800e098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	791b      	ldrb	r3, [r3, #4]
 800e0aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e0ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	059b      	lsls	r3, r3, #22
 800e0b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	0159      	lsls	r1, r3, #5
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	440b      	add	r3, r1
 800e0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4b20      	ldr	r3, [pc, #128]	@ (800e148 <USB_ActivateEndpoint+0x10c>)
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	600b      	str	r3, [r1, #0]
 800e0ca:	e035      	b.n	800e138 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0d2:	69da      	ldr	r2, [r3, #28]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	f003 030f 	and.w	r3, r3, #15
 800e0dc:	2101      	movs	r1, #1
 800e0de:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e2:	041b      	lsls	r3, r3, #16
 800e0e4:	68f9      	ldr	r1, [r7, #12]
 800e0e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	015a      	lsls	r2, r3, #5
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e100:	2b00      	cmp	r3, #0
 800e102:	d119      	bne.n	800e138 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	015a      	lsls	r2, r3, #5
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4413      	add	r3, r2
 800e10c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	791b      	ldrb	r3, [r3, #4]
 800e11e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e120:	430b      	orrs	r3, r1
 800e122:	431a      	orrs	r2, r3
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	0159      	lsls	r1, r3, #5
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	440b      	add	r3, r1
 800e12c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e130:	4619      	mov	r1, r3
 800e132:	4b05      	ldr	r3, [pc, #20]	@ (800e148 <USB_ActivateEndpoint+0x10c>)
 800e134:	4313      	orrs	r3, r2
 800e136:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e138:	2300      	movs	r3, #0
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	10008000 	.word	0x10008000

0800e14c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	785b      	ldrb	r3, [r3, #1]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d161      	bne.n	800e22c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	015a      	lsls	r2, r3, #5
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	4413      	add	r3, r2
 800e170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e17a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e17e:	d11f      	bne.n	800e1c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	0151      	lsls	r1, r2, #5
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	440a      	add	r2, r1
 800e196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e19a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e19e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	015a      	lsls	r2, r3, #5
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	0151      	lsls	r1, r2, #5
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	440a      	add	r2, r1
 800e1b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e1be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	f003 030f 	and.w	r3, r3, #15
 800e1d0:	2101      	movs	r1, #1
 800e1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	43db      	mvns	r3, r3
 800e1da:	68f9      	ldr	r1, [r7, #12]
 800e1dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1ea:	69da      	ldr	r2, [r3, #28]
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f003 030f 	and.w	r3, r3, #15
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	43db      	mvns	r3, r3
 800e1fe:	68f9      	ldr	r1, [r7, #12]
 800e200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e204:	4013      	ands	r3, r2
 800e206:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	015a      	lsls	r2, r3, #5
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4413      	add	r3, r2
 800e210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	0159      	lsls	r1, r3, #5
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	440b      	add	r3, r1
 800e21e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e222:	4619      	mov	r1, r3
 800e224:	4b35      	ldr	r3, [pc, #212]	@ (800e2fc <USB_DeactivateEndpoint+0x1b0>)
 800e226:	4013      	ands	r3, r2
 800e228:	600b      	str	r3, [r1, #0]
 800e22a:	e060      	b.n	800e2ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	015a      	lsls	r2, r3, #5
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4413      	add	r3, r2
 800e234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e23e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e242:	d11f      	bne.n	800e284 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	0151      	lsls	r1, r2, #5
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	440a      	add	r2, r1
 800e25a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e25e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e262:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	015a      	lsls	r2, r3, #5
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	0151      	lsls	r1, r2, #5
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	440a      	add	r2, r1
 800e27a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e27e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e28a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	f003 030f 	and.w	r3, r3, #15
 800e294:	2101      	movs	r1, #1
 800e296:	fa01 f303 	lsl.w	r3, r1, r3
 800e29a:	041b      	lsls	r3, r3, #16
 800e29c:	43db      	mvns	r3, r3
 800e29e:	68f9      	ldr	r1, [r7, #12]
 800e2a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2a4:	4013      	ands	r3, r2
 800e2a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2ae:	69da      	ldr	r2, [r3, #28]
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	f003 030f 	and.w	r3, r3, #15
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e2be:	041b      	lsls	r3, r3, #16
 800e2c0:	43db      	mvns	r3, r3
 800e2c2:	68f9      	ldr	r1, [r7, #12]
 800e2c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2c8:	4013      	ands	r3, r2
 800e2ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	0159      	lsls	r1, r3, #5
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	440b      	add	r3, r1
 800e2e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4b05      	ldr	r3, [pc, #20]	@ (800e300 <USB_DeactivateEndpoint+0x1b4>)
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	ec337800 	.word	0xec337800
 800e300:	eff37800 	.word	0xeff37800

0800e304 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b08a      	sub	sp, #40	@ 0x28
 800e308:	af02      	add	r7, sp, #8
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	4613      	mov	r3, r2
 800e310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	785b      	ldrb	r3, [r3, #1]
 800e320:	2b01      	cmp	r3, #1
 800e322:	f040 8185 	bne.w	800e630 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	691b      	ldr	r3, [r3, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d132      	bne.n	800e394 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	4413      	add	r3, r2
 800e336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e33a:	691a      	ldr	r2, [r3, #16]
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	0159      	lsls	r1, r3, #5
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	440b      	add	r3, r1
 800e344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e348:	4619      	mov	r1, r3
 800e34a:	4ba7      	ldr	r3, [pc, #668]	@ (800e5e8 <USB_EPStartXfer+0x2e4>)
 800e34c:	4013      	ands	r3, r2
 800e34e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	015a      	lsls	r2, r3, #5
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	4413      	add	r3, r2
 800e358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	69ba      	ldr	r2, [r7, #24]
 800e360:	0151      	lsls	r1, r2, #5
 800e362:	69fa      	ldr	r2, [r7, #28]
 800e364:	440a      	add	r2, r1
 800e366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e36a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e36e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	4413      	add	r3, r2
 800e378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e37c:	691a      	ldr	r2, [r3, #16]
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	0159      	lsls	r1, r3, #5
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	440b      	add	r3, r1
 800e386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e38a:	4619      	mov	r1, r3
 800e38c:	4b97      	ldr	r3, [pc, #604]	@ (800e5ec <USB_EPStartXfer+0x2e8>)
 800e38e:	4013      	ands	r3, r2
 800e390:	610b      	str	r3, [r1, #16]
 800e392:	e097      	b.n	800e4c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3a0:	691a      	ldr	r2, [r3, #16]
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	0159      	lsls	r1, r3, #5
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	440b      	add	r3, r1
 800e3aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4b8e      	ldr	r3, [pc, #568]	@ (800e5ec <USB_EPStartXfer+0x2e8>)
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	015a      	lsls	r2, r3, #5
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3c2:	691a      	ldr	r2, [r3, #16]
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	0159      	lsls	r1, r3, #5
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	440b      	add	r3, r1
 800e3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	4b85      	ldr	r3, [pc, #532]	@ (800e5e8 <USB_EPStartXfer+0x2e4>)
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d11a      	bne.n	800e414 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	691a      	ldr	r2, [r3, #16]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d903      	bls.n	800e3f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	689a      	ldr	r2, [r3, #8]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	015a      	lsls	r2, r3, #5
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	69ba      	ldr	r2, [r7, #24]
 800e402:	0151      	lsls	r1, r2, #5
 800e404:	69fa      	ldr	r2, [r7, #28]
 800e406:	440a      	add	r2, r1
 800e408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e40c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e410:	6113      	str	r3, [r2, #16]
 800e412:	e044      	b.n	800e49e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	691a      	ldr	r2, [r3, #16]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	4413      	add	r3, r2
 800e41e:	1e5a      	subs	r2, r3, #1
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	fbb2 f3f3 	udiv	r3, r2, r3
 800e428:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	015a      	lsls	r2, r3, #5
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	4413      	add	r3, r2
 800e432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e436:	691a      	ldr	r2, [r3, #16]
 800e438:	8afb      	ldrh	r3, [r7, #22]
 800e43a:	04d9      	lsls	r1, r3, #19
 800e43c:	4b6c      	ldr	r3, [pc, #432]	@ (800e5f0 <USB_EPStartXfer+0x2ec>)
 800e43e:	400b      	ands	r3, r1
 800e440:	69b9      	ldr	r1, [r7, #24]
 800e442:	0148      	lsls	r0, r1, #5
 800e444:	69f9      	ldr	r1, [r7, #28]
 800e446:	4401      	add	r1, r0
 800e448:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e44c:	4313      	orrs	r3, r2
 800e44e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	791b      	ldrb	r3, [r3, #4]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d122      	bne.n	800e49e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	015a      	lsls	r2, r3, #5
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	4413      	add	r3, r2
 800e460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	0151      	lsls	r1, r2, #5
 800e46a:	69fa      	ldr	r2, [r7, #28]
 800e46c:	440a      	add	r2, r1
 800e46e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e472:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e476:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	015a      	lsls	r2, r3, #5
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	4413      	add	r3, r2
 800e480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e484:	691a      	ldr	r2, [r3, #16]
 800e486:	8afb      	ldrh	r3, [r7, #22]
 800e488:	075b      	lsls	r3, r3, #29
 800e48a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e48e:	69b9      	ldr	r1, [r7, #24]
 800e490:	0148      	lsls	r0, r1, #5
 800e492:	69f9      	ldr	r1, [r7, #28]
 800e494:	4401      	add	r1, r0
 800e496:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e49a:	4313      	orrs	r3, r2
 800e49c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	015a      	lsls	r2, r3, #5
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4aa:	691a      	ldr	r2, [r3, #16]
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4b4:	69b9      	ldr	r1, [r7, #24]
 800e4b6:	0148      	lsls	r0, r1, #5
 800e4b8:	69f9      	ldr	r1, [r7, #28]
 800e4ba:	4401      	add	r1, r0
 800e4bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d14b      	bne.n	800e562 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	69db      	ldr	r3, [r3, #28]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d009      	beq.n	800e4e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	015a      	lsls	r2, r3, #5
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	4413      	add	r3, r2
 800e4da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4de:	461a      	mov	r2, r3
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	69db      	ldr	r3, [r3, #28]
 800e4e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	791b      	ldrb	r3, [r3, #4]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d128      	bne.n	800e540 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d110      	bne.n	800e520 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	015a      	lsls	r2, r3, #5
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	4413      	add	r3, r2
 800e506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	69ba      	ldr	r2, [r7, #24]
 800e50e:	0151      	lsls	r1, r2, #5
 800e510:	69fa      	ldr	r2, [r7, #28]
 800e512:	440a      	add	r2, r1
 800e514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e518:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	e00f      	b.n	800e540 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	015a      	lsls	r2, r3, #5
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	4413      	add	r3, r2
 800e528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	69ba      	ldr	r2, [r7, #24]
 800e530:	0151      	lsls	r1, r2, #5
 800e532:	69fa      	ldr	r2, [r7, #28]
 800e534:	440a      	add	r2, r1
 800e536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e53a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e53e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	015a      	lsls	r2, r3, #5
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	4413      	add	r3, r2
 800e548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	69ba      	ldr	r2, [r7, #24]
 800e550:	0151      	lsls	r1, r2, #5
 800e552:	69fa      	ldr	r2, [r7, #28]
 800e554:	440a      	add	r2, r1
 800e556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e55a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e55e:	6013      	str	r3, [r2, #0]
 800e560:	e169      	b.n	800e836 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	015a      	lsls	r2, r3, #5
 800e566:	69fb      	ldr	r3, [r7, #28]
 800e568:	4413      	add	r3, r2
 800e56a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	69ba      	ldr	r2, [r7, #24]
 800e572:	0151      	lsls	r1, r2, #5
 800e574:	69fa      	ldr	r2, [r7, #28]
 800e576:	440a      	add	r2, r1
 800e578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e57c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e580:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	791b      	ldrb	r3, [r3, #4]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d015      	beq.n	800e5b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f000 8151 	beq.w	800e836 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e59a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	f003 030f 	and.w	r3, r3, #15
 800e5a4:	2101      	movs	r1, #1
 800e5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5aa:	69f9      	ldr	r1, [r7, #28]
 800e5ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	634b      	str	r3, [r1, #52]	@ 0x34
 800e5b4:	e13f      	b.n	800e836 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d116      	bne.n	800e5f4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	015a      	lsls	r2, r3, #5
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	69ba      	ldr	r2, [r7, #24]
 800e5d6:	0151      	lsls	r1, r2, #5
 800e5d8:	69fa      	ldr	r2, [r7, #28]
 800e5da:	440a      	add	r2, r1
 800e5dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e5e4:	6013      	str	r3, [r2, #0]
 800e5e6:	e015      	b.n	800e614 <USB_EPStartXfer+0x310>
 800e5e8:	e007ffff 	.word	0xe007ffff
 800e5ec:	fff80000 	.word	0xfff80000
 800e5f0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	69ba      	ldr	r2, [r7, #24]
 800e604:	0151      	lsls	r1, r2, #5
 800e606:	69fa      	ldr	r2, [r7, #28]
 800e608:	440a      	add	r2, r1
 800e60a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e60e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e612:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	68d9      	ldr	r1, [r3, #12]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	b298      	uxth	r0, r3
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	9300      	str	r3, [sp, #0]
 800e626:	4603      	mov	r3, r0
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f000 f9b9 	bl	800e9a0 <USB_WritePacket>
 800e62e:	e102      	b.n	800e836 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e63c:	691a      	ldr	r2, [r3, #16]
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	0159      	lsls	r1, r3, #5
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	440b      	add	r3, r1
 800e646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e64a:	4619      	mov	r1, r3
 800e64c:	4b7c      	ldr	r3, [pc, #496]	@ (800e840 <USB_EPStartXfer+0x53c>)
 800e64e:	4013      	ands	r3, r2
 800e650:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	015a      	lsls	r2, r3, #5
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	4413      	add	r3, r2
 800e65a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e65e:	691a      	ldr	r2, [r3, #16]
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	0159      	lsls	r1, r3, #5
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	440b      	add	r3, r1
 800e668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e66c:	4619      	mov	r1, r3
 800e66e:	4b75      	ldr	r3, [pc, #468]	@ (800e844 <USB_EPStartXfer+0x540>)
 800e670:	4013      	ands	r3, r2
 800e672:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d12f      	bne.n	800e6da <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d003      	beq.n	800e68a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	689a      	ldr	r2, [r3, #8]
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	689a      	ldr	r2, [r3, #8]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	015a      	lsls	r2, r3, #5
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	4413      	add	r3, r2
 800e69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e69e:	691a      	ldr	r2, [r3, #16]
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	6a1b      	ldr	r3, [r3, #32]
 800e6a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6a8:	69b9      	ldr	r1, [r7, #24]
 800e6aa:	0148      	lsls	r0, r1, #5
 800e6ac:	69f9      	ldr	r1, [r7, #28]
 800e6ae:	4401      	add	r1, r0
 800e6b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	015a      	lsls	r2, r3, #5
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	4413      	add	r3, r2
 800e6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	69ba      	ldr	r2, [r7, #24]
 800e6c8:	0151      	lsls	r1, r2, #5
 800e6ca:	69fa      	ldr	r2, [r7, #28]
 800e6cc:	440a      	add	r2, r1
 800e6ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e6d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6d6:	6113      	str	r3, [r2, #16]
 800e6d8:	e05f      	b.n	800e79a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d123      	bne.n	800e72a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	015a      	lsls	r2, r3, #5
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6ee:	691a      	ldr	r2, [r3, #16]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e6f8:	69b9      	ldr	r1, [r7, #24]
 800e6fa:	0148      	lsls	r0, r1, #5
 800e6fc:	69f9      	ldr	r1, [r7, #28]
 800e6fe:	4401      	add	r1, r0
 800e700:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e704:	4313      	orrs	r3, r2
 800e706:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	015a      	lsls	r2, r3, #5
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	4413      	add	r3, r2
 800e710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	69ba      	ldr	r2, [r7, #24]
 800e718:	0151      	lsls	r1, r2, #5
 800e71a:	69fa      	ldr	r2, [r7, #28]
 800e71c:	440a      	add	r2, r1
 800e71e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e722:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e726:	6113      	str	r3, [r2, #16]
 800e728:	e037      	b.n	800e79a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	691a      	ldr	r2, [r3, #16]
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	4413      	add	r3, r2
 800e734:	1e5a      	subs	r2, r3, #1
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e73e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	8afa      	ldrh	r2, [r7, #22]
 800e746:	fb03 f202 	mul.w	r2, r3, r2
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	015a      	lsls	r2, r3, #5
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	4413      	add	r3, r2
 800e756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e75a:	691a      	ldr	r2, [r3, #16]
 800e75c:	8afb      	ldrh	r3, [r7, #22]
 800e75e:	04d9      	lsls	r1, r3, #19
 800e760:	4b39      	ldr	r3, [pc, #228]	@ (800e848 <USB_EPStartXfer+0x544>)
 800e762:	400b      	ands	r3, r1
 800e764:	69b9      	ldr	r1, [r7, #24]
 800e766:	0148      	lsls	r0, r1, #5
 800e768:	69f9      	ldr	r1, [r7, #28]
 800e76a:	4401      	add	r1, r0
 800e76c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e770:	4313      	orrs	r3, r2
 800e772:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	015a      	lsls	r2, r3, #5
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	4413      	add	r3, r2
 800e77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e780:	691a      	ldr	r2, [r3, #16]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e78a:	69b9      	ldr	r1, [r7, #24]
 800e78c:	0148      	lsls	r0, r1, #5
 800e78e:	69f9      	ldr	r1, [r7, #28]
 800e790:	4401      	add	r1, r0
 800e792:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e796:	4313      	orrs	r3, r2
 800e798:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d10d      	bne.n	800e7bc <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d009      	beq.n	800e7bc <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	68d9      	ldr	r1, [r3, #12]
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7b8:	460a      	mov	r2, r1
 800e7ba:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	791b      	ldrb	r3, [r3, #4]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d128      	bne.n	800e816 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d110      	bne.n	800e7f6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	015a      	lsls	r2, r3, #5
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	69ba      	ldr	r2, [r7, #24]
 800e7e4:	0151      	lsls	r1, r2, #5
 800e7e6:	69fa      	ldr	r2, [r7, #28]
 800e7e8:	440a      	add	r2, r1
 800e7ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e7f2:	6013      	str	r3, [r2, #0]
 800e7f4:	e00f      	b.n	800e816 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	015a      	lsls	r2, r3, #5
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	69ba      	ldr	r2, [r7, #24]
 800e806:	0151      	lsls	r1, r2, #5
 800e808:	69fa      	ldr	r2, [r7, #28]
 800e80a:	440a      	add	r2, r1
 800e80c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e814:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	015a      	lsls	r2, r3, #5
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	4413      	add	r3, r2
 800e81e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	69ba      	ldr	r2, [r7, #24]
 800e826:	0151      	lsls	r1, r2, #5
 800e828:	69fa      	ldr	r2, [r7, #28]
 800e82a:	440a      	add	r2, r1
 800e82c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e830:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e834:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3720      	adds	r7, #32
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	fff80000 	.word	0xfff80000
 800e844:	e007ffff 	.word	0xe007ffff
 800e848:	1ff80000 	.word	0x1ff80000

0800e84c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b087      	sub	sp, #28
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e856:	2300      	movs	r3, #0
 800e858:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e85a:	2300      	movs	r3, #0
 800e85c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	785b      	ldrb	r3, [r3, #1]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d14a      	bne.n	800e900 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	015a      	lsls	r2, r3, #5
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	4413      	add	r3, r2
 800e874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e87e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e882:	f040 8086 	bne.w	800e992 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	015a      	lsls	r2, r3, #5
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	4413      	add	r3, r2
 800e890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	7812      	ldrb	r2, [r2, #0]
 800e89a:	0151      	lsls	r1, r2, #5
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	440a      	add	r2, r1
 800e8a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e8a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	015a      	lsls	r2, r3, #5
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	683a      	ldr	r2, [r7, #0]
 800e8bc:	7812      	ldrb	r2, [r2, #0]
 800e8be:	0151      	lsls	r1, r2, #5
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	440a      	add	r2, r1
 800e8c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e8cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d902      	bls.n	800e8e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	75fb      	strb	r3, [r7, #23]
          break;
 800e8e2:	e056      	b.n	800e992 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	015a      	lsls	r2, r3, #5
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e8f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e8fc:	d0e7      	beq.n	800e8ce <USB_EPStopXfer+0x82>
 800e8fe:	e048      	b.n	800e992 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	015a      	lsls	r2, r3, #5
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	4413      	add	r3, r2
 800e90a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e918:	d13b      	bne.n	800e992 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	015a      	lsls	r2, r3, #5
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	4413      	add	r3, r2
 800e924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	7812      	ldrb	r2, [r2, #0]
 800e92e:	0151      	lsls	r1, r2, #5
 800e930:	693a      	ldr	r2, [r7, #16]
 800e932:	440a      	add	r2, r1
 800e934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e938:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e93c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	7812      	ldrb	r2, [r2, #0]
 800e952:	0151      	lsls	r1, r2, #5
 800e954:	693a      	ldr	r2, [r7, #16]
 800e956:	440a      	add	r2, r1
 800e958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e95c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e960:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	3301      	adds	r3, #1
 800e966:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e96e:	4293      	cmp	r3, r2
 800e970:	d902      	bls.n	800e978 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	75fb      	strb	r3, [r7, #23]
          break;
 800e976:	e00c      	b.n	800e992 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	015a      	lsls	r2, r3, #5
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	4413      	add	r3, r2
 800e982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e98c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e990:	d0e7      	beq.n	800e962 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e992:	7dfb      	ldrb	r3, [r7, #23]
}
 800e994:	4618      	mov	r0, r3
 800e996:	371c      	adds	r7, #28
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b089      	sub	sp, #36	@ 0x24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	4611      	mov	r1, r2
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	71fb      	strb	r3, [r7, #7]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e9be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d123      	bne.n	800ea0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e9c6:	88bb      	ldrh	r3, [r7, #4]
 800e9c8:	3303      	adds	r3, #3
 800e9ca:	089b      	lsrs	r3, r3, #2
 800e9cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	61bb      	str	r3, [r7, #24]
 800e9d2:	e018      	b.n	800ea06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e9d4:	79fb      	ldrb	r3, [r7, #7]
 800e9d6:	031a      	lsls	r2, r3, #12
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	4413      	add	r3, r2
 800e9dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	3301      	adds	r3, #1
 800ea04:	61bb      	str	r3, [r7, #24]
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d3e2      	bcc.n	800e9d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3724      	adds	r7, #36	@ 0x24
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b08b      	sub	sp, #44	@ 0x2c
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	4613      	mov	r3, r2
 800ea28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ea32:	88fb      	ldrh	r3, [r7, #6]
 800ea34:	089b      	lsrs	r3, r3, #2
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ea3a:	88fb      	ldrh	r3, [r7, #6]
 800ea3c:	f003 0303 	and.w	r3, r3, #3
 800ea40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ea42:	2300      	movs	r3, #0
 800ea44:	623b      	str	r3, [r7, #32]
 800ea46:	e014      	b.n	800ea72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea52:	601a      	str	r2, [r3, #0]
    pDest++;
 800ea54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea56:	3301      	adds	r3, #1
 800ea58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea62:	3301      	adds	r3, #1
 800ea64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea68:	3301      	adds	r3, #1
 800ea6a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	623b      	str	r3, [r7, #32]
 800ea72:	6a3a      	ldr	r2, [r7, #32]
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d3e6      	bcc.n	800ea48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ea7a:	8bfb      	ldrh	r3, [r7, #30]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d01e      	beq.n	800eabe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ea80:	2300      	movs	r3, #0
 800ea82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f107 0310 	add.w	r3, r7, #16
 800ea90:	6812      	ldr	r2, [r2, #0]
 800ea92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	00db      	lsls	r3, r3, #3
 800ea9c:	fa22 f303 	lsr.w	r3, r2, r3
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa4:	701a      	strb	r2, [r3, #0]
      i++;
 800eaa6:	6a3b      	ldr	r3, [r7, #32]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	623b      	str	r3, [r7, #32]
      pDest++;
 800eaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaae:	3301      	adds	r3, #1
 800eab0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eab2:	8bfb      	ldrh	r3, [r7, #30]
 800eab4:	3b01      	subs	r3, #1
 800eab6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800eab8:	8bfb      	ldrh	r3, [r7, #30]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1ea      	bne.n	800ea94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800eabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	372c      	adds	r7, #44	@ 0x2c
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	785b      	ldrb	r3, [r3, #1]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d12c      	bne.n	800eb42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	015a      	lsls	r2, r3, #5
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4413      	add	r3, r2
 800eaf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	db12      	blt.n	800eb20 <USB_EPSetStall+0x54>
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00f      	beq.n	800eb20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	0151      	lsls	r1, r2, #5
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	440a      	add	r2, r1
 800eb16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eb1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	015a      	lsls	r2, r3, #5
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	4413      	add	r3, r2
 800eb28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	0151      	lsls	r1, r2, #5
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	440a      	add	r2, r1
 800eb36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb3e:	6013      	str	r3, [r2, #0]
 800eb40:	e02b      	b.n	800eb9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	015a      	lsls	r2, r3, #5
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	4413      	add	r3, r2
 800eb4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	db12      	blt.n	800eb7a <USB_EPSetStall+0xae>
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00f      	beq.n	800eb7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	015a      	lsls	r2, r3, #5
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	4413      	add	r3, r2
 800eb62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	0151      	lsls	r1, r2, #5
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	440a      	add	r2, r1
 800eb70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eb78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	015a      	lsls	r2, r3, #5
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	4413      	add	r3, r2
 800eb82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	0151      	lsls	r1, r2, #5
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	440a      	add	r2, r1
 800eb90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	785b      	ldrb	r3, [r3, #1]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d128      	bne.n	800ec16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68ba      	ldr	r2, [r7, #8]
 800ebd4:	0151      	lsls	r1, r2, #5
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	440a      	add	r2, r1
 800ebda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebe2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	791b      	ldrb	r3, [r3, #4]
 800ebe8:	2b03      	cmp	r3, #3
 800ebea:	d003      	beq.n	800ebf4 <USB_EPClearStall+0x4c>
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	791b      	ldrb	r3, [r3, #4]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d138      	bne.n	800ec66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	0151      	lsls	r1, r2, #5
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	440a      	add	r2, r1
 800ec0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec12:	6013      	str	r3, [r2, #0]
 800ec14:	e027      	b.n	800ec66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	0151      	lsls	r1, r2, #5
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	440a      	add	r2, r1
 800ec2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ec34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	791b      	ldrb	r3, [r3, #4]
 800ec3a:	2b03      	cmp	r3, #3
 800ec3c:	d003      	beq.n	800ec46 <USB_EPClearStall+0x9e>
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	791b      	ldrb	r3, [r3, #4]
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d10f      	bne.n	800ec66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	015a      	lsls	r2, r3, #5
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68ba      	ldr	r2, [r7, #8]
 800ec56:	0151      	lsls	r1, r2, #5
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	440a      	add	r2, r1
 800ec5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ec92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ec96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	011b      	lsls	r3, r3, #4
 800eca4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800eca8:	68f9      	ldr	r1, [r7, #12]
 800ecaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ecda:	f023 0303 	bic.w	r3, r3, #3
 800ecde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ecee:	f023 0302 	bic.w	r3, r3, #2
 800ecf2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3714      	adds	r7, #20
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ed02:	b480      	push	{r7}
 800ed04:	b085      	sub	sp, #20
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ed1c:	f023 0303 	bic.w	r3, r3, #3
 800ed20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ed30:	f043 0302 	orr.w	r3, r3, #2
 800ed34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3714      	adds	r7, #20
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b085      	sub	sp, #20
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695b      	ldr	r3, [r3, #20]
 800ed50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	4013      	ands	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr

0800ed6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b085      	sub	sp, #20
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed86:	69db      	ldr	r3, [r3, #28]
 800ed88:	68ba      	ldr	r2, [r7, #8]
 800ed8a:	4013      	ands	r3, r2
 800ed8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	0c1b      	lsrs	r3, r3, #16
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3714      	adds	r7, #20
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ed9e:	b480      	push	{r7}
 800eda0:	b085      	sub	sp, #20
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edb0:	699b      	ldr	r3, [r3, #24]
 800edb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edba:	69db      	ldr	r3, [r3, #28]
 800edbc:	68ba      	ldr	r2, [r7, #8]
 800edbe:	4013      	ands	r3, r2
 800edc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	b29b      	uxth	r3, r3
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3714      	adds	r7, #20
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr

0800edd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800edd2:	b480      	push	{r7}
 800edd4:	b085      	sub	sp, #20
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	460b      	mov	r3, r1
 800eddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ede2:	78fb      	ldrb	r3, [r7, #3]
 800ede4:	015a      	lsls	r2, r3, #5
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	4413      	add	r3, r2
 800edea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	4013      	ands	r3, r2
 800edfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee00:	68bb      	ldr	r3, [r7, #8]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b087      	sub	sp, #28
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	460b      	mov	r3, r1
 800ee18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee24:	691b      	ldr	r3, [r3, #16]
 800ee26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ee2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ee32:	78fb      	ldrb	r3, [r7, #3]
 800ee34:	f003 030f 	and.w	r3, r3, #15
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee3e:	01db      	lsls	r3, r3, #7
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ee48:	78fb      	ldrb	r3, [r7, #3]
 800ee4a:	015a      	lsls	r2, r3, #5
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	4413      	add	r3, r2
 800ee50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	4013      	ands	r3, r2
 800ee5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ee5c:	68bb      	ldr	r3, [r7, #8]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	371c      	adds	r7, #28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b083      	sub	sp, #12
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	695b      	ldr	r3, [r3, #20]
 800ee76:	f003 0301 	and.w	r3, r3, #1
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
	...

0800ee88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eea2:	4619      	mov	r1, r3
 800eea4:	4b09      	ldr	r3, [pc, #36]	@ (800eecc <USB_ActivateSetup+0x44>)
 800eea6:	4013      	ands	r3, r2
 800eea8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800eeb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eebc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	fffff800 	.word	0xfffff800

0800eed0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	460b      	mov	r3, r1
 800eeda:	607a      	str	r2, [r7, #4]
 800eedc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	333c      	adds	r3, #60	@ 0x3c
 800eee6:	3304      	adds	r3, #4
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	4a26      	ldr	r2, [pc, #152]	@ (800ef88 <USB_EP0_OutStart+0xb8>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d90a      	bls.n	800ef0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef04:	d101      	bne.n	800ef0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ef06:	2300      	movs	r3, #0
 800ef08:	e037      	b.n	800ef7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef10:	461a      	mov	r2, r3
 800ef12:	2300      	movs	r3, #0
 800ef14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ef28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef38:	f043 0318 	orr.w	r3, r3, #24
 800ef3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ef50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ef52:	7afb      	ldrb	r3, [r7, #11]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d10f      	bne.n	800ef78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef5e:	461a      	mov	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	697a      	ldr	r2, [r7, #20]
 800ef6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ef76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	371c      	adds	r7, #28
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop
 800ef88:	4f54300a 	.word	0x4f54300a

0800ef8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800efa4:	d901      	bls.n	800efaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800efa6:	2303      	movs	r3, #3
 800efa8:	e01b      	b.n	800efe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	daf2      	bge.n	800ef98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800efb2:	2300      	movs	r3, #0
 800efb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	f043 0201 	orr.w	r2, r3, #1
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3301      	adds	r3, #1
 800efc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800efce:	d901      	bls.n	800efd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800efd0:	2303      	movs	r3, #3
 800efd2:	e006      	b.n	800efe2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d0f0      	beq.n	800efc2 <USB_CoreReset+0x36>

  return HAL_OK;
 800efe0:	2300      	movs	r3, #0
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
	...

0800eff0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	460b      	mov	r3, r1
 800effa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800effc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f000:	f002 fcf4 	bl	80119ec <USBD_static_malloc>
 800f004:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d109      	bne.n	800f020 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	32b0      	adds	r2, #176	@ 0xb0
 800f016:	2100      	movs	r1, #0
 800f018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f01c:	2302      	movs	r3, #2
 800f01e:	e0d4      	b.n	800f1ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f020:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f024:	2100      	movs	r1, #0
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f002 fd46 	bl	8011ab8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	32b0      	adds	r2, #176	@ 0xb0
 800f036:	68f9      	ldr	r1, [r7, #12]
 800f038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	32b0      	adds	r2, #176	@ 0xb0
 800f046:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	7c1b      	ldrb	r3, [r3, #16]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d138      	bne.n	800f0ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f058:	4b5e      	ldr	r3, [pc, #376]	@ (800f1d4 <USBD_CDC_Init+0x1e4>)
 800f05a:	7819      	ldrb	r1, [r3, #0]
 800f05c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f060:	2202      	movs	r2, #2
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f002 fb9f 	bl	80117a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f068:	4b5a      	ldr	r3, [pc, #360]	@ (800f1d4 <USBD_CDC_Init+0x1e4>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	f003 020f 	and.w	r2, r3, #15
 800f070:	6879      	ldr	r1, [r7, #4]
 800f072:	4613      	mov	r3, r2
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	4413      	add	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	440b      	add	r3, r1
 800f07c:	3324      	adds	r3, #36	@ 0x24
 800f07e:	2201      	movs	r2, #1
 800f080:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f082:	4b55      	ldr	r3, [pc, #340]	@ (800f1d8 <USBD_CDC_Init+0x1e8>)
 800f084:	7819      	ldrb	r1, [r3, #0]
 800f086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f08a:	2202      	movs	r2, #2
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f002 fb8a 	bl	80117a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f092:	4b51      	ldr	r3, [pc, #324]	@ (800f1d8 <USBD_CDC_Init+0x1e8>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	f003 020f 	and.w	r2, r3, #15
 800f09a:	6879      	ldr	r1, [r7, #4]
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	440b      	add	r3, r1
 800f0a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f0ae:	4b4b      	ldr	r3, [pc, #300]	@ (800f1dc <USBD_CDC_Init+0x1ec>)
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	f003 020f 	and.w	r2, r3, #15
 800f0b6:	6879      	ldr	r1, [r7, #4]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	4413      	add	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3326      	adds	r3, #38	@ 0x26
 800f0c4:	2210      	movs	r2, #16
 800f0c6:	801a      	strh	r2, [r3, #0]
 800f0c8:	e035      	b.n	800f136 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f0ca:	4b42      	ldr	r3, [pc, #264]	@ (800f1d4 <USBD_CDC_Init+0x1e4>)
 800f0cc:	7819      	ldrb	r1, [r3, #0]
 800f0ce:	2340      	movs	r3, #64	@ 0x40
 800f0d0:	2202      	movs	r2, #2
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f002 fb67 	bl	80117a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f0d8:	4b3e      	ldr	r3, [pc, #248]	@ (800f1d4 <USBD_CDC_Init+0x1e4>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 020f 	and.w	r2, r3, #15
 800f0e0:	6879      	ldr	r1, [r7, #4]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	009b      	lsls	r3, r3, #2
 800f0e6:	4413      	add	r3, r2
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	440b      	add	r3, r1
 800f0ec:	3324      	adds	r3, #36	@ 0x24
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f0f2:	4b39      	ldr	r3, [pc, #228]	@ (800f1d8 <USBD_CDC_Init+0x1e8>)
 800f0f4:	7819      	ldrb	r1, [r3, #0]
 800f0f6:	2340      	movs	r3, #64	@ 0x40
 800f0f8:	2202      	movs	r2, #2
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f002 fb53 	bl	80117a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f100:	4b35      	ldr	r3, [pc, #212]	@ (800f1d8 <USBD_CDC_Init+0x1e8>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	f003 020f 	and.w	r2, r3, #15
 800f108:	6879      	ldr	r1, [r7, #4]
 800f10a:	4613      	mov	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4413      	add	r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	440b      	add	r3, r1
 800f114:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f118:	2201      	movs	r2, #1
 800f11a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f11c:	4b2f      	ldr	r3, [pc, #188]	@ (800f1dc <USBD_CDC_Init+0x1ec>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	f003 020f 	and.w	r2, r3, #15
 800f124:	6879      	ldr	r1, [r7, #4]
 800f126:	4613      	mov	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	440b      	add	r3, r1
 800f130:	3326      	adds	r3, #38	@ 0x26
 800f132:	2210      	movs	r2, #16
 800f134:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f136:	4b29      	ldr	r3, [pc, #164]	@ (800f1dc <USBD_CDC_Init+0x1ec>)
 800f138:	7819      	ldrb	r1, [r3, #0]
 800f13a:	2308      	movs	r3, #8
 800f13c:	2203      	movs	r2, #3
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f002 fb31 	bl	80117a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f144:	4b25      	ldr	r3, [pc, #148]	@ (800f1dc <USBD_CDC_Init+0x1ec>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	f003 020f 	and.w	r2, r3, #15
 800f14c:	6879      	ldr	r1, [r7, #4]
 800f14e:	4613      	mov	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	4413      	add	r3, r2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	440b      	add	r3, r1
 800f158:	3324      	adds	r3, #36	@ 0x24
 800f15a:	2201      	movs	r2, #1
 800f15c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	33b0      	adds	r3, #176	@ 0xb0
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4413      	add	r3, r2
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f194:	2302      	movs	r3, #2
 800f196:	e018      	b.n	800f1ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7c1b      	ldrb	r3, [r3, #16]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d10a      	bne.n	800f1b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f1a0:	4b0d      	ldr	r3, [pc, #52]	@ (800f1d8 <USBD_CDC_Init+0x1e8>)
 800f1a2:	7819      	ldrb	r1, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f1aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f002 fbe8 	bl	8011984 <USBD_LL_PrepareReceive>
 800f1b4:	e008      	b.n	800f1c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f1b6:	4b08      	ldr	r3, [pc, #32]	@ (800f1d8 <USBD_CDC_Init+0x1e8>)
 800f1b8:	7819      	ldrb	r1, [r3, #0]
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f1c0:	2340      	movs	r3, #64	@ 0x40
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f002 fbde 	bl	8011984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f1c8:	2300      	movs	r3, #0
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	24000097 	.word	0x24000097
 800f1d8:	24000098 	.word	0x24000098
 800f1dc:	24000099 	.word	0x24000099

0800f1e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f1ec:	4b3a      	ldr	r3, [pc, #232]	@ (800f2d8 <USBD_CDC_DeInit+0xf8>)
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f002 fafd 	bl	80117f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f1f8:	4b37      	ldr	r3, [pc, #220]	@ (800f2d8 <USBD_CDC_DeInit+0xf8>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	f003 020f 	and.w	r2, r3, #15
 800f200:	6879      	ldr	r1, [r7, #4]
 800f202:	4613      	mov	r3, r2
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	440b      	add	r3, r1
 800f20c:	3324      	adds	r3, #36	@ 0x24
 800f20e:	2200      	movs	r2, #0
 800f210:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f212:	4b32      	ldr	r3, [pc, #200]	@ (800f2dc <USBD_CDC_DeInit+0xfc>)
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	4619      	mov	r1, r3
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f002 faea 	bl	80117f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f21e:	4b2f      	ldr	r3, [pc, #188]	@ (800f2dc <USBD_CDC_DeInit+0xfc>)
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	f003 020f 	and.w	r2, r3, #15
 800f226:	6879      	ldr	r1, [r7, #4]
 800f228:	4613      	mov	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	440b      	add	r3, r1
 800f232:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f236:	2200      	movs	r2, #0
 800f238:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f23a:	4b29      	ldr	r3, [pc, #164]	@ (800f2e0 <USBD_CDC_DeInit+0x100>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f002 fad6 	bl	80117f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f246:	4b26      	ldr	r3, [pc, #152]	@ (800f2e0 <USBD_CDC_DeInit+0x100>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	f003 020f 	and.w	r2, r3, #15
 800f24e:	6879      	ldr	r1, [r7, #4]
 800f250:	4613      	mov	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4413      	add	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	440b      	add	r3, r1
 800f25a:	3324      	adds	r3, #36	@ 0x24
 800f25c:	2200      	movs	r2, #0
 800f25e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f260:	4b1f      	ldr	r3, [pc, #124]	@ (800f2e0 <USBD_CDC_DeInit+0x100>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	f003 020f 	and.w	r2, r3, #15
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	4613      	mov	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4413      	add	r3, r2
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	440b      	add	r3, r1
 800f274:	3326      	adds	r3, #38	@ 0x26
 800f276:	2200      	movs	r2, #0
 800f278:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	32b0      	adds	r2, #176	@ 0xb0
 800f284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d01f      	beq.n	800f2cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	33b0      	adds	r3, #176	@ 0xb0
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4413      	add	r3, r2
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	32b0      	adds	r2, #176	@ 0xb0
 800f2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f002 fbaa 	bl	8011a08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	32b0      	adds	r2, #176	@ 0xb0
 800f2be:	2100      	movs	r1, #0
 800f2c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	24000097 	.word	0x24000097
 800f2dc:	24000098 	.word	0x24000098
 800f2e0:	24000099 	.word	0x24000099

0800f2e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b086      	sub	sp, #24
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	32b0      	adds	r2, #176	@ 0xb0
 800f2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f2fe:	2300      	movs	r3, #0
 800f300:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f302:	2300      	movs	r3, #0
 800f304:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f306:	2300      	movs	r3, #0
 800f308:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d101      	bne.n	800f314 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f310:	2303      	movs	r3, #3
 800f312:	e0bf      	b.n	800f494 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d050      	beq.n	800f3c2 <USBD_CDC_Setup+0xde>
 800f320:	2b20      	cmp	r3, #32
 800f322:	f040 80af 	bne.w	800f484 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	88db      	ldrh	r3, [r3, #6]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d03a      	beq.n	800f3a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	b25b      	sxtb	r3, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	da1b      	bge.n	800f370 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	33b0      	adds	r3, #176	@ 0xb0
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	4413      	add	r3, r2
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f34e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f350:	683a      	ldr	r2, [r7, #0]
 800f352:	88d2      	ldrh	r2, [r2, #6]
 800f354:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	88db      	ldrh	r3, [r3, #6]
 800f35a:	2b07      	cmp	r3, #7
 800f35c:	bf28      	it	cs
 800f35e:	2307      	movcs	r3, #7
 800f360:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	89fa      	ldrh	r2, [r7, #14]
 800f366:	4619      	mov	r1, r3
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f001 fdbd 	bl	8010ee8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f36e:	e090      	b.n	800f492 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	785a      	ldrb	r2, [r3, #1]
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	88db      	ldrh	r3, [r3, #6]
 800f37e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f380:	d803      	bhi.n	800f38a <USBD_CDC_Setup+0xa6>
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	88db      	ldrh	r3, [r3, #6]
 800f386:	b2da      	uxtb	r2, r3
 800f388:	e000      	b.n	800f38c <USBD_CDC_Setup+0xa8>
 800f38a:	2240      	movs	r2, #64	@ 0x40
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f392:	6939      	ldr	r1, [r7, #16]
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f39a:	461a      	mov	r2, r3
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f001 fdcf 	bl	8010f40 <USBD_CtlPrepareRx>
      break;
 800f3a2:	e076      	b.n	800f492 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	33b0      	adds	r3, #176	@ 0xb0
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	7850      	ldrb	r0, [r2, #1]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	6839      	ldr	r1, [r7, #0]
 800f3be:	4798      	blx	r3
      break;
 800f3c0:	e067      	b.n	800f492 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	785b      	ldrb	r3, [r3, #1]
 800f3c6:	2b0b      	cmp	r3, #11
 800f3c8:	d851      	bhi.n	800f46e <USBD_CDC_Setup+0x18a>
 800f3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f3d0 <USBD_CDC_Setup+0xec>)
 800f3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d0:	0800f401 	.word	0x0800f401
 800f3d4:	0800f47d 	.word	0x0800f47d
 800f3d8:	0800f46f 	.word	0x0800f46f
 800f3dc:	0800f46f 	.word	0x0800f46f
 800f3e0:	0800f46f 	.word	0x0800f46f
 800f3e4:	0800f46f 	.word	0x0800f46f
 800f3e8:	0800f46f 	.word	0x0800f46f
 800f3ec:	0800f46f 	.word	0x0800f46f
 800f3f0:	0800f46f 	.word	0x0800f46f
 800f3f4:	0800f46f 	.word	0x0800f46f
 800f3f8:	0800f42b 	.word	0x0800f42b
 800f3fc:	0800f455 	.word	0x0800f455
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f406:	b2db      	uxtb	r3, r3
 800f408:	2b03      	cmp	r3, #3
 800f40a:	d107      	bne.n	800f41c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f40c:	f107 030a 	add.w	r3, r7, #10
 800f410:	2202      	movs	r2, #2
 800f412:	4619      	mov	r1, r3
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f001 fd67 	bl	8010ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f41a:	e032      	b.n	800f482 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f001 fce5 	bl	8010dee <USBD_CtlError>
            ret = USBD_FAIL;
 800f424:	2303      	movs	r3, #3
 800f426:	75fb      	strb	r3, [r7, #23]
          break;
 800f428:	e02b      	b.n	800f482 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f430:	b2db      	uxtb	r3, r3
 800f432:	2b03      	cmp	r3, #3
 800f434:	d107      	bne.n	800f446 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f436:	f107 030d 	add.w	r3, r7, #13
 800f43a:	2201      	movs	r2, #1
 800f43c:	4619      	mov	r1, r3
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f001 fd52 	bl	8010ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f444:	e01d      	b.n	800f482 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f001 fcd0 	bl	8010dee <USBD_CtlError>
            ret = USBD_FAIL;
 800f44e:	2303      	movs	r3, #3
 800f450:	75fb      	strb	r3, [r7, #23]
          break;
 800f452:	e016      	b.n	800f482 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	d00f      	beq.n	800f480 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f001 fcc3 	bl	8010dee <USBD_CtlError>
            ret = USBD_FAIL;
 800f468:	2303      	movs	r3, #3
 800f46a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f46c:	e008      	b.n	800f480 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f001 fcbc 	bl	8010dee <USBD_CtlError>
          ret = USBD_FAIL;
 800f476:	2303      	movs	r3, #3
 800f478:	75fb      	strb	r3, [r7, #23]
          break;
 800f47a:	e002      	b.n	800f482 <USBD_CDC_Setup+0x19e>
          break;
 800f47c:	bf00      	nop
 800f47e:	e008      	b.n	800f492 <USBD_CDC_Setup+0x1ae>
          break;
 800f480:	bf00      	nop
      }
      break;
 800f482:	e006      	b.n	800f492 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f484:	6839      	ldr	r1, [r7, #0]
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f001 fcb1 	bl	8010dee <USBD_CtlError>
      ret = USBD_FAIL;
 800f48c:	2303      	movs	r3, #3
 800f48e:	75fb      	strb	r3, [r7, #23]
      break;
 800f490:	bf00      	nop
  }

  return (uint8_t)ret;
 800f492:	7dfb      	ldrb	r3, [r7, #23]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3718      	adds	r7, #24
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	32b0      	adds	r2, #176	@ 0xb0
 800f4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d101      	bne.n	800f4c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e065      	b.n	800f592 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	32b0      	adds	r2, #176	@ 0xb0
 800f4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	f003 020f 	and.w	r2, r3, #15
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	4413      	add	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	440b      	add	r3, r1
 800f4e8:	3318      	adds	r3, #24
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d02f      	beq.n	800f550 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	f003 020f 	and.w	r2, r3, #15
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	4413      	add	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	440b      	add	r3, r1
 800f502:	3318      	adds	r3, #24
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	78fb      	ldrb	r3, [r7, #3]
 800f508:	f003 010f 	and.w	r1, r3, #15
 800f50c:	68f8      	ldr	r0, [r7, #12]
 800f50e:	460b      	mov	r3, r1
 800f510:	00db      	lsls	r3, r3, #3
 800f512:	440b      	add	r3, r1
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4403      	add	r3, r0
 800f518:	331c      	adds	r3, #28
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f520:	fb01 f303 	mul.w	r3, r1, r3
 800f524:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f526:	2b00      	cmp	r3, #0
 800f528:	d112      	bne.n	800f550 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f52a:	78fb      	ldrb	r3, [r7, #3]
 800f52c:	f003 020f 	and.w	r2, r3, #15
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	4613      	mov	r3, r2
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	4413      	add	r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	440b      	add	r3, r1
 800f53c:	3318      	adds	r3, #24
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f542:	78f9      	ldrb	r1, [r7, #3]
 800f544:	2300      	movs	r3, #0
 800f546:	2200      	movs	r2, #0
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f002 f9fa 	bl	8011942 <USBD_LL_Transmit>
 800f54e:	e01f      	b.n	800f590 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2200      	movs	r2, #0
 800f554:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	33b0      	adds	r3, #176	@ 0xb0
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d010      	beq.n	800f590 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	33b0      	adds	r3, #176	@ 0xb0
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	4413      	add	r3, r2
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	691b      	ldr	r3, [r3, #16]
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f586:	68ba      	ldr	r2, [r7, #8]
 800f588:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f58c:	78fa      	ldrb	r2, [r7, #3]
 800f58e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b084      	sub	sp, #16
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	32b0      	adds	r2, #176	@ 0xb0
 800f5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	32b0      	adds	r2, #176	@ 0xb0
 800f5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d101      	bne.n	800f5cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f5c8:	2303      	movs	r3, #3
 800f5ca:	e01a      	b.n	800f602 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f5cc:	78fb      	ldrb	r3, [r7, #3]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f002 f9f8 	bl	80119c6 <USBD_LL_GetRxDataSize>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	33b0      	adds	r3, #176	@ 0xb0
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f5fc:	4611      	mov	r1, r2
 800f5fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b084      	sub	sp, #16
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	32b0      	adds	r2, #176	@ 0xb0
 800f61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f620:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d101      	bne.n	800f62c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f628:	2303      	movs	r3, #3
 800f62a:	e024      	b.n	800f676 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	33b0      	adds	r3, #176	@ 0xb0
 800f636:	009b      	lsls	r3, r3, #2
 800f638:	4413      	add	r3, r2
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d019      	beq.n	800f674 <USBD_CDC_EP0_RxReady+0x6a>
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f646:	2bff      	cmp	r3, #255	@ 0xff
 800f648:	d014      	beq.n	800f674 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f650:	687a      	ldr	r2, [r7, #4]
 800f652:	33b0      	adds	r3, #176	@ 0xb0
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4413      	add	r3, r2
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	689b      	ldr	r3, [r3, #8]
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f662:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f66a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	22ff      	movs	r2, #255	@ 0xff
 800f670:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
	...

0800f680 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f688:	2182      	movs	r1, #130	@ 0x82
 800f68a:	4818      	ldr	r0, [pc, #96]	@ (800f6ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f68c:	f000 fd4f 	bl	801012e <USBD_GetEpDesc>
 800f690:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f692:	2101      	movs	r1, #1
 800f694:	4815      	ldr	r0, [pc, #84]	@ (800f6ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f696:	f000 fd4a 	bl	801012e <USBD_GetEpDesc>
 800f69a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f69c:	2181      	movs	r1, #129	@ 0x81
 800f69e:	4813      	ldr	r0, [pc, #76]	@ (800f6ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f6a0:	f000 fd45 	bl	801012e <USBD_GetEpDesc>
 800f6a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d002      	beq.n	800f6b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	2210      	movs	r2, #16
 800f6b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d006      	beq.n	800f6c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6c0:	711a      	strb	r2, [r3, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d006      	beq.n	800f6da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6d4:	711a      	strb	r2, [r3, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2243      	movs	r2, #67	@ 0x43
 800f6de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f6e0:	4b02      	ldr	r3, [pc, #8]	@ (800f6ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3718      	adds	r7, #24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	24000054 	.word	0x24000054

0800f6f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f6f8:	2182      	movs	r1, #130	@ 0x82
 800f6fa:	4818      	ldr	r0, [pc, #96]	@ (800f75c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f6fc:	f000 fd17 	bl	801012e <USBD_GetEpDesc>
 800f700:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f702:	2101      	movs	r1, #1
 800f704:	4815      	ldr	r0, [pc, #84]	@ (800f75c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f706:	f000 fd12 	bl	801012e <USBD_GetEpDesc>
 800f70a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f70c:	2181      	movs	r1, #129	@ 0x81
 800f70e:	4813      	ldr	r0, [pc, #76]	@ (800f75c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f710:	f000 fd0d 	bl	801012e <USBD_GetEpDesc>
 800f714:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	2210      	movs	r2, #16
 800f720:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d006      	beq.n	800f736 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	2200      	movs	r2, #0
 800f72c:	711a      	strb	r2, [r3, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	f042 0202 	orr.w	r2, r2, #2
 800f734:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d006      	beq.n	800f74a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2200      	movs	r2, #0
 800f740:	711a      	strb	r2, [r3, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	f042 0202 	orr.w	r2, r2, #2
 800f748:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2243      	movs	r2, #67	@ 0x43
 800f74e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f750:	4b02      	ldr	r3, [pc, #8]	@ (800f75c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f752:	4618      	mov	r0, r3
 800f754:	3718      	adds	r7, #24
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	24000054 	.word	0x24000054

0800f760 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f768:	2182      	movs	r1, #130	@ 0x82
 800f76a:	4818      	ldr	r0, [pc, #96]	@ (800f7cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f76c:	f000 fcdf 	bl	801012e <USBD_GetEpDesc>
 800f770:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f772:	2101      	movs	r1, #1
 800f774:	4815      	ldr	r0, [pc, #84]	@ (800f7cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f776:	f000 fcda 	bl	801012e <USBD_GetEpDesc>
 800f77a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f77c:	2181      	movs	r1, #129	@ 0x81
 800f77e:	4813      	ldr	r0, [pc, #76]	@ (800f7cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f780:	f000 fcd5 	bl	801012e <USBD_GetEpDesc>
 800f784:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	2210      	movs	r2, #16
 800f790:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d006      	beq.n	800f7a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f7a0:	711a      	strb	r2, [r3, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d006      	beq.n	800f7ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f7b4:	711a      	strb	r2, [r3, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2243      	movs	r2, #67	@ 0x43
 800f7be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f7c0:	4b02      	ldr	r3, [pc, #8]	@ (800f7cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3718      	adds	r7, #24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	24000054 	.word	0x24000054

0800f7d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	220a      	movs	r2, #10
 800f7dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f7de:	4b03      	ldr	r3, [pc, #12]	@ (800f7ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	24000010 	.word	0x24000010

0800f7f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f800:	2303      	movs	r3, #3
 800f802:	e009      	b.n	800f818 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	33b0      	adds	r3, #176	@ 0xb0
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	32b0      	adds	r2, #176	@ 0xb0
 800f83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f83e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f846:	2303      	movs	r3, #3
 800f848:	e008      	b.n	800f85c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	68ba      	ldr	r2, [r7, #8]
 800f84e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	371c      	adds	r7, #28
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f868:	b480      	push	{r7}
 800f86a:	b085      	sub	sp, #20
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	32b0      	adds	r2, #176	@ 0xb0
 800f87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f880:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d101      	bne.n	800f88c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f888:	2303      	movs	r3, #3
 800f88a:	e004      	b.n	800f896 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3714      	adds	r7, #20
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
	...

0800f8a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	32b0      	adds	r2, #176	@ 0xb0
 800f8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	e025      	b.n	800f916 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d11f      	bne.n	800f914 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f8dc:	4b10      	ldr	r3, [pc, #64]	@ (800f920 <USBD_CDC_TransmitPacket+0x7c>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	f003 020f 	and.w	r2, r3, #15
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4403      	add	r3, r0
 800f8f6:	3318      	adds	r3, #24
 800f8f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f8fa:	4b09      	ldr	r3, [pc, #36]	@ (800f920 <USBD_CDC_TransmitPacket+0x7c>)
 800f8fc:	7819      	ldrb	r1, [r3, #0]
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f002 f819 	bl	8011942 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f914:	7bfb      	ldrb	r3, [r7, #15]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	bf00      	nop
 800f920:	24000097 	.word	0x24000097

0800f924 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	32b0      	adds	r2, #176	@ 0xb0
 800f936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	32b0      	adds	r2, #176	@ 0xb0
 800f946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d101      	bne.n	800f952 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f94e:	2303      	movs	r3, #3
 800f950:	e018      	b.n	800f984 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	7c1b      	ldrb	r3, [r3, #16]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d10a      	bne.n	800f970 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f95a:	4b0c      	ldr	r3, [pc, #48]	@ (800f98c <USBD_CDC_ReceivePacket+0x68>)
 800f95c:	7819      	ldrb	r1, [r3, #0]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f002 f80b 	bl	8011984 <USBD_LL_PrepareReceive>
 800f96e:	e008      	b.n	800f982 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f970:	4b06      	ldr	r3, [pc, #24]	@ (800f98c <USBD_CDC_ReceivePacket+0x68>)
 800f972:	7819      	ldrb	r1, [r3, #0]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f97a:	2340      	movs	r3, #64	@ 0x40
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f002 f801 	bl	8011984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	24000098 	.word	0x24000098

0800f990 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	4613      	mov	r3, r2
 800f99c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d101      	bne.n	800f9a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f9a4:	2303      	movs	r3, #3
 800f9a6:	e01f      	b.n	800f9e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d003      	beq.n	800f9ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	79fa      	ldrb	r2, [r7, #7]
 800f9da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	f001 fe77 	bl	80116d0 <USBD_LL_Init>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d101      	bne.n	800fa08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fa04:	2303      	movs	r3, #3
 800fa06:	e025      	b.n	800fa54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	683a      	ldr	r2, [r7, #0]
 800fa0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	32ae      	adds	r2, #174	@ 0xae
 800fa1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d00f      	beq.n	800fa44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	32ae      	adds	r2, #174	@ 0xae
 800fa2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa34:	f107 020e 	add.w	r2, r7, #14
 800fa38:	4610      	mov	r0, r2
 800fa3a:	4798      	blx	r3
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fa52:	2300      	movs	r3, #0
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f001 fe83 	bl	8011770 <USBD_LL_Start>
 800fa6a:	4603      	mov	r3, r0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	460b      	mov	r3, r1
 800fa94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d009      	beq.n	800fab8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	78fa      	ldrb	r2, [r7, #3]
 800faae:	4611      	mov	r1, r2
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	4798      	blx	r3
 800fab4:	4603      	mov	r3, r0
 800fab6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b084      	sub	sp, #16
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	460b      	mov	r3, r1
 800facc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	78fa      	ldrb	r2, [r7, #3]
 800fadc:	4611      	mov	r1, r2
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	4798      	blx	r3
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d001      	beq.n	800faec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fae8:	2303      	movs	r3, #3
 800faea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800faec:	7bfb      	ldrb	r3, [r7, #15]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b084      	sub	sp, #16
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
 800fafe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f001 f936 	bl	8010d7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2201      	movs	r2, #1
 800fb12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb2a:	f003 031f 	and.w	r3, r3, #31
 800fb2e:	2b02      	cmp	r3, #2
 800fb30:	d01a      	beq.n	800fb68 <USBD_LL_SetupStage+0x72>
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d822      	bhi.n	800fb7c <USBD_LL_SetupStage+0x86>
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d002      	beq.n	800fb40 <USBD_LL_SetupStage+0x4a>
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d00a      	beq.n	800fb54 <USBD_LL_SetupStage+0x5e>
 800fb3e:	e01d      	b.n	800fb7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb46:	4619      	mov	r1, r3
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fb63 	bl	8010214 <USBD_StdDevReq>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]
      break;
 800fb52:	e020      	b.n	800fb96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 fbcb 	bl	80102f8 <USBD_StdItfReq>
 800fb62:	4603      	mov	r3, r0
 800fb64:	73fb      	strb	r3, [r7, #15]
      break;
 800fb66:	e016      	b.n	800fb96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fc2d 	bl	80103d0 <USBD_StdEPReq>
 800fb76:	4603      	mov	r3, r0
 800fb78:	73fb      	strb	r3, [r7, #15]
      break;
 800fb7a:	e00c      	b.n	800fb96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f001 fe50 	bl	8011830 <USBD_LL_StallEP>
 800fb90:	4603      	mov	r3, r0
 800fb92:	73fb      	strb	r3, [r7, #15]
      break;
 800fb94:	bf00      	nop
  }

  return ret;
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	460b      	mov	r3, r1
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fbb2:	7afb      	ldrb	r3, [r7, #11]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d16e      	bne.n	800fc96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fbbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fbc6:	2b03      	cmp	r3, #3
 800fbc8:	f040 8098 	bne.w	800fcfc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	689a      	ldr	r2, [r3, #8]
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d913      	bls.n	800fc00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	689a      	ldr	r2, [r3, #8]
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	1ad2      	subs	r2, r2, r3
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	68da      	ldr	r2, [r3, #12]
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	bf28      	it	cs
 800fbf2:	4613      	movcs	r3, r2
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6879      	ldr	r1, [r7, #4]
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f001 f9be 	bl	8010f7a <USBD_CtlContinueRx>
 800fbfe:	e07d      	b.n	800fcfc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fc06:	f003 031f 	and.w	r3, r3, #31
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d014      	beq.n	800fc38 <USBD_LL_DataOutStage+0x98>
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	d81d      	bhi.n	800fc4e <USBD_LL_DataOutStage+0xae>
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d002      	beq.n	800fc1c <USBD_LL_DataOutStage+0x7c>
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d003      	beq.n	800fc22 <USBD_LL_DataOutStage+0x82>
 800fc1a:	e018      	b.n	800fc4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	75bb      	strb	r3, [r7, #22]
            break;
 800fc20:	e018      	b.n	800fc54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 fa64 	bl	80100fa <USBD_CoreFindIF>
 800fc32:	4603      	mov	r3, r0
 800fc34:	75bb      	strb	r3, [r7, #22]
            break;
 800fc36:	e00d      	b.n	800fc54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	4619      	mov	r1, r3
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f000 fa66 	bl	8010114 <USBD_CoreFindEP>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	75bb      	strb	r3, [r7, #22]
            break;
 800fc4c:	e002      	b.n	800fc54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	75bb      	strb	r3, [r7, #22]
            break;
 800fc52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fc54:	7dbb      	ldrb	r3, [r7, #22]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d119      	bne.n	800fc8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b03      	cmp	r3, #3
 800fc64:	d113      	bne.n	800fc8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fc66:	7dba      	ldrb	r2, [r7, #22]
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	32ae      	adds	r2, #174	@ 0xae
 800fc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc70:	691b      	ldr	r3, [r3, #16]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d00b      	beq.n	800fc8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fc76:	7dba      	ldrb	r2, [r7, #22]
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fc7e:	7dba      	ldrb	r2, [r7, #22]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	32ae      	adds	r2, #174	@ 0xae
 800fc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc88:	691b      	ldr	r3, [r3, #16]
 800fc8a:	68f8      	ldr	r0, [r7, #12]
 800fc8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f001 f984 	bl	8010f9c <USBD_CtlSendStatus>
 800fc94:	e032      	b.n	800fcfc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fc96:	7afb      	ldrb	r3, [r7, #11]
 800fc98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	4619      	mov	r1, r3
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f000 fa37 	bl	8010114 <USBD_CoreFindEP>
 800fca6:	4603      	mov	r3, r0
 800fca8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fcaa:	7dbb      	ldrb	r3, [r7, #22]
 800fcac:	2bff      	cmp	r3, #255	@ 0xff
 800fcae:	d025      	beq.n	800fcfc <USBD_LL_DataOutStage+0x15c>
 800fcb0:	7dbb      	ldrb	r3, [r7, #22]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d122      	bne.n	800fcfc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d117      	bne.n	800fcf2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fcc2:	7dba      	ldrb	r2, [r7, #22]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	32ae      	adds	r2, #174	@ 0xae
 800fcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d00f      	beq.n	800fcf2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fcd2:	7dba      	ldrb	r2, [r7, #22]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fcda:	7dba      	ldrb	r2, [r7, #22]
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	32ae      	adds	r2, #174	@ 0xae
 800fce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce4:	699b      	ldr	r3, [r3, #24]
 800fce6:	7afa      	ldrb	r2, [r7, #11]
 800fce8:	4611      	mov	r1, r2
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	4798      	blx	r3
 800fcee:	4603      	mov	r3, r0
 800fcf0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	e000      	b.n	800fcfe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3718      	adds	r7, #24
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}

0800fd06 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fd06:	b580      	push	{r7, lr}
 800fd08:	b086      	sub	sp, #24
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	60f8      	str	r0, [r7, #12]
 800fd0e:	460b      	mov	r3, r1
 800fd10:	607a      	str	r2, [r7, #4]
 800fd12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fd14:	7afb      	ldrb	r3, [r7, #11]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d16f      	bne.n	800fdfa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	3314      	adds	r3, #20
 800fd1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fd26:	2b02      	cmp	r3, #2
 800fd28:	d15a      	bne.n	800fde0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	689a      	ldr	r2, [r3, #8]
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d914      	bls.n	800fd60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	689a      	ldr	r2, [r3, #8]
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	1ad2      	subs	r2, r2, r3
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	6879      	ldr	r1, [r7, #4]
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f001 f8e6 	bl	8010f1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd52:	2300      	movs	r3, #0
 800fd54:	2200      	movs	r2, #0
 800fd56:	2100      	movs	r1, #0
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f001 fe13 	bl	8011984 <USBD_LL_PrepareReceive>
 800fd5e:	e03f      	b.n	800fde0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	68da      	ldr	r2, [r3, #12]
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	689b      	ldr	r3, [r3, #8]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d11c      	bne.n	800fda6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fd6c:	693b      	ldr	r3, [r7, #16]
 800fd6e:	685a      	ldr	r2, [r3, #4]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d316      	bcc.n	800fda6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	685a      	ldr	r2, [r3, #4]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d20f      	bcs.n	800fda6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fd86:	2200      	movs	r2, #0
 800fd88:	2100      	movs	r1, #0
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f001 f8c7 	bl	8010f1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd98:	2300      	movs	r3, #0
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f001 fdf0 	bl	8011984 <USBD_LL_PrepareReceive>
 800fda4:	e01c      	b.n	800fde0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b03      	cmp	r3, #3
 800fdb0:	d10f      	bne.n	800fdd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d009      	beq.n	800fdd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdd2:	2180      	movs	r1, #128	@ 0x80
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f001 fd2b 	bl	8011830 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f001 f8f1 	bl	8010fc2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d03a      	beq.n	800fe60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fdea:	68f8      	ldr	r0, [r7, #12]
 800fdec:	f7ff fe42 	bl	800fa74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fdf8:	e032      	b.n	800fe60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fdfa:	7afb      	ldrb	r3, [r7, #11]
 800fdfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	4619      	mov	r1, r3
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f000 f985 	bl	8010114 <USBD_CoreFindEP>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fe0e:	7dfb      	ldrb	r3, [r7, #23]
 800fe10:	2bff      	cmp	r3, #255	@ 0xff
 800fe12:	d025      	beq.n	800fe60 <USBD_LL_DataInStage+0x15a>
 800fe14:	7dfb      	ldrb	r3, [r7, #23]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d122      	bne.n	800fe60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d11c      	bne.n	800fe60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fe26:	7dfa      	ldrb	r2, [r7, #23]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	32ae      	adds	r2, #174	@ 0xae
 800fe2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d014      	beq.n	800fe60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fe36:	7dfa      	ldrb	r2, [r7, #23]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fe3e:	7dfa      	ldrb	r2, [r7, #23]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	32ae      	adds	r2, #174	@ 0xae
 800fe44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	7afa      	ldrb	r2, [r7, #11]
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	4798      	blx	r3
 800fe52:	4603      	mov	r3, r0
 800fe54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fe56:	7dbb      	ldrb	r3, [r7, #22]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fe5c:	7dbb      	ldrb	r3, [r7, #22]
 800fe5e:	e000      	b.n	800fe62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3718      	adds	r7, #24
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b084      	sub	sp, #16
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe72:	2300      	movs	r3, #0
 800fe74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2201      	movs	r2, #1
 800fe7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d014      	beq.n	800fed0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00e      	beq.n	800fed0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	6852      	ldr	r2, [r2, #4]
 800febe:	b2d2      	uxtb	r2, r2
 800fec0:	4611      	mov	r1, r2
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	4798      	blx	r3
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fecc:	2303      	movs	r3, #3
 800fece:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fed0:	2340      	movs	r3, #64	@ 0x40
 800fed2:	2200      	movs	r2, #0
 800fed4:	2100      	movs	r1, #0
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f001 fc65 	bl	80117a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2201      	movs	r2, #1
 800fee0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2240      	movs	r2, #64	@ 0x40
 800fee8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800feec:	2340      	movs	r3, #64	@ 0x40
 800feee:	2200      	movs	r2, #0
 800fef0:	2180      	movs	r1, #128	@ 0x80
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f001 fc57 	bl	80117a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2201      	movs	r2, #1
 800fefc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2240      	movs	r2, #64	@ 0x40
 800ff02:	621a      	str	r2, [r3, #32]

  return ret;
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ff0e:	b480      	push	{r7}
 800ff10:	b083      	sub	sp, #12
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	460b      	mov	r3, r1
 800ff18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	78fa      	ldrb	r2, [r7, #3]
 800ff1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr

0800ff2e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	2b04      	cmp	r3, #4
 800ff40:	d006      	beq.n	800ff50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff48:	b2da      	uxtb	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2204      	movs	r2, #4
 800ff54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr

0800ff66 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ff66:	b480      	push	{r7}
 800ff68:	b083      	sub	sp, #12
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b04      	cmp	r3, #4
 800ff78:	d106      	bne.n	800ff88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ff80:	b2da      	uxtb	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b082      	sub	sp, #8
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d110      	bne.n	800ffcc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00b      	beq.n	800ffcc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d005      	beq.n	800ffcc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ffc6:	69db      	ldr	r3, [r3, #28]
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ffcc:	2300      	movs	r3, #0
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ffd6:	b580      	push	{r7, lr}
 800ffd8:	b082      	sub	sp, #8
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	460b      	mov	r3, r1
 800ffe0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	32ae      	adds	r2, #174	@ 0xae
 800ffec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800fff4:	2303      	movs	r3, #3
 800fff6:	e01c      	b.n	8010032 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d115      	bne.n	8010030 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	32ae      	adds	r2, #174	@ 0xae
 801000e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010012:	6a1b      	ldr	r3, [r3, #32]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00b      	beq.n	8010030 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	32ae      	adds	r2, #174	@ 0xae
 8010022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010026:	6a1b      	ldr	r3, [r3, #32]
 8010028:	78fa      	ldrb	r2, [r7, #3]
 801002a:	4611      	mov	r1, r2
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b082      	sub	sp, #8
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
 8010042:	460b      	mov	r3, r1
 8010044:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	32ae      	adds	r2, #174	@ 0xae
 8010050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d101      	bne.n	801005c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010058:	2303      	movs	r3, #3
 801005a:	e01c      	b.n	8010096 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b03      	cmp	r3, #3
 8010066:	d115      	bne.n	8010094 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	32ae      	adds	r2, #174	@ 0xae
 8010072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00b      	beq.n	8010094 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	32ae      	adds	r2, #174	@ 0xae
 8010086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801008a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801008c:	78fa      	ldrb	r2, [r7, #3]
 801008e:	4611      	mov	r1, r2
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801009e:	b480      	push	{r7}
 80100a0:	b083      	sub	sp, #12
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80100bc:	2300      	movs	r3, #0
 80100be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2201      	movs	r2, #1
 80100c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00e      	beq.n	80100f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	6852      	ldr	r2, [r2, #4]
 80100de:	b2d2      	uxtb	r2, r2
 80100e0:	4611      	mov	r1, r2
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	4798      	blx	r3
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80100ec:	2303      	movs	r3, #3
 80100ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}

080100fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80100fa:	b480      	push	{r7}
 80100fc:	b083      	sub	sp, #12
 80100fe:	af00      	add	r7, sp, #0
 8010100:	6078      	str	r0, [r7, #4]
 8010102:	460b      	mov	r3, r1
 8010104:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010106:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010108:	4618      	mov	r0, r3
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	460b      	mov	r3, r1
 801011e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010120:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010122:	4618      	mov	r0, r3
 8010124:	370c      	adds	r7, #12
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr

0801012e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b086      	sub	sp, #24
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	460b      	mov	r3, r1
 8010138:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010142:	2300      	movs	r3, #0
 8010144:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	885b      	ldrh	r3, [r3, #2]
 801014a:	b29b      	uxth	r3, r3
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	7812      	ldrb	r2, [r2, #0]
 8010150:	4293      	cmp	r3, r2
 8010152:	d91f      	bls.n	8010194 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801015a:	e013      	b.n	8010184 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801015c:	f107 030a 	add.w	r3, r7, #10
 8010160:	4619      	mov	r1, r3
 8010162:	6978      	ldr	r0, [r7, #20]
 8010164:	f000 f81b 	bl	801019e <USBD_GetNextDesc>
 8010168:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	785b      	ldrb	r3, [r3, #1]
 801016e:	2b05      	cmp	r3, #5
 8010170:	d108      	bne.n	8010184 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	789b      	ldrb	r3, [r3, #2]
 801017a:	78fa      	ldrb	r2, [r7, #3]
 801017c:	429a      	cmp	r2, r3
 801017e:	d008      	beq.n	8010192 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010180:	2300      	movs	r3, #0
 8010182:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	885b      	ldrh	r3, [r3, #2]
 8010188:	b29a      	uxth	r2, r3
 801018a:	897b      	ldrh	r3, [r7, #10]
 801018c:	429a      	cmp	r2, r3
 801018e:	d8e5      	bhi.n	801015c <USBD_GetEpDesc+0x2e>
 8010190:	e000      	b.n	8010194 <USBD_GetEpDesc+0x66>
          break;
 8010192:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010194:	693b      	ldr	r3, [r7, #16]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3718      	adds	r7, #24
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801019e:	b480      	push	{r7}
 80101a0:	b085      	sub	sp, #20
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
 80101a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	68fa      	ldr	r2, [r7, #12]
 80101b2:	7812      	ldrb	r2, [r2, #0]
 80101b4:	4413      	add	r3, r2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	461a      	mov	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4413      	add	r3, r2
 80101c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80101c8:	68fb      	ldr	r3, [r7, #12]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3714      	adds	r7, #20
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr

080101d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80101d6:	b480      	push	{r7}
 80101d8:	b087      	sub	sp, #28
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	3301      	adds	r3, #1
 80101ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80101f8:	021b      	lsls	r3, r3, #8
 80101fa:	b21a      	sxth	r2, r3
 80101fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010200:	4313      	orrs	r3, r2
 8010202:	b21b      	sxth	r3, r3
 8010204:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010206:	89fb      	ldrh	r3, [r7, #14]
}
 8010208:	4618      	mov	r0, r3
 801020a:	371c      	adds	r7, #28
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801021e:	2300      	movs	r3, #0
 8010220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801022a:	2b40      	cmp	r3, #64	@ 0x40
 801022c:	d005      	beq.n	801023a <USBD_StdDevReq+0x26>
 801022e:	2b40      	cmp	r3, #64	@ 0x40
 8010230:	d857      	bhi.n	80102e2 <USBD_StdDevReq+0xce>
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00f      	beq.n	8010256 <USBD_StdDevReq+0x42>
 8010236:	2b20      	cmp	r3, #32
 8010238:	d153      	bne.n	80102e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	32ae      	adds	r2, #174	@ 0xae
 8010244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	4798      	blx	r3
 8010250:	4603      	mov	r3, r0
 8010252:	73fb      	strb	r3, [r7, #15]
      break;
 8010254:	e04a      	b.n	80102ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	785b      	ldrb	r3, [r3, #1]
 801025a:	2b09      	cmp	r3, #9
 801025c:	d83b      	bhi.n	80102d6 <USBD_StdDevReq+0xc2>
 801025e:	a201      	add	r2, pc, #4	@ (adr r2, 8010264 <USBD_StdDevReq+0x50>)
 8010260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010264:	080102b9 	.word	0x080102b9
 8010268:	080102cd 	.word	0x080102cd
 801026c:	080102d7 	.word	0x080102d7
 8010270:	080102c3 	.word	0x080102c3
 8010274:	080102d7 	.word	0x080102d7
 8010278:	08010297 	.word	0x08010297
 801027c:	0801028d 	.word	0x0801028d
 8010280:	080102d7 	.word	0x080102d7
 8010284:	080102af 	.word	0x080102af
 8010288:	080102a1 	.word	0x080102a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fa3c 	bl	801070c <USBD_GetDescriptor>
          break;
 8010294:	e024      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 fbcb 	bl	8010a34 <USBD_SetAddress>
          break;
 801029e:	e01f      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fc0a 	bl	8010abc <USBD_SetConfig>
 80102a8:	4603      	mov	r3, r0
 80102aa:	73fb      	strb	r3, [r7, #15]
          break;
 80102ac:	e018      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80102ae:	6839      	ldr	r1, [r7, #0]
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fcad 	bl	8010c10 <USBD_GetConfig>
          break;
 80102b6:	e013      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80102b8:	6839      	ldr	r1, [r7, #0]
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f000 fcde 	bl	8010c7c <USBD_GetStatus>
          break;
 80102c0:	e00e      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80102c2:	6839      	ldr	r1, [r7, #0]
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fd0d 	bl	8010ce4 <USBD_SetFeature>
          break;
 80102ca:	e009      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80102cc:	6839      	ldr	r1, [r7, #0]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fd31 	bl	8010d36 <USBD_ClrFeature>
          break;
 80102d4:	e004      	b.n	80102e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80102d6:	6839      	ldr	r1, [r7, #0]
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 fd88 	bl	8010dee <USBD_CtlError>
          break;
 80102de:	bf00      	nop
      }
      break;
 80102e0:	e004      	b.n	80102ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80102e2:	6839      	ldr	r1, [r7, #0]
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fd82 	bl	8010dee <USBD_CtlError>
      break;
 80102ea:	bf00      	nop
  }

  return ret;
 80102ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	bf00      	nop

080102f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010302:	2300      	movs	r3, #0
 8010304:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801030e:	2b40      	cmp	r3, #64	@ 0x40
 8010310:	d005      	beq.n	801031e <USBD_StdItfReq+0x26>
 8010312:	2b40      	cmp	r3, #64	@ 0x40
 8010314:	d852      	bhi.n	80103bc <USBD_StdItfReq+0xc4>
 8010316:	2b00      	cmp	r3, #0
 8010318:	d001      	beq.n	801031e <USBD_StdItfReq+0x26>
 801031a:	2b20      	cmp	r3, #32
 801031c:	d14e      	bne.n	80103bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010324:	b2db      	uxtb	r3, r3
 8010326:	3b01      	subs	r3, #1
 8010328:	2b02      	cmp	r3, #2
 801032a:	d840      	bhi.n	80103ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	889b      	ldrh	r3, [r3, #4]
 8010330:	b2db      	uxtb	r3, r3
 8010332:	2b01      	cmp	r3, #1
 8010334:	d836      	bhi.n	80103a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	889b      	ldrh	r3, [r3, #4]
 801033a:	b2db      	uxtb	r3, r3
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f7ff fedb 	bl	80100fa <USBD_CoreFindIF>
 8010344:	4603      	mov	r3, r0
 8010346:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010348:	7bbb      	ldrb	r3, [r7, #14]
 801034a:	2bff      	cmp	r3, #255	@ 0xff
 801034c:	d01d      	beq.n	801038a <USBD_StdItfReq+0x92>
 801034e:	7bbb      	ldrb	r3, [r7, #14]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d11a      	bne.n	801038a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010354:	7bba      	ldrb	r2, [r7, #14]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	32ae      	adds	r2, #174	@ 0xae
 801035a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00f      	beq.n	8010384 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010364:	7bba      	ldrb	r2, [r7, #14]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801036c:	7bba      	ldrb	r2, [r7, #14]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	32ae      	adds	r2, #174	@ 0xae
 8010372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	6839      	ldr	r1, [r7, #0]
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	4798      	blx	r3
 801037e:	4603      	mov	r3, r0
 8010380:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010382:	e004      	b.n	801038e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010384:	2303      	movs	r3, #3
 8010386:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010388:	e001      	b.n	801038e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801038a:	2303      	movs	r3, #3
 801038c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	88db      	ldrh	r3, [r3, #6]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d110      	bne.n	80103b8 <USBD_StdItfReq+0xc0>
 8010396:	7bfb      	ldrb	r3, [r7, #15]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10d      	bne.n	80103b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fdfd 	bl	8010f9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80103a2:	e009      	b.n	80103b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80103a4:	6839      	ldr	r1, [r7, #0]
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 fd21 	bl	8010dee <USBD_CtlError>
          break;
 80103ac:	e004      	b.n	80103b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80103ae:	6839      	ldr	r1, [r7, #0]
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 fd1c 	bl	8010dee <USBD_CtlError>
          break;
 80103b6:	e000      	b.n	80103ba <USBD_StdItfReq+0xc2>
          break;
 80103b8:	bf00      	nop
      }
      break;
 80103ba:	e004      	b.n	80103c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80103bc:	6839      	ldr	r1, [r7, #0]
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 fd15 	bl	8010dee <USBD_CtlError>
      break;
 80103c4:	bf00      	nop
  }

  return ret;
 80103c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80103da:	2300      	movs	r3, #0
 80103dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	889b      	ldrh	r3, [r3, #4]
 80103e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80103ec:	2b40      	cmp	r3, #64	@ 0x40
 80103ee:	d007      	beq.n	8010400 <USBD_StdEPReq+0x30>
 80103f0:	2b40      	cmp	r3, #64	@ 0x40
 80103f2:	f200 817f 	bhi.w	80106f4 <USBD_StdEPReq+0x324>
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d02a      	beq.n	8010450 <USBD_StdEPReq+0x80>
 80103fa:	2b20      	cmp	r3, #32
 80103fc:	f040 817a 	bne.w	80106f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010400:	7bbb      	ldrb	r3, [r7, #14]
 8010402:	4619      	mov	r1, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff fe85 	bl	8010114 <USBD_CoreFindEP>
 801040a:	4603      	mov	r3, r0
 801040c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801040e:	7b7b      	ldrb	r3, [r7, #13]
 8010410:	2bff      	cmp	r3, #255	@ 0xff
 8010412:	f000 8174 	beq.w	80106fe <USBD_StdEPReq+0x32e>
 8010416:	7b7b      	ldrb	r3, [r7, #13]
 8010418:	2b00      	cmp	r3, #0
 801041a:	f040 8170 	bne.w	80106fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801041e:	7b7a      	ldrb	r2, [r7, #13]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010426:	7b7a      	ldrb	r2, [r7, #13]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	32ae      	adds	r2, #174	@ 0xae
 801042c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 8163 	beq.w	80106fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010438:	7b7a      	ldrb	r2, [r7, #13]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	32ae      	adds	r2, #174	@ 0xae
 801043e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010442:	689b      	ldr	r3, [r3, #8]
 8010444:	6839      	ldr	r1, [r7, #0]
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	4798      	blx	r3
 801044a:	4603      	mov	r3, r0
 801044c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801044e:	e156      	b.n	80106fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	785b      	ldrb	r3, [r3, #1]
 8010454:	2b03      	cmp	r3, #3
 8010456:	d008      	beq.n	801046a <USBD_StdEPReq+0x9a>
 8010458:	2b03      	cmp	r3, #3
 801045a:	f300 8145 	bgt.w	80106e8 <USBD_StdEPReq+0x318>
 801045e:	2b00      	cmp	r3, #0
 8010460:	f000 809b 	beq.w	801059a <USBD_StdEPReq+0x1ca>
 8010464:	2b01      	cmp	r3, #1
 8010466:	d03c      	beq.n	80104e2 <USBD_StdEPReq+0x112>
 8010468:	e13e      	b.n	80106e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010470:	b2db      	uxtb	r3, r3
 8010472:	2b02      	cmp	r3, #2
 8010474:	d002      	beq.n	801047c <USBD_StdEPReq+0xac>
 8010476:	2b03      	cmp	r3, #3
 8010478:	d016      	beq.n	80104a8 <USBD_StdEPReq+0xd8>
 801047a:	e02c      	b.n	80104d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801047c:	7bbb      	ldrb	r3, [r7, #14]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00d      	beq.n	801049e <USBD_StdEPReq+0xce>
 8010482:	7bbb      	ldrb	r3, [r7, #14]
 8010484:	2b80      	cmp	r3, #128	@ 0x80
 8010486:	d00a      	beq.n	801049e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010488:	7bbb      	ldrb	r3, [r7, #14]
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f001 f9cf 	bl	8011830 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010492:	2180      	movs	r1, #128	@ 0x80
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f001 f9cb 	bl	8011830 <USBD_LL_StallEP>
 801049a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801049c:	e020      	b.n	80104e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801049e:	6839      	ldr	r1, [r7, #0]
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 fca4 	bl	8010dee <USBD_CtlError>
              break;
 80104a6:	e01b      	b.n	80104e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	885b      	ldrh	r3, [r3, #2]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d10e      	bne.n	80104ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80104b0:	7bbb      	ldrb	r3, [r7, #14]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00b      	beq.n	80104ce <USBD_StdEPReq+0xfe>
 80104b6:	7bbb      	ldrb	r3, [r7, #14]
 80104b8:	2b80      	cmp	r3, #128	@ 0x80
 80104ba:	d008      	beq.n	80104ce <USBD_StdEPReq+0xfe>
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	88db      	ldrh	r3, [r3, #6]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d104      	bne.n	80104ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80104c4:	7bbb      	ldrb	r3, [r7, #14]
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f001 f9b1 	bl	8011830 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 fd64 	bl	8010f9c <USBD_CtlSendStatus>

              break;
 80104d4:	e004      	b.n	80104e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 fc88 	bl	8010dee <USBD_CtlError>
              break;
 80104de:	bf00      	nop
          }
          break;
 80104e0:	e107      	b.n	80106f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	d002      	beq.n	80104f4 <USBD_StdEPReq+0x124>
 80104ee:	2b03      	cmp	r3, #3
 80104f0:	d016      	beq.n	8010520 <USBD_StdEPReq+0x150>
 80104f2:	e04b      	b.n	801058c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80104f4:	7bbb      	ldrb	r3, [r7, #14]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00d      	beq.n	8010516 <USBD_StdEPReq+0x146>
 80104fa:	7bbb      	ldrb	r3, [r7, #14]
 80104fc:	2b80      	cmp	r3, #128	@ 0x80
 80104fe:	d00a      	beq.n	8010516 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010500:	7bbb      	ldrb	r3, [r7, #14]
 8010502:	4619      	mov	r1, r3
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f001 f993 	bl	8011830 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801050a:	2180      	movs	r1, #128	@ 0x80
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f001 f98f 	bl	8011830 <USBD_LL_StallEP>
 8010512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010514:	e040      	b.n	8010598 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 fc68 	bl	8010dee <USBD_CtlError>
              break;
 801051e:	e03b      	b.n	8010598 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	885b      	ldrh	r3, [r3, #2]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d136      	bne.n	8010596 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010528:	7bbb      	ldrb	r3, [r7, #14]
 801052a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801052e:	2b00      	cmp	r3, #0
 8010530:	d004      	beq.n	801053c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010532:	7bbb      	ldrb	r3, [r7, #14]
 8010534:	4619      	mov	r1, r3
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f001 f999 	bl	801186e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fd2d 	bl	8010f9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010542:	7bbb      	ldrb	r3, [r7, #14]
 8010544:	4619      	mov	r1, r3
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7ff fde4 	bl	8010114 <USBD_CoreFindEP>
 801054c:	4603      	mov	r3, r0
 801054e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010550:	7b7b      	ldrb	r3, [r7, #13]
 8010552:	2bff      	cmp	r3, #255	@ 0xff
 8010554:	d01f      	beq.n	8010596 <USBD_StdEPReq+0x1c6>
 8010556:	7b7b      	ldrb	r3, [r7, #13]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d11c      	bne.n	8010596 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801055c:	7b7a      	ldrb	r2, [r7, #13]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010564:	7b7a      	ldrb	r2, [r7, #13]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	32ae      	adds	r2, #174	@ 0xae
 801056a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d010      	beq.n	8010596 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010574:	7b7a      	ldrb	r2, [r7, #13]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	32ae      	adds	r2, #174	@ 0xae
 801057a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	6839      	ldr	r1, [r7, #0]
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	4798      	blx	r3
 8010586:	4603      	mov	r3, r0
 8010588:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801058a:	e004      	b.n	8010596 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801058c:	6839      	ldr	r1, [r7, #0]
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f000 fc2d 	bl	8010dee <USBD_CtlError>
              break;
 8010594:	e000      	b.n	8010598 <USBD_StdEPReq+0x1c8>
              break;
 8010596:	bf00      	nop
          }
          break;
 8010598:	e0ab      	b.n	80106f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d002      	beq.n	80105ac <USBD_StdEPReq+0x1dc>
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d032      	beq.n	8010610 <USBD_StdEPReq+0x240>
 80105aa:	e097      	b.n	80106dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80105ac:	7bbb      	ldrb	r3, [r7, #14]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d007      	beq.n	80105c2 <USBD_StdEPReq+0x1f2>
 80105b2:	7bbb      	ldrb	r3, [r7, #14]
 80105b4:	2b80      	cmp	r3, #128	@ 0x80
 80105b6:	d004      	beq.n	80105c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 fc17 	bl	8010dee <USBD_CtlError>
                break;
 80105c0:	e091      	b.n	80106e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80105c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	da0b      	bge.n	80105e2 <USBD_StdEPReq+0x212>
 80105ca:	7bbb      	ldrb	r3, [r7, #14]
 80105cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80105d0:	4613      	mov	r3, r2
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	3310      	adds	r3, #16
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	4413      	add	r3, r2
 80105de:	3304      	adds	r3, #4
 80105e0:	e00b      	b.n	80105fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80105e2:	7bbb      	ldrb	r3, [r7, #14]
 80105e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80105e8:	4613      	mov	r3, r2
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	4413      	add	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	4413      	add	r3, r2
 80105f8:	3304      	adds	r3, #4
 80105fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2200      	movs	r2, #0
 8010600:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	2202      	movs	r2, #2
 8010606:	4619      	mov	r1, r3
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f000 fc6d 	bl	8010ee8 <USBD_CtlSendData>
              break;
 801060e:	e06a      	b.n	80106e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010614:	2b00      	cmp	r3, #0
 8010616:	da11      	bge.n	801063c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010618:	7bbb      	ldrb	r3, [r7, #14]
 801061a:	f003 020f 	and.w	r2, r3, #15
 801061e:	6879      	ldr	r1, [r7, #4]
 8010620:	4613      	mov	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	009b      	lsls	r3, r3, #2
 8010628:	440b      	add	r3, r1
 801062a:	3324      	adds	r3, #36	@ 0x24
 801062c:	881b      	ldrh	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d117      	bne.n	8010662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010632:	6839      	ldr	r1, [r7, #0]
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fbda 	bl	8010dee <USBD_CtlError>
                  break;
 801063a:	e054      	b.n	80106e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801063c:	7bbb      	ldrb	r3, [r7, #14]
 801063e:	f003 020f 	and.w	r2, r3, #15
 8010642:	6879      	ldr	r1, [r7, #4]
 8010644:	4613      	mov	r3, r2
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	4413      	add	r3, r2
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	440b      	add	r3, r1
 801064e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d104      	bne.n	8010662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010658:	6839      	ldr	r1, [r7, #0]
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 fbc7 	bl	8010dee <USBD_CtlError>
                  break;
 8010660:	e041      	b.n	80106e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010666:	2b00      	cmp	r3, #0
 8010668:	da0b      	bge.n	8010682 <USBD_StdEPReq+0x2b2>
 801066a:	7bbb      	ldrb	r3, [r7, #14]
 801066c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010670:	4613      	mov	r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	4413      	add	r3, r2
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	3310      	adds	r3, #16
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	4413      	add	r3, r2
 801067e:	3304      	adds	r3, #4
 8010680:	e00b      	b.n	801069a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010682:	7bbb      	ldrb	r3, [r7, #14]
 8010684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010688:	4613      	mov	r3, r2
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	4413      	add	r3, r2
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	4413      	add	r3, r2
 8010698:	3304      	adds	r3, #4
 801069a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801069c:	7bbb      	ldrb	r3, [r7, #14]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d002      	beq.n	80106a8 <USBD_StdEPReq+0x2d8>
 80106a2:	7bbb      	ldrb	r3, [r7, #14]
 80106a4:	2b80      	cmp	r3, #128	@ 0x80
 80106a6:	d103      	bne.n	80106b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2200      	movs	r2, #0
 80106ac:	601a      	str	r2, [r3, #0]
 80106ae:	e00e      	b.n	80106ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80106b0:	7bbb      	ldrb	r3, [r7, #14]
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f001 f8f9 	bl	80118ac <USBD_LL_IsStallEP>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d003      	beq.n	80106c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	2201      	movs	r2, #1
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	e002      	b.n	80106ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2200      	movs	r2, #0
 80106cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	2202      	movs	r2, #2
 80106d2:	4619      	mov	r1, r3
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fc07 	bl	8010ee8 <USBD_CtlSendData>
              break;
 80106da:	e004      	b.n	80106e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80106dc:	6839      	ldr	r1, [r7, #0]
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 fb85 	bl	8010dee <USBD_CtlError>
              break;
 80106e4:	bf00      	nop
          }
          break;
 80106e6:	e004      	b.n	80106f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80106e8:	6839      	ldr	r1, [r7, #0]
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f000 fb7f 	bl	8010dee <USBD_CtlError>
          break;
 80106f0:	bf00      	nop
      }
      break;
 80106f2:	e005      	b.n	8010700 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80106f4:	6839      	ldr	r1, [r7, #0]
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 fb79 	bl	8010dee <USBD_CtlError>
      break;
 80106fc:	e000      	b.n	8010700 <USBD_StdEPReq+0x330>
      break;
 80106fe:	bf00      	nop
  }

  return ret;
 8010700:	7bfb      	ldrb	r3, [r7, #15]
}
 8010702:	4618      	mov	r0, r3
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010716:	2300      	movs	r3, #0
 8010718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801071a:	2300      	movs	r3, #0
 801071c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801071e:	2300      	movs	r3, #0
 8010720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	885b      	ldrh	r3, [r3, #2]
 8010726:	0a1b      	lsrs	r3, r3, #8
 8010728:	b29b      	uxth	r3, r3
 801072a:	3b01      	subs	r3, #1
 801072c:	2b0e      	cmp	r3, #14
 801072e:	f200 8152 	bhi.w	80109d6 <USBD_GetDescriptor+0x2ca>
 8010732:	a201      	add	r2, pc, #4	@ (adr r2, 8010738 <USBD_GetDescriptor+0x2c>)
 8010734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010738:	080107a9 	.word	0x080107a9
 801073c:	080107c1 	.word	0x080107c1
 8010740:	08010801 	.word	0x08010801
 8010744:	080109d7 	.word	0x080109d7
 8010748:	080109d7 	.word	0x080109d7
 801074c:	08010977 	.word	0x08010977
 8010750:	080109a3 	.word	0x080109a3
 8010754:	080109d7 	.word	0x080109d7
 8010758:	080109d7 	.word	0x080109d7
 801075c:	080109d7 	.word	0x080109d7
 8010760:	080109d7 	.word	0x080109d7
 8010764:	080109d7 	.word	0x080109d7
 8010768:	080109d7 	.word	0x080109d7
 801076c:	080109d7 	.word	0x080109d7
 8010770:	08010775 	.word	0x08010775
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d00b      	beq.n	8010798 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010786:	69db      	ldr	r3, [r3, #28]
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	7c12      	ldrb	r2, [r2, #16]
 801078c:	f107 0108 	add.w	r1, r7, #8
 8010790:	4610      	mov	r0, r2
 8010792:	4798      	blx	r3
 8010794:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010796:	e126      	b.n	80109e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010798:	6839      	ldr	r1, [r7, #0]
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fb27 	bl	8010dee <USBD_CtlError>
        err++;
 80107a0:	7afb      	ldrb	r3, [r7, #11]
 80107a2:	3301      	adds	r3, #1
 80107a4:	72fb      	strb	r3, [r7, #11]
      break;
 80107a6:	e11e      	b.n	80109e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	7c12      	ldrb	r2, [r2, #16]
 80107b4:	f107 0108 	add.w	r1, r7, #8
 80107b8:	4610      	mov	r0, r2
 80107ba:	4798      	blx	r3
 80107bc:	60f8      	str	r0, [r7, #12]
      break;
 80107be:	e112      	b.n	80109e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	7c1b      	ldrb	r3, [r3, #16]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d10d      	bne.n	80107e4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107d0:	f107 0208 	add.w	r2, r7, #8
 80107d4:	4610      	mov	r0, r2
 80107d6:	4798      	blx	r3
 80107d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	3301      	adds	r3, #1
 80107de:	2202      	movs	r2, #2
 80107e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80107e2:	e100      	b.n	80109e6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ec:	f107 0208 	add.w	r2, r7, #8
 80107f0:	4610      	mov	r0, r2
 80107f2:	4798      	blx	r3
 80107f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	3301      	adds	r3, #1
 80107fa:	2202      	movs	r2, #2
 80107fc:	701a      	strb	r2, [r3, #0]
      break;
 80107fe:	e0f2      	b.n	80109e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	885b      	ldrh	r3, [r3, #2]
 8010804:	b2db      	uxtb	r3, r3
 8010806:	2b05      	cmp	r3, #5
 8010808:	f200 80ac 	bhi.w	8010964 <USBD_GetDescriptor+0x258>
 801080c:	a201      	add	r2, pc, #4	@ (adr r2, 8010814 <USBD_GetDescriptor+0x108>)
 801080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010812:	bf00      	nop
 8010814:	0801082d 	.word	0x0801082d
 8010818:	08010861 	.word	0x08010861
 801081c:	08010895 	.word	0x08010895
 8010820:	080108c9 	.word	0x080108c9
 8010824:	080108fd 	.word	0x080108fd
 8010828:	08010931 	.word	0x08010931
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00b      	beq.n	8010850 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	7c12      	ldrb	r2, [r2, #16]
 8010844:	f107 0108 	add.w	r1, r7, #8
 8010848:	4610      	mov	r0, r2
 801084a:	4798      	blx	r3
 801084c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801084e:	e091      	b.n	8010974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 facb 	bl	8010dee <USBD_CtlError>
            err++;
 8010858:	7afb      	ldrb	r3, [r7, #11]
 801085a:	3301      	adds	r3, #1
 801085c:	72fb      	strb	r3, [r7, #11]
          break;
 801085e:	e089      	b.n	8010974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00b      	beq.n	8010884 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	7c12      	ldrb	r2, [r2, #16]
 8010878:	f107 0108 	add.w	r1, r7, #8
 801087c:	4610      	mov	r0, r2
 801087e:	4798      	blx	r3
 8010880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010882:	e077      	b.n	8010974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fab1 	bl	8010dee <USBD_CtlError>
            err++;
 801088c:	7afb      	ldrb	r3, [r7, #11]
 801088e:	3301      	adds	r3, #1
 8010890:	72fb      	strb	r3, [r7, #11]
          break;
 8010892:	e06f      	b.n	8010974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00b      	beq.n	80108b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	7c12      	ldrb	r2, [r2, #16]
 80108ac:	f107 0108 	add.w	r1, r7, #8
 80108b0:	4610      	mov	r0, r2
 80108b2:	4798      	blx	r3
 80108b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108b6:	e05d      	b.n	8010974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108b8:	6839      	ldr	r1, [r7, #0]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 fa97 	bl	8010dee <USBD_CtlError>
            err++;
 80108c0:	7afb      	ldrb	r3, [r7, #11]
 80108c2:	3301      	adds	r3, #1
 80108c4:	72fb      	strb	r3, [r7, #11]
          break;
 80108c6:	e055      	b.n	8010974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00b      	beq.n	80108ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108da:	691b      	ldr	r3, [r3, #16]
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	7c12      	ldrb	r2, [r2, #16]
 80108e0:	f107 0108 	add.w	r1, r7, #8
 80108e4:	4610      	mov	r0, r2
 80108e6:	4798      	blx	r3
 80108e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108ea:	e043      	b.n	8010974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80108ec:	6839      	ldr	r1, [r7, #0]
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 fa7d 	bl	8010dee <USBD_CtlError>
            err++;
 80108f4:	7afb      	ldrb	r3, [r7, #11]
 80108f6:	3301      	adds	r3, #1
 80108f8:	72fb      	strb	r3, [r7, #11]
          break;
 80108fa:	e03b      	b.n	8010974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010902:	695b      	ldr	r3, [r3, #20]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00b      	beq.n	8010920 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	7c12      	ldrb	r2, [r2, #16]
 8010914:	f107 0108 	add.w	r1, r7, #8
 8010918:	4610      	mov	r0, r2
 801091a:	4798      	blx	r3
 801091c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801091e:	e029      	b.n	8010974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 fa63 	bl	8010dee <USBD_CtlError>
            err++;
 8010928:	7afb      	ldrb	r3, [r7, #11]
 801092a:	3301      	adds	r3, #1
 801092c:	72fb      	strb	r3, [r7, #11]
          break;
 801092e:	e021      	b.n	8010974 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010936:	699b      	ldr	r3, [r3, #24]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d00b      	beq.n	8010954 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010942:	699b      	ldr	r3, [r3, #24]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	7c12      	ldrb	r2, [r2, #16]
 8010948:	f107 0108 	add.w	r1, r7, #8
 801094c:	4610      	mov	r0, r2
 801094e:	4798      	blx	r3
 8010950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010952:	e00f      	b.n	8010974 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010954:	6839      	ldr	r1, [r7, #0]
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 fa49 	bl	8010dee <USBD_CtlError>
            err++;
 801095c:	7afb      	ldrb	r3, [r7, #11]
 801095e:	3301      	adds	r3, #1
 8010960:	72fb      	strb	r3, [r7, #11]
          break;
 8010962:	e007      	b.n	8010974 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010964:	6839      	ldr	r1, [r7, #0]
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 fa41 	bl	8010dee <USBD_CtlError>
          err++;
 801096c:	7afb      	ldrb	r3, [r7, #11]
 801096e:	3301      	adds	r3, #1
 8010970:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010972:	bf00      	nop
      }
      break;
 8010974:	e037      	b.n	80109e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	7c1b      	ldrb	r3, [r3, #16]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d109      	bne.n	8010992 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010986:	f107 0208 	add.w	r2, r7, #8
 801098a:	4610      	mov	r0, r2
 801098c:	4798      	blx	r3
 801098e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010990:	e029      	b.n	80109e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010992:	6839      	ldr	r1, [r7, #0]
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fa2a 	bl	8010dee <USBD_CtlError>
        err++;
 801099a:	7afb      	ldrb	r3, [r7, #11]
 801099c:	3301      	adds	r3, #1
 801099e:	72fb      	strb	r3, [r7, #11]
      break;
 80109a0:	e021      	b.n	80109e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	7c1b      	ldrb	r3, [r3, #16]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d10d      	bne.n	80109c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80109b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109b2:	f107 0208 	add.w	r2, r7, #8
 80109b6:	4610      	mov	r0, r2
 80109b8:	4798      	blx	r3
 80109ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	3301      	adds	r3, #1
 80109c0:	2207      	movs	r2, #7
 80109c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80109c4:	e00f      	b.n	80109e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80109c6:	6839      	ldr	r1, [r7, #0]
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f000 fa10 	bl	8010dee <USBD_CtlError>
        err++;
 80109ce:	7afb      	ldrb	r3, [r7, #11]
 80109d0:	3301      	adds	r3, #1
 80109d2:	72fb      	strb	r3, [r7, #11]
      break;
 80109d4:	e007      	b.n	80109e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fa08 	bl	8010dee <USBD_CtlError>
      err++;
 80109de:	7afb      	ldrb	r3, [r7, #11]
 80109e0:	3301      	adds	r3, #1
 80109e2:	72fb      	strb	r3, [r7, #11]
      break;
 80109e4:	bf00      	nop
  }

  if (err != 0U)
 80109e6:	7afb      	ldrb	r3, [r7, #11]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d11e      	bne.n	8010a2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	88db      	ldrh	r3, [r3, #6]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d016      	beq.n	8010a22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80109f4:	893b      	ldrh	r3, [r7, #8]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00e      	beq.n	8010a18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	88da      	ldrh	r2, [r3, #6]
 80109fe:	893b      	ldrh	r3, [r7, #8]
 8010a00:	4293      	cmp	r3, r2
 8010a02:	bf28      	it	cs
 8010a04:	4613      	movcs	r3, r2
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010a0a:	893b      	ldrh	r3, [r7, #8]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	68f9      	ldr	r1, [r7, #12]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fa69 	bl	8010ee8 <USBD_CtlSendData>
 8010a16:	e009      	b.n	8010a2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f9e7 	bl	8010dee <USBD_CtlError>
 8010a20:	e004      	b.n	8010a2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 faba 	bl	8010f9c <USBD_CtlSendStatus>
 8010a28:	e000      	b.n	8010a2c <USBD_GetDescriptor+0x320>
    return;
 8010a2a:	bf00      	nop
  }
}
 8010a2c:	3710      	adds	r7, #16
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop

08010a34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	889b      	ldrh	r3, [r3, #4]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d131      	bne.n	8010aaa <USBD_SetAddress+0x76>
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	88db      	ldrh	r3, [r3, #6]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d12d      	bne.n	8010aaa <USBD_SetAddress+0x76>
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	885b      	ldrh	r3, [r3, #2]
 8010a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a54:	d829      	bhi.n	8010aaa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	885b      	ldrh	r3, [r3, #2]
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	2b03      	cmp	r3, #3
 8010a6c:	d104      	bne.n	8010a78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010a6e:	6839      	ldr	r1, [r7, #0]
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 f9bc 	bl	8010dee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a76:	e01d      	b.n	8010ab4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	7bfa      	ldrb	r2, [r7, #15]
 8010a7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010a80:	7bfb      	ldrb	r3, [r7, #15]
 8010a82:	4619      	mov	r1, r3
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 ff3d 	bl	8011904 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fa86 	bl	8010f9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010a90:	7bfb      	ldrb	r3, [r7, #15]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d004      	beq.n	8010aa0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2202      	movs	r2, #2
 8010a9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a9e:	e009      	b.n	8010ab4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aa8:	e004      	b.n	8010ab4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f000 f99e 	bl	8010dee <USBD_CtlError>
  }
}
 8010ab2:	bf00      	nop
 8010ab4:	bf00      	nop
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	885b      	ldrh	r3, [r3, #2]
 8010ace:	b2da      	uxtb	r2, r3
 8010ad0:	4b4e      	ldr	r3, [pc, #312]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010ad2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d905      	bls.n	8010ae8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010adc:	6839      	ldr	r1, [r7, #0]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f985 	bl	8010dee <USBD_CtlError>
    return USBD_FAIL;
 8010ae4:	2303      	movs	r3, #3
 8010ae6:	e08c      	b.n	8010c02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	2b02      	cmp	r3, #2
 8010af2:	d002      	beq.n	8010afa <USBD_SetConfig+0x3e>
 8010af4:	2b03      	cmp	r3, #3
 8010af6:	d029      	beq.n	8010b4c <USBD_SetConfig+0x90>
 8010af8:	e075      	b.n	8010be6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010afa:	4b44      	ldr	r3, [pc, #272]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d020      	beq.n	8010b44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010b02:	4b42      	ldr	r3, [pc, #264]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	461a      	mov	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	4619      	mov	r1, r3
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7fe ffb9 	bl	800fa8a <USBD_SetClassConfig>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d008      	beq.n	8010b34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010b22:	6839      	ldr	r1, [r7, #0]
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f000 f962 	bl	8010dee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2202      	movs	r2, #2
 8010b2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b32:	e065      	b.n	8010c00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 fa31 	bl	8010f9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2203      	movs	r2, #3
 8010b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010b42:	e05d      	b.n	8010c00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 fa29 	bl	8010f9c <USBD_CtlSendStatus>
      break;
 8010b4a:	e059      	b.n	8010c00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d112      	bne.n	8010b7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2202      	movs	r2, #2
 8010b58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	461a      	mov	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010b66:	4b29      	ldr	r3, [pc, #164]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	4619      	mov	r1, r3
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f7fe ffa8 	bl	800fac2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 fa12 	bl	8010f9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010b78:	e042      	b.n	8010c00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010b7a:	4b24      	ldr	r3, [pc, #144]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	461a      	mov	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d02a      	beq.n	8010bde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	4619      	mov	r1, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f7fe ff96 	bl	800fac2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010b96:	4b1d      	ldr	r3, [pc, #116]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f7fe ff6f 	bl	800fa8a <USBD_SetClassConfig>
 8010bac:	4603      	mov	r3, r0
 8010bae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d00f      	beq.n	8010bd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010bb6:	6839      	ldr	r1, [r7, #0]
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f000 f918 	bl	8010dee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7fe ff7b 	bl	800fac2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2202      	movs	r2, #2
 8010bd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010bd4:	e014      	b.n	8010c00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 f9e0 	bl	8010f9c <USBD_CtlSendStatus>
      break;
 8010bdc:	e010      	b.n	8010c00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 f9dc 	bl	8010f9c <USBD_CtlSendStatus>
      break;
 8010be4:	e00c      	b.n	8010c00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 f900 	bl	8010dee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010bee:	4b07      	ldr	r3, [pc, #28]	@ (8010c0c <USBD_SetConfig+0x150>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7fe ff64 	bl	800fac2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010bfa:	2303      	movs	r3, #3
 8010bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8010bfe:	bf00      	nop
  }

  return ret;
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	24000374 	.word	0x24000374

08010c10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	88db      	ldrh	r3, [r3, #6]
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d004      	beq.n	8010c2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 f8e2 	bl	8010dee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010c2a:	e023      	b.n	8010c74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b02      	cmp	r3, #2
 8010c36:	dc02      	bgt.n	8010c3e <USBD_GetConfig+0x2e>
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	dc03      	bgt.n	8010c44 <USBD_GetConfig+0x34>
 8010c3c:	e015      	b.n	8010c6a <USBD_GetConfig+0x5a>
 8010c3e:	2b03      	cmp	r3, #3
 8010c40:	d00b      	beq.n	8010c5a <USBD_GetConfig+0x4a>
 8010c42:	e012      	b.n	8010c6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	3308      	adds	r3, #8
 8010c4e:	2201      	movs	r2, #1
 8010c50:	4619      	mov	r1, r3
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 f948 	bl	8010ee8 <USBD_CtlSendData>
        break;
 8010c58:	e00c      	b.n	8010c74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	3304      	adds	r3, #4
 8010c5e:	2201      	movs	r2, #1
 8010c60:	4619      	mov	r1, r3
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f000 f940 	bl	8010ee8 <USBD_CtlSendData>
        break;
 8010c68:	e004      	b.n	8010c74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010c6a:	6839      	ldr	r1, [r7, #0]
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f000 f8be 	bl	8010dee <USBD_CtlError>
        break;
 8010c72:	bf00      	nop
}
 8010c74:	bf00      	nop
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	2b02      	cmp	r3, #2
 8010c92:	d81e      	bhi.n	8010cd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	88db      	ldrh	r3, [r3, #6]
 8010c98:	2b02      	cmp	r3, #2
 8010c9a:	d004      	beq.n	8010ca6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010c9c:	6839      	ldr	r1, [r7, #0]
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f8a5 	bl	8010dee <USBD_CtlError>
        break;
 8010ca4:	e01a      	b.n	8010cdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2201      	movs	r2, #1
 8010caa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d005      	beq.n	8010cc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	f043 0202 	orr.w	r2, r3, #2
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	330c      	adds	r3, #12
 8010cc6:	2202      	movs	r2, #2
 8010cc8:	4619      	mov	r1, r3
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 f90c 	bl	8010ee8 <USBD_CtlSendData>
      break;
 8010cd0:	e004      	b.n	8010cdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010cd2:	6839      	ldr	r1, [r7, #0]
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f88a 	bl	8010dee <USBD_CtlError>
      break;
 8010cda:	bf00      	nop
  }
}
 8010cdc:	bf00      	nop
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	885b      	ldrh	r3, [r3, #2]
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	d107      	bne.n	8010d06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f000 f94c 	bl	8010f9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010d04:	e013      	b.n	8010d2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	885b      	ldrh	r3, [r3, #2]
 8010d0a:	2b02      	cmp	r3, #2
 8010d0c:	d10b      	bne.n	8010d26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	889b      	ldrh	r3, [r3, #4]
 8010d12:	0a1b      	lsrs	r3, r3, #8
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	b2da      	uxtb	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f000 f93c 	bl	8010f9c <USBD_CtlSendStatus>
}
 8010d24:	e003      	b.n	8010d2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 f860 	bl	8010dee <USBD_CtlError>
}
 8010d2e:	bf00      	nop
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b082      	sub	sp, #8
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	2b02      	cmp	r3, #2
 8010d4c:	d80b      	bhi.n	8010d66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	885b      	ldrh	r3, [r3, #2]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d10c      	bne.n	8010d70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 f91c 	bl	8010f9c <USBD_CtlSendStatus>
      }
      break;
 8010d64:	e004      	b.n	8010d70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010d66:	6839      	ldr	r1, [r7, #0]
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f000 f840 	bl	8010dee <USBD_CtlError>
      break;
 8010d6e:	e000      	b.n	8010d72 <USBD_ClrFeature+0x3c>
      break;
 8010d70:	bf00      	nop
  }
}
 8010d72:	bf00      	nop
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b084      	sub	sp, #16
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
 8010d82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	781a      	ldrb	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	3301      	adds	r3, #1
 8010d94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	781a      	ldrb	r2, [r3, #0]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	3301      	adds	r3, #1
 8010da2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f7ff fa16 	bl	80101d6 <SWAPBYTE>
 8010daa:	4603      	mov	r3, r0
 8010dac:	461a      	mov	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	3301      	adds	r3, #1
 8010db6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010dbe:	68f8      	ldr	r0, [r7, #12]
 8010dc0:	f7ff fa09 	bl	80101d6 <SWAPBYTE>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f7ff f9fc 	bl	80101d6 <SWAPBYTE>
 8010dde:	4603      	mov	r3, r0
 8010de0:	461a      	mov	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	80da      	strh	r2, [r3, #6]
}
 8010de6:	bf00      	nop
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b082      	sub	sp, #8
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010df8:	2180      	movs	r1, #128	@ 0x80
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 fd18 	bl	8011830 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010e00:	2100      	movs	r1, #0
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f000 fd14 	bl	8011830 <USBD_LL_StallEP>
}
 8010e08:	bf00      	nop
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b086      	sub	sp, #24
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d042      	beq.n	8010eac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8010e2a:	6938      	ldr	r0, [r7, #16]
 8010e2c:	f000 f842 	bl	8010eb4 <USBD_GetLen>
 8010e30:	4603      	mov	r3, r0
 8010e32:	3301      	adds	r3, #1
 8010e34:	005b      	lsls	r3, r3, #1
 8010e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e3a:	d808      	bhi.n	8010e4e <USBD_GetString+0x3e>
 8010e3c:	6938      	ldr	r0, [r7, #16]
 8010e3e:	f000 f839 	bl	8010eb4 <USBD_GetLen>
 8010e42:	4603      	mov	r3, r0
 8010e44:	3301      	adds	r3, #1
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	005b      	lsls	r3, r3, #1
 8010e4a:	b29a      	uxth	r2, r3
 8010e4c:	e001      	b.n	8010e52 <USBD_GetString+0x42>
 8010e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010e56:	7dfb      	ldrb	r3, [r7, #23]
 8010e58:	68ba      	ldr	r2, [r7, #8]
 8010e5a:	4413      	add	r3, r2
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	7812      	ldrb	r2, [r2, #0]
 8010e60:	701a      	strb	r2, [r3, #0]
  idx++;
 8010e62:	7dfb      	ldrb	r3, [r7, #23]
 8010e64:	3301      	adds	r3, #1
 8010e66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010e68:	7dfb      	ldrb	r3, [r7, #23]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	2203      	movs	r2, #3
 8010e70:	701a      	strb	r2, [r3, #0]
  idx++;
 8010e72:	7dfb      	ldrb	r3, [r7, #23]
 8010e74:	3301      	adds	r3, #1
 8010e76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010e78:	e013      	b.n	8010ea2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	4413      	add	r3, r2
 8010e80:	693a      	ldr	r2, [r7, #16]
 8010e82:	7812      	ldrb	r2, [r2, #0]
 8010e84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	613b      	str	r3, [r7, #16]
    idx++;
 8010e8c:	7dfb      	ldrb	r3, [r7, #23]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	4413      	add	r3, r2
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
    idx++;
 8010e9c:	7dfb      	ldrb	r3, [r7, #23]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1e7      	bne.n	8010e7a <USBD_GetString+0x6a>
 8010eaa:	e000      	b.n	8010eae <USBD_GetString+0x9e>
    return;
 8010eac:	bf00      	nop
  }
}
 8010eae:	3718      	adds	r7, #24
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010ec4:	e005      	b.n	8010ed2 <USBD_GetLen+0x1e>
  {
    len++;
 8010ec6:	7bfb      	ldrb	r3, [r7, #15]
 8010ec8:	3301      	adds	r3, #1
 8010eca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	3301      	adds	r3, #1
 8010ed0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1f5      	bne.n	8010ec6 <USBD_GetLen+0x12>
  }

  return len;
 8010eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2202      	movs	r2, #2
 8010ef8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f000 fd17 	bl	8011942 <USBD_LL_Transmit>

  return USBD_OK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b084      	sub	sp, #16
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	60f8      	str	r0, [r7, #12]
 8010f26:	60b9      	str	r1, [r7, #8]
 8010f28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	68ba      	ldr	r2, [r7, #8]
 8010f2e:	2100      	movs	r1, #0
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f000 fd06 	bl	8011942 <USBD_LL_Transmit>

  return USBD_OK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3710      	adds	r7, #16
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2203      	movs	r2, #3
 8010f50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	68ba      	ldr	r2, [r7, #8]
 8010f68:	2100      	movs	r1, #0
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	f000 fd0a 	bl	8011984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3710      	adds	r7, #16
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b084      	sub	sp, #16
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	60f8      	str	r0, [r7, #12]
 8010f82:	60b9      	str	r1, [r7, #8]
 8010f84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	68f8      	ldr	r0, [r7, #12]
 8010f8e:	f000 fcf9 	bl	8011984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2204      	movs	r2, #4
 8010fa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010fac:	2300      	movs	r3, #0
 8010fae:	2200      	movs	r2, #0
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fcc5 	bl	8011942 <USBD_LL_Transmit>

  return USBD_OK;
 8010fb8:	2300      	movs	r3, #0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b082      	sub	sp, #8
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2205      	movs	r2, #5
 8010fce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	2100      	movs	r1, #0
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fcd3 	bl	8011984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fde:	2300      	movs	r3, #0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010fec:	2200      	movs	r2, #0
 8010fee:	4913      	ldr	r1, [pc, #76]	@ (801103c <MX_USB_DEVICE_Init+0x54>)
 8010ff0:	4813      	ldr	r0, [pc, #76]	@ (8011040 <MX_USB_DEVICE_Init+0x58>)
 8010ff2:	f7fe fccd 	bl	800f990 <USBD_Init>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d001      	beq.n	8011000 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010ffc:	f7f0 f828 	bl	8001050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011000:	4910      	ldr	r1, [pc, #64]	@ (8011044 <MX_USB_DEVICE_Init+0x5c>)
 8011002:	480f      	ldr	r0, [pc, #60]	@ (8011040 <MX_USB_DEVICE_Init+0x58>)
 8011004:	f7fe fcf4 	bl	800f9f0 <USBD_RegisterClass>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	d001      	beq.n	8011012 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801100e:	f7f0 f81f 	bl	8001050 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011012:	490d      	ldr	r1, [pc, #52]	@ (8011048 <MX_USB_DEVICE_Init+0x60>)
 8011014:	480a      	ldr	r0, [pc, #40]	@ (8011040 <MX_USB_DEVICE_Init+0x58>)
 8011016:	f7fe fbeb 	bl	800f7f0 <USBD_CDC_RegisterInterface>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d001      	beq.n	8011024 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011020:	f7f0 f816 	bl	8001050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011024:	4806      	ldr	r0, [pc, #24]	@ (8011040 <MX_USB_DEVICE_Init+0x58>)
 8011026:	f7fe fd19 	bl	800fa5c <USBD_Start>
 801102a:	4603      	mov	r3, r0
 801102c:	2b00      	cmp	r3, #0
 801102e:	d001      	beq.n	8011034 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011030:	f7f0 f80e 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011034:	f7f7 fdb8 	bl	8008ba8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011038:	bf00      	nop
 801103a:	bd80      	pop	{r7, pc}
 801103c:	240000b0 	.word	0x240000b0
 8011040:	24000378 	.word	0x24000378
 8011044:	2400001c 	.word	0x2400001c
 8011048:	2400009c 	.word	0x2400009c

0801104c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011050:	2200      	movs	r2, #0
 8011052:	4905      	ldr	r1, [pc, #20]	@ (8011068 <CDC_Init_FS+0x1c>)
 8011054:	4805      	ldr	r0, [pc, #20]	@ (801106c <CDC_Init_FS+0x20>)
 8011056:	f7fe fbe5 	bl	800f824 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801105a:	4905      	ldr	r1, [pc, #20]	@ (8011070 <CDC_Init_FS+0x24>)
 801105c:	4803      	ldr	r0, [pc, #12]	@ (801106c <CDC_Init_FS+0x20>)
 801105e:	f7fe fc03 	bl	800f868 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011062:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011064:	4618      	mov	r0, r3
 8011066:	bd80      	pop	{r7, pc}
 8011068:	24000e54 	.word	0x24000e54
 801106c:	24000378 	.word	0x24000378
 8011070:	24000654 	.word	0x24000654

08011074 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011074:	b480      	push	{r7}
 8011076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011078:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801107a:	4618      	mov	r0, r3
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	4603      	mov	r3, r0
 801108c:	6039      	str	r1, [r7, #0]
 801108e:	71fb      	strb	r3, [r7, #7]
 8011090:	4613      	mov	r3, r2
 8011092:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011094:	79fb      	ldrb	r3, [r7, #7]
 8011096:	2b23      	cmp	r3, #35	@ 0x23
 8011098:	d84a      	bhi.n	8011130 <CDC_Control_FS+0xac>
 801109a:	a201      	add	r2, pc, #4	@ (adr r2, 80110a0 <CDC_Control_FS+0x1c>)
 801109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a0:	08011131 	.word	0x08011131
 80110a4:	08011131 	.word	0x08011131
 80110a8:	08011131 	.word	0x08011131
 80110ac:	08011131 	.word	0x08011131
 80110b0:	08011131 	.word	0x08011131
 80110b4:	08011131 	.word	0x08011131
 80110b8:	08011131 	.word	0x08011131
 80110bc:	08011131 	.word	0x08011131
 80110c0:	08011131 	.word	0x08011131
 80110c4:	08011131 	.word	0x08011131
 80110c8:	08011131 	.word	0x08011131
 80110cc:	08011131 	.word	0x08011131
 80110d0:	08011131 	.word	0x08011131
 80110d4:	08011131 	.word	0x08011131
 80110d8:	08011131 	.word	0x08011131
 80110dc:	08011131 	.word	0x08011131
 80110e0:	08011131 	.word	0x08011131
 80110e4:	08011131 	.word	0x08011131
 80110e8:	08011131 	.word	0x08011131
 80110ec:	08011131 	.word	0x08011131
 80110f0:	08011131 	.word	0x08011131
 80110f4:	08011131 	.word	0x08011131
 80110f8:	08011131 	.word	0x08011131
 80110fc:	08011131 	.word	0x08011131
 8011100:	08011131 	.word	0x08011131
 8011104:	08011131 	.word	0x08011131
 8011108:	08011131 	.word	0x08011131
 801110c:	08011131 	.word	0x08011131
 8011110:	08011131 	.word	0x08011131
 8011114:	08011131 	.word	0x08011131
 8011118:	08011131 	.word	0x08011131
 801111c:	08011131 	.word	0x08011131
 8011120:	08011131 	.word	0x08011131
 8011124:	08011131 	.word	0x08011131
 8011128:	08011131 	.word	0x08011131
 801112c:	08011131 	.word	0x08011131
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011130:	bf00      	nop
  }

  return (USBD_OK);
 8011132:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011134:	4618      	mov	r0, r3
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801114a:	6879      	ldr	r1, [r7, #4]
 801114c:	4808      	ldr	r0, [pc, #32]	@ (8011170 <CDC_Receive_FS+0x30>)
 801114e:	f7fe fb8b 	bl	800f868 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011152:	4807      	ldr	r0, [pc, #28]	@ (8011170 <CDC_Receive_FS+0x30>)
 8011154:	f7fe fbe6 	bl	800f924 <USBD_CDC_ReceivePacket>
	CDC_Transmit_FS(Buf,*Len);
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	b29b      	uxth	r3, r3
 801115e:	4619      	mov	r1, r3
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 f807 	bl	8011174 <CDC_Transmit_FS>
	return (USBD_OK);
 8011166:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011168:	4618      	mov	r0, r3
 801116a:	3708      	adds	r7, #8
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	24000378 	.word	0x24000378

08011174 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	460b      	mov	r3, r1
 801117e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011180:	2300      	movs	r3, #0
 8011182:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011184:	4b0d      	ldr	r3, [pc, #52]	@ (80111bc <CDC_Transmit_FS+0x48>)
 8011186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801118a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011192:	2b00      	cmp	r3, #0
 8011194:	d001      	beq.n	801119a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011196:	2301      	movs	r3, #1
 8011198:	e00b      	b.n	80111b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801119a:	887b      	ldrh	r3, [r7, #2]
 801119c:	461a      	mov	r2, r3
 801119e:	6879      	ldr	r1, [r7, #4]
 80111a0:	4806      	ldr	r0, [pc, #24]	@ (80111bc <CDC_Transmit_FS+0x48>)
 80111a2:	f7fe fb3f 	bl	800f824 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80111a6:	4805      	ldr	r0, [pc, #20]	@ (80111bc <CDC_Transmit_FS+0x48>)
 80111a8:	f7fe fb7c 	bl	800f8a4 <USBD_CDC_TransmitPacket>
 80111ac:	4603      	mov	r3, r0
 80111ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80111b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	24000378 	.word	0x24000378

080111c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b087      	sub	sp, #28
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	4613      	mov	r3, r2
 80111cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80111ce:	2300      	movs	r3, #0
 80111d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80111d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	371c      	adds	r7, #28
 80111da:	46bd      	mov	sp, r7
 80111dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e0:	4770      	bx	lr
	...

080111e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	4603      	mov	r3, r0
 80111ec:	6039      	str	r1, [r7, #0]
 80111ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2212      	movs	r2, #18
 80111f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80111f6:	4b03      	ldr	r3, [pc, #12]	@ (8011204 <USBD_FS_DeviceDescriptor+0x20>)
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	240000d0 	.word	0x240000d0

08011208 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	4603      	mov	r3, r0
 8011210:	6039      	str	r1, [r7, #0]
 8011212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	2204      	movs	r2, #4
 8011218:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801121a:	4b03      	ldr	r3, [pc, #12]	@ (8011228 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801121c:	4618      	mov	r0, r3
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	240000e4 	.word	0x240000e4

0801122c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	6039      	str	r1, [r7, #0]
 8011236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011238:	79fb      	ldrb	r3, [r7, #7]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d105      	bne.n	801124a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	4907      	ldr	r1, [pc, #28]	@ (8011260 <USBD_FS_ProductStrDescriptor+0x34>)
 8011242:	4808      	ldr	r0, [pc, #32]	@ (8011264 <USBD_FS_ProductStrDescriptor+0x38>)
 8011244:	f7ff fde4 	bl	8010e10 <USBD_GetString>
 8011248:	e004      	b.n	8011254 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801124a:	683a      	ldr	r2, [r7, #0]
 801124c:	4904      	ldr	r1, [pc, #16]	@ (8011260 <USBD_FS_ProductStrDescriptor+0x34>)
 801124e:	4805      	ldr	r0, [pc, #20]	@ (8011264 <USBD_FS_ProductStrDescriptor+0x38>)
 8011250:	f7ff fdde 	bl	8010e10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011254:	4b02      	ldr	r3, [pc, #8]	@ (8011260 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	24001654 	.word	0x24001654
 8011264:	0801252c 	.word	0x0801252c

08011268 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	4603      	mov	r3, r0
 8011270:	6039      	str	r1, [r7, #0]
 8011272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	4904      	ldr	r1, [pc, #16]	@ (8011288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011278:	4804      	ldr	r0, [pc, #16]	@ (801128c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801127a:	f7ff fdc9 	bl	8010e10 <USBD_GetString>
  return USBD_StrDesc;
 801127e:	4b02      	ldr	r3, [pc, #8]	@ (8011288 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011280:	4618      	mov	r0, r3
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	24001654 	.word	0x24001654
 801128c:	08012544 	.word	0x08012544

08011290 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	6039      	str	r1, [r7, #0]
 801129a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	221a      	movs	r2, #26
 80112a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80112a2:	f000 f843 	bl	801132c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80112a6:	4b02      	ldr	r3, [pc, #8]	@ (80112b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	240000e8 	.word	0x240000e8

080112b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	4603      	mov	r3, r0
 80112bc:	6039      	str	r1, [r7, #0]
 80112be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80112c0:	79fb      	ldrb	r3, [r7, #7]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d105      	bne.n	80112d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112c6:	683a      	ldr	r2, [r7, #0]
 80112c8:	4907      	ldr	r1, [pc, #28]	@ (80112e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80112ca:	4808      	ldr	r0, [pc, #32]	@ (80112ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80112cc:	f7ff fda0 	bl	8010e10 <USBD_GetString>
 80112d0:	e004      	b.n	80112dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	4904      	ldr	r1, [pc, #16]	@ (80112e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80112d6:	4805      	ldr	r0, [pc, #20]	@ (80112ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80112d8:	f7ff fd9a 	bl	8010e10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80112dc:	4b02      	ldr	r3, [pc, #8]	@ (80112e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3708      	adds	r7, #8
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	24001654 	.word	0x24001654
 80112ec:	08012558 	.word	0x08012558

080112f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	4603      	mov	r3, r0
 80112f8:	6039      	str	r1, [r7, #0]
 80112fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80112fc:	79fb      	ldrb	r3, [r7, #7]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d105      	bne.n	801130e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011302:	683a      	ldr	r2, [r7, #0]
 8011304:	4907      	ldr	r1, [pc, #28]	@ (8011324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011306:	4808      	ldr	r0, [pc, #32]	@ (8011328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011308:	f7ff fd82 	bl	8010e10 <USBD_GetString>
 801130c:	e004      	b.n	8011318 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	4904      	ldr	r1, [pc, #16]	@ (8011324 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011312:	4805      	ldr	r0, [pc, #20]	@ (8011328 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011314:	f7ff fd7c 	bl	8010e10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011318:	4b02      	ldr	r3, [pc, #8]	@ (8011324 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801131a:	4618      	mov	r0, r3
 801131c:	3708      	adds	r7, #8
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	24001654 	.word	0x24001654
 8011328:	08012564 	.word	0x08012564

0801132c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011332:	4b0f      	ldr	r3, [pc, #60]	@ (8011370 <Get_SerialNum+0x44>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011338:	4b0e      	ldr	r3, [pc, #56]	@ (8011374 <Get_SerialNum+0x48>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801133e:	4b0e      	ldr	r3, [pc, #56]	@ (8011378 <Get_SerialNum+0x4c>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011344:	68fa      	ldr	r2, [r7, #12]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d009      	beq.n	8011366 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011352:	2208      	movs	r2, #8
 8011354:	4909      	ldr	r1, [pc, #36]	@ (801137c <Get_SerialNum+0x50>)
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 f814 	bl	8011384 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801135c:	2204      	movs	r2, #4
 801135e:	4908      	ldr	r1, [pc, #32]	@ (8011380 <Get_SerialNum+0x54>)
 8011360:	68b8      	ldr	r0, [r7, #8]
 8011362:	f000 f80f 	bl	8011384 <IntToUnicode>
  }
}
 8011366:	bf00      	nop
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	1ff1e800 	.word	0x1ff1e800
 8011374:	1ff1e804 	.word	0x1ff1e804
 8011378:	1ff1e808 	.word	0x1ff1e808
 801137c:	240000ea 	.word	0x240000ea
 8011380:	240000fa 	.word	0x240000fa

08011384 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011384:	b480      	push	{r7}
 8011386:	b087      	sub	sp, #28
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	4613      	mov	r3, r2
 8011390:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011396:	2300      	movs	r3, #0
 8011398:	75fb      	strb	r3, [r7, #23]
 801139a:	e027      	b.n	80113ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	0f1b      	lsrs	r3, r3, #28
 80113a0:	2b09      	cmp	r3, #9
 80113a2:	d80b      	bhi.n	80113bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	0f1b      	lsrs	r3, r3, #28
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	7dfb      	ldrb	r3, [r7, #23]
 80113ac:	005b      	lsls	r3, r3, #1
 80113ae:	4619      	mov	r1, r3
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	440b      	add	r3, r1
 80113b4:	3230      	adds	r2, #48	@ 0x30
 80113b6:	b2d2      	uxtb	r2, r2
 80113b8:	701a      	strb	r2, [r3, #0]
 80113ba:	e00a      	b.n	80113d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	0f1b      	lsrs	r3, r3, #28
 80113c0:	b2da      	uxtb	r2, r3
 80113c2:	7dfb      	ldrb	r3, [r7, #23]
 80113c4:	005b      	lsls	r3, r3, #1
 80113c6:	4619      	mov	r1, r3
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	440b      	add	r3, r1
 80113cc:	3237      	adds	r2, #55	@ 0x37
 80113ce:	b2d2      	uxtb	r2, r2
 80113d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80113d8:	7dfb      	ldrb	r3, [r7, #23]
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	3301      	adds	r3, #1
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	4413      	add	r3, r2
 80113e2:	2200      	movs	r2, #0
 80113e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80113e6:	7dfb      	ldrb	r3, [r7, #23]
 80113e8:	3301      	adds	r3, #1
 80113ea:	75fb      	strb	r3, [r7, #23]
 80113ec:	7dfa      	ldrb	r2, [r7, #23]
 80113ee:	79fb      	ldrb	r3, [r7, #7]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d3d3      	bcc.n	801139c <IntToUnicode+0x18>
  }
}
 80113f4:	bf00      	nop
 80113f6:	bf00      	nop
 80113f8:	371c      	adds	r7, #28
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
	...

08011404 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b0ba      	sub	sp, #232	@ 0xe8
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801140c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011410:	2200      	movs	r2, #0
 8011412:	601a      	str	r2, [r3, #0]
 8011414:	605a      	str	r2, [r3, #4]
 8011416:	609a      	str	r2, [r3, #8]
 8011418:	60da      	str	r2, [r3, #12]
 801141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801141c:	f107 0310 	add.w	r3, r7, #16
 8011420:	22c0      	movs	r2, #192	@ 0xc0
 8011422:	2100      	movs	r1, #0
 8011424:	4618      	mov	r0, r3
 8011426:	f000 fb47 	bl	8011ab8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a2c      	ldr	r2, [pc, #176]	@ (80114e0 <HAL_PCD_MspInit+0xdc>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d151      	bne.n	80114d8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011434:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011438:	f04f 0300 	mov.w	r3, #0
 801143c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011440:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011448:	f107 0310 	add.w	r3, r7, #16
 801144c:	4618      	mov	r0, r3
 801144e:	f7f8 fba1 	bl	8009b94 <HAL_RCCEx_PeriphCLKConfig>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d001      	beq.n	801145c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011458:	f7ef fdfa 	bl	8001050 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801145c:	f7f7 fba4 	bl	8008ba8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011460:	4b20      	ldr	r3, [pc, #128]	@ (80114e4 <HAL_PCD_MspInit+0xe0>)
 8011462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011466:	4a1f      	ldr	r2, [pc, #124]	@ (80114e4 <HAL_PCD_MspInit+0xe0>)
 8011468:	f043 0301 	orr.w	r3, r3, #1
 801146c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011470:	4b1c      	ldr	r3, [pc, #112]	@ (80114e4 <HAL_PCD_MspInit+0xe0>)
 8011472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011476:	f003 0301 	and.w	r3, r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801147e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011486:	2302      	movs	r3, #2
 8011488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801148c:	2300      	movs	r3, #0
 801148e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011492:	2300      	movs	r3, #0
 8011494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011498:	230a      	movs	r3, #10
 801149a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801149e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80114a2:	4619      	mov	r1, r3
 80114a4:	4810      	ldr	r0, [pc, #64]	@ (80114e8 <HAL_PCD_MspInit+0xe4>)
 80114a6:	f7f4 fa29 	bl	80058fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80114aa:	4b0e      	ldr	r3, [pc, #56]	@ (80114e4 <HAL_PCD_MspInit+0xe0>)
 80114ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80114b0:	4a0c      	ldr	r2, [pc, #48]	@ (80114e4 <HAL_PCD_MspInit+0xe0>)
 80114b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80114b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80114ba:	4b0a      	ldr	r3, [pc, #40]	@ (80114e4 <HAL_PCD_MspInit+0xe0>)
 80114bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80114c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114c4:	60bb      	str	r3, [r7, #8]
 80114c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80114c8:	2200      	movs	r2, #0
 80114ca:	2100      	movs	r1, #0
 80114cc:	2065      	movs	r0, #101	@ 0x65
 80114ce:	f7f0 fb78 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80114d2:	2065      	movs	r0, #101	@ 0x65
 80114d4:	f7f0 fb8f 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80114d8:	bf00      	nop
 80114da:	37e8      	adds	r7, #232	@ 0xe8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	40080000 	.word	0x40080000
 80114e4:	58024400 	.word	0x58024400
 80114e8:	58020000 	.word	0x58020000

080114ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011500:	4619      	mov	r1, r3
 8011502:	4610      	mov	r0, r2
 8011504:	f7fe faf7 	bl	800faf6 <USBD_LL_SetupStage>
}
 8011508:	bf00      	nop
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	460b      	mov	r3, r1
 801151a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011522:	78fa      	ldrb	r2, [r7, #3]
 8011524:	6879      	ldr	r1, [r7, #4]
 8011526:	4613      	mov	r3, r2
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	4413      	add	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	440b      	add	r3, r1
 8011530:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	78fb      	ldrb	r3, [r7, #3]
 8011538:	4619      	mov	r1, r3
 801153a:	f7fe fb31 	bl	800fba0 <USBD_LL_DataOutStage>
}
 801153e:	bf00      	nop
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}

08011546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011546:	b580      	push	{r7, lr}
 8011548:	b082      	sub	sp, #8
 801154a:	af00      	add	r7, sp, #0
 801154c:	6078      	str	r0, [r7, #4]
 801154e:	460b      	mov	r3, r1
 8011550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011558:	78fa      	ldrb	r2, [r7, #3]
 801155a:	6879      	ldr	r1, [r7, #4]
 801155c:	4613      	mov	r3, r2
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	4413      	add	r3, r2
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	440b      	add	r3, r1
 8011566:	3320      	adds	r3, #32
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	78fb      	ldrb	r3, [r7, #3]
 801156c:	4619      	mov	r1, r3
 801156e:	f7fe fbca 	bl	800fd06 <USBD_LL_DataInStage>
}
 8011572:	bf00      	nop
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}

0801157a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801157a:	b580      	push	{r7, lr}
 801157c:	b082      	sub	sp, #8
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011588:	4618      	mov	r0, r3
 801158a:	f7fe fd04 	bl	800ff96 <USBD_LL_SOF>
}
 801158e:	bf00      	nop
 8011590:	3708      	adds	r7, #8
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b084      	sub	sp, #16
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801159e:	2301      	movs	r3, #1
 80115a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	79db      	ldrb	r3, [r3, #7]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d102      	bne.n	80115b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80115aa:	2300      	movs	r3, #0
 80115ac:	73fb      	strb	r3, [r7, #15]
 80115ae:	e008      	b.n	80115c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	79db      	ldrb	r3, [r3, #7]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d102      	bne.n	80115be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80115b8:	2301      	movs	r3, #1
 80115ba:	73fb      	strb	r3, [r7, #15]
 80115bc:	e001      	b.n	80115c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80115be:	f7ef fd47 	bl	8001050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80115c8:	7bfa      	ldrb	r2, [r7, #15]
 80115ca:	4611      	mov	r1, r2
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fe fc9e 	bl	800ff0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fe fc46 	bl	800fe6a <USBD_LL_Reset>
}
 80115de:	bf00      	nop
 80115e0:	3710      	adds	r7, #16
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
	...

080115e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fe fc99 	bl	800ff2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	6812      	ldr	r2, [r2, #0]
 801160a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801160e:	f043 0301 	orr.w	r3, r3, #1
 8011612:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	7adb      	ldrb	r3, [r3, #11]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d005      	beq.n	8011628 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801161c:	4b04      	ldr	r3, [pc, #16]	@ (8011630 <HAL_PCD_SuspendCallback+0x48>)
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	4a03      	ldr	r2, [pc, #12]	@ (8011630 <HAL_PCD_SuspendCallback+0x48>)
 8011622:	f043 0306 	orr.w	r3, r3, #6
 8011626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011628:	bf00      	nop
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	e000ed00 	.word	0xe000ed00

08011634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011642:	4618      	mov	r0, r3
 8011644:	f7fe fc8f 	bl	800ff66 <USBD_LL_Resume>
}
 8011648:	bf00      	nop
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	460b      	mov	r3, r1
 801165a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011662:	78fa      	ldrb	r2, [r7, #3]
 8011664:	4611      	mov	r1, r2
 8011666:	4618      	mov	r0, r3
 8011668:	f7fe fce7 	bl	801003a <USBD_LL_IsoOUTIncomplete>
}
 801166c:	bf00      	nop
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	460b      	mov	r3, r1
 801167e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011686:	78fa      	ldrb	r2, [r7, #3]
 8011688:	4611      	mov	r1, r2
 801168a:	4618      	mov	r0, r3
 801168c:	f7fe fca3 	bl	800ffd6 <USBD_LL_IsoINIncomplete>
}
 8011690:	bf00      	nop
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fe fcf9 	bl	801009e <USBD_LL_DevConnected>
}
 80116ac:	bf00      	nop
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fe fcf6 	bl	80100b4 <USBD_LL_DevDisconnected>
}
 80116c8:	bf00      	nop
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d13e      	bne.n	801175e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80116e0:	4a21      	ldr	r2, [pc, #132]	@ (8011768 <USBD_LL_Init+0x98>)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4a1f      	ldr	r2, [pc, #124]	@ (8011768 <USBD_LL_Init+0x98>)
 80116ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80116f0:	4b1d      	ldr	r3, [pc, #116]	@ (8011768 <USBD_LL_Init+0x98>)
 80116f2:	4a1e      	ldr	r2, [pc, #120]	@ (801176c <USBD_LL_Init+0x9c>)
 80116f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80116f6:	4b1c      	ldr	r3, [pc, #112]	@ (8011768 <USBD_LL_Init+0x98>)
 80116f8:	2209      	movs	r2, #9
 80116fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80116fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011768 <USBD_LL_Init+0x98>)
 80116fe:	2202      	movs	r2, #2
 8011700:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011702:	4b19      	ldr	r3, [pc, #100]	@ (8011768 <USBD_LL_Init+0x98>)
 8011704:	2200      	movs	r2, #0
 8011706:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011708:	4b17      	ldr	r3, [pc, #92]	@ (8011768 <USBD_LL_Init+0x98>)
 801170a:	2202      	movs	r2, #2
 801170c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801170e:	4b16      	ldr	r3, [pc, #88]	@ (8011768 <USBD_LL_Init+0x98>)
 8011710:	2200      	movs	r2, #0
 8011712:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011714:	4b14      	ldr	r3, [pc, #80]	@ (8011768 <USBD_LL_Init+0x98>)
 8011716:	2200      	movs	r2, #0
 8011718:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801171a:	4b13      	ldr	r3, [pc, #76]	@ (8011768 <USBD_LL_Init+0x98>)
 801171c:	2200      	movs	r2, #0
 801171e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011720:	4b11      	ldr	r3, [pc, #68]	@ (8011768 <USBD_LL_Init+0x98>)
 8011722:	2200      	movs	r2, #0
 8011724:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011726:	4b10      	ldr	r3, [pc, #64]	@ (8011768 <USBD_LL_Init+0x98>)
 8011728:	2200      	movs	r2, #0
 801172a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801172c:	4b0e      	ldr	r3, [pc, #56]	@ (8011768 <USBD_LL_Init+0x98>)
 801172e:	2200      	movs	r2, #0
 8011730:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011732:	480d      	ldr	r0, [pc, #52]	@ (8011768 <USBD_LL_Init+0x98>)
 8011734:	f7f5 ff5d 	bl	80075f2 <HAL_PCD_Init>
 8011738:	4603      	mov	r3, r0
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801173e:	f7ef fc87 	bl	8001050 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011742:	2180      	movs	r1, #128	@ 0x80
 8011744:	4808      	ldr	r0, [pc, #32]	@ (8011768 <USBD_LL_Init+0x98>)
 8011746:	f7f7 f9b4 	bl	8008ab2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801174a:	2240      	movs	r2, #64	@ 0x40
 801174c:	2100      	movs	r1, #0
 801174e:	4806      	ldr	r0, [pc, #24]	@ (8011768 <USBD_LL_Init+0x98>)
 8011750:	f7f7 f968 	bl	8008a24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011754:	2280      	movs	r2, #128	@ 0x80
 8011756:	2101      	movs	r1, #1
 8011758:	4803      	ldr	r0, [pc, #12]	@ (8011768 <USBD_LL_Init+0x98>)
 801175a:	f7f7 f963 	bl	8008a24 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801175e:	2300      	movs	r3, #0
}
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	24001854 	.word	0x24001854
 801176c:	40080000 	.word	0x40080000

08011770 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011778:	2300      	movs	r3, #0
 801177a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801177c:	2300      	movs	r3, #0
 801177e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011786:	4618      	mov	r0, r3
 8011788:	f7f6 f83f 	bl	800780a <HAL_PCD_Start>
 801178c:	4603      	mov	r3, r0
 801178e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011790:	7bfb      	ldrb	r3, [r7, #15]
 8011792:	4618      	mov	r0, r3
 8011794:	f000 f942 	bl	8011a1c <USBD_Get_USB_Status>
 8011798:	4603      	mov	r3, r0
 801179a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801179c:	7bbb      	ldrb	r3, [r7, #14]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3710      	adds	r7, #16
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b084      	sub	sp, #16
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
 80117ae:	4608      	mov	r0, r1
 80117b0:	4611      	mov	r1, r2
 80117b2:	461a      	mov	r2, r3
 80117b4:	4603      	mov	r3, r0
 80117b6:	70fb      	strb	r3, [r7, #3]
 80117b8:	460b      	mov	r3, r1
 80117ba:	70bb      	strb	r3, [r7, #2]
 80117bc:	4613      	mov	r3, r2
 80117be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117c0:	2300      	movs	r3, #0
 80117c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117c4:	2300      	movs	r3, #0
 80117c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80117ce:	78bb      	ldrb	r3, [r7, #2]
 80117d0:	883a      	ldrh	r2, [r7, #0]
 80117d2:	78f9      	ldrb	r1, [r7, #3]
 80117d4:	f7f6 fd40 	bl	8008258 <HAL_PCD_EP_Open>
 80117d8:	4603      	mov	r3, r0
 80117da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117dc:	7bfb      	ldrb	r3, [r7, #15]
 80117de:	4618      	mov	r0, r3
 80117e0:	f000 f91c 	bl	8011a1c <USBD_Get_USB_Status>
 80117e4:	4603      	mov	r3, r0
 80117e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b084      	sub	sp, #16
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	460b      	mov	r3, r1
 80117fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117fe:	2300      	movs	r3, #0
 8011800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011802:	2300      	movs	r3, #0
 8011804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801180c:	78fa      	ldrb	r2, [r7, #3]
 801180e:	4611      	mov	r1, r2
 8011810:	4618      	mov	r0, r3
 8011812:	f7f6 fd8b 	bl	800832c <HAL_PCD_EP_Close>
 8011816:	4603      	mov	r3, r0
 8011818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801181a:	7bfb      	ldrb	r3, [r7, #15]
 801181c:	4618      	mov	r0, r3
 801181e:	f000 f8fd 	bl	8011a1c <USBD_Get_USB_Status>
 8011822:	4603      	mov	r3, r0
 8011824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011826:	7bbb      	ldrb	r3, [r7, #14]
}
 8011828:	4618      	mov	r0, r3
 801182a:	3710      	adds	r7, #16
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	460b      	mov	r3, r1
 801183a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801183c:	2300      	movs	r3, #0
 801183e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011840:	2300      	movs	r3, #0
 8011842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801184a:	78fa      	ldrb	r2, [r7, #3]
 801184c:	4611      	mov	r1, r2
 801184e:	4618      	mov	r0, r3
 8011850:	f7f6 fe43 	bl	80084da <HAL_PCD_EP_SetStall>
 8011854:	4603      	mov	r3, r0
 8011856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011858:	7bfb      	ldrb	r3, [r7, #15]
 801185a:	4618      	mov	r0, r3
 801185c:	f000 f8de 	bl	8011a1c <USBD_Get_USB_Status>
 8011860:	4603      	mov	r3, r0
 8011862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011864:	7bbb      	ldrb	r3, [r7, #14]
}
 8011866:	4618      	mov	r0, r3
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b084      	sub	sp, #16
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
 8011876:	460b      	mov	r3, r1
 8011878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801187a:	2300      	movs	r3, #0
 801187c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801187e:	2300      	movs	r3, #0
 8011880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011888:	78fa      	ldrb	r2, [r7, #3]
 801188a:	4611      	mov	r1, r2
 801188c:	4618      	mov	r0, r3
 801188e:	f7f6 fe87 	bl	80085a0 <HAL_PCD_EP_ClrStall>
 8011892:	4603      	mov	r3, r0
 8011894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	4618      	mov	r0, r3
 801189a:	f000 f8bf 	bl	8011a1c <USBD_Get_USB_Status>
 801189e:	4603      	mov	r3, r0
 80118a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b085      	sub	sp, #20
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	460b      	mov	r3, r1
 80118b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80118be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80118c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	da0b      	bge.n	80118e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80118c8:	78fb      	ldrb	r3, [r7, #3]
 80118ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118ce:	68f9      	ldr	r1, [r7, #12]
 80118d0:	4613      	mov	r3, r2
 80118d2:	00db      	lsls	r3, r3, #3
 80118d4:	4413      	add	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	440b      	add	r3, r1
 80118da:	3316      	adds	r3, #22
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	e00b      	b.n	80118f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80118e0:	78fb      	ldrb	r3, [r7, #3]
 80118e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118e6:	68f9      	ldr	r1, [r7, #12]
 80118e8:	4613      	mov	r3, r2
 80118ea:	00db      	lsls	r3, r3, #3
 80118ec:	4413      	add	r3, r2
 80118ee:	009b      	lsls	r3, r3, #2
 80118f0:	440b      	add	r3, r1
 80118f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80118f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3714      	adds	r7, #20
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011910:	2300      	movs	r3, #0
 8011912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011914:	2300      	movs	r3, #0
 8011916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801191e:	78fa      	ldrb	r2, [r7, #3]
 8011920:	4611      	mov	r1, r2
 8011922:	4618      	mov	r0, r3
 8011924:	f7f6 fc74 	bl	8008210 <HAL_PCD_SetAddress>
 8011928:	4603      	mov	r3, r0
 801192a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801192c:	7bfb      	ldrb	r3, [r7, #15]
 801192e:	4618      	mov	r0, r3
 8011930:	f000 f874 	bl	8011a1c <USBD_Get_USB_Status>
 8011934:	4603      	mov	r3, r0
 8011936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011938:	7bbb      	ldrb	r3, [r7, #14]
}
 801193a:	4618      	mov	r0, r3
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011942:	b580      	push	{r7, lr}
 8011944:	b086      	sub	sp, #24
 8011946:	af00      	add	r7, sp, #0
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	607a      	str	r2, [r7, #4]
 801194c:	603b      	str	r3, [r7, #0]
 801194e:	460b      	mov	r3, r1
 8011950:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011952:	2300      	movs	r3, #0
 8011954:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011956:	2300      	movs	r3, #0
 8011958:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011960:	7af9      	ldrb	r1, [r7, #11]
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	f7f6 fd7e 	bl	8008466 <HAL_PCD_EP_Transmit>
 801196a:	4603      	mov	r3, r0
 801196c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801196e:	7dfb      	ldrb	r3, [r7, #23]
 8011970:	4618      	mov	r0, r3
 8011972:	f000 f853 	bl	8011a1c <USBD_Get_USB_Status>
 8011976:	4603      	mov	r3, r0
 8011978:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801197a:	7dbb      	ldrb	r3, [r7, #22]
}
 801197c:	4618      	mov	r0, r3
 801197e:	3718      	adds	r7, #24
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b086      	sub	sp, #24
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	607a      	str	r2, [r7, #4]
 801198e:	603b      	str	r3, [r7, #0]
 8011990:	460b      	mov	r3, r1
 8011992:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011994:	2300      	movs	r3, #0
 8011996:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011998:	2300      	movs	r3, #0
 801199a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80119a2:	7af9      	ldrb	r1, [r7, #11]
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	f7f6 fd0a 	bl	80083c0 <HAL_PCD_EP_Receive>
 80119ac:	4603      	mov	r3, r0
 80119ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119b0:	7dfb      	ldrb	r3, [r7, #23]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f000 f832 	bl	8011a1c <USBD_Get_USB_Status>
 80119b8:	4603      	mov	r3, r0
 80119ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80119bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}

080119c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b082      	sub	sp, #8
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
 80119ce:	460b      	mov	r3, r1
 80119d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80119d8:	78fa      	ldrb	r2, [r7, #3]
 80119da:	4611      	mov	r1, r2
 80119dc:	4618      	mov	r0, r3
 80119de:	f7f6 fd2a 	bl	8008436 <HAL_PCD_EP_GetRxCount>
 80119e2:	4603      	mov	r3, r0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3708      	adds	r7, #8
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80119f4:	4b03      	ldr	r3, [pc, #12]	@ (8011a04 <USBD_static_malloc+0x18>)
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop
 8011a04:	24001d38 	.word	0x24001d38

08011a08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011a10:	bf00      	nop
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b085      	sub	sp, #20
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	4603      	mov	r3, r0
 8011a24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a26:	2300      	movs	r3, #0
 8011a28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011a2a:	79fb      	ldrb	r3, [r7, #7]
 8011a2c:	2b03      	cmp	r3, #3
 8011a2e:	d817      	bhi.n	8011a60 <USBD_Get_USB_Status+0x44>
 8011a30:	a201      	add	r2, pc, #4	@ (adr r2, 8011a38 <USBD_Get_USB_Status+0x1c>)
 8011a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a36:	bf00      	nop
 8011a38:	08011a49 	.word	0x08011a49
 8011a3c:	08011a4f 	.word	0x08011a4f
 8011a40:	08011a55 	.word	0x08011a55
 8011a44:	08011a5b 	.word	0x08011a5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a4c:	e00b      	b.n	8011a66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a4e:	2303      	movs	r3, #3
 8011a50:	73fb      	strb	r3, [r7, #15]
    break;
 8011a52:	e008      	b.n	8011a66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a54:	2301      	movs	r3, #1
 8011a56:	73fb      	strb	r3, [r7, #15]
    break;
 8011a58:	e005      	b.n	8011a66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a5a:	2303      	movs	r3, #3
 8011a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a5e:	e002      	b.n	8011a66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011a60:	2303      	movs	r3, #3
 8011a62:	73fb      	strb	r3, [r7, #15]
    break;
 8011a64:	bf00      	nop
  }
  return usb_status;
 8011a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3714      	adds	r7, #20
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <siprintf>:
 8011a74:	b40e      	push	{r1, r2, r3}
 8011a76:	b510      	push	{r4, lr}
 8011a78:	b09d      	sub	sp, #116	@ 0x74
 8011a7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011a7c:	9002      	str	r0, [sp, #8]
 8011a7e:	9006      	str	r0, [sp, #24]
 8011a80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011a84:	480a      	ldr	r0, [pc, #40]	@ (8011ab0 <siprintf+0x3c>)
 8011a86:	9107      	str	r1, [sp, #28]
 8011a88:	9104      	str	r1, [sp, #16]
 8011a8a:	490a      	ldr	r1, [pc, #40]	@ (8011ab4 <siprintf+0x40>)
 8011a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a90:	9105      	str	r1, [sp, #20]
 8011a92:	2400      	movs	r4, #0
 8011a94:	a902      	add	r1, sp, #8
 8011a96:	6800      	ldr	r0, [r0, #0]
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011a9c:	f000 f994 	bl	8011dc8 <_svfiprintf_r>
 8011aa0:	9b02      	ldr	r3, [sp, #8]
 8011aa2:	701c      	strb	r4, [r3, #0]
 8011aa4:	b01d      	add	sp, #116	@ 0x74
 8011aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aaa:	b003      	add	sp, #12
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	24000104 	.word	0x24000104
 8011ab4:	ffff0208 	.word	0xffff0208

08011ab8 <memset>:
 8011ab8:	4402      	add	r2, r0
 8011aba:	4603      	mov	r3, r0
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d100      	bne.n	8011ac2 <memset+0xa>
 8011ac0:	4770      	bx	lr
 8011ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8011ac6:	e7f9      	b.n	8011abc <memset+0x4>

08011ac8 <__errno>:
 8011ac8:	4b01      	ldr	r3, [pc, #4]	@ (8011ad0 <__errno+0x8>)
 8011aca:	6818      	ldr	r0, [r3, #0]
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop
 8011ad0:	24000104 	.word	0x24000104

08011ad4 <__libc_init_array>:
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8011b0c <__libc_init_array+0x38>)
 8011ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8011b10 <__libc_init_array+0x3c>)
 8011ada:	1b64      	subs	r4, r4, r5
 8011adc:	10a4      	asrs	r4, r4, #2
 8011ade:	2600      	movs	r6, #0
 8011ae0:	42a6      	cmp	r6, r4
 8011ae2:	d109      	bne.n	8011af8 <__libc_init_array+0x24>
 8011ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8011b14 <__libc_init_array+0x40>)
 8011ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8011b18 <__libc_init_array+0x44>)
 8011ae8:	f000 fc64 	bl	80123b4 <_init>
 8011aec:	1b64      	subs	r4, r4, r5
 8011aee:	10a4      	asrs	r4, r4, #2
 8011af0:	2600      	movs	r6, #0
 8011af2:	42a6      	cmp	r6, r4
 8011af4:	d105      	bne.n	8011b02 <__libc_init_array+0x2e>
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011afc:	4798      	blx	r3
 8011afe:	3601      	adds	r6, #1
 8011b00:	e7ee      	b.n	8011ae0 <__libc_init_array+0xc>
 8011b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b06:	4798      	blx	r3
 8011b08:	3601      	adds	r6, #1
 8011b0a:	e7f2      	b.n	8011af2 <__libc_init_array+0x1e>
 8011b0c:	080125f0 	.word	0x080125f0
 8011b10:	080125f0 	.word	0x080125f0
 8011b14:	080125f0 	.word	0x080125f0
 8011b18:	080125f4 	.word	0x080125f4

08011b1c <__retarget_lock_acquire_recursive>:
 8011b1c:	4770      	bx	lr

08011b1e <__retarget_lock_release_recursive>:
 8011b1e:	4770      	bx	lr

08011b20 <_free_r>:
 8011b20:	b538      	push	{r3, r4, r5, lr}
 8011b22:	4605      	mov	r5, r0
 8011b24:	2900      	cmp	r1, #0
 8011b26:	d041      	beq.n	8011bac <_free_r+0x8c>
 8011b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b2c:	1f0c      	subs	r4, r1, #4
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	bfb8      	it	lt
 8011b32:	18e4      	addlt	r4, r4, r3
 8011b34:	f000 f8e0 	bl	8011cf8 <__malloc_lock>
 8011b38:	4a1d      	ldr	r2, [pc, #116]	@ (8011bb0 <_free_r+0x90>)
 8011b3a:	6813      	ldr	r3, [r2, #0]
 8011b3c:	b933      	cbnz	r3, 8011b4c <_free_r+0x2c>
 8011b3e:	6063      	str	r3, [r4, #4]
 8011b40:	6014      	str	r4, [r2, #0]
 8011b42:	4628      	mov	r0, r5
 8011b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b48:	f000 b8dc 	b.w	8011d04 <__malloc_unlock>
 8011b4c:	42a3      	cmp	r3, r4
 8011b4e:	d908      	bls.n	8011b62 <_free_r+0x42>
 8011b50:	6820      	ldr	r0, [r4, #0]
 8011b52:	1821      	adds	r1, r4, r0
 8011b54:	428b      	cmp	r3, r1
 8011b56:	bf01      	itttt	eq
 8011b58:	6819      	ldreq	r1, [r3, #0]
 8011b5a:	685b      	ldreq	r3, [r3, #4]
 8011b5c:	1809      	addeq	r1, r1, r0
 8011b5e:	6021      	streq	r1, [r4, #0]
 8011b60:	e7ed      	b.n	8011b3e <_free_r+0x1e>
 8011b62:	461a      	mov	r2, r3
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	b10b      	cbz	r3, 8011b6c <_free_r+0x4c>
 8011b68:	42a3      	cmp	r3, r4
 8011b6a:	d9fa      	bls.n	8011b62 <_free_r+0x42>
 8011b6c:	6811      	ldr	r1, [r2, #0]
 8011b6e:	1850      	adds	r0, r2, r1
 8011b70:	42a0      	cmp	r0, r4
 8011b72:	d10b      	bne.n	8011b8c <_free_r+0x6c>
 8011b74:	6820      	ldr	r0, [r4, #0]
 8011b76:	4401      	add	r1, r0
 8011b78:	1850      	adds	r0, r2, r1
 8011b7a:	4283      	cmp	r3, r0
 8011b7c:	6011      	str	r1, [r2, #0]
 8011b7e:	d1e0      	bne.n	8011b42 <_free_r+0x22>
 8011b80:	6818      	ldr	r0, [r3, #0]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	6053      	str	r3, [r2, #4]
 8011b86:	4408      	add	r0, r1
 8011b88:	6010      	str	r0, [r2, #0]
 8011b8a:	e7da      	b.n	8011b42 <_free_r+0x22>
 8011b8c:	d902      	bls.n	8011b94 <_free_r+0x74>
 8011b8e:	230c      	movs	r3, #12
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	e7d6      	b.n	8011b42 <_free_r+0x22>
 8011b94:	6820      	ldr	r0, [r4, #0]
 8011b96:	1821      	adds	r1, r4, r0
 8011b98:	428b      	cmp	r3, r1
 8011b9a:	bf04      	itt	eq
 8011b9c:	6819      	ldreq	r1, [r3, #0]
 8011b9e:	685b      	ldreq	r3, [r3, #4]
 8011ba0:	6063      	str	r3, [r4, #4]
 8011ba2:	bf04      	itt	eq
 8011ba4:	1809      	addeq	r1, r1, r0
 8011ba6:	6021      	streq	r1, [r4, #0]
 8011ba8:	6054      	str	r4, [r2, #4]
 8011baa:	e7ca      	b.n	8011b42 <_free_r+0x22>
 8011bac:	bd38      	pop	{r3, r4, r5, pc}
 8011bae:	bf00      	nop
 8011bb0:	2400209c 	.word	0x2400209c

08011bb4 <sbrk_aligned>:
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8011bf4 <sbrk_aligned+0x40>)
 8011bb8:	460c      	mov	r4, r1
 8011bba:	6831      	ldr	r1, [r6, #0]
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	b911      	cbnz	r1, 8011bc6 <sbrk_aligned+0x12>
 8011bc0:	f000 fba4 	bl	801230c <_sbrk_r>
 8011bc4:	6030      	str	r0, [r6, #0]
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	4628      	mov	r0, r5
 8011bca:	f000 fb9f 	bl	801230c <_sbrk_r>
 8011bce:	1c43      	adds	r3, r0, #1
 8011bd0:	d103      	bne.n	8011bda <sbrk_aligned+0x26>
 8011bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	bd70      	pop	{r4, r5, r6, pc}
 8011bda:	1cc4      	adds	r4, r0, #3
 8011bdc:	f024 0403 	bic.w	r4, r4, #3
 8011be0:	42a0      	cmp	r0, r4
 8011be2:	d0f8      	beq.n	8011bd6 <sbrk_aligned+0x22>
 8011be4:	1a21      	subs	r1, r4, r0
 8011be6:	4628      	mov	r0, r5
 8011be8:	f000 fb90 	bl	801230c <_sbrk_r>
 8011bec:	3001      	adds	r0, #1
 8011bee:	d1f2      	bne.n	8011bd6 <sbrk_aligned+0x22>
 8011bf0:	e7ef      	b.n	8011bd2 <sbrk_aligned+0x1e>
 8011bf2:	bf00      	nop
 8011bf4:	24002098 	.word	0x24002098

08011bf8 <_malloc_r>:
 8011bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bfc:	1ccd      	adds	r5, r1, #3
 8011bfe:	f025 0503 	bic.w	r5, r5, #3
 8011c02:	3508      	adds	r5, #8
 8011c04:	2d0c      	cmp	r5, #12
 8011c06:	bf38      	it	cc
 8011c08:	250c      	movcc	r5, #12
 8011c0a:	2d00      	cmp	r5, #0
 8011c0c:	4606      	mov	r6, r0
 8011c0e:	db01      	blt.n	8011c14 <_malloc_r+0x1c>
 8011c10:	42a9      	cmp	r1, r5
 8011c12:	d904      	bls.n	8011c1e <_malloc_r+0x26>
 8011c14:	230c      	movs	r3, #12
 8011c16:	6033      	str	r3, [r6, #0]
 8011c18:	2000      	movs	r0, #0
 8011c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011cf4 <_malloc_r+0xfc>
 8011c22:	f000 f869 	bl	8011cf8 <__malloc_lock>
 8011c26:	f8d8 3000 	ldr.w	r3, [r8]
 8011c2a:	461c      	mov	r4, r3
 8011c2c:	bb44      	cbnz	r4, 8011c80 <_malloc_r+0x88>
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4630      	mov	r0, r6
 8011c32:	f7ff ffbf 	bl	8011bb4 <sbrk_aligned>
 8011c36:	1c43      	adds	r3, r0, #1
 8011c38:	4604      	mov	r4, r0
 8011c3a:	d158      	bne.n	8011cee <_malloc_r+0xf6>
 8011c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8011c40:	4627      	mov	r7, r4
 8011c42:	2f00      	cmp	r7, #0
 8011c44:	d143      	bne.n	8011cce <_malloc_r+0xd6>
 8011c46:	2c00      	cmp	r4, #0
 8011c48:	d04b      	beq.n	8011ce2 <_malloc_r+0xea>
 8011c4a:	6823      	ldr	r3, [r4, #0]
 8011c4c:	4639      	mov	r1, r7
 8011c4e:	4630      	mov	r0, r6
 8011c50:	eb04 0903 	add.w	r9, r4, r3
 8011c54:	f000 fb5a 	bl	801230c <_sbrk_r>
 8011c58:	4581      	cmp	r9, r0
 8011c5a:	d142      	bne.n	8011ce2 <_malloc_r+0xea>
 8011c5c:	6821      	ldr	r1, [r4, #0]
 8011c5e:	1a6d      	subs	r5, r5, r1
 8011c60:	4629      	mov	r1, r5
 8011c62:	4630      	mov	r0, r6
 8011c64:	f7ff ffa6 	bl	8011bb4 <sbrk_aligned>
 8011c68:	3001      	adds	r0, #1
 8011c6a:	d03a      	beq.n	8011ce2 <_malloc_r+0xea>
 8011c6c:	6823      	ldr	r3, [r4, #0]
 8011c6e:	442b      	add	r3, r5
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	f8d8 3000 	ldr.w	r3, [r8]
 8011c76:	685a      	ldr	r2, [r3, #4]
 8011c78:	bb62      	cbnz	r2, 8011cd4 <_malloc_r+0xdc>
 8011c7a:	f8c8 7000 	str.w	r7, [r8]
 8011c7e:	e00f      	b.n	8011ca0 <_malloc_r+0xa8>
 8011c80:	6822      	ldr	r2, [r4, #0]
 8011c82:	1b52      	subs	r2, r2, r5
 8011c84:	d420      	bmi.n	8011cc8 <_malloc_r+0xd0>
 8011c86:	2a0b      	cmp	r2, #11
 8011c88:	d917      	bls.n	8011cba <_malloc_r+0xc2>
 8011c8a:	1961      	adds	r1, r4, r5
 8011c8c:	42a3      	cmp	r3, r4
 8011c8e:	6025      	str	r5, [r4, #0]
 8011c90:	bf18      	it	ne
 8011c92:	6059      	strne	r1, [r3, #4]
 8011c94:	6863      	ldr	r3, [r4, #4]
 8011c96:	bf08      	it	eq
 8011c98:	f8c8 1000 	streq.w	r1, [r8]
 8011c9c:	5162      	str	r2, [r4, r5]
 8011c9e:	604b      	str	r3, [r1, #4]
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	f000 f82f 	bl	8011d04 <__malloc_unlock>
 8011ca6:	f104 000b 	add.w	r0, r4, #11
 8011caa:	1d23      	adds	r3, r4, #4
 8011cac:	f020 0007 	bic.w	r0, r0, #7
 8011cb0:	1ac2      	subs	r2, r0, r3
 8011cb2:	bf1c      	itt	ne
 8011cb4:	1a1b      	subne	r3, r3, r0
 8011cb6:	50a3      	strne	r3, [r4, r2]
 8011cb8:	e7af      	b.n	8011c1a <_malloc_r+0x22>
 8011cba:	6862      	ldr	r2, [r4, #4]
 8011cbc:	42a3      	cmp	r3, r4
 8011cbe:	bf0c      	ite	eq
 8011cc0:	f8c8 2000 	streq.w	r2, [r8]
 8011cc4:	605a      	strne	r2, [r3, #4]
 8011cc6:	e7eb      	b.n	8011ca0 <_malloc_r+0xa8>
 8011cc8:	4623      	mov	r3, r4
 8011cca:	6864      	ldr	r4, [r4, #4]
 8011ccc:	e7ae      	b.n	8011c2c <_malloc_r+0x34>
 8011cce:	463c      	mov	r4, r7
 8011cd0:	687f      	ldr	r7, [r7, #4]
 8011cd2:	e7b6      	b.n	8011c42 <_malloc_r+0x4a>
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	42a3      	cmp	r3, r4
 8011cda:	d1fb      	bne.n	8011cd4 <_malloc_r+0xdc>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	6053      	str	r3, [r2, #4]
 8011ce0:	e7de      	b.n	8011ca0 <_malloc_r+0xa8>
 8011ce2:	230c      	movs	r3, #12
 8011ce4:	6033      	str	r3, [r6, #0]
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f000 f80c 	bl	8011d04 <__malloc_unlock>
 8011cec:	e794      	b.n	8011c18 <_malloc_r+0x20>
 8011cee:	6005      	str	r5, [r0, #0]
 8011cf0:	e7d6      	b.n	8011ca0 <_malloc_r+0xa8>
 8011cf2:	bf00      	nop
 8011cf4:	2400209c 	.word	0x2400209c

08011cf8 <__malloc_lock>:
 8011cf8:	4801      	ldr	r0, [pc, #4]	@ (8011d00 <__malloc_lock+0x8>)
 8011cfa:	f7ff bf0f 	b.w	8011b1c <__retarget_lock_acquire_recursive>
 8011cfe:	bf00      	nop
 8011d00:	24002094 	.word	0x24002094

08011d04 <__malloc_unlock>:
 8011d04:	4801      	ldr	r0, [pc, #4]	@ (8011d0c <__malloc_unlock+0x8>)
 8011d06:	f7ff bf0a 	b.w	8011b1e <__retarget_lock_release_recursive>
 8011d0a:	bf00      	nop
 8011d0c:	24002094 	.word	0x24002094

08011d10 <__ssputs_r>:
 8011d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d14:	688e      	ldr	r6, [r1, #8]
 8011d16:	461f      	mov	r7, r3
 8011d18:	42be      	cmp	r6, r7
 8011d1a:	680b      	ldr	r3, [r1, #0]
 8011d1c:	4682      	mov	sl, r0
 8011d1e:	460c      	mov	r4, r1
 8011d20:	4690      	mov	r8, r2
 8011d22:	d82d      	bhi.n	8011d80 <__ssputs_r+0x70>
 8011d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011d2c:	d026      	beq.n	8011d7c <__ssputs_r+0x6c>
 8011d2e:	6965      	ldr	r5, [r4, #20]
 8011d30:	6909      	ldr	r1, [r1, #16]
 8011d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d36:	eba3 0901 	sub.w	r9, r3, r1
 8011d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d3e:	1c7b      	adds	r3, r7, #1
 8011d40:	444b      	add	r3, r9
 8011d42:	106d      	asrs	r5, r5, #1
 8011d44:	429d      	cmp	r5, r3
 8011d46:	bf38      	it	cc
 8011d48:	461d      	movcc	r5, r3
 8011d4a:	0553      	lsls	r3, r2, #21
 8011d4c:	d527      	bpl.n	8011d9e <__ssputs_r+0x8e>
 8011d4e:	4629      	mov	r1, r5
 8011d50:	f7ff ff52 	bl	8011bf8 <_malloc_r>
 8011d54:	4606      	mov	r6, r0
 8011d56:	b360      	cbz	r0, 8011db2 <__ssputs_r+0xa2>
 8011d58:	6921      	ldr	r1, [r4, #16]
 8011d5a:	464a      	mov	r2, r9
 8011d5c:	f000 fae6 	bl	801232c <memcpy>
 8011d60:	89a3      	ldrh	r3, [r4, #12]
 8011d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d6a:	81a3      	strh	r3, [r4, #12]
 8011d6c:	6126      	str	r6, [r4, #16]
 8011d6e:	6165      	str	r5, [r4, #20]
 8011d70:	444e      	add	r6, r9
 8011d72:	eba5 0509 	sub.w	r5, r5, r9
 8011d76:	6026      	str	r6, [r4, #0]
 8011d78:	60a5      	str	r5, [r4, #8]
 8011d7a:	463e      	mov	r6, r7
 8011d7c:	42be      	cmp	r6, r7
 8011d7e:	d900      	bls.n	8011d82 <__ssputs_r+0x72>
 8011d80:	463e      	mov	r6, r7
 8011d82:	6820      	ldr	r0, [r4, #0]
 8011d84:	4632      	mov	r2, r6
 8011d86:	4641      	mov	r1, r8
 8011d88:	f000 faa6 	bl	80122d8 <memmove>
 8011d8c:	68a3      	ldr	r3, [r4, #8]
 8011d8e:	1b9b      	subs	r3, r3, r6
 8011d90:	60a3      	str	r3, [r4, #8]
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	4433      	add	r3, r6
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	2000      	movs	r0, #0
 8011d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d9e:	462a      	mov	r2, r5
 8011da0:	f000 fad2 	bl	8012348 <_realloc_r>
 8011da4:	4606      	mov	r6, r0
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d1e0      	bne.n	8011d6c <__ssputs_r+0x5c>
 8011daa:	6921      	ldr	r1, [r4, #16]
 8011dac:	4650      	mov	r0, sl
 8011dae:	f7ff feb7 	bl	8011b20 <_free_r>
 8011db2:	230c      	movs	r3, #12
 8011db4:	f8ca 3000 	str.w	r3, [sl]
 8011db8:	89a3      	ldrh	r3, [r4, #12]
 8011dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dbe:	81a3      	strh	r3, [r4, #12]
 8011dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc4:	e7e9      	b.n	8011d9a <__ssputs_r+0x8a>
	...

08011dc8 <_svfiprintf_r>:
 8011dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	4698      	mov	r8, r3
 8011dce:	898b      	ldrh	r3, [r1, #12]
 8011dd0:	061b      	lsls	r3, r3, #24
 8011dd2:	b09d      	sub	sp, #116	@ 0x74
 8011dd4:	4607      	mov	r7, r0
 8011dd6:	460d      	mov	r5, r1
 8011dd8:	4614      	mov	r4, r2
 8011dda:	d510      	bpl.n	8011dfe <_svfiprintf_r+0x36>
 8011ddc:	690b      	ldr	r3, [r1, #16]
 8011dde:	b973      	cbnz	r3, 8011dfe <_svfiprintf_r+0x36>
 8011de0:	2140      	movs	r1, #64	@ 0x40
 8011de2:	f7ff ff09 	bl	8011bf8 <_malloc_r>
 8011de6:	6028      	str	r0, [r5, #0]
 8011de8:	6128      	str	r0, [r5, #16]
 8011dea:	b930      	cbnz	r0, 8011dfa <_svfiprintf_r+0x32>
 8011dec:	230c      	movs	r3, #12
 8011dee:	603b      	str	r3, [r7, #0]
 8011df0:	f04f 30ff 	mov.w	r0, #4294967295
 8011df4:	b01d      	add	sp, #116	@ 0x74
 8011df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	2340      	movs	r3, #64	@ 0x40
 8011dfc:	616b      	str	r3, [r5, #20]
 8011dfe:	2300      	movs	r3, #0
 8011e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e02:	2320      	movs	r3, #32
 8011e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e0c:	2330      	movs	r3, #48	@ 0x30
 8011e0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011fac <_svfiprintf_r+0x1e4>
 8011e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e16:	f04f 0901 	mov.w	r9, #1
 8011e1a:	4623      	mov	r3, r4
 8011e1c:	469a      	mov	sl, r3
 8011e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e22:	b10a      	cbz	r2, 8011e28 <_svfiprintf_r+0x60>
 8011e24:	2a25      	cmp	r2, #37	@ 0x25
 8011e26:	d1f9      	bne.n	8011e1c <_svfiprintf_r+0x54>
 8011e28:	ebba 0b04 	subs.w	fp, sl, r4
 8011e2c:	d00b      	beq.n	8011e46 <_svfiprintf_r+0x7e>
 8011e2e:	465b      	mov	r3, fp
 8011e30:	4622      	mov	r2, r4
 8011e32:	4629      	mov	r1, r5
 8011e34:	4638      	mov	r0, r7
 8011e36:	f7ff ff6b 	bl	8011d10 <__ssputs_r>
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	f000 80a7 	beq.w	8011f8e <_svfiprintf_r+0x1c6>
 8011e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e42:	445a      	add	r2, fp
 8011e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e46:	f89a 3000 	ldrb.w	r3, [sl]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f000 809f 	beq.w	8011f8e <_svfiprintf_r+0x1c6>
 8011e50:	2300      	movs	r3, #0
 8011e52:	f04f 32ff 	mov.w	r2, #4294967295
 8011e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e5a:	f10a 0a01 	add.w	sl, sl, #1
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	9307      	str	r3, [sp, #28]
 8011e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e68:	4654      	mov	r4, sl
 8011e6a:	2205      	movs	r2, #5
 8011e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e70:	484e      	ldr	r0, [pc, #312]	@ (8011fac <_svfiprintf_r+0x1e4>)
 8011e72:	f7ee fa3d 	bl	80002f0 <memchr>
 8011e76:	9a04      	ldr	r2, [sp, #16]
 8011e78:	b9d8      	cbnz	r0, 8011eb2 <_svfiprintf_r+0xea>
 8011e7a:	06d0      	lsls	r0, r2, #27
 8011e7c:	bf44      	itt	mi
 8011e7e:	2320      	movmi	r3, #32
 8011e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e84:	0711      	lsls	r1, r2, #28
 8011e86:	bf44      	itt	mi
 8011e88:	232b      	movmi	r3, #43	@ 0x2b
 8011e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e94:	d015      	beq.n	8011ec2 <_svfiprintf_r+0xfa>
 8011e96:	9a07      	ldr	r2, [sp, #28]
 8011e98:	4654      	mov	r4, sl
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	f04f 0c0a 	mov.w	ip, #10
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ea6:	3b30      	subs	r3, #48	@ 0x30
 8011ea8:	2b09      	cmp	r3, #9
 8011eaa:	d94b      	bls.n	8011f44 <_svfiprintf_r+0x17c>
 8011eac:	b1b0      	cbz	r0, 8011edc <_svfiprintf_r+0x114>
 8011eae:	9207      	str	r2, [sp, #28]
 8011eb0:	e014      	b.n	8011edc <_svfiprintf_r+0x114>
 8011eb2:	eba0 0308 	sub.w	r3, r0, r8
 8011eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	9304      	str	r3, [sp, #16]
 8011ebe:	46a2      	mov	sl, r4
 8011ec0:	e7d2      	b.n	8011e68 <_svfiprintf_r+0xa0>
 8011ec2:	9b03      	ldr	r3, [sp, #12]
 8011ec4:	1d19      	adds	r1, r3, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	9103      	str	r1, [sp, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bfbb      	ittet	lt
 8011ece:	425b      	neglt	r3, r3
 8011ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ed4:	9307      	strge	r3, [sp, #28]
 8011ed6:	9307      	strlt	r3, [sp, #28]
 8011ed8:	bfb8      	it	lt
 8011eda:	9204      	strlt	r2, [sp, #16]
 8011edc:	7823      	ldrb	r3, [r4, #0]
 8011ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ee0:	d10a      	bne.n	8011ef8 <_svfiprintf_r+0x130>
 8011ee2:	7863      	ldrb	r3, [r4, #1]
 8011ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ee6:	d132      	bne.n	8011f4e <_svfiprintf_r+0x186>
 8011ee8:	9b03      	ldr	r3, [sp, #12]
 8011eea:	1d1a      	adds	r2, r3, #4
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	9203      	str	r2, [sp, #12]
 8011ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ef4:	3402      	adds	r4, #2
 8011ef6:	9305      	str	r3, [sp, #20]
 8011ef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011fbc <_svfiprintf_r+0x1f4>
 8011efc:	7821      	ldrb	r1, [r4, #0]
 8011efe:	2203      	movs	r2, #3
 8011f00:	4650      	mov	r0, sl
 8011f02:	f7ee f9f5 	bl	80002f0 <memchr>
 8011f06:	b138      	cbz	r0, 8011f18 <_svfiprintf_r+0x150>
 8011f08:	9b04      	ldr	r3, [sp, #16]
 8011f0a:	eba0 000a 	sub.w	r0, r0, sl
 8011f0e:	2240      	movs	r2, #64	@ 0x40
 8011f10:	4082      	lsls	r2, r0
 8011f12:	4313      	orrs	r3, r2
 8011f14:	3401      	adds	r4, #1
 8011f16:	9304      	str	r3, [sp, #16]
 8011f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1c:	4824      	ldr	r0, [pc, #144]	@ (8011fb0 <_svfiprintf_r+0x1e8>)
 8011f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f22:	2206      	movs	r2, #6
 8011f24:	f7ee f9e4 	bl	80002f0 <memchr>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d036      	beq.n	8011f9a <_svfiprintf_r+0x1d2>
 8011f2c:	4b21      	ldr	r3, [pc, #132]	@ (8011fb4 <_svfiprintf_r+0x1ec>)
 8011f2e:	bb1b      	cbnz	r3, 8011f78 <_svfiprintf_r+0x1b0>
 8011f30:	9b03      	ldr	r3, [sp, #12]
 8011f32:	3307      	adds	r3, #7
 8011f34:	f023 0307 	bic.w	r3, r3, #7
 8011f38:	3308      	adds	r3, #8
 8011f3a:	9303      	str	r3, [sp, #12]
 8011f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f3e:	4433      	add	r3, r6
 8011f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f42:	e76a      	b.n	8011e1a <_svfiprintf_r+0x52>
 8011f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f48:	460c      	mov	r4, r1
 8011f4a:	2001      	movs	r0, #1
 8011f4c:	e7a8      	b.n	8011ea0 <_svfiprintf_r+0xd8>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	3401      	adds	r4, #1
 8011f52:	9305      	str	r3, [sp, #20]
 8011f54:	4619      	mov	r1, r3
 8011f56:	f04f 0c0a 	mov.w	ip, #10
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f60:	3a30      	subs	r2, #48	@ 0x30
 8011f62:	2a09      	cmp	r2, #9
 8011f64:	d903      	bls.n	8011f6e <_svfiprintf_r+0x1a6>
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d0c6      	beq.n	8011ef8 <_svfiprintf_r+0x130>
 8011f6a:	9105      	str	r1, [sp, #20]
 8011f6c:	e7c4      	b.n	8011ef8 <_svfiprintf_r+0x130>
 8011f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f72:	4604      	mov	r4, r0
 8011f74:	2301      	movs	r3, #1
 8011f76:	e7f0      	b.n	8011f5a <_svfiprintf_r+0x192>
 8011f78:	ab03      	add	r3, sp, #12
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	462a      	mov	r2, r5
 8011f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011fb8 <_svfiprintf_r+0x1f0>)
 8011f80:	a904      	add	r1, sp, #16
 8011f82:	4638      	mov	r0, r7
 8011f84:	f3af 8000 	nop.w
 8011f88:	1c42      	adds	r2, r0, #1
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	d1d6      	bne.n	8011f3c <_svfiprintf_r+0x174>
 8011f8e:	89ab      	ldrh	r3, [r5, #12]
 8011f90:	065b      	lsls	r3, r3, #25
 8011f92:	f53f af2d 	bmi.w	8011df0 <_svfiprintf_r+0x28>
 8011f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f98:	e72c      	b.n	8011df4 <_svfiprintf_r+0x2c>
 8011f9a:	ab03      	add	r3, sp, #12
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	4b05      	ldr	r3, [pc, #20]	@ (8011fb8 <_svfiprintf_r+0x1f0>)
 8011fa2:	a904      	add	r1, sp, #16
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	f000 f879 	bl	801209c <_printf_i>
 8011faa:	e7ed      	b.n	8011f88 <_svfiprintf_r+0x1c0>
 8011fac:	080125b4 	.word	0x080125b4
 8011fb0:	080125be 	.word	0x080125be
 8011fb4:	00000000 	.word	0x00000000
 8011fb8:	08011d11 	.word	0x08011d11
 8011fbc:	080125ba 	.word	0x080125ba

08011fc0 <_printf_common>:
 8011fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc4:	4616      	mov	r6, r2
 8011fc6:	4698      	mov	r8, r3
 8011fc8:	688a      	ldr	r2, [r1, #8]
 8011fca:	690b      	ldr	r3, [r1, #16]
 8011fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fd0:	4293      	cmp	r3, r2
 8011fd2:	bfb8      	it	lt
 8011fd4:	4613      	movlt	r3, r2
 8011fd6:	6033      	str	r3, [r6, #0]
 8011fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fdc:	4607      	mov	r7, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	b10a      	cbz	r2, 8011fe6 <_printf_common+0x26>
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	6033      	str	r3, [r6, #0]
 8011fe6:	6823      	ldr	r3, [r4, #0]
 8011fe8:	0699      	lsls	r1, r3, #26
 8011fea:	bf42      	ittt	mi
 8011fec:	6833      	ldrmi	r3, [r6, #0]
 8011fee:	3302      	addmi	r3, #2
 8011ff0:	6033      	strmi	r3, [r6, #0]
 8011ff2:	6825      	ldr	r5, [r4, #0]
 8011ff4:	f015 0506 	ands.w	r5, r5, #6
 8011ff8:	d106      	bne.n	8012008 <_printf_common+0x48>
 8011ffa:	f104 0a19 	add.w	sl, r4, #25
 8011ffe:	68e3      	ldr	r3, [r4, #12]
 8012000:	6832      	ldr	r2, [r6, #0]
 8012002:	1a9b      	subs	r3, r3, r2
 8012004:	42ab      	cmp	r3, r5
 8012006:	dc26      	bgt.n	8012056 <_printf_common+0x96>
 8012008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801200c:	6822      	ldr	r2, [r4, #0]
 801200e:	3b00      	subs	r3, #0
 8012010:	bf18      	it	ne
 8012012:	2301      	movne	r3, #1
 8012014:	0692      	lsls	r2, r2, #26
 8012016:	d42b      	bmi.n	8012070 <_printf_common+0xb0>
 8012018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801201c:	4641      	mov	r1, r8
 801201e:	4638      	mov	r0, r7
 8012020:	47c8      	blx	r9
 8012022:	3001      	adds	r0, #1
 8012024:	d01e      	beq.n	8012064 <_printf_common+0xa4>
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	6922      	ldr	r2, [r4, #16]
 801202a:	f003 0306 	and.w	r3, r3, #6
 801202e:	2b04      	cmp	r3, #4
 8012030:	bf02      	ittt	eq
 8012032:	68e5      	ldreq	r5, [r4, #12]
 8012034:	6833      	ldreq	r3, [r6, #0]
 8012036:	1aed      	subeq	r5, r5, r3
 8012038:	68a3      	ldr	r3, [r4, #8]
 801203a:	bf0c      	ite	eq
 801203c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012040:	2500      	movne	r5, #0
 8012042:	4293      	cmp	r3, r2
 8012044:	bfc4      	itt	gt
 8012046:	1a9b      	subgt	r3, r3, r2
 8012048:	18ed      	addgt	r5, r5, r3
 801204a:	2600      	movs	r6, #0
 801204c:	341a      	adds	r4, #26
 801204e:	42b5      	cmp	r5, r6
 8012050:	d11a      	bne.n	8012088 <_printf_common+0xc8>
 8012052:	2000      	movs	r0, #0
 8012054:	e008      	b.n	8012068 <_printf_common+0xa8>
 8012056:	2301      	movs	r3, #1
 8012058:	4652      	mov	r2, sl
 801205a:	4641      	mov	r1, r8
 801205c:	4638      	mov	r0, r7
 801205e:	47c8      	blx	r9
 8012060:	3001      	adds	r0, #1
 8012062:	d103      	bne.n	801206c <_printf_common+0xac>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206c:	3501      	adds	r5, #1
 801206e:	e7c6      	b.n	8011ffe <_printf_common+0x3e>
 8012070:	18e1      	adds	r1, r4, r3
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	2030      	movs	r0, #48	@ 0x30
 8012076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801207a:	4422      	add	r2, r4
 801207c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012084:	3302      	adds	r3, #2
 8012086:	e7c7      	b.n	8012018 <_printf_common+0x58>
 8012088:	2301      	movs	r3, #1
 801208a:	4622      	mov	r2, r4
 801208c:	4641      	mov	r1, r8
 801208e:	4638      	mov	r0, r7
 8012090:	47c8      	blx	r9
 8012092:	3001      	adds	r0, #1
 8012094:	d0e6      	beq.n	8012064 <_printf_common+0xa4>
 8012096:	3601      	adds	r6, #1
 8012098:	e7d9      	b.n	801204e <_printf_common+0x8e>
	...

0801209c <_printf_i>:
 801209c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120a0:	7e0f      	ldrb	r7, [r1, #24]
 80120a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120a4:	2f78      	cmp	r7, #120	@ 0x78
 80120a6:	4691      	mov	r9, r2
 80120a8:	4680      	mov	r8, r0
 80120aa:	460c      	mov	r4, r1
 80120ac:	469a      	mov	sl, r3
 80120ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120b2:	d807      	bhi.n	80120c4 <_printf_i+0x28>
 80120b4:	2f62      	cmp	r7, #98	@ 0x62
 80120b6:	d80a      	bhi.n	80120ce <_printf_i+0x32>
 80120b8:	2f00      	cmp	r7, #0
 80120ba:	f000 80d1 	beq.w	8012260 <_printf_i+0x1c4>
 80120be:	2f58      	cmp	r7, #88	@ 0x58
 80120c0:	f000 80b8 	beq.w	8012234 <_printf_i+0x198>
 80120c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120cc:	e03a      	b.n	8012144 <_printf_i+0xa8>
 80120ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120d2:	2b15      	cmp	r3, #21
 80120d4:	d8f6      	bhi.n	80120c4 <_printf_i+0x28>
 80120d6:	a101      	add	r1, pc, #4	@ (adr r1, 80120dc <_printf_i+0x40>)
 80120d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120dc:	08012135 	.word	0x08012135
 80120e0:	08012149 	.word	0x08012149
 80120e4:	080120c5 	.word	0x080120c5
 80120e8:	080120c5 	.word	0x080120c5
 80120ec:	080120c5 	.word	0x080120c5
 80120f0:	080120c5 	.word	0x080120c5
 80120f4:	08012149 	.word	0x08012149
 80120f8:	080120c5 	.word	0x080120c5
 80120fc:	080120c5 	.word	0x080120c5
 8012100:	080120c5 	.word	0x080120c5
 8012104:	080120c5 	.word	0x080120c5
 8012108:	08012247 	.word	0x08012247
 801210c:	08012173 	.word	0x08012173
 8012110:	08012201 	.word	0x08012201
 8012114:	080120c5 	.word	0x080120c5
 8012118:	080120c5 	.word	0x080120c5
 801211c:	08012269 	.word	0x08012269
 8012120:	080120c5 	.word	0x080120c5
 8012124:	08012173 	.word	0x08012173
 8012128:	080120c5 	.word	0x080120c5
 801212c:	080120c5 	.word	0x080120c5
 8012130:	08012209 	.word	0x08012209
 8012134:	6833      	ldr	r3, [r6, #0]
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	6032      	str	r2, [r6, #0]
 801213c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012144:	2301      	movs	r3, #1
 8012146:	e09c      	b.n	8012282 <_printf_i+0x1e6>
 8012148:	6833      	ldr	r3, [r6, #0]
 801214a:	6820      	ldr	r0, [r4, #0]
 801214c:	1d19      	adds	r1, r3, #4
 801214e:	6031      	str	r1, [r6, #0]
 8012150:	0606      	lsls	r6, r0, #24
 8012152:	d501      	bpl.n	8012158 <_printf_i+0xbc>
 8012154:	681d      	ldr	r5, [r3, #0]
 8012156:	e003      	b.n	8012160 <_printf_i+0xc4>
 8012158:	0645      	lsls	r5, r0, #25
 801215a:	d5fb      	bpl.n	8012154 <_printf_i+0xb8>
 801215c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012160:	2d00      	cmp	r5, #0
 8012162:	da03      	bge.n	801216c <_printf_i+0xd0>
 8012164:	232d      	movs	r3, #45	@ 0x2d
 8012166:	426d      	negs	r5, r5
 8012168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801216c:	4858      	ldr	r0, [pc, #352]	@ (80122d0 <_printf_i+0x234>)
 801216e:	230a      	movs	r3, #10
 8012170:	e011      	b.n	8012196 <_printf_i+0xfa>
 8012172:	6821      	ldr	r1, [r4, #0]
 8012174:	6833      	ldr	r3, [r6, #0]
 8012176:	0608      	lsls	r0, r1, #24
 8012178:	f853 5b04 	ldr.w	r5, [r3], #4
 801217c:	d402      	bmi.n	8012184 <_printf_i+0xe8>
 801217e:	0649      	lsls	r1, r1, #25
 8012180:	bf48      	it	mi
 8012182:	b2ad      	uxthmi	r5, r5
 8012184:	2f6f      	cmp	r7, #111	@ 0x6f
 8012186:	4852      	ldr	r0, [pc, #328]	@ (80122d0 <_printf_i+0x234>)
 8012188:	6033      	str	r3, [r6, #0]
 801218a:	bf14      	ite	ne
 801218c:	230a      	movne	r3, #10
 801218e:	2308      	moveq	r3, #8
 8012190:	2100      	movs	r1, #0
 8012192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012196:	6866      	ldr	r6, [r4, #4]
 8012198:	60a6      	str	r6, [r4, #8]
 801219a:	2e00      	cmp	r6, #0
 801219c:	db05      	blt.n	80121aa <_printf_i+0x10e>
 801219e:	6821      	ldr	r1, [r4, #0]
 80121a0:	432e      	orrs	r6, r5
 80121a2:	f021 0104 	bic.w	r1, r1, #4
 80121a6:	6021      	str	r1, [r4, #0]
 80121a8:	d04b      	beq.n	8012242 <_printf_i+0x1a6>
 80121aa:	4616      	mov	r6, r2
 80121ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80121b0:	fb03 5711 	mls	r7, r3, r1, r5
 80121b4:	5dc7      	ldrb	r7, [r0, r7]
 80121b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121ba:	462f      	mov	r7, r5
 80121bc:	42bb      	cmp	r3, r7
 80121be:	460d      	mov	r5, r1
 80121c0:	d9f4      	bls.n	80121ac <_printf_i+0x110>
 80121c2:	2b08      	cmp	r3, #8
 80121c4:	d10b      	bne.n	80121de <_printf_i+0x142>
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	07df      	lsls	r7, r3, #31
 80121ca:	d508      	bpl.n	80121de <_printf_i+0x142>
 80121cc:	6923      	ldr	r3, [r4, #16]
 80121ce:	6861      	ldr	r1, [r4, #4]
 80121d0:	4299      	cmp	r1, r3
 80121d2:	bfde      	ittt	le
 80121d4:	2330      	movle	r3, #48	@ 0x30
 80121d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121de:	1b92      	subs	r2, r2, r6
 80121e0:	6122      	str	r2, [r4, #16]
 80121e2:	f8cd a000 	str.w	sl, [sp]
 80121e6:	464b      	mov	r3, r9
 80121e8:	aa03      	add	r2, sp, #12
 80121ea:	4621      	mov	r1, r4
 80121ec:	4640      	mov	r0, r8
 80121ee:	f7ff fee7 	bl	8011fc0 <_printf_common>
 80121f2:	3001      	adds	r0, #1
 80121f4:	d14a      	bne.n	801228c <_printf_i+0x1f0>
 80121f6:	f04f 30ff 	mov.w	r0, #4294967295
 80121fa:	b004      	add	sp, #16
 80121fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012200:	6823      	ldr	r3, [r4, #0]
 8012202:	f043 0320 	orr.w	r3, r3, #32
 8012206:	6023      	str	r3, [r4, #0]
 8012208:	4832      	ldr	r0, [pc, #200]	@ (80122d4 <_printf_i+0x238>)
 801220a:	2778      	movs	r7, #120	@ 0x78
 801220c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012210:	6823      	ldr	r3, [r4, #0]
 8012212:	6831      	ldr	r1, [r6, #0]
 8012214:	061f      	lsls	r7, r3, #24
 8012216:	f851 5b04 	ldr.w	r5, [r1], #4
 801221a:	d402      	bmi.n	8012222 <_printf_i+0x186>
 801221c:	065f      	lsls	r7, r3, #25
 801221e:	bf48      	it	mi
 8012220:	b2ad      	uxthmi	r5, r5
 8012222:	6031      	str	r1, [r6, #0]
 8012224:	07d9      	lsls	r1, r3, #31
 8012226:	bf44      	itt	mi
 8012228:	f043 0320 	orrmi.w	r3, r3, #32
 801222c:	6023      	strmi	r3, [r4, #0]
 801222e:	b11d      	cbz	r5, 8012238 <_printf_i+0x19c>
 8012230:	2310      	movs	r3, #16
 8012232:	e7ad      	b.n	8012190 <_printf_i+0xf4>
 8012234:	4826      	ldr	r0, [pc, #152]	@ (80122d0 <_printf_i+0x234>)
 8012236:	e7e9      	b.n	801220c <_printf_i+0x170>
 8012238:	6823      	ldr	r3, [r4, #0]
 801223a:	f023 0320 	bic.w	r3, r3, #32
 801223e:	6023      	str	r3, [r4, #0]
 8012240:	e7f6      	b.n	8012230 <_printf_i+0x194>
 8012242:	4616      	mov	r6, r2
 8012244:	e7bd      	b.n	80121c2 <_printf_i+0x126>
 8012246:	6833      	ldr	r3, [r6, #0]
 8012248:	6825      	ldr	r5, [r4, #0]
 801224a:	6961      	ldr	r1, [r4, #20]
 801224c:	1d18      	adds	r0, r3, #4
 801224e:	6030      	str	r0, [r6, #0]
 8012250:	062e      	lsls	r6, r5, #24
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	d501      	bpl.n	801225a <_printf_i+0x1be>
 8012256:	6019      	str	r1, [r3, #0]
 8012258:	e002      	b.n	8012260 <_printf_i+0x1c4>
 801225a:	0668      	lsls	r0, r5, #25
 801225c:	d5fb      	bpl.n	8012256 <_printf_i+0x1ba>
 801225e:	8019      	strh	r1, [r3, #0]
 8012260:	2300      	movs	r3, #0
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	4616      	mov	r6, r2
 8012266:	e7bc      	b.n	80121e2 <_printf_i+0x146>
 8012268:	6833      	ldr	r3, [r6, #0]
 801226a:	1d1a      	adds	r2, r3, #4
 801226c:	6032      	str	r2, [r6, #0]
 801226e:	681e      	ldr	r6, [r3, #0]
 8012270:	6862      	ldr	r2, [r4, #4]
 8012272:	2100      	movs	r1, #0
 8012274:	4630      	mov	r0, r6
 8012276:	f7ee f83b 	bl	80002f0 <memchr>
 801227a:	b108      	cbz	r0, 8012280 <_printf_i+0x1e4>
 801227c:	1b80      	subs	r0, r0, r6
 801227e:	6060      	str	r0, [r4, #4]
 8012280:	6863      	ldr	r3, [r4, #4]
 8012282:	6123      	str	r3, [r4, #16]
 8012284:	2300      	movs	r3, #0
 8012286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801228a:	e7aa      	b.n	80121e2 <_printf_i+0x146>
 801228c:	6923      	ldr	r3, [r4, #16]
 801228e:	4632      	mov	r2, r6
 8012290:	4649      	mov	r1, r9
 8012292:	4640      	mov	r0, r8
 8012294:	47d0      	blx	sl
 8012296:	3001      	adds	r0, #1
 8012298:	d0ad      	beq.n	80121f6 <_printf_i+0x15a>
 801229a:	6823      	ldr	r3, [r4, #0]
 801229c:	079b      	lsls	r3, r3, #30
 801229e:	d413      	bmi.n	80122c8 <_printf_i+0x22c>
 80122a0:	68e0      	ldr	r0, [r4, #12]
 80122a2:	9b03      	ldr	r3, [sp, #12]
 80122a4:	4298      	cmp	r0, r3
 80122a6:	bfb8      	it	lt
 80122a8:	4618      	movlt	r0, r3
 80122aa:	e7a6      	b.n	80121fa <_printf_i+0x15e>
 80122ac:	2301      	movs	r3, #1
 80122ae:	4632      	mov	r2, r6
 80122b0:	4649      	mov	r1, r9
 80122b2:	4640      	mov	r0, r8
 80122b4:	47d0      	blx	sl
 80122b6:	3001      	adds	r0, #1
 80122b8:	d09d      	beq.n	80121f6 <_printf_i+0x15a>
 80122ba:	3501      	adds	r5, #1
 80122bc:	68e3      	ldr	r3, [r4, #12]
 80122be:	9903      	ldr	r1, [sp, #12]
 80122c0:	1a5b      	subs	r3, r3, r1
 80122c2:	42ab      	cmp	r3, r5
 80122c4:	dcf2      	bgt.n	80122ac <_printf_i+0x210>
 80122c6:	e7eb      	b.n	80122a0 <_printf_i+0x204>
 80122c8:	2500      	movs	r5, #0
 80122ca:	f104 0619 	add.w	r6, r4, #25
 80122ce:	e7f5      	b.n	80122bc <_printf_i+0x220>
 80122d0:	080125c5 	.word	0x080125c5
 80122d4:	080125d6 	.word	0x080125d6

080122d8 <memmove>:
 80122d8:	4288      	cmp	r0, r1
 80122da:	b510      	push	{r4, lr}
 80122dc:	eb01 0402 	add.w	r4, r1, r2
 80122e0:	d902      	bls.n	80122e8 <memmove+0x10>
 80122e2:	4284      	cmp	r4, r0
 80122e4:	4623      	mov	r3, r4
 80122e6:	d807      	bhi.n	80122f8 <memmove+0x20>
 80122e8:	1e43      	subs	r3, r0, #1
 80122ea:	42a1      	cmp	r1, r4
 80122ec:	d008      	beq.n	8012300 <memmove+0x28>
 80122ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122f6:	e7f8      	b.n	80122ea <memmove+0x12>
 80122f8:	4402      	add	r2, r0
 80122fa:	4601      	mov	r1, r0
 80122fc:	428a      	cmp	r2, r1
 80122fe:	d100      	bne.n	8012302 <memmove+0x2a>
 8012300:	bd10      	pop	{r4, pc}
 8012302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801230a:	e7f7      	b.n	80122fc <memmove+0x24>

0801230c <_sbrk_r>:
 801230c:	b538      	push	{r3, r4, r5, lr}
 801230e:	4d06      	ldr	r5, [pc, #24]	@ (8012328 <_sbrk_r+0x1c>)
 8012310:	2300      	movs	r3, #0
 8012312:	4604      	mov	r4, r0
 8012314:	4608      	mov	r0, r1
 8012316:	602b      	str	r3, [r5, #0]
 8012318:	f7ef f99c 	bl	8001654 <_sbrk>
 801231c:	1c43      	adds	r3, r0, #1
 801231e:	d102      	bne.n	8012326 <_sbrk_r+0x1a>
 8012320:	682b      	ldr	r3, [r5, #0]
 8012322:	b103      	cbz	r3, 8012326 <_sbrk_r+0x1a>
 8012324:	6023      	str	r3, [r4, #0]
 8012326:	bd38      	pop	{r3, r4, r5, pc}
 8012328:	24002090 	.word	0x24002090

0801232c <memcpy>:
 801232c:	440a      	add	r2, r1
 801232e:	4291      	cmp	r1, r2
 8012330:	f100 33ff 	add.w	r3, r0, #4294967295
 8012334:	d100      	bne.n	8012338 <memcpy+0xc>
 8012336:	4770      	bx	lr
 8012338:	b510      	push	{r4, lr}
 801233a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801233e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012342:	4291      	cmp	r1, r2
 8012344:	d1f9      	bne.n	801233a <memcpy+0xe>
 8012346:	bd10      	pop	{r4, pc}

08012348 <_realloc_r>:
 8012348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801234c:	4607      	mov	r7, r0
 801234e:	4614      	mov	r4, r2
 8012350:	460d      	mov	r5, r1
 8012352:	b921      	cbnz	r1, 801235e <_realloc_r+0x16>
 8012354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012358:	4611      	mov	r1, r2
 801235a:	f7ff bc4d 	b.w	8011bf8 <_malloc_r>
 801235e:	b92a      	cbnz	r2, 801236c <_realloc_r+0x24>
 8012360:	f7ff fbde 	bl	8011b20 <_free_r>
 8012364:	4625      	mov	r5, r4
 8012366:	4628      	mov	r0, r5
 8012368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236c:	f000 f81a 	bl	80123a4 <_malloc_usable_size_r>
 8012370:	4284      	cmp	r4, r0
 8012372:	4606      	mov	r6, r0
 8012374:	d802      	bhi.n	801237c <_realloc_r+0x34>
 8012376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801237a:	d8f4      	bhi.n	8012366 <_realloc_r+0x1e>
 801237c:	4621      	mov	r1, r4
 801237e:	4638      	mov	r0, r7
 8012380:	f7ff fc3a 	bl	8011bf8 <_malloc_r>
 8012384:	4680      	mov	r8, r0
 8012386:	b908      	cbnz	r0, 801238c <_realloc_r+0x44>
 8012388:	4645      	mov	r5, r8
 801238a:	e7ec      	b.n	8012366 <_realloc_r+0x1e>
 801238c:	42b4      	cmp	r4, r6
 801238e:	4622      	mov	r2, r4
 8012390:	4629      	mov	r1, r5
 8012392:	bf28      	it	cs
 8012394:	4632      	movcs	r2, r6
 8012396:	f7ff ffc9 	bl	801232c <memcpy>
 801239a:	4629      	mov	r1, r5
 801239c:	4638      	mov	r0, r7
 801239e:	f7ff fbbf 	bl	8011b20 <_free_r>
 80123a2:	e7f1      	b.n	8012388 <_realloc_r+0x40>

080123a4 <_malloc_usable_size_r>:
 80123a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123a8:	1f18      	subs	r0, r3, #4
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	bfbc      	itt	lt
 80123ae:	580b      	ldrlt	r3, [r1, r0]
 80123b0:	18c0      	addlt	r0, r0, r3
 80123b2:	4770      	bx	lr

080123b4 <_init>:
 80123b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b6:	bf00      	nop
 80123b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ba:	bc08      	pop	{r3}
 80123bc:	469e      	mov	lr, r3
 80123be:	4770      	bx	lr

080123c0 <_fini>:
 80123c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c2:	bf00      	nop
 80123c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123c6:	bc08      	pop	{r3}
 80123c8:	469e      	mov	lr, r3
 80123ca:	4770      	bx	lr
