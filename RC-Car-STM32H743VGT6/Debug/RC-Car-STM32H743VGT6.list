
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015bbc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08015e5c  08015e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080162cc  080162cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080162d4  080162d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080162d8  080162d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  080162dc  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000149d4  24000158  08016434  00018158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24014b2c  08016434  00018b2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c592  00000000  00000000  00018186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005287  00000000  00000000  00044718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002108  00000000  00000000  000499a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019cd  00000000  00000000  0004baa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cd46  00000000  00000000  0004d475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002faba  00000000  00000000  0008a1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170cd1  00000000  00000000  000b9c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022a946  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009350  00000000  00000000  0022a98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00233cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015e44 	.word	0x08015e44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08015e44 	.word	0x08015e44

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09e      	sub	sp, #120	@ 0x78
 80006c0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 ff67 	bl	8001594 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fe0d 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8d5 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fcd1 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 fc8f 	bl	8000ff4 <MX_DMA_Init>
  MX_MDMA_Init();
 80006d6:	f000 fcad 	bl	8001034 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fc3f 	bl	8000f5c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f014 f9c1 	bl	8014a64 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 f943 	bl	800096c <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 f979 	bl	80009dc <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fbeb 	bl	8000ec4 <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 faad 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fb81 	bl	8000df8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 fa1b 	bl	8000b30 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fb17 	bl	8000d2c <MX_TIM3_Init>
  MX_JPEG_Init();
 80006fe:	f000 f9ad 	bl	8000a5c <MX_JPEG_Init>
  MX_SPI2_Init();
 8000702:	f000 f9bf 	bl	8000a84 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_Delay(3000);

  // ------------------------------------------------------------ SETUP USB MESSAGING -- //
  uint8_t usb_msg[100] = {0};	// Reserve 100 bytes for USB Debug messages
 8000706:	463b      	mov	r3, r7
 8000708:	2264      	movs	r2, #100	@ 0x64
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f014 ff1b 	bl	8015548 <memset>

  // ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000712:	2100      	movs	r1, #0
 8000714:	484d      	ldr	r0, [pc, #308]	@ (800084c <main+0x190>)
 8000716:	f00e fcfd 	bl	800f114 <HAL_TIM_PWM_Start>
  // X 		  COM15 [6] = 1 (Data range [00-FF])
  // X 		  COM15 [5] = 0 (RGB 565)
  // X 		  COM15 [4] = 1 (RGB 565)
  uint8_t cam_regCache;

  cam_regCache = 0b00001000;
 800071a:	2308      	movs	r3, #8
 800071c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000720:	bf00      	nop
 8000722:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	200c      	movs	r0, #12
 800072c:	f000 fdd4 	bl	80012d8 <CAM_SetRegister>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f5      	bne.n	8000722 <main+0x66>

  cam_regCache = 0b00010000;
 8000736:	2310      	movs	r3, #16
 8000738:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 800073c:	bf00      	nop
 800073e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	2012      	movs	r0, #18
 8000748:	f000 fdc6 	bl	80012d8 <CAM_SetRegister>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f5      	bne.n	800073e <main+0x82>

  cam_regCache = 0b10000110;
 8000752:	2386      	movs	r3, #134	@ 0x86
 8000754:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 8000758:	bf00      	nop
 800075a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	2032      	movs	r0, #50	@ 0x32
 8000764:	f000 fdb8 	bl	80012d8 <CAM_SetRegister>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f5      	bne.n	800075a <main+0x9e>
  //while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

  // ------------------------------------------------------------ SETUP JPEG ENCODING -- //
  // Set the CONFIG
  JPEG_ConfTypeDef* jpeg_config;
  jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800076e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  //jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
  //jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
  jpeg_config->ImageWidth = CAM_WIDTH;
 8000774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000776:	f240 123b 	movw	r2, #315	@ 0x13b
 800077a:	60da      	str	r2, [r3, #12]
  jpeg_config->ImageHeight = CAM_HEIGHT;
 800077c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800077e:	2278      	movs	r2, #120	@ 0x78
 8000780:	609a      	str	r2, [r3, #8]
  jpeg_config->ImageQuality = JPEG_QUALITY;
 8000782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000784:	2214      	movs	r2, #20
 8000786:	611a      	str	r2, [r3, #16]
  HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 8000788:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800078a:	4831      	ldr	r0, [pc, #196]	@ (8000850 <main+0x194>)
 800078c:	f007 fcfc 	bl	8008188 <HAL_JPEG_ConfigEncoding>


	  // Only perform the following if the JPEG encoder is ready!

	  // TAKE A SNAPSHOT
	  if (jpeg_ready) {
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <main+0x198>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d054      	beq.n	8000842 <main+0x186>

		  // FIRST TRANSMIT IF PENDING, THIS PREVENTS DMA FROM CORRUPTING DATA MID TRANSFER
		  // rxFlag is defined in usbd_cdc_if - turns to 0x01 on RX MSG
		  if (usb_device_rxFlag == 0x01) {
 8000798:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <main+0x19c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d10d      	bne.n	80007bc <main+0x100>
			  //sprintf(usb_msg, "STARTING TX\r\n");
			  //CDC_Transmit_FS(usb_msg, strlen(usb_msg));
			  //HAL_Delay(100);
			  SendDataWithCorrection(jpeg_out, jpeg_size, 8);
 80007a0:	4b2e      	ldr	r3, [pc, #184]	@ (800085c <main+0x1a0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2208      	movs	r2, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	482d      	ldr	r0, [pc, #180]	@ (8000860 <main+0x1a4>)
 80007aa:	f014 f905 	bl	80149b8 <SendDataWithCorrection>
			  //SendDataWithCorrection(camera_mem, CAM_GRAYSIZE, 16);
			  HAL_Delay(2000);
 80007ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007b2:	f001 fe29 	bl	8002408 <HAL_Delay>
			  usb_device_rxFlag = 0x00;	// Reset flag
 80007b6:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <main+0x19c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_StatusTypeDef ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 80007bc:	4a29      	ldr	r2, [pc, #164]	@ (8000864 <main+0x1a8>)
 80007be:	f242 43ea 	movw	r3, #9450	@ 0x24ea
 80007c2:	2102      	movs	r1, #2
 80007c4:	4828      	ldr	r0, [pc, #160]	@ (8000868 <main+0x1ac>)
 80007c6:	f002 f851 	bl	800286c <HAL_DCMI_Start_DMA>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  if (ovStat) {
 80007d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d016      	beq.n	8000806 <main+0x14a>
			  while (1) {
				  sprintf(usb_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 80007d8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80007dc:	463b      	mov	r3, r7
 80007de:	4923      	ldr	r1, [pc, #140]	@ (800086c <main+0x1b0>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f014 fe8f 	bl	8015504 <siprintf>
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007e6:	463b      	mov	r3, r7
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd79 	bl	80002e0 <strlen>
 80007ee:	4602      	mov	r2, r0
 80007f0:	463b      	mov	r3, r7
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f014 fa05 	bl	8014c04 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80007fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fe:	f001 fe03 	bl	8002408 <HAL_Delay>
			  while (1) {
 8000802:	bf00      	nop
 8000804:	e7e8      	b.n	80007d8 <main+0x11c>
			  }
		  }

		  // TODO: Use a DCMI completion interrupt to stop the snapshot
		  // Delay for snapshot DMA to complete
		  HAL_Delay(500);
 8000806:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080a:	f001 fdfd 	bl	8002408 <HAL_Delay>
		  HAL_DCMI_Stop(&hdcmi);
 800080e:	4816      	ldr	r0, [pc, #88]	@ (8000868 <main+0x1ac>)
 8000810:	f002 f8ee 	bl	80029f0 <HAL_DCMI_Stop>

		  // We have a raw image buffer in camera_mem, grayscale format
		  // ENCODE JPEG

		  jpeg_ready = 0;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <main+0x198>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
		  jpeg_block = 0;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <main+0x1b4>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
		  jpeg_size = 0;
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <main+0x1a0>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]

		  GenerateJPEGMCUBlock();
 8000826:	f000 fdfd 	bl	8001424 <GenerateJPEGMCUBlock>
		  HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 800082a:	2380      	movs	r3, #128	@ 0x80
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <main+0x1a4>)
 8000830:	2240      	movs	r2, #64	@ 0x40
 8000832:	4910      	ldr	r1, [pc, #64]	@ (8000874 <main+0x1b8>)
 8000834:	4806      	ldr	r0, [pc, #24]	@ (8000850 <main+0x194>)
 8000836:	f007 fedf 	bl	80085f8 <HAL_JPEG_Encode_DMA>
		  HAL_Delay(500);
 800083a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083e:	f001 fde3 	bl	8002408 <HAL_Delay>
		  //CDC_Transmit_FS(usb_msg, strlen(usb_msg));
		  //HAL_Delay(1000);
	  }

	  // Delay for encode DMA to complete
	  HAL_Delay(500);
 8000842:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000846:	f001 fddf 	bl	8002408 <HAL_Delay>
	  if (jpeg_ready) {
 800084a:	e7a1      	b.n	8000790 <main+0xd4>
 800084c:	24000578 	.word	0x24000578
 8000850:	24000290 	.word	0x24000290
 8000854:	24000000 	.word	0x24000000
 8000858:	24000658 	.word	0x24000658
 800085c:	24012df0 	.word	0x24012df0
 8000860:	24009a48 	.word	0x24009a48
 8000864:	2400065c 	.word	0x2400065c
 8000868:	24000174 	.word	0x24000174
 800086c:	08015e5c 	.word	0x08015e5c
 8000870:	24009a44 	.word	0x24009a44
 8000874:	24009a04 	.word	0x24009a04

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	224c      	movs	r2, #76	@ 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f014 fe5e 	bl	8015548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f014 fe58 	bl	8015548 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000898:	2002      	movs	r0, #2
 800089a:	f00b fbf1 	bl	800c080 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <SystemClock_Config+0xec>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000964 <SystemClock_Config+0xec>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <SystemClock_Config+0xec>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <SystemClock_Config+0xf0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000968 <SystemClock_Config+0xf0>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <SystemClock_Config+0xf0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <SystemClock_Config+0xf0>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008f6:	2318      	movs	r3, #24
 80008f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008fe:	2306      	movs	r3, #6
 8000900:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000906:	230c      	movs	r3, #12
 8000908:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090a:	2300      	movs	r3, #0
 800090c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	4618      	mov	r0, r3
 8000918:	f00b fbfc 	bl	800c114 <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000922:	f000 fe63 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	233f      	movs	r3, #63	@ 0x3f
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000936:	2340      	movs	r3, #64	@ 0x40
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800093a:	2340      	movs	r3, #64	@ 0x40
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f00c f83b 	bl	800c9c8 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000958:	f000 fe48 	bl	80015ec <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3770      	adds	r7, #112	@ 0x70
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58000400 	.word	0x58000400
 8000968:	58024800 	.word	0x58024800

0800096c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_DCMI_Init+0x68>)
 8000972:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <MX_DCMI_Init+0x6c>)
 8000974:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_DCMI_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_DCMI_Init+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_DCMI_Init+0x68>)
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_DCMI_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_DCMI_Init+0x68>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_DCMI_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_DCMI_Init+0x68>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_DCMI_Init+0x68>)
 80009a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_DCMI_Init+0x68>)
 80009aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALTERNATE_2;
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_DCMI_Init+0x68>)
 80009b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_DCMI_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_DCMI_Init+0x68>)
 80009c0:	f001 feda 	bl	8002778 <HAL_DCMI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_DCMI_Init+0x62>
  {
    Error_Handler();
 80009ca:	f000 fe0f 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	24000174 	.word	0x24000174
 80009d8:	48020000 	.word	0x48020000

080009dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <MX_I2C2_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <MX_I2C2_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_I2C2_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <MX_I2C2_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_I2C2_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a18:	f005 fe68 	bl	80066ec <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f000 fde3 	bl	80015ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a2a:	f007 fa93 	bl	8007f54 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f000 fdda 	bl	80015ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_I2C2_Init+0x74>)
 8000a3c:	f007 fad5 	bl	8007fea <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fdd1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2400023c 	.word	0x2400023c
 8000a54:	40005800 	.word	0x40005800
 8000a58:	00c0eaff 	.word	0x00c0eaff

08000a5c <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_JPEG_Init+0x20>)
 8000a62:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <MX_JPEG_Init+0x24>)
 8000a64:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_JPEG_Init+0x20>)
 8000a68:	f007 fb0c 	bl	8008084 <HAL_JPEG_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000a72:	f000 fdbb 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	24000290 	.word	0x24000290
 8000a80:	52003000 	.word	0x52003000

08000a84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000a8a:	4a28      	ldr	r2, [pc, #160]	@ (8000b2c <MX_SPI2_Init+0xa8>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000a90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ab0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ad6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ada:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <MX_SPI2_Init+0xa4>)
 8000b14:	f00e f910 	bl	800ed38 <HAL_SPI_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 fd65 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	240003c0 	.word	0x240003c0
 8000b2c:	40003800 	.word	0x40003800

08000b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b096      	sub	sp, #88	@ 0x58
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	222c      	movs	r2, #44	@ 0x2c
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f014 fcf3 	bl	8015548 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b62:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b64:	4a38      	ldr	r2, [pc, #224]	@ (8000c48 <MX_TIM1_Init+0x118>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b68:	4b36      	ldr	r3, [pc, #216]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b35      	ldr	r3, [pc, #212]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000b74:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b76:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b82:	4b30      	ldr	r3, [pc, #192]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b8e:	482d      	ldr	r0, [pc, #180]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000b90:	f00e fa68 	bl	800f064 <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 fd27 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000baa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4824      	ldr	r0, [pc, #144]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000bb2:	f00f f9a7 	bl	800ff04 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bbc:	f000 fd16 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bdc:	220c      	movs	r2, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000be2:	f00e fcad 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000bec:	f000 fcfe 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000c26:	f00f f9fb 	bl	8010020 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000c30:	f000 fcdc 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c34:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <MX_TIM1_Init+0x114>)
 8000c36:	f001 f873 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8000c3a:	bf00      	nop
 8000c3c:	3758      	adds	r7, #88	@ 0x58
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000448 	.word	0x24000448
 8000c48:	40010000 	.word	0x40010000

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000c84:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c86:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c98:	4823      	ldr	r0, [pc, #140]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000c9a:	f00e f9e3 	bl	800f064 <HAL_TIM_PWM_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ca4:	f000 fca2 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481c      	ldr	r0, [pc, #112]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000cb8:	f00f f924 	bl	800ff04 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cc2:	f000 fc93 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4812      	ldr	r0, [pc, #72]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000cde:	f00e fc2f 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ce8:	f000 fc80 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2204      	movs	r2, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000cf4:	f00e fc24 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000cfe:	f000 fc75 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	2208      	movs	r2, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000d0a:	f00e fc19 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d14:	f000 fc6a 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d18:	4803      	ldr	r0, [pc, #12]	@ (8000d28 <MX_TIM2_Init+0xdc>)
 8000d1a:	f001 f801 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000494 	.word	0x24000494

08000d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d52:	4a28      	ldr	r2, [pc, #160]	@ (8000df4 <MX_TIM3_Init+0xc8>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d56:	4b26      	ldr	r3, [pc, #152]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b24      	ldr	r3, [pc, #144]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000d62:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d76:	481e      	ldr	r0, [pc, #120]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d78:	f00e f974 	bl	800f064 <HAL_TIM_PWM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d82:	f000 fc33 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000d96:	f00f f8b5 	bl	800ff04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000da0:	f000 fc24 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	@ 0x60
 8000da6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	2208      	movs	r2, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000dbc:	f00e fbc0 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000dc6:	f000 fc11 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	220c      	movs	r2, #12
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000dd2:	f00e fbb5 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ddc:	f000 fc06 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <MX_TIM3_Init+0xc4>)
 8000de2:	f000 ff9d 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	240004e0 	.word	0x240004e0
 8000df4:	40000400 	.word	0x40000400

08000df8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <MX_TIM4_Init+0xc8>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e42:	481e      	ldr	r0, [pc, #120]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e44:	f00e f90e 	bl	800f064 <HAL_TIM_PWM_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000e4e:	f000 fbcd 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4816      	ldr	r0, [pc, #88]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e62:	f00f f84f 	bl	800ff04 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e6c:	f000 fbbe 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e70:	2360      	movs	r3, #96	@ 0x60
 8000e72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	2208      	movs	r2, #8
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e88:	f00e fb5a 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e92:	f000 fbab 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4807      	ldr	r0, [pc, #28]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000e9e:	f00e fb4f 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000ea8:	f000 fba0 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eac:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <MX_TIM4_Init+0xc4>)
 8000eae:	f000 ff37 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2400052c 	.word	0x2400052c
 8000ec0:	40000800 	.word	0x40000800

08000ec4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000ede:	4a1e      	ldr	r2, [pc, #120]	@ (8000f58 <MX_TIM14_Init+0x94>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000f00:	4814      	ldr	r0, [pc, #80]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000f02:	f00e f858 	bl	800efb6 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000f0c:	f000 fb6e 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000f10:	4810      	ldr	r0, [pc, #64]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000f12:	f00e f8a7 	bl	800f064 <HAL_TIM_PWM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000f1c:	f000 fb66 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	@ 0x60
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000f24:	2303      	movs	r3, #3
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000f38:	f00e fb02 	bl	800f540 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000f42:	f000 fb53 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000f46:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <MX_TIM14_Init+0x90>)
 8000f48:	f000 feea 	bl	8001d20 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	24000578 	.word	0x24000578
 8000f58:	40002000 	.word	0x40002000

08000f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f62:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <MX_USART1_UART_Init+0x94>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa4:	4811      	ldr	r0, [pc, #68]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fa6:	f00f f8d7 	bl	8010158 <HAL_UART_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fb0:	f000 fb1c 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fb8:	f010 f8df 	bl	801117a <HAL_UARTEx_SetTxFifoThreshold>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fc2:	f000 fb13 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fca:	f010 f914 	bl	80111f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fd4:	f000 fb0a 	bl	80015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_USART1_UART_Init+0x90>)
 8000fda:	f010 f895 	bl	8011108 <HAL_UARTEx_DisableFifoMode>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fe4:	f000 fb02 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	240005c4 	.word	0x240005c4
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <MX_DMA_Init+0x3c>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001000:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <MX_DMA_Init+0x3c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_DMA_Init+0x3c>)
 800100c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	200b      	movs	r0, #11
 800101e:	f001 fafe 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001022:	200b      	movs	r0, #11
 8001024:	f001 fb15 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400

08001034 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <MX_MDMA_Init+0x3c>)
 800103c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001040:	4a0b      	ldr	r2, [pc, #44]	@ (8001070 <MX_MDMA_Init+0x3c>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_MDMA_Init+0x3c>)
 800104c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	207a      	movs	r0, #122	@ 0x7a
 800105e:	f001 fade 	bl	800261e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001062:	207a      	movs	r0, #122	@ 0x7a
 8001064:	f001 faf5 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4b52      	ldr	r3, [pc, #328]	@ (80011d4 <MX_GPIO_Init+0x160>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a50      	ldr	r2, [pc, #320]	@ (80011d4 <MX_GPIO_Init+0x160>)
 8001092:	f043 0310 	orr.w	r3, r3, #16
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b4e      	ldr	r3, [pc, #312]	@ (80011d4 <MX_GPIO_Init+0x160>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b8:	4b46      	ldr	r3, [pc, #280]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	4a41      	ldr	r2, [pc, #260]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	4a3a      	ldr	r2, [pc, #232]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <MX_GPIO_Init+0x160>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <MX_GPIO_Init+0x160>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	4a32      	ldr	r2, [pc, #200]	@ (80011d4 <MX_GPIO_Init+0x160>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001112:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <MX_GPIO_Init+0x160>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <MX_GPIO_Init+0x160>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001126:	4a2b      	ldr	r2, [pc, #172]	@ (80011d4 <MX_GPIO_Init+0x160>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <MX_GPIO_Init+0x160>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001144:	4824      	ldr	r0, [pc, #144]	@ (80011d8 <MX_GPIO_Init+0x164>)
 8001146:	f005 fab7 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2108      	movs	r1, #8
 800114e:	4823      	ldr	r0, [pc, #140]	@ (80011dc <MX_GPIO_Init+0x168>)
 8001150:	f005 fab2 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2101      	movs	r1, #1
 8001158:	4821      	ldr	r0, [pc, #132]	@ (80011e0 <MX_GPIO_Init+0x16c>)
 800115a:	f005 faad 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800115e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4818      	ldr	r0, [pc, #96]	@ (80011d8 <MX_GPIO_Init+0x164>)
 8001178:	f005 f8ee 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <MX_GPIO_Init+0x164>)
 8001190:	f005 f8e2 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001194:	2308      	movs	r3, #8
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	480c      	ldr	r0, [pc, #48]	@ (80011dc <MX_GPIO_Init+0x168>)
 80011ac:	f005 f8d4 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <MX_GPIO_Init+0x16c>)
 80011c8:	f005 f8c6 	bl	8006358 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011cc:	bf00      	nop
 80011ce:	3730      	adds	r7, #48	@ 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020800 	.word	0x58020800
 80011dc:	58020000 	.word	0x58020000
 80011e0:	58020c00 	.word	0x58020c00

080011e4 <CAM_GetRegister>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09e      	sub	sp, #120	@ 0x78
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2264      	movs	r2, #100	@ 0x64
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f014 f9a3 	bl	8015548 <memset>

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	2364      	movs	r3, #100	@ 0x64
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	2143      	movs	r1, #67	@ 0x43
 800120c:	482f      	ldr	r0, [pc, #188]	@ (80012cc <CAM_GetRegister+0xe8>)
 800120e:	f005 fb09 	bl	8006824 <HAL_I2C_Master_Transmit>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 8001218:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <CAM_GetRegister+0x7e>
		  if (haltOnError) {
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01a      	beq.n	800125c <CAM_GetRegister+0x78>
			  sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	461a      	mov	r2, r3
 800122a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800122e:	f107 0008 	add.w	r0, r7, #8
 8001232:	4927      	ldr	r1, [pc, #156]	@ (80012d0 <CAM_GetRegister+0xec>)
 8001234:	f014 f966 	bl	8015504 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f84f 	bl	80002e0 <strlen>
 8001242:	4602      	mov	r2, r0
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f013 fcda 	bl	8014c04 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001254:	f001 f8d8 	bl	8002408 <HAL_Delay>
			  while (1) {
 8001258:	bf00      	nop
 800125a:	e7ed      	b.n	8001238 <CAM_GetRegister+0x54>
			  }
		  }
		  return ov_result;
 800125c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001260:	e030      	b.n	80012c4 <CAM_GetRegister+0xe0>
	  }


	  ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001262:	2364      	movs	r3, #100	@ 0x64
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	2143      	movs	r1, #67	@ 0x43
 800126c:	4817      	ldr	r0, [pc, #92]	@ (80012cc <CAM_GetRegister+0xe8>)
 800126e:	f005 fbf1 	bl	8006a54 <HAL_I2C_Master_Receive>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	  if (ov_result) {
 8001278:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <CAM_GetRegister+0xde>
		  if (haltOnError) {
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01a      	beq.n	80012bc <CAM_GetRegister+0xd8>
			  sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	461a      	mov	r2, r3
 800128a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800128e:	f107 0008 	add.w	r0, r7, #8
 8001292:	4910      	ldr	r1, [pc, #64]	@ (80012d4 <CAM_GetRegister+0xf0>)
 8001294:	f014 f936 	bl	8015504 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f81f 	bl	80002e0 <strlen>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f013 fcaa 	bl	8014c04 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b4:	f001 f8a8 	bl	8002408 <HAL_Delay>
			  while (1) {
 80012b8:	bf00      	nop
 80012ba:	e7ed      	b.n	8001298 <CAM_GetRegister+0xb4>
			  }
		  }
		  return ov_result;
 80012bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80012c0:	e000      	b.n	80012c4 <CAM_GetRegister+0xe0>
	  }


	  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3770      	adds	r7, #112	@ 0x70
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2400023c 	.word	0x2400023c
 80012d0:	08015e7c 	.word	0x08015e7c
 80012d4:	08015eb8 	.word	0x08015eb8

080012d8 <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0a0      	sub	sp, #128	@ 0x80
 80012dc:	af02      	add	r7, sp, #8
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	460b      	mov	r3, r1
 80012e4:	71bb      	strb	r3, [r7, #6]
 80012e6:	4613      	mov	r3, r2
 80012e8:	717b      	strb	r3, [r7, #5]
	  HAL_StatusTypeDef ov_result;
	  uint8_t usb_msg[100] = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2264      	movs	r2, #100	@ 0x64
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f014 f928 	bl	8015548 <memset>

	  uint8_t reg_set[2] = {addr, data};
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	733b      	strb	r3, [r7, #12]
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	737b      	strb	r3, [r7, #13]

	  ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001300:	f107 020c 	add.w	r2, r7, #12
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2302      	movs	r3, #2
 800130a:	2142      	movs	r1, #66	@ 0x42
 800130c:	4841      	ldr	r0, [pc, #260]	@ (8001414 <CAM_SetRegister+0x13c>)
 800130e:	f005 fa89 	bl	8006824 <HAL_I2C_Master_Transmit>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 8001318:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01f      	beq.n	8001360 <CAM_SetRegister+0x88>
		  if (haltOnError) {
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d019      	beq.n	800135a <CAM_SetRegister+0x82>
			  sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800132c:	f107 0010 	add.w	r0, r7, #16
 8001330:	4939      	ldr	r1, [pc, #228]	@ (8001418 <CAM_SetRegister+0x140>)
 8001332:	f014 f8e7 	bl	8015504 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ffd0 	bl	80002e0 <strlen>
 8001340:	4602      	mov	r2, r0
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f013 fc5b 	bl	8014c04 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 800134e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001352:	f001 f859 	bl	8002408 <HAL_Delay>
			  while (1) {
 8001356:	bf00      	nop
 8001358:	e7ed      	b.n	8001336 <CAM_SetRegister+0x5e>
			  }
		  }
		  return ov_result;
 800135a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800135e:	e054      	b.n	800140a <CAM_SetRegister+0x132>
	  }

	  // Confirm write
	  uint8_t reg_get = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	72fb      	strb	r3, [r7, #11]
	  ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8001364:	f107 010b 	add.w	r1, r7, #11
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2201      	movs	r2, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff39 	bl	80011e4 <CAM_GetRegister>
 8001372:	4603      	mov	r3, r0
 8001374:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	  if (ov_result) {
 8001378:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800137c:	2b00      	cmp	r3, #0
 800137e:	d01f      	beq.n	80013c0 <CAM_SetRegister+0xe8>
		  if (haltOnError) {
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d019      	beq.n	80013ba <CAM_SetRegister+0xe2>
			  sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800138c:	f107 0010 	add.w	r0, r7, #16
 8001390:	4922      	ldr	r1, [pc, #136]	@ (800141c <CAM_SetRegister+0x144>)
 8001392:	f014 f8b7 	bl	8015504 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe ffa0 	bl	80002e0 <strlen>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f013 fc2b 	bl	8014c04 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80013ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b2:	f001 f829 	bl	8002408 <HAL_Delay>
			  while (1) {
 80013b6:	bf00      	nop
 80013b8:	e7ed      	b.n	8001396 <CAM_SetRegister+0xbe>
			  }
		  }
		  else {
			  return ov_result;
 80013ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80013be:	e024      	b.n	800140a <CAM_SetRegister+0x132>
		  }
	  }

	  if (reg_get != data) {
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	79ba      	ldrb	r2, [r7, #6]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d01f      	beq.n	8001408 <CAM_SetRegister+0x130>
		  // Error, bad write
		  if (haltOnError) {
 80013c8:	797b      	ldrb	r3, [r7, #5]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01a      	beq.n	8001404 <CAM_SetRegister+0x12c>
			  sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	7af9      	ldrb	r1, [r7, #11]
 80013d4:	f107 0010 	add.w	r0, r7, #16
 80013d8:	9100      	str	r1, [sp, #0]
 80013da:	4911      	ldr	r1, [pc, #68]	@ (8001420 <CAM_SetRegister+0x148>)
 80013dc:	f014 f892 	bl	8015504 <siprintf>
			  while (1) {
				  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe ff7b 	bl	80002e0 <strlen>
 80013ea:	4602      	mov	r2, r0
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f013 fc06 	bl	8014c04 <CDC_Transmit_FS>
				  HAL_Delay(1000);
 80013f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013fc:	f001 f804 	bl	8002408 <HAL_Delay>
			  while (1) {
 8001400:	bf00      	nop
 8001402:	e7ed      	b.n	80013e0 <CAM_SetRegister+0x108>
			  }
		  }
		  return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <CAM_SetRegister+0x132>
	  }

	  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3778      	adds	r7, #120	@ 0x78
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2400023c 	.word	0x2400023c
 8001418:	08015ef4 	.word	0x08015ef4
 800141c:	08015f30 	.word	0x08015f30
 8001420:	08015f6c 	.word	0x08015f6c

08001424 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
	if (jpeg_block >= 600) { return 1; }
 800142a:	4b2e      	ldr	r3, [pc, #184]	@ (80014e4 <GenerateJPEGMCUBlock+0xc0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001432:	d301      	bcc.n	8001438 <GenerateJPEGMCUBlock+0x14>
 8001434:	2301      	movs	r3, #1
 8001436:	e04e      	b.n	80014d6 <GenerateJPEGMCUBlock+0xb2>
	int xStart = (jpeg_block % 40) * 8;
 8001438:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <GenerateJPEGMCUBlock+0xc0>)
 800143a:	6819      	ldr	r1, [r3, #0]
 800143c:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <GenerateJPEGMCUBlock+0xc4>)
 800143e:	fba3 2301 	umull	r2, r3, r3, r1
 8001442:	095a      	lsrs	r2, r3, #5
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	1aca      	subs	r2, r1, r3
 800144e:	00d3      	lsls	r3, r2, #3
 8001450:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / 40) * 8;
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <GenerateJPEGMCUBlock+0xc0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <GenerateJPEGMCUBlock+0xc4>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	095b      	lsrs	r3, r3, #5
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	607b      	str	r3, [r7, #4]
	int i = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e029      	b.n	80014c0 <GenerateJPEGMCUBlock+0x9c>
		for (int x = xStart; x < xStart + 8; x++) {
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	e01e      	b.n	80014b0 <GenerateJPEGMCUBlock+0x8c>
			// Pad to 8x8
			if (x >= CAM_WIDTH) {
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001478:	dd05      	ble.n	8001486 <GenerateJPEGMCUBlock+0x62>
				jpeg_mcu[i] = 0x00;
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <GenerateJPEGMCUBlock+0xc8>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e00e      	b.n	80014a4 <GenerateJPEGMCUBlock+0x80>
			} else {
				jpeg_mcu[i] = camera_mem[x + y * CAM_WIDTH];
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	019a      	lsls	r2, r3, #6
 8001490:	1ad2      	subs	r2, r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <GenerateJPEGMCUBlock+0xcc>)
 8001498:	5cd1      	ldrb	r1, [r2, r3]
 800149a:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <GenerateJPEGMCUBlock+0xc8>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3307      	adds	r3, #7
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dddb      	ble.n	8001472 <GenerateJPEGMCUBlock+0x4e>
	for (int y = yStart; y < yStart + 8; y++) {
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	3301      	adds	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3307      	adds	r3, #7
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	ddd0      	ble.n	800146c <GenerateJPEGMCUBlock+0x48>
		}
	}
	jpeg_block++;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <GenerateJPEGMCUBlock+0xc0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <GenerateJPEGMCUBlock+0xc0>)
 80014d2:	6013      	str	r3, [r2, #0]
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	24009a44 	.word	0x24009a44
 80014e8:	cccccccd 	.word	0xcccccccd
 80014ec:	24009a04 	.word	0x24009a04
 80014f0:	2400065c 	.word	0x2400065c

080014f4 <HAL_JPEG_GetDataCallback>:

// OVERRIDE THE JPEG CALLBACKS
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	//	sprintf(usb_msg, "JPEG: Block: %d\r\n", jpeg_block);
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//}

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 80014fe:	f7ff ff91 	bl	8001424 <GenerateJPEGMCUBlock>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_JPEG_GetDataCallback+0x22>
		// ERROR - recover JPEG peripheral by restarting
		jpeg_ready = 1;
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <HAL_JPEG_GetDataCallback+0x34>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
		//jpeg_size = 0;
		jpeg_block = 0;
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <HAL_JPEG_GetDataCallback+0x38>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	}
	else {
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
	//HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_INPUT);
}
 8001514:	e004      	b.n	8001520 <HAL_JPEG_GetDataCallback+0x2c>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001516:	2240      	movs	r2, #64	@ 0x40
 8001518:	4905      	ldr	r1, [pc, #20]	@ (8001530 <HAL_JPEG_GetDataCallback+0x3c>)
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f007 f934 	bl	8008788 <HAL_JPEG_ConfigInputBuffer>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	24000000 	.word	0x24000000
 800152c:	24009a44 	.word	0x24009a44
 8001530:	24009a04 	.word	0x24009a04

08001534 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
	// Setup new output buffer loc
	jpeg_size += JPEG_OUTBUF_SIZE;
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_JPEG_DataReadyCallback+0x30>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3380      	adds	r3, #128	@ 0x80
 8001546:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_JPEG_DataReadyCallback+0x30>)
 8001548:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_JPEG_DataReadyCallback+0x30>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a06      	ldr	r2, [pc, #24]	@ (8001568 <HAL_JPEG_DataReadyCallback+0x34>)
 8001550:	4413      	add	r3, r2
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	4619      	mov	r1, r3
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f007 f928 	bl	80087ac <HAL_JPEG_ConfigOutputBuffer>
	// Debug MSG
	//uint8_t usb_msg[100] = {0};
	//sprintf(usb_msg, "JPEG: DataReady - output: %d\r\n", jpeg_size);
	//CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	24012df0 	.word	0x24012df0
 8001568:	24009a48 	.word	0x24009a48

0800156c <HAL_JPEG_EncodeCpltCallback>:

void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	jpeg_ready = 1;
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_JPEG_EncodeCpltCallback+0x20>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_JPEG_EncodeCpltCallback+0x24>)
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
	//uint8_t usb_msg[100] = {0};
	//sprintf(usb_msg, "JPEG: Finished encode\r\n");
	//CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	24000000 	.word	0x24000000
 8001590:	24009a44 	.word	0x24009a44

08001594 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80015a6:	f001 f86f 	bl	8002688 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015b6:	231f      	movs	r3, #31
 80015b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80015ba:	2387      	movs	r3, #135	@ 0x87
 80015bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80015be:	2300      	movs	r3, #0
 80015c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80015c2:	2300      	movs	r3, #0
 80015c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015d6:	463b      	mov	r3, r7
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 f88d 	bl	80026f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015de:	2004      	movs	r0, #4
 80015e0:	f001 f86a 	bl	80026b8 <HAL_MPU_Enable>

}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <Error_Handler+0x8>

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_MspInit+0x30>)
 8001600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001604:	4a08      	ldr	r2, [pc, #32]	@ (8001628 <HAL_MspInit+0x30>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_MspInit+0x30>)
 8001610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	58024400 	.word	0x58024400

0800162c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	@ 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a79      	ldr	r2, [pc, #484]	@ (8001830 <HAL_DCMI_MspInit+0x204>)
 800164a:	4293      	cmp	r3, r2
 800164c:	f040 80eb 	bne.w	8001826 <HAL_DCMI_MspInit+0x1fa>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001650:	4b78      	ldr	r3, [pc, #480]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001652:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001656:	4a77      	ldr	r2, [pc, #476]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001660:	4b74      	ldr	r3, [pc, #464]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001662:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166e:	4b71      	ldr	r3, [pc, #452]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001674:	4a6f      	ldr	r2, [pc, #444]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167e:	4b6d      	ldr	r3, [pc, #436]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001692:	4a68      	ldr	r2, [pc, #416]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169c:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	4a60      	ldr	r2, [pc, #384]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a59      	ldr	r2, [pc, #356]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b56      	ldr	r3, [pc, #344]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ec:	4a51      	ldr	r2, [pc, #324]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001834 <HAL_DCMI_MspInit+0x208>)
 80016f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001704:	2373      	movs	r3, #115	@ 0x73
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001714:	230d      	movs	r3, #13
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	4846      	ldr	r0, [pc, #280]	@ (8001838 <HAL_DCMI_MspInit+0x20c>)
 8001720:	f004 fe1a 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001724:	2350      	movs	r3, #80	@ 0x50
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001734:	230d      	movs	r3, #13
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	483f      	ldr	r0, [pc, #252]	@ (800183c <HAL_DCMI_MspInit+0x210>)
 8001740:	f004 fe0a 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001744:	23c0      	movs	r3, #192	@ 0xc0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001754:	230d      	movs	r3, #13
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4838      	ldr	r0, [pc, #224]	@ (8001840 <HAL_DCMI_MspInit+0x214>)
 8001760:	f004 fdfa 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001764:	2308      	movs	r3, #8
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001774:	230d      	movs	r3, #13
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4831      	ldr	r0, [pc, #196]	@ (8001844 <HAL_DCMI_MspInit+0x218>)
 8001780:	f004 fdea 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001794:	230d      	movs	r3, #13
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	482a      	ldr	r0, [pc, #168]	@ (8001848 <HAL_DCMI_MspInit+0x21c>)
 80017a0:	f004 fdda 	bl	8006358 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80017a4:	4b29      	ldr	r3, [pc, #164]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001850 <HAL_DCMI_MspInit+0x224>)
 80017a8:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80017aa:	4b28      	ldr	r3, [pc, #160]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017ac:	224b      	movs	r2, #75	@ 0x4b
 80017ae:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b0:	4b26      	ldr	r3, [pc, #152]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b23      	ldr	r3, [pc, #140]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017ca:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017d2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017e0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017e4:	2204      	movs	r2, #4
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80017fa:	4814      	ldr	r0, [pc, #80]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 80017fc:	f001 fab2 	bl	8002d64 <HAL_DMA_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_DCMI_MspInit+0x1de>
    {
      Error_Handler();
 8001806:	f7ff fef1 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 800180e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001810:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <HAL_DCMI_MspInit+0x220>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	204e      	movs	r0, #78	@ 0x4e
 800181c:	f000 feff 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001820:	204e      	movs	r0, #78	@ 0x4e
 8001822:	f000 ff16 	bl	8002652 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	@ 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	48020000 	.word	0x48020000
 8001834:	58024400 	.word	0x58024400
 8001838:	58021000 	.word	0x58021000
 800183c:	58020000 	.word	0x58020000
 8001840:	58020800 	.word	0x58020800
 8001844:	58020c00 	.word	0x58020c00
 8001848:	58020400 	.word	0x58020400
 800184c:	240001c4 	.word	0x240001c4
 8001850:	40020010 	.word	0x40020010

08001854 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0ba      	sub	sp, #232	@ 0xe8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	22c0      	movs	r2, #192	@ 0xc0
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f013 fe67 	bl	8015548 <memset>
  if(hi2c->Instance==I2C2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a38      	ldr	r2, [pc, #224]	@ (8001960 <HAL_I2C_MspInit+0x10c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d169      	bne.n	8001958 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001884:	f04f 0208 	mov.w	r2, #8
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8001890:	2302      	movs	r3, #2
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 8001894:	230c      	movs	r3, #12
 8001896:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800189c:	2302      	movs	r3, #2
 800189e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 80018a0:	2303      	movs	r3, #3
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80018a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80018aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ae:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80018b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4618      	mov	r0, r3
 80018c2:	f00b fc0d 	bl	800d0e0 <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80018cc:	f7ff fe8e 	bl	80015ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_I2C_MspInit+0x110>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d6:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <HAL_I2C_MspInit+0x110>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e0:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_I2C_MspInit+0x110>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001908:	2304      	movs	r3, #4
 800190a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <HAL_I2C_MspInit+0x114>)
 8001916:	f004 fd1f 	bl	8006358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_I2C_MspInit+0x110>)
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_I2C_MspInit+0x110>)
 8001922:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001926:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_I2C_MspInit+0x110>)
 800192c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2021      	movs	r0, #33	@ 0x21
 800193e:	f000 fe6e 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001942:	2021      	movs	r0, #33	@ 0x21
 8001944:	f000 fe85 	bl	8002652 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2022      	movs	r0, #34	@ 0x22
 800194e:	f000 fe66 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001952:	2022      	movs	r0, #34	@ 0x22
 8001954:	f000 fe7d 	bl	8002652 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001958:	bf00      	nop
 800195a:	37e8      	adds	r7, #232	@ 0xe8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40005800 	.word	0x40005800
 8001964:	58024400 	.word	0x58024400
 8001968:	58020400 	.word	0x58020400

0800196c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a55      	ldr	r2, [pc, #340]	@ (8001ad0 <HAL_JPEG_MspInit+0x164>)
 800197a:	4293      	cmp	r3, r2
 800197c:	f040 80a3 	bne.w	8001ac6 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001980:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <HAL_JPEG_MspInit+0x168>)
 8001982:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001986:	4a53      	ldr	r2, [pc, #332]	@ (8001ad4 <HAL_JPEG_MspInit+0x168>)
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_JPEG_MspInit+0x168>)
 8001992:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 800199e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019a0:	4a4e      	ldr	r2, [pc, #312]	@ (8001adc <HAL_JPEG_MspInit+0x170>)
 80019a2:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80019a4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019a6:	2211      	movs	r2, #17
 80019a8:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80019aa:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80019b0:	4b49      	ldr	r3, [pc, #292]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80019b6:	4b48      	ldr	r3, [pc, #288]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80019bc:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019be:	2202      	movs	r2, #2
 80019c0:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80019c2:	4b45      	ldr	r3, [pc, #276]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80019c8:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80019ce:	4b42      	ldr	r3, [pc, #264]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80019d4:	4b40      	ldr	r3, [pc, #256]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80019dc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019de:	2220      	movs	r2, #32
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80019e8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80019ee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80019f4:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80019fa:	4837      	ldr	r0, [pc, #220]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 80019fc:	f008 fcfe 	bl	800a3fc <HAL_MDMA_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001a06:	f7ff fdf1 	bl	80015ec <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4832      	ldr	r0, [pc, #200]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 8001a10:	f008 fd40 	bl	800a494 <HAL_MDMA_ConfigPostRequestMask>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001a1a:	f7ff fde7 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a24:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad8 <HAL_JPEG_MspInit+0x16c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae4 <HAL_JPEG_MspInit+0x178>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a32:	2214      	movs	r2, #20
 8001a34:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001a36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001a3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a3e:	2240      	movs	r2, #64	@ 0x40
 8001a40:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001a48:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001a4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a50:	2208      	movs	r2, #8
 8001a52:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a56:	2220      	movs	r2, #32
 8001a58:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001a86:	4816      	ldr	r0, [pc, #88]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a88:	f008 fcb8 	bl	800a3fc <HAL_MDMA_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001a92:	f7ff fdab 	bl	80015ec <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4811      	ldr	r0, [pc, #68]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001a9c:	f008 fcfa 	bl	800a494 <HAL_MDMA_ConfigPostRequestMask>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001aa6:	f7ff fda1 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_JPEG_MspInit+0x174>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2079      	movs	r0, #121	@ 0x79
 8001abc:	f000 fdaf 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001ac0:	2079      	movs	r0, #121	@ 0x79
 8001ac2:	f000 fdc6 	bl	8002652 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	52003000 	.word	0x52003000
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	240002e8 	.word	0x240002e8
 8001adc:	52000040 	.word	0x52000040
 8001ae0:	24000354 	.word	0x24000354
 8001ae4:	52000080 	.word	0x52000080

08001ae8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0bc      	sub	sp, #240	@ 0xf0
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	22c0      	movs	r2, #192	@ 0xc0
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f013 fd1d 	bl	8015548 <memset>
  if(hspi->Instance==SPI2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a38      	ldr	r2, [pc, #224]	@ (8001bf4 <HAL_SPI_MspInit+0x10c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d169      	bne.n	8001bec <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00b fad7 	bl	800d0e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b38:	f7ff fd58 	bl	80015ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b42:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b60:	4a25      	ldr	r2, [pc, #148]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b6a:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_SPI_MspInit+0x110>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001b96:	2306      	movs	r3, #6
 8001b98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bae:	2305      	movs	r3, #5
 8001bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <HAL_SPI_MspInit+0x114>)
 8001bbc:	f004 fbcc 	bl	8006358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <HAL_SPI_MspInit+0x118>)
 8001be8:	f004 fbb6 	bl	8006358 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001bec:	bf00      	nop
 8001bee:	37f0      	adds	r7, #240	@ 0xf0
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40003800 	.word	0x40003800
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	58020800 	.word	0x58020800
 8001c00:	58020400 	.word	0x58020400

08001c04 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0xbc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d10f      	bne.n	8001c36 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c1c:	4a29      	ldr	r2, [pc, #164]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c26:	4b27      	ldr	r3, [pc, #156]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c34:	e03d      	b.n	8001cb2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3e:	d10f      	bne.n	8001c60 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c40:	4b20      	ldr	r3, [pc, #128]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c46:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c50:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
}
 8001c5e:	e028      	b.n	8001cb2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10f      	bne.n	8001c8a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c6a:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	e013      	b.n	8001cb2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <HAL_TIM_PWM_MspInit+0xc8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d10e      	bne.n	8001cb2 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ca4:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800

08001cd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d116      	bne.n	8001d10 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <HAL_TIM_Base_MspInit+0x4c>)
 8001ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <HAL_TIM_Base_MspInit+0x4c>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_TIM_Base_MspInit+0x4c>)
 8001cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	202d      	movs	r0, #45	@ 0x2d
 8001d06:	f000 fc8a 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001d0a:	202d      	movs	r0, #45	@ 0x2d
 8001d0c:	f000 fca1 	bl	8002652 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40002000 	.word	0x40002000
 8001d1c:	58024400 	.word	0x58024400

08001d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	@ 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb4 <HAL_TIM_MspPostInit+0x194>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d120      	bne.n	8001d84 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d42:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d48:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001d4a:	f043 0310 	orr.w	r3, r3, #16
 8001d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d52:	4b59      	ldr	r3, [pc, #356]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	484f      	ldr	r0, [pc, #316]	@ (8001ebc <HAL_TIM_MspPostInit+0x19c>)
 8001d7e:	f004 faeb 	bl	8006358 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001d82:	e093      	b.n	8001eac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d8c:	d11f      	bne.n	8001dce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d94:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d9e:	4b46      	ldr	r3, [pc, #280]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001dac:	2307      	movs	r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	483e      	ldr	r0, [pc, #248]	@ (8001ec0 <HAL_TIM_MspPostInit+0x1a0>)
 8001dc8:	f004 fac6 	bl	8006358 <HAL_GPIO_Init>
}
 8001dcc:	e06e      	b.n	8001eac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ec4 <HAL_TIM_MspPostInit+0x1a4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d11f      	bne.n	8001e18 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	4b37      	ldr	r3, [pc, #220]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dde:	4a36      	ldr	r2, [pc, #216]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de8:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df6:	2303      	movs	r3, #3
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e06:	2302      	movs	r3, #2
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	482d      	ldr	r0, [pc, #180]	@ (8001ec8 <HAL_TIM_MspPostInit+0x1a8>)
 8001e12:	f004 faa1 	bl	8006358 <HAL_GPIO_Init>
}
 8001e16:	e049      	b.n	8001eac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ecc <HAL_TIM_MspPostInit+0x1ac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d120      	bne.n	8001e64 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e28:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e32:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e52:	2302      	movs	r3, #2
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481a      	ldr	r0, [pc, #104]	@ (8001ec8 <HAL_TIM_MspPostInit+0x1a8>)
 8001e5e:	f004 fa7b 	bl	8006358 <HAL_GPIO_Init>
}
 8001e62:	e023      	b.n	8001eac <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_TIM_MspPostInit+0x1b0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d11e      	bne.n	8001eac <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e74:	4a10      	ldr	r2, [pc, #64]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <HAL_TIM_MspPostInit+0x198>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e9c:	2309      	movs	r3, #9
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <HAL_TIM_MspPostInit+0x1a0>)
 8001ea8:	f004 fa56 	bl	8006358 <HAL_GPIO_Init>
}
 8001eac:	bf00      	nop
 8001eae:	3730      	adds	r7, #48	@ 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	58021000 	.word	0x58021000
 8001ec0:	58020000 	.word	0x58020000
 8001ec4:	40000400 	.word	0x40000400
 8001ec8:	58020400 	.word	0x58020400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40002000 	.word	0x40002000

08001ed4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eec:	f107 0310 	add.w	r3, r7, #16
 8001ef0:	22c0      	movs	r2, #192	@ 0xc0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f013 fb27 	bl	8015548 <memset>
  if(huart->Instance==USART1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a27      	ldr	r2, [pc, #156]	@ (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d146      	bne.n	8001f92 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f04:	f04f 0201 	mov.w	r2, #1
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f00b f8e0 	bl	800d0e0 <HAL_RCCEx_PeriphCLKConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f26:	f7ff fb61 	bl	80015ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f30:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3a:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f66:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f80:	2304      	movs	r3, #4
 8001f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <HAL_UART_MspInit+0xd0>)
 8001f8e:	f004 f9e3 	bl	8006358 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f92:	bf00      	nop
 8001f94:	37e8      	adds	r7, #232	@ 0xe8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40011000 	.word	0x40011000
 8001fa0:	58024400 	.word	0x58024400
 8001fa4:	58020400 	.word	0x58020400

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <NMI_Handler+0x4>

08001fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <MemManage_Handler+0x4>

08001fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffe:	f000 f9e3 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <DMA1_Stream0_IRQHandler+0x10>)
 800200e:	f002 f9d3 	bl	80043b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	240001c4 	.word	0x240001c4

0800201c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <I2C2_EV_IRQHandler+0x10>)
 8002022:	f004 fe0d 	bl	8006c40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2400023c 	.word	0x2400023c

08002030 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <I2C2_ER_IRQHandler+0x10>)
 8002036:	f004 fe1d 	bl	8006c74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2400023c 	.word	0x2400023c

08002044 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800204a:	f00d f971 	bl	800f330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	24000578 	.word	0x24000578

08002058 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DCMI_IRQHandler+0x10>)
 800205e:	f000 fd27 	bl	8002ab0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	24000174 	.word	0x24000174

0800206c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <OTG_FS_IRQHandler+0x10>)
 8002072:	f008 fea6 	bl	800adc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	240142e0 	.word	0x240142e0

08002080 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <JPEG_IRQHandler+0x10>)
 8002086:	f006 fbc2 	bl	800880e <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	24000290 	.word	0x24000290

08002094 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <MDMA_IRQHandler+0x14>)
 800209a:	f008 faf5 	bl	800a688 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 800209e:	4803      	ldr	r0, [pc, #12]	@ (80020ac <MDMA_IRQHandler+0x18>)
 80020a0:	f008 faf2 	bl	800a688 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	240002e8 	.word	0x240002e8
 80020ac:	24000354 	.word	0x24000354

080020b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <_sbrk+0x5c>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <_sbrk+0x60>)
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <_sbrk+0x64>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <_sbrk+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e0:	f013 fa3a 	bl	8015558 <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	220c      	movs	r2, #12
 80020e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	e009      	b.n	8002104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <_sbrk+0x64>)
 8002100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	24080000 	.word	0x24080000
 8002110:	00000400 	.word	0x00000400
 8002114:	24012df4 	.word	0x24012df4
 8002118:	24014b30 	.word	0x24014b30

0800211c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002120:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <SystemInit+0x114>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	4a42      	ldr	r2, [pc, #264]	@ (8002230 <SystemInit+0x114>)
 8002128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800212c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002130:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <SystemInit+0x118>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	2b06      	cmp	r3, #6
 800213a:	d807      	bhi.n	800214c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800213c:	4b3d      	ldr	r3, [pc, #244]	@ (8002234 <SystemInit+0x118>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 030f 	bic.w	r3, r3, #15
 8002144:	4a3b      	ldr	r2, [pc, #236]	@ (8002234 <SystemInit+0x118>)
 8002146:	f043 0307 	orr.w	r3, r3, #7
 800214a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800214c:	4b3a      	ldr	r3, [pc, #232]	@ (8002238 <SystemInit+0x11c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a39      	ldr	r2, [pc, #228]	@ (8002238 <SystemInit+0x11c>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002158:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <SystemInit+0x11c>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800215e:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <SystemInit+0x11c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4935      	ldr	r1, [pc, #212]	@ (8002238 <SystemInit+0x11c>)
 8002164:	4b35      	ldr	r3, [pc, #212]	@ (800223c <SystemInit+0x120>)
 8002166:	4013      	ands	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800216a:	4b32      	ldr	r3, [pc, #200]	@ (8002234 <SystemInit+0x118>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002176:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <SystemInit+0x118>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 030f 	bic.w	r3, r3, #15
 800217e:	4a2d      	ldr	r2, [pc, #180]	@ (8002234 <SystemInit+0x118>)
 8002180:	f043 0307 	orr.w	r3, r3, #7
 8002184:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002186:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <SystemInit+0x11c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <SystemInit+0x11c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002192:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <SystemInit+0x11c>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002198:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <SystemInit+0x11c>)
 800219a:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <SystemInit+0x124>)
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <SystemInit+0x11c>)
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <SystemInit+0x128>)
 80021a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80021a4:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <SystemInit+0x11c>)
 80021a6:	4a28      	ldr	r2, [pc, #160]	@ (8002248 <SystemInit+0x12c>)
 80021a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80021aa:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <SystemInit+0x11c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <SystemInit+0x11c>)
 80021b2:	4a25      	ldr	r2, [pc, #148]	@ (8002248 <SystemInit+0x12c>)
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80021b6:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <SystemInit+0x11c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <SystemInit+0x11c>)
 80021be:	4a22      	ldr	r2, [pc, #136]	@ (8002248 <SystemInit+0x12c>)
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <SystemInit+0x11c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <SystemInit+0x11c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <SystemInit+0x11c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021d4:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <SystemInit+0x11c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021da:	4b1c      	ldr	r3, [pc, #112]	@ (800224c <SystemInit+0x130>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <SystemInit+0x134>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021e6:	d202      	bcs.n	80021ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <SystemInit+0x138>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <SystemInit+0x11c>)
 80021f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d113      	bne.n	8002224 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <SystemInit+0x11c>)
 80021fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002202:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <SystemInit+0x11c>)
 8002204:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002208:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <SystemInit+0x13c>)
 800220e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002212:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <SystemInit+0x11c>)
 8002216:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800221a:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <SystemInit+0x11c>)
 800221c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002220:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	52002000 	.word	0x52002000
 8002238:	58024400 	.word	0x58024400
 800223c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002240:	02020200 	.word	0x02020200
 8002244:	01ff0000 	.word	0x01ff0000
 8002248:	01010280 	.word	0x01010280
 800224c:	5c001000 	.word	0x5c001000
 8002250:	ffff0000 	.word	0xffff0000
 8002254:	51008108 	.word	0x51008108
 8002258:	52004000 	.word	0x52004000

0800225c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <ExitRun0Mode+0x2c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <ExitRun0Mode+0x2c>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800226c:	bf00      	nop
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <ExitRun0Mode+0x2c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f9      	beq.n	800226e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	58024800 	.word	0x58024800

0800228c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800228c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80022c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002290:	f7ff ffe4 	bl	800225c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002294:	f7ff ff42 	bl	800211c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002298:	480c      	ldr	r0, [pc, #48]	@ (80022cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800229a:	490d      	ldr	r1, [pc, #52]	@ (80022d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b0:	4c0a      	ldr	r4, [pc, #40]	@ (80022dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022be:	f013 f951 	bl	8015564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7fe f9fb 	bl	80006bc <main>
  bx  lr
 80022c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80022cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022d0:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80022d4:	080162dc 	.word	0x080162dc
  ldr r2, =_sbss
 80022d8:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80022dc:	24014b2c 	.word	0x24014b2c

080022e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC3_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ea:	2003      	movs	r0, #3
 80022ec:	f000 f98c 	bl	8002608 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022f0:	f00a fd20 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_Init+0x68>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	4913      	ldr	r1, [pc, #76]	@ (8002350 <HAL_Init+0x6c>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_Init+0x68>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	4a0e      	ldr	r2, [pc, #56]	@ (8002350 <HAL_Init+0x6c>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
 8002324:	4a0b      	ldr	r2, [pc, #44]	@ (8002354 <HAL_Init+0x70>)
 8002326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002328:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <HAL_Init+0x74>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800232e:	200f      	movs	r0, #15
 8002330:	f000 f814 	bl	800235c <HAL_InitTick>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e002      	b.n	8002344 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800233e:	f7ff f95b 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	58024400 	.word	0x58024400
 8002350:	08015ff8 	.word	0x08015ff8
 8002354:	24000008 	.word	0x24000008
 8002358:	24000004 	.word	0x24000004

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_InitTick+0x60>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e021      	b.n	80023b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002370:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <HAL_InitTick+0x64>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <HAL_InitTick+0x60>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f971 	bl	800266e <HAL_SYSTICK_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00e      	b.n	80023b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	d80a      	bhi.n	80023b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239c:	2200      	movs	r2, #0
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f000 f93b 	bl	800261e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a8:	4a06      	ldr	r2, [pc, #24]	@ (80023c4 <HAL_InitTick+0x68>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	24000010 	.word	0x24000010
 80023c0:	24000004 	.word	0x24000004
 80023c4:	2400000c 	.word	0x2400000c

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	24000010 	.word	0x24000010
 80023ec:	24012df8 	.word	0x24012df8

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	24012df8 	.word	0x24012df8

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	24000010 	.word	0x24000010

08002450 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_GetREVID+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0c1b      	lsrs	r3, r3, #16
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	5c001000 	.word	0x5c001000

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <__NVIC_SetPriorityGrouping+0x40>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	4313      	orrs	r3, r2
 8002494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002496:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	05fa0000 	.word	0x05fa0000

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	@ (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	@ (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	@ (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f1c3 0307 	rsb	r3, r3, #7
 8002576:	2b04      	cmp	r3, #4
 8002578:	bf28      	it	cs
 800257a:	2304      	movcs	r3, #4
 800257c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3304      	adds	r3, #4
 8002582:	2b06      	cmp	r3, #6
 8002584:	d902      	bls.n	800258c <NVIC_EncodePriority+0x30>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b03      	subs	r3, #3
 800258a:	e000      	b.n	800258e <NVIC_EncodePriority+0x32>
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	401a      	ands	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a4:	f04f 31ff 	mov.w	r1, #4294967295
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	4313      	orrs	r3, r2
         );
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025d4:	d301      	bcc.n	80025da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00f      	b.n	80025fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025da:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <SysTick_Config+0x40>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e2:	210f      	movs	r1, #15
 80025e4:	f04f 30ff 	mov.w	r0, #4294967295
 80025e8:	f7ff ff8e 	bl	8002508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <SysTick_Config+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <SysTick_Config+0x40>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000e010 	.word	0xe000e010

08002608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff29 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff40 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff90 	bl	800255c <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5f 	bl	8002508 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff33 	bl	80024cc <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa4 	bl	80025c4 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800268c:	f3bf 8f5f 	dmb	sy
}
 8002690:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002692:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <HAL_MPU_Disable+0x28>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	4a06      	ldr	r2, [pc, #24]	@ (80026b0 <HAL_MPU_Disable+0x28>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_MPU_Disable+0x2c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00
 80026b4:	e000ed90 	.word	0xe000ed90

080026b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026c0:	4a0b      	ldr	r2, [pc, #44]	@ (80026f0 <HAL_MPU_Enable+0x38>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_MPU_Enable+0x3c>)
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	4a09      	ldr	r2, [pc, #36]	@ (80026f4 <HAL_MPU_Enable+0x3c>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026d6:	f3bf 8f4f 	dsb	sy
}
 80026da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026dc:	f3bf 8f6f 	isb	sy
}
 80026e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed90 	.word	0xe000ed90
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	785a      	ldrb	r2, [r3, #1]
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_MPU_ConfigRegion+0x7c>)
 8002706:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002708:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_MPU_ConfigRegion+0x7c>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <HAL_MPU_ConfigRegion+0x7c>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002714:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <HAL_MPU_ConfigRegion+0x7c>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7b1b      	ldrb	r3, [r3, #12]
 8002720:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7adb      	ldrb	r3, [r3, #11]
 8002726:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7a9b      	ldrb	r3, [r3, #10]
 800272e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7b5b      	ldrb	r3, [r3, #13]
 8002736:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7b9b      	ldrb	r3, [r3, #14]
 800273e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7bdb      	ldrb	r3, [r3, #15]
 8002746:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7a5b      	ldrb	r3, [r3, #9]
 800274e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7a1b      	ldrb	r3, [r3, #8]
 8002756:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002758:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002760:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002762:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002764:	6113      	str	r3, [r2, #16]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed90 	.word	0xe000ed90

08002778 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e069      	b.n	800285e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe ff48 	bl	800162c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_DCMI_Init+0xf0>)
 80027be:	400b      	ands	r3, r1
 80027c0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80027d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80027e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80027ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80027fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002806:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b10      	cmp	r3, #16
 8002816:	d112      	bne.n	800283e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7f1b      	ldrb	r3, [r3, #28]
 800281c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7f5b      	ldrb	r3, [r3, #29]
 8002822:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002824:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7f9b      	ldrb	r3, [r3, #30]
 800282a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800282c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7fdb      	ldrb	r3, [r3, #31]
 8002834:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800283a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800283c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 021e 	orr.w	r2, r2, #30
 800284c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	ffe0f007 	.word	0xffe0f007

0800286c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_DCMI_Start_DMA+0x1c>
 8002884:	2302      	movs	r3, #2
 8002886:	e0ab      	b.n	80029e0 <HAL_DCMI_Start_DMA+0x174>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028a6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0202 	bic.w	r2, r2, #2
 80028b6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	4a46      	ldr	r2, [pc, #280]	@ (80029e8 <HAL_DCMI_Start_DMA+0x17c>)
 80028ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d4:	4a45      	ldr	r2, [pc, #276]	@ (80029ec <HAL_DCMI_Start_DMA+0x180>)
 80028d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028dc:	2200      	movs	r2, #0
 80028de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028fe:	d219      	bcs.n	8002934 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3328      	adds	r3, #40	@ 0x28
 800290a:	4619      	mov	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	f000 fd84 	bl	800341c <HAL_DMA_Start_IT>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d055      	beq.n	80029c6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2240      	movs	r2, #64	@ 0x40
 800291e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e055      	b.n	80029e0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002938:	4a2b      	ldr	r2, [pc, #172]	@ (80029e8 <HAL_DCMI_Start_DMA+0x17c>)
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800294e:	e009      	b.n	8002964 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	085a      	lsrs	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295e:	005a      	lsls	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296c:	d2f0      	bcs.n	8002950 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	1e9a      	subs	r2, r3, #2
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3328      	adds	r3, #40	@ 0x28
 8002996:	4619      	mov	r1, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	f003 f829 	bl	80059f8 <HAL_DMAEx_MultiBufferStart_IT>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00c      	b.n	80029e0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	08002c05 	.word	0x08002c05
 80029ec:	08002d2b 	.word	0x08002d2b

080029f0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_DCMI_Stop+0xb8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2b      	ldr	r2, [pc, #172]	@ (8002aac <HAL_DCMI_Stop+0xbc>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a08:	fb02 f303 	mul.w	r3, r2, r3
 8002a0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_DCMI_Stop+0x30>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e03f      	b.n	8002aa0 <HAL_DCMI_Stop+0xb0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d108      	bne.n	8002a5e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8002a5c:	e006      	b.n	8002a6c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e9      	bne.n	8002a40 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 ff35 	bl	80038f0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	24000004 	.word	0x24000004
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aea:	4a31      	ldr	r2, [pc, #196]	@ (8002bb0 <HAL_DCMI_IRQHandler+0x100>)
 8002aec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 fa1a 	bl	8003f2c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2202      	movs	r2, #2
 8002b08:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b22:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <HAL_DCMI_IRQHandler+0x100>)
 8002b24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f9fe 	bl	8003f2c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f840 	bl	8002bc8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2208      	movs	r2, #8
 8002b58:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f83e 	bl	8002bdc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01d      	beq.n	8002ba6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d107      	bne.n	8002b88 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 021e 	bic.w	r2, r2, #30
 8002b86:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f825 	bl	8002bf0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	08002d2b 	.word	0x08002d2b

08002bb4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d043      	beq.n	8002ca2 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c26:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d118      	bne.n	8002c66 <DCMI_DMAXferCplt+0x62>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4c:	00da      	lsls	r2, r3, #3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4413      	add	r3, r2
 8002c52:	2200      	movs	r2, #0
 8002c54:	4619      	mov	r1, r3
 8002c56:	f003 fa2d 	bl	80060b4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5e:	1e5a      	subs	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c64:	e044      	b.n	8002cf0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d13c      	bne.n	8002cf0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c88:	00da      	lsls	r2, r3, #3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4619      	mov	r1, r3
 8002c92:	f003 fa0f 	bl	80060b4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	1e5a      	subs	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ca0:	e026      	b.n	8002cf0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	e017      	b.n	8002cf0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	440a      	add	r2, r1
 8002ce6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d112      	bne.n	8002d22 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d36:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d009      	beq.n	8002d56 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7ff ff2c 	bl	8002bb4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fb40 	bl	80023f0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e316      	b.n	80033aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a66      	ldr	r2, [pc, #408]	@ (8002f1c <HAL_DMA_Init+0x1b8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04a      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a65      	ldr	r2, [pc, #404]	@ (8002f20 <HAL_DMA_Init+0x1bc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d045      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a63      	ldr	r2, [pc, #396]	@ (8002f24 <HAL_DMA_Init+0x1c0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d040      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a62      	ldr	r2, [pc, #392]	@ (8002f28 <HAL_DMA_Init+0x1c4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d03b      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a60      	ldr	r2, [pc, #384]	@ (8002f2c <HAL_DMA_Init+0x1c8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d036      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f30 <HAL_DMA_Init+0x1cc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d031      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f34 <HAL_DMA_Init+0x1d0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02c      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f38 <HAL_DMA_Init+0x1d4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d027      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f3c <HAL_DMA_Init+0x1d8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a59      	ldr	r2, [pc, #356]	@ (8002f40 <HAL_DMA_Init+0x1dc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01d      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a57      	ldr	r2, [pc, #348]	@ (8002f44 <HAL_DMA_Init+0x1e0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a56      	ldr	r2, [pc, #344]	@ (8002f48 <HAL_DMA_Init+0x1e4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a54      	ldr	r2, [pc, #336]	@ (8002f4c <HAL_DMA_Init+0x1e8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a53      	ldr	r2, [pc, #332]	@ (8002f50 <HAL_DMA_Init+0x1ec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	@ (8002f54 <HAL_DMA_Init+0x1f0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_DMA_Init+0xb8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a50      	ldr	r2, [pc, #320]	@ (8002f58 <HAL_DMA_Init+0x1f4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Init+0xbc>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_DMA_Init+0xbe>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 813b 	beq.w	800309e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a37      	ldr	r2, [pc, #220]	@ (8002f1c <HAL_DMA_Init+0x1b8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a36      	ldr	r2, [pc, #216]	@ (8002f20 <HAL_DMA_Init+0x1bc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a34      	ldr	r2, [pc, #208]	@ (8002f24 <HAL_DMA_Init+0x1c0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a33      	ldr	r2, [pc, #204]	@ (8002f28 <HAL_DMA_Init+0x1c4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a31      	ldr	r2, [pc, #196]	@ (8002f2c <HAL_DMA_Init+0x1c8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a30      	ldr	r2, [pc, #192]	@ (8002f30 <HAL_DMA_Init+0x1cc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2e      	ldr	r2, [pc, #184]	@ (8002f34 <HAL_DMA_Init+0x1d0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2d      	ldr	r2, [pc, #180]	@ (8002f38 <HAL_DMA_Init+0x1d4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <HAL_DMA_Init+0x1d8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2a      	ldr	r2, [pc, #168]	@ (8002f40 <HAL_DMA_Init+0x1dc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a28      	ldr	r2, [pc, #160]	@ (8002f44 <HAL_DMA_Init+0x1e0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a27      	ldr	r2, [pc, #156]	@ (8002f48 <HAL_DMA_Init+0x1e4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a25      	ldr	r2, [pc, #148]	@ (8002f4c <HAL_DMA_Init+0x1e8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <HAL_DMA_Init+0x1ec>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	@ (8002f54 <HAL_DMA_Init+0x1f0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Init+0x174>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <HAL_DMA_Init+0x1f4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_DMA_Init+0x186>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e007      	b.n	8002efa <HAL_DMA_Init+0x196>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002efa:	e02f      	b.n	8002f5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efc:	f7ff fa78 	bl	80023f0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d928      	bls.n	8002f5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2203      	movs	r2, #3
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e246      	b.n	80033aa <HAL_DMA_Init+0x646>
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	40020040 	.word	0x40020040
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40020088 	.word	0x40020088
 8002f34:	400200a0 	.word	0x400200a0
 8002f38:	400200b8 	.word	0x400200b8
 8002f3c:	40020410 	.word	0x40020410
 8002f40:	40020428 	.word	0x40020428
 8002f44:	40020440 	.word	0x40020440
 8002f48:	40020458 	.word	0x40020458
 8002f4c:	40020470 	.word	0x40020470
 8002f50:	40020488 	.word	0x40020488
 8002f54:	400204a0 	.word	0x400204a0
 8002f58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1c8      	bne.n	8002efc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4b83      	ldr	r3, [pc, #524]	@ (8003184 <HAL_DMA_Init+0x420>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fc0:	4b71      	ldr	r3, [pc, #452]	@ (8003188 <HAL_DMA_Init+0x424>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b71      	ldr	r3, [pc, #452]	@ (800318c <HAL_DMA_Init+0x428>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fcc:	d328      	bcc.n	8003020 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b28      	cmp	r3, #40	@ 0x28
 8002fd4:	d903      	bls.n	8002fde <HAL_DMA_Init+0x27a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fdc:	d917      	bls.n	800300e <HAL_DMA_Init+0x2aa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fe4:	d903      	bls.n	8002fee <HAL_DMA_Init+0x28a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b42      	cmp	r3, #66	@ 0x42
 8002fec:	d90f      	bls.n	800300e <HAL_DMA_Init+0x2aa>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b46      	cmp	r3, #70	@ 0x46
 8002ff4:	d903      	bls.n	8002ffe <HAL_DMA_Init+0x29a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b48      	cmp	r3, #72	@ 0x48
 8002ffc:	d907      	bls.n	800300e <HAL_DMA_Init+0x2aa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b4e      	cmp	r3, #78	@ 0x4e
 8003004:	d905      	bls.n	8003012 <HAL_DMA_Init+0x2ae>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b52      	cmp	r3, #82	@ 0x52
 800300c:	d801      	bhi.n	8003012 <HAL_DMA_Init+0x2ae>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_DMA_Init+0x2b0>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800301e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	2b04      	cmp	r3, #4
 8003048:	d117      	bne.n	800307a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f002 fb41 	bl	80056e4 <DMA_CheckFifoParam>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2240      	movs	r2, #64	@ 0x40
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e197      	b.n	80033aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f002 fa7c 	bl	8005580 <DMA_CalcBaseAndBitshift>
 8003088:	4603      	mov	r3, r0
 800308a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	223f      	movs	r2, #63	@ 0x3f
 8003096:	409a      	lsls	r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	e0cd      	b.n	800323a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003190 <HAL_DMA_Init+0x42c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a39      	ldr	r2, [pc, #228]	@ (8003194 <HAL_DMA_Init+0x430>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a38      	ldr	r2, [pc, #224]	@ (8003198 <HAL_DMA_Init+0x434>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a36      	ldr	r2, [pc, #216]	@ (800319c <HAL_DMA_Init+0x438>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a35      	ldr	r2, [pc, #212]	@ (80031a0 <HAL_DMA_Init+0x43c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a33      	ldr	r2, [pc, #204]	@ (80031a4 <HAL_DMA_Init+0x440>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a32      	ldr	r2, [pc, #200]	@ (80031a8 <HAL_DMA_Init+0x444>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_Init+0x38a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a30      	ldr	r2, [pc, #192]	@ (80031ac <HAL_DMA_Init+0x448>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_DMA_Init+0x38e>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_DMA_Init+0x390>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8097 	beq.w	8003228 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a24      	ldr	r2, [pc, #144]	@ (8003190 <HAL_DMA_Init+0x42c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d021      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_DMA_Init+0x430>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01c      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <HAL_DMA_Init+0x434>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d017      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_DMA_Init+0x438>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d012      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_DMA_Init+0x43c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00d      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_DMA_Init+0x440>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d008      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_DMA_Init+0x444>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <HAL_DMA_Init+0x3e4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_DMA_Init+0x448>)
 8003146:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <HAL_DMA_Init+0x44c>)
 8003164:	4013      	ands	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d021      	beq.n	80031b4 <HAL_DMA_Init+0x450>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b80      	cmp	r3, #128	@ 0x80
 8003176:	d102      	bne.n	800317e <HAL_DMA_Init+0x41a>
 8003178:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800317c:	e01b      	b.n	80031b6 <HAL_DMA_Init+0x452>
 800317e:	2300      	movs	r3, #0
 8003180:	e019      	b.n	80031b6 <HAL_DMA_Init+0x452>
 8003182:	bf00      	nop
 8003184:	fe10803f 	.word	0xfe10803f
 8003188:	5c001000 	.word	0x5c001000
 800318c:	ffff0000 	.word	0xffff0000
 8003190:	58025408 	.word	0x58025408
 8003194:	5802541c 	.word	0x5802541c
 8003198:	58025430 	.word	0x58025430
 800319c:	58025444 	.word	0x58025444
 80031a0:	58025458 	.word	0x58025458
 80031a4:	5802546c 	.word	0x5802546c
 80031a8:	58025480 	.word	0x58025480
 80031ac:	58025494 	.word	0x58025494
 80031b0:	fffe000f 	.word	0xfffe000f
 80031b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80031e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b6e      	ldr	r3, [pc, #440]	@ (80033b4 <HAL_DMA_Init+0x650>)
 80031fc:	4413      	add	r3, r2
 80031fe:	4a6e      	ldr	r2, [pc, #440]	@ (80033b8 <HAL_DMA_Init+0x654>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f002 f9b7 	bl	8005580 <DMA_CalcBaseAndBitshift>
 8003212:	4603      	mov	r3, r0
 8003214:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e008      	b.n	800323a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0b7      	b.n	80033aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5f      	ldr	r2, [pc, #380]	@ (80033bc <HAL_DMA_Init+0x658>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d072      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5d      	ldr	r2, [pc, #372]	@ (80033c0 <HAL_DMA_Init+0x65c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d06d      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a5c      	ldr	r2, [pc, #368]	@ (80033c4 <HAL_DMA_Init+0x660>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d068      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5a      	ldr	r2, [pc, #360]	@ (80033c8 <HAL_DMA_Init+0x664>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d063      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a59      	ldr	r2, [pc, #356]	@ (80033cc <HAL_DMA_Init+0x668>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d05e      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a57      	ldr	r2, [pc, #348]	@ (80033d0 <HAL_DMA_Init+0x66c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d059      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a56      	ldr	r2, [pc, #344]	@ (80033d4 <HAL_DMA_Init+0x670>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d054      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a54      	ldr	r2, [pc, #336]	@ (80033d8 <HAL_DMA_Init+0x674>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04f      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a53      	ldr	r2, [pc, #332]	@ (80033dc <HAL_DMA_Init+0x678>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d04a      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a51      	ldr	r2, [pc, #324]	@ (80033e0 <HAL_DMA_Init+0x67c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d045      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a50      	ldr	r2, [pc, #320]	@ (80033e4 <HAL_DMA_Init+0x680>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d040      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4e      	ldr	r2, [pc, #312]	@ (80033e8 <HAL_DMA_Init+0x684>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d03b      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4d      	ldr	r2, [pc, #308]	@ (80033ec <HAL_DMA_Init+0x688>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d036      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	@ (80033f0 <HAL_DMA_Init+0x68c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4a      	ldr	r2, [pc, #296]	@ (80033f4 <HAL_DMA_Init+0x690>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d02c      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a48      	ldr	r2, [pc, #288]	@ (80033f8 <HAL_DMA_Init+0x694>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d027      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a47      	ldr	r2, [pc, #284]	@ (80033fc <HAL_DMA_Init+0x698>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a45      	ldr	r2, [pc, #276]	@ (8003400 <HAL_DMA_Init+0x69c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01d      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a44      	ldr	r2, [pc, #272]	@ (8003404 <HAL_DMA_Init+0x6a0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <HAL_DMA_Init+0x6a4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a41      	ldr	r2, [pc, #260]	@ (800340c <HAL_DMA_Init+0x6a8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3f      	ldr	r2, [pc, #252]	@ (8003410 <HAL_DMA_Init+0x6ac>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3e      	ldr	r2, [pc, #248]	@ (8003414 <HAL_DMA_Init+0x6b0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_DMA_Init+0x5c6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a3c      	ldr	r2, [pc, #240]	@ (8003418 <HAL_DMA_Init+0x6b4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_DMA_Init+0x5ca>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_DMA_Init+0x5cc>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d032      	beq.n	800339a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f002 fa51 	bl	80057dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b80      	cmp	r3, #128	@ 0x80
 8003340:	d102      	bne.n	8003348 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800335c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_DMA_Init+0x624>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b08      	cmp	r3, #8
 800336c:	d80c      	bhi.n	8003388 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f002 face 	bl	8005910 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e008      	b.n	800339a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	a7fdabf8 	.word	0xa7fdabf8
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	40020010 	.word	0x40020010
 80033c0:	40020028 	.word	0x40020028
 80033c4:	40020040 	.word	0x40020040
 80033c8:	40020058 	.word	0x40020058
 80033cc:	40020070 	.word	0x40020070
 80033d0:	40020088 	.word	0x40020088
 80033d4:	400200a0 	.word	0x400200a0
 80033d8:	400200b8 	.word	0x400200b8
 80033dc:	40020410 	.word	0x40020410
 80033e0:	40020428 	.word	0x40020428
 80033e4:	40020440 	.word	0x40020440
 80033e8:	40020458 	.word	0x40020458
 80033ec:	40020470 	.word	0x40020470
 80033f0:	40020488 	.word	0x40020488
 80033f4:	400204a0 	.word	0x400204a0
 80033f8:	400204b8 	.word	0x400204b8
 80033fc:	58025408 	.word	0x58025408
 8003400:	5802541c 	.word	0x5802541c
 8003404:	58025430 	.word	0x58025430
 8003408:	58025444 	.word	0x58025444
 800340c:	58025458 	.word	0x58025458
 8003410:	5802546c 	.word	0x5802546c
 8003414:	58025480 	.word	0x58025480
 8003418:	58025494 	.word	0x58025494

0800341c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e226      	b.n	8003886 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_DMA_Start_IT+0x2a>
 8003442:	2302      	movs	r3, #2
 8003444:	e21f      	b.n	8003886 <HAL_DMA_Start_IT+0x46a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	f040 820a 	bne.w	8003870 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a68      	ldr	r2, [pc, #416]	@ (8003610 <HAL_DMA_Start_IT+0x1f4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a66      	ldr	r2, [pc, #408]	@ (8003614 <HAL_DMA_Start_IT+0x1f8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a65      	ldr	r2, [pc, #404]	@ (8003618 <HAL_DMA_Start_IT+0x1fc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a63      	ldr	r2, [pc, #396]	@ (800361c <HAL_DMA_Start_IT+0x200>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a62      	ldr	r2, [pc, #392]	@ (8003620 <HAL_DMA_Start_IT+0x204>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a60      	ldr	r2, [pc, #384]	@ (8003624 <HAL_DMA_Start_IT+0x208>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003628 <HAL_DMA_Start_IT+0x20c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a5d      	ldr	r2, [pc, #372]	@ (800362c <HAL_DMA_Start_IT+0x210>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a5c      	ldr	r2, [pc, #368]	@ (8003630 <HAL_DMA_Start_IT+0x214>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003634 <HAL_DMA_Start_IT+0x218>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a59      	ldr	r2, [pc, #356]	@ (8003638 <HAL_DMA_Start_IT+0x21c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a57      	ldr	r2, [pc, #348]	@ (800363c <HAL_DMA_Start_IT+0x220>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a56      	ldr	r2, [pc, #344]	@ (8003640 <HAL_DMA_Start_IT+0x224>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a54      	ldr	r2, [pc, #336]	@ (8003644 <HAL_DMA_Start_IT+0x228>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a53      	ldr	r2, [pc, #332]	@ (8003648 <HAL_DMA_Start_IT+0x22c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_Start_IT+0xee>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a51      	ldr	r2, [pc, #324]	@ (800364c <HAL_DMA_Start_IT+0x230>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <HAL_DMA_Start_IT+0x100>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_DMA_Start_IT+0x110>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f001 fe78 	bl	8005228 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a34      	ldr	r2, [pc, #208]	@ (8003610 <HAL_DMA_Start_IT+0x1f4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a33      	ldr	r2, [pc, #204]	@ (8003614 <HAL_DMA_Start_IT+0x1f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a31      	ldr	r2, [pc, #196]	@ (8003618 <HAL_DMA_Start_IT+0x1fc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a30      	ldr	r2, [pc, #192]	@ (800361c <HAL_DMA_Start_IT+0x200>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2e      	ldr	r2, [pc, #184]	@ (8003620 <HAL_DMA_Start_IT+0x204>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2d      	ldr	r2, [pc, #180]	@ (8003624 <HAL_DMA_Start_IT+0x208>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2b      	ldr	r2, [pc, #172]	@ (8003628 <HAL_DMA_Start_IT+0x20c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2a      	ldr	r2, [pc, #168]	@ (800362c <HAL_DMA_Start_IT+0x210>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a28      	ldr	r2, [pc, #160]	@ (8003630 <HAL_DMA_Start_IT+0x214>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a27      	ldr	r2, [pc, #156]	@ (8003634 <HAL_DMA_Start_IT+0x218>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a25      	ldr	r2, [pc, #148]	@ (8003638 <HAL_DMA_Start_IT+0x21c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a24      	ldr	r2, [pc, #144]	@ (800363c <HAL_DMA_Start_IT+0x220>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a22      	ldr	r2, [pc, #136]	@ (8003640 <HAL_DMA_Start_IT+0x224>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <HAL_DMA_Start_IT+0x228>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <HAL_DMA_Start_IT+0x22c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_Start_IT+0x1bc>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <HAL_DMA_Start_IT+0x230>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_DMA_Start_IT+0x1c0>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_DMA_Start_IT+0x1c2>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d036      	beq.n	8003650 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 021e 	bic.w	r2, r3, #30
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0216 	orr.w	r2, r2, #22
 80035f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d03e      	beq.n	800367c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0208 	orr.w	r2, r2, #8
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e035      	b.n	800367c <HAL_DMA_Start_IT+0x260>
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 020e 	bic.w	r2, r3, #14
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 020a 	orr.w	r2, r2, #10
 8003662:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0204 	orr.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	@ (8003890 <HAL_DMA_Start_IT+0x474>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d072      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a82      	ldr	r2, [pc, #520]	@ (8003894 <HAL_DMA_Start_IT+0x478>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d06d      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a80      	ldr	r2, [pc, #512]	@ (8003898 <HAL_DMA_Start_IT+0x47c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d068      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7f      	ldr	r2, [pc, #508]	@ (800389c <HAL_DMA_Start_IT+0x480>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d063      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7d      	ldr	r2, [pc, #500]	@ (80038a0 <HAL_DMA_Start_IT+0x484>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d05e      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_DMA_Start_IT+0x488>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d059      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7a      	ldr	r2, [pc, #488]	@ (80038a8 <HAL_DMA_Start_IT+0x48c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d054      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a79      	ldr	r2, [pc, #484]	@ (80038ac <HAL_DMA_Start_IT+0x490>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d04f      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a77      	ldr	r2, [pc, #476]	@ (80038b0 <HAL_DMA_Start_IT+0x494>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04a      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a76      	ldr	r2, [pc, #472]	@ (80038b4 <HAL_DMA_Start_IT+0x498>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d045      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a74      	ldr	r2, [pc, #464]	@ (80038b8 <HAL_DMA_Start_IT+0x49c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d040      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	@ (80038bc <HAL_DMA_Start_IT+0x4a0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d03b      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a71      	ldr	r2, [pc, #452]	@ (80038c0 <HAL_DMA_Start_IT+0x4a4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d036      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a70      	ldr	r2, [pc, #448]	@ (80038c4 <HAL_DMA_Start_IT+0x4a8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d031      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	@ (80038c8 <HAL_DMA_Start_IT+0x4ac>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02c      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a6d      	ldr	r2, [pc, #436]	@ (80038cc <HAL_DMA_Start_IT+0x4b0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d027      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6b      	ldr	r2, [pc, #428]	@ (80038d0 <HAL_DMA_Start_IT+0x4b4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6a      	ldr	r2, [pc, #424]	@ (80038d4 <HAL_DMA_Start_IT+0x4b8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d01d      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a68      	ldr	r2, [pc, #416]	@ (80038d8 <HAL_DMA_Start_IT+0x4bc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a67      	ldr	r2, [pc, #412]	@ (80038dc <HAL_DMA_Start_IT+0x4c0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <HAL_DMA_Start_IT+0x4c4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a64      	ldr	r2, [pc, #400]	@ (80038e4 <HAL_DMA_Start_IT+0x4c8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a62      	ldr	r2, [pc, #392]	@ (80038e8 <HAL_DMA_Start_IT+0x4cc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_DMA_Start_IT+0x350>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a61      	ldr	r2, [pc, #388]	@ (80038ec <HAL_DMA_Start_IT+0x4d0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_DMA_Start_IT+0x354>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_DMA_Start_IT+0x356>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01a      	beq.n	80037ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003792:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a37      	ldr	r2, [pc, #220]	@ (8003890 <HAL_DMA_Start_IT+0x474>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a36      	ldr	r2, [pc, #216]	@ (8003894 <HAL_DMA_Start_IT+0x478>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a34      	ldr	r2, [pc, #208]	@ (8003898 <HAL_DMA_Start_IT+0x47c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a33      	ldr	r2, [pc, #204]	@ (800389c <HAL_DMA_Start_IT+0x480>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a31      	ldr	r2, [pc, #196]	@ (80038a0 <HAL_DMA_Start_IT+0x484>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a30      	ldr	r2, [pc, #192]	@ (80038a4 <HAL_DMA_Start_IT+0x488>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	@ (80038a8 <HAL_DMA_Start_IT+0x48c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <HAL_DMA_Start_IT+0x490>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <HAL_DMA_Start_IT+0x494>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	@ (80038b4 <HAL_DMA_Start_IT+0x498>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a28      	ldr	r2, [pc, #160]	@ (80038b8 <HAL_DMA_Start_IT+0x49c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_DMA_Start_IT+0x4a0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a25      	ldr	r2, [pc, #148]	@ (80038c0 <HAL_DMA_Start_IT+0x4a4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a24      	ldr	r2, [pc, #144]	@ (80038c4 <HAL_DMA_Start_IT+0x4a8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	@ (80038c8 <HAL_DMA_Start_IT+0x4ac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Start_IT+0x430>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a21      	ldr	r2, [pc, #132]	@ (80038cc <HAL_DMA_Start_IT+0x4b0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <HAL_DMA_Start_IT+0x442>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e012      	b.n	8003884 <HAL_DMA_Start_IT+0x468>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e009      	b.n	8003884 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40020010 	.word	0x40020010
 8003894:	40020028 	.word	0x40020028
 8003898:	40020040 	.word	0x40020040
 800389c:	40020058 	.word	0x40020058
 80038a0:	40020070 	.word	0x40020070
 80038a4:	40020088 	.word	0x40020088
 80038a8:	400200a0 	.word	0x400200a0
 80038ac:	400200b8 	.word	0x400200b8
 80038b0:	40020410 	.word	0x40020410
 80038b4:	40020428 	.word	0x40020428
 80038b8:	40020440 	.word	0x40020440
 80038bc:	40020458 	.word	0x40020458
 80038c0:	40020470 	.word	0x40020470
 80038c4:	40020488 	.word	0x40020488
 80038c8:	400204a0 	.word	0x400204a0
 80038cc:	400204b8 	.word	0x400204b8
 80038d0:	58025408 	.word	0x58025408
 80038d4:	5802541c 	.word	0x5802541c
 80038d8:	58025430 	.word	0x58025430
 80038dc:	58025444 	.word	0x58025444
 80038e0:	58025458 	.word	0x58025458
 80038e4:	5802546c 	.word	0x5802546c
 80038e8:	58025480 	.word	0x58025480
 80038ec:	58025494 	.word	0x58025494

080038f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7fe fd7a 	bl	80023f0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e2dc      	b.n	8003ec2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d008      	beq.n	8003926 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e2cd      	b.n	8003ec2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a76      	ldr	r2, [pc, #472]	@ (8003b04 <HAL_DMA_Abort+0x214>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d04a      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a74      	ldr	r2, [pc, #464]	@ (8003b08 <HAL_DMA_Abort+0x218>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d045      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a73      	ldr	r2, [pc, #460]	@ (8003b0c <HAL_DMA_Abort+0x21c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d040      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a71      	ldr	r2, [pc, #452]	@ (8003b10 <HAL_DMA_Abort+0x220>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d03b      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a70      	ldr	r2, [pc, #448]	@ (8003b14 <HAL_DMA_Abort+0x224>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d036      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b18 <HAL_DMA_Abort+0x228>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d031      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6d      	ldr	r2, [pc, #436]	@ (8003b1c <HAL_DMA_Abort+0x22c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d02c      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6b      	ldr	r2, [pc, #428]	@ (8003b20 <HAL_DMA_Abort+0x230>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d027      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6a      	ldr	r2, [pc, #424]	@ (8003b24 <HAL_DMA_Abort+0x234>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d022      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a68      	ldr	r2, [pc, #416]	@ (8003b28 <HAL_DMA_Abort+0x238>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01d      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a67      	ldr	r2, [pc, #412]	@ (8003b2c <HAL_DMA_Abort+0x23c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d018      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a65      	ldr	r2, [pc, #404]	@ (8003b30 <HAL_DMA_Abort+0x240>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a64      	ldr	r2, [pc, #400]	@ (8003b34 <HAL_DMA_Abort+0x244>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a62      	ldr	r2, [pc, #392]	@ (8003b38 <HAL_DMA_Abort+0x248>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a61      	ldr	r2, [pc, #388]	@ (8003b3c <HAL_DMA_Abort+0x24c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_DMA_Abort+0xd6>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003b40 <HAL_DMA_Abort+0x250>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_DMA_Abort+0xda>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_DMA_Abort+0xdc>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 021e 	bic.w	r2, r2, #30
 80039de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e00a      	b.n	8003a0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 020e 	bic.w	r2, r2, #14
 8003a06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3c      	ldr	r2, [pc, #240]	@ (8003b04 <HAL_DMA_Abort+0x214>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d072      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b08 <HAL_DMA_Abort+0x218>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d06d      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a39      	ldr	r2, [pc, #228]	@ (8003b0c <HAL_DMA_Abort+0x21c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d068      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a37      	ldr	r2, [pc, #220]	@ (8003b10 <HAL_DMA_Abort+0x220>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d063      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a36      	ldr	r2, [pc, #216]	@ (8003b14 <HAL_DMA_Abort+0x224>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d05e      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a34      	ldr	r2, [pc, #208]	@ (8003b18 <HAL_DMA_Abort+0x228>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d059      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a33      	ldr	r2, [pc, #204]	@ (8003b1c <HAL_DMA_Abort+0x22c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d054      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a31      	ldr	r2, [pc, #196]	@ (8003b20 <HAL_DMA_Abort+0x230>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04f      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a30      	ldr	r2, [pc, #192]	@ (8003b24 <HAL_DMA_Abort+0x234>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b28 <HAL_DMA_Abort+0x238>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <HAL_DMA_Abort+0x23c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_DMA_Abort+0x240>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b34 <HAL_DMA_Abort+0x244>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a28      	ldr	r2, [pc, #160]	@ (8003b38 <HAL_DMA_Abort+0x248>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a27      	ldr	r2, [pc, #156]	@ (8003b3c <HAL_DMA_Abort+0x24c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	@ (8003b40 <HAL_DMA_Abort+0x250>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <HAL_DMA_Abort+0x254>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a22      	ldr	r2, [pc, #136]	@ (8003b48 <HAL_DMA_Abort+0x258>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <HAL_DMA_Abort+0x25c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b50 <HAL_DMA_Abort+0x260>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	@ (8003b54 <HAL_DMA_Abort+0x264>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b58 <HAL_DMA_Abort+0x268>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1b      	ldr	r2, [pc, #108]	@ (8003b5c <HAL_DMA_Abort+0x26c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_Abort+0x20e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_DMA_Abort+0x270>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d132      	bne.n	8003b64 <HAL_DMA_Abort+0x274>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e031      	b.n	8003b66 <HAL_DMA_Abort+0x276>
 8003b02:	bf00      	nop
 8003b04:	40020010 	.word	0x40020010
 8003b08:	40020028 	.word	0x40020028
 8003b0c:	40020040 	.word	0x40020040
 8003b10:	40020058 	.word	0x40020058
 8003b14:	40020070 	.word	0x40020070
 8003b18:	40020088 	.word	0x40020088
 8003b1c:	400200a0 	.word	0x400200a0
 8003b20:	400200b8 	.word	0x400200b8
 8003b24:	40020410 	.word	0x40020410
 8003b28:	40020428 	.word	0x40020428
 8003b2c:	40020440 	.word	0x40020440
 8003b30:	40020458 	.word	0x40020458
 8003b34:	40020470 	.word	0x40020470
 8003b38:	40020488 	.word	0x40020488
 8003b3c:	400204a0 	.word	0x400204a0
 8003b40:	400204b8 	.word	0x400204b8
 8003b44:	58025408 	.word	0x58025408
 8003b48:	5802541c 	.word	0x5802541c
 8003b4c:	58025430 	.word	0x58025430
 8003b50:	58025444 	.word	0x58025444
 8003b54:	58025458 	.word	0x58025458
 8003b58:	5802546c 	.word	0x5802546c
 8003b5c:	58025480 	.word	0x58025480
 8003b60:	58025494 	.word	0x58025494
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8003d34 <HAL_DMA_Abort+0x444>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04a      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6b      	ldr	r2, [pc, #428]	@ (8003d38 <HAL_DMA_Abort+0x448>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d045      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6a      	ldr	r2, [pc, #424]	@ (8003d3c <HAL_DMA_Abort+0x44c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	@ (8003d40 <HAL_DMA_Abort+0x450>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d03b      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a67      	ldr	r2, [pc, #412]	@ (8003d44 <HAL_DMA_Abort+0x454>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d036      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a65      	ldr	r2, [pc, #404]	@ (8003d48 <HAL_DMA_Abort+0x458>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d031      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a64      	ldr	r2, [pc, #400]	@ (8003d4c <HAL_DMA_Abort+0x45c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d02c      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a62      	ldr	r2, [pc, #392]	@ (8003d50 <HAL_DMA_Abort+0x460>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d027      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a61      	ldr	r2, [pc, #388]	@ (8003d54 <HAL_DMA_Abort+0x464>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a5f      	ldr	r2, [pc, #380]	@ (8003d58 <HAL_DMA_Abort+0x468>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d5c <HAL_DMA_Abort+0x46c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d018      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a5c      	ldr	r2, [pc, #368]	@ (8003d60 <HAL_DMA_Abort+0x470>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d64 <HAL_DMA_Abort+0x474>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a59      	ldr	r2, [pc, #356]	@ (8003d68 <HAL_DMA_Abort+0x478>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a58      	ldr	r2, [pc, #352]	@ (8003d6c <HAL_DMA_Abort+0x47c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_DMA_Abort+0x32a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a56      	ldr	r2, [pc, #344]	@ (8003d70 <HAL_DMA_Abort+0x480>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <HAL_DMA_Abort+0x33c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0201 	bic.w	r2, r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e007      	b.n	8003c3c <HAL_DMA_Abort+0x34c>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c3c:	e013      	b.n	8003c66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c3e:	f7fe fbd7 	bl	80023f0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d90c      	bls.n	8003c66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2203      	movs	r2, #3
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e12d      	b.n	8003ec2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	@ (8003d34 <HAL_DMA_Abort+0x444>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04a      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2d      	ldr	r2, [pc, #180]	@ (8003d38 <HAL_DMA_Abort+0x448>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d045      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d3c <HAL_DMA_Abort+0x44c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d040      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	@ (8003d40 <HAL_DMA_Abort+0x450>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d03b      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a29      	ldr	r2, [pc, #164]	@ (8003d44 <HAL_DMA_Abort+0x454>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d036      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a27      	ldr	r2, [pc, #156]	@ (8003d48 <HAL_DMA_Abort+0x458>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d031      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a26      	ldr	r2, [pc, #152]	@ (8003d4c <HAL_DMA_Abort+0x45c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d02c      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a24      	ldr	r2, [pc, #144]	@ (8003d50 <HAL_DMA_Abort+0x460>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d027      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <HAL_DMA_Abort+0x464>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <HAL_DMA_Abort+0x468>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a20      	ldr	r2, [pc, #128]	@ (8003d5c <HAL_DMA_Abort+0x46c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d018      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <HAL_DMA_Abort+0x470>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <HAL_DMA_Abort+0x474>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d68 <HAL_DMA_Abort+0x478>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	@ (8003d6c <HAL_DMA_Abort+0x47c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_DMA_Abort+0x422>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	@ (8003d70 <HAL_DMA_Abort+0x480>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_DMA_Abort+0x426>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_DMA_Abort+0x428>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d02b      	beq.n	8003d74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	223f      	movs	r2, #63	@ 0x3f
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	609a      	str	r2, [r3, #8]
 8003d32:	e02a      	b.n	8003d8a <HAL_DMA_Abort+0x49a>
 8003d34:	40020010 	.word	0x40020010
 8003d38:	40020028 	.word	0x40020028
 8003d3c:	40020040 	.word	0x40020040
 8003d40:	40020058 	.word	0x40020058
 8003d44:	40020070 	.word	0x40020070
 8003d48:	40020088 	.word	0x40020088
 8003d4c:	400200a0 	.word	0x400200a0
 8003d50:	400200b8 	.word	0x400200b8
 8003d54:	40020410 	.word	0x40020410
 8003d58:	40020428 	.word	0x40020428
 8003d5c:	40020440 	.word	0x40020440
 8003d60:	40020458 	.word	0x40020458
 8003d64:	40020470 	.word	0x40020470
 8003d68:	40020488 	.word	0x40020488
 8003d6c:	400204a0 	.word	0x400204a0
 8003d70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2201      	movs	r2, #1
 8003d84:	409a      	lsls	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a4f      	ldr	r2, [pc, #316]	@ (8003ecc <HAL_DMA_Abort+0x5dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d072      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4d      	ldr	r2, [pc, #308]	@ (8003ed0 <HAL_DMA_Abort+0x5e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d06d      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ed4 <HAL_DMA_Abort+0x5e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d068      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed8 <HAL_DMA_Abort+0x5e8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d063      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a49      	ldr	r2, [pc, #292]	@ (8003edc <HAL_DMA_Abort+0x5ec>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d05e      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a47      	ldr	r2, [pc, #284]	@ (8003ee0 <HAL_DMA_Abort+0x5f0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d059      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a46      	ldr	r2, [pc, #280]	@ (8003ee4 <HAL_DMA_Abort+0x5f4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d054      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a44      	ldr	r2, [pc, #272]	@ (8003ee8 <HAL_DMA_Abort+0x5f8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d04f      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a43      	ldr	r2, [pc, #268]	@ (8003eec <HAL_DMA_Abort+0x5fc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d04a      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a41      	ldr	r2, [pc, #260]	@ (8003ef0 <HAL_DMA_Abort+0x600>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d045      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a40      	ldr	r2, [pc, #256]	@ (8003ef4 <HAL_DMA_Abort+0x604>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d040      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef8 <HAL_DMA_Abort+0x608>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d03b      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a3d      	ldr	r2, [pc, #244]	@ (8003efc <HAL_DMA_Abort+0x60c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d036      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3b      	ldr	r2, [pc, #236]	@ (8003f00 <HAL_DMA_Abort+0x610>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3a      	ldr	r2, [pc, #232]	@ (8003f04 <HAL_DMA_Abort+0x614>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d02c      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <HAL_DMA_Abort+0x618>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a37      	ldr	r2, [pc, #220]	@ (8003f0c <HAL_DMA_Abort+0x61c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a35      	ldr	r2, [pc, #212]	@ (8003f10 <HAL_DMA_Abort+0x620>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a34      	ldr	r2, [pc, #208]	@ (8003f14 <HAL_DMA_Abort+0x624>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a32      	ldr	r2, [pc, #200]	@ (8003f18 <HAL_DMA_Abort+0x628>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a31      	ldr	r2, [pc, #196]	@ (8003f1c <HAL_DMA_Abort+0x62c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	@ (8003f20 <HAL_DMA_Abort+0x630>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <HAL_DMA_Abort+0x634>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_Abort+0x58a>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	@ (8003f28 <HAL_DMA_Abort+0x638>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Abort+0x58e>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_DMA_Abort+0x590>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003e8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00c      	beq.n	8003eb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	40020040 	.word	0x40020040
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020088 	.word	0x40020088
 8003ee4:	400200a0 	.word	0x400200a0
 8003ee8:	400200b8 	.word	0x400200b8
 8003eec:	40020410 	.word	0x40020410
 8003ef0:	40020428 	.word	0x40020428
 8003ef4:	40020440 	.word	0x40020440
 8003ef8:	40020458 	.word	0x40020458
 8003efc:	40020470 	.word	0x40020470
 8003f00:	40020488 	.word	0x40020488
 8003f04:	400204a0 	.word	0x400204a0
 8003f08:	400204b8 	.word	0x400204b8
 8003f0c:	58025408 	.word	0x58025408
 8003f10:	5802541c 	.word	0x5802541c
 8003f14:	58025430 	.word	0x58025430
 8003f18:	58025444 	.word	0x58025444
 8003f1c:	58025458 	.word	0x58025458
 8003f20:	5802546c 	.word	0x5802546c
 8003f24:	58025480 	.word	0x58025480
 8003f28:	58025494 	.word	0x58025494

08003f2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e237      	b.n	80043ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2280      	movs	r2, #128	@ 0x80
 8003f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e22c      	b.n	80043ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5c      	ldr	r2, [pc, #368]	@ (80040cc <HAL_DMA_Abort_IT+0x1a0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d04a      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a5b      	ldr	r2, [pc, #364]	@ (80040d0 <HAL_DMA_Abort_IT+0x1a4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d045      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a59      	ldr	r2, [pc, #356]	@ (80040d4 <HAL_DMA_Abort_IT+0x1a8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d040      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_DMA_Abort_IT+0x1ac>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d03b      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a56      	ldr	r2, [pc, #344]	@ (80040dc <HAL_DMA_Abort_IT+0x1b0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d036      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a55      	ldr	r2, [pc, #340]	@ (80040e0 <HAL_DMA_Abort_IT+0x1b4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d031      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a53      	ldr	r2, [pc, #332]	@ (80040e4 <HAL_DMA_Abort_IT+0x1b8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d02c      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_DMA_Abort_IT+0x1bc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d027      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a50      	ldr	r2, [pc, #320]	@ (80040ec <HAL_DMA_Abort_IT+0x1c0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80040f0 <HAL_DMA_Abort_IT+0x1c4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80040f4 <HAL_DMA_Abort_IT+0x1c8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4c      	ldr	r2, [pc, #304]	@ (80040f8 <HAL_DMA_Abort_IT+0x1cc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80040fc <HAL_DMA_Abort_IT+0x1d0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a49      	ldr	r2, [pc, #292]	@ (8004100 <HAL_DMA_Abort_IT+0x1d4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a47      	ldr	r2, [pc, #284]	@ (8004104 <HAL_DMA_Abort_IT+0x1d8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0xc8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a46      	ldr	r2, [pc, #280]	@ (8004108 <HAL_DMA_Abort_IT+0x1dc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_DMA_Abort_IT+0xcc>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_DMA_Abort_IT+0xce>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8086 	beq.w	800410c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2204      	movs	r2, #4
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2f      	ldr	r2, [pc, #188]	@ (80040cc <HAL_DMA_Abort_IT+0x1a0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d04a      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2e      	ldr	r2, [pc, #184]	@ (80040d0 <HAL_DMA_Abort_IT+0x1a4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d045      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2c      	ldr	r2, [pc, #176]	@ (80040d4 <HAL_DMA_Abort_IT+0x1a8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d040      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2b      	ldr	r2, [pc, #172]	@ (80040d8 <HAL_DMA_Abort_IT+0x1ac>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d03b      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a29      	ldr	r2, [pc, #164]	@ (80040dc <HAL_DMA_Abort_IT+0x1b0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d036      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a28      	ldr	r2, [pc, #160]	@ (80040e0 <HAL_DMA_Abort_IT+0x1b4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d031      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a26      	ldr	r2, [pc, #152]	@ (80040e4 <HAL_DMA_Abort_IT+0x1b8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d02c      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a25      	ldr	r2, [pc, #148]	@ (80040e8 <HAL_DMA_Abort_IT+0x1bc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d027      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a23      	ldr	r2, [pc, #140]	@ (80040ec <HAL_DMA_Abort_IT+0x1c0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d022      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a22      	ldr	r2, [pc, #136]	@ (80040f0 <HAL_DMA_Abort_IT+0x1c4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d01d      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <HAL_DMA_Abort_IT+0x1c8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d018      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1f      	ldr	r2, [pc, #124]	@ (80040f8 <HAL_DMA_Abort_IT+0x1cc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d013      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <HAL_DMA_Abort_IT+0x1d0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00e      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <HAL_DMA_Abort_IT+0x1d4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d009      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1a      	ldr	r2, [pc, #104]	@ (8004104 <HAL_DMA_Abort_IT+0x1d8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x17c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <HAL_DMA_Abort_IT+0x1dc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d108      	bne.n	80040ba <HAL_DMA_Abort_IT+0x18e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e178      	b.n	80043ac <HAL_DMA_Abort_IT+0x480>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e16f      	b.n	80043ac <HAL_DMA_Abort_IT+0x480>
 80040cc:	40020010 	.word	0x40020010
 80040d0:	40020028 	.word	0x40020028
 80040d4:	40020040 	.word	0x40020040
 80040d8:	40020058 	.word	0x40020058
 80040dc:	40020070 	.word	0x40020070
 80040e0:	40020088 	.word	0x40020088
 80040e4:	400200a0 	.word	0x400200a0
 80040e8:	400200b8 	.word	0x400200b8
 80040ec:	40020410 	.word	0x40020410
 80040f0:	40020428 	.word	0x40020428
 80040f4:	40020440 	.word	0x40020440
 80040f8:	40020458 	.word	0x40020458
 80040fc:	40020470 	.word	0x40020470
 8004100:	40020488 	.word	0x40020488
 8004104:	400204a0 	.word	0x400204a0
 8004108:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 020e 	bic.w	r2, r2, #14
 800411a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6c      	ldr	r2, [pc, #432]	@ (80042d4 <HAL_DMA_Abort_IT+0x3a8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d04a      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6b      	ldr	r2, [pc, #428]	@ (80042d8 <HAL_DMA_Abort_IT+0x3ac>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d045      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a69      	ldr	r2, [pc, #420]	@ (80042dc <HAL_DMA_Abort_IT+0x3b0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d040      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a68      	ldr	r2, [pc, #416]	@ (80042e0 <HAL_DMA_Abort_IT+0x3b4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03b      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a66      	ldr	r2, [pc, #408]	@ (80042e4 <HAL_DMA_Abort_IT+0x3b8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d036      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a65      	ldr	r2, [pc, #404]	@ (80042e8 <HAL_DMA_Abort_IT+0x3bc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d031      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a63      	ldr	r2, [pc, #396]	@ (80042ec <HAL_DMA_Abort_IT+0x3c0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02c      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a62      	ldr	r2, [pc, #392]	@ (80042f0 <HAL_DMA_Abort_IT+0x3c4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d027      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a60      	ldr	r2, [pc, #384]	@ (80042f4 <HAL_DMA_Abort_IT+0x3c8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a5f      	ldr	r2, [pc, #380]	@ (80042f8 <HAL_DMA_Abort_IT+0x3cc>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01d      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5d      	ldr	r2, [pc, #372]	@ (80042fc <HAL_DMA_Abort_IT+0x3d0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5c      	ldr	r2, [pc, #368]	@ (8004300 <HAL_DMA_Abort_IT+0x3d4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a5a      	ldr	r2, [pc, #360]	@ (8004304 <HAL_DMA_Abort_IT+0x3d8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a59      	ldr	r2, [pc, #356]	@ (8004308 <HAL_DMA_Abort_IT+0x3dc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a57      	ldr	r2, [pc, #348]	@ (800430c <HAL_DMA_Abort_IT+0x3e0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_DMA_Abort_IT+0x290>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a56      	ldr	r2, [pc, #344]	@ (8004310 <HAL_DMA_Abort_IT+0x3e4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <HAL_DMA_Abort_IT+0x2a2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e007      	b.n	80041de <HAL_DMA_Abort_IT+0x2b2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a3c      	ldr	r2, [pc, #240]	@ (80042d4 <HAL_DMA_Abort_IT+0x3a8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d072      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3a      	ldr	r2, [pc, #232]	@ (80042d8 <HAL_DMA_Abort_IT+0x3ac>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d06d      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a39      	ldr	r2, [pc, #228]	@ (80042dc <HAL_DMA_Abort_IT+0x3b0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d068      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a37      	ldr	r2, [pc, #220]	@ (80042e0 <HAL_DMA_Abort_IT+0x3b4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d063      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a36      	ldr	r2, [pc, #216]	@ (80042e4 <HAL_DMA_Abort_IT+0x3b8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d05e      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a34      	ldr	r2, [pc, #208]	@ (80042e8 <HAL_DMA_Abort_IT+0x3bc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d059      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a33      	ldr	r2, [pc, #204]	@ (80042ec <HAL_DMA_Abort_IT+0x3c0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d054      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a31      	ldr	r2, [pc, #196]	@ (80042f0 <HAL_DMA_Abort_IT+0x3c4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d04f      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a30      	ldr	r2, [pc, #192]	@ (80042f4 <HAL_DMA_Abort_IT+0x3c8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04a      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2e      	ldr	r2, [pc, #184]	@ (80042f8 <HAL_DMA_Abort_IT+0x3cc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d045      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a2d      	ldr	r2, [pc, #180]	@ (80042fc <HAL_DMA_Abort_IT+0x3d0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d040      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2b      	ldr	r2, [pc, #172]	@ (8004300 <HAL_DMA_Abort_IT+0x3d4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2a      	ldr	r2, [pc, #168]	@ (8004304 <HAL_DMA_Abort_IT+0x3d8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d036      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <HAL_DMA_Abort_IT+0x3dc>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a27      	ldr	r2, [pc, #156]	@ (800430c <HAL_DMA_Abort_IT+0x3e0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d02c      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a25      	ldr	r2, [pc, #148]	@ (8004310 <HAL_DMA_Abort_IT+0x3e4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d027      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a24      	ldr	r2, [pc, #144]	@ (8004314 <HAL_DMA_Abort_IT+0x3e8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a22      	ldr	r2, [pc, #136]	@ (8004318 <HAL_DMA_Abort_IT+0x3ec>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a21      	ldr	r2, [pc, #132]	@ (800431c <HAL_DMA_Abort_IT+0x3f0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <HAL_DMA_Abort_IT+0x3f4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <HAL_DMA_Abort_IT+0x3f8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <HAL_DMA_Abort_IT+0x3fc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <HAL_DMA_Abort_IT+0x400>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_Abort_IT+0x3a2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a19      	ldr	r2, [pc, #100]	@ (8004330 <HAL_DMA_Abort_IT+0x404>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d132      	bne.n	8004334 <HAL_DMA_Abort_IT+0x408>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e031      	b.n	8004336 <HAL_DMA_Abort_IT+0x40a>
 80042d2:	bf00      	nop
 80042d4:	40020010 	.word	0x40020010
 80042d8:	40020028 	.word	0x40020028
 80042dc:	40020040 	.word	0x40020040
 80042e0:	40020058 	.word	0x40020058
 80042e4:	40020070 	.word	0x40020070
 80042e8:	40020088 	.word	0x40020088
 80042ec:	400200a0 	.word	0x400200a0
 80042f0:	400200b8 	.word	0x400200b8
 80042f4:	40020410 	.word	0x40020410
 80042f8:	40020428 	.word	0x40020428
 80042fc:	40020440 	.word	0x40020440
 8004300:	40020458 	.word	0x40020458
 8004304:	40020470 	.word	0x40020470
 8004308:	40020488 	.word	0x40020488
 800430c:	400204a0 	.word	0x400204a0
 8004310:	400204b8 	.word	0x400204b8
 8004314:	58025408 	.word	0x58025408
 8004318:	5802541c 	.word	0x5802541c
 800431c:	58025430 	.word	0x58025430
 8004320:	58025444 	.word	0x58025444
 8004324:	58025458 	.word	0x58025458
 8004328:	5802546c 	.word	0x5802546c
 800432c:	58025480 	.word	0x58025480
 8004330:	58025494 	.word	0x58025494
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d028      	beq.n	800438c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004344:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004348:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2201      	movs	r2, #1
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004368:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800437c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004380:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800438a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop

080043b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	@ 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043c4:	4b67      	ldr	r3, [pc, #412]	@ (8004564 <HAL_DMA_IRQHandler+0x1ac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a67      	ldr	r2, [pc, #412]	@ (8004568 <HAL_DMA_IRQHandler+0x1b0>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0a9b      	lsrs	r3, r3, #10
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5f      	ldr	r2, [pc, #380]	@ (800456c <HAL_DMA_IRQHandler+0x1b4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d04a      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004570 <HAL_DMA_IRQHandler+0x1b8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d045      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a5c      	ldr	r2, [pc, #368]	@ (8004574 <HAL_DMA_IRQHandler+0x1bc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d040      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5a      	ldr	r2, [pc, #360]	@ (8004578 <HAL_DMA_IRQHandler+0x1c0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d03b      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a59      	ldr	r2, [pc, #356]	@ (800457c <HAL_DMA_IRQHandler+0x1c4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d036      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a57      	ldr	r2, [pc, #348]	@ (8004580 <HAL_DMA_IRQHandler+0x1c8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d031      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a56      	ldr	r2, [pc, #344]	@ (8004584 <HAL_DMA_IRQHandler+0x1cc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d02c      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a54      	ldr	r2, [pc, #336]	@ (8004588 <HAL_DMA_IRQHandler+0x1d0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d027      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a53      	ldr	r2, [pc, #332]	@ (800458c <HAL_DMA_IRQHandler+0x1d4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a51      	ldr	r2, [pc, #324]	@ (8004590 <HAL_DMA_IRQHandler+0x1d8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01d      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a50      	ldr	r2, [pc, #320]	@ (8004594 <HAL_DMA_IRQHandler+0x1dc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a4e      	ldr	r2, [pc, #312]	@ (8004598 <HAL_DMA_IRQHandler+0x1e0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a4d      	ldr	r2, [pc, #308]	@ (800459c <HAL_DMA_IRQHandler+0x1e4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a4b      	ldr	r2, [pc, #300]	@ (80045a0 <HAL_DMA_IRQHandler+0x1e8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a4a      	ldr	r2, [pc, #296]	@ (80045a4 <HAL_DMA_IRQHandler+0x1ec>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_DMA_IRQHandler+0xd2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a48      	ldr	r2, [pc, #288]	@ (80045a8 <HAL_DMA_IRQHandler+0x1f0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d101      	bne.n	800448e <HAL_DMA_IRQHandler+0xd6>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_DMA_IRQHandler+0xd8>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 842b 	beq.w	8004cec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2208      	movs	r2, #8
 80044a0:	409a      	lsls	r2, r3
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80a2 	beq.w	80045f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	@ (800456c <HAL_DMA_IRQHandler+0x1b4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d04a      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004570 <HAL_DMA_IRQHandler+0x1b8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d045      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <HAL_DMA_IRQHandler+0x1bc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d040      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <HAL_DMA_IRQHandler+0x1c0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03b      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a28      	ldr	r2, [pc, #160]	@ (800457c <HAL_DMA_IRQHandler+0x1c4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d036      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <HAL_DMA_IRQHandler+0x1c8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d031      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a25      	ldr	r2, [pc, #148]	@ (8004584 <HAL_DMA_IRQHandler+0x1cc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02c      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a24      	ldr	r2, [pc, #144]	@ (8004588 <HAL_DMA_IRQHandler+0x1d0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d027      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a22      	ldr	r2, [pc, #136]	@ (800458c <HAL_DMA_IRQHandler+0x1d4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a21      	ldr	r2, [pc, #132]	@ (8004590 <HAL_DMA_IRQHandler+0x1d8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	@ (8004594 <HAL_DMA_IRQHandler+0x1dc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <HAL_DMA_IRQHandler+0x1e0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <HAL_DMA_IRQHandler+0x1e4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_DMA_IRQHandler+0x1e8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_DMA_IRQHandler+0x1ec>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_DMA_IRQHandler+0x194>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_DMA_IRQHandler+0x1f0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d12f      	bne.n	80045ac <HAL_DMA_IRQHandler+0x1f4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	e02e      	b.n	80045c0 <HAL_DMA_IRQHandler+0x208>
 8004562:	bf00      	nop
 8004564:	24000004 	.word	0x24000004
 8004568:	1b4e81b5 	.word	0x1b4e81b5
 800456c:	40020010 	.word	0x40020010
 8004570:	40020028 	.word	0x40020028
 8004574:	40020040 	.word	0x40020040
 8004578:	40020058 	.word	0x40020058
 800457c:	40020070 	.word	0x40020070
 8004580:	40020088 	.word	0x40020088
 8004584:	400200a0 	.word	0x400200a0
 8004588:	400200b8 	.word	0x400200b8
 800458c:	40020410 	.word	0x40020410
 8004590:	40020428 	.word	0x40020428
 8004594:	40020440 	.word	0x40020440
 8004598:	40020458 	.word	0x40020458
 800459c:	40020470 	.word	0x40020470
 80045a0:	40020488 	.word	0x40020488
 80045a4:	400204a0 	.word	0x400204a0
 80045a8:	400204b8 	.word	0x400204b8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2208      	movs	r2, #8
 80045de:	409a      	lsls	r2, r3
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	f043 0201 	orr.w	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d06e      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a69      	ldr	r2, [pc, #420]	@ (80047b0 <HAL_DMA_IRQHandler+0x3f8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d04a      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a67      	ldr	r2, [pc, #412]	@ (80047b4 <HAL_DMA_IRQHandler+0x3fc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d045      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a66      	ldr	r2, [pc, #408]	@ (80047b8 <HAL_DMA_IRQHandler+0x400>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d040      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a64      	ldr	r2, [pc, #400]	@ (80047bc <HAL_DMA_IRQHandler+0x404>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d03b      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a63      	ldr	r2, [pc, #396]	@ (80047c0 <HAL_DMA_IRQHandler+0x408>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d036      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a61      	ldr	r2, [pc, #388]	@ (80047c4 <HAL_DMA_IRQHandler+0x40c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d031      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a60      	ldr	r2, [pc, #384]	@ (80047c8 <HAL_DMA_IRQHandler+0x410>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d02c      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5e      	ldr	r2, [pc, #376]	@ (80047cc <HAL_DMA_IRQHandler+0x414>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d027      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5d      	ldr	r2, [pc, #372]	@ (80047d0 <HAL_DMA_IRQHandler+0x418>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a5b      	ldr	r2, [pc, #364]	@ (80047d4 <HAL_DMA_IRQHandler+0x41c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a5a      	ldr	r2, [pc, #360]	@ (80047d8 <HAL_DMA_IRQHandler+0x420>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a58      	ldr	r2, [pc, #352]	@ (80047dc <HAL_DMA_IRQHandler+0x424>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a57      	ldr	r2, [pc, #348]	@ (80047e0 <HAL_DMA_IRQHandler+0x428>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a55      	ldr	r2, [pc, #340]	@ (80047e4 <HAL_DMA_IRQHandler+0x42c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a54      	ldr	r2, [pc, #336]	@ (80047e8 <HAL_DMA_IRQHandler+0x430>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x2ee>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a52      	ldr	r2, [pc, #328]	@ (80047ec <HAL_DMA_IRQHandler+0x434>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10a      	bne.n	80046bc <HAL_DMA_IRQHandler+0x304>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e003      	b.n	80046c4 <HAL_DMA_IRQHandler+0x30c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2201      	movs	r2, #1
 80046d2:	409a      	lsls	r2, r3
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f043 0202 	orr.w	r2, r3, #2
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2204      	movs	r2, #4
 80046ee:	409a      	lsls	r2, r3
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 808f 	beq.w	8004818 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2c      	ldr	r2, [pc, #176]	@ (80047b0 <HAL_DMA_IRQHandler+0x3f8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2a      	ldr	r2, [pc, #168]	@ (80047b4 <HAL_DMA_IRQHandler+0x3fc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a29      	ldr	r2, [pc, #164]	@ (80047b8 <HAL_DMA_IRQHandler+0x400>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a27      	ldr	r2, [pc, #156]	@ (80047bc <HAL_DMA_IRQHandler+0x404>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a26      	ldr	r2, [pc, #152]	@ (80047c0 <HAL_DMA_IRQHandler+0x408>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a24      	ldr	r2, [pc, #144]	@ (80047c4 <HAL_DMA_IRQHandler+0x40c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a23      	ldr	r2, [pc, #140]	@ (80047c8 <HAL_DMA_IRQHandler+0x410>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a21      	ldr	r2, [pc, #132]	@ (80047cc <HAL_DMA_IRQHandler+0x414>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a20      	ldr	r2, [pc, #128]	@ (80047d0 <HAL_DMA_IRQHandler+0x418>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1e      	ldr	r2, [pc, #120]	@ (80047d4 <HAL_DMA_IRQHandler+0x41c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <HAL_DMA_IRQHandler+0x420>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1b      	ldr	r2, [pc, #108]	@ (80047dc <HAL_DMA_IRQHandler+0x424>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1a      	ldr	r2, [pc, #104]	@ (80047e0 <HAL_DMA_IRQHandler+0x428>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <HAL_DMA_IRQHandler+0x42c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <HAL_DMA_IRQHandler+0x430>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_IRQHandler+0x3e2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <HAL_DMA_IRQHandler+0x434>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d12a      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x438>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e023      	b.n	80047f8 <HAL_DMA_IRQHandler+0x440>
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2204      	movs	r2, #4
 8004806:	409a      	lsls	r2, r3
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	f043 0204 	orr.w	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2210      	movs	r2, #16
 8004822:	409a      	lsls	r2, r3
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a6 	beq.w	800497a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a85      	ldr	r2, [pc, #532]	@ (8004a48 <HAL_DMA_IRQHandler+0x690>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d04a      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a83      	ldr	r2, [pc, #524]	@ (8004a4c <HAL_DMA_IRQHandler+0x694>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d045      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a82      	ldr	r2, [pc, #520]	@ (8004a50 <HAL_DMA_IRQHandler+0x698>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a80      	ldr	r2, [pc, #512]	@ (8004a54 <HAL_DMA_IRQHandler+0x69c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d03b      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7f      	ldr	r2, [pc, #508]	@ (8004a58 <HAL_DMA_IRQHandler+0x6a0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d036      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7d      	ldr	r2, [pc, #500]	@ (8004a5c <HAL_DMA_IRQHandler+0x6a4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a60 <HAL_DMA_IRQHandler+0x6a8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d02c      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a7a      	ldr	r2, [pc, #488]	@ (8004a64 <HAL_DMA_IRQHandler+0x6ac>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d027      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a79      	ldr	r2, [pc, #484]	@ (8004a68 <HAL_DMA_IRQHandler+0x6b0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a77      	ldr	r2, [pc, #476]	@ (8004a6c <HAL_DMA_IRQHandler+0x6b4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01d      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a76      	ldr	r2, [pc, #472]	@ (8004a70 <HAL_DMA_IRQHandler+0x6b8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a74      	ldr	r2, [pc, #464]	@ (8004a74 <HAL_DMA_IRQHandler+0x6bc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a73      	ldr	r2, [pc, #460]	@ (8004a78 <HAL_DMA_IRQHandler+0x6c0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a71      	ldr	r2, [pc, #452]	@ (8004a7c <HAL_DMA_IRQHandler+0x6c4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a70      	ldr	r2, [pc, #448]	@ (8004a80 <HAL_DMA_IRQHandler+0x6c8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_DMA_IRQHandler+0x516>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a84 <HAL_DMA_IRQHandler+0x6cc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10a      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x52c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e009      	b.n	80048f8 <HAL_DMA_IRQHandler+0x540>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d03e      	beq.n	800497a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	2210      	movs	r2, #16
 8004906:	409a      	lsls	r2, r3
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d024      	beq.n	800497a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e01f      	b.n	800497a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01b      	beq.n	800497a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
 800494a:	e016      	b.n	800497a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d107      	bne.n	800496a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0208 	bic.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	2220      	movs	r2, #32
 8004984:	409a      	lsls	r2, r3
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8110 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2c      	ldr	r2, [pc, #176]	@ (8004a48 <HAL_DMA_IRQHandler+0x690>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d04a      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a4c <HAL_DMA_IRQHandler+0x694>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d045      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a29      	ldr	r2, [pc, #164]	@ (8004a50 <HAL_DMA_IRQHandler+0x698>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d040      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a28      	ldr	r2, [pc, #160]	@ (8004a54 <HAL_DMA_IRQHandler+0x69c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d03b      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a26      	ldr	r2, [pc, #152]	@ (8004a58 <HAL_DMA_IRQHandler+0x6a0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d036      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a25      	ldr	r2, [pc, #148]	@ (8004a5c <HAL_DMA_IRQHandler+0x6a4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d031      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a23      	ldr	r2, [pc, #140]	@ (8004a60 <HAL_DMA_IRQHandler+0x6a8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02c      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a22      	ldr	r2, [pc, #136]	@ (8004a64 <HAL_DMA_IRQHandler+0x6ac>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d027      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a20      	ldr	r2, [pc, #128]	@ (8004a68 <HAL_DMA_IRQHandler+0x6b0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1f      	ldr	r2, [pc, #124]	@ (8004a6c <HAL_DMA_IRQHandler+0x6b4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d01d      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004a70 <HAL_DMA_IRQHandler+0x6b8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <HAL_DMA_IRQHandler+0x6bc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a78 <HAL_DMA_IRQHandler+0x6c0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a19      	ldr	r2, [pc, #100]	@ (8004a7c <HAL_DMA_IRQHandler+0x6c4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a17      	ldr	r2, [pc, #92]	@ (8004a80 <HAL_DMA_IRQHandler+0x6c8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x678>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <HAL_DMA_IRQHandler+0x6cc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d12b      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x6d0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e02a      	b.n	8004a9c <HAL_DMA_IRQHandler+0x6e4>
 8004a46:	bf00      	nop
 8004a48:	40020010 	.word	0x40020010
 8004a4c:	40020028 	.word	0x40020028
 8004a50:	40020040 	.word	0x40020040
 8004a54:	40020058 	.word	0x40020058
 8004a58:	40020070 	.word	0x40020070
 8004a5c:	40020088 	.word	0x40020088
 8004a60:	400200a0 	.word	0x400200a0
 8004a64:	400200b8 	.word	0x400200b8
 8004a68:	40020410 	.word	0x40020410
 8004a6c:	40020428 	.word	0x40020428
 8004a70:	40020440 	.word	0x40020440
 8004a74:	40020458 	.word	0x40020458
 8004a78:	40020470 	.word	0x40020470
 8004a7c:	40020488 	.word	0x40020488
 8004a80:	400204a0 	.word	0x400204a0
 8004a84:	400204b8 	.word	0x400204b8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf14      	ite	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	2300      	moveq	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8087 	beq.w	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2220      	movs	r2, #32
 8004aac:	409a      	lsls	r2, r3
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d139      	bne.n	8004b32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0216 	bic.w	r2, r2, #22
 8004acc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004adc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_DMA_IRQHandler+0x736>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0208 	bic.w	r2, r2, #8
 8004afc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	223f      	movs	r2, #63	@ 0x3f
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 834a 	beq.w	80051bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4798      	blx	r3
          }
          return;
 8004b30:	e344      	b.n	80051bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d018      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d108      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d02c      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	4798      	blx	r3
 8004b5e:	e027      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d023      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
 8004b70:	e01e      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10f      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0210 	bic.w	r2, r2, #16
 8004b8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8306 	beq.w	80051c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8088 	beq.w	8004cd8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a7a      	ldr	r2, [pc, #488]	@ (8004dc0 <HAL_DMA_IRQHandler+0xa08>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d04a      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a79      	ldr	r2, [pc, #484]	@ (8004dc4 <HAL_DMA_IRQHandler+0xa0c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d045      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a77      	ldr	r2, [pc, #476]	@ (8004dc8 <HAL_DMA_IRQHandler+0xa10>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d040      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a76      	ldr	r2, [pc, #472]	@ (8004dcc <HAL_DMA_IRQHandler+0xa14>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d03b      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a74      	ldr	r2, [pc, #464]	@ (8004dd0 <HAL_DMA_IRQHandler+0xa18>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d036      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a73      	ldr	r2, [pc, #460]	@ (8004dd4 <HAL_DMA_IRQHandler+0xa1c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d031      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a71      	ldr	r2, [pc, #452]	@ (8004dd8 <HAL_DMA_IRQHandler+0xa20>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d02c      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a70      	ldr	r2, [pc, #448]	@ (8004ddc <HAL_DMA_IRQHandler+0xa24>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d027      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6e      	ldr	r2, [pc, #440]	@ (8004de0 <HAL_DMA_IRQHandler+0xa28>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004de4 <HAL_DMA_IRQHandler+0xa2c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d01d      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a6b      	ldr	r2, [pc, #428]	@ (8004de8 <HAL_DMA_IRQHandler+0xa30>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a6a      	ldr	r2, [pc, #424]	@ (8004dec <HAL_DMA_IRQHandler+0xa34>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a68      	ldr	r2, [pc, #416]	@ (8004df0 <HAL_DMA_IRQHandler+0xa38>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a67      	ldr	r2, [pc, #412]	@ (8004df4 <HAL_DMA_IRQHandler+0xa3c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a65      	ldr	r2, [pc, #404]	@ (8004df8 <HAL_DMA_IRQHandler+0xa40>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x8b8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a64      	ldr	r2, [pc, #400]	@ (8004dfc <HAL_DMA_IRQHandler+0xa44>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x8ca>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e007      	b.n	8004c92 <HAL_DMA_IRQHandler+0x8da>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d307      	bcc.n	8004cae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f2      	bne.n	8004c92 <HAL_DMA_IRQHandler+0x8da>
 8004cac:	e000      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004cc6:	e003      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8272 	beq.w	80051c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
 8004cea:	e26c      	b.n	80051c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a43      	ldr	r2, [pc, #268]	@ (8004e00 <HAL_DMA_IRQHandler+0xa48>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d022      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a42      	ldr	r2, [pc, #264]	@ (8004e04 <HAL_DMA_IRQHandler+0xa4c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01d      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a40      	ldr	r2, [pc, #256]	@ (8004e08 <HAL_DMA_IRQHandler+0xa50>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d018      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e0c <HAL_DMA_IRQHandler+0xa54>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d013      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3d      	ldr	r2, [pc, #244]	@ (8004e10 <HAL_DMA_IRQHandler+0xa58>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a3c      	ldr	r2, [pc, #240]	@ (8004e14 <HAL_DMA_IRQHandler+0xa5c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e18 <HAL_DMA_IRQHandler+0xa60>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x984>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a39      	ldr	r2, [pc, #228]	@ (8004e1c <HAL_DMA_IRQHandler+0xa64>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x988>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <HAL_DMA_IRQHandler+0x98a>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 823f 	beq.w	80051c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	2204      	movs	r2, #4
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80cd 	beq.w	8004f00 <HAL_DMA_IRQHandler+0xb48>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80c7 	beq.w	8004f00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d049      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8210 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da8:	e20a      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8206 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dbc:	e200      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe08>
 8004dbe:	bf00      	nop
 8004dc0:	40020010 	.word	0x40020010
 8004dc4:	40020028 	.word	0x40020028
 8004dc8:	40020040 	.word	0x40020040
 8004dcc:	40020058 	.word	0x40020058
 8004dd0:	40020070 	.word	0x40020070
 8004dd4:	40020088 	.word	0x40020088
 8004dd8:	400200a0 	.word	0x400200a0
 8004ddc:	400200b8 	.word	0x400200b8
 8004de0:	40020410 	.word	0x40020410
 8004de4:	40020428 	.word	0x40020428
 8004de8:	40020440 	.word	0x40020440
 8004dec:	40020458 	.word	0x40020458
 8004df0:	40020470 	.word	0x40020470
 8004df4:	40020488 	.word	0x40020488
 8004df8:	400204a0 	.word	0x400204a0
 8004dfc:	400204b8 	.word	0x400204b8
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	58025444 	.word	0x58025444
 8004e10:	58025458 	.word	0x58025458
 8004e14:	5802546c 	.word	0x5802546c
 8004e18:	58025480 	.word	0x58025480
 8004e1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d160      	bne.n	8004eec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7f      	ldr	r2, [pc, #508]	@ (800502c <HAL_DMA_IRQHandler+0xc74>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d04a      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a7d      	ldr	r2, [pc, #500]	@ (8005030 <HAL_DMA_IRQHandler+0xc78>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d045      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7c      	ldr	r2, [pc, #496]	@ (8005034 <HAL_DMA_IRQHandler+0xc7c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d040      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a7a      	ldr	r2, [pc, #488]	@ (8005038 <HAL_DMA_IRQHandler+0xc80>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d03b      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a79      	ldr	r2, [pc, #484]	@ (800503c <HAL_DMA_IRQHandler+0xc84>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d036      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a77      	ldr	r2, [pc, #476]	@ (8005040 <HAL_DMA_IRQHandler+0xc88>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d031      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a76      	ldr	r2, [pc, #472]	@ (8005044 <HAL_DMA_IRQHandler+0xc8c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02c      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a74      	ldr	r2, [pc, #464]	@ (8005048 <HAL_DMA_IRQHandler+0xc90>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d027      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a73      	ldr	r2, [pc, #460]	@ (800504c <HAL_DMA_IRQHandler+0xc94>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a71      	ldr	r2, [pc, #452]	@ (8005050 <HAL_DMA_IRQHandler+0xc98>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a70      	ldr	r2, [pc, #448]	@ (8005054 <HAL_DMA_IRQHandler+0xc9c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8005058 <HAL_DMA_IRQHandler+0xca0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6d      	ldr	r2, [pc, #436]	@ (800505c <HAL_DMA_IRQHandler+0xca4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005060 <HAL_DMA_IRQHandler+0xca8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6a      	ldr	r2, [pc, #424]	@ (8005064 <HAL_DMA_IRQHandler+0xcac>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_DMA_IRQHandler+0xb12>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a68      	ldr	r2, [pc, #416]	@ (8005068 <HAL_DMA_IRQHandler+0xcb0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <HAL_DMA_IRQHandler+0xb24>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0208 	bic.w	r2, r2, #8
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e007      	b.n	8004eec <HAL_DMA_IRQHandler+0xb34>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0204 	bic.w	r2, r2, #4
 8004eea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8165 	beq.w	80051c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efe:	e15f      	b.n	80051c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2202      	movs	r2, #2
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80c5 	beq.w	80050a0 <HAL_DMA_IRQHandler+0xce8>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80bf 	beq.w	80050a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d018      	beq.n	8004f6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 813a 	beq.w	80051c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f58:	e134      	b.n	80051c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8130 	beq.w	80051c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f6c:	e12a      	b.n	80051c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 8089 	bne.w	800508c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800502c <HAL_DMA_IRQHandler+0xc74>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d04a      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <HAL_DMA_IRQHandler+0xc78>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d045      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a28      	ldr	r2, [pc, #160]	@ (8005034 <HAL_DMA_IRQHandler+0xc7c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d040      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	@ (8005038 <HAL_DMA_IRQHandler+0xc80>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d03b      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a25      	ldr	r2, [pc, #148]	@ (800503c <HAL_DMA_IRQHandler+0xc84>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d036      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a23      	ldr	r2, [pc, #140]	@ (8005040 <HAL_DMA_IRQHandler+0xc88>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d031      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a22      	ldr	r2, [pc, #136]	@ (8005044 <HAL_DMA_IRQHandler+0xc8c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d02c      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	@ (8005048 <HAL_DMA_IRQHandler+0xc90>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d027      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <HAL_DMA_IRQHandler+0xc94>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <HAL_DMA_IRQHandler+0xc98>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01d      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8005054 <HAL_DMA_IRQHandler+0xc9c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d018      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1a      	ldr	r2, [pc, #104]	@ (8005058 <HAL_DMA_IRQHandler+0xca0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a19      	ldr	r2, [pc, #100]	@ (800505c <HAL_DMA_IRQHandler+0xca4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <HAL_DMA_IRQHandler+0xca8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d009      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a16      	ldr	r2, [pc, #88]	@ (8005064 <HAL_DMA_IRQHandler+0xcac>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_DMA_IRQHandler+0xc62>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <HAL_DMA_IRQHandler+0xcb0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d128      	bne.n	800506c <HAL_DMA_IRQHandler+0xcb4>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0214 	bic.w	r2, r2, #20
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e027      	b.n	800507c <HAL_DMA_IRQHandler+0xcc4>
 800502c:	40020010 	.word	0x40020010
 8005030:	40020028 	.word	0x40020028
 8005034:	40020040 	.word	0x40020040
 8005038:	40020058 	.word	0x40020058
 800503c:	40020070 	.word	0x40020070
 8005040:	40020088 	.word	0x40020088
 8005044:	400200a0 	.word	0x400200a0
 8005048:	400200b8 	.word	0x400200b8
 800504c:	40020410 	.word	0x40020410
 8005050:	40020428 	.word	0x40020428
 8005054:	40020440 	.word	0x40020440
 8005058:	40020458 	.word	0x40020458
 800505c:	40020470 	.word	0x40020470
 8005060:	40020488 	.word	0x40020488
 8005064:	400204a0 	.word	0x400204a0
 8005068:	400204b8 	.word	0x400204b8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 020a 	bic.w	r2, r2, #10
 800507a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8097 	beq.w	80051c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800509e:	e091      	b.n	80051c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2208      	movs	r2, #8
 80050aa:	409a      	lsls	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8088 	beq.w	80051c6 <HAL_DMA_IRQHandler+0xe0e>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8082 	beq.w	80051c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a41      	ldr	r2, [pc, #260]	@ (80051cc <HAL_DMA_IRQHandler+0xe14>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d04a      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a3f      	ldr	r2, [pc, #252]	@ (80051d0 <HAL_DMA_IRQHandler+0xe18>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d045      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a3e      	ldr	r2, [pc, #248]	@ (80051d4 <HAL_DMA_IRQHandler+0xe1c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d040      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3c      	ldr	r2, [pc, #240]	@ (80051d8 <HAL_DMA_IRQHandler+0xe20>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d03b      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	@ (80051dc <HAL_DMA_IRQHandler+0xe24>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d036      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a39      	ldr	r2, [pc, #228]	@ (80051e0 <HAL_DMA_IRQHandler+0xe28>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d031      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a38      	ldr	r2, [pc, #224]	@ (80051e4 <HAL_DMA_IRQHandler+0xe2c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d02c      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a36      	ldr	r2, [pc, #216]	@ (80051e8 <HAL_DMA_IRQHandler+0xe30>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d027      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a35      	ldr	r2, [pc, #212]	@ (80051ec <HAL_DMA_IRQHandler+0xe34>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d022      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a33      	ldr	r2, [pc, #204]	@ (80051f0 <HAL_DMA_IRQHandler+0xe38>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01d      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a32      	ldr	r2, [pc, #200]	@ (80051f4 <HAL_DMA_IRQHandler+0xe3c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a30      	ldr	r2, [pc, #192]	@ (80051f8 <HAL_DMA_IRQHandler+0xe40>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2f      	ldr	r2, [pc, #188]	@ (80051fc <HAL_DMA_IRQHandler+0xe44>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2d      	ldr	r2, [pc, #180]	@ (8005200 <HAL_DMA_IRQHandler+0xe48>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d009      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2c      	ldr	r2, [pc, #176]	@ (8005204 <HAL_DMA_IRQHandler+0xe4c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_DMA_IRQHandler+0xdaa>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2a      	ldr	r2, [pc, #168]	@ (8005208 <HAL_DMA_IRQHandler+0xe50>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d108      	bne.n	8005174 <HAL_DMA_IRQHandler+0xdbc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 021c 	bic.w	r2, r2, #28
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	e007      	b.n	8005184 <HAL_DMA_IRQHandler+0xdcc>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 020e 	bic.w	r2, r2, #14
 8005182:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
 80051ba:	e004      	b.n	80051c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051bc:	bf00      	nop
 80051be:	e002      	b.n	80051c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051c6:	3728      	adds	r7, #40	@ 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40020010 	.word	0x40020010
 80051d0:	40020028 	.word	0x40020028
 80051d4:	40020040 	.word	0x40020040
 80051d8:	40020058 	.word	0x40020058
 80051dc:	40020070 	.word	0x40020070
 80051e0:	40020088 	.word	0x40020088
 80051e4:	400200a0 	.word	0x400200a0
 80051e8:	400200b8 	.word	0x400200b8
 80051ec:	40020410 	.word	0x40020410
 80051f0:	40020428 	.word	0x40020428
 80051f4:	40020440 	.word	0x40020440
 80051f8:	40020458 	.word	0x40020458
 80051fc:	40020470 	.word	0x40020470
 8005200:	40020488 	.word	0x40020488
 8005204:	400204a0 	.word	0x400204a0
 8005208:	400204b8 	.word	0x400204b8

0800520c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800521a:	b2db      	uxtb	r3, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005240:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a7f      	ldr	r2, [pc, #508]	@ (8005444 <DMA_SetConfig+0x21c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d072      	beq.n	8005332 <DMA_SetConfig+0x10a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a7d      	ldr	r2, [pc, #500]	@ (8005448 <DMA_SetConfig+0x220>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d06d      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a7c      	ldr	r2, [pc, #496]	@ (800544c <DMA_SetConfig+0x224>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d068      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a7a      	ldr	r2, [pc, #488]	@ (8005450 <DMA_SetConfig+0x228>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d063      	beq.n	8005332 <DMA_SetConfig+0x10a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a79      	ldr	r2, [pc, #484]	@ (8005454 <DMA_SetConfig+0x22c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d05e      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a77      	ldr	r2, [pc, #476]	@ (8005458 <DMA_SetConfig+0x230>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d059      	beq.n	8005332 <DMA_SetConfig+0x10a>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a76      	ldr	r2, [pc, #472]	@ (800545c <DMA_SetConfig+0x234>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d054      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a74      	ldr	r2, [pc, #464]	@ (8005460 <DMA_SetConfig+0x238>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d04f      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a73      	ldr	r2, [pc, #460]	@ (8005464 <DMA_SetConfig+0x23c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d04a      	beq.n	8005332 <DMA_SetConfig+0x10a>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a71      	ldr	r2, [pc, #452]	@ (8005468 <DMA_SetConfig+0x240>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d045      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a70      	ldr	r2, [pc, #448]	@ (800546c <DMA_SetConfig+0x244>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d040      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005470 <DMA_SetConfig+0x248>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d03b      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6d      	ldr	r2, [pc, #436]	@ (8005474 <DMA_SetConfig+0x24c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d036      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005478 <DMA_SetConfig+0x250>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d031      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a6a      	ldr	r2, [pc, #424]	@ (800547c <DMA_SetConfig+0x254>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d02c      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a68      	ldr	r2, [pc, #416]	@ (8005480 <DMA_SetConfig+0x258>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d027      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a67      	ldr	r2, [pc, #412]	@ (8005484 <DMA_SetConfig+0x25c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d022      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a65      	ldr	r2, [pc, #404]	@ (8005488 <DMA_SetConfig+0x260>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01d      	beq.n	8005332 <DMA_SetConfig+0x10a>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a64      	ldr	r2, [pc, #400]	@ (800548c <DMA_SetConfig+0x264>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d018      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a62      	ldr	r2, [pc, #392]	@ (8005490 <DMA_SetConfig+0x268>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <DMA_SetConfig+0x10a>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a61      	ldr	r2, [pc, #388]	@ (8005494 <DMA_SetConfig+0x26c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5f      	ldr	r2, [pc, #380]	@ (8005498 <DMA_SetConfig+0x270>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d009      	beq.n	8005332 <DMA_SetConfig+0x10a>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a5e      	ldr	r2, [pc, #376]	@ (800549c <DMA_SetConfig+0x274>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <DMA_SetConfig+0x10a>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5c      	ldr	r2, [pc, #368]	@ (80054a0 <DMA_SetConfig+0x278>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d101      	bne.n	8005336 <DMA_SetConfig+0x10e>
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <DMA_SetConfig+0x110>
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005344:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005356:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a39      	ldr	r2, [pc, #228]	@ (8005444 <DMA_SetConfig+0x21c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d04a      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a38      	ldr	r2, [pc, #224]	@ (8005448 <DMA_SetConfig+0x220>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d045      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a36      	ldr	r2, [pc, #216]	@ (800544c <DMA_SetConfig+0x224>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d040      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a35      	ldr	r2, [pc, #212]	@ (8005450 <DMA_SetConfig+0x228>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d03b      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a33      	ldr	r2, [pc, #204]	@ (8005454 <DMA_SetConfig+0x22c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d036      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a32      	ldr	r2, [pc, #200]	@ (8005458 <DMA_SetConfig+0x230>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d031      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a30      	ldr	r2, [pc, #192]	@ (800545c <DMA_SetConfig+0x234>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02c      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005460 <DMA_SetConfig+0x238>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d027      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005464 <DMA_SetConfig+0x23c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005468 <DMA_SetConfig+0x240>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d01d      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2a      	ldr	r2, [pc, #168]	@ (800546c <DMA_SetConfig+0x244>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a29      	ldr	r2, [pc, #164]	@ (8005470 <DMA_SetConfig+0x248>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a27      	ldr	r2, [pc, #156]	@ (8005474 <DMA_SetConfig+0x24c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a26      	ldr	r2, [pc, #152]	@ (8005478 <DMA_SetConfig+0x250>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a24      	ldr	r2, [pc, #144]	@ (800547c <DMA_SetConfig+0x254>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <DMA_SetConfig+0x1d0>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <DMA_SetConfig+0x258>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <DMA_SetConfig+0x1d4>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <DMA_SetConfig+0x1d6>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d059      	beq.n	80054b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	223f      	movs	r2, #63	@ 0x3f
 800540c:	409a      	lsls	r2, r3
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005420:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b40      	cmp	r3, #64	@ 0x40
 8005430:	d138      	bne.n	80054a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005442:	e086      	b.n	8005552 <DMA_SetConfig+0x32a>
 8005444:	40020010 	.word	0x40020010
 8005448:	40020028 	.word	0x40020028
 800544c:	40020040 	.word	0x40020040
 8005450:	40020058 	.word	0x40020058
 8005454:	40020070 	.word	0x40020070
 8005458:	40020088 	.word	0x40020088
 800545c:	400200a0 	.word	0x400200a0
 8005460:	400200b8 	.word	0x400200b8
 8005464:	40020410 	.word	0x40020410
 8005468:	40020428 	.word	0x40020428
 800546c:	40020440 	.word	0x40020440
 8005470:	40020458 	.word	0x40020458
 8005474:	40020470 	.word	0x40020470
 8005478:	40020488 	.word	0x40020488
 800547c:	400204a0 	.word	0x400204a0
 8005480:	400204b8 	.word	0x400204b8
 8005484:	58025408 	.word	0x58025408
 8005488:	5802541c 	.word	0x5802541c
 800548c:	58025430 	.word	0x58025430
 8005490:	58025444 	.word	0x58025444
 8005494:	58025458 	.word	0x58025458
 8005498:	5802546c 	.word	0x5802546c
 800549c:	58025480 	.word	0x58025480
 80054a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	60da      	str	r2, [r3, #12]
}
 80054b4:	e04d      	b.n	8005552 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a29      	ldr	r2, [pc, #164]	@ (8005560 <DMA_SetConfig+0x338>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a27      	ldr	r2, [pc, #156]	@ (8005564 <DMA_SetConfig+0x33c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01d      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a26      	ldr	r2, [pc, #152]	@ (8005568 <DMA_SetConfig+0x340>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a24      	ldr	r2, [pc, #144]	@ (800556c <DMA_SetConfig+0x344>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a23      	ldr	r2, [pc, #140]	@ (8005570 <DMA_SetConfig+0x348>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a21      	ldr	r2, [pc, #132]	@ (8005574 <DMA_SetConfig+0x34c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a20      	ldr	r2, [pc, #128]	@ (8005578 <DMA_SetConfig+0x350>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <DMA_SetConfig+0x2de>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1e      	ldr	r2, [pc, #120]	@ (800557c <DMA_SetConfig+0x354>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <DMA_SetConfig+0x2e2>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <DMA_SetConfig+0x2e4>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2201      	movs	r2, #1
 800551a:	409a      	lsls	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d108      	bne.n	8005542 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	60da      	str	r2, [r3, #12]
}
 8005540:	e007      	b.n	8005552 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	58025408 	.word	0x58025408
 8005564:	5802541c 	.word	0x5802541c
 8005568:	58025430 	.word	0x58025430
 800556c:	58025444 	.word	0x58025444
 8005570:	58025458 	.word	0x58025458
 8005574:	5802546c 	.word	0x5802546c
 8005578:	58025480 	.word	0x58025480
 800557c:	58025494 	.word	0x58025494

08005580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a42      	ldr	r2, [pc, #264]	@ (8005698 <DMA_CalcBaseAndBitshift+0x118>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d04a      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a41      	ldr	r2, [pc, #260]	@ (800569c <DMA_CalcBaseAndBitshift+0x11c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d045      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3f      	ldr	r2, [pc, #252]	@ (80056a0 <DMA_CalcBaseAndBitshift+0x120>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d040      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a3e      	ldr	r2, [pc, #248]	@ (80056a4 <DMA_CalcBaseAndBitshift+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d03b      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3c      	ldr	r2, [pc, #240]	@ (80056a8 <DMA_CalcBaseAndBitshift+0x128>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d036      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a3b      	ldr	r2, [pc, #236]	@ (80056ac <DMA_CalcBaseAndBitshift+0x12c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d031      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a39      	ldr	r2, [pc, #228]	@ (80056b0 <DMA_CalcBaseAndBitshift+0x130>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d02c      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a38      	ldr	r2, [pc, #224]	@ (80056b4 <DMA_CalcBaseAndBitshift+0x134>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d027      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a36      	ldr	r2, [pc, #216]	@ (80056b8 <DMA_CalcBaseAndBitshift+0x138>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d022      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a35      	ldr	r2, [pc, #212]	@ (80056bc <DMA_CalcBaseAndBitshift+0x13c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d01d      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a33      	ldr	r2, [pc, #204]	@ (80056c0 <DMA_CalcBaseAndBitshift+0x140>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d018      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a32      	ldr	r2, [pc, #200]	@ (80056c4 <DMA_CalcBaseAndBitshift+0x144>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a30      	ldr	r2, [pc, #192]	@ (80056c8 <DMA_CalcBaseAndBitshift+0x148>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2f      	ldr	r2, [pc, #188]	@ (80056cc <DMA_CalcBaseAndBitshift+0x14c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2d      	ldr	r2, [pc, #180]	@ (80056d0 <DMA_CalcBaseAndBitshift+0x150>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <DMA_CalcBaseAndBitshift+0xa8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <DMA_CalcBaseAndBitshift+0x154>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d101      	bne.n	800562c <DMA_CalcBaseAndBitshift+0xac>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <DMA_CalcBaseAndBitshift+0xae>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d024      	beq.n	800567c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	3b10      	subs	r3, #16
 800563a:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <DMA_CalcBaseAndBitshift+0x158>)
 800563c:	fba2 2303 	umull	r2, r3, r2, r3
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	4a24      	ldr	r2, [pc, #144]	@ (80056dc <DMA_CalcBaseAndBitshift+0x15c>)
 800564c:	5cd3      	ldrb	r3, [r2, r3]
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d908      	bls.n	800566c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	4b1f      	ldr	r3, [pc, #124]	@ (80056e0 <DMA_CalcBaseAndBitshift+0x160>)
 8005662:	4013      	ands	r3, r2
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	659a      	str	r2, [r3, #88]	@ 0x58
 800566a:	e00d      	b.n	8005688 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <DMA_CalcBaseAndBitshift+0x160>)
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6593      	str	r3, [r2, #88]	@ 0x58
 800567a:	e005      	b.n	8005688 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40020010 	.word	0x40020010
 800569c:	40020028 	.word	0x40020028
 80056a0:	40020040 	.word	0x40020040
 80056a4:	40020058 	.word	0x40020058
 80056a8:	40020070 	.word	0x40020070
 80056ac:	40020088 	.word	0x40020088
 80056b0:	400200a0 	.word	0x400200a0
 80056b4:	400200b8 	.word	0x400200b8
 80056b8:	40020410 	.word	0x40020410
 80056bc:	40020428 	.word	0x40020428
 80056c0:	40020440 	.word	0x40020440
 80056c4:	40020458 	.word	0x40020458
 80056c8:	40020470 	.word	0x40020470
 80056cc:	40020488 	.word	0x40020488
 80056d0:	400204a0 	.word	0x400204a0
 80056d4:	400204b8 	.word	0x400204b8
 80056d8:	aaaaaaab 	.word	0xaaaaaaab
 80056dc:	08016008 	.word	0x08016008
 80056e0:	fffffc00 	.word	0xfffffc00

080056e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d120      	bne.n	800573a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d858      	bhi.n	80057b2 <DMA_CheckFifoParam+0xce>
 8005700:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <DMA_CheckFifoParam+0x24>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	08005719 	.word	0x08005719
 800570c:	0800572b 	.word	0x0800572b
 8005710:	08005719 	.word	0x08005719
 8005714:	080057b3 	.word	0x080057b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d048      	beq.n	80057b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005728:	e045      	b.n	80057b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005732:	d142      	bne.n	80057ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005738:	e03f      	b.n	80057ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005742:	d123      	bne.n	800578c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	2b03      	cmp	r3, #3
 800574a:	d838      	bhi.n	80057be <DMA_CheckFifoParam+0xda>
 800574c:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <DMA_CheckFifoParam+0x70>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	08005765 	.word	0x08005765
 8005758:	0800576b 	.word	0x0800576b
 800575c:	08005765 	.word	0x08005765
 8005760:	0800577d 	.word	0x0800577d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	73fb      	strb	r3, [r7, #15]
        break;
 8005768:	e030      	b.n	80057cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d025      	beq.n	80057c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800577a:	e022      	b.n	80057c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005784:	d11f      	bne.n	80057c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800578a:	e01c      	b.n	80057c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	2b02      	cmp	r3, #2
 8005792:	d902      	bls.n	800579a <DMA_CheckFifoParam+0xb6>
 8005794:	2b03      	cmp	r3, #3
 8005796:	d003      	beq.n	80057a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005798:	e018      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
        break;
 800579e:	e015      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
    break;
 80057b0:	e00b      	b.n	80057ca <DMA_CheckFifoParam+0xe6>
        break;
 80057b2:	bf00      	nop
 80057b4:	e00a      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        break;
 80057b6:	bf00      	nop
 80057b8:	e008      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        break;
 80057ba:	bf00      	nop
 80057bc:	e006      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        break;
 80057be:	bf00      	nop
 80057c0:	e004      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        break;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
        break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <DMA_CheckFifoParam+0xe8>
    break;
 80057ca:	bf00      	nop
    }
  }

  return status;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop

080057dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a38      	ldr	r2, [pc, #224]	@ (80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a36      	ldr	r2, [pc, #216]	@ (80058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01d      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a35      	ldr	r2, [pc, #212]	@ (80058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a33      	ldr	r2, [pc, #204]	@ (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a32      	ldr	r2, [pc, #200]	@ (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a30      	ldr	r2, [pc, #192]	@ (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2d      	ldr	r2, [pc, #180]	@ (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d101      	bne.n	800583e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800583e:	2300      	movs	r3, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	3b08      	subs	r3, #8
 800584c:	4a28      	ldr	r2, [pc, #160]	@ (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a24      	ldr	r2, [pc, #144]	@ (80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005868:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005878:	e024      	b.n	80058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	3b10      	subs	r3, #16
 8005882:	4a1e      	ldr	r2, [pc, #120]	@ (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4a1c      	ldr	r2, [pc, #112]	@ (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d806      	bhi.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d902      	bls.n	80058a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3308      	adds	r3, #8
 80058a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4b18      	ldr	r3, [pc, #96]	@ (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a16      	ldr	r2, [pc, #88]	@ (800590c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	58025408 	.word	0x58025408
 80058d4:	5802541c 	.word	0x5802541c
 80058d8:	58025430 	.word	0x58025430
 80058dc:	58025444 	.word	0x58025444
 80058e0:	58025458 	.word	0x58025458
 80058e4:	5802546c 	.word	0x5802546c
 80058e8:	58025480 	.word	0x58025480
 80058ec:	58025494 	.word	0x58025494
 80058f0:	cccccccd 	.word	0xcccccccd
 80058f4:	16009600 	.word	0x16009600
 80058f8:	58025880 	.word	0x58025880
 80058fc:	aaaaaaab 	.word	0xaaaaaaab
 8005900:	400204b8 	.word	0x400204b8
 8005904:	4002040f 	.word	0x4002040f
 8005908:	10008200 	.word	0x10008200
 800590c:	40020880 	.word	0x40020880

08005910 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d04a      	beq.n	80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d847      	bhi.n	80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a25      	ldr	r2, [pc, #148]	@ (80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d022      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a24      	ldr	r2, [pc, #144]	@ (80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d01d      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a22      	ldr	r2, [pc, #136]	@ (80059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a21      	ldr	r2, [pc, #132]	@ (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1f      	ldr	r2, [pc, #124]	@ (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1e      	ldr	r2, [pc, #120]	@ (80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1c      	ldr	r2, [pc, #112]	@ (80059e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1b      	ldr	r2, [pc, #108]	@ (80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4b17      	ldr	r3, [pc, #92]	@ (80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005998:	671a      	str	r2, [r3, #112]	@ 0x70
 800599a:	e009      	b.n	80059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	461a      	mov	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a11      	ldr	r2, [pc, #68]	@ (80059f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494
 80059e8:	1600963f 	.word	0x1600963f
 80059ec:	58025940 	.word	0x58025940
 80059f0:	1000823f 	.word	0x1000823f
 80059f4:	40020940 	.word	0x40020940

080059f8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b80      	cmp	r3, #128	@ 0x80
 8005a10:	d105      	bne.n	8005a1e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a18:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e315      	b.n	800604a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e30e      	b.n	800604a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	f040 82fd 	bne.w	800603c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a82      	ldr	r2, [pc, #520]	@ (8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d04a      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a81      	ldr	r2, [pc, #516]	@ (8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d045      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7f      	ldr	r2, [pc, #508]	@ (8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d040      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a7e      	ldr	r2, [pc, #504]	@ (8005c6c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d03b      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d036      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a7b      	ldr	r2, [pc, #492]	@ (8005c74 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d031      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a79      	ldr	r2, [pc, #484]	@ (8005c78 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02c      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a78      	ldr	r2, [pc, #480]	@ (8005c7c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d027      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a76      	ldr	r2, [pc, #472]	@ (8005c80 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d022      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a75      	ldr	r2, [pc, #468]	@ (8005c84 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a73      	ldr	r2, [pc, #460]	@ (8005c88 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a72      	ldr	r2, [pc, #456]	@ (8005c8c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a70      	ldr	r2, [pc, #448]	@ (8005c90 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8005c94 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8005c98 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6c      	ldr	r2, [pc, #432]	@ (8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d018      	beq.n	8005b2c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005b08:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b16:	3308      	adds	r3, #8
 8005b18:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	223f      	movs	r2, #63	@ 0x3f
 8005b24:	409a      	lsls	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e018      	b.n	8005b5e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6819      	ldr	r1, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f248 0320 	movw	r3, #32800	@ 0x8020
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2201      	movs	r2, #1
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fb41 	bl	80061ec <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c60 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d072      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a3a      	ldr	r2, [pc, #232]	@ (8005c64 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d06d      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a39      	ldr	r2, [pc, #228]	@ (8005c68 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d068      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a37      	ldr	r2, [pc, #220]	@ (8005c6c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d063      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a36      	ldr	r2, [pc, #216]	@ (8005c70 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d05e      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a34      	ldr	r2, [pc, #208]	@ (8005c74 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d059      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a33      	ldr	r2, [pc, #204]	@ (8005c78 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d054      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a31      	ldr	r2, [pc, #196]	@ (8005c7c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04f      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a30      	ldr	r2, [pc, #192]	@ (8005c80 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c84 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c88 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8005c8c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2a      	ldr	r2, [pc, #168]	@ (8005c90 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a28      	ldr	r2, [pc, #160]	@ (8005c94 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a27      	ldr	r2, [pc, #156]	@ (8005c98 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a25      	ldr	r2, [pc, #148]	@ (8005c9c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a24      	ldr	r2, [pc, #144]	@ (8005ca0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a22      	ldr	r2, [pc, #136]	@ (8005ca4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a21      	ldr	r2, [pc, #132]	@ (8005ca8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cac <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a19      	ldr	r2, [pc, #100]	@ (8005cbc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d132      	bne.n	8005cc0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e031      	b.n	8005cc2 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005c5e:	bf00      	nop
 8005c60:	40020010 	.word	0x40020010
 8005c64:	40020028 	.word	0x40020028
 8005c68:	40020040 	.word	0x40020040
 8005c6c:	40020058 	.word	0x40020058
 8005c70:	40020070 	.word	0x40020070
 8005c74:	40020088 	.word	0x40020088
 8005c78:	400200a0 	.word	0x400200a0
 8005c7c:	400200b8 	.word	0x400200b8
 8005c80:	40020410 	.word	0x40020410
 8005c84:	40020428 	.word	0x40020428
 8005c88:	40020440 	.word	0x40020440
 8005c8c:	40020458 	.word	0x40020458
 8005c90:	40020470 	.word	0x40020470
 8005c94:	40020488 	.word	0x40020488
 8005c98:	400204a0 	.word	0x400204a0
 8005c9c:	400204b8 	.word	0x400204b8
 8005ca0:	58025408 	.word	0x58025408
 8005ca4:	5802541c 	.word	0x5802541c
 8005ca8:	58025430 	.word	0x58025430
 8005cac:	58025444 	.word	0x58025444
 8005cb0:	58025458 	.word	0x58025458
 8005cb4:	5802546c 	.word	0x5802546c
 8005cb8:	58025480 	.word	0x58025480
 8005cbc:	58025494 	.word	0x58025494
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005cce:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ce0:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8005dd4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d04a      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a39      	ldr	r2, [pc, #228]	@ (8005dd8 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d045      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a38      	ldr	r2, [pc, #224]	@ (8005ddc <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d040      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a36      	ldr	r2, [pc, #216]	@ (8005de0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d03b      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a35      	ldr	r2, [pc, #212]	@ (8005de4 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d036      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a33      	ldr	r2, [pc, #204]	@ (8005de8 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d02c      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a30      	ldr	r2, [pc, #192]	@ (8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d027      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2f      	ldr	r2, [pc, #188]	@ (8005df4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d022      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2d      	ldr	r2, [pc, #180]	@ (8005df8 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01d      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d018      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2a      	ldr	r2, [pc, #168]	@ (8005e00 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a29      	ldr	r2, [pc, #164]	@ (8005e04 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a27      	ldr	r2, [pc, #156]	@ (8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a26      	ldr	r2, [pc, #152]	@ (8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d004      	beq.n	8005d82 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a24      	ldr	r2, [pc, #144]	@ (8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d043      	beq.n	8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 021e 	bic.w	r2, r3, #30
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0216 	orr.w	r2, r2, #22
 8005d9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dae:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d103      	bne.n	8005dc0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d043      	beq.n	8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e03a      	b.n	8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005dd2:	bf00      	nop
 8005dd4:	40020010 	.word	0x40020010
 8005dd8:	40020028 	.word	0x40020028
 8005ddc:	40020040 	.word	0x40020040
 8005de0:	40020058 	.word	0x40020058
 8005de4:	40020070 	.word	0x40020070
 8005de8:	40020088 	.word	0x40020088
 8005dec:	400200a0 	.word	0x400200a0
 8005df0:	400200b8 	.word	0x400200b8
 8005df4:	40020410 	.word	0x40020410
 8005df8:	40020428 	.word	0x40020428
 8005dfc:	40020440 	.word	0x40020440
 8005e00:	40020458 	.word	0x40020458
 8005e04:	40020470 	.word	0x40020470
 8005e08:	40020488 	.word	0x40020488
 8005e0c:	400204a0 	.word	0x400204a0
 8005e10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 020e 	bic.w	r2, r3, #14
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 020a 	orr.w	r2, r2, #10
 8005e26:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d103      	bne.n	8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0204 	orr.w	r2, r2, #4
 8005e46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a81      	ldr	r2, [pc, #516]	@ (8006054 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d072      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a80      	ldr	r2, [pc, #512]	@ (8006058 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d06d      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a7e      	ldr	r2, [pc, #504]	@ (800605c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d068      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a7d      	ldr	r2, [pc, #500]	@ (8006060 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d063      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a7b      	ldr	r2, [pc, #492]	@ (8006064 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d05e      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a7a      	ldr	r2, [pc, #488]	@ (8006068 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d059      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a78      	ldr	r2, [pc, #480]	@ (800606c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d054      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a77      	ldr	r2, [pc, #476]	@ (8006070 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d04f      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a75      	ldr	r2, [pc, #468]	@ (8006074 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a74      	ldr	r2, [pc, #464]	@ (8006078 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a72      	ldr	r2, [pc, #456]	@ (800607c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a71      	ldr	r2, [pc, #452]	@ (8006080 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a6f      	ldr	r2, [pc, #444]	@ (8006084 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a6e      	ldr	r2, [pc, #440]	@ (8006088 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a6c      	ldr	r2, [pc, #432]	@ (800608c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8006090 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a69      	ldr	r2, [pc, #420]	@ (8006094 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a68      	ldr	r2, [pc, #416]	@ (8006098 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a66      	ldr	r2, [pc, #408]	@ (800609c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a65      	ldr	r2, [pc, #404]	@ (80060a0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a63      	ldr	r2, [pc, #396]	@ (80060a4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a62      	ldr	r2, [pc, #392]	@ (80060a8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a60      	ldr	r2, [pc, #384]	@ (80060ac <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a5f      	ldr	r2, [pc, #380]	@ (80060b0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01a      	beq.n	8005f78 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d007      	beq.n	8005f60 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a35      	ldr	r2, [pc, #212]	@ (8006054 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d04a      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a34      	ldr	r2, [pc, #208]	@ (8006058 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d045      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a32      	ldr	r2, [pc, #200]	@ (800605c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d040      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a31      	ldr	r2, [pc, #196]	@ (8006060 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d03b      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8006064 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d036      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2e      	ldr	r2, [pc, #184]	@ (8006068 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d031      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800606c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02c      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8006070 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d027      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a29      	ldr	r2, [pc, #164]	@ (8006074 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a28      	ldr	r2, [pc, #160]	@ (8006078 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a26      	ldr	r2, [pc, #152]	@ (800607c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a25      	ldr	r2, [pc, #148]	@ (8006080 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a23      	ldr	r2, [pc, #140]	@ (8006084 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a22      	ldr	r2, [pc, #136]	@ (8006088 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a20      	ldr	r2, [pc, #128]	@ (800608c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1f      	ldr	r2, [pc, #124]	@ (8006090 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e00e      	b.n	8006048 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e005      	b.n	8006048 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40020010 	.word	0x40020010
 8006058:	40020028 	.word	0x40020028
 800605c:	40020040 	.word	0x40020040
 8006060:	40020058 	.word	0x40020058
 8006064:	40020070 	.word	0x40020070
 8006068:	40020088 	.word	0x40020088
 800606c:	400200a0 	.word	0x400200a0
 8006070:	400200b8 	.word	0x400200b8
 8006074:	40020410 	.word	0x40020410
 8006078:	40020428 	.word	0x40020428
 800607c:	40020440 	.word	0x40020440
 8006080:	40020458 	.word	0x40020458
 8006084:	40020470 	.word	0x40020470
 8006088:	40020488 	.word	0x40020488
 800608c:	400204a0 	.word	0x400204a0
 8006090:	400204b8 	.word	0x400204b8
 8006094:	58025408 	.word	0x58025408
 8006098:	5802541c 	.word	0x5802541c
 800609c:	58025430 	.word	0x58025430
 80060a0:	58025444 	.word	0x58025444
 80060a4:	58025458 	.word	0x58025458
 80060a8:	5802546c 	.word	0x5802546c
 80060ac:	58025480 	.word	0x58025480
 80060b0:	58025494 	.word	0x58025494

080060b4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a39      	ldr	r2, [pc, #228]	@ (80061ac <HAL_DMAEx_ChangeMemory+0xf8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d04a      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a37      	ldr	r2, [pc, #220]	@ (80061b0 <HAL_DMAEx_ChangeMemory+0xfc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d045      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a36      	ldr	r2, [pc, #216]	@ (80061b4 <HAL_DMAEx_ChangeMemory+0x100>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d040      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a34      	ldr	r2, [pc, #208]	@ (80061b8 <HAL_DMAEx_ChangeMemory+0x104>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d03b      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a33      	ldr	r2, [pc, #204]	@ (80061bc <HAL_DMAEx_ChangeMemory+0x108>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d036      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a31      	ldr	r2, [pc, #196]	@ (80061c0 <HAL_DMAEx_ChangeMemory+0x10c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d031      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a30      	ldr	r2, [pc, #192]	@ (80061c4 <HAL_DMAEx_ChangeMemory+0x110>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d02c      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2e      	ldr	r2, [pc, #184]	@ (80061c8 <HAL_DMAEx_ChangeMemory+0x114>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d027      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2d      	ldr	r2, [pc, #180]	@ (80061cc <HAL_DMAEx_ChangeMemory+0x118>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d022      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <HAL_DMAEx_ChangeMemory+0x11c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01d      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <HAL_DMAEx_ChangeMemory+0x120>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d018      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a28      	ldr	r2, [pc, #160]	@ (80061d8 <HAL_DMAEx_ChangeMemory+0x124>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a27      	ldr	r2, [pc, #156]	@ (80061dc <HAL_DMAEx_ChangeMemory+0x128>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00e      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a25      	ldr	r2, [pc, #148]	@ (80061e0 <HAL_DMAEx_ChangeMemory+0x12c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a24      	ldr	r2, [pc, #144]	@ (80061e4 <HAL_DMAEx_ChangeMemory+0x130>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <HAL_DMAEx_ChangeMemory+0xae>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	@ (80061e8 <HAL_DMAEx_ChangeMemory+0x134>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d101      	bne.n	8006166 <HAL_DMAEx_ChangeMemory+0xb2>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <HAL_DMAEx_ChangeMemory+0xb4>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	60da      	str	r2, [r3, #12]
 800617a:	e010      	b.n	800619e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	611a      	str	r2, [r3, #16]
 8006184:	e00b      	b.n	800619e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	60da      	str	r2, [r3, #12]
 8006194:	e003      	b.n	800619e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40020010 	.word	0x40020010
 80061b0:	40020028 	.word	0x40020028
 80061b4:	40020040 	.word	0x40020040
 80061b8:	40020058 	.word	0x40020058
 80061bc:	40020070 	.word	0x40020070
 80061c0:	40020088 	.word	0x40020088
 80061c4:	400200a0 	.word	0x400200a0
 80061c8:	400200b8 	.word	0x400200b8
 80061cc:	40020410 	.word	0x40020410
 80061d0:	40020428 	.word	0x40020428
 80061d4:	40020440 	.word	0x40020440
 80061d8:	40020458 	.word	0x40020458
 80061dc:	40020470 	.word	0x40020470
 80061e0:	40020488 	.word	0x40020488
 80061e4:	400204a0 	.word	0x400204a0
 80061e8:	400204b8 	.word	0x400204b8

080061ec <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a46      	ldr	r2, [pc, #280]	@ (8006318 <DMA_MultiBufferSetConfig+0x12c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d04a      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a44      	ldr	r2, [pc, #272]	@ (800631c <DMA_MultiBufferSetConfig+0x130>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d045      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a43      	ldr	r2, [pc, #268]	@ (8006320 <DMA_MultiBufferSetConfig+0x134>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d040      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a41      	ldr	r2, [pc, #260]	@ (8006324 <DMA_MultiBufferSetConfig+0x138>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d03b      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a40      	ldr	r2, [pc, #256]	@ (8006328 <DMA_MultiBufferSetConfig+0x13c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d036      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a3e      	ldr	r2, [pc, #248]	@ (800632c <DMA_MultiBufferSetConfig+0x140>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d031      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3d      	ldr	r2, [pc, #244]	@ (8006330 <DMA_MultiBufferSetConfig+0x144>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d02c      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a3b      	ldr	r2, [pc, #236]	@ (8006334 <DMA_MultiBufferSetConfig+0x148>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d027      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3a      	ldr	r2, [pc, #232]	@ (8006338 <DMA_MultiBufferSetConfig+0x14c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d022      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a38      	ldr	r2, [pc, #224]	@ (800633c <DMA_MultiBufferSetConfig+0x150>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01d      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a37      	ldr	r2, [pc, #220]	@ (8006340 <DMA_MultiBufferSetConfig+0x154>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d018      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a35      	ldr	r2, [pc, #212]	@ (8006344 <DMA_MultiBufferSetConfig+0x158>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a34      	ldr	r2, [pc, #208]	@ (8006348 <DMA_MultiBufferSetConfig+0x15c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00e      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a32      	ldr	r2, [pc, #200]	@ (800634c <DMA_MultiBufferSetConfig+0x160>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d009      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a31      	ldr	r2, [pc, #196]	@ (8006350 <DMA_MultiBufferSetConfig+0x164>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d004      	beq.n	800629a <DMA_MultiBufferSetConfig+0xae>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2f      	ldr	r2, [pc, #188]	@ (8006354 <DMA_MultiBufferSetConfig+0x168>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <DMA_MultiBufferSetConfig+0xb2>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <DMA_MultiBufferSetConfig+0xb4>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d019      	beq.n	80062d8 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d108      	bne.n	80062c6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80062c4:	e021      	b.n	800630a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	60da      	str	r2, [r3, #12]
}
 80062d6:	e018      	b.n	800630a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b40      	cmp	r3, #64	@ 0x40
 80062e6:	d108      	bne.n	80062fa <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	60da      	str	r2, [r3, #12]
}
 80062f8:	e007      	b.n	800630a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40020010 	.word	0x40020010
 800631c:	40020028 	.word	0x40020028
 8006320:	40020040 	.word	0x40020040
 8006324:	40020058 	.word	0x40020058
 8006328:	40020070 	.word	0x40020070
 800632c:	40020088 	.word	0x40020088
 8006330:	400200a0 	.word	0x400200a0
 8006334:	400200b8 	.word	0x400200b8
 8006338:	40020410 	.word	0x40020410
 800633c:	40020428 	.word	0x40020428
 8006340:	40020440 	.word	0x40020440
 8006344:	40020458 	.word	0x40020458
 8006348:	40020470 	.word	0x40020470
 800634c:	40020488 	.word	0x40020488
 8006350:	400204a0 	.word	0x400204a0
 8006354:	400204b8 	.word	0x400204b8

08006358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	@ 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006366:	4b89      	ldr	r3, [pc, #548]	@ (800658c <HAL_GPIO_Init+0x234>)
 8006368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800636a:	e194      	b.n	8006696 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	4013      	ands	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8186 	beq.w	8006690 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d005      	beq.n	800639c <HAL_GPIO_Init+0x44>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d130      	bne.n	80063fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	2203      	movs	r2, #3
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063d2:	2201      	movs	r2, #1
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	f003 0201 	and.w	r2, r3, #1
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b03      	cmp	r3, #3
 8006408:	d017      	beq.n	800643a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	2203      	movs	r2, #3
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	4013      	ands	r3, r2
 8006420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	4313      	orrs	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d123      	bne.n	800648e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	08da      	lsrs	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3208      	adds	r2, #8
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	220f      	movs	r2, #15
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4313      	orrs	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	08da      	lsrs	r2, r3, #3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3208      	adds	r2, #8
 8006488:	69b9      	ldr	r1, [r7, #24]
 800648a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	2203      	movs	r2, #3
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4013      	ands	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0203 	and.w	r2, r3, #3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80e0 	beq.w	8006690 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006590 <HAL_GPIO_Init+0x238>)
 80064d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006590 <HAL_GPIO_Init+0x238>)
 80064d8:	f043 0302 	orr.w	r3, r3, #2
 80064dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80064e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006590 <HAL_GPIO_Init+0x238>)
 80064e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ee:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <HAL_GPIO_Init+0x23c>)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	3302      	adds	r3, #2
 80064f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	220f      	movs	r2, #15
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a20      	ldr	r2, [pc, #128]	@ (8006598 <HAL_GPIO_Init+0x240>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d052      	beq.n	80065c0 <HAL_GPIO_Init+0x268>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1f      	ldr	r2, [pc, #124]	@ (800659c <HAL_GPIO_Init+0x244>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_GPIO_Init+0x22e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1e      	ldr	r2, [pc, #120]	@ (80065a0 <HAL_GPIO_Init+0x248>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d02b      	beq.n	8006582 <HAL_GPIO_Init+0x22a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1d      	ldr	r2, [pc, #116]	@ (80065a4 <HAL_GPIO_Init+0x24c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d025      	beq.n	800657e <HAL_GPIO_Init+0x226>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_GPIO_Init+0x250>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01f      	beq.n	800657a <HAL_GPIO_Init+0x222>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_GPIO_Init+0x254>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d019      	beq.n	8006576 <HAL_GPIO_Init+0x21e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1a      	ldr	r2, [pc, #104]	@ (80065b0 <HAL_GPIO_Init+0x258>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <HAL_GPIO_Init+0x21a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a19      	ldr	r2, [pc, #100]	@ (80065b4 <HAL_GPIO_Init+0x25c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00d      	beq.n	800656e <HAL_GPIO_Init+0x216>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <HAL_GPIO_Init+0x260>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <HAL_GPIO_Init+0x212>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a17      	ldr	r2, [pc, #92]	@ (80065bc <HAL_GPIO_Init+0x264>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <HAL_GPIO_Init+0x20e>
 8006562:	2309      	movs	r3, #9
 8006564:	e02d      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006566:	230a      	movs	r3, #10
 8006568:	e02b      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800656a:	2308      	movs	r3, #8
 800656c:	e029      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800656e:	2307      	movs	r3, #7
 8006570:	e027      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006572:	2306      	movs	r3, #6
 8006574:	e025      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006576:	2305      	movs	r3, #5
 8006578:	e023      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800657a:	2304      	movs	r3, #4
 800657c:	e021      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800657e:	2303      	movs	r3, #3
 8006580:	e01f      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006582:	2302      	movs	r3, #2
 8006584:	e01d      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 8006586:	2301      	movs	r3, #1
 8006588:	e01b      	b.n	80065c2 <HAL_GPIO_Init+0x26a>
 800658a:	bf00      	nop
 800658c:	58000080 	.word	0x58000080
 8006590:	58024400 	.word	0x58024400
 8006594:	58000400 	.word	0x58000400
 8006598:	58020000 	.word	0x58020000
 800659c:	58020400 	.word	0x58020400
 80065a0:	58020800 	.word	0x58020800
 80065a4:	58020c00 	.word	0x58020c00
 80065a8:	58021000 	.word	0x58021000
 80065ac:	58021400 	.word	0x58021400
 80065b0:	58021800 	.word	0x58021800
 80065b4:	58021c00 	.word	0x58021c00
 80065b8:	58022000 	.word	0x58022000
 80065bc:	58022400 	.word	0x58022400
 80065c0:	2300      	movs	r3, #0
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	f002 0203 	and.w	r2, r2, #3
 80065c8:	0092      	lsls	r2, r2, #2
 80065ca:	4093      	lsls	r3, r2
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065d2:	4938      	ldr	r1, [pc, #224]	@ (80066b4 <HAL_GPIO_Init+0x35c>)
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	3302      	adds	r3, #2
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	43db      	mvns	r3, r3
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4013      	ands	r3, r2
 800661e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006634:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	43db      	mvns	r3, r3
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4013      	ands	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	43db      	mvns	r3, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4013      	ands	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3301      	adds	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	fa22 f303 	lsr.w	r3, r2, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f47f ae63 	bne.w	800636c <HAL_GPIO_Init+0x14>
  }
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	3724      	adds	r7, #36	@ 0x24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	58000400 	.word	0x58000400

080066b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	807b      	strh	r3, [r7, #2]
 80066c4:	4613      	mov	r3, r2
 80066c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066c8:	787b      	ldrb	r3, [r7, #1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80066d4:	e003      	b.n	80066de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066d6:	887b      	ldrh	r3, [r7, #2]
 80066d8:	041a      	lsls	r2, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	619a      	str	r2, [r3, #24]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e08b      	b.n	8006816 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fb f89e 	bl	8001854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	@ 0x24
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0201 	bic.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800673c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800674c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d107      	bne.n	8006766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	e006      	b.n	8006774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d108      	bne.n	800678e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	e007      	b.n	800679e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800679c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6859      	ldr	r1, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006820 <HAL_I2C_Init+0x134>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	02008000 	.word	0x02008000

08006824 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	461a      	mov	r2, r3
 8006830:	460b      	mov	r3, r1
 8006832:	817b      	strh	r3, [r7, #10]
 8006834:	4613      	mov	r3, r2
 8006836:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b20      	cmp	r3, #32
 8006842:	f040 80fd 	bne.w	8006a40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800684c:	2b01      	cmp	r3, #1
 800684e:	d101      	bne.n	8006854 <HAL_I2C_Master_Transmit+0x30>
 8006850:	2302      	movs	r3, #2
 8006852:	e0f6      	b.n	8006a42 <HAL_I2C_Master_Transmit+0x21e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800685c:	f7fb fdc8 	bl	80023f0 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	2319      	movs	r3, #25
 8006868:	2201      	movs	r2, #1
 800686a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f001 f891 	bl	8007996 <I2C_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e0e1      	b.n	8006a42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2221      	movs	r2, #33	@ 0x21
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2210      	movs	r2, #16
 800688a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	893a      	ldrh	r2, [r7, #8]
 800689e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2bff      	cmp	r3, #255	@ 0xff
 80068ae:	d906      	bls.n	80068be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	22ff      	movs	r2, #255	@ 0xff
 80068b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80068b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e007      	b.n	80068ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80068c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d024      	beq.n	8006920 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800690a:	b2db      	uxtb	r3, r3
 800690c:	3301      	adds	r3, #1
 800690e:	b2da      	uxtb	r2, r3
 8006910:	8979      	ldrh	r1, [r7, #10]
 8006912:	4b4e      	ldr	r3, [pc, #312]	@ (8006a4c <HAL_I2C_Master_Transmit+0x228>)
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f001 fa8b 	bl	8007e34 <I2C_TransferConfig>
 800691e:	e066      	b.n	80069ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006924:	b2da      	uxtb	r2, r3
 8006926:	8979      	ldrh	r1, [r7, #10]
 8006928:	4b48      	ldr	r3, [pc, #288]	@ (8006a4c <HAL_I2C_Master_Transmit+0x228>)
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 fa80 	bl	8007e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006934:	e05b      	b.n	80069ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	6a39      	ldr	r1, [r7, #32]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f001 f884 	bl	8007a48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e07b      	b.n	8006a42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d034      	beq.n	80069ee <HAL_I2C_Master_Transmit+0x1ca>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	d130      	bne.n	80069ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2200      	movs	r2, #0
 8006994:	2180      	movs	r1, #128	@ 0x80
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fffd 	bl	8007996 <I2C_WaitOnFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e04d      	b.n	8006a42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2bff      	cmp	r3, #255	@ 0xff
 80069ae:	d90e      	bls.n	80069ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	22ff      	movs	r2, #255	@ 0xff
 80069b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	8979      	ldrh	r1, [r7, #10]
 80069be:	2300      	movs	r3, #0
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f001 fa34 	bl	8007e34 <I2C_TransferConfig>
 80069cc:	e00f      	b.n	80069ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	8979      	ldrh	r1, [r7, #10]
 80069e0:	2300      	movs	r3, #0
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fa23 	bl	8007e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d19e      	bne.n	8006936 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	6a39      	ldr	r1, [r7, #32]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f001 f86a 	bl	8007ad6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e01a      	b.n	8006a42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2220      	movs	r2, #32
 8006a12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6859      	ldr	r1, [r3, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <HAL_I2C_Master_Transmit+0x22c>)
 8006a20:	400b      	ands	r3, r1
 8006a22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e000      	b.n	8006a42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
  }
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	80002000 	.word	0x80002000
 8006a50:	fe00e800 	.word	0xfe00e800

08006a54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	460b      	mov	r3, r1
 8006a62:	817b      	strh	r3, [r7, #10]
 8006a64:	4613      	mov	r3, r2
 8006a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	f040 80db 	bne.w	8006c2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_I2C_Master_Receive+0x30>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e0d4      	b.n	8006c2e <HAL_I2C_Master_Receive+0x1da>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a8c:	f7fb fcb0 	bl	80023f0 <HAL_GetTick>
 8006a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	2319      	movs	r3, #25
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 ff79 	bl	8007996 <I2C_WaitOnFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e0bf      	b.n	8006c2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2222      	movs	r2, #34	@ 0x22
 8006ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2210      	movs	r2, #16
 8006aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	893a      	ldrh	r2, [r7, #8]
 8006ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2bff      	cmp	r3, #255	@ 0xff
 8006ade:	d90e      	bls.n	8006afe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	22ff      	movs	r2, #255	@ 0xff
 8006ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	8979      	ldrh	r1, [r7, #10]
 8006aee:	4b52      	ldr	r3, [pc, #328]	@ (8006c38 <HAL_I2C_Master_Receive+0x1e4>)
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f001 f99c 	bl	8007e34 <I2C_TransferConfig>
 8006afc:	e06d      	b.n	8006bda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	8979      	ldrh	r1, [r7, #10]
 8006b10:	4b49      	ldr	r3, [pc, #292]	@ (8006c38 <HAL_I2C_Master_Receive+0x1e4>)
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 f98b 	bl	8007e34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b1e:	e05c      	b.n	8006bda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	6a39      	ldr	r1, [r7, #32]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f001 f819 	bl	8007b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e07c      	b.n	8006c2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d034      	beq.n	8006bda <HAL_I2C_Master_Receive+0x186>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d130      	bne.n	8006bda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2180      	movs	r1, #128	@ 0x80
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 ff07 	bl	8007996 <I2C_WaitOnFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e04d      	b.n	8006c2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2bff      	cmp	r3, #255	@ 0xff
 8006b9a:	d90e      	bls.n	8006bba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	22ff      	movs	r2, #255	@ 0xff
 8006ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	8979      	ldrh	r1, [r7, #10]
 8006baa:	2300      	movs	r3, #0
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 f93e 	bl	8007e34 <I2C_TransferConfig>
 8006bb8:	e00f      	b.n	8006bda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	8979      	ldrh	r1, [r7, #10]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f001 f92d 	bl	8007e34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d19d      	bne.n	8006b20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	6a39      	ldr	r1, [r7, #32]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 ff74 	bl	8007ad6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e01a      	b.n	8006c2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6859      	ldr	r1, [r3, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <HAL_I2C_Master_Receive+0x1e8>)
 8006c0c:	400b      	ands	r3, r1
 8006c0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e000      	b.n	8006c2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	80002400 	.word	0x80002400
 8006c3c:	fe00e800 	.word	0xfe00e800

08006c40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	09db      	lsrs	r3, r3, #7
 8006c9c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca8:	f043 0201 	orr.w	r2, r3, #1
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cb8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	0a9b      	lsrs	r3, r3, #10
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d010      	beq.n	8006ce8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	09db      	lsrs	r3, r3, #7
 8006cca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd6:	f043 0208 	orr.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ce6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	0a5b      	lsrs	r3, r3, #9
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	09db      	lsrs	r3, r3, #7
 8006cf8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00a      	beq.n	8006d16 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d04:	f043 0202 	orr.w	r2, r3, #2
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 030b 	and.w	r3, r3, #11
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fcdb 	bl	80076e4 <I2C_ITError>
  }
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <I2C_Slave_ISR_IT+0x24>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e0ed      	b.n	8006fb6 <I2C_Slave_ISR_IT+0x200>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006dfa:	6939      	ldr	r1, [r7, #16]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f9c1 	bl	8007184 <I2C_ITSlaveCplt>
 8006e02:	e0d3      	b.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d04d      	beq.n	8006eac <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d047      	beq.n	8006eac <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d128      	bne.n	8006e78 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b28      	cmp	r3, #40	@ 0x28
 8006e30:	d108      	bne.n	8006e44 <I2C_Slave_ISR_IT+0x8e>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e38:	d104      	bne.n	8006e44 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e3a:	6939      	ldr	r1, [r7, #16]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fbfb 	bl	8007638 <I2C_ITListenCplt>
 8006e42:	e032      	b.n	8006eaa <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b29      	cmp	r3, #41	@ 0x29
 8006e4e:	d10e      	bne.n	8006e6e <I2C_Slave_ISR_IT+0xb8>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e56:	d00a      	beq.n	8006e6e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2210      	movs	r2, #16
 8006e5e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fd56 	bl	8007912 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f92d 	bl	80070c6 <I2C_ITSlaveSeqCplt>
 8006e6c:	e01d      	b.n	8006eaa <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2210      	movs	r2, #16
 8006e74:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006e76:	e096      	b.n	8006fa6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e84:	f043 0204 	orr.w	r2, r3, #4
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <I2C_Slave_ISR_IT+0xe6>
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e98:	f040 8085 	bne.w	8006fa6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fc1e 	bl	80076e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006ea8:	e07d      	b.n	8006fa6 <I2C_Slave_ISR_IT+0x1f0>
 8006eaa:	e07c      	b.n	8006fa6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	089b      	lsrs	r3, r3, #2
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d030      	beq.n	8006f1a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	089b      	lsrs	r3, r3, #2
 8006ebc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d02a      	beq.n	8006f1a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d018      	beq.n	8006f00 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d14f      	bne.n	8006faa <I2C_Slave_ISR_IT+0x1f4>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f10:	d04b      	beq.n	8006faa <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f8d7 	bl	80070c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006f18:	e047      	b.n	8006faa <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	08db      	lsrs	r3, r3, #3
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	08db      	lsrs	r3, r3, #3
 8006f2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006f32:	6939      	ldr	r1, [r7, #16]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f842 	bl	8006fbe <I2C_ITAddrCplt>
 8006f3a:	e037      	b.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d031      	beq.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02b      	beq.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d018      	beq.n	8006f90 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f8e:	e00d      	b.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f96:	d002      	beq.n	8006f9e <I2C_Slave_ISR_IT+0x1e8>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f891 	bl	80070c6 <I2C_ITSlaveSeqCplt>
 8006fa4:	e002      	b.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006fa6:	bf00      	nop
 8006fa8:	e000      	b.n	8006fac <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006faa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006fd4:	2b28      	cmp	r3, #40	@ 0x28
 8006fd6:	d16a      	bne.n	80070ae <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	0c1b      	lsrs	r3, r3, #16
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006ff6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007004:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007012:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d138      	bne.n	800708e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800701c:	897b      	ldrh	r3, [r7, #10]
 800701e:	09db      	lsrs	r3, r3, #7
 8007020:	b29a      	uxth	r2, r3
 8007022:	89bb      	ldrh	r3, [r7, #12]
 8007024:	4053      	eors	r3, r2
 8007026:	b29b      	uxth	r3, r3
 8007028:	f003 0306 	and.w	r3, r3, #6
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11c      	bne.n	800706a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007030:	897b      	ldrh	r3, [r7, #10]
 8007032:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007042:	2b02      	cmp	r3, #2
 8007044:	d13b      	bne.n	80070be <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2208      	movs	r2, #8
 8007052:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800705c:	89ba      	ldrh	r2, [r7, #12]
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fe7b 	bl	8006d5e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007068:	e029      	b.n	80070be <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800706e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 ff10 	bl	8007e98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007080:	89ba      	ldrh	r2, [r7, #12]
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fe69 	bl	8006d5e <HAL_I2C_AddrCallback>
}
 800708c:	e017      	b.n	80070be <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800708e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 ff00 	bl	8007e98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80070a0:	89ba      	ldrh	r2, [r7, #12]
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fe59 	bl	8006d5e <HAL_I2C_AddrCallback>
}
 80070ac:	e007      	b.n	80070be <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2208      	movs	r2, #8
 80070b4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	0b9b      	lsrs	r3, r3, #14
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e00d      	b.n	8007118 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0bdb      	lsrs	r3, r3, #15
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d007      	beq.n	8007118 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007116:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b29      	cmp	r3, #41	@ 0x29
 8007122:	d112      	bne.n	800714a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2228      	movs	r2, #40	@ 0x28
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2221      	movs	r2, #33	@ 0x21
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007132:	2101      	movs	r1, #1
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 feaf 	bl	8007e98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fdf7 	bl	8006d36 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007148:	e017      	b.n	800717a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b2a      	cmp	r3, #42	@ 0x2a
 8007154:	d111      	bne.n	800717a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2228      	movs	r2, #40	@ 0x28
 800715a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2222      	movs	r2, #34	@ 0x22
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007164:	2102      	movs	r1, #2
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fe96 	bl	8007e98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fde8 	bl	8006d4a <HAL_I2C_SlaveRxCpltCallback>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2220      	movs	r2, #32
 80071ae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	2b21      	cmp	r3, #33	@ 0x21
 80071b4:	d002      	beq.n	80071bc <I2C_ITSlaveCplt+0x38>
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	2b29      	cmp	r3, #41	@ 0x29
 80071ba:	d108      	bne.n	80071ce <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80071bc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fe69 	bl	8007e98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2221      	movs	r2, #33	@ 0x21
 80071ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80071cc:	e019      	b.n	8007202 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80071ce:	7afb      	ldrb	r3, [r7, #11]
 80071d0:	2b22      	cmp	r3, #34	@ 0x22
 80071d2:	d002      	beq.n	80071da <I2C_ITSlaveCplt+0x56>
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d8:	d108      	bne.n	80071ec <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80071da:	f248 0102 	movw	r1, #32770	@ 0x8002
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fe5a 	bl	8007e98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2222      	movs	r2, #34	@ 0x22
 80071e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ea:	e00a      	b.n	8007202 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	2b28      	cmp	r3, #40	@ 0x28
 80071f0:	d107      	bne.n	8007202 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80071f2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fe4e 	bl	8007e98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007210:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6859      	ldr	r1, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	4b80      	ldr	r3, [pc, #512]	@ (8007420 <I2C_ITSlaveCplt+0x29c>)
 800721e:	400b      	ands	r3, r1
 8007220:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb75 	bl	8007912 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	0b9b      	lsrs	r3, r3, #14
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d07a      	beq.n	800732a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007242:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8112 	beq.w	8007472 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a73      	ldr	r2, [pc, #460]	@ (8007424 <I2C_ITSlaveCplt+0x2a0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d059      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a71      	ldr	r2, [pc, #452]	@ (8007428 <I2C_ITSlaveCplt+0x2a4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d053      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6f      	ldr	r2, [pc, #444]	@ (800742c <I2C_ITSlaveCplt+0x2a8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d04d      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a6d      	ldr	r2, [pc, #436]	@ (8007430 <I2C_ITSlaveCplt+0x2ac>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d047      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a6b      	ldr	r2, [pc, #428]	@ (8007434 <I2C_ITSlaveCplt+0x2b0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d041      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a69      	ldr	r2, [pc, #420]	@ (8007438 <I2C_ITSlaveCplt+0x2b4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d03b      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a67      	ldr	r2, [pc, #412]	@ (800743c <I2C_ITSlaveCplt+0x2b8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d035      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a65      	ldr	r2, [pc, #404]	@ (8007440 <I2C_ITSlaveCplt+0x2bc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d02f      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a63      	ldr	r2, [pc, #396]	@ (8007444 <I2C_ITSlaveCplt+0x2c0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d029      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a61      	ldr	r2, [pc, #388]	@ (8007448 <I2C_ITSlaveCplt+0x2c4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d023      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5f      	ldr	r2, [pc, #380]	@ (800744c <I2C_ITSlaveCplt+0x2c8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007450 <I2C_ITSlaveCplt+0x2cc>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d017      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5b      	ldr	r2, [pc, #364]	@ (8007454 <I2C_ITSlaveCplt+0x2d0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d011      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a59      	ldr	r2, [pc, #356]	@ (8007458 <I2C_ITSlaveCplt+0x2d4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00b      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a57      	ldr	r2, [pc, #348]	@ (800745c <I2C_ITSlaveCplt+0x2d8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d005      	beq.n	800730e <I2C_ITSlaveCplt+0x18a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a55      	ldr	r2, [pc, #340]	@ (8007460 <I2C_ITSlaveCplt+0x2dc>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d105      	bne.n	800731a <I2C_ITSlaveCplt+0x196>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	b29b      	uxth	r3, r3
 8007318:	e004      	b.n	8007324 <I2C_ITSlaveCplt+0x1a0>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b29b      	uxth	r3, r3
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007328:	e0a3      	b.n	8007472 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	0bdb      	lsrs	r3, r3, #15
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 809d 	beq.w	8007472 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007346:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8090 	beq.w	8007472 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a32      	ldr	r2, [pc, #200]	@ (8007424 <I2C_ITSlaveCplt+0x2a0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d059      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a30      	ldr	r2, [pc, #192]	@ (8007428 <I2C_ITSlaveCplt+0x2a4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d053      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <I2C_ITSlaveCplt+0x2a8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d04d      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2c      	ldr	r2, [pc, #176]	@ (8007430 <I2C_ITSlaveCplt+0x2ac>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d047      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a2a      	ldr	r2, [pc, #168]	@ (8007434 <I2C_ITSlaveCplt+0x2b0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d041      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a28      	ldr	r2, [pc, #160]	@ (8007438 <I2C_ITSlaveCplt+0x2b4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d03b      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a26      	ldr	r2, [pc, #152]	@ (800743c <I2C_ITSlaveCplt+0x2b8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d035      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a24      	ldr	r2, [pc, #144]	@ (8007440 <I2C_ITSlaveCplt+0x2bc>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02f      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a22      	ldr	r2, [pc, #136]	@ (8007444 <I2C_ITSlaveCplt+0x2c0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d029      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a20      	ldr	r2, [pc, #128]	@ (8007448 <I2C_ITSlaveCplt+0x2c4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d023      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1e      	ldr	r2, [pc, #120]	@ (800744c <I2C_ITSlaveCplt+0x2c8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007450 <I2C_ITSlaveCplt+0x2cc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d017      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007454 <I2C_ITSlaveCplt+0x2d0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d011      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a18      	ldr	r2, [pc, #96]	@ (8007458 <I2C_ITSlaveCplt+0x2d4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00b      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a16      	ldr	r2, [pc, #88]	@ (800745c <I2C_ITSlaveCplt+0x2d8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d005      	beq.n	8007412 <I2C_ITSlaveCplt+0x28e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a14      	ldr	r2, [pc, #80]	@ (8007460 <I2C_ITSlaveCplt+0x2dc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d128      	bne.n	8007464 <I2C_ITSlaveCplt+0x2e0>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	b29b      	uxth	r3, r3
 800741c:	e027      	b.n	800746e <I2C_ITSlaveCplt+0x2ea>
 800741e:	bf00      	nop
 8007420:	fe00e800 	.word	0xfe00e800
 8007424:	40020010 	.word	0x40020010
 8007428:	40020028 	.word	0x40020028
 800742c:	40020040 	.word	0x40020040
 8007430:	40020058 	.word	0x40020058
 8007434:	40020070 	.word	0x40020070
 8007438:	40020088 	.word	0x40020088
 800743c:	400200a0 	.word	0x400200a0
 8007440:	400200b8 	.word	0x400200b8
 8007444:	40020410 	.word	0x40020410
 8007448:	40020428 	.word	0x40020428
 800744c:	40020440 	.word	0x40020440
 8007450:	40020458 	.word	0x40020458
 8007454:	40020470 	.word	0x40020470
 8007458:	40020488 	.word	0x40020488
 800745c:	400204a0 	.word	0x400204a0
 8007460:	400204b8 	.word	0x400204b8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	b29b      	uxth	r3, r3
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	089b      	lsrs	r3, r3, #2
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d020      	beq.n	80074c0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 0304 	bic.w	r3, r3, #4
 8007484:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00c      	beq.n	80074c0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ce:	f043 0204 	orr.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04a      	beq.n	8007578 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	091b      	lsrs	r3, r3, #4
 80074e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d044      	beq.n	8007578 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d128      	bne.n	800754a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b28      	cmp	r3, #40	@ 0x28
 8007502:	d108      	bne.n	8007516 <I2C_ITSlaveCplt+0x392>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800750a:	d104      	bne.n	8007516 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f892 	bl	8007638 <I2C_ITListenCplt>
 8007514:	e030      	b.n	8007578 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b29      	cmp	r3, #41	@ 0x29
 8007520:	d10e      	bne.n	8007540 <I2C_ITSlaveCplt+0x3bc>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007528:	d00a      	beq.n	8007540 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2210      	movs	r2, #16
 8007530:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9ed 	bl	8007912 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff fdc4 	bl	80070c6 <I2C_ITSlaveSeqCplt>
 800753e:	e01b      	b.n	8007578 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2210      	movs	r2, #16
 8007546:	61da      	str	r2, [r3, #28]
 8007548:	e016      	b.n	8007578 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2210      	movs	r2, #16
 8007550:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	f043 0204 	orr.w	r2, r3, #4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <I2C_ITSlaveCplt+0x3e8>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800756a:	d105      	bne.n	8007578 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8b6 	bl	80076e4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800758a:	2b00      	cmp	r3, #0
 800758c:	d010      	beq.n	80075b0 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f8a5 	bl	80076e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b28      	cmp	r3, #40	@ 0x28
 80075a4:	d141      	bne.n	800762a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80075a6:	6979      	ldr	r1, [r7, #20]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f845 	bl	8007638 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075ae:	e03c      	b.n	800762a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80075b8:	d014      	beq.n	80075e4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fd83 	bl	80070c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007634 <I2C_ITSlaveCplt+0x4b0>)
 80075c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff fbcc 	bl	8006d7a <HAL_I2C_ListenCpltCallback>
}
 80075e2:	e022      	b.n	800762a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b22      	cmp	r3, #34	@ 0x22
 80075ee:	d10e      	bne.n	800760e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fb9f 	bl	8006d4a <HAL_I2C_SlaveRxCpltCallback>
}
 800760c:	e00d      	b.n	800762a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff fb86 	bl	8006d36 <HAL_I2C_SlaveTxCpltCallback>
}
 800762a:	bf00      	nop
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	ffff0000 	.word	0xffff0000

08007638 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a26      	ldr	r2, [pc, #152]	@ (80076e0 <I2C_ITListenCplt+0xa8>)
 8007646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	089b      	lsrs	r3, r3, #2
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d022      	beq.n	80076b6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	f043 0204 	orr.w	r2, r3, #4
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076b6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fbec 	bl	8007e98 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2210      	movs	r2, #16
 80076c6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fb52 	bl	8006d7a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	ffff0000 	.word	0xffff0000

080076e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a6d      	ldr	r2, [pc, #436]	@ (80078b8 <I2C_ITError+0x1d4>)
 8007702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b28      	cmp	r3, #40	@ 0x28
 800771a:	d005      	beq.n	8007728 <I2C_ITError+0x44>
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	2b29      	cmp	r3, #41	@ 0x29
 8007720:	d002      	beq.n	8007728 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	2b2a      	cmp	r3, #42	@ 0x2a
 8007726:	d10b      	bne.n	8007740 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007728:	2103      	movs	r1, #3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fbb4 	bl	8007e98 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2228      	movs	r2, #40	@ 0x28
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a60      	ldr	r2, [pc, #384]	@ (80078bc <I2C_ITError+0x1d8>)
 800773c:	635a      	str	r2, [r3, #52]	@ 0x34
 800773e:	e030      	b.n	80077a2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007740:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fba7 	bl	8007e98 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f8e1 	bl	8007912 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b60      	cmp	r3, #96	@ 0x60
 800775a:	d01f      	beq.n	800779c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2220      	movs	r2, #32
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b20      	cmp	r3, #32
 8007770:	d114      	bne.n	800779c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b10      	cmp	r3, #16
 800777e:	d109      	bne.n	8007794 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2210      	movs	r2, #16
 8007786:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800778c:	f043 0204 	orr.w	r2, r3, #4
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2220      	movs	r2, #32
 800779a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d039      	beq.n	8007824 <I2C_ITError+0x140>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b11      	cmp	r3, #17
 80077b4:	d002      	beq.n	80077bc <I2C_ITError+0xd8>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b21      	cmp	r3, #33	@ 0x21
 80077ba:	d133      	bne.n	8007824 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ca:	d107      	bne.n	80077dc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fd fd13 	bl	800520c <HAL_DMA_GetState>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d017      	beq.n	800781c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	4a33      	ldr	r2, [pc, #204]	@ (80078c0 <I2C_ITError+0x1dc>)
 80077f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	4618      	mov	r0, r3
 8007802:	f7fc fb93 	bl	8003f2c <HAL_DMA_Abort_IT>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d04d      	beq.n	80078a8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007816:	4610      	mov	r0, r2
 8007818:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800781a:	e045      	b.n	80078a8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f851 	bl	80078c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007822:	e041      	b.n	80078a8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d039      	beq.n	80078a0 <I2C_ITError+0x1bc>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b12      	cmp	r3, #18
 8007830:	d002      	beq.n	8007838 <I2C_ITError+0x154>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b22      	cmp	r3, #34	@ 0x22
 8007836:	d133      	bne.n	80078a0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007846:	d107      	bne.n	8007858 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007856:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800785c:	4618      	mov	r0, r3
 800785e:	f7fd fcd5 	bl	800520c <HAL_DMA_GetState>
 8007862:	4603      	mov	r3, r0
 8007864:	2b01      	cmp	r3, #1
 8007866:	d017      	beq.n	8007898 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786c:	4a14      	ldr	r2, [pc, #80]	@ (80078c0 <I2C_ITError+0x1dc>)
 800786e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787c:	4618      	mov	r0, r3
 800787e:	f7fc fb55 	bl	8003f2c <HAL_DMA_Abort_IT>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d011      	beq.n	80078ac <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800788c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007892:	4610      	mov	r0, r2
 8007894:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007896:	e009      	b.n	80078ac <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f813 	bl	80078c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800789e:	e005      	b.n	80078ac <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f80f 	bl	80078c4 <I2C_TreatErrorCallback>
  }
}
 80078a6:	e002      	b.n	80078ae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078a8:	bf00      	nop
 80078aa:	e000      	b.n	80078ae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078ac:	bf00      	nop
}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	ffff0000 	.word	0xffff0000
 80078bc:	08006db7 	.word	0x08006db7
 80078c0:	0800795b 	.word	0x0800795b

080078c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b60      	cmp	r3, #96	@ 0x60
 80078d6:	d10e      	bne.n	80078f6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff fa57 	bl	8006da2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078f4:	e009      	b.n	800790a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fa42 	bl	8006d8e <HAL_I2C_ErrorCallback>
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b02      	cmp	r3, #2
 8007926:	d103      	bne.n	8007930 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2200      	movs	r2, #0
 800792e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d007      	beq.n	800794e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699a      	ldr	r2, [r3, #24]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0201 	orr.w	r2, r2, #1
 800794c:	619a      	str	r2, [r3, #24]
  }
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007974:	2200      	movs	r2, #0
 8007976:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007984:	2200      	movs	r2, #0
 8007986:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff ff9b 	bl	80078c4 <I2C_TreatErrorCallback>
}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a6:	e03b      	b.n	8007a20 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f961 	bl	8007c74 <I2C_IsErrorOccurred>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e041      	b.n	8007a40 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d02d      	beq.n	8007a20 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c4:	f7fa fd14 	bl	80023f0 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d302      	bcc.n	80079da <I2C_WaitOnFlagUntilTimeout+0x44>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d122      	bne.n	8007a20 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d113      	bne.n	8007a20 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fc:	f043 0220 	orr.w	r2, r3, #32
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e00f      	b.n	8007a40 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d0b4      	beq.n	80079a8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a54:	e033      	b.n	8007abe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f90a 	bl	8007c74 <I2C_IsErrorOccurred>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e031      	b.n	8007ace <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d025      	beq.n	8007abe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a72:	f7fa fcbd 	bl	80023f0 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d013      	beq.n	8007abe <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e007      	b.n	8007ace <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d1c4      	bne.n	8007a56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ae2:	e02f      	b.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f8c3 	bl	8007c74 <I2C_IsErrorOccurred>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e02d      	b.n	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af8:	f7fa fc7a 	bl	80023f0 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d302      	bcc.n	8007b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d11a      	bne.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d013      	beq.n	8007b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e007      	b.n	8007b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d1c8      	bne.n	8007ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007b6c:	e071      	b.n	8007c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f87e 	bl	8007c74 <I2C_IsErrorOccurred>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d13b      	bne.n	8007c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d138      	bne.n	8007c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d105      	bne.n	8007bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d121      	bne.n	8007c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b24      	ldr	r3, [pc, #144]	@ (8007c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007be0:	400b      	ands	r3, r1
 8007be2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
 8007c00:	e002      	b.n	8007c08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007c08:	f7fa fbf2 	bl	80023f0 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d302      	bcc.n	8007c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d119      	bne.n	8007c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d116      	bne.n	8007c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d00f      	beq.n	8007c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c36:	f043 0220 	orr.w	r2, r3, #32
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d002      	beq.n	8007c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d083      	beq.n	8007b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	fe00e800 	.word	0xfe00e800

08007c74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	@ 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d068      	beq.n	8007d72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2210      	movs	r2, #16
 8007ca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ca8:	e049      	b.n	8007d3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb0:	d045      	beq.n	8007d3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cb2:	f7fa fb9d 	bl	80023f0 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d302      	bcc.n	8007cc8 <I2C_IsErrorOccurred+0x54>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d13a      	bne.n	8007d3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cea:	d121      	bne.n	8007d30 <I2C_IsErrorOccurred+0xbc>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cf2:	d01d      	beq.n	8007d30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007cf4:	7cfb      	ldrb	r3, [r7, #19]
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d01a      	beq.n	8007d30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d0a:	f7fa fb71 	bl	80023f0 <HAL_GetTick>
 8007d0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d10:	e00e      	b.n	8007d30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d12:	f7fa fb6d 	bl	80023f0 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b19      	cmp	r3, #25
 8007d1e:	d907      	bls.n	8007d30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	f043 0320 	orr.w	r3, r3, #32
 8007d26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007d2e:	e006      	b.n	8007d3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f003 0320 	and.w	r3, r3, #32
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d1e9      	bne.n	8007d12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d003      	beq.n	8007d54 <I2C_IsErrorOccurred+0xe0>
 8007d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0aa      	beq.n	8007caa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2220      	movs	r2, #32
 8007d62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	f043 0304 	orr.w	r3, r3, #4
 8007d6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00b      	beq.n	8007dbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f043 0308 	orr.w	r3, r3, #8
 8007dac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007db6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	f043 0302 	orr.w	r3, r3, #2
 8007dce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007de0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01c      	beq.n	8007e22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff fd92 	bl	8007912 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6859      	ldr	r1, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e30 <I2C_IsErrorOccurred+0x1bc>)
 8007dfa:	400b      	ands	r3, r1
 8007dfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3728      	adds	r7, #40	@ 0x28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	fe00e800 	.word	0xfe00e800

08007e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	817b      	strh	r3, [r7, #10]
 8007e42:	4613      	mov	r3, r2
 8007e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e46:	897b      	ldrh	r3, [r7, #10]
 8007e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e4c:	7a7b      	ldrb	r3, [r7, #9]
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e54:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e62:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	0d5b      	lsrs	r3, r3, #21
 8007e6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007e72:	4b08      	ldr	r3, [pc, #32]	@ (8007e94 <I2C_TransferConfig+0x60>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	43db      	mvns	r3, r3
 8007e78:	ea02 0103 	and.w	r1, r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	03ff63ff 	.word	0x03ff63ff

08007e98 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ea8:	887b      	ldrh	r3, [r7, #2]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007eb8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ec6:	2b28      	cmp	r3, #40	@ 0x28
 8007ec8:	d003      	beq.n	8007ed2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00f      	beq.n	8007efc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007ee2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ef0:	2b28      	cmp	r3, #40	@ 0x28
 8007ef2:	d003      	beq.n	8007efc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007efa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da03      	bge.n	8007f0c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007f0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f0c:	887b      	ldrh	r3, [r7, #2]
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d103      	bne.n	8007f1a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007f18:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d103      	bne.n	8007f28 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f043 0320 	orr.w	r3, r3, #32
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f28:	887b      	ldrh	r3, [r7, #2]
 8007f2a:	2b40      	cmp	r3, #64	@ 0x40
 8007f2c:	d103      	bne.n	8007f36 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6819      	ldr	r1, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	43da      	mvns	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	400a      	ands	r2, r1
 8007f46:	601a      	str	r2, [r3, #0]
}
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d138      	bne.n	8007fdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e032      	b.n	8007fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	@ 0x24
 8007f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6819      	ldr	r1, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0201 	orr.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d139      	bne.n	8008074 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800800a:	2302      	movs	r3, #2
 800800c:	e033      	b.n	8008076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2224      	movs	r2, #36	@ 0x24
 800801a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800803c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	e000      	b.n	8008076 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
	...

08008084 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e070      	b.n	8008178 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7f9 fc5e 	bl	800196c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0201 	bic.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008106:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008116:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a19      	ldr	r2, [pc, #100]	@ (8008180 <HAL_JPEG_Init+0xfc>)
 800811c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a18      	ldr	r2, [pc, #96]	@ (8008184 <HAL_JPEG_Init+0x100>)
 8008122:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fea1 	bl	8008e78 <JPEG_Set_HuffEnc_Mem>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e018      	b.n	8008178 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008154:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	080161f0 	.word	0x080161f0
 8008184:	08016230 	.word	0x08016230

08008188 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_JPEG_ConfigEncoding+0x16>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e191      	b.n	80084c6 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_JPEG_ConfigEncoding+0x28>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e18a      	b.n	80084c6 <HAL_JPEG_ConfigEncoding+0x33e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	f040 817b 	bne.w	80084bc <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008204:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d110      	bne.n	8008230 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f99b 	bl	8009550 <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3350      	adds	r3, #80	@ 0x50
 8008224:	461a      	mov	r2, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 f8a8 	bl	800937c <JPEG_Set_Quantization_Mem>
 800822c:	61f8      	str	r0, [r7, #28]
 800822e:	e0c5      	b.n	80083bc <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	2b10      	cmp	r3, #16
 8008236:	d166      	bne.n	8008306 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0210 	orr.w	r2, r2, #16
 8008246:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f909 	bl	8009460 <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3350      	adds	r3, #80	@ 0x50
 8008258:	461a      	mov	r2, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 f88e 	bl	800937c <JPEG_Set_Quantization_Mem>
 8008260:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3390      	adds	r3, #144	@ 0x90
 800826c:	461a      	mov	r2, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f884 	bl	800937c <JPEG_Set_Quantization_Mem>
 8008274:	4602      	mov	r2, r0
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4313      	orrs	r3, r2
 800827a:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8099 	beq.w	80083bc <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8008298:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0220 	orr.w	r2, r2, #32
 80082a8:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	33d0      	adds	r3, #208	@ 0xd0
 80082b4:	461a      	mov	r2, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f860 	bl	800937c <JPEG_Set_Quantization_Mem>
 80082bc:	4602      	mov	r2, r0
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695a      	ldr	r2, [r3, #20]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 020c 	bic.w	r2, r2, #12
 80082d2:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695a      	ldr	r2, [r3, #20]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0204 	orr.w	r2, r2, #4
 80082e2:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 020c 	bic.w	r2, r2, #12
 80082f2:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0208 	orr.w	r2, r2, #8
 8008302:	619a      	str	r2, [r3, #24]
 8008304:	e05a      	b.n	80083bc <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 f940 	bl	800958c <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3350      	adds	r3, #80	@ 0x50
 8008316:	461a      	mov	r2, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f82f 	bl	800937c <JPEG_Set_Quantization_Mem>
 800831e:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d047      	beq.n	80083bc <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800833a:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3390      	adds	r3, #144	@ 0x90
 8008346:	461a      	mov	r2, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 f817 	bl	800937c <JPEG_Set_Quantization_Mem>
 800834e:	4602      	mov	r2, r0
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4313      	orrs	r3, r2
 8008354:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	33d0      	adds	r3, #208	@ 0xd0
 8008360:	461a      	mov	r2, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 f80a 	bl	800937c <JPEG_Set_Quantization_Mem>
 8008368:	4602      	mov	r2, r0
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4313      	orrs	r3, r2
 800836e:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800837c:	461a      	mov	r2, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fffc 	bl	800937c <JPEG_Set_Quantization_Mem>
 8008384:	4602      	mov	r2, r0
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4313      	orrs	r3, r2
 800838a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0204 	orr.w	r2, r2, #4
 800839a:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0208 	orr.w	r2, r2, #8
 80083aa:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69da      	ldr	r2, [r3, #28]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 020c 	orr.w	r2, r2, #12
 80083ba:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00c      	beq.n	80083dc <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e074      	b.n	80084c6 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	b299      	uxth	r1, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	041a      	lsls	r2, r3, #16
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	b299      	uxth	r1, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	041a      	lsls	r2, r3, #16
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d104      	bne.n	800841a <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 8008410:	2310      	movs	r3, #16
 8008412:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 8008414:	2310      	movs	r3, #16
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e00c      	b.n	8008434 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d104      	bne.n	800842c <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 8008422:	2310      	movs	r3, #16
 8008424:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008426:	2308      	movs	r3, #8
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e003      	b.n	8008434 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 800842c:	2308      	movs	r3, #8
 800842e:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 8008430:	2308      	movs	r3, #8
 8008432:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	fbb3 f2f2 	udiv	r2, r3, r2
 800844a:	69b9      	ldr	r1, [r7, #24]
 800844c:	fb01 f202 	mul.w	r2, r1, r2
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008472:	6979      	ldr	r1, [r7, #20]
 8008474:	fb01 f202 	mul.w	r2, r1, r2
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	fb02 f303 	mul.w	r3, r2, r3
 800848c:	3b01      	subs	r3, #1
 800848e:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800849a:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	e004      	b.n	80084c6 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 80084c4:	2302      	movs	r3, #2
    }
  }
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_JPEG_GetInfo+0x16>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e083      	b.n	80085f0 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d103      	bne.n	80084fe <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	2210      	movs	r2, #16
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e017      	b.n	800852e <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	e00c      	b.n	800852e <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	2b03      	cmp	r3, #3
 8008520:	d103      	bne.n	800852a <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2230      	movs	r2, #48	@ 0x30
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e001      	b.n	800852e <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e060      	b.n	80085f0 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	0c1b      	lsrs	r3, r3, #16
 8008536:	b29a      	uxth	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	b29a      	uxth	r2, r3
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b10      	cmp	r3, #16
 8008550:	d003      	beq.n	800855a <HAL_JPEG_GetInfo+0x8c>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b30      	cmp	r3, #48	@ 0x30
 8008558:	d140      	bne.n	80085dc <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	091b      	lsrs	r3, r3, #4
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	091b      	lsrs	r3, r3, #4
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d109      	bne.n	800859e <HAL_JPEG_GetInfo+0xd0>
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d106      	bne.n	800859e <HAL_JPEG_GetInfo+0xd0>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2202      	movs	r2, #2
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	e01d      	b.n	80085da <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <HAL_JPEG_GetInfo+0xea>
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_JPEG_GetInfo+0xea>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d103      	bne.n	80085b8 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2200      	movs	r2, #0
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	e010      	b.n	80085da <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d109      	bne.n	80085d2 <HAL_JPEG_GetInfo+0x104>
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d106      	bne.n	80085d2 <HAL_JPEG_GetInfo+0x104>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d103      	bne.n	80085d2 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2201      	movs	r2, #1
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	e003      	b.n	80085da <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80085d8:	e003      	b.n	80085e2 <HAL_JPEG_GetInfo+0x114>
 80085da:	e002      	b.n	80085e2 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2200      	movs	r2, #0
 80085e0:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 feac 	bl	800a340 <JPEG_GetQuality>
 80085e8:	4602      	mov	r2, r0
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_JPEG_Encode_DMA+0x20>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <HAL_JPEG_Encode_DMA+0x20>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e059      	b.n	80086d0 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008622:	2b01      	cmp	r3, #1
 8008624:	d101      	bne.n	800862a <HAL_JPEG_Encode_DMA+0x32>
 8008626:	2302      	movs	r3, #2
 8008628:	e052      	b.n	80086d0 <HAL_JPEG_Encode_DMA+0xd8>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b01      	cmp	r3, #1
 800863c:	d005      	beq.n	800864a <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8008646:	2302      	movs	r3, #2
 8008648:	e042      	b.n	80086d0 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008656:	d134      	bne.n	80086c2 <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2203      	movs	r2, #3
 800865c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008664:	f023 020f 	bic.w	r2, r3, #15
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008670:	f043 020d 	orr.w	r2, r3, #13
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 ffdf 	bl	8009660 <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f001 fb00 	bl	8009ca8 <JPEG_DMA_StartProcess>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00f      	beq.n	80086ce <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2206      	movs	r2, #6
 80086b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e006      	b.n	80086d0 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	d116      	bne.n	8008720 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008700:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d033      	beq.n	800877a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008716:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	655a      	str	r2, [r3, #84]	@ 0x54
 800871e:	e02c      	b.n	800877a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008724:	f003 030c 	and.w	r3, r3, #12
 8008728:	2b08      	cmp	r3, #8
 800872a:	d126      	bne.n	800877a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f043 0306 	orr.w	r3, r3, #6
 8008748:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008758:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8008766:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	43da      	mvns	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	400a      	ands	r2, r1
 8008778:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <HAL_JPEG_ErrorCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_ErrorCallback could be implemented in the user file
   */
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800881c:	b2db      	uxtb	r3, r3
 800881e:	3b03      	subs	r3, #3
 8008820:	2b01      	cmp	r3, #1
 8008822:	d813      	bhi.n	800884c <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008828:	f003 030c 	and.w	r3, r3, #12
 800882c:	2b08      	cmp	r3, #8
 800882e:	d103      	bne.n	8008838 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 ff89 	bl	8009748 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8008836:	e00b      	b.n	8008850 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800883c:	f003 030c 	and.w	r3, r3, #12
 8008840:	2b0c      	cmp	r3, #12
 8008842:	d105      	bne.n	8008850 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 fac9 	bl	8009ddc <JPEG_DMA_ContinueProcess>
      break;
 800884a:	e001      	b.n	8008850 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800884c:	bf00      	nop
 800884e:	e000      	b.n	8008852 <HAL_JPEG_IRQHandler+0x44>
      break;
 8008850:	bf00      	nop
  }
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800885a:	b480      	push	{r7}
 800885c:	b08b      	sub	sp, #44	@ 0x2c
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800886c:	2300      	movs	r3, #0
 800886e:	61fb      	str	r3, [r7, #28]
 8008870:	e020      	b.n	80088b4 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	4413      	add	r3, r2
 8008882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008886:	d90f      	bls.n	80088a8 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e055      	b.n	8008938 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	b2da      	uxtb	r2, r3
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	440b      	add	r3, r1
 8008896:	3201      	adds	r2, #1
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]
      p++;
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	3301      	adds	r3, #1
 80088a0:	623b      	str	r3, [r7, #32]
      i--;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	3b01      	subs	r3, #1
 80088a6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80088a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1ee      	bne.n	800888c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	3301      	adds	r3, #1
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b0f      	cmp	r3, #15
 80088b8:	d9db      	bls.n	8008872 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	4413      	add	r3, r2
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6a3a      	ldr	r2, [r7, #32]
 80088c8:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	617b      	str	r3, [r7, #20]
  p = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80088d8:	e027      	b.n	800892a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4413      	add	r3, r2
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	601a      	str	r2, [r3, #0]
      p++;
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	3301      	adds	r3, #1
 80088ea:	623b      	str	r3, [r7, #32]
      code++;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	3301      	adds	r3, #1
 80088f0:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	4293      	cmp	r3, r2
 8008900:	d0eb      	beq.n	80088da <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b1f      	cmp	r3, #31
 8008906:	d901      	bls.n	800890c <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e015      	b.n	8008938 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800890c:	2201      	movs	r2, #1
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	d301      	bcc.n	800891e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e00c      	b.n	8008938 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	61bb      	str	r3, [r7, #24]
    si++;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	3301      	adds	r3, #1
 8008928:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	4413      	add	r3, r2
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1dd      	bne.n	80088f2 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	372c      	adds	r7, #44	@ 0x2c
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800894a:	af00      	add	r7, sp, #0
 800894c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008950:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008954:	6018      	str	r0, [r3, #0]
 8008956:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800895a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800895e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008960:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008964:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	f107 020c 	add.w	r2, r7, #12
 8008972:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8008976:	f7ff ff70 	bl	800885a <JPEG_Bits_To_SizeCodes>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8008980:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008988:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800898c:	e075      	b.n	8008a7a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8008994:	e067      	b.n	8008a66 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8008996:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800899a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80089a4:	4413      	add	r3, r2
 80089a6:	3310      	adds	r3, #16
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80089ae:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80089b6:	23a0      	movs	r3, #160	@ 0xa0
 80089b8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80089bc:	e021      	b.n	8008a02 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80089be:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80089c2:	2bf0      	cmp	r3, #240	@ 0xf0
 80089c4:	d103      	bne.n	80089ce <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80089c6:	23a1      	movs	r3, #161	@ 0xa1
 80089c8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80089cc:	e019      	b.n	8008a02 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80089ce:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80089dc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80089e8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	461a      	mov	r2, r3
 80089f6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80089fa:	4413      	add	r3, r2
 80089fc:	3b01      	subs	r3, #1
 80089fe:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008a02:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a06:	2ba1      	cmp	r3, #161	@ 0xa1
 8008a08:	d901      	bls.n	8008a0e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e035      	b.n	8008a7a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008a0e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a12:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008a16:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a1e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a22:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008a26:	6819      	ldr	r1, [r3, #0]
 8008a28:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a2c:	3328      	adds	r3, #40	@ 0x28
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008a34:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a38:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8008a3c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b2d9      	uxtb	r1, r3
 8008a48:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a4c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008a56:	4413      	add	r3, r2
 8008a58:	460a      	mov	r2, r1
 8008a5a:	701a      	strb	r2, [r3, #0]
      k++;
 8008a5c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008a60:	3301      	adds	r3, #1
 8008a62:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8008a66:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008a6a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d38e      	bcc.n	8008996 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008a90:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008a94:	6018      	str	r0, [r3, #0]
 8008a96:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008a9a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008a9e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008aa0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008aa4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8008aae:	f107 0208 	add.w	r2, r7, #8
 8008ab2:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8008ab6:	f7ff fed0 	bl	800885a <JPEG_Bits_To_SizeCodes>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8008ac0:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008ac8:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008acc:	e048      	b.n	8008b60 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8008ad4:	e03d      	b.n	8008b52 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8008ad6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008ada:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3310      	adds	r3, #16
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008aee:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008af2:	2b0b      	cmp	r3, #11
 8008af4:	d901      	bls.n	8008afa <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008af6:	2301      	movs	r3, #1
 8008af8:	e032      	b.n	8008b60 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008afa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008afe:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8008b02:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008b06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b0a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b0e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008b18:	3302      	adds	r3, #2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008b20:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b24:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008b28:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008b2c:	4413      	add	r3, r2
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b2d9      	uxtb	r1, r3
 8008b34:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008b38:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008b42:	4413      	add	r3, r2
 8008b44:	460a      	mov	r2, r1
 8008b46:	701a      	strb	r2, [r3, #0]
      k++;
 8008b48:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8008b52:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8008b56:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d3bb      	bcc.n	8008ad6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b09a      	sub	sp, #104	@ 0x68
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d106      	bne.n	8008b92 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b90:	e00f      	b.n	8008bb2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d106      	bne.n	8008bae <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8008ba8:	3318      	adds	r3, #24
 8008baa:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bac:	e001      	b.n	8008bb2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e059      	b.n	8008c66 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d055      	beq.n	8008c64 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	68b8      	ldr	r0, [r7, #8]
 8008bc0:	f7ff ff60 	bl	8008a84 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8008bca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8008bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bd6:	e046      	b.n	8008c66 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8008bd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bda:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bde:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008be2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008be4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008be6:	3304      	adds	r3, #4
 8008be8:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8008bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bec:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008bf0:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8008bf6:	e032      	b.n	8008c5e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8008bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8008bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c00:	3b04      	subs	r3, #4
 8008c02:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008c04:	f107 0214 	add.w	r2, r7, #20
 8008c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c0a:	4413      	add	r3, r2
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c16:	3302      	adds	r3, #2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	3368      	adds	r3, #104	@ 0x68
 8008c1c:	443b      	add	r3, r7
 8008c1e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4313      	orrs	r3, r2
 8008c26:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8008c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008c2e:	f107 0214 	add.w	r2, r7, #20
 8008c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c34:	4413      	add	r3, r2
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c40:	3302      	adds	r3, #2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	3368      	adds	r3, #104	@ 0x68
 8008c46:	443b      	add	r3, r7
 8008c48:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c54:	041a      	lsls	r2, r3, #16
 8008c56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c5c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008c5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d8c9      	bhi.n	8008bf8 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3768      	adds	r7, #104	@ 0x68
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008c7c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008c80:	6018      	str	r0, [r3, #0]
 8008c82:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008c86:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008c8a:	6019      	str	r1, [r3, #0]
 8008c8c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008c90:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8008c94:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008c96:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008c9a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ca6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008caa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d10c      	bne.n	8008cce <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008cb4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008cb8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008cc8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008ccc:	e01d      	b.n	8008d0a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8008cce:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008cd2:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008cde:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8008ce2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d10c      	bne.n	8008d06 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008cec:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008cf0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8008cfc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8008d00:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8008d04:	e001      	b.n	8008d0a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e0a8      	b.n	8008e5c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8008d0a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d0e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 80a0 	beq.w	8008e5a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8008d1a:	f107 0214 	add.w	r2, r7, #20
 8008d1e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008d22:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8008d26:	4611      	mov	r1, r2
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f7ff fe0b 	bl	8008944 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8008d34:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8008d3c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8008d40:	e08c      	b.n	8008e5c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8008d42:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008d46:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008d50:	e00e      	b.n	8008d70 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8008d52:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008d56:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8008d5a:	601a      	str	r2, [r3, #0]
      addressDef++;
 8008d5c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008d60:	3304      	adds	r3, #4
 8008d62:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8008d66:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8008d70:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d9ec      	bls.n	8008d52 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8008d78:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8008e68 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8008d7e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008d80:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008d84:	3304      	adds	r3, #4
 8008d86:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8008d8a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008d8e:	4a37      	ldr	r2, [pc, #220]	@ (8008e6c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8008d90:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008d92:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008d96:	3304      	adds	r3, #4
 8008d98:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8008d9c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008da0:	4a33      	ldr	r2, [pc, #204]	@ (8008e70 <JPEG_Set_HuffAC_Mem+0x200>)
 8008da2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8008da4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008da8:	3304      	adds	r3, #4
 8008daa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8008dae:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8008db2:	4a30      	ldr	r2, [pc, #192]	@ (8008e74 <JPEG_Set_HuffAC_Mem+0x204>)
 8008db4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8008db6:	23a2      	movs	r3, #162	@ 0xa2
 8008db8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8008dbc:	e049      	b.n	8008e52 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8008dbe:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8008dc8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008dd2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008dd6:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008dda:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008dde:	4413      	add	r3, r2
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008de8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008dec:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008df0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008df4:	3328      	adds	r3, #40	@ 0x28
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8008e04:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008e0e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e12:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8008e16:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e1a:	4413      	add	r3, r2
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	021b      	lsls	r3, r3, #8
 8008e20:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008e24:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8008e28:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8008e2c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e30:	3328      	adds	r3, #40	@ 0x28
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	440b      	add	r3, r1
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008e40:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8008e44:	041a      	lsls	r2, r3, #16
 8008e46:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8008e50:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8008e52:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d8b1      	bhi.n	8008dbe <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	0fd10fd0 	.word	0x0fd10fd0
 8008e6c:	0fd30fd2 	.word	0x0fd30fd2
 8008e70:	0fd50fd4 	.word	0x0fd50fd4
 8008e74:	0fd70fd6 	.word	0x0fd70fd6

08008e78 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f84d 	bl	8008f20 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008e8e:	461a      	mov	r2, r3
 8008e90:	491f      	ldr	r1, [pc, #124]	@ (8008f10 <JPEG_Set_HuffEnc_Mem+0x98>)
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff feec 	bl	8008c70 <JPEG_Set_HuffAC_Mem>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	e030      	b.n	8008f08 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4918      	ldr	r1, [pc, #96]	@ (8008f14 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff fedc 	bl	8008c70 <JPEG_Set_HuffAC_Mem>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	e020      	b.n	8008f08 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008ece:	461a      	mov	r2, r3
 8008ed0:	4911      	ldr	r1, [pc, #68]	@ (8008f18 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff fe49 	bl	8008b6a <JPEG_Set_HuffDC_Mem>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	e010      	b.n	8008f08 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008eee:	461a      	mov	r2, r3
 8008ef0:	490a      	ldr	r1, [pc, #40]	@ (8008f1c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff fe39 	bl	8008b6a <JPEG_Set_HuffDC_Mem>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	e000      	b.n	8008f08 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	08016048 	.word	0x08016048
 8008f14:	080160fc 	.word	0x080160fc
 8008f18:	08016010 	.word	0x08016010
 8008f1c:	0801602c 	.word	0x0801602c

08008f20 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b08b      	sub	sp, #44	@ 0x2c
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8008f28:	4b80      	ldr	r3, [pc, #512]	@ (800912c <JPEG_Set_Huff_DHTMem+0x20c>)
 8008f2a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8008f2c:	4b80      	ldr	r3, [pc, #512]	@ (8009130 <JPEG_Set_Huff_DHTMem+0x210>)
 8008f2e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8008f30:	4b80      	ldr	r3, [pc, #512]	@ (8009134 <JPEG_Set_Huff_DHTMem+0x214>)
 8008f32:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8008f34:	4b80      	ldr	r3, [pc, #512]	@ (8009138 <JPEG_Set_Huff_DHTMem+0x218>)
 8008f36:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8008f40:	330c      	adds	r3, #12
 8008f42:	623b      	str	r3, [r7, #32]
  index = 16;
 8008f44:	2310      	movs	r3, #16
 8008f46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008f48:	e01d      	b.n	8008f86 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	5cd3      	ldrb	r3, [r2, r3]
 8008f52:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f56:	3b02      	subs	r3, #2
 8008f58:	6979      	ldr	r1, [r7, #20]
 8008f5a:	5ccb      	ldrb	r3, [r1, r3]
 8008f5c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008f5e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f62:	3b03      	subs	r3, #3
 8008f64:	6979      	ldr	r1, [r7, #20]
 8008f66:	5ccb      	ldrb	r3, [r1, r3]
 8008f68:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008f6a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f6e:	3a04      	subs	r2, #4
 8008f70:	6979      	ldr	r1, [r7, #20]
 8008f72:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008f74:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	601a      	str	r2, [r3, #0]
    address--;
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	3b04      	subs	r3, #4
 8008f7e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f82:	3b04      	subs	r3, #4
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d8de      	bhi.n	8008f4a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8008f94:	3318      	adds	r3, #24
 8008f96:	623b      	str	r3, [r7, #32]
  index = 12;
 8008f98:	230c      	movs	r3, #12
 8008f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008f9c:	e021      	b.n	8008fe2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	7c1b      	ldrb	r3, [r3, #16]
 8008fa8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	3b02      	subs	r3, #2
 8008fae:	6979      	ldr	r1, [r7, #20]
 8008fb0:	440b      	add	r3, r1
 8008fb2:	7c1b      	ldrb	r3, [r3, #16]
 8008fb4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008fb6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	3b03      	subs	r3, #3
 8008fbc:	6979      	ldr	r1, [r7, #20]
 8008fbe:	440b      	add	r3, r1
 8008fc0:	7c1b      	ldrb	r3, [r3, #16]
 8008fc2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8008fc4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc8:	3a04      	subs	r2, #4
 8008fca:	6979      	ldr	r1, [r7, #20]
 8008fcc:	440a      	add	r2, r1
 8008fce:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8008fd0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	601a      	str	r2, [r3, #0]
    address--;
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fde:	3b04      	subs	r3, #4
 8008fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d8da      	bhi.n	8008f9e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8008ff0:	3328      	adds	r3, #40	@ 0x28
 8008ff2:	623b      	str	r3, [r7, #32]
  index = 16;
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8008ff8:	e01d      	b.n	8009036 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	69fa      	ldr	r2, [r7, #28]
 8009000:	5cd3      	ldrb	r3, [r2, r3]
 8009002:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009006:	3b02      	subs	r3, #2
 8009008:	69f9      	ldr	r1, [r7, #28]
 800900a:	5ccb      	ldrb	r3, [r1, r3]
 800900c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800900e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009012:	3b03      	subs	r3, #3
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	5ccb      	ldrb	r3, [r1, r3]
 8009018:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800901a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800901c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800901e:	3a04      	subs	r2, #4
 8009020:	69f9      	ldr	r1, [r7, #28]
 8009022:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009024:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	601a      	str	r2, [r3, #0]
    address--;
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	3b04      	subs	r3, #4
 800902e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009032:	3b04      	subs	r3, #4
 8009034:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	2b03      	cmp	r3, #3
 800903a:	d8de      	bhi.n	8008ffa <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009044:	33cc      	adds	r3, #204	@ 0xcc
 8009046:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b3b      	ldr	r3, [pc, #236]	@ (800913c <JPEG_Set_Huff_DHTMem+0x21c>)
 800904e:	4013      	ands	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8009058:	021a      	lsls	r2, r3, #8
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4313      	orrs	r3, r2
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	3b04      	subs	r3, #4
 8009072:	623b      	str	r3, [r7, #32]
  index = 160;
 8009074:	23a0      	movs	r3, #160	@ 0xa0
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009078:	e021      	b.n	80090be <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	3b01      	subs	r3, #1
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	4413      	add	r3, r2
 8009082:	7c1b      	ldrb	r3, [r3, #16]
 8009084:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	3b02      	subs	r3, #2
 800908a:	69f9      	ldr	r1, [r7, #28]
 800908c:	440b      	add	r3, r1
 800908e:	7c1b      	ldrb	r3, [r3, #16]
 8009090:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009092:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	3b03      	subs	r3, #3
 8009098:	69f9      	ldr	r1, [r7, #28]
 800909a:	440b      	add	r3, r1
 800909c:	7c1b      	ldrb	r3, [r3, #16]
 800909e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80090a0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80090a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a4:	3a04      	subs	r2, #4
 80090a6:	69f9      	ldr	r1, [r7, #28]
 80090a8:	440a      	add	r2, r1
 80090aa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80090ac:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	601a      	str	r2, [r3, #0]
    address--;
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	3b04      	subs	r3, #4
 80090b6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ba:	3b04      	subs	r3, #4
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d8da      	bhi.n	800907a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80090cc:	33cc      	adds	r3, #204	@ 0xcc
 80090ce:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	061a      	lsls	r2, r3, #24
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	041b      	lsls	r3, r3, #16
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  *address = value;
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80090fa:	33dc      	adds	r3, #220	@ 0xdc
 80090fc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b0e      	ldr	r3, [pc, #56]	@ (800913c <JPEG_Set_Huff_DHTMem+0x21c>)
 8009104:	4013      	ands	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	7bdb      	ldrb	r3, [r3, #15]
 800910c:	021a      	lsls	r2, r3, #8
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	7b92      	ldrb	r2, [r2, #14]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
  *address = value;
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	3b04      	subs	r3, #4
 8009124:	623b      	str	r3, [r7, #32]
  index = 12;
 8009126:	230c      	movs	r3, #12
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800912a:	e027      	b.n	800917c <JPEG_Set_Huff_DHTMem+0x25c>
 800912c:	08016048 	.word	0x08016048
 8009130:	080160fc 	.word	0x080160fc
 8009134:	08016010 	.word	0x08016010
 8009138:	0801602c 	.word	0x0801602c
 800913c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	3301      	adds	r3, #1
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	5cd3      	ldrb	r3, [r2, r3]
 8009148:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800914a:	6939      	ldr	r1, [r7, #16]
 800914c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914e:	440b      	add	r3, r1
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009154:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	3b01      	subs	r3, #1
 800915a:	6939      	ldr	r1, [r7, #16]
 800915c:	5ccb      	ldrb	r3, [r1, r3]
 800915e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009160:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8009162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009164:	3a02      	subs	r2, #2
 8009166:	6939      	ldr	r1, [r7, #16]
 8009168:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800916a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	601a      	str	r2, [r3, #0]
    address--;
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	3b04      	subs	r3, #4
 8009174:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	3b04      	subs	r3, #4
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	2b03      	cmp	r3, #3
 8009180:	d8de      	bhi.n	8009140 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800918a:	33dc      	adds	r3, #220	@ 0xdc
 800918c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	b29b      	uxth	r3, r3
 8009194:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	7c5b      	ldrb	r3, [r3, #17]
 800919a:	061a      	lsls	r2, r3, #24
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	431a      	orrs	r2, r3
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	7c1b      	ldrb	r3, [r3, #16]
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80091b8:	33e8      	adds	r3, #232	@ 0xe8
 80091ba:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b6d      	ldr	r3, [pc, #436]	@ (8009378 <JPEG_Set_Huff_DHTMem+0x458>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	7edb      	ldrb	r3, [r3, #27]
 80091ca:	021a      	lsls	r2, r3, #8
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	7e92      	ldrb	r2, [r2, #26]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80091d8:	6a3b      	ldr	r3, [r7, #32]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	3b04      	subs	r3, #4
 80091e2:	623b      	str	r3, [r7, #32]
  index = 8;
 80091e4:	2308      	movs	r3, #8
 80091e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80091e8:	e021      	b.n	800922e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80091ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ec:	3301      	adds	r3, #1
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	7c1b      	ldrb	r3, [r3, #16]
 80091f4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80091f6:	6939      	ldr	r1, [r7, #16]
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	440b      	add	r3, r1
 80091fc:	3310      	adds	r3, #16
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009202:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	3b01      	subs	r3, #1
 8009208:	6939      	ldr	r1, [r7, #16]
 800920a:	440b      	add	r3, r1
 800920c:	7c1b      	ldrb	r3, [r3, #16]
 800920e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009210:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8009212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009214:	3a02      	subs	r2, #2
 8009216:	6939      	ldr	r1, [r7, #16]
 8009218:	440a      	add	r2, r1
 800921a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800921c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	601a      	str	r2, [r3, #0]
    address--;
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	3b04      	subs	r3, #4
 8009226:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	3b04      	subs	r3, #4
 800922c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	2b03      	cmp	r3, #3
 8009232:	d8da      	bhi.n	80091ea <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800923c:	33e8      	adds	r3, #232	@ 0xe8
 800923e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	785b      	ldrb	r3, [r3, #1]
 800924c:	061a      	lsls	r2, r3, #24
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	431a      	orrs	r2, r3
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	041b      	lsls	r3, r3, #16
 8009258:	4313      	orrs	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800926a:	33f8      	adds	r3, #248	@ 0xf8
 800926c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4b41      	ldr	r3, [pc, #260]	@ (8009378 <JPEG_Set_Huff_DHTMem+0x458>)
 8009274:	4013      	ands	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	7bdb      	ldrb	r3, [r3, #15]
 800927c:	021a      	lsls	r2, r3, #8
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4313      	orrs	r3, r2
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	7b92      	ldrb	r2, [r2, #14]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  *address = value;
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	3b04      	subs	r3, #4
 8009294:	623b      	str	r3, [r7, #32]
  index = 12;
 8009296:	230c      	movs	r3, #12
 8009298:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800929a:	e01d      	b.n	80092d8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800929c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929e:	3301      	adds	r3, #1
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	5cd3      	ldrb	r3, [r2, r3]
 80092a4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80092a6:	69b9      	ldr	r1, [r7, #24]
 80092a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092aa:	440b      	add	r3, r1
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80092b0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	3b01      	subs	r3, #1
 80092b6:	69b9      	ldr	r1, [r7, #24]
 80092b8:	5ccb      	ldrb	r3, [r1, r3]
 80092ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80092bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80092be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c0:	3a02      	subs	r2, #2
 80092c2:	69b9      	ldr	r1, [r7, #24]
 80092c4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80092c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	601a      	str	r2, [r3, #0]
    address--;
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	3b04      	subs	r3, #4
 80092d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	3b04      	subs	r3, #4
 80092d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d8de      	bhi.n	800929c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80092e6:	33f8      	adds	r3, #248	@ 0xf8
 80092e8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	7c5b      	ldrb	r3, [r3, #17]
 80092f6:	061a      	lsls	r2, r3, #24
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	431a      	orrs	r2, r3
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	7c1b      	ldrb	r3, [r3, #16]
 8009300:	041b      	lsls	r3, r3, #16
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009306:	6a3b      	ldr	r3, [r7, #32]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009314:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009318:	623b      	str	r3, [r7, #32]
  index = 160;
 800931a:	23a0      	movs	r3, #160	@ 0xa0
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800931e:	e021      	b.n	8009364 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	3301      	adds	r3, #1
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	4413      	add	r3, r2
 8009328:	7c1b      	ldrb	r3, [r3, #16]
 800932a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800932c:	69b9      	ldr	r1, [r7, #24]
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	440b      	add	r3, r1
 8009332:	3310      	adds	r3, #16
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009338:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933c:	3b01      	subs	r3, #1
 800933e:	69b9      	ldr	r1, [r7, #24]
 8009340:	440b      	add	r3, r1
 8009342:	7c1b      	ldrb	r3, [r3, #16]
 8009344:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009346:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8009348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800934a:	3a02      	subs	r2, #2
 800934c:	69b9      	ldr	r1, [r7, #24]
 800934e:	440a      	add	r2, r1
 8009350:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009352:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	601a      	str	r2, [r3, #0]
    address--;
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	3b04      	subs	r3, #4
 800935c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009360:	3b04      	subs	r3, #4
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009366:	2b03      	cmp	r3, #3
 8009368:	d8da      	bhi.n	8009320 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	372c      	adds	r7, #44	@ 0x2c
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	ffff0000 	.word	0xffff0000

0800937c <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 800937c:	b480      	push	{r7}
 800937e:	b08b      	sub	sp, #44	@ 0x2c
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	2b31      	cmp	r3, #49	@ 0x31
 8009392:	d90a      	bls.n	80093aa <JPEG_Set_Quantization_Mem+0x2e>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	2b64      	cmp	r3, #100	@ 0x64
 800939a:	d806      	bhi.n	80093aa <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e00d      	b.n	80093c6 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e001      	b.n	80093c6 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e041      	b.n	800944a <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80093ca:	e03a      	b.n	8009442 <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 80093d0:	2300      	movs	r3, #0
 80093d2:	623b      	str	r3, [r7, #32]
 80093d4:	e029      	b.n	800942a <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 80093d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	4413      	add	r3, r2
 80093dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009458 <JPEG_Set_Quantization_Mem+0xdc>)
 80093de:	5cd3      	ldrb	r3, [r2, r3]
 80093e0:	461a      	mov	r2, r3
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	4413      	add	r3, r2
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	fb02 f303 	mul.w	r3, r2, r3
 80093f0:	3332      	adds	r3, #50	@ 0x32
 80093f2:	4a1a      	ldr	r2, [pc, #104]	@ (800945c <JPEG_Set_Quantization_Mem+0xe0>)
 80093f4:	fba2 2303 	umull	r2, r3, r2, r3
 80093f8:	095b      	lsrs	r3, r3, #5
 80093fa:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 8009402:	2301      	movs	r3, #1
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	e004      	b.n	8009412 <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2bff      	cmp	r3, #255	@ 0xff
 800940c:	d901      	bls.n	8009412 <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 800940e:	23ff      	movs	r3, #255	@ 0xff
 8009410:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	fa02 f303 	lsl.w	r3, r2, r3
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	4313      	orrs	r3, r2
 8009422:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 8009424:	6a3b      	ldr	r3, [r7, #32]
 8009426:	3301      	adds	r3, #1
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	2b03      	cmp	r3, #3
 800942e:	d9d2      	bls.n	80093d6 <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	3304      	adds	r3, #4
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	3304      	adds	r3, #4
 8009440:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009444:	2b3c      	cmp	r3, #60	@ 0x3c
 8009446:	d9c1      	bls.n	80093cc <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	372c      	adds	r7, #44	@ 0x2c
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	080161b0 	.word	0x080161b0
 800945c:	51eb851f 	.word	0x51eb851f

08009460 <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0203 	bic.w	r2, r2, #3
 8009476:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0202 	orr.w	r2, r2, #2
 8009486:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d108      	bne.n	80094a2 <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 8009490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009494:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 8009496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800949a:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800949c:	2330      	movs	r3, #48	@ 0x30
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e014      	b.n	80094cc <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d108      	bne.n	80094bc <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 80094aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094ae:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80094b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094b4:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 80094b6:	2310      	movs	r3, #16
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	e007      	b.n	80094cc <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 80094bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094c0:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80094c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094c6:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 80094da:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 80094ea:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2200      	movs	r2, #0
 80094f2:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6919      	ldr	r1, [r3, #16]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	431a      	orrs	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2200      	movs	r2, #0
 8009516:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6959      	ldr	r1, [r3, #20]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009526:	430b      	orrs	r3, r1
 8009528:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2200      	movs	r2, #0
 8009530:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6999      	ldr	r1, [r3, #24]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	f241 1307 	movw	r3, #4359	@ 0x1107
 8009540:	430b      	orrs	r3, r1
 8009542:	6193      	str	r3, [r2, #24]

}
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 8009566:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2200      	movs	r2, #0
 800956e:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	691a      	ldr	r2, [r3, #16]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800957e:	611a      	str	r2, [r3, #16]
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 80095a2:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d108      	bne.n	80095be <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 80095ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80095b0:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 80095b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095b6:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 80095b8:	2330      	movs	r3, #48	@ 0x30
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	e014      	b.n	80095e8 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d108      	bne.n	80095d8 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 80095c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80095ca:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80095cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095d0:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 80095d2:	2310      	movs	r3, #16
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	e007      	b.n	80095e8 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 80095d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095dc:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 80095de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095e2:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 80095e4:	2300      	movs	r3, #0
 80095e6:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2200      	movs	r2, #0
 80095ee:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6919      	ldr	r1, [r3, #16]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2200      	movs	r2, #0
 8009612:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695a      	ldr	r2, [r3, #20]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009622:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2200      	movs	r2, #0
 800962a:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	699a      	ldr	r2, [r3, #24]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800963a:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2200      	movs	r2, #0
 8009642:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	69da      	ldr	r2, [r3, #28]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8009652:	61da      	str	r2, [r3, #28]
}
 8009654:	bf00      	nop
 8009656:	371c      	adds	r7, #28
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009678:	f003 0303 	and.w	r3, r3, #3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d108      	bne.n	8009692 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0208 	orr.w	r2, r2, #8
 800968e:	605a      	str	r2, [r3, #4]
 8009690:	e007      	b.n	80096a2 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0208 	bic.w	r2, r2, #8
 80096a0:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0201 	bic.w	r2, r2, #1
 80096b0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80096c0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096e0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80096f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f042 0201 	orr.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009706:	f003 030c 	and.w	r3, r3, #12
 800970a:	2b08      	cmp	r3, #8
 800970c:	d108      	bne.n	8009720 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800971c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800971e:	e00d      	b.n	800973c <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009724:	f003 030c 	and.w	r3, r3, #12
 8009728:	2b0c      	cmp	r3, #12
 800972a:	d107      	bne.n	800973c <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800973a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d125      	bne.n	80097a8 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01e      	beq.n	80097a8 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3304      	adds	r3, #4
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7fe feac 	bl	80084ce <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3304      	adds	r3, #4
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff f824 	bl	80087d0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009796:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d116      	bne.n	80097e2 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d004      	beq.n	80097cc <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80097c2:	2108      	movs	r1, #8
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f988 	bl	8009ada <JPEG_ReadInputData>
 80097ca:	e00a      	b.n	80097e2 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80097da:	2101      	movs	r1, #1
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f97c 	bl	8009ada <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d116      	bne.n	800981c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f4:	f003 0308 	and.w	r3, r3, #8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80097fc:	2108      	movs	r1, #8
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f864 	bl	80098cc <JPEG_StoreOutputData>
 8009804:	e00a      	b.n	800981c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980c:	f003 0310 	and.w	r3, r3, #16
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8009814:	2101      	movs	r1, #1
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f858 	bl	80098cc <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009826:	2b20      	cmp	r3, #32
 8009828:	d14b      	bne.n	80098c2 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983e:	f003 030c 	and.w	r3, r3, #12
 8009842:	2b08      	cmp	r3, #8
 8009844:	d107      	bne.n	8009856 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009854:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009864:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00a      	beq.n	8009884 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69d9      	ldr	r1, [r3, #28]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009876:	461a      	mov	r2, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f7 fe5b 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009888:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d103      	bne.n	80098b8 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7fe ff98 	bl	80087e6 <HAL_JPEG_DecodeCpltCallback>
 80098b6:	e002      	b.n	80098be <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7f7 fe57 	bl	800156c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 80098be:	2301      	movs	r3, #1
 80098c0:	e000      	b.n	80098c4 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	440b      	add	r3, r1
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d34b      	bcc.n	8009980 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	e031      	b.n	8009952 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f4:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69da      	ldr	r2, [r3, #28]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fe:	4413      	add	r3, r2
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	0a19      	lsrs	r1, r3, #8
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69da      	ldr	r2, [r3, #28]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009912:	3301      	adds	r3, #1
 8009914:	4413      	add	r3, r2
 8009916:	b2ca      	uxtb	r2, r1
 8009918:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	0c19      	lsrs	r1, r3, #16
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	69da      	ldr	r2, [r3, #28]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009926:	3302      	adds	r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	b2ca      	uxtb	r2, r1
 800992c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	0e19      	lsrs	r1, r3, #24
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69da      	ldr	r2, [r3, #28]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993a:	3303      	adds	r3, #3
 800993c:	4413      	add	r3, r2
 800993e:	b2ca      	uxtb	r2, r1
 8009940:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	3301      	adds	r3, #1
 8009950:	617b      	str	r3, [r7, #20]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	429a      	cmp	r2, r3
 8009958:	d3c9      	bcc.n	80098ee <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009962:	429a      	cmp	r2, r3
 8009964:	f040 80b5 	bne.w	8009ad2 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	69d9      	ldr	r1, [r3, #28]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	461a      	mov	r2, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7f7 fdde 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800997e:	e0a8      	b.n	8009ad2 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009988:	429a      	cmp	r2, r3
 800998a:	f240 80a2 	bls.w	8009ad2 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	089b      	lsrs	r3, r3, #2
 800999a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e031      	b.n	8009a06 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099a8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	69da      	ldr	r2, [r3, #28]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b2:	4413      	add	r3, r2
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	0a19      	lsrs	r1, r3, #8
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	69da      	ldr	r2, [r3, #28]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c6:	3301      	adds	r3, #1
 80099c8:	4413      	add	r3, r2
 80099ca:	b2ca      	uxtb	r2, r1
 80099cc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	0c19      	lsrs	r1, r3, #16
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69da      	ldr	r2, [r3, #28]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099da:	3302      	adds	r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	b2ca      	uxtb	r2, r1
 80099e0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	0e19      	lsrs	r1, r3, #24
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69da      	ldr	r2, [r3, #28]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	3303      	adds	r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	b2ca      	uxtb	r2, r1
 80099f4:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fa:	1d1a      	adds	r2, r3, #4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	3301      	adds	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d3c9      	bcc.n	80099a2 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d10b      	bne.n	8009a32 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	69d9      	ldr	r1, [r3, #28]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a22:	461a      	mov	r2, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7f7 fd85 	bl	8001534 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009a30:	e04f      	b.n	8009ad2 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a44:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]
 8009a4a:	e015      	b.n	8009a78 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	fa22 f103 	lsr.w	r1, r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a62:	4413      	add	r3, r2
 8009a64:	b2ca      	uxtb	r2, r1
 8009a66:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	3301      	adds	r3, #1
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d3e5      	bcc.n	8009a4c <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69d9      	ldr	r1, [r3, #28]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7f7 fd52 	bl	8001534 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f1c3 0304 	rsb	r3, r3, #4
 8009a9c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	e013      	b.n	8009acc <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	00db      	lsls	r3, r3, #3
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	fa22 f103 	lsr.w	r1, r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	69da      	ldr	r2, [r3, #28]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab6:	4413      	add	r3, r2
 8009ab8:	b2ca      	uxtb	r2, r1
 8009aba:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d9e8      	bls.n	8009aa4 <JPEG_StoreOutputData+0x1d8>
}
 8009ad2:	bf00      	nop
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b088      	sub	sp, #32
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <JPEG_ReadInputData+0x1c>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009af6:	2101      	movs	r1, #1
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fe fded 	bl	80086d8 <HAL_JPEG_Pause>
 8009afe:	e028      	b.n	8009b52 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d906      	bls.n	8009b1a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	e01b      	b.n	8009b52 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d115      	bne.n	8009b52 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7f7 fce1 	bl	80014f4 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b36:	2b04      	cmp	r3, #4
 8009b38:	d905      	bls.n	8009b46 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3e:	f023 0203 	bic.w	r2, r3, #3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b50:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f040 809f 	bne.w	8009c9e <JPEG_ReadInputData+0x1c4>
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 809b 	beq.w	8009c9e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	089b      	lsrs	r3, r3, #2
 8009b6c:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d335      	bcc.n	8009be2 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8009b76:	2300      	movs	r3, #0
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	e02d      	b.n	8009bd8 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4413      	add	r3, r2
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	699a      	ldr	r2, [r3, #24]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3301      	adds	r3, #1
 8009b96:	4413      	add	r3, r2
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009b9c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6999      	ldr	r1, [r3, #24]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009bae:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699a      	ldr	r2, [r3, #24]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3303      	adds	r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009bc4:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009bc6:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d3cd      	bcc.n	8009b7c <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8009be0:	e05d      	b.n	8009c9e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d035      	beq.n	8009c54 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8009be8:	2300      	movs	r3, #0
 8009bea:	61bb      	str	r3, [r7, #24]
 8009bec:	e02d      	b.n	8009c4a <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	4413      	add	r3, r2
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c0e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6999      	ldr	r1, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3302      	adds	r3, #2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c20:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3303      	adds	r3, #3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c36:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c38:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	3301      	adds	r3, #1
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d3cd      	bcc.n	8009bee <JPEG_ReadInputData+0x114>
}
 8009c52:	e024      	b.n	8009c9e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61bb      	str	r3, [r7, #24]
 8009c5c:	e017      	b.n	8009c8e <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	4413      	add	r3, r2
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	61bb      	str	r3, [r7, #24]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d3e3      	bcc.n	8009c5e <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	697a      	ldr	r2, [r7, #20]
 8009c9c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009c9e:	bf00      	nop
 8009ca0:	3720      	adds	r7, #32
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb6:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d804      	bhi.n	8009cd4 <JPEG_DMA_StartProcess+0x2c>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d901      	bls.n	8009cd8 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e074      	b.n	8009dc2 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8009dcc <JPEG_DMA_StartProcess+0x124>)
 8009cde:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce4:	4a3a      	ldr	r2, [pc, #232]	@ (8009dd0 <JPEG_DMA_StartProcess+0x128>)
 8009ce6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cec:	4a39      	ldr	r2, [pc, #228]	@ (8009dd4 <JPEG_DMA_StartProcess+0x12c>)
 8009cee:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf4:	4a36      	ldr	r2, [pc, #216]	@ (8009dd0 <JPEG_DMA_StartProcess+0x128>)
 8009cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cfc:	4a36      	ldr	r2, [pc, #216]	@ (8009dd8 <JPEG_DMA_StartProcess+0x130>)
 8009cfe:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <JPEG_DMA_StartProcess+0x64>
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d107      	bne.n	8009d1c <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d10:	f043 0204 	orr.w	r2, r3, #4
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e052      	b.n	8009dc2 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	68f9      	ldr	r1, [r7, #12]
 8009d26:	fbb3 f1f1 	udiv	r1, r3, r1
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	fb00 f101 	mul.w	r1, r0, r1
 8009d30:	1a5b      	subs	r3, r3, r1
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	fbb3 f1f1 	udiv	r1, r3, r1
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	fb00 f101 	mul.w	r1, r0, r1
 8009d4c:	1a5b      	subs	r3, r3, r1
 8009d4e:	1ad2      	subs	r2, r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3344      	adds	r3, #68	@ 0x44
 8009d5e:	4619      	mov	r1, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	461c      	mov	r4, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	9200      	str	r2, [sp, #0]
 8009d6e:	4622      	mov	r2, r4
 8009d70:	f000 fbe2 	bl	800a538 <HAL_MDMA_Start_IT>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d7e:	f043 0204 	orr.w	r2, r3, #4
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e01b      	b.n	8009dc2 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	4619      	mov	r1, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3340      	adds	r3, #64	@ 0x40
 8009d9a:	461c      	mov	r4, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da0:	2201      	movs	r2, #1
 8009da2:	9200      	str	r2, [sp, #0]
 8009da4:	4622      	mov	r2, r4
 8009da6:	f000 fbc7 	bl	800a538 <HAL_MDMA_Start_IT>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d007      	beq.n	8009dc0 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db4:	f043 0204 	orr.w	r2, r3, #4
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd90      	pop	{r4, r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	0800a0db 	.word	0x0800a0db
 8009dd0:	0800a2c9 	.word	0x0800a2c9
 8009dd4:	0800a207 	.word	0x0800a207
 8009dd8:	0800a319 	.word	0x0800a319

08009ddc <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d125      	bne.n	8009e3c <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d01e      	beq.n	8009e3c <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7fe fb62 	bl	80084ce <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3304      	adds	r3, #4
 8009e14:	4619      	mov	r1, r3
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7fe fcda 	bl	80087d0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d039      	beq.n	8009ebe <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e4e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009e74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009e84:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d104      	bne.n	8009e9e <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fbce 	bl	800a63a <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d105      	bne.n	8009eb8 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 fbc2 	bl	800a63a <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8009eb6:	e002      	b.n	8009ebe <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f804 	bl	8009ec6 <JPEG_DMA_EndProcess>
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009ede:	1ad2      	subs	r2, r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d10a      	bne.n	8009f06 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	69d9      	ldr	r1, [r3, #28]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f7 fb1a 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0c:	f003 0310 	and.w	r3, r3, #16
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d134      	bne.n	8009f7e <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	69d9      	ldr	r1, [r3, #28]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f24:	461a      	mov	r2, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7f7 fb04 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f46:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f4c:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d103      	bne.n	8009f76 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7fe fc39 	bl	80087e6 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8009f74:	e00c      	b.n	8009f90 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7f7 faf8 	bl	800156c <HAL_JPEG_EncodeCpltCallback>
}
 8009f7c:	e008      	b.n	8009f90 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f804 	bl	8009f98 <JPEG_DMA_PollResidualData>
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	e04f      	b.n	800a046 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d146      	bne.n	800a040 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d03f      	beq.n	800a040 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc6:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd0:	4413      	add	r3, r2
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	0a19      	lsrs	r1, r3, #8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69da      	ldr	r2, [r3, #28]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	4413      	add	r3, r2
 8009fe8:	b2ca      	uxtb	r2, r1
 8009fea:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	0c19      	lsrs	r1, r3, #16
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	69da      	ldr	r2, [r3, #28]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	b2ca      	uxtb	r2, r1
 8009ffe:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	0e19      	lsrs	r1, r3, #24
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69da      	ldr	r2, [r3, #28]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a00c:	3303      	adds	r3, #3
 800a00e:	4413      	add	r3, r2
 800a010:	b2ca      	uxtb	r2, r1
 800a012:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a026:	429a      	cmp	r2, r3
 800a028:	d10a      	bne.n	800a040 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	69d9      	ldr	r1, [r3, #28]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a032:	461a      	mov	r2, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7f7 fa7d 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3b01      	subs	r3, #1
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1ac      	bne.n	8009fa6 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a050:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <JPEG_DMA_PollResidualData+0xd2>
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a066:	2b00      	cmp	r3, #0
 800a068:	d133      	bne.n	800a0d2 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0201 	bic.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00a      	beq.n	800a098 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69d9      	ldr	r1, [r3, #28]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08a:	461a      	mov	r2, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7f7 fa51 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a09c:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d103      	bne.n	800a0cc <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7fe fb8e 	bl	80087e6 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a0ca:	e002      	b.n	800a0d2 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7f7 fa4d 	bl	800156c <HAL_JPEG_EncodeCpltCallback>
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a0da:	b590      	push	{r4, r7, lr}
 800a0dc:	b087      	sub	sp, #28
 800a0de:	af02      	add	r7, sp, #8
 800a0e0:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a0f6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0fc:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a100:	4013      	ands	r3, r2
 800a102:	2b0c      	cmp	r3, #12
 800a104:	d17c      	bne.n	800a200 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10c:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a11c:	1ad2      	subs	r2, r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	4619      	mov	r1, r3
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7f7 f9e3 	bl	80014f4 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	429a      	cmp	r2, r3
 800a136:	d81f      	bhi.n	800a178 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10d      	bne.n	800a15a <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a142:	f043 0204 	orr.w	r2, r3, #4
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2206      	movs	r2, #6
 800a14e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7fe fb51 	bl	80087fa <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a158:	e052      	b.n	800a200 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	fbb3 f1f1 	udiv	r1, r3, r1
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	fb00 f101 	mul.w	r1, r0, r1
 800a16e:	1a5b      	subs	r3, r3, r1
 800a170:	1ad2      	subs	r2, r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	629a      	str	r2, [r3, #40]	@ 0x28
 800a176:	e010      	b.n	800a19a <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00c      	beq.n	800a19a <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a184:	f003 0303 	and.w	r3, r3, #3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d006      	beq.n	800a19a <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a190:	089b      	lsrs	r3, r3, #2
 800a192:	3301      	adds	r3, #1
 800a194:	009a      	lsls	r2, r3, #2
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a19e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d124      	bne.n	800a1f0 <JPEG_MDMAInCpltCallback+0x116>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d020      	beq.n	800a1f0 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3340      	adds	r3, #64	@ 0x40
 800a1be:	461c      	mov	r4, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	9200      	str	r2, [sp, #0]
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	f000 f9b5 	bl	800a538 <HAL_MDMA_Start_IT>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00d      	beq.n	800a1f0 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	f043 0204 	orr.w	r2, r3, #4
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2206      	movs	r2, #6
 800a1e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7fe fb06 	bl	80087fa <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800a1ee:	e007      	b.n	800a200 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a1fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	bd90      	pop	{r4, r7, pc}

0800a206 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a206:	b590      	push	{r4, r7, lr}
 800a208:	b087      	sub	sp, #28
 800a20a:	af02      	add	r7, sp, #8
 800a20c:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a212:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a222:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a228:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b0c      	cmp	r3, #12
 800a230:	d147      	bne.n	800a2c2 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a238:	f003 0320 	and.w	r3, r3, #32
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d138      	bne.n	800a2b2 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	69d9      	ldr	r1, [r3, #28]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a25c:	461a      	mov	r2, r3
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7f7 f968 	bl	8001534 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d120      	bne.n	800a2b2 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3344      	adds	r3, #68	@ 0x44
 800a27a:	4619      	mov	r1, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	69db      	ldr	r3, [r3, #28]
 800a280:	461c      	mov	r4, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a286:	2201      	movs	r2, #1
 800a288:	9200      	str	r2, [sp, #0]
 800a28a:	4622      	mov	r2, r4
 800a28c:	f000 f954 	bl	800a538 <HAL_MDMA_Start_IT>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00d      	beq.n	800a2b2 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29a:	f043 0204 	orr.w	r2, r3, #4
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2206      	movs	r2, #6
 800a2a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7fe faa5 	bl	80087fa <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800a2b0:	e007      	b.n	800a2c2 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a2c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd90      	pop	{r4, r7, pc}

0800a2c8 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d4:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 0201 	bic.w	r2, r2, #1
 800a2e4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a2f4:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a302:	f043 0204 	orr.w	r2, r3, #4
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7fe fa75 	bl	80087fa <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800a310:	bf00      	nop
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a324:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f7ff fdc7 	bl	8009ec6 <JPEG_DMA_EndProcess>
  }
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a340:	b480      	push	{r7}
 800a342:	b08b      	sub	sp, #44	@ 0x2c
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3350      	adds	r3, #80	@ 0x50
 800a352:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a358:	e042      	b.n	800a3e0 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a360:	2300      	movs	r3, #0
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	e033      	b.n	800a3ce <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
 800a370:	b2db      	uxtb	r3, r3
 800a372:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d103      	bne.n	800a382 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	3364      	adds	r3, #100	@ 0x64
 800a37e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a380:	e022      	b.n	800a3c8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2264      	movs	r2, #100	@ 0x64
 800a386:	fb02 f303 	mul.w	r3, r2, r3
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a38e:	6a38      	ldr	r0, [r7, #32]
 800a390:	69f9      	ldr	r1, [r7, #28]
 800a392:	4401      	add	r1, r0
 800a394:	4818      	ldr	r0, [pc, #96]	@ (800a3f8 <JPEG_GetQuality+0xb8>)
 800a396:	5c41      	ldrb	r1, [r0, r1]
 800a398:	440a      	add	r2, r1
 800a39a:	7812      	ldrb	r2, [r2, #0]
 800a39c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b64      	cmp	r3, #100	@ 0x64
 800a3a6:	d807      	bhi.n	800a3b8 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b2:	4413      	add	r3, r2
 800a3b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3b6:	e007      	b.n	800a3c8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800a3b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c4:	4413      	add	r3, r2
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d9c8      	bls.n	800a366 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	2b3c      	cmp	r3, #60	@ 0x3c
 800a3e4:	d9b9      	bls.n	800a35a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	099b      	lsrs	r3, r3, #6
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	372c      	adds	r7, #44	@ 0x2c
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	080161b0 	.word	0x080161b0

0800a3fc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a404:	f7f7 fff4 	bl	80023f0 <HAL_GetTick>
 800a408:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e03b      	b.n	800a48c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 0201 	bic.w	r2, r2, #1
 800a432:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a434:	e00f      	b.n	800a456 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a436:	f7f7 ffdb 	bl	80023f0 <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b05      	cmp	r3, #5
 800a442:	d908      	bls.n	800a456 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2240      	movs	r2, #64	@ 0x40
 800a448:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2203      	movs	r2, #3
 800a44e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e01a      	b.n	800a48c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1e8      	bne.n	800a436 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fad3 	bl	800aa10 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e03e      	b.n	800a52c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_MDMA_ConfigPostRequestMask+0x28>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e037      	b.n	800a52c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d126      	bne.n	800a51e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d11c      	bne.n	800a518 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d108      	bne.n	800a506 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691a      	ldr	r2, [r3, #16]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a502:	611a      	str	r2, [r3, #16]
 800a504:	e00d      	b.n	800a522 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a514:	611a      	str	r2, [r3, #16]
 800a516:	e004      	b.n	800a522 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]
 800a51c:	e001      	b.n	800a522 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e070      	b.n	800a632 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_MDMA_Start_IT+0x26>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e069      	b.n	800a632 <HAL_MDMA_Start_IT+0xfa>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d158      	bne.n	800a624 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2202      	movs	r2, #2
 800a576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f022 0201 	bic.w	r2, r2, #1
 800a58e:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	68b9      	ldr	r1, [r7, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f9c8 	bl	800a930 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f042 0206 	orr.w	r2, r2, #6
 800a5ae:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0210 	orr.w	r2, r2, #16
 800a5c6:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d007      	beq.n	800a5e0 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0208 	orr.w	r2, r2, #8
 800a5de:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d007      	beq.n	800a5f8 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0220 	orr.w	r2, r2, #32
 800a5f6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a610:	d10e      	bne.n	800a630 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e005      	b.n	800a630 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800a62c:	2302      	movs	r3, #2
 800a62e:	e000      	b.n	800a632 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e017      	b.n	800a67c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d004      	beq.n	800a662 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2280      	movs	r2, #128	@ 0x80
 800a65c:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e00c      	b.n	800a67c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2204      	movs	r2, #4
 800a666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0201 	bic.w	r2, r2, #1
 800a678:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a694:	4b91      	ldr	r3, [pc, #580]	@ (800a8dc <HAL_MDMA_IRQHandler+0x254>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a91      	ldr	r2, [pc, #580]	@ (800a8e0 <HAL_MDMA_IRQHandler+0x258>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	0a9b      	lsrs	r3, r3, #10
 800a6a0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4b8e      	ldr	r3, [pc, #568]	@ (800a8e4 <HAL_MDMA_IRQHandler+0x25c>)
 800a6aa:	4413      	add	r3, r2
 800a6ac:	099b      	lsrs	r3, r3, #6
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a6ba:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f000 812d 	beq.w	800a924 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d054      	beq.n	800a782 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f003 0302 	and.w	r3, r3, #2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d04d      	beq.n	800a782 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68da      	ldr	r2, [r3, #12]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0202 	bic.w	r2, r2, #2
 800a6f4:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a70c:	f043 0201 	orr.w	r2, r3, #1
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	669a      	str	r2, [r3, #104]	@ 0x68
 800a714:	e005      	b.n	800a722 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a71a:	f043 0202 	orr.w	r2, r3, #2
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d005      	beq.n	800a738 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a730:	f043 0204 	orr.w	r2, r3, #4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a746:	f043 0208 	orr.w	r2, r3, #8
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a75c:	f043 0210 	orr.w	r2, r3, #16
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d005      	beq.n	800a77a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a772:	f043 0220 	orr.w	r2, r3, #32
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2201      	movs	r2, #1
 800a780:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0310 	and.w	r3, r3, #16
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d012      	beq.n	800a7b6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2210      	movs	r2, #16
 800a7a4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0308 	and.w	r3, r3, #8
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d012      	beq.n	800a7ea <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f003 0310 	and.w	r3, r3, #16
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00b      	beq.n	800a7ea <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2208      	movs	r2, #8
 800a7d8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d012      	beq.n	800a81e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00b      	beq.n	800a81e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2204      	movs	r2, #4
 800a80c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a812:	2b00      	cmp	r3, #0
 800a814:	d003      	beq.n	800a81e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d039      	beq.n	800a8a0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	2b00      	cmp	r3, #0
 800a838:	d032      	beq.n	800a8a0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68da      	ldr	r2, [r3, #12]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a848:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b04      	cmp	r3, #4
 800a854:	d110      	bne.n	800a878 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d05c      	beq.n	800a928 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	4798      	blx	r3
        }
        return;
 800a876:	e057      	b.n	800a928 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2202      	movs	r2, #2
 800a87e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d040      	beq.n	800a92a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2204      	movs	r2, #4
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 0201 	bic.w	r2, r2, #1
 800a8be:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	60bb      	str	r3, [r7, #8]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d30d      	bcc.n	800a8e8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1f2      	bne.n	800a8c0 <HAL_MDMA_IRQHandler+0x238>
 800a8da:	e006      	b.n	800a8ea <HAL_MDMA_IRQHandler+0x262>
 800a8dc:	24000004 	.word	0x24000004
 800a8e0:	1b4e81b5 	.word	0x1b4e81b5
 800a8e4:	adffffc0 	.word	0xadffffc0
        break;
 800a8e8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d004      	beq.n	800a90a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2203      	movs	r2, #3
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a908:	e003      	b.n	800a912 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a916:	2b00      	cmp	r3, #0
 800a918:	d007      	beq.n	800a92a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	4798      	blx	r3
 800a922:	e002      	b.n	800a92a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800a924:	bf00      	nop
 800a926:	e000      	b.n	800a92a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800a928:	bf00      	nop
    }
  }
}
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	695a      	ldr	r2, [r3, #20]
 800a944:	4b31      	ldr	r3, [pc, #196]	@ (800aa0c <MDMA_SetConfig+0xdc>)
 800a946:	4013      	ands	r3, r2
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	430b      	orrs	r3, r1
 800a954:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	3b01      	subs	r3, #1
 800a964:	051a      	lsls	r2, r3, #20
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	221f      	movs	r2, #31
 800a974:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a98c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a994:	d002      	beq.n	800a99c <MDMA_SetConfig+0x6c>
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a9aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9ac:	e007      	b.n	800a9be <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a9bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a9c4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9cc:	d002      	beq.n	800a9d4 <MDMA_SetConfig+0xa4>
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d108      	bne.n	800a9e6 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a9e2:	629a      	str	r2, [r3, #40]	@ 0x28
 800a9e4:	e007      	b.n	800a9f6 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a9f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aa00:	bf00      	nop
 800aa02:	371c      	adds	r7, #28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	fffe0000 	.word	0xfffe0000

0800aa10 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68d9      	ldr	r1, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	691a      	ldr	r2, [r3, #16]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	430a      	orrs	r2, r1
 800aa26:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	695a      	ldr	r2, [r3, #20]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aa36:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800aa42:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa48:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800aa4e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa54:	3b01      	subs	r3, #1
 800aa56:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800aa58:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800aa64:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800aa66:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa70:	d107      	bne.n	800aa82 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	691a      	ldr	r2, [r3, #16]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800aa80:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2200      	movs	r2, #0
 800aa88:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	da11      	bge.n	800aab6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	695a      	ldr	r2, [r3, #20]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800aaa0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa6:	425b      	negs	r3, r3
 800aaa8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	b292      	uxth	r2, r2
 800aab2:	621a      	str	r2, [r3, #32]
 800aab4:	e006      	b.n	800aac4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaba:	461a      	mov	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	b292      	uxth	r2, r2
 800aac2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da15      	bge.n	800aaf8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	695a      	ldr	r2, [r3, #20]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800aada:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae0:	425b      	negs	r3, r3
 800aae2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6a19      	ldr	r1, [r3, #32]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	041a      	lsls	r2, r3, #16
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	621a      	str	r2, [r3, #32]
 800aaf6:	e009      	b.n	800ab0c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6a19      	ldr	r1, [r3, #32]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab02:	041a      	lsls	r2, r3, #16
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	430a      	orrs	r2, r1
 800ab0a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab14:	d006      	beq.n	800ab24 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab22:	e003      	b.n	800ab2c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2200      	movs	r2, #0
 800ab32:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af02      	add	r7, sp, #8
 800ab46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e0fe      	b.n	800ad50 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f00a f994 	bl	8014e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2203      	movs	r2, #3
 800ab70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f006 fcee 	bl	801155a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	7c1a      	ldrb	r2, [r3, #16]
 800ab86:	f88d 2000 	strb.w	r2, [sp]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab8e:	f006 fbbf 	bl	8011310 <USB_CoreInit>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d005      	beq.n	800aba4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e0d5      	b.n	800ad50 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f006 fce6 	bl	801157c <USB_SetCurrentMode>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e0c6      	b.n	800ad50 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
 800abc6:	e04a      	b.n	800ac5e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abc8:	7bfa      	ldrb	r2, [r7, #15]
 800abca:	6879      	ldr	r1, [r7, #4]
 800abcc:	4613      	mov	r3, r2
 800abce:	00db      	lsls	r3, r3, #3
 800abd0:	4413      	add	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	3315      	adds	r3, #21
 800abd8:	2201      	movs	r2, #1
 800abda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800abdc:	7bfa      	ldrb	r2, [r7, #15]
 800abde:	6879      	ldr	r1, [r7, #4]
 800abe0:	4613      	mov	r3, r2
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	4413      	add	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	440b      	add	r3, r1
 800abea:	3314      	adds	r3, #20
 800abec:	7bfa      	ldrb	r2, [r7, #15]
 800abee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800abf0:	7bfa      	ldrb	r2, [r7, #15]
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	b298      	uxth	r0, r3
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4613      	mov	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	332e      	adds	r3, #46	@ 0x2e
 800ac04:	4602      	mov	r2, r0
 800ac06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac08:	7bfa      	ldrb	r2, [r7, #15]
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	3318      	adds	r3, #24
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac1c:	7bfa      	ldrb	r2, [r7, #15]
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4613      	mov	r3, r2
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	4413      	add	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	440b      	add	r3, r1
 800ac2a:	331c      	adds	r3, #28
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac30:	7bfa      	ldrb	r2, [r7, #15]
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4613      	mov	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	3320      	adds	r3, #32
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac44:	7bfa      	ldrb	r2, [r7, #15]
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	3324      	adds	r3, #36	@ 0x24
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	73fb      	strb	r3, [r7, #15]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	7bfa      	ldrb	r2, [r7, #15]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d3af      	bcc.n	800abc8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
 800ac6c:	e044      	b.n	800acf8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac6e:	7bfa      	ldrb	r2, [r7, #15]
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ac80:	2200      	movs	r2, #0
 800ac82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ac84:	7bfa      	ldrb	r2, [r7, #15]
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800ac96:	7bfa      	ldrb	r2, [r7, #15]
 800ac98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ac9a:	7bfa      	ldrb	r2, [r7, #15]
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800acac:	2200      	movs	r2, #0
 800acae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acb0:	7bfa      	ldrb	r2, [r7, #15]
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	440b      	add	r3, r1
 800acbe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acc6:	7bfa      	ldrb	r2, [r7, #15]
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800acdc:	7bfa      	ldrb	r2, [r7, #15]
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	3301      	adds	r3, #1
 800acf6:	73fb      	strb	r3, [r7, #15]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	791b      	ldrb	r3, [r3, #4]
 800acfc:	7bfa      	ldrb	r2, [r7, #15]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d3b5      	bcc.n	800ac6e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	7c1a      	ldrb	r2, [r3, #16]
 800ad0a:	f88d 2000 	strb.w	r2, [sp]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad12:	f006 fc7f 	bl	8011614 <USB_DevInit>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d005      	beq.n	800ad28 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e013      	b.n	800ad50 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7b1b      	ldrb	r3, [r3, #12]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d102      	bne.n	800ad44 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f96e 	bl	800c020 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f007 fcc2 	bl	80126d2 <USB_DevDisconnect>

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_PCD_Start+0x1c>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e022      	b.n	800adba <HAL_PCD_Start+0x62>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d105      	bne.n	800ad9c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f006 fbc9 	bl	8011538 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4618      	mov	r0, r3
 800adac:	f007 fc70 	bl	8012690 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800adc2:	b590      	push	{r4, r7, lr}
 800adc4:	b08d      	sub	sp, #52	@ 0x34
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4618      	mov	r0, r3
 800adda:	f007 fd2e 	bl	801283a <USB_GetMode>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f040 84b9 	bne.w	800b758 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f007 fc92 	bl	8012714 <USB_ReadInterrupts>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 84af 	beq.w	800b756 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	0a1b      	lsrs	r3, r3, #8
 800ae02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f007 fc7f 	bl	8012714 <USB_ReadInterrupts>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f003 0302 	and.w	r3, r3, #2
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d107      	bne.n	800ae30 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	695a      	ldr	r2, [r3, #20]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f002 0202 	and.w	r2, r2, #2
 800ae2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f007 fc6d 	bl	8012714 <USB_ReadInterrupts>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f003 0310 	and.w	r3, r3, #16
 800ae40:	2b10      	cmp	r3, #16
 800ae42:	d161      	bne.n	800af08 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0210 	bic.w	r2, r2, #16
 800ae52:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	f003 020f 	and.w	r2, r3, #15
 800ae60:	4613      	mov	r3, r2
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	4413      	add	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	4413      	add	r3, r2
 800ae70:	3304      	adds	r3, #4
 800ae72:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800ae7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae7e:	d124      	bne.n	800aeca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800ae86:	4013      	ands	r3, r2
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d035      	beq.n	800aef8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	091b      	lsrs	r3, r3, #4
 800ae94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ae96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6a38      	ldr	r0, [r7, #32]
 800aea0:	f007 faa4 	bl	80123ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	091b      	lsrs	r3, r3, #4
 800aeac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aeb0:	441a      	add	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	695a      	ldr	r2, [r3, #20]
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	091b      	lsrs	r3, r3, #4
 800aebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aec2:	441a      	add	r2, r3
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	615a      	str	r2, [r3, #20]
 800aec8:	e016      	b.n	800aef8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800aed0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aed4:	d110      	bne.n	800aef8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aedc:	2208      	movs	r2, #8
 800aede:	4619      	mov	r1, r3
 800aee0:	6a38      	ldr	r0, [r7, #32]
 800aee2:	f007 fa83 	bl	80123ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	695a      	ldr	r2, [r3, #20]
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	091b      	lsrs	r3, r3, #4
 800aeee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aef2:	441a      	add	r2, r3
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699a      	ldr	r2, [r3, #24]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0210 	orr.w	r2, r2, #16
 800af06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f007 fc01 	bl	8012714 <USB_ReadInterrupts>
 800af12:	4603      	mov	r3, r0
 800af14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af1c:	f040 80a7 	bne.w	800b06e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4618      	mov	r0, r3
 800af2a:	f007 fc06 	bl	801273a <USB_ReadDevAllOutEpInterrupt>
 800af2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800af30:	e099      	b.n	800b066 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800af32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 808e 	beq.w	800b05a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	4611      	mov	r1, r2
 800af48:	4618      	mov	r0, r3
 800af4a:	f007 fc2a 	bl	80127a2 <USB_ReadDevOutEPInterrupt>
 800af4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00c      	beq.n	800af74 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af66:	461a      	mov	r2, r3
 800af68:	2301      	movs	r3, #1
 800af6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800af6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fed0 	bl	800bd14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f003 0308 	and.w	r3, r3, #8
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00c      	beq.n	800af98 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8a:	461a      	mov	r2, r3
 800af8c:	2308      	movs	r3, #8
 800af8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800af90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 ffa6 	bl	800bee4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f003 0310 	and.w	r3, r3, #16
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d008      	beq.n	800afb4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afae:	461a      	mov	r2, r3
 800afb0:	2310      	movs	r3, #16
 800afb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d030      	beq.n	800b020 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afc6:	2b80      	cmp	r3, #128	@ 0x80
 800afc8:	d109      	bne.n	800afde <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	69fa      	ldr	r2, [r7, #28]
 800afd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800afdc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800afde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe0:	4613      	mov	r3, r2
 800afe2:	00db      	lsls	r3, r3, #3
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	4413      	add	r3, r2
 800aff0:	3304      	adds	r3, #4
 800aff2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	78db      	ldrb	r3, [r3, #3]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d108      	bne.n	800b00e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2200      	movs	r2, #0
 800b000:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b004:	b2db      	uxtb	r3, r3
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f00a f869 	bl	80150e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b01a:	461a      	mov	r2, r3
 800b01c:	2302      	movs	r3, #2
 800b01e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	d008      	beq.n	800b03c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b036:	461a      	mov	r2, r3
 800b038:	2320      	movs	r3, #32
 800b03a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	015a      	lsls	r2, r3, #5
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	4413      	add	r3, r2
 800b04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b052:	461a      	mov	r2, r3
 800b054:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b058:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	3301      	adds	r3, #1
 800b05e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b062:	085b      	lsrs	r3, r3, #1
 800b064:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f47f af62 	bne.w	800af32 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f007 fb4e 	bl	8012714 <USB_ReadInterrupts>
 800b078:	4603      	mov	r3, r0
 800b07a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b07e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b082:	f040 80db 	bne.w	800b23c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f007 fb6f 	bl	801276e <USB_ReadDevAllInEpInterrupt>
 800b090:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b096:	e0cd      	b.n	800b234 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80c2 	beq.w	800b228 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0aa:	b2d2      	uxtb	r2, r2
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f007 fb95 	bl	80127de <USB_ReadDevInEPInterrupt>
 800b0b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d057      	beq.n	800b170 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	43db      	mvns	r3, r3
 800b0da:	69f9      	ldr	r1, [r7, #28]
 800b0dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	799b      	ldrb	r3, [r3, #6]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d132      	bne.n	800b164 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b102:	4613      	mov	r3, r2
 800b104:	00db      	lsls	r3, r3, #3
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	3320      	adds	r3, #32
 800b10e:	6819      	ldr	r1, [r3, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b114:	4613      	mov	r3, r2
 800b116:	00db      	lsls	r3, r3, #3
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4403      	add	r3, r0
 800b11e:	331c      	adds	r3, #28
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4419      	add	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b128:	4613      	mov	r3, r2
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	4413      	add	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4403      	add	r3, r0
 800b132:	3320      	adds	r3, #32
 800b134:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d113      	bne.n	800b164 <HAL_PCD_IRQHandler+0x3a2>
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b140:	4613      	mov	r3, r2
 800b142:	00db      	lsls	r3, r3, #3
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	3324      	adds	r3, #36	@ 0x24
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d108      	bne.n	800b164 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b15c:	461a      	mov	r2, r3
 800b15e:	2101      	movs	r1, #1
 800b160:	f007 fb9e 	bl	80128a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b166:	b2db      	uxtb	r3, r3
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f009 ff33 	bl	8014fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d008      	beq.n	800b18c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b186:	461a      	mov	r2, r3
 800b188:	2308      	movs	r3, #8
 800b18a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b00      	cmp	r3, #0
 800b194:	d008      	beq.n	800b1a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d008      	beq.n	800b1c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1be:	461a      	mov	r2, r3
 800b1c0:	2340      	movs	r3, #64	@ 0x40
 800b1c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f003 0302 	and.w	r3, r3, #2
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d023      	beq.n	800b216 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b1ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1d0:	6a38      	ldr	r0, [r7, #32]
 800b1d2:	f006 fb7d 	bl	80118d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b1d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1d8:	4613      	mov	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	3310      	adds	r3, #16
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	78db      	ldrb	r3, [r3, #3]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d108      	bne.n	800b204 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f009 ff80 	bl	8015104 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b210:	461a      	mov	r2, r3
 800b212:	2302      	movs	r3, #2
 800b214:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d003      	beq.n	800b228 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b220:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fcea 	bl	800bbfc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	3301      	adds	r3, #1
 800b22c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	085b      	lsrs	r3, r3, #1
 800b232:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b236:	2b00      	cmp	r3, #0
 800b238:	f47f af2e 	bne.w	800b098 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4618      	mov	r0, r3
 800b242:	f007 fa67 	bl	8012714 <USB_ReadInterrupts>
 800b246:	4603      	mov	r3, r0
 800b248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b24c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b250:	d122      	bne.n	800b298 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	69fa      	ldr	r2, [r7, #28]
 800b25c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d108      	bne.n	800b282 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b278:	2100      	movs	r1, #0
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 fef4 	bl	800c068 <HAL_PCDEx_LPM_Callback>
 800b280:	e002      	b.n	800b288 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f009 ff1e 	bl	80150c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	695a      	ldr	r2, [r3, #20]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b296:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f007 fa39 	bl	8012714 <USB_ReadInterrupts>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2ac:	d112      	bne.n	800b2d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d102      	bne.n	800b2c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f009 feda 	bl	8015078 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	695a      	ldr	r2, [r3, #20]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b2d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f007 fa1b 	bl	8012714 <USB_ReadInterrupts>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2e8:	d121      	bne.n	800b32e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	695a      	ldr	r2, [r3, #20]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b2f8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b300:	2b00      	cmp	r3, #0
 800b302:	d111      	bne.n	800b328 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b312:	089b      	lsrs	r3, r3, #2
 800b314:	f003 020f 	and.w	r2, r3, #15
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b31e:	2101      	movs	r1, #1
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fea1 	bl	800c068 <HAL_PCDEx_LPM_Callback>
 800b326:	e002      	b.n	800b32e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f009 fea5 	bl	8015078 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f007 f9ee 	bl	8012714 <USB_ReadInterrupts>
 800b338:	4603      	mov	r3, r0
 800b33a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b33e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b342:	f040 80b7 	bne.w	800b4b4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	69fa      	ldr	r2, [r7, #28]
 800b350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b354:	f023 0301 	bic.w	r3, r3, #1
 800b358:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2110      	movs	r1, #16
 800b360:	4618      	mov	r0, r3
 800b362:	f006 fab5 	bl	80118d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b366:	2300      	movs	r3, #0
 800b368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b36a:	e046      	b.n	800b3fa <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	4413      	add	r3, r2
 800b374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b378:	461a      	mov	r2, r3
 800b37a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b37e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b390:	0151      	lsls	r1, r2, #5
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	440a      	add	r2, r1
 800b396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b39a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b39e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b3b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b6:	015a      	lsls	r2, r3, #5
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3c4:	0151      	lsls	r1, r2, #5
 800b3c6:	69fa      	ldr	r2, [r7, #28]
 800b3c8:	440a      	add	r2, r1
 800b3ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3e4:	0151      	lsls	r1, r2, #5
 800b3e6:	69fa      	ldr	r2, [r7, #28]
 800b3e8:	440a      	add	r2, r1
 800b3ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	791b      	ldrb	r3, [r3, #4]
 800b3fe:	461a      	mov	r2, r3
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	4293      	cmp	r3, r2
 800b404:	d3b2      	bcc.n	800b36c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	69fa      	ldr	r2, [r7, #28]
 800b410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b414:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b418:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7bdb      	ldrb	r3, [r3, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d016      	beq.n	800b450 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b42c:	69fa      	ldr	r2, [r7, #28]
 800b42e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b432:	f043 030b 	orr.w	r3, r3, #11
 800b436:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b448:	f043 030b 	orr.w	r3, r3, #11
 800b44c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b44e:	e015      	b.n	800b47c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b456:	695a      	ldr	r2, [r3, #20]
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b45e:	4619      	mov	r1, r3
 800b460:	f242 032b 	movw	r3, #8235	@ 0x202b
 800b464:	4313      	orrs	r3, r2
 800b466:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	69fa      	ldr	r2, [r7, #28]
 800b472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b476:	f043 030b 	orr.w	r3, r3, #11
 800b47a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b48a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b48e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f007 f9fe 	bl	80128a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	695a      	ldr	r2, [r3, #20]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b4b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f007 f92b 	bl	8012714 <USB_ReadInterrupts>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b4c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4c8:	d123      	bne.n	800b512 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f007 f9c2 	bl	8012858 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f006 fa72 	bl	80119c2 <USB_GetDevSpeed>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681c      	ldr	r4, [r3, #0]
 800b4ea:	f001 fd9d 	bl	800d028 <HAL_RCC_GetHCLKFreq>
 800b4ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f005 ff7c 	bl	80113f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f009 fd92 	bl	8015026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	695a      	ldr	r2, [r3, #20]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b510:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f007 f8fc 	bl	8012714 <USB_ReadInterrupts>
 800b51c:	4603      	mov	r3, r0
 800b51e:	f003 0308 	and.w	r3, r3, #8
 800b522:	2b08      	cmp	r3, #8
 800b524:	d10a      	bne.n	800b53c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f009 fd6f 	bl	801500a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f002 0208 	and.w	r2, r2, #8
 800b53a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f007 f8e7 	bl	8012714 <USB_ReadInterrupts>
 800b546:	4603      	mov	r3, r0
 800b548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b54c:	2b80      	cmp	r3, #128	@ 0x80
 800b54e:	d123      	bne.n	800b598 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b55c:	2301      	movs	r3, #1
 800b55e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b560:	e014      	b.n	800b58c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b566:	4613      	mov	r3, r2
 800b568:	00db      	lsls	r3, r3, #3
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	440b      	add	r3, r1
 800b570:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d105      	bne.n	800b586 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fb0a 	bl	800bb9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	3301      	adds	r3, #1
 800b58a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	791b      	ldrb	r3, [r3, #4]
 800b590:	461a      	mov	r2, r3
 800b592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b594:	4293      	cmp	r3, r2
 800b596:	d3e4      	bcc.n	800b562 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f007 f8b9 	bl	8012714 <USB_ReadInterrupts>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5ac:	d13c      	bne.n	800b628 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5b2:	e02b      	b.n	800b60c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	4413      	add	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	440b      	add	r3, r1
 800b5d2:	3318      	adds	r3, #24
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d115      	bne.n	800b606 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b5da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	da12      	bge.n	800b606 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b5e0:	6879      	ldr	r1, [r7, #4]
 800b5e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3317      	adds	r3, #23
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 faca 	bl	800bb9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	3301      	adds	r3, #1
 800b60a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	791b      	ldrb	r3, [r3, #4]
 800b610:	461a      	mov	r2, r3
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	4293      	cmp	r3, r2
 800b616:	d3cd      	bcc.n	800b5b4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	695a      	ldr	r2, [r3, #20]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f007 f871 	bl	8012714 <USB_ReadInterrupts>
 800b632:	4603      	mov	r3, r0
 800b634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b638:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b63c:	d156      	bne.n	800b6ec <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b63e:	2301      	movs	r3, #1
 800b640:	627b      	str	r3, [r7, #36]	@ 0x24
 800b642:	e045      	b.n	800b6d0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b658:	4613      	mov	r3, r2
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	440b      	add	r3, r1
 800b662:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d12e      	bne.n	800b6ca <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b66c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da2b      	bge.n	800b6ca <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	0c1a      	lsrs	r2, r3, #16
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b67c:	4053      	eors	r3, r2
 800b67e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b682:	2b00      	cmp	r3, #0
 800b684:	d121      	bne.n	800b6ca <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b68a:	4613      	mov	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	440b      	add	r3, r1
 800b694:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b698:	2201      	movs	r2, #1
 800b69a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b6a4:	6a3b      	ldr	r3, [r7, #32]
 800b6a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	69fa      	ldr	r2, [r7, #28]
 800b6be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b6c6:	6053      	str	r3, [r2, #4]
            break;
 800b6c8:	e008      	b.n	800b6dc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	791b      	ldrb	r3, [r3, #4]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d3b3      	bcc.n	800b644 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	695a      	ldr	r2, [r3, #20]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b6ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f007 f80f 	bl	8012714 <USB_ReadInterrupts>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b700:	d10a      	bne.n	800b718 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f009 fd10 	bl	8015128 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	695a      	ldr	r2, [r3, #20]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f006 fff9 	bl	8012714 <USB_ReadInterrupts>
 800b722:	4603      	mov	r3, r0
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d115      	bne.n	800b758 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	f003 0304 	and.w	r3, r3, #4
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f009 fd00 	bl	8015144 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6859      	ldr	r1, [r3, #4]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	430a      	orrs	r2, r1
 800b752:	605a      	str	r2, [r3, #4]
 800b754:	e000      	b.n	800b758 <HAL_PCD_IRQHandler+0x996>
      return;
 800b756:	bf00      	nop
    }
  }
}
 800b758:	3734      	adds	r7, #52	@ 0x34
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd90      	pop	{r4, r7, pc}

0800b75e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b770:	2b01      	cmp	r3, #1
 800b772:	d101      	bne.n	800b778 <HAL_PCD_SetAddress+0x1a>
 800b774:	2302      	movs	r3, #2
 800b776:	e012      	b.n	800b79e <HAL_PCD_SetAddress+0x40>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	78fa      	ldrb	r2, [r7, #3]
 800b784:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	78fa      	ldrb	r2, [r7, #3]
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f006 ff58 	bl	8012644 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	4608      	mov	r0, r1
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	70fb      	strb	r3, [r7, #3]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	803b      	strh	r3, [r7, #0]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b7c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	da0f      	bge.n	800b7ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7cc:	78fb      	ldrb	r3, [r7, #3]
 800b7ce:	f003 020f 	and.w	r2, r3, #15
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	3310      	adds	r3, #16
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	4413      	add	r3, r2
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	705a      	strb	r2, [r3, #1]
 800b7ea:	e00f      	b.n	800b80c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7ec:	78fb      	ldrb	r3, [r7, #3]
 800b7ee:	f003 020f 	and.w	r2, r3, #15
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	4413      	add	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	3304      	adds	r3, #4
 800b804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b80c:	78fb      	ldrb	r3, [r7, #3]
 800b80e:	f003 030f 	and.w	r3, r3, #15
 800b812:	b2da      	uxtb	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b818:	883b      	ldrh	r3, [r7, #0]
 800b81a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	78ba      	ldrb	r2, [r7, #2]
 800b826:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	785b      	ldrb	r3, [r3, #1]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d004      	beq.n	800b83a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	461a      	mov	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b83a:	78bb      	ldrb	r3, [r7, #2]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d102      	bne.n	800b846 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_PCD_EP_Open+0xae>
 800b850:	2302      	movs	r3, #2
 800b852:	e00e      	b.n	800b872 <HAL_PCD_EP_Open+0xcc>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68f9      	ldr	r1, [r7, #12]
 800b862:	4618      	mov	r0, r3
 800b864:	f006 f8d2 	bl	8011a0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b870:	7afb      	ldrb	r3, [r7, #11]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	460b      	mov	r3, r1
 800b884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	da0f      	bge.n	800b8ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b88e:	78fb      	ldrb	r3, [r7, #3]
 800b890:	f003 020f 	and.w	r2, r3, #15
 800b894:	4613      	mov	r3, r2
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	3310      	adds	r3, #16
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	705a      	strb	r2, [r3, #1]
 800b8ac:	e00f      	b.n	800b8ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8ae:	78fb      	ldrb	r3, [r7, #3]
 800b8b0:	f003 020f 	and.w	r2, r3, #15
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	00db      	lsls	r3, r3, #3
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8ce:	78fb      	ldrb	r3, [r7, #3]
 800b8d0:	f003 030f 	and.w	r3, r3, #15
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d101      	bne.n	800b8e8 <HAL_PCD_EP_Close+0x6e>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e00e      	b.n	800b906 <HAL_PCD_EP_Close+0x8c>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f006 f910 	bl	8011b1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b086      	sub	sp, #24
 800b912:	af00      	add	r7, sp, #0
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
 800b91a:	460b      	mov	r3, r1
 800b91c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b91e:	7afb      	ldrb	r3, [r7, #11]
 800b920:	f003 020f 	and.w	r2, r3, #15
 800b924:	4613      	mov	r3, r2
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4413      	add	r3, r2
 800b934:	3304      	adds	r3, #4
 800b936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2200      	movs	r2, #0
 800b948:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2200      	movs	r2, #0
 800b94e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b950:	7afb      	ldrb	r3, [r7, #11]
 800b952:	f003 030f 	and.w	r3, r3, #15
 800b956:	b2da      	uxtb	r2, r3
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	799b      	ldrb	r3, [r3, #6]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d102      	bne.n	800b96a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6818      	ldr	r0, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	799b      	ldrb	r3, [r3, #6]
 800b972:	461a      	mov	r2, r3
 800b974:	6979      	ldr	r1, [r7, #20]
 800b976:	f006 f9ad 	bl	8011cd4 <USB_EPStartXfer>

  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b990:	78fb      	ldrb	r3, [r7, #3]
 800b992:	f003 020f 	and.w	r2, r3, #15
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	4613      	mov	r3, r2
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	440b      	add	r3, r1
 800b9a2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b9a6:	681b      	ldr	r3, [r3, #0]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	f003 020f 	and.w	r2, r3, #15
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	3310      	adds	r3, #16
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	3304      	adds	r3, #4
 800b9da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	799b      	ldrb	r3, [r3, #6]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d102      	bne.n	800ba0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6818      	ldr	r0, [r3, #0]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	799b      	ldrb	r3, [r3, #6]
 800ba16:	461a      	mov	r2, r3
 800ba18:	6979      	ldr	r1, [r7, #20]
 800ba1a:	f006 f95b 	bl	8011cd4 <USB_EPStartXfer>

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba34:	78fb      	ldrb	r3, [r7, #3]
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	7912      	ldrb	r2, [r2, #4]
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d901      	bls.n	800ba46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e04f      	b.n	800bae6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	da0f      	bge.n	800ba6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	f003 020f 	and.w	r2, r3, #15
 800ba54:	4613      	mov	r3, r2
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	3310      	adds	r3, #16
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	4413      	add	r3, r2
 800ba62:	3304      	adds	r3, #4
 800ba64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	705a      	strb	r2, [r3, #1]
 800ba6c:	e00d      	b.n	800ba8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba6e:	78fa      	ldrb	r2, [r7, #3]
 800ba70:	4613      	mov	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	4413      	add	r3, r2
 800ba80:	3304      	adds	r3, #4
 800ba82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d101      	bne.n	800baaa <HAL_PCD_EP_SetStall+0x82>
 800baa6:	2302      	movs	r3, #2
 800baa8:	e01d      	b.n	800bae6 <HAL_PCD_EP_SetStall+0xbe>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	4618      	mov	r0, r3
 800baba:	f006 fcef 	bl	801249c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800babe:	78fb      	ldrb	r3, [r7, #3]
 800bac0:	f003 030f 	and.w	r3, r3, #15
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6818      	ldr	r0, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	7999      	ldrb	r1, [r3, #6]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bad6:	461a      	mov	r2, r3
 800bad8:	f006 fee2 	bl	80128a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	f003 030f 	and.w	r3, r3, #15
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	7912      	ldrb	r2, [r2, #4]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d901      	bls.n	800bb0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e042      	b.n	800bb92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da0f      	bge.n	800bb34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	f003 020f 	and.w	r2, r3, #15
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	00db      	lsls	r3, r3, #3
 800bb1e:	4413      	add	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	3310      	adds	r3, #16
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	4413      	add	r3, r2
 800bb28:	3304      	adds	r3, #4
 800bb2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	705a      	strb	r2, [r3, #1]
 800bb32:	e00f      	b.n	800bb54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	f003 020f 	and.w	r2, r3, #15
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4413      	add	r3, r2
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	f003 030f 	and.w	r3, r3, #15
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d101      	bne.n	800bb74 <HAL_PCD_EP_ClrStall+0x86>
 800bb70:	2302      	movs	r3, #2
 800bb72:	e00e      	b.n	800bb92 <HAL_PCD_EP_ClrStall+0xa4>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68f9      	ldr	r1, [r7, #12]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f006 fcf8 	bl	8012578 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	da0c      	bge.n	800bbc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbae:	78fb      	ldrb	r3, [r7, #3]
 800bbb0:	f003 020f 	and.w	r2, r3, #15
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	3310      	adds	r3, #16
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	e00c      	b.n	800bbe2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	f003 020f 	and.w	r2, r3, #15
 800bbce:	4613      	mov	r3, r2
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	4413      	add	r3, r2
 800bbde:	3304      	adds	r3, #4
 800bbe0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68f9      	ldr	r1, [r7, #12]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f006 fb17 	bl	801221c <USB_EPStopXfer>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	@ 0x28
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	4613      	mov	r3, r2
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	4413      	add	r3, r2
 800bc20:	3304      	adds	r3, #4
 800bc22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	695a      	ldr	r2, [r3, #20]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d901      	bls.n	800bc34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e06b      	b.n	800bd0c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d902      	bls.n	800bc50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	3303      	adds	r3, #3
 800bc54:	089b      	lsrs	r3, r3, #2
 800bc56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc58:	e02a      	b.n	800bcb0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	691a      	ldr	r2, [r3, #16]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	69fa      	ldr	r2, [r7, #28]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d902      	bls.n	800bc76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	3303      	adds	r3, #3
 800bc7a:	089b      	lsrs	r3, r3, #2
 800bc7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68d9      	ldr	r1, [r3, #12]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	4603      	mov	r3, r0
 800bc92:	6978      	ldr	r0, [r7, #20]
 800bc94:	f006 fb6c 	bl	8012370 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	68da      	ldr	r2, [r3, #12]
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	441a      	add	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	695a      	ldr	r2, [r3, #20]
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	441a      	add	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d809      	bhi.n	800bcda <PCD_WriteEmptyTxFifo+0xde>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	695a      	ldr	r2, [r3, #20]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d203      	bcs.n	800bcda <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1bf      	bne.n	800bc5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	691a      	ldr	r2, [r3, #16]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d811      	bhi.n	800bd0a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	f003 030f 	and.w	r3, r3, #15
 800bcec:	2201      	movs	r2, #1
 800bcee:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	43db      	mvns	r3, r3
 800bd00:	6939      	ldr	r1, [r7, #16]
 800bd02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd06:	4013      	ands	r3, r2
 800bd08:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3720      	adds	r7, #32
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b088      	sub	sp, #32
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	333c      	adds	r3, #60	@ 0x3c
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	015a      	lsls	r2, r3, #5
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	4413      	add	r3, r2
 800bd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	799b      	ldrb	r3, [r3, #6]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d17b      	bne.n	800be42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d015      	beq.n	800bd80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	4a61      	ldr	r2, [pc, #388]	@ (800bedc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	f240 80b9 	bls.w	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 80b3 	beq.w	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd76:	461a      	mov	r2, r3
 800bd78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	e0a7      	b.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d009      	beq.n	800bd9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd96:	461a      	mov	r2, r3
 800bd98:	2320      	movs	r3, #32
 800bd9a:	6093      	str	r3, [r2, #8]
 800bd9c:	e098      	b.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f040 8093 	bne.w	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	4a4b      	ldr	r2, [pc, #300]	@ (800bedc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d90f      	bls.n	800bdd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00a      	beq.n	800bdd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdc8:	461a      	mov	r2, r3
 800bdca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdce:	6093      	str	r3, [r2, #8]
 800bdd0:	e07e      	b.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	4413      	add	r3, r2
 800bde4:	3304      	adds	r3, #4
 800bde6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1a      	ldr	r2, [r3, #32]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	0159      	lsls	r1, r3, #5
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	440b      	add	r3, r1
 800bdf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdfe:	1ad2      	subs	r2, r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d114      	bne.n	800be34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be1c:	461a      	mov	r2, r3
 800be1e:	2101      	movs	r1, #1
 800be20:	f006 fd3e 	bl	80128a0 <USB_EP0_OutStart>
 800be24:	e006      	b.n	800be34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	441a      	add	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	b2db      	uxtb	r3, r3
 800be38:	4619      	mov	r1, r3
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f009 f8b0 	bl	8014fa0 <HAL_PCD_DataOutStageCallback>
 800be40:	e046      	b.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	4a26      	ldr	r2, [pc, #152]	@ (800bee0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d124      	bne.n	800be94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00a      	beq.n	800be6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be60:	461a      	mov	r2, r3
 800be62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be66:	6093      	str	r3, [r2, #8]
 800be68:	e032      	b.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f003 0320 	and.w	r3, r3, #32
 800be70:	2b00      	cmp	r3, #0
 800be72:	d008      	beq.n	800be86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	015a      	lsls	r2, r3, #5
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	4413      	add	r3, r2
 800be7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be80:	461a      	mov	r2, r3
 800be82:	2320      	movs	r3, #32
 800be84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f009 f887 	bl	8014fa0 <HAL_PCD_DataOutStageCallback>
 800be92:	e01d      	b.n	800bed0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d114      	bne.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800be9a:	6879      	ldr	r1, [r7, #4]
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	4613      	mov	r3, r2
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d108      	bne.n	800bec4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6818      	ldr	r0, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bebc:	461a      	mov	r2, r3
 800bebe:	2100      	movs	r1, #0
 800bec0:	f006 fcee 	bl	80128a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f009 f868 	bl	8014fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	4f54300a 	.word	0x4f54300a
 800bee0:	4f54310a 	.word	0x4f54310a

0800bee4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	333c      	adds	r3, #60	@ 0x3c
 800befc:	3304      	adds	r3, #4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	4a15      	ldr	r2, [pc, #84]	@ (800bf6c <PCD_EP_OutSetupPacket_int+0x88>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d90e      	bls.n	800bf38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d009      	beq.n	800bf38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf30:	461a      	mov	r2, r3
 800bf32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f009 f81f 	bl	8014f7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	4a0a      	ldr	r2, [pc, #40]	@ (800bf6c <PCD_EP_OutSetupPacket_int+0x88>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d90c      	bls.n	800bf60 <PCD_EP_OutSetupPacket_int+0x7c>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	799b      	ldrb	r3, [r3, #6]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d108      	bne.n	800bf60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf58:	461a      	mov	r2, r3
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	f006 fca0 	bl	80128a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	4f54300a 	.word	0x4f54300a

0800bf70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d107      	bne.n	800bf9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bf8e:	883b      	ldrh	r3, [r7, #0]
 800bf90:	0419      	lsls	r1, r3, #16
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	430a      	orrs	r2, r1
 800bf9a:	629a      	str	r2, [r3, #40]	@ 0x28
 800bf9c:	e028      	b.n	800bff0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa4:	0c1b      	lsrs	r3, r3, #16
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfac:	2300      	movs	r3, #0
 800bfae:	73fb      	strb	r3, [r7, #15]
 800bfb0:	e00d      	b.n	800bfce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	3340      	adds	r3, #64	@ 0x40
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	0c1b      	lsrs	r3, r3, #16
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	7bfa      	ldrb	r2, [r7, #15]
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d3ec      	bcc.n	800bfb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bfd8:	883b      	ldrh	r3, [r7, #0]
 800bfda:	0418      	lsls	r0, r3, #16
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6819      	ldr	r1, [r3, #0]
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	4302      	orrs	r2, r0
 800bfe8:	3340      	adds	r3, #64	@ 0x40
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	440b      	add	r3, r1
 800bfee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bffe:	b480      	push	{r7}
 800c000:	b083      	sub	sp, #12
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	887a      	ldrh	r2, [r7, #2]
 800c010:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c04e:	4b05      	ldr	r3, [pc, #20]	@ (800c064 <HAL_PCDEx_ActivateLPM+0x44>)
 800c050:	4313      	orrs	r3, r2
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	10000003 	.word	0x10000003

0800c068 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c088:	4b19      	ldr	r3, [pc, #100]	@ (800c0f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b04      	cmp	r3, #4
 800c092:	d00a      	beq.n	800c0aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c094:	4b16      	ldr	r3, [pc, #88]	@ (800c0f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f003 0307 	and.w	r3, r3, #7
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d001      	beq.n	800c0a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e01f      	b.n	800c0e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	e01d      	b.n	800c0e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c0aa:	4b11      	ldr	r3, [pc, #68]	@ (800c0f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	f023 0207 	bic.w	r2, r3, #7
 800c0b2:	490f      	ldr	r1, [pc, #60]	@ (800c0f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c0ba:	f7f6 f999 	bl	80023f0 <HAL_GetTick>
 800c0be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c0c0:	e009      	b.n	800c0d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c0c2:	f7f6 f995 	bl	80023f0 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c0d0:	d901      	bls.n	800c0d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e007      	b.n	800c0e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c0d6:	4b06      	ldr	r3, [pc, #24]	@ (800c0f0 <HAL_PWREx_ConfigSupply+0x70>)
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c0e2:	d1ee      	bne.n	800c0c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	58024800 	.word	0x58024800

0800c0f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c0f8:	4b05      	ldr	r3, [pc, #20]	@ (800c110 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	4a04      	ldr	r2, [pc, #16]	@ (800c110 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c0fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c102:	60d3      	str	r3, [r2, #12]
}
 800c104:	bf00      	nop
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	58024800 	.word	0x58024800

0800c114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08c      	sub	sp, #48	@ 0x30
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d102      	bne.n	800c128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	f000 bc48 	b.w	800c9b8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 8088 	beq.w	800c246 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c136:	4b99      	ldr	r3, [pc, #612]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c140:	4b96      	ldr	r3, [pc, #600]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c144:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c148:	2b10      	cmp	r3, #16
 800c14a:	d007      	beq.n	800c15c <HAL_RCC_OscConfig+0x48>
 800c14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c14e:	2b18      	cmp	r3, #24
 800c150:	d111      	bne.n	800c176 <HAL_RCC_OscConfig+0x62>
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d10c      	bne.n	800c176 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c15c:	4b8f      	ldr	r3, [pc, #572]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d06d      	beq.n	800c244 <HAL_RCC_OscConfig+0x130>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d169      	bne.n	800c244 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	f000 bc21 	b.w	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c17e:	d106      	bne.n	800c18e <HAL_RCC_OscConfig+0x7a>
 800c180:	4b86      	ldr	r3, [pc, #536]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a85      	ldr	r2, [pc, #532]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	e02e      	b.n	800c1ec <HAL_RCC_OscConfig+0xd8>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10c      	bne.n	800c1b0 <HAL_RCC_OscConfig+0x9c>
 800c196:	4b81      	ldr	r3, [pc, #516]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a80      	ldr	r2, [pc, #512]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c19c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	4b7e      	ldr	r3, [pc, #504]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a7d      	ldr	r2, [pc, #500]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c1ac:	6013      	str	r3, [r2, #0]
 800c1ae:	e01d      	b.n	800c1ec <HAL_RCC_OscConfig+0xd8>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c1b8:	d10c      	bne.n	800c1d4 <HAL_RCC_OscConfig+0xc0>
 800c1ba:	4b78      	ldr	r3, [pc, #480]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a77      	ldr	r2, [pc, #476]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	4b75      	ldr	r3, [pc, #468]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a74      	ldr	r2, [pc, #464]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	e00b      	b.n	800c1ec <HAL_RCC_OscConfig+0xd8>
 800c1d4:	4b71      	ldr	r3, [pc, #452]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a70      	ldr	r2, [pc, #448]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	4b6e      	ldr	r3, [pc, #440]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a6d      	ldr	r2, [pc, #436]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c1e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c1ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d013      	beq.n	800c21c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1f4:	f7f6 f8fc 	bl	80023f0 <HAL_GetTick>
 800c1f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c1fa:	e008      	b.n	800c20e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c1fc:	f7f6 f8f8 	bl	80023f0 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b64      	cmp	r3, #100	@ 0x64
 800c208:	d901      	bls.n	800c20e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e3d4      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c20e:	4b63      	ldr	r3, [pc, #396]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0f0      	beq.n	800c1fc <HAL_RCC_OscConfig+0xe8>
 800c21a:	e014      	b.n	800c246 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c21c:	f7f6 f8e8 	bl	80023f0 <HAL_GetTick>
 800c220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c222:	e008      	b.n	800c236 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c224:	f7f6 f8e4 	bl	80023f0 <HAL_GetTick>
 800c228:	4602      	mov	r2, r0
 800c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	2b64      	cmp	r3, #100	@ 0x64
 800c230:	d901      	bls.n	800c236 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e3c0      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c236:	4b59      	ldr	r3, [pc, #356]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1f0      	bne.n	800c224 <HAL_RCC_OscConfig+0x110>
 800c242:	e000      	b.n	800c246 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0302 	and.w	r3, r3, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80ca 	beq.w	800c3e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c254:	4b51      	ldr	r3, [pc, #324]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c25c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c25e:	4b4f      	ldr	r3, [pc, #316]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c262:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <HAL_RCC_OscConfig+0x166>
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	2b18      	cmp	r3, #24
 800c26e:	d156      	bne.n	800c31e <HAL_RCC_OscConfig+0x20a>
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d151      	bne.n	800c31e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c27a:	4b48      	ldr	r3, [pc, #288]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0304 	and.w	r3, r3, #4
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <HAL_RCC_OscConfig+0x17e>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e392      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c292:	4b42      	ldr	r3, [pc, #264]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f023 0219 	bic.w	r2, r3, #25
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	493f      	ldr	r1, [pc, #252]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2a4:	f7f6 f8a4 	bl	80023f0 <HAL_GetTick>
 800c2a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2aa:	e008      	b.n	800c2be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2ac:	f7f6 f8a0 	bl	80023f0 <HAL_GetTick>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d901      	bls.n	800c2be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e37c      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2be:	4b37      	ldr	r3, [pc, #220]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0304 	and.w	r3, r3, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0f0      	beq.n	800c2ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2ca:	f7f6 f8c1 	bl	8002450 <HAL_GetREVID>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d817      	bhi.n	800c308 <HAL_RCC_OscConfig+0x1f4>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b40      	cmp	r3, #64	@ 0x40
 800c2de:	d108      	bne.n	800c2f2 <HAL_RCC_OscConfig+0x1de>
 800c2e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c2e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c2ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2f0:	e07a      	b.n	800c3e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2f2:	4b2a      	ldr	r3, [pc, #168]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	031b      	lsls	r3, r3, #12
 800c300:	4926      	ldr	r1, [pc, #152]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c302:	4313      	orrs	r3, r2
 800c304:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c306:	e06f      	b.n	800c3e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c308:	4b24      	ldr	r3, [pc, #144]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	061b      	lsls	r3, r3, #24
 800c316:	4921      	ldr	r1, [pc, #132]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c318:	4313      	orrs	r3, r2
 800c31a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c31c:	e064      	b.n	800c3e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d047      	beq.n	800c3b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c326:	4b1d      	ldr	r3, [pc, #116]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f023 0219 	bic.w	r2, r3, #25
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	491a      	ldr	r1, [pc, #104]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c334:	4313      	orrs	r3, r2
 800c336:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c338:	f7f6 f85a 	bl	80023f0 <HAL_GetTick>
 800c33c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c33e:	e008      	b.n	800c352 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c340:	f7f6 f856 	bl	80023f0 <HAL_GetTick>
 800c344:	4602      	mov	r2, r0
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d901      	bls.n	800c352 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	e332      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c352:	4b12      	ldr	r3, [pc, #72]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0304 	and.w	r3, r3, #4
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0f0      	beq.n	800c340 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c35e:	f7f6 f877 	bl	8002450 <HAL_GetREVID>
 800c362:	4603      	mov	r3, r0
 800c364:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c368:	4293      	cmp	r3, r2
 800c36a:	d819      	bhi.n	800c3a0 <HAL_RCC_OscConfig+0x28c>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	2b40      	cmp	r3, #64	@ 0x40
 800c372:	d108      	bne.n	800c386 <HAL_RCC_OscConfig+0x272>
 800c374:	4b09      	ldr	r3, [pc, #36]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c37c:	4a07      	ldr	r2, [pc, #28]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c37e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c382:	6053      	str	r3, [r2, #4]
 800c384:	e030      	b.n	800c3e8 <HAL_RCC_OscConfig+0x2d4>
 800c386:	4b05      	ldr	r3, [pc, #20]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	031b      	lsls	r3, r3, #12
 800c394:	4901      	ldr	r1, [pc, #4]	@ (800c39c <HAL_RCC_OscConfig+0x288>)
 800c396:	4313      	orrs	r3, r2
 800c398:	604b      	str	r3, [r1, #4]
 800c39a:	e025      	b.n	800c3e8 <HAL_RCC_OscConfig+0x2d4>
 800c39c:	58024400 	.word	0x58024400
 800c3a0:	4b9a      	ldr	r3, [pc, #616]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	691b      	ldr	r3, [r3, #16]
 800c3ac:	061b      	lsls	r3, r3, #24
 800c3ae:	4997      	ldr	r1, [pc, #604]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	604b      	str	r3, [r1, #4]
 800c3b4:	e018      	b.n	800c3e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3b6:	4b95      	ldr	r3, [pc, #596]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a94      	ldr	r2, [pc, #592]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c3bc:	f023 0301 	bic.w	r3, r3, #1
 800c3c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3c2:	f7f6 f815 	bl	80023f0 <HAL_GetTick>
 800c3c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c3c8:	e008      	b.n	800c3dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3ca:	f7f6 f811 	bl	80023f0 <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d901      	bls.n	800c3dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e2ed      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c3dc:	4b8b      	ldr	r3, [pc, #556]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1f0      	bne.n	800c3ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0310 	and.w	r3, r3, #16
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 80a9 	beq.w	800c548 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3f6:	4b85      	ldr	r3, [pc, #532]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c400:	4b82      	ldr	r3, [pc, #520]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	2b08      	cmp	r3, #8
 800c40a:	d007      	beq.n	800c41c <HAL_RCC_OscConfig+0x308>
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	2b18      	cmp	r3, #24
 800c410:	d13a      	bne.n	800c488 <HAL_RCC_OscConfig+0x374>
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f003 0303 	and.w	r3, r3, #3
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d135      	bne.n	800c488 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c41c:	4b7b      	ldr	r3, [pc, #492]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c424:	2b00      	cmp	r3, #0
 800c426:	d005      	beq.n	800c434 <HAL_RCC_OscConfig+0x320>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	69db      	ldr	r3, [r3, #28]
 800c42c:	2b80      	cmp	r3, #128	@ 0x80
 800c42e:	d001      	beq.n	800c434 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e2c1      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c434:	f7f6 f80c 	bl	8002450 <HAL_GetREVID>
 800c438:	4603      	mov	r3, r0
 800c43a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c43e:	4293      	cmp	r3, r2
 800c440:	d817      	bhi.n	800c472 <HAL_RCC_OscConfig+0x35e>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	2b20      	cmp	r3, #32
 800c448:	d108      	bne.n	800c45c <HAL_RCC_OscConfig+0x348>
 800c44a:	4b70      	ldr	r3, [pc, #448]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c452:	4a6e      	ldr	r2, [pc, #440]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c458:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c45a:	e075      	b.n	800c548 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c45c:	4b6b      	ldr	r3, [pc, #428]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a1b      	ldr	r3, [r3, #32]
 800c468:	069b      	lsls	r3, r3, #26
 800c46a:	4968      	ldr	r1, [pc, #416]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c470:	e06a      	b.n	800c548 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c472:	4b66      	ldr	r3, [pc, #408]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a1b      	ldr	r3, [r3, #32]
 800c47e:	061b      	lsls	r3, r3, #24
 800c480:	4962      	ldr	r1, [pc, #392]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c482:	4313      	orrs	r3, r2
 800c484:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c486:	e05f      	b.n	800c548 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	69db      	ldr	r3, [r3, #28]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d042      	beq.n	800c516 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c490:	4b5e      	ldr	r3, [pc, #376]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a5d      	ldr	r2, [pc, #372]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c49a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c49c:	f7f5 ffa8 	bl	80023f0 <HAL_GetTick>
 800c4a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4a2:	e008      	b.n	800c4b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c4a4:	f7f5 ffa4 	bl	80023f0 <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d901      	bls.n	800c4b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e280      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4b6:	4b55      	ldr	r3, [pc, #340]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d0f0      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c4c2:	f7f5 ffc5 	bl	8002450 <HAL_GetREVID>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d817      	bhi.n	800c500 <HAL_RCC_OscConfig+0x3ec>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	2b20      	cmp	r3, #32
 800c4d6:	d108      	bne.n	800c4ea <HAL_RCC_OscConfig+0x3d6>
 800c4d8:	4b4c      	ldr	r3, [pc, #304]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c4e0:	4a4a      	ldr	r2, [pc, #296]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c4e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c4e6:	6053      	str	r3, [r2, #4]
 800c4e8:	e02e      	b.n	800c548 <HAL_RCC_OscConfig+0x434>
 800c4ea:	4b48      	ldr	r3, [pc, #288]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	069b      	lsls	r3, r3, #26
 800c4f8:	4944      	ldr	r1, [pc, #272]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	604b      	str	r3, [r1, #4]
 800c4fe:	e023      	b.n	800c548 <HAL_RCC_OscConfig+0x434>
 800c500:	4b42      	ldr	r3, [pc, #264]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a1b      	ldr	r3, [r3, #32]
 800c50c:	061b      	lsls	r3, r3, #24
 800c50e:	493f      	ldr	r1, [pc, #252]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c510:	4313      	orrs	r3, r2
 800c512:	60cb      	str	r3, [r1, #12]
 800c514:	e018      	b.n	800c548 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c516:	4b3d      	ldr	r3, [pc, #244]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a3c      	ldr	r2, [pc, #240]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c51c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c522:	f7f5 ff65 	bl	80023f0 <HAL_GetTick>
 800c526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c528:	e008      	b.n	800c53c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c52a:	f7f5 ff61 	bl	80023f0 <HAL_GetTick>
 800c52e:	4602      	mov	r2, r0
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	2b02      	cmp	r3, #2
 800c536:	d901      	bls.n	800c53c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	e23d      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c53c:	4b33      	ldr	r3, [pc, #204]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1f0      	bne.n	800c52a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0308 	and.w	r3, r3, #8
 800c550:	2b00      	cmp	r3, #0
 800c552:	d036      	beq.n	800c5c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d019      	beq.n	800c590 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c55c:	4b2b      	ldr	r3, [pc, #172]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c55e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c560:	4a2a      	ldr	r2, [pc, #168]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c568:	f7f5 ff42 	bl	80023f0 <HAL_GetTick>
 800c56c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c56e:	e008      	b.n	800c582 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c570:	f7f5 ff3e 	bl	80023f0 <HAL_GetTick>
 800c574:	4602      	mov	r2, r0
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d901      	bls.n	800c582 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e21a      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c582:	4b22      	ldr	r3, [pc, #136]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c586:	f003 0302 	and.w	r3, r3, #2
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d0f0      	beq.n	800c570 <HAL_RCC_OscConfig+0x45c>
 800c58e:	e018      	b.n	800c5c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c590:	4b1e      	ldr	r3, [pc, #120]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c594:	4a1d      	ldr	r2, [pc, #116]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c596:	f023 0301 	bic.w	r3, r3, #1
 800c59a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c59c:	f7f5 ff28 	bl	80023f0 <HAL_GetTick>
 800c5a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c5a2:	e008      	b.n	800c5b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5a4:	f7f5 ff24 	bl	80023f0 <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e200      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c5b6:	4b15      	ldr	r3, [pc, #84]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c5b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1f0      	bne.n	800c5a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d039      	beq.n	800c642 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01c      	beq.n	800c610 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a0c      	ldr	r2, [pc, #48]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c5dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c5e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c5e2:	f7f5 ff05 	bl	80023f0 <HAL_GetTick>
 800c5e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c5e8:	e008      	b.n	800c5fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c5ea:	f7f5 ff01 	bl	80023f0 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d901      	bls.n	800c5fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e1dd      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c5fc:	4b03      	ldr	r3, [pc, #12]	@ (800c60c <HAL_RCC_OscConfig+0x4f8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d0f0      	beq.n	800c5ea <HAL_RCC_OscConfig+0x4d6>
 800c608:	e01b      	b.n	800c642 <HAL_RCC_OscConfig+0x52e>
 800c60a:	bf00      	nop
 800c60c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c610:	4b9b      	ldr	r3, [pc, #620]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a9a      	ldr	r2, [pc, #616]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c61a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c61c:	f7f5 fee8 	bl	80023f0 <HAL_GetTick>
 800c620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c622:	e008      	b.n	800c636 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c624:	f7f5 fee4 	bl	80023f0 <HAL_GetTick>
 800c628:	4602      	mov	r2, r0
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d901      	bls.n	800c636 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e1c0      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c636:	4b92      	ldr	r3, [pc, #584]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1f0      	bne.n	800c624 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 8081 	beq.w	800c752 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c650:	4b8c      	ldr	r3, [pc, #560]	@ (800c884 <HAL_RCC_OscConfig+0x770>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a8b      	ldr	r2, [pc, #556]	@ (800c884 <HAL_RCC_OscConfig+0x770>)
 800c656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c65a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c65c:	f7f5 fec8 	bl	80023f0 <HAL_GetTick>
 800c660:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c662:	e008      	b.n	800c676 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c664:	f7f5 fec4 	bl	80023f0 <HAL_GetTick>
 800c668:	4602      	mov	r2, r0
 800c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	2b64      	cmp	r3, #100	@ 0x64
 800c670:	d901      	bls.n	800c676 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c672:	2303      	movs	r3, #3
 800c674:	e1a0      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c676:	4b83      	ldr	r3, [pc, #524]	@ (800c884 <HAL_RCC_OscConfig+0x770>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0f0      	beq.n	800c664 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	2b01      	cmp	r3, #1
 800c688:	d106      	bne.n	800c698 <HAL_RCC_OscConfig+0x584>
 800c68a:	4b7d      	ldr	r3, [pc, #500]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c68c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c68e:	4a7c      	ldr	r2, [pc, #496]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c690:	f043 0301 	orr.w	r3, r3, #1
 800c694:	6713      	str	r3, [r2, #112]	@ 0x70
 800c696:	e02d      	b.n	800c6f4 <HAL_RCC_OscConfig+0x5e0>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10c      	bne.n	800c6ba <HAL_RCC_OscConfig+0x5a6>
 800c6a0:	4b77      	ldr	r3, [pc, #476]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6a4:	4a76      	ldr	r2, [pc, #472]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6a6:	f023 0301 	bic.w	r3, r3, #1
 800c6aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6ac:	4b74      	ldr	r3, [pc, #464]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6b0:	4a73      	ldr	r2, [pc, #460]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6b2:	f023 0304 	bic.w	r3, r3, #4
 800c6b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6b8:	e01c      	b.n	800c6f4 <HAL_RCC_OscConfig+0x5e0>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	2b05      	cmp	r3, #5
 800c6c0:	d10c      	bne.n	800c6dc <HAL_RCC_OscConfig+0x5c8>
 800c6c2:	4b6f      	ldr	r3, [pc, #444]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6c6:	4a6e      	ldr	r2, [pc, #440]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6c8:	f043 0304 	orr.w	r3, r3, #4
 800c6cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6ce:	4b6c      	ldr	r3, [pc, #432]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6d2:	4a6b      	ldr	r2, [pc, #428]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6d4:	f043 0301 	orr.w	r3, r3, #1
 800c6d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6da:	e00b      	b.n	800c6f4 <HAL_RCC_OscConfig+0x5e0>
 800c6dc:	4b68      	ldr	r3, [pc, #416]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6e0:	4a67      	ldr	r2, [pc, #412]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6e2:	f023 0301 	bic.w	r3, r3, #1
 800c6e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c6e8:	4b65      	ldr	r3, [pc, #404]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6ec:	4a64      	ldr	r2, [pc, #400]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c6ee:	f023 0304 	bic.w	r3, r3, #4
 800c6f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d015      	beq.n	800c728 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6fc:	f7f5 fe78 	bl	80023f0 <HAL_GetTick>
 800c700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c702:	e00a      	b.n	800c71a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c704:	f7f5 fe74 	bl	80023f0 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c712:	4293      	cmp	r3, r2
 800c714:	d901      	bls.n	800c71a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c716:	2303      	movs	r3, #3
 800c718:	e14e      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c71a:	4b59      	ldr	r3, [pc, #356]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d0ee      	beq.n	800c704 <HAL_RCC_OscConfig+0x5f0>
 800c726:	e014      	b.n	800c752 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c728:	f7f5 fe62 	bl	80023f0 <HAL_GetTick>
 800c72c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c72e:	e00a      	b.n	800c746 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c730:	f7f5 fe5e 	bl	80023f0 <HAL_GetTick>
 800c734:	4602      	mov	r2, r0
 800c736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c73e:	4293      	cmp	r3, r2
 800c740:	d901      	bls.n	800c746 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	e138      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c746:	4b4e      	ldr	r3, [pc, #312]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c74a:	f003 0302 	and.w	r3, r3, #2
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1ee      	bne.n	800c730 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 812d 	beq.w	800c9b6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c75c:	4b48      	ldr	r3, [pc, #288]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c764:	2b18      	cmp	r3, #24
 800c766:	f000 80bd 	beq.w	800c8e4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c76e:	2b02      	cmp	r3, #2
 800c770:	f040 809e 	bne.w	800c8b0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c774:	4b42      	ldr	r3, [pc, #264]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a41      	ldr	r2, [pc, #260]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c77a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c77e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c780:	f7f5 fe36 	bl	80023f0 <HAL_GetTick>
 800c784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c786:	e008      	b.n	800c79a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c788:	f7f5 fe32 	bl	80023f0 <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d901      	bls.n	800c79a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e10e      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c79a:	4b39      	ldr	r3, [pc, #228]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1f0      	bne.n	800c788 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7a6:	4b36      	ldr	r3, [pc, #216]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c7a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7aa:	4b37      	ldr	r3, [pc, #220]	@ (800c888 <HAL_RCC_OscConfig+0x774>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c7b6:	0112      	lsls	r2, r2, #4
 800c7b8:	430a      	orrs	r2, r1
 800c7ba:	4931      	ldr	r1, [pc, #196]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	628b      	str	r3, [r1, #40]	@ 0x28
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	025b      	lsls	r3, r3, #9
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	431a      	orrs	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	041b      	lsls	r3, r3, #16
 800c7de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c7e2:	431a      	orrs	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	061b      	lsls	r3, r3, #24
 800c7ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c7f0:	4923      	ldr	r1, [pc, #140]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c7f6:	4b22      	ldr	r3, [pc, #136]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fa:	4a21      	ldr	r2, [pc, #132]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c7fc:	f023 0301 	bic.w	r3, r3, #1
 800c800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c802:	4b1f      	ldr	r3, [pc, #124]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c806:	4b21      	ldr	r3, [pc, #132]	@ (800c88c <HAL_RCC_OscConfig+0x778>)
 800c808:	4013      	ands	r3, r2
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c80e:	00d2      	lsls	r2, r2, #3
 800c810:	491b      	ldr	r1, [pc, #108]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c812:	4313      	orrs	r3, r2
 800c814:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c816:	4b1a      	ldr	r3, [pc, #104]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c81a:	f023 020c 	bic.w	r2, r3, #12
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c822:	4917      	ldr	r1, [pc, #92]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c824:	4313      	orrs	r3, r2
 800c826:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c828:	4b15      	ldr	r3, [pc, #84]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c82c:	f023 0202 	bic.w	r2, r3, #2
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c834:	4912      	ldr	r1, [pc, #72]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c836:	4313      	orrs	r3, r2
 800c838:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c83a:	4b11      	ldr	r3, [pc, #68]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c83e:	4a10      	ldr	r2, [pc, #64]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c844:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c846:	4b0e      	ldr	r3, [pc, #56]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84a:	4a0d      	ldr	r2, [pc, #52]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c84c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c852:	4b0b      	ldr	r3, [pc, #44]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c856:	4a0a      	ldr	r2, [pc, #40]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c85c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c85e:	4b08      	ldr	r3, [pc, #32]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c862:	4a07      	ldr	r2, [pc, #28]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c864:	f043 0301 	orr.w	r3, r3, #1
 800c868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c86a:	4b05      	ldr	r3, [pc, #20]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a04      	ldr	r2, [pc, #16]	@ (800c880 <HAL_RCC_OscConfig+0x76c>)
 800c870:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c876:	f7f5 fdbb 	bl	80023f0 <HAL_GetTick>
 800c87a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c87c:	e011      	b.n	800c8a2 <HAL_RCC_OscConfig+0x78e>
 800c87e:	bf00      	nop
 800c880:	58024400 	.word	0x58024400
 800c884:	58024800 	.word	0x58024800
 800c888:	fffffc0c 	.word	0xfffffc0c
 800c88c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c890:	f7f5 fdae 	bl	80023f0 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e08a      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c8a2:	4b47      	ldr	r3, [pc, #284]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0f0      	beq.n	800c890 <HAL_RCC_OscConfig+0x77c>
 800c8ae:	e082      	b.n	800c9b6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8b0:	4b43      	ldr	r3, [pc, #268]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a42      	ldr	r2, [pc, #264]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c8b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c8ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8bc:	f7f5 fd98 	bl	80023f0 <HAL_GetTick>
 800c8c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c8c2:	e008      	b.n	800c8d6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8c4:	f7f5 fd94 	bl	80023f0 <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d901      	bls.n	800c8d6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e070      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c8d6:	4b3a      	ldr	r3, [pc, #232]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1f0      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x7b0>
 800c8e2:	e068      	b.n	800c9b6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c8e4:	4b36      	ldr	r3, [pc, #216]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c8ea:	4b35      	ldr	r3, [pc, #212]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d031      	beq.n	800c95c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	f003 0203 	and.w	r2, r3, #3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c902:	429a      	cmp	r2, r3
 800c904:	d12a      	bne.n	800c95c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	091b      	lsrs	r3, r3, #4
 800c90a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c912:	429a      	cmp	r2, r3
 800c914:	d122      	bne.n	800c95c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c920:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c922:	429a      	cmp	r2, r3
 800c924:	d11a      	bne.n	800c95c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	0a5b      	lsrs	r3, r3, #9
 800c92a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c932:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c934:	429a      	cmp	r2, r3
 800c936:	d111      	bne.n	800c95c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	0c1b      	lsrs	r3, r3, #16
 800c93c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c944:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c946:	429a      	cmp	r2, r3
 800c948:	d108      	bne.n	800c95c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	0e1b      	lsrs	r3, r3, #24
 800c94e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c956:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c958:	429a      	cmp	r2, r3
 800c95a:	d001      	beq.n	800c960 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e02b      	b.n	800c9b8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c960:	4b17      	ldr	r3, [pc, #92]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c964:	08db      	lsrs	r3, r3, #3
 800c966:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c96a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	429a      	cmp	r2, r3
 800c974:	d01f      	beq.n	800c9b6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c976:	4b12      	ldr	r3, [pc, #72]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97a:	4a11      	ldr	r2, [pc, #68]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c97c:	f023 0301 	bic.w	r3, r3, #1
 800c980:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c982:	f7f5 fd35 	bl	80023f0 <HAL_GetTick>
 800c986:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c988:	bf00      	nop
 800c98a:	f7f5 fd31 	bl	80023f0 <HAL_GetTick>
 800c98e:	4602      	mov	r2, r0
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	4293      	cmp	r3, r2
 800c994:	d0f9      	beq.n	800c98a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c996:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c99a:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c4 <HAL_RCC_OscConfig+0x8b0>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c9a2:	00d2      	lsls	r2, r2, #3
 800c9a4:	4906      	ldr	r1, [pc, #24]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c9aa:	4b05      	ldr	r3, [pc, #20]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ae:	4a04      	ldr	r2, [pc, #16]	@ (800c9c0 <HAL_RCC_OscConfig+0x8ac>)
 800c9b0:	f043 0301 	orr.w	r3, r3, #1
 800c9b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3730      	adds	r7, #48	@ 0x30
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	58024400 	.word	0x58024400
 800c9c4:	ffff0007 	.word	0xffff0007

0800c9c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d101      	bne.n	800c9dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e19c      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c9dc:	4b8a      	ldr	r3, [pc, #552]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 030f 	and.w	r3, r3, #15
 800c9e4:	683a      	ldr	r2, [r7, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d910      	bls.n	800ca0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c9ea:	4b87      	ldr	r3, [pc, #540]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f023 020f 	bic.w	r2, r3, #15
 800c9f2:	4985      	ldr	r1, [pc, #532]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c9fa:	4b83      	ldr	r3, [pc, #524]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 030f 	and.w	r3, r3, #15
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d001      	beq.n	800ca0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e184      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 0304 	and.w	r3, r3, #4
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d010      	beq.n	800ca3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	691a      	ldr	r2, [r3, #16]
 800ca1c:	4b7b      	ldr	r3, [pc, #492]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca1e:	699b      	ldr	r3, [r3, #24]
 800ca20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d908      	bls.n	800ca3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ca28:	4b78      	ldr	r3, [pc, #480]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	4975      	ldr	r1, [pc, #468]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0308 	and.w	r3, r3, #8
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d010      	beq.n	800ca68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	695a      	ldr	r2, [r3, #20]
 800ca4a:	4b70      	ldr	r3, [pc, #448]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca4c:	69db      	ldr	r3, [r3, #28]
 800ca4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d908      	bls.n	800ca68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ca56:	4b6d      	ldr	r3, [pc, #436]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	496a      	ldr	r1, [pc, #424]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca64:	4313      	orrs	r3, r2
 800ca66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0310 	and.w	r3, r3, #16
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d010      	beq.n	800ca96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	699a      	ldr	r2, [r3, #24]
 800ca78:	4b64      	ldr	r3, [pc, #400]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d908      	bls.n	800ca96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ca84:	4b61      	ldr	r3, [pc, #388]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca86:	69db      	ldr	r3, [r3, #28]
 800ca88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	495e      	ldr	r1, [pc, #376]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0320 	and.w	r3, r3, #32
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d010      	beq.n	800cac4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	69da      	ldr	r2, [r3, #28]
 800caa6:	4b59      	ldr	r3, [pc, #356]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800caa8:	6a1b      	ldr	r3, [r3, #32]
 800caaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800caae:	429a      	cmp	r2, r3
 800cab0:	d908      	bls.n	800cac4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cab2:	4b56      	ldr	r3, [pc, #344]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	4953      	ldr	r1, [pc, #332]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cac0:	4313      	orrs	r3, r2
 800cac2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 0302 	and.w	r3, r3, #2
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d010      	beq.n	800caf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	4b4d      	ldr	r3, [pc, #308]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	f003 030f 	and.w	r3, r3, #15
 800cadc:	429a      	cmp	r2, r3
 800cade:	d908      	bls.n	800caf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cae0:	4b4a      	ldr	r3, [pc, #296]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	f023 020f 	bic.w	r2, r3, #15
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	4947      	ldr	r1, [pc, #284]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800caee:	4313      	orrs	r3, r2
 800caf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d055      	beq.n	800cbaa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cafe:	4b43      	ldr	r3, [pc, #268]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	689b      	ldr	r3, [r3, #8]
 800cb0a:	4940      	ldr	r1, [pc, #256]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d107      	bne.n	800cb28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cb18:	4b3c      	ldr	r3, [pc, #240]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d121      	bne.n	800cb68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e0f6      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d107      	bne.n	800cb40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cb30:	4b36      	ldr	r3, [pc, #216]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d115      	bne.n	800cb68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e0ea      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d107      	bne.n	800cb58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb48:	4b30      	ldr	r3, [pc, #192]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d109      	bne.n	800cb68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e0de      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb58:	4b2c      	ldr	r3, [pc, #176]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0304 	and.w	r3, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e0d6      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cb68:	4b28      	ldr	r3, [pc, #160]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	f023 0207 	bic.w	r2, r3, #7
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	4925      	ldr	r1, [pc, #148]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb7a:	f7f5 fc39 	bl	80023f0 <HAL_GetTick>
 800cb7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb80:	e00a      	b.n	800cb98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb82:	f7f5 fc35 	bl	80023f0 <HAL_GetTick>
 800cb86:	4602      	mov	r2, r0
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	1ad3      	subs	r3, r2, r3
 800cb8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d901      	bls.n	800cb98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cb94:	2303      	movs	r3, #3
 800cb96:	e0be      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb98:	4b1c      	ldr	r3, [pc, #112]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d1eb      	bne.n	800cb82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 0302 	and.w	r3, r3, #2
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d010      	beq.n	800cbd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68da      	ldr	r2, [r3, #12]
 800cbba:	4b14      	ldr	r3, [pc, #80]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cbbc:	699b      	ldr	r3, [r3, #24]
 800cbbe:	f003 030f 	and.w	r3, r3, #15
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d208      	bcs.n	800cbd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbc6:	4b11      	ldr	r3, [pc, #68]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	f023 020f 	bic.w	r2, r3, #15
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	490e      	ldr	r1, [pc, #56]	@ (800cc0c <HAL_RCC_ClockConfig+0x244>)
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cbd8:	4b0b      	ldr	r3, [pc, #44]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f003 030f 	and.w	r3, r3, #15
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d214      	bcs.n	800cc10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbe6:	4b08      	ldr	r3, [pc, #32]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f023 020f 	bic.w	r2, r3, #15
 800cbee:	4906      	ldr	r1, [pc, #24]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbf6:	4b04      	ldr	r3, [pc, #16]	@ (800cc08 <HAL_RCC_ClockConfig+0x240>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d005      	beq.n	800cc10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e086      	b.n	800cd16 <HAL_RCC_ClockConfig+0x34e>
 800cc08:	52002000 	.word	0x52002000
 800cc0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 0304 	and.w	r3, r3, #4
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d010      	beq.n	800cc3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	691a      	ldr	r2, [r3, #16]
 800cc20:	4b3f      	ldr	r3, [pc, #252]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d208      	bcs.n	800cc3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cc2c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	4939      	ldr	r1, [pc, #228]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0308 	and.w	r3, r3, #8
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d010      	beq.n	800cc6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	695a      	ldr	r2, [r3, #20]
 800cc4e:	4b34      	ldr	r3, [pc, #208]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d208      	bcs.n	800cc6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cc5a:	4b31      	ldr	r3, [pc, #196]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc5c:	69db      	ldr	r3, [r3, #28]
 800cc5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	492e      	ldr	r1, [pc, #184]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0310 	and.w	r3, r3, #16
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d010      	beq.n	800cc9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	699a      	ldr	r2, [r3, #24]
 800cc7c:	4b28      	ldr	r3, [pc, #160]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d208      	bcs.n	800cc9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cc88:	4b25      	ldr	r3, [pc, #148]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc8a:	69db      	ldr	r3, [r3, #28]
 800cc8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	4922      	ldr	r1, [pc, #136]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f003 0320 	and.w	r3, r3, #32
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d010      	beq.n	800ccc8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	69da      	ldr	r2, [r3, #28]
 800ccaa:	4b1d      	ldr	r3, [pc, #116]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d208      	bcs.n	800ccc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ccb6:	4b1a      	ldr	r3, [pc, #104]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	4917      	ldr	r1, [pc, #92]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ccc8:	f000 f834 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 800cccc:	4602      	mov	r2, r0
 800ccce:	4b14      	ldr	r3, [pc, #80]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	0a1b      	lsrs	r3, r3, #8
 800ccd4:	f003 030f 	and.w	r3, r3, #15
 800ccd8:	4912      	ldr	r1, [pc, #72]	@ (800cd24 <HAL_RCC_ClockConfig+0x35c>)
 800ccda:	5ccb      	ldrb	r3, [r1, r3]
 800ccdc:	f003 031f 	and.w	r3, r3, #31
 800cce0:	fa22 f303 	lsr.w	r3, r2, r3
 800cce4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cce6:	4b0e      	ldr	r3, [pc, #56]	@ (800cd20 <HAL_RCC_ClockConfig+0x358>)
 800cce8:	699b      	ldr	r3, [r3, #24]
 800ccea:	f003 030f 	and.w	r3, r3, #15
 800ccee:	4a0d      	ldr	r2, [pc, #52]	@ (800cd24 <HAL_RCC_ClockConfig+0x35c>)
 800ccf0:	5cd3      	ldrb	r3, [r2, r3]
 800ccf2:	f003 031f 	and.w	r3, r3, #31
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	4a0a      	ldr	r2, [pc, #40]	@ (800cd28 <HAL_RCC_ClockConfig+0x360>)
 800ccfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cd00:	4a0a      	ldr	r2, [pc, #40]	@ (800cd2c <HAL_RCC_ClockConfig+0x364>)
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cd06:	4b0a      	ldr	r3, [pc, #40]	@ (800cd30 <HAL_RCC_ClockConfig+0x368>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f5 fb26 	bl	800235c <HAL_InitTick>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	58024400 	.word	0x58024400
 800cd24:	08015ff8 	.word	0x08015ff8
 800cd28:	24000008 	.word	0x24000008
 800cd2c:	24000004 	.word	0x24000004
 800cd30:	2400000c 	.word	0x2400000c

0800cd34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b089      	sub	sp, #36	@ 0x24
 800cd38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd3a:	4bb3      	ldr	r3, [pc, #716]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd3c:	691b      	ldr	r3, [r3, #16]
 800cd3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd42:	2b18      	cmp	r3, #24
 800cd44:	f200 8155 	bhi.w	800cff2 <HAL_RCC_GetSysClockFreq+0x2be>
 800cd48:	a201      	add	r2, pc, #4	@ (adr r2, 800cd50 <HAL_RCC_GetSysClockFreq+0x1c>)
 800cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4e:	bf00      	nop
 800cd50:	0800cdb5 	.word	0x0800cdb5
 800cd54:	0800cff3 	.word	0x0800cff3
 800cd58:	0800cff3 	.word	0x0800cff3
 800cd5c:	0800cff3 	.word	0x0800cff3
 800cd60:	0800cff3 	.word	0x0800cff3
 800cd64:	0800cff3 	.word	0x0800cff3
 800cd68:	0800cff3 	.word	0x0800cff3
 800cd6c:	0800cff3 	.word	0x0800cff3
 800cd70:	0800cddb 	.word	0x0800cddb
 800cd74:	0800cff3 	.word	0x0800cff3
 800cd78:	0800cff3 	.word	0x0800cff3
 800cd7c:	0800cff3 	.word	0x0800cff3
 800cd80:	0800cff3 	.word	0x0800cff3
 800cd84:	0800cff3 	.word	0x0800cff3
 800cd88:	0800cff3 	.word	0x0800cff3
 800cd8c:	0800cff3 	.word	0x0800cff3
 800cd90:	0800cde1 	.word	0x0800cde1
 800cd94:	0800cff3 	.word	0x0800cff3
 800cd98:	0800cff3 	.word	0x0800cff3
 800cd9c:	0800cff3 	.word	0x0800cff3
 800cda0:	0800cff3 	.word	0x0800cff3
 800cda4:	0800cff3 	.word	0x0800cff3
 800cda8:	0800cff3 	.word	0x0800cff3
 800cdac:	0800cff3 	.word	0x0800cff3
 800cdb0:	0800cde7 	.word	0x0800cde7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdb4:	4b94      	ldr	r3, [pc, #592]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d009      	beq.n	800cdd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdc0:	4b91      	ldr	r3, [pc, #580]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	08db      	lsrs	r3, r3, #3
 800cdc6:	f003 0303 	and.w	r3, r3, #3
 800cdca:	4a90      	ldr	r2, [pc, #576]	@ (800d00c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cdcc:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800cdd2:	e111      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800cdd4:	4b8d      	ldr	r3, [pc, #564]	@ (800d00c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cdd6:	61bb      	str	r3, [r7, #24]
      break;
 800cdd8:	e10e      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800cdda:	4b8d      	ldr	r3, [pc, #564]	@ (800d010 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cddc:	61bb      	str	r3, [r7, #24]
      break;
 800cdde:	e10b      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800cde0:	4b8c      	ldr	r3, [pc, #560]	@ (800d014 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800cde2:	61bb      	str	r3, [r7, #24]
      break;
 800cde4:	e108      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cde6:	4b88      	ldr	r3, [pc, #544]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdea:	f003 0303 	and.w	r3, r3, #3
 800cdee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800cdf0:	4b85      	ldr	r3, [pc, #532]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf4:	091b      	lsrs	r3, r3, #4
 800cdf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cdfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cdfc:	4b82      	ldr	r3, [pc, #520]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce06:	4b80      	ldr	r3, [pc, #512]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce0a:	08db      	lsrs	r3, r3, #3
 800ce0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	fb02 f303 	mul.w	r3, r2, r3
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 80e1 	beq.w	800cfec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	f000 8083 	beq.w	800cf38 <HAL_RCC_GetSysClockFreq+0x204>
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	f200 80a1 	bhi.w	800cf7c <HAL_RCC_GetSysClockFreq+0x248>
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <HAL_RCC_GetSysClockFreq+0x114>
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d056      	beq.n	800cef4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ce46:	e099      	b.n	800cf7c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce48:	4b6f      	ldr	r3, [pc, #444]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 0320 	and.w	r3, r3, #32
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d02d      	beq.n	800ceb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce54:	4b6c      	ldr	r3, [pc, #432]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	08db      	lsrs	r3, r3, #3
 800ce5a:	f003 0303 	and.w	r3, r3, #3
 800ce5e:	4a6b      	ldr	r2, [pc, #428]	@ (800d00c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce60:	fa22 f303 	lsr.w	r3, r2, r3
 800ce64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	ee07 3a90 	vmov	s15, r3
 800ce6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce7e:	4b62      	ldr	r3, [pc, #392]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce86:	ee07 3a90 	vmov	s15, r3
 800ce8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ce92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d018 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ce96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceaa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ceae:	e087      	b.n	800cfc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	ee07 3a90 	vmov	s15, r3
 800ceb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d01c <HAL_RCC_GetSysClockFreq+0x2e8>
 800cebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec2:	4b51      	ldr	r3, [pc, #324]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceca:	ee07 3a90 	vmov	s15, r3
 800cece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ced6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d018 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ceda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cef2:	e065      	b.n	800cfc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	ee07 3a90 	vmov	s15, r3
 800cefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d020 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cf02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf06:	4b40      	ldr	r3, [pc, #256]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0e:	ee07 3a90 	vmov	s15, r3
 800cf12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf16:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d018 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf36:	e043      	b.n	800cfc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d024 <HAL_RCC_GetSysClockFreq+0x2f0>
 800cf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4a:	4b2f      	ldr	r3, [pc, #188]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf52:	ee07 3a90 	vmov	s15, r3
 800cf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d018 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf7a:	e021      	b.n	800cfc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	ee07 3a90 	vmov	s15, r3
 800cf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d020 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cf8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf8e:	4b1e      	ldr	r3, [pc, #120]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfa2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d018 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cfbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cfc0:	4b11      	ldr	r3, [pc, #68]	@ (800d008 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfc4:	0a5b      	lsrs	r3, r3, #9
 800cfc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfca:	3301      	adds	r3, #1
 800cfcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	ee07 3a90 	vmov	s15, r3
 800cfd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cfd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfe4:	ee17 3a90 	vmov	r3, s15
 800cfe8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cfea:	e005      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	61bb      	str	r3, [r7, #24]
      break;
 800cff0:	e002      	b.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cff2:	4b07      	ldr	r3, [pc, #28]	@ (800d010 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cff4:	61bb      	str	r3, [r7, #24]
      break;
 800cff6:	bf00      	nop
  }

  return sysclockfreq;
 800cff8:	69bb      	ldr	r3, [r7, #24]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3724      	adds	r7, #36	@ 0x24
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	58024400 	.word	0x58024400
 800d00c:	03d09000 	.word	0x03d09000
 800d010:	003d0900 	.word	0x003d0900
 800d014:	017d7840 	.word	0x017d7840
 800d018:	46000000 	.word	0x46000000
 800d01c:	4c742400 	.word	0x4c742400
 800d020:	4a742400 	.word	0x4a742400
 800d024:	4bbebc20 	.word	0x4bbebc20

0800d028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d02e:	f7ff fe81 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 800d032:	4602      	mov	r2, r0
 800d034:	4b10      	ldr	r3, [pc, #64]	@ (800d078 <HAL_RCC_GetHCLKFreq+0x50>)
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	0a1b      	lsrs	r3, r3, #8
 800d03a:	f003 030f 	and.w	r3, r3, #15
 800d03e:	490f      	ldr	r1, [pc, #60]	@ (800d07c <HAL_RCC_GetHCLKFreq+0x54>)
 800d040:	5ccb      	ldrb	r3, [r1, r3]
 800d042:	f003 031f 	and.w	r3, r3, #31
 800d046:	fa22 f303 	lsr.w	r3, r2, r3
 800d04a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d04c:	4b0a      	ldr	r3, [pc, #40]	@ (800d078 <HAL_RCC_GetHCLKFreq+0x50>)
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	f003 030f 	and.w	r3, r3, #15
 800d054:	4a09      	ldr	r2, [pc, #36]	@ (800d07c <HAL_RCC_GetHCLKFreq+0x54>)
 800d056:	5cd3      	ldrb	r3, [r2, r3]
 800d058:	f003 031f 	and.w	r3, r3, #31
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	fa22 f303 	lsr.w	r3, r2, r3
 800d062:	4a07      	ldr	r2, [pc, #28]	@ (800d080 <HAL_RCC_GetHCLKFreq+0x58>)
 800d064:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d066:	4a07      	ldr	r2, [pc, #28]	@ (800d084 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d06c:	4b04      	ldr	r3, [pc, #16]	@ (800d080 <HAL_RCC_GetHCLKFreq+0x58>)
 800d06e:	681b      	ldr	r3, [r3, #0]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	58024400 	.word	0x58024400
 800d07c:	08015ff8 	.word	0x08015ff8
 800d080:	24000008 	.word	0x24000008
 800d084:	24000004 	.word	0x24000004

0800d088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d08c:	f7ff ffcc 	bl	800d028 <HAL_RCC_GetHCLKFreq>
 800d090:	4602      	mov	r2, r0
 800d092:	4b06      	ldr	r3, [pc, #24]	@ (800d0ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800d094:	69db      	ldr	r3, [r3, #28]
 800d096:	091b      	lsrs	r3, r3, #4
 800d098:	f003 0307 	and.w	r3, r3, #7
 800d09c:	4904      	ldr	r1, [pc, #16]	@ (800d0b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d09e:	5ccb      	ldrb	r3, [r1, r3]
 800d0a0:	f003 031f 	and.w	r3, r3, #31
 800d0a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	58024400 	.word	0x58024400
 800d0b0:	08015ff8 	.word	0x08015ff8

0800d0b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d0b8:	f7ff ffb6 	bl	800d028 <HAL_RCC_GetHCLKFreq>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	4b06      	ldr	r3, [pc, #24]	@ (800d0d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d0c0:	69db      	ldr	r3, [r3, #28]
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	f003 0307 	and.w	r3, r3, #7
 800d0c8:	4904      	ldr	r1, [pc, #16]	@ (800d0dc <HAL_RCC_GetPCLK2Freq+0x28>)
 800d0ca:	5ccb      	ldrb	r3, [r1, r3]
 800d0cc:	f003 031f 	and.w	r3, r3, #31
 800d0d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	58024400 	.word	0x58024400
 800d0dc:	08015ff8 	.word	0x08015ff8

0800d0e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0e4:	b0ca      	sub	sp, #296	@ 0x128
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d104:	2500      	movs	r5, #0
 800d106:	ea54 0305 	orrs.w	r3, r4, r5
 800d10a:	d049      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d112:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d116:	d02f      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d118:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d11c:	d828      	bhi.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d11e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d122:	d01a      	beq.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d124:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d128:	d822      	bhi.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d003      	beq.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d12e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d132:	d007      	beq.n	800d144 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d134:	e01c      	b.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d136:	4bb8      	ldr	r3, [pc, #736]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13a:	4ab7      	ldr	r2, [pc, #732]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d13c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d142:	e01a      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d148:	3308      	adds	r3, #8
 800d14a:	2102      	movs	r1, #2
 800d14c:	4618      	mov	r0, r3
 800d14e:	f001 fc8f 	bl	800ea70 <RCCEx_PLL2_Config>
 800d152:	4603      	mov	r3, r0
 800d154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d158:	e00f      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d15e:	3328      	adds	r3, #40	@ 0x28
 800d160:	2102      	movs	r1, #2
 800d162:	4618      	mov	r0, r3
 800d164:	f001 fd36 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d168:	4603      	mov	r3, r0
 800d16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d16e:	e004      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d176:	e000      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d17a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d182:	4ba5      	ldr	r3, [pc, #660]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d186:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d18e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d190:	4aa1      	ldr	r2, [pc, #644]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d192:	430b      	orrs	r3, r1
 800d194:	6513      	str	r3, [r2, #80]	@ 0x50
 800d196:	e003      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d19c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d1ac:	f04f 0900 	mov.w	r9, #0
 800d1b0:	ea58 0309 	orrs.w	r3, r8, r9
 800d1b4:	d047      	beq.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d82a      	bhi.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d1c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c6:	bf00      	nop
 800d1c8:	0800d1dd 	.word	0x0800d1dd
 800d1cc:	0800d1eb 	.word	0x0800d1eb
 800d1d0:	0800d201 	.word	0x0800d201
 800d1d4:	0800d21f 	.word	0x0800d21f
 800d1d8:	0800d21f 	.word	0x0800d21f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1dc:	4b8e      	ldr	r3, [pc, #568]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e0:	4a8d      	ldr	r2, [pc, #564]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d1e8:	e01a      	b.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1ee:	3308      	adds	r3, #8
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f001 fc3c 	bl	800ea70 <RCCEx_PLL2_Config>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d1fe:	e00f      	b.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d204:	3328      	adds	r3, #40	@ 0x28
 800d206:	2100      	movs	r1, #0
 800d208:	4618      	mov	r0, r3
 800d20a:	f001 fce3 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d20e:	4603      	mov	r3, r0
 800d210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d214:	e004      	b.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d21c:	e000      	b.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d21e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d228:	4b7b      	ldr	r3, [pc, #492]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d22c:	f023 0107 	bic.w	r1, r3, #7
 800d230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d236:	4a78      	ldr	r2, [pc, #480]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d238:	430b      	orrs	r3, r1
 800d23a:	6513      	str	r3, [r2, #80]	@ 0x50
 800d23c:	e003      	b.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d23e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d252:	f04f 0b00 	mov.w	fp, #0
 800d256:	ea5a 030b 	orrs.w	r3, sl, fp
 800d25a:	d04c      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d266:	d030      	beq.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d26c:	d829      	bhi.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d26e:	2bc0      	cmp	r3, #192	@ 0xc0
 800d270:	d02d      	beq.n	800d2ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d272:	2bc0      	cmp	r3, #192	@ 0xc0
 800d274:	d825      	bhi.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d276:	2b80      	cmp	r3, #128	@ 0x80
 800d278:	d018      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d27a:	2b80      	cmp	r3, #128	@ 0x80
 800d27c:	d821      	bhi.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d282:	2b40      	cmp	r3, #64	@ 0x40
 800d284:	d007      	beq.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d286:	e01c      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d288:	4b63      	ldr	r3, [pc, #396]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d28c:	4a62      	ldr	r2, [pc, #392]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d28e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d294:	e01c      	b.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d29a:	3308      	adds	r3, #8
 800d29c:	2100      	movs	r1, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f001 fbe6 	bl	800ea70 <RCCEx_PLL2_Config>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d2aa:	e011      	b.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2b0:	3328      	adds	r3, #40	@ 0x28
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f001 fc8d 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d2c0:	e006      	b.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2c8:	e002      	b.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d2ca:	bf00      	nop
 800d2cc:	e000      	b.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d2ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d2d8:	4b4f      	ldr	r3, [pc, #316]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2e6:	4a4c      	ldr	r2, [pc, #304]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2e8:	430b      	orrs	r3, r1
 800d2ea:	6513      	str	r3, [r2, #80]	@ 0x50
 800d2ec:	e003      	b.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d302:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d306:	2300      	movs	r3, #0
 800d308:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d30c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d310:	460b      	mov	r3, r1
 800d312:	4313      	orrs	r3, r2
 800d314:	d053      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d31a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d31e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d322:	d035      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d324:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d328:	d82e      	bhi.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d32a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d32e:	d031      	beq.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d330:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d334:	d828      	bhi.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d33a:	d01a      	beq.n	800d372 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d33c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d340:	d822      	bhi.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d34a:	d007      	beq.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d34c:	e01c      	b.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d34e:	4b32      	ldr	r3, [pc, #200]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d352:	4a31      	ldr	r2, [pc, #196]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d35a:	e01c      	b.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d360:	3308      	adds	r3, #8
 800d362:	2100      	movs	r1, #0
 800d364:	4618      	mov	r0, r3
 800d366:	f001 fb83 	bl	800ea70 <RCCEx_PLL2_Config>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d370:	e011      	b.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d376:	3328      	adds	r3, #40	@ 0x28
 800d378:	2100      	movs	r1, #0
 800d37a:	4618      	mov	r0, r3
 800d37c:	f001 fc2a 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d380:	4603      	mov	r3, r0
 800d382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d386:	e006      	b.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d38e:	e002      	b.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d390:	bf00      	nop
 800d392:	e000      	b.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d394:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10b      	bne.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d39e:	4b1e      	ldr	r3, [pc, #120]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d3ae:	4a1a      	ldr	r2, [pc, #104]	@ (800d418 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3b0:	430b      	orrs	r3, r1
 800d3b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d3b4:	e003      	b.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d3ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d3d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	d056      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d3e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d3ea:	d038      	beq.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d3ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d3f0:	d831      	bhi.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d3f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d3f6:	d034      	beq.n	800d462 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d3f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d3fc:	d82b      	bhi.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d3fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d402:	d01d      	beq.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d408:	d825      	bhi.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d006      	beq.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d40e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d412:	d00a      	beq.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d414:	e01f      	b.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d416:	bf00      	nop
 800d418:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d41c:	4ba2      	ldr	r3, [pc, #648]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d420:	4aa1      	ldr	r2, [pc, #644]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d428:	e01c      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d42e:	3308      	adds	r3, #8
 800d430:	2100      	movs	r1, #0
 800d432:	4618      	mov	r0, r3
 800d434:	f001 fb1c 	bl	800ea70 <RCCEx_PLL2_Config>
 800d438:	4603      	mov	r3, r0
 800d43a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d43e:	e011      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d444:	3328      	adds	r3, #40	@ 0x28
 800d446:	2100      	movs	r1, #0
 800d448:	4618      	mov	r0, r3
 800d44a:	f001 fbc3 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d44e:	4603      	mov	r3, r0
 800d450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d454:	e006      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d45c:	e002      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d45e:	bf00      	nop
 800d460:	e000      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d462:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10b      	bne.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d46c:	4b8e      	ldr	r3, [pc, #568]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d46e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d470:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d478:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d47c:	4a8a      	ldr	r2, [pc, #552]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d47e:	430b      	orrs	r3, r1
 800d480:	6593      	str	r3, [r2, #88]	@ 0x58
 800d482:	e003      	b.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d498:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d49c:	2300      	movs	r3, #0
 800d49e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	d03a      	beq.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4b2:	2b30      	cmp	r3, #48	@ 0x30
 800d4b4:	d01f      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d4b6:	2b30      	cmp	r3, #48	@ 0x30
 800d4b8:	d819      	bhi.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d4ba:	2b20      	cmp	r3, #32
 800d4bc:	d00c      	beq.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	d815      	bhi.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d019      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d4c6:	2b10      	cmp	r3, #16
 800d4c8:	d111      	bne.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4ca:	4b77      	ldr	r3, [pc, #476]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ce:	4a76      	ldr	r2, [pc, #472]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d4d6:	e011      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4dc:	3308      	adds	r3, #8
 800d4de:	2102      	movs	r1, #2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f001 fac5 	bl	800ea70 <RCCEx_PLL2_Config>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d4ec:	e006      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4f4:	e002      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d4f6:	bf00      	nop
 800d4f8:	e000      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d4fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10a      	bne.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d504:	4b68      	ldr	r3, [pc, #416]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d508:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d512:	4a65      	ldr	r2, [pc, #404]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d514:	430b      	orrs	r3, r1
 800d516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d518:	e003      	b.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d52e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d532:	2300      	movs	r3, #0
 800d534:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d538:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d53c:	460b      	mov	r3, r1
 800d53e:	4313      	orrs	r3, r2
 800d540:	d051      	beq.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d54c:	d035      	beq.n	800d5ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d54e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d552:	d82e      	bhi.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d554:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d558:	d031      	beq.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d55a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d55e:	d828      	bhi.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d564:	d01a      	beq.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d56a:	d822      	bhi.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d003      	beq.n	800d578 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d574:	d007      	beq.n	800d586 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d576:	e01c      	b.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d578:	4b4b      	ldr	r3, [pc, #300]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57c:	4a4a      	ldr	r2, [pc, #296]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d57e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d584:	e01c      	b.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d58a:	3308      	adds	r3, #8
 800d58c:	2100      	movs	r1, #0
 800d58e:	4618      	mov	r0, r3
 800d590:	f001 fa6e 	bl	800ea70 <RCCEx_PLL2_Config>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d59a:	e011      	b.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5a0:	3328      	adds	r3, #40	@ 0x28
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f001 fb15 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d5b0:	e006      	b.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5b8:	e002      	b.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d5ba:	bf00      	nop
 800d5bc:	e000      	b.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d5be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10a      	bne.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d5c8:	4b37      	ldr	r3, [pc, #220]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5d6:	4a34      	ldr	r2, [pc, #208]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5d8:	430b      	orrs	r3, r1
 800d5da:	6513      	str	r3, [r2, #80]	@ 0x50
 800d5dc:	e003      	b.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d5f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d600:	460b      	mov	r3, r1
 800d602:	4313      	orrs	r3, r2
 800d604:	d056      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d60a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d60c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d610:	d033      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d612:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d616:	d82c      	bhi.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d61c:	d02f      	beq.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d61e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d622:	d826      	bhi.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d624:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d628:	d02b      	beq.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d62a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d62e:	d820      	bhi.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d634:	d012      	beq.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d63a:	d81a      	bhi.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d022      	beq.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d644:	d115      	bne.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d64a:	3308      	adds	r3, #8
 800d64c:	2101      	movs	r1, #1
 800d64e:	4618      	mov	r0, r3
 800d650:	f001 fa0e 	bl	800ea70 <RCCEx_PLL2_Config>
 800d654:	4603      	mov	r3, r0
 800d656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d65a:	e015      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d660:	3328      	adds	r3, #40	@ 0x28
 800d662:	2101      	movs	r1, #1
 800d664:	4618      	mov	r0, r3
 800d666:	f001 fab5 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d670:	e00a      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d678:	e006      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d67a:	bf00      	nop
 800d67c:	e004      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d67e:	bf00      	nop
 800d680:	e002      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d682:	bf00      	nop
 800d684:	e000      	b.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d686:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10d      	bne.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d690:	4b05      	ldr	r3, [pc, #20]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d694:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d69c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d69e:	4a02      	ldr	r2, [pc, #8]	@ (800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d6a4:	e006      	b.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d6a6:	bf00      	nop
 800d6a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d6c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d6ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	d055      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d6dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d6e0:	d033      	beq.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d6e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d6e6:	d82c      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6ec:	d02f      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6f2:	d826      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d6f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d6f8:	d02b      	beq.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d6fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d6fe:	d820      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d704:	d012      	beq.n	800d72c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d70a:	d81a      	bhi.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d022      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d714:	d115      	bne.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d71a:	3308      	adds	r3, #8
 800d71c:	2101      	movs	r1, #1
 800d71e:	4618      	mov	r0, r3
 800d720:	f001 f9a6 	bl	800ea70 <RCCEx_PLL2_Config>
 800d724:	4603      	mov	r3, r0
 800d726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d72a:	e015      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d730:	3328      	adds	r3, #40	@ 0x28
 800d732:	2101      	movs	r1, #1
 800d734:	4618      	mov	r0, r3
 800d736:	f001 fa4d 	bl	800ebd4 <RCCEx_PLL3_Config>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d740:	e00a      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d748:	e006      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d74a:	bf00      	nop
 800d74c:	e004      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d74e:	bf00      	nop
 800d750:	e002      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d752:	bf00      	nop
 800d754:	e000      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d756:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10b      	bne.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d760:	4ba3      	ldr	r3, [pc, #652]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d764:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d76c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d770:	4a9f      	ldr	r2, [pc, #636]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d772:	430b      	orrs	r3, r1
 800d774:	6593      	str	r3, [r2, #88]	@ 0x58
 800d776:	e003      	b.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d77c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d78c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d790:	2300      	movs	r3, #0
 800d792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d79a:	460b      	mov	r3, r1
 800d79c:	4313      	orrs	r3, r2
 800d79e:	d037      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7aa:	d00e      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d7ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7b0:	d816      	bhi.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d018      	beq.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d7b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7ba:	d111      	bne.n	800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7bc:	4b8c      	ldr	r3, [pc, #560]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c0:	4a8b      	ldr	r2, [pc, #556]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d7c8:	e00f      	b.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	2101      	movs	r1, #1
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f001 f94c 	bl	800ea70 <RCCEx_PLL2_Config>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d7de:	e004      	b.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d7e6:	e000      	b.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d7e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10a      	bne.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d7f2:	4b7f      	ldr	r3, [pc, #508]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d800:	4a7b      	ldr	r2, [pc, #492]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d802:	430b      	orrs	r3, r1
 800d804:	6513      	str	r3, [r2, #80]	@ 0x50
 800d806:	e003      	b.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d80c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d81c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d820:	2300      	movs	r3, #0
 800d822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d826:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4313      	orrs	r3, r2
 800d82e:	d039      	beq.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d836:	2b03      	cmp	r3, #3
 800d838:	d81c      	bhi.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d83a:	a201      	add	r2, pc, #4	@ (adr r2, 800d840 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d87d 	.word	0x0800d87d
 800d844:	0800d851 	.word	0x0800d851
 800d848:	0800d85f 	.word	0x0800d85f
 800d84c:	0800d87d 	.word	0x0800d87d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d850:	4b67      	ldr	r3, [pc, #412]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d854:	4a66      	ldr	r2, [pc, #408]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d85a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d85c:	e00f      	b.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d862:	3308      	adds	r3, #8
 800d864:	2102      	movs	r1, #2
 800d866:	4618      	mov	r0, r3
 800d868:	f001 f902 	bl	800ea70 <RCCEx_PLL2_Config>
 800d86c:	4603      	mov	r3, r0
 800d86e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d872:	e004      	b.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d87a:	e000      	b.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d87e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10a      	bne.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d886:	4b5a      	ldr	r3, [pc, #360]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d88a:	f023 0103 	bic.w	r1, r3, #3
 800d88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d894:	4a56      	ldr	r2, [pc, #344]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d896:	430b      	orrs	r3, r1
 800d898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d89a:	e003      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d89c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d8b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d8ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	f000 809f 	beq.w	800da04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d8c6:	4b4b      	ldr	r3, [pc, #300]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a4a      	ldr	r2, [pc, #296]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d8cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d8d2:	f7f4 fd8d 	bl	80023f0 <HAL_GetTick>
 800d8d6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d8da:	e00b      	b.n	800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8dc:	f7f4 fd88 	bl	80023f0 <HAL_GetTick>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	2b64      	cmp	r3, #100	@ 0x64
 800d8ea:	d903      	bls.n	800d8f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8f2:	e005      	b.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d8f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0ed      	beq.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d904:	2b00      	cmp	r3, #0
 800d906:	d179      	bne.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d908:	4b39      	ldr	r3, [pc, #228]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d90a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d914:	4053      	eors	r3, r2
 800d916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d015      	beq.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d91e:	4b34      	ldr	r3, [pc, #208]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d926:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d92a:	4b31      	ldr	r3, [pc, #196]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d92c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d92e:	4a30      	ldr	r2, [pc, #192]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d934:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d936:	4b2e      	ldr	r3, [pc, #184]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d93a:	4a2d      	ldr	r2, [pc, #180]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d93c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d940:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d942:	4a2b      	ldr	r2, [pc, #172]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d944:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d948:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d94e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d956:	d118      	bne.n	800d98a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d958:	f7f4 fd4a 	bl	80023f0 <HAL_GetTick>
 800d95c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d960:	e00d      	b.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d962:	f7f4 fd45 	bl	80023f0 <HAL_GetTick>
 800d966:	4602      	mov	r2, r0
 800d968:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d96c:	1ad2      	subs	r2, r2, r3
 800d96e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d972:	429a      	cmp	r2, r3
 800d974:	d903      	bls.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d97c:	e005      	b.n	800d98a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d97e:	4b1c      	ldr	r3, [pc, #112]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0eb      	beq.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d98a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d129      	bne.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d99a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d99e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d9a2:	d10e      	bne.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d9a4:	4b12      	ldr	r3, [pc, #72]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d9b4:	091a      	lsrs	r2, r3, #4
 800d9b6:	4b10      	ldr	r3, [pc, #64]	@ (800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9bc:	430b      	orrs	r3, r1
 800d9be:	6113      	str	r3, [r2, #16]
 800d9c0:	e005      	b.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	4a0a      	ldr	r2, [pc, #40]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d9cc:	6113      	str	r3, [r2, #16]
 800d9ce:	4b08      	ldr	r3, [pc, #32]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d9da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9de:	4a04      	ldr	r2, [pc, #16]	@ (800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9e0:	430b      	orrs	r3, r1
 800d9e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9e4:	e00e      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d9ee:	e009      	b.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d9f0:	58024400 	.word	0x58024400
 800d9f4:	58024800 	.word	0x58024800
 800d9f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800da04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f002 0301 	and.w	r3, r2, #1
 800da10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800da14:	2300      	movs	r3, #0
 800da16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800da1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800da1e:	460b      	mov	r3, r1
 800da20:	4313      	orrs	r3, r2
 800da22:	f000 8089 	beq.w	800db38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800da26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da2c:	2b28      	cmp	r3, #40	@ 0x28
 800da2e:	d86b      	bhi.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800da30:	a201      	add	r2, pc, #4	@ (adr r2, 800da38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800da32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da36:	bf00      	nop
 800da38:	0800db11 	.word	0x0800db11
 800da3c:	0800db09 	.word	0x0800db09
 800da40:	0800db09 	.word	0x0800db09
 800da44:	0800db09 	.word	0x0800db09
 800da48:	0800db09 	.word	0x0800db09
 800da4c:	0800db09 	.word	0x0800db09
 800da50:	0800db09 	.word	0x0800db09
 800da54:	0800db09 	.word	0x0800db09
 800da58:	0800dadd 	.word	0x0800dadd
 800da5c:	0800db09 	.word	0x0800db09
 800da60:	0800db09 	.word	0x0800db09
 800da64:	0800db09 	.word	0x0800db09
 800da68:	0800db09 	.word	0x0800db09
 800da6c:	0800db09 	.word	0x0800db09
 800da70:	0800db09 	.word	0x0800db09
 800da74:	0800db09 	.word	0x0800db09
 800da78:	0800daf3 	.word	0x0800daf3
 800da7c:	0800db09 	.word	0x0800db09
 800da80:	0800db09 	.word	0x0800db09
 800da84:	0800db09 	.word	0x0800db09
 800da88:	0800db09 	.word	0x0800db09
 800da8c:	0800db09 	.word	0x0800db09
 800da90:	0800db09 	.word	0x0800db09
 800da94:	0800db09 	.word	0x0800db09
 800da98:	0800db11 	.word	0x0800db11
 800da9c:	0800db09 	.word	0x0800db09
 800daa0:	0800db09 	.word	0x0800db09
 800daa4:	0800db09 	.word	0x0800db09
 800daa8:	0800db09 	.word	0x0800db09
 800daac:	0800db09 	.word	0x0800db09
 800dab0:	0800db09 	.word	0x0800db09
 800dab4:	0800db09 	.word	0x0800db09
 800dab8:	0800db11 	.word	0x0800db11
 800dabc:	0800db09 	.word	0x0800db09
 800dac0:	0800db09 	.word	0x0800db09
 800dac4:	0800db09 	.word	0x0800db09
 800dac8:	0800db09 	.word	0x0800db09
 800dacc:	0800db09 	.word	0x0800db09
 800dad0:	0800db09 	.word	0x0800db09
 800dad4:	0800db09 	.word	0x0800db09
 800dad8:	0800db11 	.word	0x0800db11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae0:	3308      	adds	r3, #8
 800dae2:	2101      	movs	r1, #1
 800dae4:	4618      	mov	r0, r3
 800dae6:	f000 ffc3 	bl	800ea70 <RCCEx_PLL2_Config>
 800daea:	4603      	mov	r3, r0
 800daec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800daf0:	e00f      	b.n	800db12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800daf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf6:	3328      	adds	r3, #40	@ 0x28
 800daf8:	2101      	movs	r1, #1
 800dafa:	4618      	mov	r0, r3
 800dafc:	f001 f86a 	bl	800ebd4 <RCCEx_PLL3_Config>
 800db00:	4603      	mov	r3, r0
 800db02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800db06:	e004      	b.n	800db12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db0e:	e000      	b.n	800db12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800db10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800db1a:	4bbf      	ldr	r3, [pc, #764]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800db1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800db22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800db28:	4abb      	ldr	r2, [pc, #748]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800db2a:	430b      	orrs	r3, r1
 800db2c:	6553      	str	r3, [r2, #84]	@ 0x54
 800db2e:	e003      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800db38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f002 0302 	and.w	r3, r2, #2
 800db44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800db48:	2300      	movs	r3, #0
 800db4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800db4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800db52:	460b      	mov	r3, r1
 800db54:	4313      	orrs	r3, r2
 800db56:	d041      	beq.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800db58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db5e:	2b05      	cmp	r3, #5
 800db60:	d824      	bhi.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800db62:	a201      	add	r2, pc, #4	@ (adr r2, 800db68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800db64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db68:	0800dbb5 	.word	0x0800dbb5
 800db6c:	0800db81 	.word	0x0800db81
 800db70:	0800db97 	.word	0x0800db97
 800db74:	0800dbb5 	.word	0x0800dbb5
 800db78:	0800dbb5 	.word	0x0800dbb5
 800db7c:	0800dbb5 	.word	0x0800dbb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db84:	3308      	adds	r3, #8
 800db86:	2101      	movs	r1, #1
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 ff71 	bl	800ea70 <RCCEx_PLL2_Config>
 800db8e:	4603      	mov	r3, r0
 800db90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800db94:	e00f      	b.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db9a:	3328      	adds	r3, #40	@ 0x28
 800db9c:	2101      	movs	r1, #1
 800db9e:	4618      	mov	r0, r3
 800dba0:	f001 f818 	bl	800ebd4 <RCCEx_PLL3_Config>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800dbaa:	e004      	b.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbb2:	e000      	b.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800dbb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10a      	bne.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dbbe:	4b96      	ldr	r3, [pc, #600]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc2:	f023 0107 	bic.w	r1, r3, #7
 800dbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbcc:	4a92      	ldr	r2, [pc, #584]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbce:	430b      	orrs	r3, r1
 800dbd0:	6553      	str	r3, [r2, #84]	@ 0x54
 800dbd2:	e003      	b.n	800dbdc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f002 0304 	and.w	r3, r2, #4
 800dbe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dbec:	2300      	movs	r3, #0
 800dbee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dbf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	d044      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc04:	2b05      	cmp	r3, #5
 800dc06:	d825      	bhi.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800dc08:	a201      	add	r2, pc, #4	@ (adr r2, 800dc10 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800dc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc0e:	bf00      	nop
 800dc10:	0800dc5d 	.word	0x0800dc5d
 800dc14:	0800dc29 	.word	0x0800dc29
 800dc18:	0800dc3f 	.word	0x0800dc3f
 800dc1c:	0800dc5d 	.word	0x0800dc5d
 800dc20:	0800dc5d 	.word	0x0800dc5d
 800dc24:	0800dc5d 	.word	0x0800dc5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	2101      	movs	r1, #1
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 ff1d 	bl	800ea70 <RCCEx_PLL2_Config>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dc3c:	e00f      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc42:	3328      	adds	r3, #40	@ 0x28
 800dc44:	2101      	movs	r1, #1
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 ffc4 	bl	800ebd4 <RCCEx_PLL3_Config>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dc52:	e004      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc5a:	e000      	b.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800dc5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10b      	bne.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc66:	4b6c      	ldr	r3, [pc, #432]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc6a:	f023 0107 	bic.w	r1, r3, #7
 800dc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc76:	4a68      	ldr	r2, [pc, #416]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc78:	430b      	orrs	r3, r1
 800dc7a:	6593      	str	r3, [r2, #88]	@ 0x58
 800dc7c:	e003      	b.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	f002 0320 	and.w	r3, r2, #32
 800dc92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc96:	2300      	movs	r3, #0
 800dc98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dc9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800dca0:	460b      	mov	r3, r1
 800dca2:	4313      	orrs	r3, r2
 800dca4:	d055      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800dca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dcb2:	d033      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800dcb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dcb8:	d82c      	bhi.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcbe:	d02f      	beq.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800dcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcc4:	d826      	bhi.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dcca:	d02b      	beq.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800dccc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dcd0:	d820      	bhi.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcd6:	d012      	beq.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800dcd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcdc:	d81a      	bhi.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d022      	beq.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800dce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dce6:	d115      	bne.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcec:	3308      	adds	r3, #8
 800dcee:	2100      	movs	r1, #0
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 febd 	bl	800ea70 <RCCEx_PLL2_Config>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dcfc:	e015      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd02:	3328      	adds	r3, #40	@ 0x28
 800dd04:	2102      	movs	r1, #2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 ff64 	bl	800ebd4 <RCCEx_PLL3_Config>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dd12:	e00a      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd1a:	e006      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd1c:	bf00      	nop
 800dd1e:	e004      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd20:	bf00      	nop
 800dd22:	e002      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd24:	bf00      	nop
 800dd26:	e000      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10b      	bne.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd32:	4b39      	ldr	r3, [pc, #228]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd42:	4a35      	ldr	r2, [pc, #212]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd44:	430b      	orrs	r3, r1
 800dd46:	6553      	str	r3, [r2, #84]	@ 0x54
 800dd48:	e003      	b.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800dd5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dd62:	2300      	movs	r3, #0
 800dd64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dd68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	d058      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800dd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd7a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800dd7e:	d033      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800dd80:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800dd84:	d82c      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd8a:	d02f      	beq.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800dd8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd90:	d826      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dd96:	d02b      	beq.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800dd98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dd9c:	d820      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dda2:	d012      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800dda4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dda8:	d81a      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d022      	beq.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ddae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddb2:	d115      	bne.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddb8:	3308      	adds	r3, #8
 800ddba:	2100      	movs	r1, #0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f000 fe57 	bl	800ea70 <RCCEx_PLL2_Config>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ddc8:	e015      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ddca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddce:	3328      	adds	r3, #40	@ 0x28
 800ddd0:	2102      	movs	r1, #2
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 fefe 	bl	800ebd4 <RCCEx_PLL3_Config>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ddde:	e00a      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dde6:	e006      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800dde8:	bf00      	nop
 800ddea:	e004      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ddec:	bf00      	nop
 800ddee:	e002      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ddf0:	bf00      	nop
 800ddf2:	e000      	b.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ddf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10e      	bne.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ddfe:	4b06      	ldr	r3, [pc, #24]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de02:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800de06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de0e:	4a02      	ldr	r2, [pc, #8]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de10:	430b      	orrs	r3, r1
 800de12:	6593      	str	r3, [r2, #88]	@ 0x58
 800de14:	e006      	b.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800de16:	bf00      	nop
 800de18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800de24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800de30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de34:	2300      	movs	r3, #0
 800de36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800de3a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800de3e:	460b      	mov	r3, r1
 800de40:	4313      	orrs	r3, r2
 800de42:	d055      	beq.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800de44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de4c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800de50:	d033      	beq.n	800deba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800de52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800de56:	d82c      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de5c:	d02f      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800de5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de62:	d826      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de64:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800de68:	d02b      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800de6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800de6e:	d820      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de74:	d012      	beq.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800de76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800de7a:	d81a      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d022      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800de80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de84:	d115      	bne.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de8a:	3308      	adds	r3, #8
 800de8c:	2100      	movs	r1, #0
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fdee 	bl	800ea70 <RCCEx_PLL2_Config>
 800de94:	4603      	mov	r3, r0
 800de96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800de9a:	e015      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea0:	3328      	adds	r3, #40	@ 0x28
 800dea2:	2102      	movs	r1, #2
 800dea4:	4618      	mov	r0, r3
 800dea6:	f000 fe95 	bl	800ebd4 <RCCEx_PLL3_Config>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800deb0:	e00a      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800deb8:	e006      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800deba:	bf00      	nop
 800debc:	e004      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800debe:	bf00      	nop
 800dec0:	e002      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800dec2:	bf00      	nop
 800dec4:	e000      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800dec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10b      	bne.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ded0:	4ba1      	ldr	r3, [pc, #644]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ded2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ded4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ded8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dedc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dee0:	4a9d      	ldr	r2, [pc, #628]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dee2:	430b      	orrs	r3, r1
 800dee4:	6593      	str	r3, [r2, #88]	@ 0x58
 800dee6:	e003      	b.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800def0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def8:	f002 0308 	and.w	r3, r2, #8
 800defc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df00:	2300      	movs	r3, #0
 800df02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800df0a:	460b      	mov	r3, r1
 800df0c:	4313      	orrs	r3, r2
 800df0e:	d01e      	beq.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800df10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df1c:	d10c      	bne.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800df1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df22:	3328      	adds	r3, #40	@ 0x28
 800df24:	2102      	movs	r1, #2
 800df26:	4618      	mov	r0, r3
 800df28:	f000 fe54 	bl	800ebd4 <RCCEx_PLL3_Config>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d002      	beq.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800df32:	2301      	movs	r3, #1
 800df34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800df38:	4b87      	ldr	r3, [pc, #540]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df3c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df48:	4a83      	ldr	r2, [pc, #524]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df4a:	430b      	orrs	r3, r1
 800df4c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800df4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f002 0310 	and.w	r3, r2, #16
 800df5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df5e:	2300      	movs	r3, #0
 800df60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800df64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800df68:	460b      	mov	r3, r1
 800df6a:	4313      	orrs	r3, r2
 800df6c:	d01e      	beq.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800df6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df7a:	d10c      	bne.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800df7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df80:	3328      	adds	r3, #40	@ 0x28
 800df82:	2102      	movs	r1, #2
 800df84:	4618      	mov	r0, r3
 800df86:	f000 fe25 	bl	800ebd4 <RCCEx_PLL3_Config>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800df96:	4b70      	ldr	r3, [pc, #448]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800df98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800df9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dfa6:	4a6c      	ldr	r2, [pc, #432]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dfa8:	430b      	orrs	r3, r1
 800dfaa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dfb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dfc2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	d03e      	beq.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800dfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dfd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfd8:	d022      	beq.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800dfda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfde:	d81b      	bhi.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d003      	beq.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800dfe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfe8:	d00b      	beq.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800dfea:	e015      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dff0:	3308      	adds	r3, #8
 800dff2:	2100      	movs	r1, #0
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 fd3b 	bl	800ea70 <RCCEx_PLL2_Config>
 800dffa:	4603      	mov	r3, r0
 800dffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e000:	e00f      	b.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e006:	3328      	adds	r3, #40	@ 0x28
 800e008:	2102      	movs	r1, #2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 fde2 	bl	800ebd4 <RCCEx_PLL3_Config>
 800e010:	4603      	mov	r3, r0
 800e012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e016:	e004      	b.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e01e:	e000      	b.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e026:	2b00      	cmp	r3, #0
 800e028:	d10b      	bne.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e02a:	4b4b      	ldr	r3, [pc, #300]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e02e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e03a:	4a47      	ldr	r2, [pc, #284]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e03c:	430b      	orrs	r3, r1
 800e03e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e040:	e003      	b.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e052:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e056:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e058:	2300      	movs	r3, #0
 800e05a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e05c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e060:	460b      	mov	r3, r1
 800e062:	4313      	orrs	r3, r2
 800e064:	d03b      	beq.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e06e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e072:	d01f      	beq.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e074:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e078:	d818      	bhi.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e07a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e07e:	d003      	beq.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e080:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e084:	d007      	beq.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e086:	e011      	b.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e088:	4b33      	ldr	r3, [pc, #204]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e08c:	4a32      	ldr	r2, [pc, #200]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e08e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e094:	e00f      	b.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e09a:	3328      	adds	r3, #40	@ 0x28
 800e09c:	2101      	movs	r1, #1
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 fd98 	bl	800ebd4 <RCCEx_PLL3_Config>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e0aa:	e004      	b.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0b2:	e000      	b.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e0b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10b      	bne.n	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e0be:	4b26      	ldr	r3, [pc, #152]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0ce:	4a22      	ldr	r2, [pc, #136]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0d0:	430b      	orrs	r3, r1
 800e0d2:	6553      	str	r3, [r2, #84]	@ 0x54
 800e0d4:	e003      	b.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e0ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800e0f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4313      	orrs	r3, r2
 800e0f8:	d034      	beq.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e100:	2b00      	cmp	r3, #0
 800e102:	d003      	beq.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e108:	d007      	beq.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e10a:	e011      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e10c:	4b12      	ldr	r3, [pc, #72]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e110:	4a11      	ldr	r2, [pc, #68]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e118:	e00e      	b.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e11e:	3308      	adds	r3, #8
 800e120:	2102      	movs	r1, #2
 800e122:	4618      	mov	r0, r3
 800e124:	f000 fca4 	bl	800ea70 <RCCEx_PLL2_Config>
 800e128:	4603      	mov	r3, r0
 800e12a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e12e:	e003      	b.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e136:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10d      	bne.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e140:	4b05      	ldr	r3, [pc, #20]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e144:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e14c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e14e:	4a02      	ldr	r2, [pc, #8]	@ (800e158 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e150:	430b      	orrs	r3, r1
 800e152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e154:	e006      	b.n	800e164 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e156:	bf00      	nop
 800e158:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e15c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e170:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e172:	2300      	movs	r3, #0
 800e174:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e176:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e17a:	460b      	mov	r3, r1
 800e17c:	4313      	orrs	r3, r2
 800e17e:	d00c      	beq.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e184:	3328      	adds	r3, #40	@ 0x28
 800e186:	2102      	movs	r1, #2
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 fd23 	bl	800ebd4 <RCCEx_PLL3_Config>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e1a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	d038      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1c2:	d018      	beq.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e1c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1c8:	d811      	bhi.n	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e1ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1ce:	d014      	beq.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e1d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1d4:	d80b      	bhi.n	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d011      	beq.n	800e1fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1de:	d106      	bne.n	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1e0:	4bc3      	ldr	r3, [pc, #780]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e4:	4ac2      	ldr	r2, [pc, #776]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e1e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e1ec:	e008      	b.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e1f4:	e004      	b.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e1f6:	bf00      	nop
 800e1f8:	e002      	b.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e1fa:	bf00      	nop
 800e1fc:	e000      	b.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10b      	bne.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e208:	4bb9      	ldr	r3, [pc, #740]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e20c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e218:	4ab5      	ldr	r2, [pc, #724]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e21a:	430b      	orrs	r3, r1
 800e21c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e21e:	e003      	b.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e230:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e234:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e236:	2300      	movs	r3, #0
 800e238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e23a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e23e:	460b      	mov	r3, r1
 800e240:	4313      	orrs	r3, r2
 800e242:	d009      	beq.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e244:	4baa      	ldr	r3, [pc, #680]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e248:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e252:	4aa7      	ldr	r2, [pc, #668]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e254:	430b      	orrs	r3, r1
 800e256:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e264:	653b      	str	r3, [r7, #80]	@ 0x50
 800e266:	2300      	movs	r3, #0
 800e268:	657b      	str	r3, [r7, #84]	@ 0x54
 800e26a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e26e:	460b      	mov	r3, r1
 800e270:	4313      	orrs	r3, r2
 800e272:	d00a      	beq.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e274:	4b9e      	ldr	r3, [pc, #632]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e276:	691b      	ldr	r3, [r3, #16]
 800e278:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e280:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e284:	4a9a      	ldr	r2, [pc, #616]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e286:	430b      	orrs	r3, r1
 800e288:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e292:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e296:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e298:	2300      	movs	r3, #0
 800e29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e29c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	d009      	beq.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e2a6:	4b92      	ldr	r3, [pc, #584]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2b4:	4a8e      	ldr	r2, [pc, #568]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2b6:	430b      	orrs	r3, r1
 800e2b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e2c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	d00e      	beq.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e2d6:	4b86      	ldr	r3, [pc, #536]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	4a85      	ldr	r2, [pc, #532]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e2e0:	6113      	str	r3, [r2, #16]
 800e2e2:	4b83      	ldr	r3, [pc, #524]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2e4:	6919      	ldr	r1, [r3, #16]
 800e2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e2ee:	4a80      	ldr	r2, [pc, #512]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e2f0:	430b      	orrs	r3, r1
 800e2f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e300:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e302:	2300      	movs	r3, #0
 800e304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e306:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e30a:	460b      	mov	r3, r1
 800e30c:	4313      	orrs	r3, r2
 800e30e:	d009      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e310:	4b77      	ldr	r3, [pc, #476]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e314:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e31e:	4a74      	ldr	r2, [pc, #464]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e320:	430b      	orrs	r3, r1
 800e322:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e330:	633b      	str	r3, [r7, #48]	@ 0x30
 800e332:	2300      	movs	r3, #0
 800e334:	637b      	str	r3, [r7, #52]	@ 0x34
 800e336:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e33a:	460b      	mov	r3, r1
 800e33c:	4313      	orrs	r3, r2
 800e33e:	d00a      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e340:	4b6b      	ldr	r3, [pc, #428]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e344:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e34c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e350:	4a67      	ldr	r2, [pc, #412]	@ (800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e352:	430b      	orrs	r3, r1
 800e354:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	2100      	movs	r1, #0
 800e360:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e368:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e36c:	460b      	mov	r3, r1
 800e36e:	4313      	orrs	r3, r2
 800e370:	d011      	beq.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e376:	3308      	adds	r3, #8
 800e378:	2100      	movs	r1, #0
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 fb78 	bl	800ea70 <RCCEx_PLL2_Config>
 800e380:	4603      	mov	r3, r0
 800e382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d003      	beq.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e38e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39e:	2100      	movs	r1, #0
 800e3a0:	6239      	str	r1, [r7, #32]
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	d011      	beq.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b6:	3308      	adds	r3, #8
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 fb58 	bl	800ea70 <RCCEx_PLL2_Config>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	2100      	movs	r1, #0
 800e3e0:	61b9      	str	r1, [r7, #24]
 800e3e2:	f003 0304 	and.w	r3, r3, #4
 800e3e6:	61fb      	str	r3, [r7, #28]
 800e3e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	4313      	orrs	r3, r2
 800e3f0:	d011      	beq.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3f6:	3308      	adds	r3, #8
 800e3f8:	2102      	movs	r1, #2
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fb38 	bl	800ea70 <RCCEx_PLL2_Config>
 800e400:	4603      	mov	r3, r0
 800e402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e40e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41e:	2100      	movs	r1, #0
 800e420:	6139      	str	r1, [r7, #16]
 800e422:	f003 0308 	and.w	r3, r3, #8
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e42c:	460b      	mov	r3, r1
 800e42e:	4313      	orrs	r3, r2
 800e430:	d011      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e436:	3328      	adds	r3, #40	@ 0x28
 800e438:	2100      	movs	r1, #0
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 fbca 	bl	800ebd4 <RCCEx_PLL3_Config>
 800e440:	4603      	mov	r3, r0
 800e442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800e446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d003      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e44e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	2100      	movs	r1, #0
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	f003 0310 	and.w	r3, r3, #16
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e46c:	460b      	mov	r3, r1
 800e46e:	4313      	orrs	r3, r2
 800e470:	d011      	beq.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e476:	3328      	adds	r3, #40	@ 0x28
 800e478:	2101      	movs	r1, #1
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 fbaa 	bl	800ebd4 <RCCEx_PLL3_Config>
 800e480:	4603      	mov	r3, r0
 800e482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d003      	beq.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e48e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	2100      	movs	r1, #0
 800e4a0:	6039      	str	r1, [r7, #0]
 800e4a2:	f003 0320 	and.w	r3, r3, #32
 800e4a6:	607b      	str	r3, [r7, #4]
 800e4a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	d011      	beq.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4b6:	3328      	adds	r3, #40	@ 0x28
 800e4b8:	2102      	movs	r1, #2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 fb8a 	bl	800ebd4 <RCCEx_PLL3_Config>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e4c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800e4d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e000      	b.n	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4f0:	58024400 	.word	0x58024400

0800e4f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e4f8:	f7fe fd96 	bl	800d028 <HAL_RCC_GetHCLKFreq>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	4b06      	ldr	r3, [pc, #24]	@ (800e518 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	091b      	lsrs	r3, r3, #4
 800e504:	f003 0307 	and.w	r3, r3, #7
 800e508:	4904      	ldr	r1, [pc, #16]	@ (800e51c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e50a:	5ccb      	ldrb	r3, [r1, r3]
 800e50c:	f003 031f 	and.w	r3, r3, #31
 800e510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e514:	4618      	mov	r0, r3
 800e516:	bd80      	pop	{r7, pc}
 800e518:	58024400 	.word	0x58024400
 800e51c:	08015ff8 	.word	0x08015ff8

0800e520 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e520:	b480      	push	{r7}
 800e522:	b089      	sub	sp, #36	@ 0x24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e528:	4ba1      	ldr	r3, [pc, #644]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e52c:	f003 0303 	and.w	r3, r3, #3
 800e530:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e532:	4b9f      	ldr	r3, [pc, #636]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e536:	0b1b      	lsrs	r3, r3, #12
 800e538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e53c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e53e:	4b9c      	ldr	r3, [pc, #624]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e542:	091b      	lsrs	r3, r3, #4
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e54a:	4b99      	ldr	r3, [pc, #612]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e54e:	08db      	lsrs	r3, r3, #3
 800e550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	fb02 f303 	mul.w	r3, r2, r3
 800e55a:	ee07 3a90 	vmov	s15, r3
 800e55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e562:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f000 8111 	beq.w	800e790 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	2b02      	cmp	r3, #2
 800e572:	f000 8083 	beq.w	800e67c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	2b02      	cmp	r3, #2
 800e57a:	f200 80a1 	bhi.w	800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d003      	beq.n	800e58c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	2b01      	cmp	r3, #1
 800e588:	d056      	beq.n	800e638 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e58a:	e099      	b.n	800e6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e58c:	4b88      	ldr	r3, [pc, #544]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f003 0320 	and.w	r3, r3, #32
 800e594:	2b00      	cmp	r3, #0
 800e596:	d02d      	beq.n	800e5f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e598:	4b85      	ldr	r3, [pc, #532]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	08db      	lsrs	r3, r3, #3
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	4a84      	ldr	r2, [pc, #528]	@ (800e7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800e5a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	ee07 3a90 	vmov	s15, r3
 800e5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	ee07 3a90 	vmov	s15, r3
 800e5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5c2:	4b7b      	ldr	r3, [pc, #492]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5ca:	ee07 3a90 	vmov	s15, r3
 800e5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e5f2:	e087      	b.n	800e704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	ee07 3a90 	vmov	s15, r3
 800e5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e7bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e606:	4b6a      	ldr	r3, [pc, #424]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e60e:	ee07 3a90 	vmov	s15, r3
 800e612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e616:	ed97 6a03 	vldr	s12, [r7, #12]
 800e61a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e636:	e065      	b.n	800e704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	ee07 3a90 	vmov	s15, r3
 800e63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e642:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e64a:	4b59      	ldr	r3, [pc, #356]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e652:	ee07 3a90 	vmov	s15, r3
 800e656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e65a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e65e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e66a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e67a:	e043      	b.n	800e704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	ee07 3a90 	vmov	s15, r3
 800e682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e686:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e68e:	4b48      	ldr	r3, [pc, #288]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e696:	ee07 3a90 	vmov	s15, r3
 800e69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e69e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6be:	e021      	b.n	800e704 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	ee07 3a90 	vmov	s15, r3
 800e6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6d2:	4b37      	ldr	r3, [pc, #220]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6da:	ee07 3a90 	vmov	s15, r3
 800e6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e702:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e704:	4b2a      	ldr	r3, [pc, #168]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e708:	0a5b      	lsrs	r3, r3, #9
 800e70a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e70e:	ee07 3a90 	vmov	s15, r3
 800e712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e716:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e71a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e71e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e72a:	ee17 2a90 	vmov	r2, s15
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e732:	4b1f      	ldr	r3, [pc, #124]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e736:	0c1b      	lsrs	r3, r3, #16
 800e738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e73c:	ee07 3a90 	vmov	s15, r3
 800e740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e744:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e758:	ee17 2a90 	vmov	r2, s15
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e760:	4b13      	ldr	r3, [pc, #76]	@ (800e7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e764:	0e1b      	lsrs	r3, r3, #24
 800e766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e76a:	ee07 3a90 	vmov	s15, r3
 800e76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e77a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e77e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e786:	ee17 2a90 	vmov	r2, s15
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e78e:	e008      	b.n	800e7a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	609a      	str	r2, [r3, #8]
}
 800e7a2:	bf00      	nop
 800e7a4:	3724      	adds	r7, #36	@ 0x24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	58024400 	.word	0x58024400
 800e7b4:	03d09000 	.word	0x03d09000
 800e7b8:	46000000 	.word	0x46000000
 800e7bc:	4c742400 	.word	0x4c742400
 800e7c0:	4a742400 	.word	0x4a742400
 800e7c4:	4bbebc20 	.word	0x4bbebc20

0800e7c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b089      	sub	sp, #36	@ 0x24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e7d0:	4ba1      	ldr	r3, [pc, #644]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d4:	f003 0303 	and.w	r3, r3, #3
 800e7d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e7da:	4b9f      	ldr	r3, [pc, #636]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7de:	0d1b      	lsrs	r3, r3, #20
 800e7e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e7e6:	4b9c      	ldr	r3, [pc, #624]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ea:	0a1b      	lsrs	r3, r3, #8
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e7f2:	4b99      	ldr	r3, [pc, #612]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7f6:	08db      	lsrs	r3, r3, #3
 800e7f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7fc:	693a      	ldr	r2, [r7, #16]
 800e7fe:	fb02 f303 	mul.w	r3, r2, r3
 800e802:	ee07 3a90 	vmov	s15, r3
 800e806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e80a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 8111 	beq.w	800ea38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	2b02      	cmp	r3, #2
 800e81a:	f000 8083 	beq.w	800e924 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	2b02      	cmp	r3, #2
 800e822:	f200 80a1 	bhi.w	800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e826:	69bb      	ldr	r3, [r7, #24]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d003      	beq.n	800e834 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d056      	beq.n	800e8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e832:	e099      	b.n	800e968 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e834:	4b88      	ldr	r3, [pc, #544]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f003 0320 	and.w	r3, r3, #32
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d02d      	beq.n	800e89c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e840:	4b85      	ldr	r3, [pc, #532]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	08db      	lsrs	r3, r3, #3
 800e846:	f003 0303 	and.w	r3, r3, #3
 800e84a:	4a84      	ldr	r2, [pc, #528]	@ (800ea5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e84c:	fa22 f303 	lsr.w	r3, r2, r3
 800e850:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	ee07 3a90 	vmov	s15, r3
 800e858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	ee07 3a90 	vmov	s15, r3
 800e862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e86a:	4b7b      	ldr	r3, [pc, #492]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e872:	ee07 3a90 	vmov	s15, r3
 800e876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e87a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e87e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ea60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e88a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e892:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e89a:	e087      	b.n	800e9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	ee07 3a90 	vmov	s15, r3
 800e8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ea64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e8aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8ae:	4b6a      	ldr	r3, [pc, #424]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8b6:	ee07 3a90 	vmov	s15, r3
 800e8ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8be:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ea60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8de:	e065      	b.n	800e9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	ee07 3a90 	vmov	s15, r3
 800e8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ea68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e8ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8f2:	4b59      	ldr	r3, [pc, #356]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8fa:	ee07 3a90 	vmov	s15, r3
 800e8fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e902:	ed97 6a03 	vldr	s12, [r7, #12]
 800e906:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ea60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e90a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e90e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e91a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e91e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e922:	e043      	b.n	800e9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	ee07 3a90 	vmov	s15, r3
 800e92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e92e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ea6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e936:	4b48      	ldr	r3, [pc, #288]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e93a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e93e:	ee07 3a90 	vmov	s15, r3
 800e942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e946:	ed97 6a03 	vldr	s12, [r7, #12]
 800e94a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ea60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e94e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e95a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e966:	e021      	b.n	800e9ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	ee07 3a90 	vmov	s15, r3
 800e96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e972:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ea68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e97a:	4b37      	ldr	r3, [pc, #220]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e982:	ee07 3a90 	vmov	s15, r3
 800e986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e98a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e98e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ea60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e99a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e9aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e9ac:	4b2a      	ldr	r3, [pc, #168]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9b0:	0a5b      	lsrs	r3, r3, #9
 800e9b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9b6:	ee07 3a90 	vmov	s15, r3
 800e9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9d2:	ee17 2a90 	vmov	r2, s15
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e9da:	4b1f      	ldr	r3, [pc, #124]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9de:	0c1b      	lsrs	r3, r3, #16
 800e9e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9e4:	ee07 3a90 	vmov	s15, r3
 800e9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e9f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea00:	ee17 2a90 	vmov	r2, s15
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ea08:	4b13      	ldr	r3, [pc, #76]	@ (800ea58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ea0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea0c:	0e1b      	lsrs	r3, r3, #24
 800ea0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea12:	ee07 3a90 	vmov	s15, r3
 800ea16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea22:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea2e:	ee17 2a90 	vmov	r2, s15
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ea36:	e008      	b.n	800ea4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	609a      	str	r2, [r3, #8]
}
 800ea4a:	bf00      	nop
 800ea4c:	3724      	adds	r7, #36	@ 0x24
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	58024400 	.word	0x58024400
 800ea5c:	03d09000 	.word	0x03d09000
 800ea60:	46000000 	.word	0x46000000
 800ea64:	4c742400 	.word	0x4c742400
 800ea68:	4a742400 	.word	0x4a742400
 800ea6c:	4bbebc20 	.word	0x4bbebc20

0800ea70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ea7e:	4b53      	ldr	r3, [pc, #332]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800ea80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea82:	f003 0303 	and.w	r3, r3, #3
 800ea86:	2b03      	cmp	r3, #3
 800ea88:	d101      	bne.n	800ea8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	e099      	b.n	800ebc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ea8e:	4b4f      	ldr	r3, [pc, #316]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4a4e      	ldr	r2, [pc, #312]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800ea94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ea98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea9a:	f7f3 fca9 	bl	80023f0 <HAL_GetTick>
 800ea9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eaa0:	e008      	b.n	800eab4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eaa2:	f7f3 fca5 	bl	80023f0 <HAL_GetTick>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d901      	bls.n	800eab4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e086      	b.n	800ebc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eab4:	4b45      	ldr	r3, [pc, #276]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1f0      	bne.n	800eaa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800eac0:	4b42      	ldr	r3, [pc, #264]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eac4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	031b      	lsls	r3, r3, #12
 800eace:	493f      	ldr	r1, [pc, #252]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800ead0:	4313      	orrs	r3, r2
 800ead2:	628b      	str	r3, [r1, #40]	@ 0x28
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	3b01      	subs	r3, #1
 800eada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	025b      	lsls	r3, r3, #9
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	431a      	orrs	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	041b      	lsls	r3, r3, #16
 800eaf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	691b      	ldr	r3, [r3, #16]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	061b      	lsls	r3, r3, #24
 800eb00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800eb04:	4931      	ldr	r1, [pc, #196]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb06:	4313      	orrs	r3, r2
 800eb08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800eb0a:	4b30      	ldr	r3, [pc, #192]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	492d      	ldr	r1, [pc, #180]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800eb1c:	4b2b      	ldr	r3, [pc, #172]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb20:	f023 0220 	bic.w	r2, r3, #32
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	4928      	ldr	r1, [pc, #160]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800eb2e:	4b27      	ldr	r3, [pc, #156]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb32:	4a26      	ldr	r2, [pc, #152]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb34:	f023 0310 	bic.w	r3, r3, #16
 800eb38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800eb3a:	4b24      	ldr	r3, [pc, #144]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb3e:	4b24      	ldr	r3, [pc, #144]	@ (800ebd0 <RCCEx_PLL2_Config+0x160>)
 800eb40:	4013      	ands	r3, r2
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	69d2      	ldr	r2, [r2, #28]
 800eb46:	00d2      	lsls	r2, r2, #3
 800eb48:	4920      	ldr	r1, [pc, #128]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800eb4e:	4b1f      	ldr	r3, [pc, #124]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb52:	4a1e      	ldr	r2, [pc, #120]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb54:	f043 0310 	orr.w	r3, r3, #16
 800eb58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800eb60:	4b1a      	ldr	r3, [pc, #104]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb64:	4a19      	ldr	r2, [pc, #100]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eb6c:	e00f      	b.n	800eb8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d106      	bne.n	800eb82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800eb74:	4b15      	ldr	r3, [pc, #84]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb78:	4a14      	ldr	r2, [pc, #80]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800eb80:	e005      	b.n	800eb8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800eb82:	4b12      	ldr	r3, [pc, #72]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb86:	4a11      	ldr	r2, [pc, #68]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eb8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800eb8e:	4b0f      	ldr	r3, [pc, #60]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a0e      	ldr	r2, [pc, #56]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800eb94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800eb98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb9a:	f7f3 fc29 	bl	80023f0 <HAL_GetTick>
 800eb9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eba0:	e008      	b.n	800ebb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800eba2:	f7f3 fc25 	bl	80023f0 <HAL_GetTick>
 800eba6:	4602      	mov	r2, r0
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d901      	bls.n	800ebb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	e006      	b.n	800ebc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ebb4:	4b05      	ldr	r3, [pc, #20]	@ (800ebcc <RCCEx_PLL2_Config+0x15c>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d0f0      	beq.n	800eba2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ebc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3710      	adds	r7, #16
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	58024400 	.word	0x58024400
 800ebd0:	ffff0007 	.word	0xffff0007

0800ebd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ebe2:	4b53      	ldr	r3, [pc, #332]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ebe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe6:	f003 0303 	and.w	r3, r3, #3
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d101      	bne.n	800ebf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	e099      	b.n	800ed26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ebf2:	4b4f      	ldr	r3, [pc, #316]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4a4e      	ldr	r2, [pc, #312]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ebf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ebfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebfe:	f7f3 fbf7 	bl	80023f0 <HAL_GetTick>
 800ec02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ec04:	e008      	b.n	800ec18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ec06:	f7f3 fbf3 	bl	80023f0 <HAL_GetTick>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d901      	bls.n	800ec18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ec14:	2303      	movs	r3, #3
 800ec16:	e086      	b.n	800ed26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ec18:	4b45      	ldr	r3, [pc, #276]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1f0      	bne.n	800ec06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ec24:	4b42      	ldr	r3, [pc, #264]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec28:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	051b      	lsls	r3, r3, #20
 800ec32:	493f      	ldr	r1, [pc, #252]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec34:	4313      	orrs	r3, r2
 800ec36:	628b      	str	r3, [r1, #40]	@ 0x28
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	3b01      	subs	r3, #1
 800ec48:	025b      	lsls	r3, r3, #9
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	431a      	orrs	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	68db      	ldr	r3, [r3, #12]
 800ec52:	3b01      	subs	r3, #1
 800ec54:	041b      	lsls	r3, r3, #16
 800ec56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ec5a:	431a      	orrs	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	691b      	ldr	r3, [r3, #16]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	061b      	lsls	r3, r3, #24
 800ec64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ec68:	4931      	ldr	r1, [pc, #196]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ec6e:	4b30      	ldr	r3, [pc, #192]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	492d      	ldr	r1, [pc, #180]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ec80:	4b2b      	ldr	r3, [pc, #172]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec84:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	699b      	ldr	r3, [r3, #24]
 800ec8c:	4928      	ldr	r1, [pc, #160]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ec92:	4b27      	ldr	r3, [pc, #156]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec96:	4a26      	ldr	r2, [pc, #152]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ec98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ec9e:	4b24      	ldr	r3, [pc, #144]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800eca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eca2:	4b24      	ldr	r3, [pc, #144]	@ (800ed34 <RCCEx_PLL3_Config+0x160>)
 800eca4:	4013      	ands	r3, r2
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	69d2      	ldr	r2, [r2, #28]
 800ecaa:	00d2      	lsls	r2, r2, #3
 800ecac:	4920      	ldr	r1, [pc, #128]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ecb2:	4b1f      	ldr	r3, [pc, #124]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb6:	4a1e      	ldr	r2, [pc, #120]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ecbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d106      	bne.n	800ecd2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ecc4:	4b1a      	ldr	r3, [pc, #104]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc8:	4a19      	ldr	r2, [pc, #100]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ecce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ecd0:	e00f      	b.n	800ecf2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d106      	bne.n	800ece6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ecd8:	4b15      	ldr	r3, [pc, #84]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecdc:	4a14      	ldr	r2, [pc, #80]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ece2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ece4:	e005      	b.n	800ecf2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ece6:	4b12      	ldr	r3, [pc, #72]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ece8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecea:	4a11      	ldr	r2, [pc, #68]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ecf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ecf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a0e      	ldr	r2, [pc, #56]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ecf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ecfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ecfe:	f7f3 fb77 	bl	80023f0 <HAL_GetTick>
 800ed02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ed04:	e008      	b.n	800ed18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ed06:	f7f3 fb73 	bl	80023f0 <HAL_GetTick>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d901      	bls.n	800ed18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	e006      	b.n	800ed26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ed18:	4b05      	ldr	r3, [pc, #20]	@ (800ed30 <RCCEx_PLL3_Config+0x15c>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d0f0      	beq.n	800ed06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	58024400 	.word	0x58024400
 800ed34:	ffff0007 	.word	0xffff0007

0800ed38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed46:	2301      	movs	r3, #1
 800ed48:	e10f      	b.n	800ef6a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a87      	ldr	r2, [pc, #540]	@ (800ef74 <HAL_SPI_Init+0x23c>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d00f      	beq.n	800ed7a <HAL_SPI_Init+0x42>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4a86      	ldr	r2, [pc, #536]	@ (800ef78 <HAL_SPI_Init+0x240>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d00a      	beq.n	800ed7a <HAL_SPI_Init+0x42>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a84      	ldr	r2, [pc, #528]	@ (800ef7c <HAL_SPI_Init+0x244>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d005      	beq.n	800ed7a <HAL_SPI_Init+0x42>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	2b0f      	cmp	r3, #15
 800ed74:	d901      	bls.n	800ed7a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	e0f7      	b.n	800ef6a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 f900 	bl	800ef80 <SPI_GetPacketSize>
 800ed80:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a7b      	ldr	r2, [pc, #492]	@ (800ef74 <HAL_SPI_Init+0x23c>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d00c      	beq.n	800eda6 <HAL_SPI_Init+0x6e>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a79      	ldr	r2, [pc, #484]	@ (800ef78 <HAL_SPI_Init+0x240>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d007      	beq.n	800eda6 <HAL_SPI_Init+0x6e>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a78      	ldr	r2, [pc, #480]	@ (800ef7c <HAL_SPI_Init+0x244>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d002      	beq.n	800eda6 <HAL_SPI_Init+0x6e>
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2b08      	cmp	r3, #8
 800eda4:	d811      	bhi.n	800edca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800edaa:	4a72      	ldr	r2, [pc, #456]	@ (800ef74 <HAL_SPI_Init+0x23c>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d009      	beq.n	800edc4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a70      	ldr	r2, [pc, #448]	@ (800ef78 <HAL_SPI_Init+0x240>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d004      	beq.n	800edc4 <HAL_SPI_Init+0x8c>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a6f      	ldr	r2, [pc, #444]	@ (800ef7c <HAL_SPI_Init+0x244>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d104      	bne.n	800edce <HAL_SPI_Init+0x96>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b10      	cmp	r3, #16
 800edc8:	d901      	bls.n	800edce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e0cd      	b.n	800ef6a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d106      	bne.n	800ede8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7f2 fe80 	bl	8001ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2202      	movs	r2, #2
 800edec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f022 0201 	bic.w	r2, r2, #1
 800edfe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ee0a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ee14:	d119      	bne.n	800ee4a <HAL_SPI_Init+0x112>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee1e:	d103      	bne.n	800ee28 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d008      	beq.n	800ee3a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10c      	bne.n	800ee4a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee38:	d107      	bne.n	800ee4a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ee48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d00f      	beq.n	800ee76 <HAL_SPI_Init+0x13e>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	2b06      	cmp	r3, #6
 800ee5c:	d90b      	bls.n	800ee76 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	430a      	orrs	r2, r1
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	e007      	b.n	800ee86 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ee84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	69da      	ldr	r2, [r3, #28]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	431a      	orrs	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee98:	ea42 0103 	orr.w	r1, r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	68da      	ldr	r2, [r3, #12]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	430a      	orrs	r2, r1
 800eea6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb0:	431a      	orrs	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	699b      	ldr	r3, [r3, #24]
 800eebc:	431a      	orrs	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	691b      	ldr	r3, [r3, #16]
 800eec2:	431a      	orrs	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	695b      	ldr	r3, [r3, #20]
 800eec8:	431a      	orrs	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	431a      	orrs	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	431a      	orrs	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeda:	431a      	orrs	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	431a      	orrs	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eee6:	ea42 0103 	orr.w	r1, r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	430a      	orrs	r2, r1
 800eef4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d113      	bne.n	800ef26 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef10:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ef24:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f022 0201 	bic.w	r2, r2, #1
 800ef34:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00a      	beq.n	800ef58 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	430a      	orrs	r2, r1
 800ef56:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2201      	movs	r2, #1
 800ef64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	40013000 	.word	0x40013000
 800ef78:	40003800 	.word	0x40003800
 800ef7c:	40003c00 	.word	0x40003c00

0800ef80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b085      	sub	sp, #20
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef8c:	095b      	lsrs	r3, r3, #5
 800ef8e:	3301      	adds	r3, #1
 800ef90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	3301      	adds	r3, #1
 800ef98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	3307      	adds	r3, #7
 800ef9e:	08db      	lsrs	r3, r3, #3
 800efa0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	fb02 f303 	mul.w	r3, r2, r3
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3714      	adds	r7, #20
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d101      	bne.n	800efc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efc4:	2301      	movs	r3, #1
 800efc6:	e049      	b.n	800f05c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d106      	bne.n	800efe2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f7f2 fe77 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2202      	movs	r2, #2
 800efe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	3304      	adds	r3, #4
 800eff2:	4619      	mov	r1, r3
 800eff4:	4610      	mov	r0, r2
 800eff6:	f000 fbe9 	bl	800f7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2201      	movs	r2, #1
 800effe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2201      	movs	r2, #1
 800f006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2201      	movs	r2, #1
 800f01e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2201      	movs	r2, #1
 800f026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2201      	movs	r2, #1
 800f036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2201      	movs	r2, #1
 800f04e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f072:	2301      	movs	r3, #1
 800f074:	e049      	b.n	800f10a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d106      	bne.n	800f090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7f2 fdba 	bl	8001c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2202      	movs	r2, #2
 800f094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3304      	adds	r3, #4
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4610      	mov	r0, r2
 800f0a4:	f000 fb92 	bl	800f7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
	...

0800f114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d109      	bne.n	800f138 <HAL_TIM_PWM_Start+0x24>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	bf14      	ite	ne
 800f130:	2301      	movne	r3, #1
 800f132:	2300      	moveq	r3, #0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	e03c      	b.n	800f1b2 <HAL_TIM_PWM_Start+0x9e>
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	d109      	bne.n	800f152 <HAL_TIM_PWM_Start+0x3e>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b01      	cmp	r3, #1
 800f148:	bf14      	ite	ne
 800f14a:	2301      	movne	r3, #1
 800f14c:	2300      	moveq	r3, #0
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	e02f      	b.n	800f1b2 <HAL_TIM_PWM_Start+0x9e>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	2b08      	cmp	r3, #8
 800f156:	d109      	bne.n	800f16c <HAL_TIM_PWM_Start+0x58>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b01      	cmp	r3, #1
 800f162:	bf14      	ite	ne
 800f164:	2301      	movne	r3, #1
 800f166:	2300      	moveq	r3, #0
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	e022      	b.n	800f1b2 <HAL_TIM_PWM_Start+0x9e>
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b0c      	cmp	r3, #12
 800f170:	d109      	bne.n	800f186 <HAL_TIM_PWM_Start+0x72>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b01      	cmp	r3, #1
 800f17c:	bf14      	ite	ne
 800f17e:	2301      	movne	r3, #1
 800f180:	2300      	moveq	r3, #0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	e015      	b.n	800f1b2 <HAL_TIM_PWM_Start+0x9e>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	2b10      	cmp	r3, #16
 800f18a:	d109      	bne.n	800f1a0 <HAL_TIM_PWM_Start+0x8c>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b01      	cmp	r3, #1
 800f196:	bf14      	ite	ne
 800f198:	2301      	movne	r3, #1
 800f19a:	2300      	moveq	r3, #0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	e008      	b.n	800f1b2 <HAL_TIM_PWM_Start+0x9e>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	bf14      	ite	ne
 800f1ac:	2301      	movne	r3, #1
 800f1ae:	2300      	moveq	r3, #0
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e0a1      	b.n	800f2fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d104      	bne.n	800f1ca <HAL_TIM_PWM_Start+0xb6>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f1c8:	e023      	b.n	800f212 <HAL_TIM_PWM_Start+0xfe>
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	d104      	bne.n	800f1da <HAL_TIM_PWM_Start+0xc6>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f1d8:	e01b      	b.n	800f212 <HAL_TIM_PWM_Start+0xfe>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b08      	cmp	r3, #8
 800f1de:	d104      	bne.n	800f1ea <HAL_TIM_PWM_Start+0xd6>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f1e8:	e013      	b.n	800f212 <HAL_TIM_PWM_Start+0xfe>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2b0c      	cmp	r3, #12
 800f1ee:	d104      	bne.n	800f1fa <HAL_TIM_PWM_Start+0xe6>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f1f8:	e00b      	b.n	800f212 <HAL_TIM_PWM_Start+0xfe>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b10      	cmp	r3, #16
 800f1fe:	d104      	bne.n	800f20a <HAL_TIM_PWM_Start+0xf6>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2202      	movs	r2, #2
 800f204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f208:	e003      	b.n	800f212 <HAL_TIM_PWM_Start+0xfe>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2202      	movs	r2, #2
 800f20e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2201      	movs	r2, #1
 800f218:	6839      	ldr	r1, [r7, #0]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 fe4c 	bl	800feb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a38      	ldr	r2, [pc, #224]	@ (800f308 <HAL_TIM_PWM_Start+0x1f4>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d013      	beq.n	800f252 <HAL_TIM_PWM_Start+0x13e>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4a37      	ldr	r2, [pc, #220]	@ (800f30c <HAL_TIM_PWM_Start+0x1f8>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d00e      	beq.n	800f252 <HAL_TIM_PWM_Start+0x13e>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a35      	ldr	r2, [pc, #212]	@ (800f310 <HAL_TIM_PWM_Start+0x1fc>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d009      	beq.n	800f252 <HAL_TIM_PWM_Start+0x13e>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a34      	ldr	r2, [pc, #208]	@ (800f314 <HAL_TIM_PWM_Start+0x200>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d004      	beq.n	800f252 <HAL_TIM_PWM_Start+0x13e>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a32      	ldr	r2, [pc, #200]	@ (800f318 <HAL_TIM_PWM_Start+0x204>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d101      	bne.n	800f256 <HAL_TIM_PWM_Start+0x142>
 800f252:	2301      	movs	r3, #1
 800f254:	e000      	b.n	800f258 <HAL_TIM_PWM_Start+0x144>
 800f256:	2300      	movs	r3, #0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d007      	beq.n	800f26c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f26a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a25      	ldr	r2, [pc, #148]	@ (800f308 <HAL_TIM_PWM_Start+0x1f4>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d022      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f27e:	d01d      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a25      	ldr	r2, [pc, #148]	@ (800f31c <HAL_TIM_PWM_Start+0x208>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d018      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a24      	ldr	r2, [pc, #144]	@ (800f320 <HAL_TIM_PWM_Start+0x20c>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d013      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a22      	ldr	r2, [pc, #136]	@ (800f324 <HAL_TIM_PWM_Start+0x210>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d00e      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	4a1a      	ldr	r2, [pc, #104]	@ (800f30c <HAL_TIM_PWM_Start+0x1f8>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d009      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a1e      	ldr	r2, [pc, #120]	@ (800f328 <HAL_TIM_PWM_Start+0x214>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d004      	beq.n	800f2bc <HAL_TIM_PWM_Start+0x1a8>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a16      	ldr	r2, [pc, #88]	@ (800f310 <HAL_TIM_PWM_Start+0x1fc>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d115      	bne.n	800f2e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	689a      	ldr	r2, [r3, #8]
 800f2c2:	4b1a      	ldr	r3, [pc, #104]	@ (800f32c <HAL_TIM_PWM_Start+0x218>)
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2b06      	cmp	r3, #6
 800f2cc:	d015      	beq.n	800f2fa <HAL_TIM_PWM_Start+0x1e6>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2d4:	d011      	beq.n	800f2fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f042 0201 	orr.w	r2, r2, #1
 800f2e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2e6:	e008      	b.n	800f2fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f042 0201 	orr.w	r2, r2, #1
 800f2f6:	601a      	str	r2, [r3, #0]
 800f2f8:	e000      	b.n	800f2fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3710      	adds	r7, #16
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	40010000 	.word	0x40010000
 800f30c:	40010400 	.word	0x40010400
 800f310:	40014000 	.word	0x40014000
 800f314:	40014400 	.word	0x40014400
 800f318:	40014800 	.word	0x40014800
 800f31c:	40000400 	.word	0x40000400
 800f320:	40000800 	.word	0x40000800
 800f324:	40000c00 	.word	0x40000c00
 800f328:	40001800 	.word	0x40001800
 800f32c:	00010007 	.word	0x00010007

0800f330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f003 0302 	and.w	r3, r3, #2
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d020      	beq.n	800f394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f003 0302 	and.w	r3, r3, #2
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01b      	beq.n	800f394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f06f 0202 	mvn.w	r2, #2
 800f364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	699b      	ldr	r3, [r3, #24]
 800f372:	f003 0303 	and.w	r3, r3, #3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fa08 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f380:	e005      	b.n	800f38e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f9fa 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fa0b 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	f003 0304 	and.w	r3, r3, #4
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d020      	beq.n	800f3e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f003 0304 	and.w	r3, r3, #4
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d01b      	beq.n	800f3e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f06f 0204 	mvn.w	r2, #4
 800f3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2202      	movs	r2, #2
 800f3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d003      	beq.n	800f3ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f9e2 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f3cc:	e005      	b.n	800f3da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f9d4 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f9e5 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	f003 0308 	and.w	r3, r3, #8
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d020      	beq.n	800f42c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f003 0308 	and.w	r3, r3, #8
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d01b      	beq.n	800f42c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f06f 0208 	mvn.w	r2, #8
 800f3fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2204      	movs	r2, #4
 800f402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	69db      	ldr	r3, [r3, #28]
 800f40a:	f003 0303 	and.w	r3, r3, #3
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f9bc 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f418:	e005      	b.n	800f426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 f9ae 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 f9bf 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f003 0310 	and.w	r3, r3, #16
 800f432:	2b00      	cmp	r3, #0
 800f434:	d020      	beq.n	800f478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f003 0310 	and.w	r3, r3, #16
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d01b      	beq.n	800f478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f06f 0210 	mvn.w	r2, #16
 800f448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2208      	movs	r2, #8
 800f44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	69db      	ldr	r3, [r3, #28]
 800f456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d003      	beq.n	800f466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f996 	bl	800f790 <HAL_TIM_IC_CaptureCallback>
 800f464:	e005      	b.n	800f472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f000 f988 	bl	800f77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 f999 	bl	800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00c      	beq.n	800f49c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d007      	beq.n	800f49c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f06f 0201 	mvn.w	r2, #1
 800f494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f966 	bl	800f768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d104      	bne.n	800f4b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00c      	beq.n	800f4ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d007      	beq.n	800f4ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fe33 	bl	8010130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00c      	beq.n	800f4ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d007      	beq.n	800f4ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 fe2b 	bl	8010144 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00c      	beq.n	800f512 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d007      	beq.n	800f512 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f953 	bl	800f7b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	f003 0320 	and.w	r3, r3, #32
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00c      	beq.n	800f536 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f003 0320 	and.w	r3, r3, #32
 800f522:	2b00      	cmp	r3, #0
 800f524:	d007      	beq.n	800f536 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f06f 0220 	mvn.w	r2, #32
 800f52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fdf3 	bl	801011c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f536:	bf00      	nop
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
	...

0800f540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f54c:	2300      	movs	r3, #0
 800f54e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f556:	2b01      	cmp	r3, #1
 800f558:	d101      	bne.n	800f55e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f55a:	2302      	movs	r3, #2
 800f55c:	e0ff      	b.n	800f75e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2201      	movs	r2, #1
 800f562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b14      	cmp	r3, #20
 800f56a:	f200 80f0 	bhi.w	800f74e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f56e:	a201      	add	r2, pc, #4	@ (adr r2, 800f574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f574:	0800f5c9 	.word	0x0800f5c9
 800f578:	0800f74f 	.word	0x0800f74f
 800f57c:	0800f74f 	.word	0x0800f74f
 800f580:	0800f74f 	.word	0x0800f74f
 800f584:	0800f609 	.word	0x0800f609
 800f588:	0800f74f 	.word	0x0800f74f
 800f58c:	0800f74f 	.word	0x0800f74f
 800f590:	0800f74f 	.word	0x0800f74f
 800f594:	0800f64b 	.word	0x0800f64b
 800f598:	0800f74f 	.word	0x0800f74f
 800f59c:	0800f74f 	.word	0x0800f74f
 800f5a0:	0800f74f 	.word	0x0800f74f
 800f5a4:	0800f68b 	.word	0x0800f68b
 800f5a8:	0800f74f 	.word	0x0800f74f
 800f5ac:	0800f74f 	.word	0x0800f74f
 800f5b0:	0800f74f 	.word	0x0800f74f
 800f5b4:	0800f6cd 	.word	0x0800f6cd
 800f5b8:	0800f74f 	.word	0x0800f74f
 800f5bc:	0800f74f 	.word	0x0800f74f
 800f5c0:	0800f74f 	.word	0x0800f74f
 800f5c4:	0800f70d 	.word	0x0800f70d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68b9      	ldr	r1, [r7, #8]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 f99c 	bl	800f90c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	699a      	ldr	r2, [r3, #24]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f042 0208 	orr.w	r2, r2, #8
 800f5e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	699a      	ldr	r2, [r3, #24]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f022 0204 	bic.w	r2, r2, #4
 800f5f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	6999      	ldr	r1, [r3, #24]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	430a      	orrs	r2, r1
 800f604:	619a      	str	r2, [r3, #24]
      break;
 800f606:	e0a5      	b.n	800f754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68b9      	ldr	r1, [r7, #8]
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 fa0c 	bl	800fa2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	699a      	ldr	r2, [r3, #24]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	699a      	ldr	r2, [r3, #24]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6999      	ldr	r1, [r3, #24]
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	691b      	ldr	r3, [r3, #16]
 800f63e:	021a      	lsls	r2, r3, #8
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	430a      	orrs	r2, r1
 800f646:	619a      	str	r2, [r3, #24]
      break;
 800f648:	e084      	b.n	800f754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	68b9      	ldr	r1, [r7, #8]
 800f650:	4618      	mov	r0, r3
 800f652:	f000 fa75 	bl	800fb40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	69da      	ldr	r2, [r3, #28]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f042 0208 	orr.w	r2, r2, #8
 800f664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	69da      	ldr	r2, [r3, #28]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f022 0204 	bic.w	r2, r2, #4
 800f674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	69d9      	ldr	r1, [r3, #28]
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	691a      	ldr	r2, [r3, #16]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	430a      	orrs	r2, r1
 800f686:	61da      	str	r2, [r3, #28]
      break;
 800f688:	e064      	b.n	800f754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	4618      	mov	r0, r3
 800f692:	f000 fadd 	bl	800fc50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	69da      	ldr	r2, [r3, #28]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f6a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	69da      	ldr	r2, [r3, #28]
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f6b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	69d9      	ldr	r1, [r3, #28]
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	021a      	lsls	r2, r3, #8
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	430a      	orrs	r2, r1
 800f6c8:	61da      	str	r2, [r3, #28]
      break;
 800f6ca:	e043      	b.n	800f754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	68b9      	ldr	r1, [r7, #8]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 fb26 	bl	800fd24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f042 0208 	orr.w	r2, r2, #8
 800f6e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f022 0204 	bic.w	r2, r2, #4
 800f6f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	691a      	ldr	r2, [r3, #16]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f70a:	e023      	b.n	800f754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68b9      	ldr	r1, [r7, #8]
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fb6a 	bl	800fdec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f726:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f736:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	021a      	lsls	r2, r3, #8
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	430a      	orrs	r2, r1
 800f74a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f74c:	e002      	b.n	800f754 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	75fb      	strb	r3, [r7, #23]
      break;
 800f752:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop

0800f768 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f768:	b480      	push	{r7}
 800f76a:	b083      	sub	sp, #12
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f7c0:	bf00      	nop
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b085      	sub	sp, #20
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a43      	ldr	r2, [pc, #268]	@ (800f8ec <TIM_Base_SetConfig+0x120>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d013      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7ea:	d00f      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a40      	ldr	r2, [pc, #256]	@ (800f8f0 <TIM_Base_SetConfig+0x124>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d00b      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4a3f      	ldr	r2, [pc, #252]	@ (800f8f4 <TIM_Base_SetConfig+0x128>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d007      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4a3e      	ldr	r2, [pc, #248]	@ (800f8f8 <TIM_Base_SetConfig+0x12c>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d003      	beq.n	800f80c <TIM_Base_SetConfig+0x40>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a3d      	ldr	r2, [pc, #244]	@ (800f8fc <TIM_Base_SetConfig+0x130>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d108      	bne.n	800f81e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	4313      	orrs	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a32      	ldr	r2, [pc, #200]	@ (800f8ec <TIM_Base_SetConfig+0x120>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d01f      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f82c:	d01b      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a2f      	ldr	r2, [pc, #188]	@ (800f8f0 <TIM_Base_SetConfig+0x124>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d017      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a2e      	ldr	r2, [pc, #184]	@ (800f8f4 <TIM_Base_SetConfig+0x128>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d013      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a2d      	ldr	r2, [pc, #180]	@ (800f8f8 <TIM_Base_SetConfig+0x12c>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d00f      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4a2c      	ldr	r2, [pc, #176]	@ (800f8fc <TIM_Base_SetConfig+0x130>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d00b      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4a2b      	ldr	r2, [pc, #172]	@ (800f900 <TIM_Base_SetConfig+0x134>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d007      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4a2a      	ldr	r2, [pc, #168]	@ (800f904 <TIM_Base_SetConfig+0x138>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d003      	beq.n	800f866 <TIM_Base_SetConfig+0x9a>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4a29      	ldr	r2, [pc, #164]	@ (800f908 <TIM_Base_SetConfig+0x13c>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d108      	bne.n	800f878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f86c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	4313      	orrs	r3, r2
 800f876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	695b      	ldr	r3, [r3, #20]
 800f882:	4313      	orrs	r3, r2
 800f884:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	689a      	ldr	r2, [r3, #8]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a14      	ldr	r2, [pc, #80]	@ (800f8ec <TIM_Base_SetConfig+0x120>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d00f      	beq.n	800f8be <TIM_Base_SetConfig+0xf2>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a16      	ldr	r2, [pc, #88]	@ (800f8fc <TIM_Base_SetConfig+0x130>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d00b      	beq.n	800f8be <TIM_Base_SetConfig+0xf2>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a15      	ldr	r2, [pc, #84]	@ (800f900 <TIM_Base_SetConfig+0x134>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d007      	beq.n	800f8be <TIM_Base_SetConfig+0xf2>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a14      	ldr	r2, [pc, #80]	@ (800f904 <TIM_Base_SetConfig+0x138>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d003      	beq.n	800f8be <TIM_Base_SetConfig+0xf2>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a13      	ldr	r2, [pc, #76]	@ (800f908 <TIM_Base_SetConfig+0x13c>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d103      	bne.n	800f8c6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	691a      	ldr	r2, [r3, #16]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f043 0204 	orr.w	r2, r3, #4
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	601a      	str	r2, [r3, #0]
}
 800f8de:	bf00      	nop
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr
 800f8ea:	bf00      	nop
 800f8ec:	40010000 	.word	0x40010000
 800f8f0:	40000400 	.word	0x40000400
 800f8f4:	40000800 	.word	0x40000800
 800f8f8:	40000c00 	.word	0x40000c00
 800f8fc:	40010400 	.word	0x40010400
 800f900:	40014000 	.word	0x40014000
 800f904:	40014400 	.word	0x40014400
 800f908:	40014800 	.word	0x40014800

0800f90c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b087      	sub	sp, #28
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a1b      	ldr	r3, [r3, #32]
 800f920:	f023 0201 	bic.w	r2, r3, #1
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	699b      	ldr	r3, [r3, #24]
 800f932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f934:	68fa      	ldr	r2, [r7, #12]
 800f936:	4b37      	ldr	r3, [pc, #220]	@ (800fa14 <TIM_OC1_SetConfig+0x108>)
 800f938:	4013      	ands	r3, r2
 800f93a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f023 0303 	bic.w	r3, r3, #3
 800f942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	f023 0302 	bic.w	r3, r3, #2
 800f954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	4313      	orrs	r3, r2
 800f95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a2d      	ldr	r2, [pc, #180]	@ (800fa18 <TIM_OC1_SetConfig+0x10c>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d00f      	beq.n	800f988 <TIM_OC1_SetConfig+0x7c>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4a2c      	ldr	r2, [pc, #176]	@ (800fa1c <TIM_OC1_SetConfig+0x110>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d00b      	beq.n	800f988 <TIM_OC1_SetConfig+0x7c>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a2b      	ldr	r2, [pc, #172]	@ (800fa20 <TIM_OC1_SetConfig+0x114>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d007      	beq.n	800f988 <TIM_OC1_SetConfig+0x7c>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a2a      	ldr	r2, [pc, #168]	@ (800fa24 <TIM_OC1_SetConfig+0x118>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d003      	beq.n	800f988 <TIM_OC1_SetConfig+0x7c>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a29      	ldr	r2, [pc, #164]	@ (800fa28 <TIM_OC1_SetConfig+0x11c>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d10c      	bne.n	800f9a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	f023 0308 	bic.w	r3, r3, #8
 800f98e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	697a      	ldr	r2, [r7, #20]
 800f996:	4313      	orrs	r3, r2
 800f998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	f023 0304 	bic.w	r3, r3, #4
 800f9a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4a1c      	ldr	r2, [pc, #112]	@ (800fa18 <TIM_OC1_SetConfig+0x10c>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d00f      	beq.n	800f9ca <TIM_OC1_SetConfig+0xbe>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4a1b      	ldr	r2, [pc, #108]	@ (800fa1c <TIM_OC1_SetConfig+0x110>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d00b      	beq.n	800f9ca <TIM_OC1_SetConfig+0xbe>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a1a      	ldr	r2, [pc, #104]	@ (800fa20 <TIM_OC1_SetConfig+0x114>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d007      	beq.n	800f9ca <TIM_OC1_SetConfig+0xbe>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a19      	ldr	r2, [pc, #100]	@ (800fa24 <TIM_OC1_SetConfig+0x118>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d003      	beq.n	800f9ca <TIM_OC1_SetConfig+0xbe>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a18      	ldr	r2, [pc, #96]	@ (800fa28 <TIM_OC1_SetConfig+0x11c>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d111      	bne.n	800f9ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f9d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f9d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	693a      	ldr	r2, [r7, #16]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	699b      	ldr	r3, [r3, #24]
 800f9e8:	693a      	ldr	r2, [r7, #16]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	693a      	ldr	r2, [r7, #16]
 800f9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	685a      	ldr	r2, [r3, #4]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	697a      	ldr	r2, [r7, #20]
 800fa06:	621a      	str	r2, [r3, #32]
}
 800fa08:	bf00      	nop
 800fa0a:	371c      	adds	r7, #28
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	fffeff8f 	.word	0xfffeff8f
 800fa18:	40010000 	.word	0x40010000
 800fa1c:	40010400 	.word	0x40010400
 800fa20:	40014000 	.word	0x40014000
 800fa24:	40014400 	.word	0x40014400
 800fa28:	40014800 	.word	0x40014800

0800fa2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b087      	sub	sp, #28
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a1b      	ldr	r3, [r3, #32]
 800fa40:	f023 0210 	bic.w	r2, r3, #16
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	4b34      	ldr	r3, [pc, #208]	@ (800fb28 <TIM_OC2_SetConfig+0xfc>)
 800fa58:	4013      	ands	r3, r2
 800fa5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fa62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	021b      	lsls	r3, r3, #8
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f023 0320 	bic.w	r3, r3, #32
 800fa76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	011b      	lsls	r3, r3, #4
 800fa7e:	697a      	ldr	r2, [r7, #20]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a29      	ldr	r2, [pc, #164]	@ (800fb2c <TIM_OC2_SetConfig+0x100>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d003      	beq.n	800fa94 <TIM_OC2_SetConfig+0x68>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a28      	ldr	r2, [pc, #160]	@ (800fb30 <TIM_OC2_SetConfig+0x104>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d10d      	bne.n	800fab0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	011b      	lsls	r3, r3, #4
 800faa2:	697a      	ldr	r2, [r7, #20]
 800faa4:	4313      	orrs	r3, r2
 800faa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800faae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4a1e      	ldr	r2, [pc, #120]	@ (800fb2c <TIM_OC2_SetConfig+0x100>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d00f      	beq.n	800fad8 <TIM_OC2_SetConfig+0xac>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4a1d      	ldr	r2, [pc, #116]	@ (800fb30 <TIM_OC2_SetConfig+0x104>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d00b      	beq.n	800fad8 <TIM_OC2_SetConfig+0xac>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4a1c      	ldr	r2, [pc, #112]	@ (800fb34 <TIM_OC2_SetConfig+0x108>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d007      	beq.n	800fad8 <TIM_OC2_SetConfig+0xac>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4a1b      	ldr	r2, [pc, #108]	@ (800fb38 <TIM_OC2_SetConfig+0x10c>)
 800facc:	4293      	cmp	r3, r2
 800face:	d003      	beq.n	800fad8 <TIM_OC2_SetConfig+0xac>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4a1a      	ldr	r2, [pc, #104]	@ (800fb3c <TIM_OC2_SetConfig+0x110>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d113      	bne.n	800fb00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	695b      	ldr	r3, [r3, #20]
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	693a      	ldr	r2, [r7, #16]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	693a      	ldr	r2, [r7, #16]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	685a      	ldr	r2, [r3, #4]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	621a      	str	r2, [r3, #32]
}
 800fb1a:	bf00      	nop
 800fb1c:	371c      	adds	r7, #28
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	feff8fff 	.word	0xfeff8fff
 800fb2c:	40010000 	.word	0x40010000
 800fb30:	40010400 	.word	0x40010400
 800fb34:	40014000 	.word	0x40014000
 800fb38:	40014400 	.word	0x40014400
 800fb3c:	40014800 	.word	0x40014800

0800fb40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b087      	sub	sp, #28
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a1b      	ldr	r3, [r3, #32]
 800fb4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a1b      	ldr	r3, [r3, #32]
 800fb54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	69db      	ldr	r3, [r3, #28]
 800fb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	4b33      	ldr	r3, [pc, #204]	@ (800fc38 <TIM_OC3_SetConfig+0xf8>)
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f023 0303 	bic.w	r3, r3, #3
 800fb76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fb88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	021b      	lsls	r3, r3, #8
 800fb90:	697a      	ldr	r2, [r7, #20]
 800fb92:	4313      	orrs	r3, r2
 800fb94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4a28      	ldr	r2, [pc, #160]	@ (800fc3c <TIM_OC3_SetConfig+0xfc>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d003      	beq.n	800fba6 <TIM_OC3_SetConfig+0x66>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4a27      	ldr	r2, [pc, #156]	@ (800fc40 <TIM_OC3_SetConfig+0x100>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d10d      	bne.n	800fbc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fbac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	021b      	lsls	r3, r3, #8
 800fbb4:	697a      	ldr	r2, [r7, #20]
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fbc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4a1d      	ldr	r2, [pc, #116]	@ (800fc3c <TIM_OC3_SetConfig+0xfc>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d00f      	beq.n	800fbea <TIM_OC3_SetConfig+0xaa>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a1c      	ldr	r2, [pc, #112]	@ (800fc40 <TIM_OC3_SetConfig+0x100>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d00b      	beq.n	800fbea <TIM_OC3_SetConfig+0xaa>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a1b      	ldr	r2, [pc, #108]	@ (800fc44 <TIM_OC3_SetConfig+0x104>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d007      	beq.n	800fbea <TIM_OC3_SetConfig+0xaa>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a1a      	ldr	r2, [pc, #104]	@ (800fc48 <TIM_OC3_SetConfig+0x108>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d003      	beq.n	800fbea <TIM_OC3_SetConfig+0xaa>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	4a19      	ldr	r2, [pc, #100]	@ (800fc4c <TIM_OC3_SetConfig+0x10c>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d113      	bne.n	800fc12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fbf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fbf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	011b      	lsls	r3, r3, #4
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	011b      	lsls	r3, r3, #4
 800fc0c:	693a      	ldr	r2, [r7, #16]
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	697a      	ldr	r2, [r7, #20]
 800fc2a:	621a      	str	r2, [r3, #32]
}
 800fc2c:	bf00      	nop
 800fc2e:	371c      	adds	r7, #28
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr
 800fc38:	fffeff8f 	.word	0xfffeff8f
 800fc3c:	40010000 	.word	0x40010000
 800fc40:	40010400 	.word	0x40010400
 800fc44:	40014000 	.word	0x40014000
 800fc48:	40014400 	.word	0x40014400
 800fc4c:	40014800 	.word	0x40014800

0800fc50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6a1b      	ldr	r3, [r3, #32]
 800fc64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	69db      	ldr	r3, [r3, #28]
 800fc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	4b24      	ldr	r3, [pc, #144]	@ (800fd0c <TIM_OC4_SetConfig+0xbc>)
 800fc7c:	4013      	ands	r3, r2
 800fc7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fc86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	021b      	lsls	r3, r3, #8
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	031b      	lsls	r3, r3, #12
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4a19      	ldr	r2, [pc, #100]	@ (800fd10 <TIM_OC4_SetConfig+0xc0>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d00f      	beq.n	800fcd0 <TIM_OC4_SetConfig+0x80>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4a18      	ldr	r2, [pc, #96]	@ (800fd14 <TIM_OC4_SetConfig+0xc4>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d00b      	beq.n	800fcd0 <TIM_OC4_SetConfig+0x80>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4a17      	ldr	r2, [pc, #92]	@ (800fd18 <TIM_OC4_SetConfig+0xc8>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d007      	beq.n	800fcd0 <TIM_OC4_SetConfig+0x80>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4a16      	ldr	r2, [pc, #88]	@ (800fd1c <TIM_OC4_SetConfig+0xcc>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d003      	beq.n	800fcd0 <TIM_OC4_SetConfig+0x80>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4a15      	ldr	r2, [pc, #84]	@ (800fd20 <TIM_OC4_SetConfig+0xd0>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d109      	bne.n	800fce4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fcd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	019b      	lsls	r3, r3, #6
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	685a      	ldr	r2, [r3, #4]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	693a      	ldr	r2, [r7, #16]
 800fcfc:	621a      	str	r2, [r3, #32]
}
 800fcfe:	bf00      	nop
 800fd00:	371c      	adds	r7, #28
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	feff8fff 	.word	0xfeff8fff
 800fd10:	40010000 	.word	0x40010000
 800fd14:	40010400 	.word	0x40010400
 800fd18:	40014000 	.word	0x40014000
 800fd1c:	40014400 	.word	0x40014400
 800fd20:	40014800 	.word	0x40014800

0800fd24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a1b      	ldr	r3, [r3, #32]
 800fd32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6a1b      	ldr	r3, [r3, #32]
 800fd38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	4b21      	ldr	r3, [pc, #132]	@ (800fdd4 <TIM_OC5_SetConfig+0xb0>)
 800fd50:	4013      	ands	r3, r2
 800fd52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fd64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	041b      	lsls	r3, r3, #16
 800fd6c:	693a      	ldr	r2, [r7, #16]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a18      	ldr	r2, [pc, #96]	@ (800fdd8 <TIM_OC5_SetConfig+0xb4>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d00f      	beq.n	800fd9a <TIM_OC5_SetConfig+0x76>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a17      	ldr	r2, [pc, #92]	@ (800fddc <TIM_OC5_SetConfig+0xb8>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00b      	beq.n	800fd9a <TIM_OC5_SetConfig+0x76>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a16      	ldr	r2, [pc, #88]	@ (800fde0 <TIM_OC5_SetConfig+0xbc>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d007      	beq.n	800fd9a <TIM_OC5_SetConfig+0x76>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a15      	ldr	r2, [pc, #84]	@ (800fde4 <TIM_OC5_SetConfig+0xc0>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d003      	beq.n	800fd9a <TIM_OC5_SetConfig+0x76>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a14      	ldr	r2, [pc, #80]	@ (800fde8 <TIM_OC5_SetConfig+0xc4>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d109      	bne.n	800fdae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fda0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	695b      	ldr	r3, [r3, #20]
 800fda6:	021b      	lsls	r3, r3, #8
 800fda8:	697a      	ldr	r2, [r7, #20]
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	697a      	ldr	r2, [r7, #20]
 800fdb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	68fa      	ldr	r2, [r7, #12]
 800fdb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	685a      	ldr	r2, [r3, #4]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	621a      	str	r2, [r3, #32]
}
 800fdc8:	bf00      	nop
 800fdca:	371c      	adds	r7, #28
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr
 800fdd4:	fffeff8f 	.word	0xfffeff8f
 800fdd8:	40010000 	.word	0x40010000
 800fddc:	40010400 	.word	0x40010400
 800fde0:	40014000 	.word	0x40014000
 800fde4:	40014400 	.word	0x40014400
 800fde8:	40014800 	.word	0x40014800

0800fdec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b087      	sub	sp, #28
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a1b      	ldr	r3, [r3, #32]
 800fdfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6a1b      	ldr	r3, [r3, #32]
 800fe00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	4b22      	ldr	r3, [pc, #136]	@ (800fea0 <TIM_OC6_SetConfig+0xb4>)
 800fe18:	4013      	ands	r3, r2
 800fe1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	021b      	lsls	r3, r3, #8
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	4313      	orrs	r3, r2
 800fe26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fe2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	051b      	lsls	r3, r3, #20
 800fe36:	693a      	ldr	r2, [r7, #16]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4a19      	ldr	r2, [pc, #100]	@ (800fea4 <TIM_OC6_SetConfig+0xb8>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d00f      	beq.n	800fe64 <TIM_OC6_SetConfig+0x78>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a18      	ldr	r2, [pc, #96]	@ (800fea8 <TIM_OC6_SetConfig+0xbc>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d00b      	beq.n	800fe64 <TIM_OC6_SetConfig+0x78>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a17      	ldr	r2, [pc, #92]	@ (800feac <TIM_OC6_SetConfig+0xc0>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d007      	beq.n	800fe64 <TIM_OC6_SetConfig+0x78>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4a16      	ldr	r2, [pc, #88]	@ (800feb0 <TIM_OC6_SetConfig+0xc4>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d003      	beq.n	800fe64 <TIM_OC6_SetConfig+0x78>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a15      	ldr	r2, [pc, #84]	@ (800feb4 <TIM_OC6_SetConfig+0xc8>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d109      	bne.n	800fe78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fe6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	695b      	ldr	r3, [r3, #20]
 800fe70:	029b      	lsls	r3, r3, #10
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	697a      	ldr	r2, [r7, #20]
 800fe7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	68fa      	ldr	r2, [r7, #12]
 800fe82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	685a      	ldr	r2, [r3, #4]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	693a      	ldr	r2, [r7, #16]
 800fe90:	621a      	str	r2, [r3, #32]
}
 800fe92:	bf00      	nop
 800fe94:	371c      	adds	r7, #28
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	feff8fff 	.word	0xfeff8fff
 800fea4:	40010000 	.word	0x40010000
 800fea8:	40010400 	.word	0x40010400
 800feac:	40014000 	.word	0x40014000
 800feb0:	40014400 	.word	0x40014400
 800feb4:	40014800 	.word	0x40014800

0800feb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	f003 031f 	and.w	r3, r3, #31
 800feca:	2201      	movs	r2, #1
 800fecc:	fa02 f303 	lsl.w	r3, r2, r3
 800fed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6a1a      	ldr	r2, [r3, #32]
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	43db      	mvns	r3, r3
 800feda:	401a      	ands	r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6a1a      	ldr	r2, [r3, #32]
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	f003 031f 	and.w	r3, r3, #31
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	fa01 f303 	lsl.w	r3, r1, r3
 800fef0:	431a      	orrs	r2, r3
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	621a      	str	r2, [r3, #32]
}
 800fef6:	bf00      	nop
 800fef8:	371c      	adds	r7, #28
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
	...

0800ff04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d101      	bne.n	800ff1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff18:	2302      	movs	r3, #2
 800ff1a:	e06d      	b.n	800fff8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2201      	movs	r2, #1
 800ff20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2202      	movs	r2, #2
 800ff28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a30      	ldr	r2, [pc, #192]	@ (8010004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d004      	beq.n	800ff50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a2f      	ldr	r2, [pc, #188]	@ (8010008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d108      	bne.n	800ff62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ff56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a20      	ldr	r2, [pc, #128]	@ (8010004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d022      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff8e:	d01d      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a1d      	ldr	r2, [pc, #116]	@ (801000c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d018      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a1c      	ldr	r2, [pc, #112]	@ (8010010 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d013      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a1a      	ldr	r2, [pc, #104]	@ (8010014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d00e      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a15      	ldr	r2, [pc, #84]	@ (8010008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d009      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a16      	ldr	r2, [pc, #88]	@ (8010018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d004      	beq.n	800ffcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a15      	ldr	r2, [pc, #84]	@ (801001c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d10c      	bne.n	800ffe6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ffd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68ba      	ldr	r2, [r7, #8]
 800ffe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3714      	adds	r7, #20
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	40010000 	.word	0x40010000
 8010008:	40010400 	.word	0x40010400
 801000c:	40000400 	.word	0x40000400
 8010010:	40000800 	.word	0x40000800
 8010014:	40000c00 	.word	0x40000c00
 8010018:	40001800 	.word	0x40001800
 801001c:	40014000 	.word	0x40014000

08010020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801002a:	2300      	movs	r3, #0
 801002c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010034:	2b01      	cmp	r3, #1
 8010036:	d101      	bne.n	801003c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010038:	2302      	movs	r3, #2
 801003a:	e065      	b.n	8010108 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2201      	movs	r2, #1
 8010040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	4313      	orrs	r3, r2
 8010050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	689b      	ldr	r3, [r3, #8]
 801005c:	4313      	orrs	r3, r2
 801005e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	4313      	orrs	r3, r2
 801006c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4313      	orrs	r3, r2
 801007a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	4313      	orrs	r3, r2
 8010088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	695b      	ldr	r3, [r3, #20]
 8010094:	4313      	orrs	r3, r2
 8010096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100a2:	4313      	orrs	r3, r2
 80100a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	699b      	ldr	r3, [r3, #24]
 80100b0:	041b      	lsls	r3, r3, #16
 80100b2:	4313      	orrs	r3, r2
 80100b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a16      	ldr	r2, [pc, #88]	@ (8010114 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d004      	beq.n	80100ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4a14      	ldr	r2, [pc, #80]	@ (8010118 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d115      	bne.n	80100f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d4:	051b      	lsls	r3, r3, #20
 80100d6:	4313      	orrs	r3, r2
 80100d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	69db      	ldr	r3, [r3, #28]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	6a1b      	ldr	r3, [r3, #32]
 80100f2:	4313      	orrs	r3, r2
 80100f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2200      	movs	r2, #0
 8010102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010106:	2300      	movs	r3, #0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3714      	adds	r7, #20
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	40010000 	.word	0x40010000
 8010118:	40010400 	.word	0x40010400

0801011c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d101      	bne.n	801016a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010166:	2301      	movs	r3, #1
 8010168:	e042      	b.n	80101f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010170:	2b00      	cmp	r3, #0
 8010172:	d106      	bne.n	8010182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7f1 fea9 	bl	8001ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2224      	movs	r2, #36	@ 0x24
 8010186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f022 0201 	bic.w	r2, r2, #1
 8010198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d002      	beq.n	80101a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fd90 	bl	8010cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 f825 	bl	80101f8 <UART_SetConfig>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d101      	bne.n	80101b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	e01b      	b.n	80101f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	685a      	ldr	r2, [r3, #4]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80101c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689a      	ldr	r2, [r3, #8]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80101d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f042 0201 	orr.w	r2, r2, #1
 80101e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 fe0f 	bl	8010e0c <UART_CheckIdleState>
 80101ee:	4603      	mov	r3, r0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80101f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80101fc:	b092      	sub	sp, #72	@ 0x48
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	689a      	ldr	r2, [r3, #8]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	431a      	orrs	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	695b      	ldr	r3, [r3, #20]
 8010216:	431a      	orrs	r2, r3
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	69db      	ldr	r3, [r3, #28]
 801021c:	4313      	orrs	r3, r2
 801021e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	4bbe      	ldr	r3, [pc, #760]	@ (8010520 <UART_SetConfig+0x328>)
 8010228:	4013      	ands	r3, r2
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	6812      	ldr	r2, [r2, #0]
 801022e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010230:	430b      	orrs	r3, r1
 8010232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	68da      	ldr	r2, [r3, #12]
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	430a      	orrs	r2, r1
 8010248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	699b      	ldr	r3, [r3, #24]
 801024e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4ab3      	ldr	r2, [pc, #716]	@ (8010524 <UART_SetConfig+0x32c>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d004      	beq.n	8010264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010260:	4313      	orrs	r3, r2
 8010262:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	689a      	ldr	r2, [r3, #8]
 801026a:	4baf      	ldr	r3, [pc, #700]	@ (8010528 <UART_SetConfig+0x330>)
 801026c:	4013      	ands	r3, r2
 801026e:	697a      	ldr	r2, [r7, #20]
 8010270:	6812      	ldr	r2, [r2, #0]
 8010272:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010274:	430b      	orrs	r3, r1
 8010276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801027e:	f023 010f 	bic.w	r1, r3, #15
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	430a      	orrs	r2, r1
 801028c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4aa6      	ldr	r2, [pc, #664]	@ (801052c <UART_SetConfig+0x334>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d177      	bne.n	8010388 <UART_SetConfig+0x190>
 8010298:	4ba5      	ldr	r3, [pc, #660]	@ (8010530 <UART_SetConfig+0x338>)
 801029a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801029c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80102a0:	2b28      	cmp	r3, #40	@ 0x28
 80102a2:	d86d      	bhi.n	8010380 <UART_SetConfig+0x188>
 80102a4:	a201      	add	r2, pc, #4	@ (adr r2, 80102ac <UART_SetConfig+0xb4>)
 80102a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102aa:	bf00      	nop
 80102ac:	08010351 	.word	0x08010351
 80102b0:	08010381 	.word	0x08010381
 80102b4:	08010381 	.word	0x08010381
 80102b8:	08010381 	.word	0x08010381
 80102bc:	08010381 	.word	0x08010381
 80102c0:	08010381 	.word	0x08010381
 80102c4:	08010381 	.word	0x08010381
 80102c8:	08010381 	.word	0x08010381
 80102cc:	08010359 	.word	0x08010359
 80102d0:	08010381 	.word	0x08010381
 80102d4:	08010381 	.word	0x08010381
 80102d8:	08010381 	.word	0x08010381
 80102dc:	08010381 	.word	0x08010381
 80102e0:	08010381 	.word	0x08010381
 80102e4:	08010381 	.word	0x08010381
 80102e8:	08010381 	.word	0x08010381
 80102ec:	08010361 	.word	0x08010361
 80102f0:	08010381 	.word	0x08010381
 80102f4:	08010381 	.word	0x08010381
 80102f8:	08010381 	.word	0x08010381
 80102fc:	08010381 	.word	0x08010381
 8010300:	08010381 	.word	0x08010381
 8010304:	08010381 	.word	0x08010381
 8010308:	08010381 	.word	0x08010381
 801030c:	08010369 	.word	0x08010369
 8010310:	08010381 	.word	0x08010381
 8010314:	08010381 	.word	0x08010381
 8010318:	08010381 	.word	0x08010381
 801031c:	08010381 	.word	0x08010381
 8010320:	08010381 	.word	0x08010381
 8010324:	08010381 	.word	0x08010381
 8010328:	08010381 	.word	0x08010381
 801032c:	08010371 	.word	0x08010371
 8010330:	08010381 	.word	0x08010381
 8010334:	08010381 	.word	0x08010381
 8010338:	08010381 	.word	0x08010381
 801033c:	08010381 	.word	0x08010381
 8010340:	08010381 	.word	0x08010381
 8010344:	08010381 	.word	0x08010381
 8010348:	08010381 	.word	0x08010381
 801034c:	08010379 	.word	0x08010379
 8010350:	2301      	movs	r3, #1
 8010352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010356:	e222      	b.n	801079e <UART_SetConfig+0x5a6>
 8010358:	2304      	movs	r3, #4
 801035a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801035e:	e21e      	b.n	801079e <UART_SetConfig+0x5a6>
 8010360:	2308      	movs	r3, #8
 8010362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010366:	e21a      	b.n	801079e <UART_SetConfig+0x5a6>
 8010368:	2310      	movs	r3, #16
 801036a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801036e:	e216      	b.n	801079e <UART_SetConfig+0x5a6>
 8010370:	2320      	movs	r3, #32
 8010372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010376:	e212      	b.n	801079e <UART_SetConfig+0x5a6>
 8010378:	2340      	movs	r3, #64	@ 0x40
 801037a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801037e:	e20e      	b.n	801079e <UART_SetConfig+0x5a6>
 8010380:	2380      	movs	r3, #128	@ 0x80
 8010382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010386:	e20a      	b.n	801079e <UART_SetConfig+0x5a6>
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a69      	ldr	r2, [pc, #420]	@ (8010534 <UART_SetConfig+0x33c>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d130      	bne.n	80103f4 <UART_SetConfig+0x1fc>
 8010392:	4b67      	ldr	r3, [pc, #412]	@ (8010530 <UART_SetConfig+0x338>)
 8010394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010396:	f003 0307 	and.w	r3, r3, #7
 801039a:	2b05      	cmp	r3, #5
 801039c:	d826      	bhi.n	80103ec <UART_SetConfig+0x1f4>
 801039e:	a201      	add	r2, pc, #4	@ (adr r2, 80103a4 <UART_SetConfig+0x1ac>)
 80103a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a4:	080103bd 	.word	0x080103bd
 80103a8:	080103c5 	.word	0x080103c5
 80103ac:	080103cd 	.word	0x080103cd
 80103b0:	080103d5 	.word	0x080103d5
 80103b4:	080103dd 	.word	0x080103dd
 80103b8:	080103e5 	.word	0x080103e5
 80103bc:	2300      	movs	r3, #0
 80103be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103c2:	e1ec      	b.n	801079e <UART_SetConfig+0x5a6>
 80103c4:	2304      	movs	r3, #4
 80103c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ca:	e1e8      	b.n	801079e <UART_SetConfig+0x5a6>
 80103cc:	2308      	movs	r3, #8
 80103ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103d2:	e1e4      	b.n	801079e <UART_SetConfig+0x5a6>
 80103d4:	2310      	movs	r3, #16
 80103d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103da:	e1e0      	b.n	801079e <UART_SetConfig+0x5a6>
 80103dc:	2320      	movs	r3, #32
 80103de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103e2:	e1dc      	b.n	801079e <UART_SetConfig+0x5a6>
 80103e4:	2340      	movs	r3, #64	@ 0x40
 80103e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ea:	e1d8      	b.n	801079e <UART_SetConfig+0x5a6>
 80103ec:	2380      	movs	r3, #128	@ 0x80
 80103ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103f2:	e1d4      	b.n	801079e <UART_SetConfig+0x5a6>
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a4f      	ldr	r2, [pc, #316]	@ (8010538 <UART_SetConfig+0x340>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d130      	bne.n	8010460 <UART_SetConfig+0x268>
 80103fe:	4b4c      	ldr	r3, [pc, #304]	@ (8010530 <UART_SetConfig+0x338>)
 8010400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010402:	f003 0307 	and.w	r3, r3, #7
 8010406:	2b05      	cmp	r3, #5
 8010408:	d826      	bhi.n	8010458 <UART_SetConfig+0x260>
 801040a:	a201      	add	r2, pc, #4	@ (adr r2, 8010410 <UART_SetConfig+0x218>)
 801040c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010410:	08010429 	.word	0x08010429
 8010414:	08010431 	.word	0x08010431
 8010418:	08010439 	.word	0x08010439
 801041c:	08010441 	.word	0x08010441
 8010420:	08010449 	.word	0x08010449
 8010424:	08010451 	.word	0x08010451
 8010428:	2300      	movs	r3, #0
 801042a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801042e:	e1b6      	b.n	801079e <UART_SetConfig+0x5a6>
 8010430:	2304      	movs	r3, #4
 8010432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010436:	e1b2      	b.n	801079e <UART_SetConfig+0x5a6>
 8010438:	2308      	movs	r3, #8
 801043a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801043e:	e1ae      	b.n	801079e <UART_SetConfig+0x5a6>
 8010440:	2310      	movs	r3, #16
 8010442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010446:	e1aa      	b.n	801079e <UART_SetConfig+0x5a6>
 8010448:	2320      	movs	r3, #32
 801044a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801044e:	e1a6      	b.n	801079e <UART_SetConfig+0x5a6>
 8010450:	2340      	movs	r3, #64	@ 0x40
 8010452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010456:	e1a2      	b.n	801079e <UART_SetConfig+0x5a6>
 8010458:	2380      	movs	r3, #128	@ 0x80
 801045a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801045e:	e19e      	b.n	801079e <UART_SetConfig+0x5a6>
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a35      	ldr	r2, [pc, #212]	@ (801053c <UART_SetConfig+0x344>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d130      	bne.n	80104cc <UART_SetConfig+0x2d4>
 801046a:	4b31      	ldr	r3, [pc, #196]	@ (8010530 <UART_SetConfig+0x338>)
 801046c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801046e:	f003 0307 	and.w	r3, r3, #7
 8010472:	2b05      	cmp	r3, #5
 8010474:	d826      	bhi.n	80104c4 <UART_SetConfig+0x2cc>
 8010476:	a201      	add	r2, pc, #4	@ (adr r2, 801047c <UART_SetConfig+0x284>)
 8010478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047c:	08010495 	.word	0x08010495
 8010480:	0801049d 	.word	0x0801049d
 8010484:	080104a5 	.word	0x080104a5
 8010488:	080104ad 	.word	0x080104ad
 801048c:	080104b5 	.word	0x080104b5
 8010490:	080104bd 	.word	0x080104bd
 8010494:	2300      	movs	r3, #0
 8010496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801049a:	e180      	b.n	801079e <UART_SetConfig+0x5a6>
 801049c:	2304      	movs	r3, #4
 801049e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104a2:	e17c      	b.n	801079e <UART_SetConfig+0x5a6>
 80104a4:	2308      	movs	r3, #8
 80104a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104aa:	e178      	b.n	801079e <UART_SetConfig+0x5a6>
 80104ac:	2310      	movs	r3, #16
 80104ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104b2:	e174      	b.n	801079e <UART_SetConfig+0x5a6>
 80104b4:	2320      	movs	r3, #32
 80104b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ba:	e170      	b.n	801079e <UART_SetConfig+0x5a6>
 80104bc:	2340      	movs	r3, #64	@ 0x40
 80104be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104c2:	e16c      	b.n	801079e <UART_SetConfig+0x5a6>
 80104c4:	2380      	movs	r3, #128	@ 0x80
 80104c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ca:	e168      	b.n	801079e <UART_SetConfig+0x5a6>
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a1b      	ldr	r2, [pc, #108]	@ (8010540 <UART_SetConfig+0x348>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d142      	bne.n	801055c <UART_SetConfig+0x364>
 80104d6:	4b16      	ldr	r3, [pc, #88]	@ (8010530 <UART_SetConfig+0x338>)
 80104d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104da:	f003 0307 	and.w	r3, r3, #7
 80104de:	2b05      	cmp	r3, #5
 80104e0:	d838      	bhi.n	8010554 <UART_SetConfig+0x35c>
 80104e2:	a201      	add	r2, pc, #4	@ (adr r2, 80104e8 <UART_SetConfig+0x2f0>)
 80104e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e8:	08010501 	.word	0x08010501
 80104ec:	08010509 	.word	0x08010509
 80104f0:	08010511 	.word	0x08010511
 80104f4:	08010519 	.word	0x08010519
 80104f8:	08010545 	.word	0x08010545
 80104fc:	0801054d 	.word	0x0801054d
 8010500:	2300      	movs	r3, #0
 8010502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010506:	e14a      	b.n	801079e <UART_SetConfig+0x5a6>
 8010508:	2304      	movs	r3, #4
 801050a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801050e:	e146      	b.n	801079e <UART_SetConfig+0x5a6>
 8010510:	2308      	movs	r3, #8
 8010512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010516:	e142      	b.n	801079e <UART_SetConfig+0x5a6>
 8010518:	2310      	movs	r3, #16
 801051a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801051e:	e13e      	b.n	801079e <UART_SetConfig+0x5a6>
 8010520:	cfff69f3 	.word	0xcfff69f3
 8010524:	58000c00 	.word	0x58000c00
 8010528:	11fff4ff 	.word	0x11fff4ff
 801052c:	40011000 	.word	0x40011000
 8010530:	58024400 	.word	0x58024400
 8010534:	40004400 	.word	0x40004400
 8010538:	40004800 	.word	0x40004800
 801053c:	40004c00 	.word	0x40004c00
 8010540:	40005000 	.word	0x40005000
 8010544:	2320      	movs	r3, #32
 8010546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801054a:	e128      	b.n	801079e <UART_SetConfig+0x5a6>
 801054c:	2340      	movs	r3, #64	@ 0x40
 801054e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010552:	e124      	b.n	801079e <UART_SetConfig+0x5a6>
 8010554:	2380      	movs	r3, #128	@ 0x80
 8010556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801055a:	e120      	b.n	801079e <UART_SetConfig+0x5a6>
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4acb      	ldr	r2, [pc, #812]	@ (8010890 <UART_SetConfig+0x698>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d176      	bne.n	8010654 <UART_SetConfig+0x45c>
 8010566:	4bcb      	ldr	r3, [pc, #812]	@ (8010894 <UART_SetConfig+0x69c>)
 8010568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801056a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801056e:	2b28      	cmp	r3, #40	@ 0x28
 8010570:	d86c      	bhi.n	801064c <UART_SetConfig+0x454>
 8010572:	a201      	add	r2, pc, #4	@ (adr r2, 8010578 <UART_SetConfig+0x380>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	0801061d 	.word	0x0801061d
 801057c:	0801064d 	.word	0x0801064d
 8010580:	0801064d 	.word	0x0801064d
 8010584:	0801064d 	.word	0x0801064d
 8010588:	0801064d 	.word	0x0801064d
 801058c:	0801064d 	.word	0x0801064d
 8010590:	0801064d 	.word	0x0801064d
 8010594:	0801064d 	.word	0x0801064d
 8010598:	08010625 	.word	0x08010625
 801059c:	0801064d 	.word	0x0801064d
 80105a0:	0801064d 	.word	0x0801064d
 80105a4:	0801064d 	.word	0x0801064d
 80105a8:	0801064d 	.word	0x0801064d
 80105ac:	0801064d 	.word	0x0801064d
 80105b0:	0801064d 	.word	0x0801064d
 80105b4:	0801064d 	.word	0x0801064d
 80105b8:	0801062d 	.word	0x0801062d
 80105bc:	0801064d 	.word	0x0801064d
 80105c0:	0801064d 	.word	0x0801064d
 80105c4:	0801064d 	.word	0x0801064d
 80105c8:	0801064d 	.word	0x0801064d
 80105cc:	0801064d 	.word	0x0801064d
 80105d0:	0801064d 	.word	0x0801064d
 80105d4:	0801064d 	.word	0x0801064d
 80105d8:	08010635 	.word	0x08010635
 80105dc:	0801064d 	.word	0x0801064d
 80105e0:	0801064d 	.word	0x0801064d
 80105e4:	0801064d 	.word	0x0801064d
 80105e8:	0801064d 	.word	0x0801064d
 80105ec:	0801064d 	.word	0x0801064d
 80105f0:	0801064d 	.word	0x0801064d
 80105f4:	0801064d 	.word	0x0801064d
 80105f8:	0801063d 	.word	0x0801063d
 80105fc:	0801064d 	.word	0x0801064d
 8010600:	0801064d 	.word	0x0801064d
 8010604:	0801064d 	.word	0x0801064d
 8010608:	0801064d 	.word	0x0801064d
 801060c:	0801064d 	.word	0x0801064d
 8010610:	0801064d 	.word	0x0801064d
 8010614:	0801064d 	.word	0x0801064d
 8010618:	08010645 	.word	0x08010645
 801061c:	2301      	movs	r3, #1
 801061e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010622:	e0bc      	b.n	801079e <UART_SetConfig+0x5a6>
 8010624:	2304      	movs	r3, #4
 8010626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801062a:	e0b8      	b.n	801079e <UART_SetConfig+0x5a6>
 801062c:	2308      	movs	r3, #8
 801062e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010632:	e0b4      	b.n	801079e <UART_SetConfig+0x5a6>
 8010634:	2310      	movs	r3, #16
 8010636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801063a:	e0b0      	b.n	801079e <UART_SetConfig+0x5a6>
 801063c:	2320      	movs	r3, #32
 801063e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010642:	e0ac      	b.n	801079e <UART_SetConfig+0x5a6>
 8010644:	2340      	movs	r3, #64	@ 0x40
 8010646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801064a:	e0a8      	b.n	801079e <UART_SetConfig+0x5a6>
 801064c:	2380      	movs	r3, #128	@ 0x80
 801064e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010652:	e0a4      	b.n	801079e <UART_SetConfig+0x5a6>
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a8f      	ldr	r2, [pc, #572]	@ (8010898 <UART_SetConfig+0x6a0>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d130      	bne.n	80106c0 <UART_SetConfig+0x4c8>
 801065e:	4b8d      	ldr	r3, [pc, #564]	@ (8010894 <UART_SetConfig+0x69c>)
 8010660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010662:	f003 0307 	and.w	r3, r3, #7
 8010666:	2b05      	cmp	r3, #5
 8010668:	d826      	bhi.n	80106b8 <UART_SetConfig+0x4c0>
 801066a:	a201      	add	r2, pc, #4	@ (adr r2, 8010670 <UART_SetConfig+0x478>)
 801066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010670:	08010689 	.word	0x08010689
 8010674:	08010691 	.word	0x08010691
 8010678:	08010699 	.word	0x08010699
 801067c:	080106a1 	.word	0x080106a1
 8010680:	080106a9 	.word	0x080106a9
 8010684:	080106b1 	.word	0x080106b1
 8010688:	2300      	movs	r3, #0
 801068a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801068e:	e086      	b.n	801079e <UART_SetConfig+0x5a6>
 8010690:	2304      	movs	r3, #4
 8010692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010696:	e082      	b.n	801079e <UART_SetConfig+0x5a6>
 8010698:	2308      	movs	r3, #8
 801069a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801069e:	e07e      	b.n	801079e <UART_SetConfig+0x5a6>
 80106a0:	2310      	movs	r3, #16
 80106a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106a6:	e07a      	b.n	801079e <UART_SetConfig+0x5a6>
 80106a8:	2320      	movs	r3, #32
 80106aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ae:	e076      	b.n	801079e <UART_SetConfig+0x5a6>
 80106b0:	2340      	movs	r3, #64	@ 0x40
 80106b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106b6:	e072      	b.n	801079e <UART_SetConfig+0x5a6>
 80106b8:	2380      	movs	r3, #128	@ 0x80
 80106ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106be:	e06e      	b.n	801079e <UART_SetConfig+0x5a6>
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a75      	ldr	r2, [pc, #468]	@ (801089c <UART_SetConfig+0x6a4>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d130      	bne.n	801072c <UART_SetConfig+0x534>
 80106ca:	4b72      	ldr	r3, [pc, #456]	@ (8010894 <UART_SetConfig+0x69c>)
 80106cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106ce:	f003 0307 	and.w	r3, r3, #7
 80106d2:	2b05      	cmp	r3, #5
 80106d4:	d826      	bhi.n	8010724 <UART_SetConfig+0x52c>
 80106d6:	a201      	add	r2, pc, #4	@ (adr r2, 80106dc <UART_SetConfig+0x4e4>)
 80106d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106dc:	080106f5 	.word	0x080106f5
 80106e0:	080106fd 	.word	0x080106fd
 80106e4:	08010705 	.word	0x08010705
 80106e8:	0801070d 	.word	0x0801070d
 80106ec:	08010715 	.word	0x08010715
 80106f0:	0801071d 	.word	0x0801071d
 80106f4:	2300      	movs	r3, #0
 80106f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106fa:	e050      	b.n	801079e <UART_SetConfig+0x5a6>
 80106fc:	2304      	movs	r3, #4
 80106fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010702:	e04c      	b.n	801079e <UART_SetConfig+0x5a6>
 8010704:	2308      	movs	r3, #8
 8010706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801070a:	e048      	b.n	801079e <UART_SetConfig+0x5a6>
 801070c:	2310      	movs	r3, #16
 801070e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010712:	e044      	b.n	801079e <UART_SetConfig+0x5a6>
 8010714:	2320      	movs	r3, #32
 8010716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071a:	e040      	b.n	801079e <UART_SetConfig+0x5a6>
 801071c:	2340      	movs	r3, #64	@ 0x40
 801071e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010722:	e03c      	b.n	801079e <UART_SetConfig+0x5a6>
 8010724:	2380      	movs	r3, #128	@ 0x80
 8010726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801072a:	e038      	b.n	801079e <UART_SetConfig+0x5a6>
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a5b      	ldr	r2, [pc, #364]	@ (80108a0 <UART_SetConfig+0x6a8>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d130      	bne.n	8010798 <UART_SetConfig+0x5a0>
 8010736:	4b57      	ldr	r3, [pc, #348]	@ (8010894 <UART_SetConfig+0x69c>)
 8010738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801073a:	f003 0307 	and.w	r3, r3, #7
 801073e:	2b05      	cmp	r3, #5
 8010740:	d826      	bhi.n	8010790 <UART_SetConfig+0x598>
 8010742:	a201      	add	r2, pc, #4	@ (adr r2, 8010748 <UART_SetConfig+0x550>)
 8010744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010748:	08010761 	.word	0x08010761
 801074c:	08010769 	.word	0x08010769
 8010750:	08010771 	.word	0x08010771
 8010754:	08010779 	.word	0x08010779
 8010758:	08010781 	.word	0x08010781
 801075c:	08010789 	.word	0x08010789
 8010760:	2302      	movs	r3, #2
 8010762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010766:	e01a      	b.n	801079e <UART_SetConfig+0x5a6>
 8010768:	2304      	movs	r3, #4
 801076a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801076e:	e016      	b.n	801079e <UART_SetConfig+0x5a6>
 8010770:	2308      	movs	r3, #8
 8010772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010776:	e012      	b.n	801079e <UART_SetConfig+0x5a6>
 8010778:	2310      	movs	r3, #16
 801077a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801077e:	e00e      	b.n	801079e <UART_SetConfig+0x5a6>
 8010780:	2320      	movs	r3, #32
 8010782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010786:	e00a      	b.n	801079e <UART_SetConfig+0x5a6>
 8010788:	2340      	movs	r3, #64	@ 0x40
 801078a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078e:	e006      	b.n	801079e <UART_SetConfig+0x5a6>
 8010790:	2380      	movs	r3, #128	@ 0x80
 8010792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010796:	e002      	b.n	801079e <UART_SetConfig+0x5a6>
 8010798:	2380      	movs	r3, #128	@ 0x80
 801079a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4a3f      	ldr	r2, [pc, #252]	@ (80108a0 <UART_SetConfig+0x6a8>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	f040 80f8 	bne.w	801099a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80107aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80107ae:	2b20      	cmp	r3, #32
 80107b0:	dc46      	bgt.n	8010840 <UART_SetConfig+0x648>
 80107b2:	2b02      	cmp	r3, #2
 80107b4:	f2c0 8082 	blt.w	80108bc <UART_SetConfig+0x6c4>
 80107b8:	3b02      	subs	r3, #2
 80107ba:	2b1e      	cmp	r3, #30
 80107bc:	d87e      	bhi.n	80108bc <UART_SetConfig+0x6c4>
 80107be:	a201      	add	r2, pc, #4	@ (adr r2, 80107c4 <UART_SetConfig+0x5cc>)
 80107c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c4:	08010847 	.word	0x08010847
 80107c8:	080108bd 	.word	0x080108bd
 80107cc:	0801084f 	.word	0x0801084f
 80107d0:	080108bd 	.word	0x080108bd
 80107d4:	080108bd 	.word	0x080108bd
 80107d8:	080108bd 	.word	0x080108bd
 80107dc:	0801085f 	.word	0x0801085f
 80107e0:	080108bd 	.word	0x080108bd
 80107e4:	080108bd 	.word	0x080108bd
 80107e8:	080108bd 	.word	0x080108bd
 80107ec:	080108bd 	.word	0x080108bd
 80107f0:	080108bd 	.word	0x080108bd
 80107f4:	080108bd 	.word	0x080108bd
 80107f8:	080108bd 	.word	0x080108bd
 80107fc:	0801086f 	.word	0x0801086f
 8010800:	080108bd 	.word	0x080108bd
 8010804:	080108bd 	.word	0x080108bd
 8010808:	080108bd 	.word	0x080108bd
 801080c:	080108bd 	.word	0x080108bd
 8010810:	080108bd 	.word	0x080108bd
 8010814:	080108bd 	.word	0x080108bd
 8010818:	080108bd 	.word	0x080108bd
 801081c:	080108bd 	.word	0x080108bd
 8010820:	080108bd 	.word	0x080108bd
 8010824:	080108bd 	.word	0x080108bd
 8010828:	080108bd 	.word	0x080108bd
 801082c:	080108bd 	.word	0x080108bd
 8010830:	080108bd 	.word	0x080108bd
 8010834:	080108bd 	.word	0x080108bd
 8010838:	080108bd 	.word	0x080108bd
 801083c:	080108af 	.word	0x080108af
 8010840:	2b40      	cmp	r3, #64	@ 0x40
 8010842:	d037      	beq.n	80108b4 <UART_SetConfig+0x6bc>
 8010844:	e03a      	b.n	80108bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010846:	f7fd fe55 	bl	800e4f4 <HAL_RCCEx_GetD3PCLK1Freq>
 801084a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801084c:	e03c      	b.n	80108c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010852:	4618      	mov	r0, r3
 8010854:	f7fd fe64 	bl	800e520 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801085c:	e034      	b.n	80108c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801085e:	f107 0318 	add.w	r3, r7, #24
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd ffb0 	bl	800e7c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801086c:	e02c      	b.n	80108c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801086e:	4b09      	ldr	r3, [pc, #36]	@ (8010894 <UART_SetConfig+0x69c>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f003 0320 	and.w	r3, r3, #32
 8010876:	2b00      	cmp	r3, #0
 8010878:	d016      	beq.n	80108a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801087a:	4b06      	ldr	r3, [pc, #24]	@ (8010894 <UART_SetConfig+0x69c>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	08db      	lsrs	r3, r3, #3
 8010880:	f003 0303 	and.w	r3, r3, #3
 8010884:	4a07      	ldr	r2, [pc, #28]	@ (80108a4 <UART_SetConfig+0x6ac>)
 8010886:	fa22 f303 	lsr.w	r3, r2, r3
 801088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801088c:	e01c      	b.n	80108c8 <UART_SetConfig+0x6d0>
 801088e:	bf00      	nop
 8010890:	40011400 	.word	0x40011400
 8010894:	58024400 	.word	0x58024400
 8010898:	40007800 	.word	0x40007800
 801089c:	40007c00 	.word	0x40007c00
 80108a0:	58000c00 	.word	0x58000c00
 80108a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80108a8:	4b9d      	ldr	r3, [pc, #628]	@ (8010b20 <UART_SetConfig+0x928>)
 80108aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108ac:	e00c      	b.n	80108c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108ae:	4b9d      	ldr	r3, [pc, #628]	@ (8010b24 <UART_SetConfig+0x92c>)
 80108b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108b2:	e009      	b.n	80108c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80108b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108ba:	e005      	b.n	80108c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80108bc:	2300      	movs	r3, #0
 80108be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80108c0:	2301      	movs	r3, #1
 80108c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80108c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80108c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	f000 81de 	beq.w	8010c8c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108d4:	4a94      	ldr	r2, [pc, #592]	@ (8010b28 <UART_SetConfig+0x930>)
 80108d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108da:	461a      	mov	r2, r3
 80108dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108de:	fbb3 f3f2 	udiv	r3, r3, r2
 80108e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	685a      	ldr	r2, [r3, #4]
 80108e8:	4613      	mov	r3, r2
 80108ea:	005b      	lsls	r3, r3, #1
 80108ec:	4413      	add	r3, r2
 80108ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d305      	bcc.n	8010900 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80108fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d903      	bls.n	8010908 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010900:	2301      	movs	r3, #1
 8010902:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010906:	e1c1      	b.n	8010c8c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801090a:	2200      	movs	r2, #0
 801090c:	60bb      	str	r3, [r7, #8]
 801090e:	60fa      	str	r2, [r7, #12]
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010914:	4a84      	ldr	r2, [pc, #528]	@ (8010b28 <UART_SetConfig+0x930>)
 8010916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801091a:	b29b      	uxth	r3, r3
 801091c:	2200      	movs	r2, #0
 801091e:	603b      	str	r3, [r7, #0]
 8010920:	607a      	str	r2, [r7, #4]
 8010922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801092a:	f7ef fd31 	bl	8000390 <__aeabi_uldivmod>
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	4610      	mov	r0, r2
 8010934:	4619      	mov	r1, r3
 8010936:	f04f 0200 	mov.w	r2, #0
 801093a:	f04f 0300 	mov.w	r3, #0
 801093e:	020b      	lsls	r3, r1, #8
 8010940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010944:	0202      	lsls	r2, r0, #8
 8010946:	6979      	ldr	r1, [r7, #20]
 8010948:	6849      	ldr	r1, [r1, #4]
 801094a:	0849      	lsrs	r1, r1, #1
 801094c:	2000      	movs	r0, #0
 801094e:	460c      	mov	r4, r1
 8010950:	4605      	mov	r5, r0
 8010952:	eb12 0804 	adds.w	r8, r2, r4
 8010956:	eb43 0905 	adc.w	r9, r3, r5
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	469a      	mov	sl, r3
 8010962:	4693      	mov	fp, r2
 8010964:	4652      	mov	r2, sl
 8010966:	465b      	mov	r3, fp
 8010968:	4640      	mov	r0, r8
 801096a:	4649      	mov	r1, r9
 801096c:	f7ef fd10 	bl	8000390 <__aeabi_uldivmod>
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	4613      	mov	r3, r2
 8010976:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801097a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801097e:	d308      	bcc.n	8010992 <UART_SetConfig+0x79a>
 8010980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010986:	d204      	bcs.n	8010992 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801098e:	60da      	str	r2, [r3, #12]
 8010990:	e17c      	b.n	8010c8c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010992:	2301      	movs	r3, #1
 8010994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010998:	e178      	b.n	8010c8c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	69db      	ldr	r3, [r3, #28]
 801099e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80109a2:	f040 80c5 	bne.w	8010b30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80109a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80109aa:	2b20      	cmp	r3, #32
 80109ac:	dc48      	bgt.n	8010a40 <UART_SetConfig+0x848>
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	db7b      	blt.n	8010aaa <UART_SetConfig+0x8b2>
 80109b2:	2b20      	cmp	r3, #32
 80109b4:	d879      	bhi.n	8010aaa <UART_SetConfig+0x8b2>
 80109b6:	a201      	add	r2, pc, #4	@ (adr r2, 80109bc <UART_SetConfig+0x7c4>)
 80109b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109bc:	08010a47 	.word	0x08010a47
 80109c0:	08010a4f 	.word	0x08010a4f
 80109c4:	08010aab 	.word	0x08010aab
 80109c8:	08010aab 	.word	0x08010aab
 80109cc:	08010a57 	.word	0x08010a57
 80109d0:	08010aab 	.word	0x08010aab
 80109d4:	08010aab 	.word	0x08010aab
 80109d8:	08010aab 	.word	0x08010aab
 80109dc:	08010a67 	.word	0x08010a67
 80109e0:	08010aab 	.word	0x08010aab
 80109e4:	08010aab 	.word	0x08010aab
 80109e8:	08010aab 	.word	0x08010aab
 80109ec:	08010aab 	.word	0x08010aab
 80109f0:	08010aab 	.word	0x08010aab
 80109f4:	08010aab 	.word	0x08010aab
 80109f8:	08010aab 	.word	0x08010aab
 80109fc:	08010a77 	.word	0x08010a77
 8010a00:	08010aab 	.word	0x08010aab
 8010a04:	08010aab 	.word	0x08010aab
 8010a08:	08010aab 	.word	0x08010aab
 8010a0c:	08010aab 	.word	0x08010aab
 8010a10:	08010aab 	.word	0x08010aab
 8010a14:	08010aab 	.word	0x08010aab
 8010a18:	08010aab 	.word	0x08010aab
 8010a1c:	08010aab 	.word	0x08010aab
 8010a20:	08010aab 	.word	0x08010aab
 8010a24:	08010aab 	.word	0x08010aab
 8010a28:	08010aab 	.word	0x08010aab
 8010a2c:	08010aab 	.word	0x08010aab
 8010a30:	08010aab 	.word	0x08010aab
 8010a34:	08010aab 	.word	0x08010aab
 8010a38:	08010aab 	.word	0x08010aab
 8010a3c:	08010a9d 	.word	0x08010a9d
 8010a40:	2b40      	cmp	r3, #64	@ 0x40
 8010a42:	d02e      	beq.n	8010aa2 <UART_SetConfig+0x8aa>
 8010a44:	e031      	b.n	8010aaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a46:	f7fc fb1f 	bl	800d088 <HAL_RCC_GetPCLK1Freq>
 8010a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a4c:	e033      	b.n	8010ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a4e:	f7fc fb31 	bl	800d0b4 <HAL_RCC_GetPCLK2Freq>
 8010a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a54:	e02f      	b.n	8010ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fd fd60 	bl	800e520 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a64:	e027      	b.n	8010ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a66:	f107 0318 	add.w	r3, r7, #24
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fd feac 	bl	800e7c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a74:	e01f      	b.n	8010ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a76:	4b2d      	ldr	r3, [pc, #180]	@ (8010b2c <UART_SetConfig+0x934>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f003 0320 	and.w	r3, r3, #32
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d009      	beq.n	8010a96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a82:	4b2a      	ldr	r3, [pc, #168]	@ (8010b2c <UART_SetConfig+0x934>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	08db      	lsrs	r3, r3, #3
 8010a88:	f003 0303 	and.w	r3, r3, #3
 8010a8c:	4a24      	ldr	r2, [pc, #144]	@ (8010b20 <UART_SetConfig+0x928>)
 8010a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8010a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a94:	e00f      	b.n	8010ab6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010a96:	4b22      	ldr	r3, [pc, #136]	@ (8010b20 <UART_SetConfig+0x928>)
 8010a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a9a:	e00c      	b.n	8010ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a9c:	4b21      	ldr	r3, [pc, #132]	@ (8010b24 <UART_SetConfig+0x92c>)
 8010a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aa0:	e009      	b.n	8010ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aa8:	e005      	b.n	8010ab6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 80e7 	beq.w	8010c8c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ac2:	4a19      	ldr	r2, [pc, #100]	@ (8010b28 <UART_SetConfig+0x930>)
 8010ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ac8:	461a      	mov	r2, r3
 8010aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ad0:	005a      	lsls	r2, r3, #1
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	085b      	lsrs	r3, r3, #1
 8010ad8:	441a      	add	r2, r3
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae6:	2b0f      	cmp	r3, #15
 8010ae8:	d916      	bls.n	8010b18 <UART_SetConfig+0x920>
 8010aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010af0:	d212      	bcs.n	8010b18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	f023 030f 	bic.w	r3, r3, #15
 8010afa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afe:	085b      	lsrs	r3, r3, #1
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	f003 0307 	and.w	r3, r3, #7
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010b14:	60da      	str	r2, [r3, #12]
 8010b16:	e0b9      	b.n	8010c8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010b1e:	e0b5      	b.n	8010c8c <UART_SetConfig+0xa94>
 8010b20:	03d09000 	.word	0x03d09000
 8010b24:	003d0900 	.word	0x003d0900
 8010b28:	08016270 	.word	0x08016270
 8010b2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010b30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010b34:	2b20      	cmp	r3, #32
 8010b36:	dc49      	bgt.n	8010bcc <UART_SetConfig+0x9d4>
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	db7c      	blt.n	8010c36 <UART_SetConfig+0xa3e>
 8010b3c:	2b20      	cmp	r3, #32
 8010b3e:	d87a      	bhi.n	8010c36 <UART_SetConfig+0xa3e>
 8010b40:	a201      	add	r2, pc, #4	@ (adr r2, 8010b48 <UART_SetConfig+0x950>)
 8010b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b46:	bf00      	nop
 8010b48:	08010bd3 	.word	0x08010bd3
 8010b4c:	08010bdb 	.word	0x08010bdb
 8010b50:	08010c37 	.word	0x08010c37
 8010b54:	08010c37 	.word	0x08010c37
 8010b58:	08010be3 	.word	0x08010be3
 8010b5c:	08010c37 	.word	0x08010c37
 8010b60:	08010c37 	.word	0x08010c37
 8010b64:	08010c37 	.word	0x08010c37
 8010b68:	08010bf3 	.word	0x08010bf3
 8010b6c:	08010c37 	.word	0x08010c37
 8010b70:	08010c37 	.word	0x08010c37
 8010b74:	08010c37 	.word	0x08010c37
 8010b78:	08010c37 	.word	0x08010c37
 8010b7c:	08010c37 	.word	0x08010c37
 8010b80:	08010c37 	.word	0x08010c37
 8010b84:	08010c37 	.word	0x08010c37
 8010b88:	08010c03 	.word	0x08010c03
 8010b8c:	08010c37 	.word	0x08010c37
 8010b90:	08010c37 	.word	0x08010c37
 8010b94:	08010c37 	.word	0x08010c37
 8010b98:	08010c37 	.word	0x08010c37
 8010b9c:	08010c37 	.word	0x08010c37
 8010ba0:	08010c37 	.word	0x08010c37
 8010ba4:	08010c37 	.word	0x08010c37
 8010ba8:	08010c37 	.word	0x08010c37
 8010bac:	08010c37 	.word	0x08010c37
 8010bb0:	08010c37 	.word	0x08010c37
 8010bb4:	08010c37 	.word	0x08010c37
 8010bb8:	08010c37 	.word	0x08010c37
 8010bbc:	08010c37 	.word	0x08010c37
 8010bc0:	08010c37 	.word	0x08010c37
 8010bc4:	08010c37 	.word	0x08010c37
 8010bc8:	08010c29 	.word	0x08010c29
 8010bcc:	2b40      	cmp	r3, #64	@ 0x40
 8010bce:	d02e      	beq.n	8010c2e <UART_SetConfig+0xa36>
 8010bd0:	e031      	b.n	8010c36 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bd2:	f7fc fa59 	bl	800d088 <HAL_RCC_GetPCLK1Freq>
 8010bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010bd8:	e033      	b.n	8010c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010bda:	f7fc fa6b 	bl	800d0b4 <HAL_RCC_GetPCLK2Freq>
 8010bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010be0:	e02f      	b.n	8010c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fd fc9a 	bl	800e520 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bf0:	e027      	b.n	8010c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bf2:	f107 0318 	add.w	r3, r7, #24
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fd fde6 	bl	800e7c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c00:	e01f      	b.n	8010c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c02:	4b2d      	ldr	r3, [pc, #180]	@ (8010cb8 <UART_SetConfig+0xac0>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f003 0320 	and.w	r3, r3, #32
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d009      	beq.n	8010c22 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8010cb8 <UART_SetConfig+0xac0>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	08db      	lsrs	r3, r3, #3
 8010c14:	f003 0303 	and.w	r3, r3, #3
 8010c18:	4a28      	ldr	r2, [pc, #160]	@ (8010cbc <UART_SetConfig+0xac4>)
 8010c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8010c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c20:	e00f      	b.n	8010c42 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010c22:	4b26      	ldr	r3, [pc, #152]	@ (8010cbc <UART_SetConfig+0xac4>)
 8010c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c26:	e00c      	b.n	8010c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c28:	4b25      	ldr	r3, [pc, #148]	@ (8010cc0 <UART_SetConfig+0xac8>)
 8010c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c2c:	e009      	b.n	8010c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c34:	e005      	b.n	8010c42 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010c36:	2300      	movs	r3, #0
 8010c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010c40:	bf00      	nop
    }

    if (pclk != 0U)
 8010c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d021      	beq.n	8010c8c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8010cc4 <UART_SetConfig+0xacc>)
 8010c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c52:	461a      	mov	r2, r3
 8010c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c56:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	085b      	lsrs	r3, r3, #1
 8010c60:	441a      	add	r2, r3
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c6e:	2b0f      	cmp	r3, #15
 8010c70:	d909      	bls.n	8010c86 <UART_SetConfig+0xa8e>
 8010c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c78:	d205      	bcs.n	8010c86 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	60da      	str	r2, [r3, #12]
 8010c84:	e002      	b.n	8010c8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010c86:	2301      	movs	r3, #1
 8010c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	2201      	movs	r2, #1
 8010c90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	2201      	movs	r2, #1
 8010c98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010ca8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3748      	adds	r7, #72	@ 0x48
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010cb6:	bf00      	nop
 8010cb8:	58024400 	.word	0x58024400
 8010cbc:	03d09000 	.word	0x03d09000
 8010cc0:	003d0900 	.word	0x003d0900
 8010cc4:	08016270 	.word	0x08016270

08010cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cd4:	f003 0308 	and.w	r3, r3, #8
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00a      	beq.n	8010cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	430a      	orrs	r2, r1
 8010cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf6:	f003 0301 	and.w	r3, r3, #1
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d00a      	beq.n	8010d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	430a      	orrs	r2, r1
 8010d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d18:	f003 0302 	and.w	r3, r3, #2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00a      	beq.n	8010d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	430a      	orrs	r2, r1
 8010d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d3a:	f003 0304 	and.w	r3, r3, #4
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d00a      	beq.n	8010d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	430a      	orrs	r2, r1
 8010d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d5c:	f003 0310 	and.w	r3, r3, #16
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00a      	beq.n	8010d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	689b      	ldr	r3, [r3, #8]
 8010d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	430a      	orrs	r2, r1
 8010d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d7e:	f003 0320 	and.w	r3, r3, #32
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00a      	beq.n	8010d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	689b      	ldr	r3, [r3, #8]
 8010d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	430a      	orrs	r2, r1
 8010d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d01a      	beq.n	8010dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	430a      	orrs	r2, r1
 8010dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010dc6:	d10a      	bne.n	8010dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00a      	beq.n	8010e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	430a      	orrs	r2, r1
 8010dfe:	605a      	str	r2, [r3, #4]
  }
}
 8010e00:	bf00      	nop
 8010e02:	370c      	adds	r7, #12
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b098      	sub	sp, #96	@ 0x60
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e1c:	f7f1 fae8 	bl	80023f0 <HAL_GetTick>
 8010e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f003 0308 	and.w	r3, r3, #8
 8010e2c:	2b08      	cmp	r3, #8
 8010e2e:	d12f      	bne.n	8010e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e34:	9300      	str	r3, [sp, #0]
 8010e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e38:	2200      	movs	r2, #0
 8010e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 f88e 	bl	8010f60 <UART_WaitOnFlagUntilTimeout>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d022      	beq.n	8010e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e52:	e853 3f00 	ldrex	r3, [r3]
 8010e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	461a      	mov	r2, r3
 8010e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e70:	e841 2300 	strex	r3, r2, [r1]
 8010e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d1e6      	bne.n	8010e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2220      	movs	r2, #32
 8010e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e8c:	2303      	movs	r3, #3
 8010e8e:	e063      	b.n	8010f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f003 0304 	and.w	r3, r3, #4
 8010e9a:	2b04      	cmp	r3, #4
 8010e9c:	d149      	bne.n	8010f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f000 f857 	bl	8010f60 <UART_WaitOnFlagUntilTimeout>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d03c      	beq.n	8010f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec0:	e853 3f00 	ldrex	r3, [r3]
 8010ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8010ec6:	6a3b      	ldr	r3, [r7, #32]
 8010ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ede:	e841 2300 	strex	r3, r2, [r1]
 8010ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d1e6      	bne.n	8010eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	3308      	adds	r3, #8
 8010ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	e853 3f00 	ldrex	r3, [r3]
 8010ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f023 0301 	bic.w	r3, r3, #1
 8010f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	3308      	adds	r3, #8
 8010f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f0a:	61fa      	str	r2, [r7, #28]
 8010f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f0e:	69b9      	ldr	r1, [r7, #24]
 8010f10:	69fa      	ldr	r2, [r7, #28]
 8010f12:	e841 2300 	strex	r3, r2, [r1]
 8010f16:	617b      	str	r3, [r7, #20]
   return(result);
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1e5      	bne.n	8010eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2220      	movs	r2, #32
 8010f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f2e:	2303      	movs	r3, #3
 8010f30:	e012      	b.n	8010f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2220      	movs	r2, #32
 8010f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2220      	movs	r2, #32
 8010f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2200      	movs	r2, #0
 8010f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2200      	movs	r2, #0
 8010f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3758      	adds	r7, #88	@ 0x58
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	603b      	str	r3, [r7, #0]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f70:	e04f      	b.n	8011012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f78:	d04b      	beq.n	8011012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f7a:	f7f1 fa39 	bl	80023f0 <HAL_GetTick>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	69ba      	ldr	r2, [r7, #24]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d302      	bcc.n	8010f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d101      	bne.n	8010f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010f90:	2303      	movs	r3, #3
 8010f92:	e04e      	b.n	8011032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f003 0304 	and.w	r3, r3, #4
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d037      	beq.n	8011012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	2b80      	cmp	r3, #128	@ 0x80
 8010fa6:	d034      	beq.n	8011012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	2b40      	cmp	r3, #64	@ 0x40
 8010fac:	d031      	beq.n	8011012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	69db      	ldr	r3, [r3, #28]
 8010fb4:	f003 0308 	and.w	r3, r3, #8
 8010fb8:	2b08      	cmp	r3, #8
 8010fba:	d110      	bne.n	8010fde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2208      	movs	r2, #8
 8010fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f000 f839 	bl	801103c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2208      	movs	r2, #8
 8010fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e029      	b.n	8011032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	69db      	ldr	r3, [r3, #28]
 8010fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010fec:	d111      	bne.n	8011012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ff8:	68f8      	ldr	r0, [r7, #12]
 8010ffa:	f000 f81f 	bl	801103c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2220      	movs	r2, #32
 8011002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2200      	movs	r2, #0
 801100a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801100e:	2303      	movs	r3, #3
 8011010:	e00f      	b.n	8011032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	69da      	ldr	r2, [r3, #28]
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	4013      	ands	r3, r2
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	429a      	cmp	r2, r3
 8011020:	bf0c      	ite	eq
 8011022:	2301      	moveq	r3, #1
 8011024:	2300      	movne	r3, #0
 8011026:	b2db      	uxtb	r3, r3
 8011028:	461a      	mov	r2, r3
 801102a:	79fb      	ldrb	r3, [r7, #7]
 801102c:	429a      	cmp	r2, r3
 801102e:	d0a0      	beq.n	8010f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011030:	2300      	movs	r3, #0
}
 8011032:	4618      	mov	r0, r3
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
	...

0801103c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801103c:	b480      	push	{r7}
 801103e:	b095      	sub	sp, #84	@ 0x54
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801104c:	e853 3f00 	ldrex	r3, [r3]
 8011050:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	461a      	mov	r2, r3
 8011060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011062:	643b      	str	r3, [r7, #64]	@ 0x40
 8011064:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011066:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011068:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801106a:	e841 2300 	strex	r3, r2, [r1]
 801106e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1e6      	bne.n	8011044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107e:	6a3b      	ldr	r3, [r7, #32]
 8011080:	e853 3f00 	ldrex	r3, [r3]
 8011084:	61fb      	str	r3, [r7, #28]
   return(result);
 8011086:	69fa      	ldr	r2, [r7, #28]
 8011088:	4b1e      	ldr	r3, [pc, #120]	@ (8011104 <UART_EndRxTransfer+0xc8>)
 801108a:	4013      	ands	r3, r2
 801108c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	3308      	adds	r3, #8
 8011094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801109c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801109e:	e841 2300 	strex	r3, r2, [r1]
 80110a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80110a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1e5      	bne.n	8011076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d118      	bne.n	80110e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	e853 3f00 	ldrex	r3, [r3]
 80110be:	60bb      	str	r3, [r7, #8]
   return(result);
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	f023 0310 	bic.w	r3, r3, #16
 80110c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	461a      	mov	r2, r3
 80110ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110d0:	61bb      	str	r3, [r7, #24]
 80110d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d4:	6979      	ldr	r1, [r7, #20]
 80110d6:	69ba      	ldr	r2, [r7, #24]
 80110d8:	e841 2300 	strex	r3, r2, [r1]
 80110dc:	613b      	str	r3, [r7, #16]
   return(result);
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1e6      	bne.n	80110b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2220      	movs	r2, #32
 80110e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2200      	movs	r2, #0
 80110f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80110f8:	bf00      	nop
 80110fa:	3754      	adds	r7, #84	@ 0x54
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	effffffe 	.word	0xeffffffe

08011108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011108:	b480      	push	{r7}
 801110a:	b085      	sub	sp, #20
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011116:	2b01      	cmp	r3, #1
 8011118:	d101      	bne.n	801111e <HAL_UARTEx_DisableFifoMode+0x16>
 801111a:	2302      	movs	r3, #2
 801111c:	e027      	b.n	801116e <HAL_UARTEx_DisableFifoMode+0x66>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2201      	movs	r2, #1
 8011122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2224      	movs	r2, #36	@ 0x24
 801112a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	681a      	ldr	r2, [r3, #0]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f022 0201 	bic.w	r2, r2, #1
 8011144:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801114c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2220      	movs	r2, #32
 8011160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3714      	adds	r7, #20
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801118a:	2b01      	cmp	r3, #1
 801118c:	d101      	bne.n	8011192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801118e:	2302      	movs	r3, #2
 8011190:	e02d      	b.n	80111ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2224      	movs	r2, #36	@ 0x24
 801119e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	681a      	ldr	r2, [r3, #0]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f022 0201 	bic.w	r2, r2, #1
 80111b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	430a      	orrs	r2, r1
 80111cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f000 f850 	bl	8011274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2220      	movs	r2, #32
 80111e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111ec:	2300      	movs	r3, #0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3710      	adds	r7, #16
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111f6:	b580      	push	{r7, lr}
 80111f8:	b084      	sub	sp, #16
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
 80111fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011206:	2b01      	cmp	r3, #1
 8011208:	d101      	bne.n	801120e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801120a:	2302      	movs	r3, #2
 801120c:	e02d      	b.n	801126a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2201      	movs	r2, #1
 8011212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2224      	movs	r2, #36	@ 0x24
 801121a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f022 0201 	bic.w	r2, r2, #1
 8011234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	683a      	ldr	r2, [r7, #0]
 8011246:	430a      	orrs	r2, r1
 8011248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 f812 	bl	8011274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	68fa      	ldr	r2, [r7, #12]
 8011256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2220      	movs	r2, #32
 801125c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2200      	movs	r2, #0
 8011264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
	...

08011274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011280:	2b00      	cmp	r3, #0
 8011282:	d108      	bne.n	8011296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2201      	movs	r2, #1
 8011288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011294:	e031      	b.n	80112fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011296:	2310      	movs	r3, #16
 8011298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801129a:	2310      	movs	r3, #16
 801129c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	0e5b      	lsrs	r3, r3, #25
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	f003 0307 	and.w	r3, r3, #7
 80112ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	0f5b      	lsrs	r3, r3, #29
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f003 0307 	and.w	r3, r3, #7
 80112bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112be:	7bbb      	ldrb	r3, [r7, #14]
 80112c0:	7b3a      	ldrb	r2, [r7, #12]
 80112c2:	4911      	ldr	r1, [pc, #68]	@ (8011308 <UARTEx_SetNbDataToProcess+0x94>)
 80112c4:	5c8a      	ldrb	r2, [r1, r2]
 80112c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80112ca:	7b3a      	ldrb	r2, [r7, #12]
 80112cc:	490f      	ldr	r1, [pc, #60]	@ (801130c <UARTEx_SetNbDataToProcess+0x98>)
 80112ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	7b7a      	ldrb	r2, [r7, #13]
 80112e0:	4909      	ldr	r1, [pc, #36]	@ (8011308 <UARTEx_SetNbDataToProcess+0x94>)
 80112e2:	5c8a      	ldrb	r2, [r1, r2]
 80112e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112e8:	7b7a      	ldrb	r2, [r7, #13]
 80112ea:	4908      	ldr	r1, [pc, #32]	@ (801130c <UARTEx_SetNbDataToProcess+0x98>)
 80112ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80112fa:	bf00      	nop
 80112fc:	3714      	adds	r7, #20
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	08016288 	.word	0x08016288
 801130c:	08016290 	.word	0x08016290

08011310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011310:	b084      	sub	sp, #16
 8011312:	b580      	push	{r7, lr}
 8011314:	b084      	sub	sp, #16
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
 801131a:	f107 001c 	add.w	r0, r7, #28
 801131e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011322:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011326:	2b01      	cmp	r3, #1
 8011328:	d121      	bne.n	801136e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801132e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	68da      	ldr	r2, [r3, #12]
 801133a:	4b2c      	ldr	r3, [pc, #176]	@ (80113ec <USB_CoreInit+0xdc>)
 801133c:	4013      	ands	r3, r2
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	68db      	ldr	r3, [r3, #12]
 8011346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801134e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011352:	2b01      	cmp	r3, #1
 8011354:	d105      	bne.n	8011362 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f001 fafa 	bl	801295c <USB_CoreReset>
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]
 801136c:	e01b      	b.n	80113a6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f001 faee 	bl	801295c <USB_CoreReset>
 8011380:	4603      	mov	r3, r0
 8011382:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011384:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011388:	2b00      	cmp	r3, #0
 801138a:	d106      	bne.n	801139a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	639a      	str	r2, [r3, #56]	@ 0x38
 8011398:	e005      	b.n	80113a6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801139e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80113a6:	7fbb      	ldrb	r3, [r7, #30]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d116      	bne.n	80113da <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80113b0:	b29a      	uxth	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80113ba:	4b0d      	ldr	r3, [pc, #52]	@ (80113f0 <USB_CoreInit+0xe0>)
 80113bc:	4313      	orrs	r3, r2
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	f043 0206 	orr.w	r2, r3, #6
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	689b      	ldr	r3, [r3, #8]
 80113d2:	f043 0220 	orr.w	r2, r3, #32
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80113da:	7bfb      	ldrb	r3, [r7, #15]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113e6:	b004      	add	sp, #16
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	ffbdffbf 	.word	0xffbdffbf
 80113f0:	03ee0000 	.word	0x03ee0000

080113f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	4613      	mov	r3, r2
 8011400:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011402:	79fb      	ldrb	r3, [r7, #7]
 8011404:	2b02      	cmp	r3, #2
 8011406:	d165      	bne.n	80114d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	4a41      	ldr	r2, [pc, #260]	@ (8011510 <USB_SetTurnaroundTime+0x11c>)
 801140c:	4293      	cmp	r3, r2
 801140e:	d906      	bls.n	801141e <USB_SetTurnaroundTime+0x2a>
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	4a40      	ldr	r2, [pc, #256]	@ (8011514 <USB_SetTurnaroundTime+0x120>)
 8011414:	4293      	cmp	r3, r2
 8011416:	d202      	bcs.n	801141e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011418:	230f      	movs	r3, #15
 801141a:	617b      	str	r3, [r7, #20]
 801141c:	e062      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	4a3c      	ldr	r2, [pc, #240]	@ (8011514 <USB_SetTurnaroundTime+0x120>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d306      	bcc.n	8011434 <USB_SetTurnaroundTime+0x40>
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	4a3b      	ldr	r2, [pc, #236]	@ (8011518 <USB_SetTurnaroundTime+0x124>)
 801142a:	4293      	cmp	r3, r2
 801142c:	d202      	bcs.n	8011434 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801142e:	230e      	movs	r3, #14
 8011430:	617b      	str	r3, [r7, #20]
 8011432:	e057      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	4a38      	ldr	r2, [pc, #224]	@ (8011518 <USB_SetTurnaroundTime+0x124>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d306      	bcc.n	801144a <USB_SetTurnaroundTime+0x56>
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	4a37      	ldr	r2, [pc, #220]	@ (801151c <USB_SetTurnaroundTime+0x128>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d202      	bcs.n	801144a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011444:	230d      	movs	r3, #13
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	e04c      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	4a33      	ldr	r2, [pc, #204]	@ (801151c <USB_SetTurnaroundTime+0x128>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d306      	bcc.n	8011460 <USB_SetTurnaroundTime+0x6c>
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	4a32      	ldr	r2, [pc, #200]	@ (8011520 <USB_SetTurnaroundTime+0x12c>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d802      	bhi.n	8011460 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801145a:	230c      	movs	r3, #12
 801145c:	617b      	str	r3, [r7, #20]
 801145e:	e041      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	4a2f      	ldr	r2, [pc, #188]	@ (8011520 <USB_SetTurnaroundTime+0x12c>)
 8011464:	4293      	cmp	r3, r2
 8011466:	d906      	bls.n	8011476 <USB_SetTurnaroundTime+0x82>
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	4a2e      	ldr	r2, [pc, #184]	@ (8011524 <USB_SetTurnaroundTime+0x130>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d802      	bhi.n	8011476 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011470:	230b      	movs	r3, #11
 8011472:	617b      	str	r3, [r7, #20]
 8011474:	e036      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	4a2a      	ldr	r2, [pc, #168]	@ (8011524 <USB_SetTurnaroundTime+0x130>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d906      	bls.n	801148c <USB_SetTurnaroundTime+0x98>
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	4a29      	ldr	r2, [pc, #164]	@ (8011528 <USB_SetTurnaroundTime+0x134>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d802      	bhi.n	801148c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011486:	230a      	movs	r3, #10
 8011488:	617b      	str	r3, [r7, #20]
 801148a:	e02b      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	4a26      	ldr	r2, [pc, #152]	@ (8011528 <USB_SetTurnaroundTime+0x134>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d906      	bls.n	80114a2 <USB_SetTurnaroundTime+0xae>
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	4a25      	ldr	r2, [pc, #148]	@ (801152c <USB_SetTurnaroundTime+0x138>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d202      	bcs.n	80114a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801149c:	2309      	movs	r3, #9
 801149e:	617b      	str	r3, [r7, #20]
 80114a0:	e020      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	4a21      	ldr	r2, [pc, #132]	@ (801152c <USB_SetTurnaroundTime+0x138>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d306      	bcc.n	80114b8 <USB_SetTurnaroundTime+0xc4>
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	4a20      	ldr	r2, [pc, #128]	@ (8011530 <USB_SetTurnaroundTime+0x13c>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d802      	bhi.n	80114b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80114b2:	2308      	movs	r3, #8
 80114b4:	617b      	str	r3, [r7, #20]
 80114b6:	e015      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	4a1d      	ldr	r2, [pc, #116]	@ (8011530 <USB_SetTurnaroundTime+0x13c>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d906      	bls.n	80114ce <USB_SetTurnaroundTime+0xda>
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	4a1c      	ldr	r2, [pc, #112]	@ (8011534 <USB_SetTurnaroundTime+0x140>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d202      	bcs.n	80114ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80114c8:	2307      	movs	r3, #7
 80114ca:	617b      	str	r3, [r7, #20]
 80114cc:	e00a      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80114ce:	2306      	movs	r3, #6
 80114d0:	617b      	str	r3, [r7, #20]
 80114d2:	e007      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80114d4:	79fb      	ldrb	r3, [r7, #7]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d102      	bne.n	80114e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80114da:	2309      	movs	r3, #9
 80114dc:	617b      	str	r3, [r7, #20]
 80114de:	e001      	b.n	80114e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80114e0:	2309      	movs	r3, #9
 80114e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	68da      	ldr	r2, [r3, #12]
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	029b      	lsls	r3, r3, #10
 80114f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80114fc:	431a      	orrs	r2, r3
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	371c      	adds	r7, #28
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	00d8acbf 	.word	0x00d8acbf
 8011514:	00e4e1c0 	.word	0x00e4e1c0
 8011518:	00f42400 	.word	0x00f42400
 801151c:	01067380 	.word	0x01067380
 8011520:	011a499f 	.word	0x011a499f
 8011524:	01312cff 	.word	0x01312cff
 8011528:	014ca43f 	.word	0x014ca43f
 801152c:	016e3600 	.word	0x016e3600
 8011530:	01a6ab1f 	.word	0x01a6ab1f
 8011534:	01e84800 	.word	0x01e84800

08011538 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	f043 0201 	orr.w	r2, r3, #1
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr

0801155a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801155a:	b480      	push	{r7}
 801155c:	b083      	sub	sp, #12
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	f023 0201 	bic.w	r2, r3, #1
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801156e:	2300      	movs	r3, #0
}
 8011570:	4618      	mov	r0, r3
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr

0801157c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011588:	2300      	movs	r3, #0
 801158a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011598:	78fb      	ldrb	r3, [r7, #3]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d115      	bne.n	80115ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80115aa:	200a      	movs	r0, #10
 80115ac:	f7f0 ff2c 	bl	8002408 <HAL_Delay>
      ms += 10U;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	330a      	adds	r3, #10
 80115b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f001 f93f 	bl	801283a <USB_GetMode>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d01e      	beq.n	8011600 <USB_SetCurrentMode+0x84>
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80115c6:	d9f0      	bls.n	80115aa <USB_SetCurrentMode+0x2e>
 80115c8:	e01a      	b.n	8011600 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80115ca:	78fb      	ldrb	r3, [r7, #3]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d115      	bne.n	80115fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80115dc:	200a      	movs	r0, #10
 80115de:	f7f0 ff13 	bl	8002408 <HAL_Delay>
      ms += 10U;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	330a      	adds	r3, #10
 80115e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f001 f926 	bl	801283a <USB_GetMode>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d005      	beq.n	8011600 <USB_SetCurrentMode+0x84>
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80115f8:	d9f0      	bls.n	80115dc <USB_SetCurrentMode+0x60>
 80115fa:	e001      	b.n	8011600 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80115fc:	2301      	movs	r3, #1
 80115fe:	e005      	b.n	801160c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2bc8      	cmp	r3, #200	@ 0xc8
 8011604:	d101      	bne.n	801160a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011606:	2301      	movs	r3, #1
 8011608:	e000      	b.n	801160c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801160a:	2300      	movs	r3, #0
}
 801160c:	4618      	mov	r0, r3
 801160e:	3710      	adds	r7, #16
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011614:	b084      	sub	sp, #16
 8011616:	b580      	push	{r7, lr}
 8011618:	b086      	sub	sp, #24
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
 801161e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011626:	2300      	movs	r3, #0
 8011628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801162e:	2300      	movs	r3, #0
 8011630:	613b      	str	r3, [r7, #16]
 8011632:	e009      	b.n	8011648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	693b      	ldr	r3, [r7, #16]
 8011638:	3340      	adds	r3, #64	@ 0x40
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	4413      	add	r3, r2
 801163e:	2200      	movs	r2, #0
 8011640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	3301      	adds	r3, #1
 8011646:	613b      	str	r3, [r7, #16]
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	2b0e      	cmp	r3, #14
 801164c:	d9f2      	bls.n	8011634 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801164e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011652:	2b00      	cmp	r3, #0
 8011654:	d11c      	bne.n	8011690 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	68fa      	ldr	r2, [r7, #12]
 8011660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011664:	f043 0302 	orr.w	r3, r3, #2
 8011668:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801166e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	601a      	str	r2, [r3, #0]
 801168e:	e005      	b.n	801169c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011694:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80116a2:	461a      	mov	r2, r3
 80116a4:	2300      	movs	r3, #0
 80116a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80116a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d10d      	bne.n	80116cc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80116b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d104      	bne.n	80116c2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80116b8:	2100      	movs	r1, #0
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f968 	bl	8011990 <USB_SetDevSpeed>
 80116c0:	e008      	b.n	80116d4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80116c2:	2101      	movs	r1, #1
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 f963 	bl	8011990 <USB_SetDevSpeed>
 80116ca:	e003      	b.n	80116d4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80116cc:	2103      	movs	r1, #3
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 f95e 	bl	8011990 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80116d4:	2110      	movs	r1, #16
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f000 f8fa 	bl	80118d0 <USB_FlushTxFifo>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d001      	beq.n	80116e6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80116e2:	2301      	movs	r3, #1
 80116e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f000 f924 	bl	8011934 <USB_FlushRxFifo>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80116f2:	2301      	movs	r3, #1
 80116f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116fc:	461a      	mov	r2, r3
 80116fe:	2300      	movs	r3, #0
 8011700:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011708:	461a      	mov	r2, r3
 801170a:	2300      	movs	r3, #0
 801170c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011714:	461a      	mov	r2, r3
 8011716:	2300      	movs	r3, #0
 8011718:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801171a:	2300      	movs	r3, #0
 801171c:	613b      	str	r3, [r7, #16]
 801171e:	e043      	b.n	80117a8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	015a      	lsls	r2, r3, #5
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	4413      	add	r3, r2
 8011728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011732:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011736:	d118      	bne.n	801176a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d10a      	bne.n	8011754 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	015a      	lsls	r2, r3, #5
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	4413      	add	r3, r2
 8011746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801174a:	461a      	mov	r2, r3
 801174c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011750:	6013      	str	r3, [r2, #0]
 8011752:	e013      	b.n	801177c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	015a      	lsls	r2, r3, #5
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	4413      	add	r3, r2
 801175c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011760:	461a      	mov	r2, r3
 8011762:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011766:	6013      	str	r3, [r2, #0]
 8011768:	e008      	b.n	801177c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	015a      	lsls	r2, r3, #5
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	4413      	add	r3, r2
 8011772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011776:	461a      	mov	r2, r3
 8011778:	2300      	movs	r3, #0
 801177a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	015a      	lsls	r2, r3, #5
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	4413      	add	r3, r2
 8011784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011788:	461a      	mov	r2, r3
 801178a:	2300      	movs	r3, #0
 801178c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	015a      	lsls	r2, r3, #5
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	4413      	add	r3, r2
 8011796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801179a:	461a      	mov	r2, r3
 801179c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80117a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	3301      	adds	r3, #1
 80117a6:	613b      	str	r3, [r7, #16]
 80117a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80117ac:	461a      	mov	r2, r3
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d3b5      	bcc.n	8011720 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117b4:	2300      	movs	r3, #0
 80117b6:	613b      	str	r3, [r7, #16]
 80117b8:	e043      	b.n	8011842 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	015a      	lsls	r2, r3, #5
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	4413      	add	r3, r2
 80117c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80117d0:	d118      	bne.n	8011804 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d10a      	bne.n	80117ee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	015a      	lsls	r2, r3, #5
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	4413      	add	r3, r2
 80117e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117e4:	461a      	mov	r2, r3
 80117e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80117ea:	6013      	str	r3, [r2, #0]
 80117ec:	e013      	b.n	8011816 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	015a      	lsls	r2, r3, #5
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	4413      	add	r3, r2
 80117f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117fa:	461a      	mov	r2, r3
 80117fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011800:	6013      	str	r3, [r2, #0]
 8011802:	e008      	b.n	8011816 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	015a      	lsls	r2, r3, #5
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	4413      	add	r3, r2
 801180c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011810:	461a      	mov	r2, r3
 8011812:	2300      	movs	r3, #0
 8011814:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	015a      	lsls	r2, r3, #5
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	4413      	add	r3, r2
 801181e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011822:	461a      	mov	r2, r3
 8011824:	2300      	movs	r3, #0
 8011826:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	015a      	lsls	r2, r3, #5
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	4413      	add	r3, r2
 8011830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011834:	461a      	mov	r2, r3
 8011836:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801183a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	3301      	adds	r3, #1
 8011840:	613b      	str	r3, [r7, #16]
 8011842:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011846:	461a      	mov	r2, r3
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	4293      	cmp	r3, r2
 801184c:	d3b5      	bcc.n	80117ba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011854:	691b      	ldr	r3, [r3, #16]
 8011856:	68fa      	ldr	r2, [r7, #12]
 8011858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801185c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011860:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2200      	movs	r2, #0
 8011866:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801186e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011870:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011874:	2b00      	cmp	r3, #0
 8011876:	d105      	bne.n	8011884 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	699b      	ldr	r3, [r3, #24]
 801187c:	f043 0210 	orr.w	r2, r3, #16
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	699a      	ldr	r2, [r3, #24]
 8011888:	4b0f      	ldr	r3, [pc, #60]	@ (80118c8 <USB_DevInit+0x2b4>)
 801188a:	4313      	orrs	r3, r2
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011890:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011894:	2b00      	cmp	r3, #0
 8011896:	d005      	beq.n	80118a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	699b      	ldr	r3, [r3, #24]
 801189c:	f043 0208 	orr.w	r2, r3, #8
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80118a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d105      	bne.n	80118b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	699a      	ldr	r2, [r3, #24]
 80118b0:	4b06      	ldr	r3, [pc, #24]	@ (80118cc <USB_DevInit+0x2b8>)
 80118b2:	4313      	orrs	r3, r2
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80118b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3718      	adds	r7, #24
 80118be:	46bd      	mov	sp, r7
 80118c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80118c4:	b004      	add	sp, #16
 80118c6:	4770      	bx	lr
 80118c8:	803c3800 	.word	0x803c3800
 80118cc:	40000004 	.word	0x40000004

080118d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b085      	sub	sp, #20
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80118da:	2300      	movs	r3, #0
 80118dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	3301      	adds	r3, #1
 80118e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80118ea:	d901      	bls.n	80118f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80118ec:	2303      	movs	r3, #3
 80118ee:	e01b      	b.n	8011928 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	691b      	ldr	r3, [r3, #16]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	daf2      	bge.n	80118de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80118f8:	2300      	movs	r3, #0
 80118fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	019b      	lsls	r3, r3, #6
 8011900:	f043 0220 	orr.w	r2, r3, #32
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	3301      	adds	r3, #1
 801190c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011914:	d901      	bls.n	801191a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011916:	2303      	movs	r3, #3
 8011918:	e006      	b.n	8011928 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	f003 0320 	and.w	r3, r3, #32
 8011922:	2b20      	cmp	r3, #32
 8011924:	d0f0      	beq.n	8011908 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011926:	2300      	movs	r3, #0
}
 8011928:	4618      	mov	r0, r3
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr

08011934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801193c:	2300      	movs	r3, #0
 801193e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	3301      	adds	r3, #1
 8011944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801194c:	d901      	bls.n	8011952 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801194e:	2303      	movs	r3, #3
 8011950:	e018      	b.n	8011984 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	2b00      	cmp	r3, #0
 8011958:	daf2      	bge.n	8011940 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801195a:	2300      	movs	r3, #0
 801195c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2210      	movs	r2, #16
 8011962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	3301      	adds	r3, #1
 8011968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011970:	d901      	bls.n	8011976 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011972:	2303      	movs	r3, #3
 8011974:	e006      	b.n	8011984 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	f003 0310 	and.w	r3, r3, #16
 801197e:	2b10      	cmp	r3, #16
 8011980:	d0f0      	beq.n	8011964 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011990:	b480      	push	{r7}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	460b      	mov	r3, r1
 801199a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	78fb      	ldrb	r3, [r7, #3]
 80119aa:	68f9      	ldr	r1, [r7, #12]
 80119ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80119b0:	4313      	orrs	r3, r2
 80119b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr

080119c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80119c2:	b480      	push	{r7}
 80119c4:	b087      	sub	sp, #28
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	f003 0306 	and.w	r3, r3, #6
 80119da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d102      	bne.n	80119e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80119e2:	2300      	movs	r3, #0
 80119e4:	75fb      	strb	r3, [r7, #23]
 80119e6:	e00a      	b.n	80119fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d002      	beq.n	80119f4 <USB_GetDevSpeed+0x32>
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2b06      	cmp	r3, #6
 80119f2:	d102      	bne.n	80119fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80119f4:	2302      	movs	r3, #2
 80119f6:	75fb      	strb	r3, [r7, #23]
 80119f8:	e001      	b.n	80119fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80119fa:	230f      	movs	r3, #15
 80119fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80119fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	371c      	adds	r7, #28
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b085      	sub	sp, #20
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	785b      	ldrb	r3, [r3, #1]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d139      	bne.n	8011a9c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a2e:	69da      	ldr	r2, [r3, #28]
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	f003 030f 	and.w	r3, r3, #15
 8011a38:	2101      	movs	r1, #1
 8011a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	68f9      	ldr	r1, [r7, #12]
 8011a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011a46:	4313      	orrs	r3, r2
 8011a48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	015a      	lsls	r2, r3, #5
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	4413      	add	r3, r2
 8011a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d153      	bne.n	8011b08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	015a      	lsls	r2, r3, #5
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	4413      	add	r3, r2
 8011a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	689b      	ldr	r3, [r3, #8]
 8011a72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	791b      	ldrb	r3, [r3, #4]
 8011a7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	059b      	lsls	r3, r3, #22
 8011a82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a84:	431a      	orrs	r2, r3
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	0159      	lsls	r1, r3, #5
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	440b      	add	r3, r1
 8011a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a92:	4619      	mov	r1, r3
 8011a94:	4b20      	ldr	r3, [pc, #128]	@ (8011b18 <USB_ActivateEndpoint+0x10c>)
 8011a96:	4313      	orrs	r3, r2
 8011a98:	600b      	str	r3, [r1, #0]
 8011a9a:	e035      	b.n	8011b08 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011aa2:	69da      	ldr	r2, [r3, #28]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	f003 030f 	and.w	r3, r3, #15
 8011aac:	2101      	movs	r1, #1
 8011aae:	fa01 f303 	lsl.w	r3, r1, r3
 8011ab2:	041b      	lsls	r3, r3, #16
 8011ab4:	68f9      	ldr	r1, [r7, #12]
 8011ab6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011aba:	4313      	orrs	r3, r2
 8011abc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	015a      	lsls	r2, r3, #5
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d119      	bne.n	8011b08 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	015a      	lsls	r2, r3, #5
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	4413      	add	r3, r2
 8011adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	791b      	ldrb	r3, [r3, #4]
 8011aee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011af0:	430b      	orrs	r3, r1
 8011af2:	431a      	orrs	r2, r3
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	0159      	lsls	r1, r3, #5
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	440b      	add	r3, r1
 8011afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b00:	4619      	mov	r1, r3
 8011b02:	4b05      	ldr	r3, [pc, #20]	@ (8011b18 <USB_ActivateEndpoint+0x10c>)
 8011b04:	4313      	orrs	r3, r2
 8011b06:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011b08:	2300      	movs	r3, #0
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop
 8011b18:	10008000 	.word	0x10008000

08011b1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	785b      	ldrb	r3, [r3, #1]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d161      	bne.n	8011bfc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	015a      	lsls	r2, r3, #5
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	4413      	add	r3, r2
 8011b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b4e:	d11f      	bne.n	8011b90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	015a      	lsls	r2, r3, #5
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	4413      	add	r3, r2
 8011b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	68ba      	ldr	r2, [r7, #8]
 8011b60:	0151      	lsls	r1, r2, #5
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	440a      	add	r2, r1
 8011b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011b6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	015a      	lsls	r2, r3, #5
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	4413      	add	r3, r2
 8011b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	0151      	lsls	r1, r2, #5
 8011b82:	68fa      	ldr	r2, [r7, #12]
 8011b84:	440a      	add	r2, r1
 8011b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	f003 030f 	and.w	r3, r3, #15
 8011ba0:	2101      	movs	r1, #1
 8011ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	43db      	mvns	r3, r3
 8011baa:	68f9      	ldr	r1, [r7, #12]
 8011bac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011bb0:	4013      	ands	r3, r2
 8011bb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bba:	69da      	ldr	r2, [r3, #28]
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	f003 030f 	and.w	r3, r3, #15
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	43db      	mvns	r3, r3
 8011bce:	68f9      	ldr	r1, [r7, #12]
 8011bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011bd4:	4013      	ands	r3, r2
 8011bd6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	015a      	lsls	r2, r3, #5
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	4413      	add	r3, r2
 8011be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	0159      	lsls	r1, r3, #5
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	440b      	add	r3, r1
 8011bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	4b35      	ldr	r3, [pc, #212]	@ (8011ccc <USB_DeactivateEndpoint+0x1b0>)
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	600b      	str	r3, [r1, #0]
 8011bfa:	e060      	b.n	8011cbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	015a      	lsls	r2, r3, #5
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4413      	add	r3, r2
 8011c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011c12:	d11f      	bne.n	8011c54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	015a      	lsls	r2, r3, #5
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	0151      	lsls	r1, r2, #5
 8011c26:	68fa      	ldr	r2, [r7, #12]
 8011c28:	440a      	add	r2, r1
 8011c2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011c2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011c32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	015a      	lsls	r2, r3, #5
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	4413      	add	r3, r2
 8011c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	0151      	lsls	r1, r2, #5
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	440a      	add	r2, r1
 8011c4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011c4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	f003 030f 	and.w	r3, r3, #15
 8011c64:	2101      	movs	r1, #1
 8011c66:	fa01 f303 	lsl.w	r3, r1, r3
 8011c6a:	041b      	lsls	r3, r3, #16
 8011c6c:	43db      	mvns	r3, r3
 8011c6e:	68f9      	ldr	r1, [r7, #12]
 8011c70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c74:	4013      	ands	r3, r2
 8011c76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c7e:	69da      	ldr	r2, [r3, #28]
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	f003 030f 	and.w	r3, r3, #15
 8011c88:	2101      	movs	r1, #1
 8011c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8011c8e:	041b      	lsls	r3, r3, #16
 8011c90:	43db      	mvns	r3, r3
 8011c92:	68f9      	ldr	r1, [r7, #12]
 8011c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c98:	4013      	ands	r3, r2
 8011c9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	015a      	lsls	r2, r3, #5
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	0159      	lsls	r1, r3, #5
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	440b      	add	r3, r1
 8011cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	4b05      	ldr	r3, [pc, #20]	@ (8011cd0 <USB_DeactivateEndpoint+0x1b4>)
 8011cba:	4013      	ands	r3, r2
 8011cbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011cbe:	2300      	movs	r3, #0
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cca:	4770      	bx	lr
 8011ccc:	ec337800 	.word	0xec337800
 8011cd0:	eff37800 	.word	0xeff37800

08011cd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b08a      	sub	sp, #40	@ 0x28
 8011cd8:	af02      	add	r7, sp, #8
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	60b9      	str	r1, [r7, #8]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	785b      	ldrb	r3, [r3, #1]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	f040 8185 	bne.w	8012000 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	691b      	ldr	r3, [r3, #16]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d132      	bne.n	8011d64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011cfe:	69bb      	ldr	r3, [r7, #24]
 8011d00:	015a      	lsls	r2, r3, #5
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	4413      	add	r3, r2
 8011d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d0a:	691a      	ldr	r2, [r3, #16]
 8011d0c:	69bb      	ldr	r3, [r7, #24]
 8011d0e:	0159      	lsls	r1, r3, #5
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	440b      	add	r3, r1
 8011d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d18:	4619      	mov	r1, r3
 8011d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8011fb8 <USB_EPStartXfer+0x2e4>)
 8011d1c:	4013      	ands	r3, r2
 8011d1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	015a      	lsls	r2, r3, #5
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	4413      	add	r3, r2
 8011d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d2c:	691b      	ldr	r3, [r3, #16]
 8011d2e:	69ba      	ldr	r2, [r7, #24]
 8011d30:	0151      	lsls	r1, r2, #5
 8011d32:	69fa      	ldr	r2, [r7, #28]
 8011d34:	440a      	add	r2, r1
 8011d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	015a      	lsls	r2, r3, #5
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	4413      	add	r3, r2
 8011d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d4c:	691a      	ldr	r2, [r3, #16]
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	0159      	lsls	r1, r3, #5
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	440b      	add	r3, r1
 8011d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	4b97      	ldr	r3, [pc, #604]	@ (8011fbc <USB_EPStartXfer+0x2e8>)
 8011d5e:	4013      	ands	r3, r2
 8011d60:	610b      	str	r3, [r1, #16]
 8011d62:	e097      	b.n	8011e94 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	015a      	lsls	r2, r3, #5
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d70:	691a      	ldr	r2, [r3, #16]
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	0159      	lsls	r1, r3, #5
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	440b      	add	r3, r1
 8011d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d7e:	4619      	mov	r1, r3
 8011d80:	4b8e      	ldr	r3, [pc, #568]	@ (8011fbc <USB_EPStartXfer+0x2e8>)
 8011d82:	4013      	ands	r3, r2
 8011d84:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	015a      	lsls	r2, r3, #5
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d92:	691a      	ldr	r2, [r3, #16]
 8011d94:	69bb      	ldr	r3, [r7, #24]
 8011d96:	0159      	lsls	r1, r3, #5
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	440b      	add	r3, r1
 8011d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011da0:	4619      	mov	r1, r3
 8011da2:	4b85      	ldr	r3, [pc, #532]	@ (8011fb8 <USB_EPStartXfer+0x2e4>)
 8011da4:	4013      	ands	r3, r2
 8011da6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d11a      	bne.n	8011de4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	691a      	ldr	r2, [r3, #16]
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	689b      	ldr	r3, [r3, #8]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d903      	bls.n	8011dc2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	689a      	ldr	r2, [r3, #8]
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	015a      	lsls	r2, r3, #5
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	4413      	add	r3, r2
 8011dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011dce:	691b      	ldr	r3, [r3, #16]
 8011dd0:	69ba      	ldr	r2, [r7, #24]
 8011dd2:	0151      	lsls	r1, r2, #5
 8011dd4:	69fa      	ldr	r2, [r7, #28]
 8011dd6:	440a      	add	r2, r1
 8011dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ddc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011de0:	6113      	str	r3, [r2, #16]
 8011de2:	e044      	b.n	8011e6e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	691a      	ldr	r2, [r3, #16]
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	689b      	ldr	r3, [r3, #8]
 8011dec:	4413      	add	r3, r2
 8011dee:	1e5a      	subs	r2, r3, #1
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8011df8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8011dfa:	69bb      	ldr	r3, [r7, #24]
 8011dfc:	015a      	lsls	r2, r3, #5
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	4413      	add	r3, r2
 8011e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e06:	691a      	ldr	r2, [r3, #16]
 8011e08:	8afb      	ldrh	r3, [r7, #22]
 8011e0a:	04d9      	lsls	r1, r3, #19
 8011e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8011fc0 <USB_EPStartXfer+0x2ec>)
 8011e0e:	400b      	ands	r3, r1
 8011e10:	69b9      	ldr	r1, [r7, #24]
 8011e12:	0148      	lsls	r0, r1, #5
 8011e14:	69f9      	ldr	r1, [r7, #28]
 8011e16:	4401      	add	r1, r0
 8011e18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011e1c:	4313      	orrs	r3, r2
 8011e1e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	791b      	ldrb	r3, [r3, #4]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d122      	bne.n	8011e6e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	015a      	lsls	r2, r3, #5
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	4413      	add	r3, r2
 8011e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e34:	691b      	ldr	r3, [r3, #16]
 8011e36:	69ba      	ldr	r2, [r7, #24]
 8011e38:	0151      	lsls	r1, r2, #5
 8011e3a:	69fa      	ldr	r2, [r7, #28]
 8011e3c:	440a      	add	r2, r1
 8011e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e42:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011e46:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	015a      	lsls	r2, r3, #5
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e54:	691a      	ldr	r2, [r3, #16]
 8011e56:	8afb      	ldrh	r3, [r7, #22]
 8011e58:	075b      	lsls	r3, r3, #29
 8011e5a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8011e5e:	69b9      	ldr	r1, [r7, #24]
 8011e60:	0148      	lsls	r0, r1, #5
 8011e62:	69f9      	ldr	r1, [r7, #28]
 8011e64:	4401      	add	r1, r0
 8011e66:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011e6a:	4313      	orrs	r3, r2
 8011e6c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011e6e:	69bb      	ldr	r3, [r7, #24]
 8011e70:	015a      	lsls	r2, r3, #5
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	4413      	add	r3, r2
 8011e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e7a:	691a      	ldr	r2, [r3, #16]
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	691b      	ldr	r3, [r3, #16]
 8011e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e84:	69b9      	ldr	r1, [r7, #24]
 8011e86:	0148      	lsls	r0, r1, #5
 8011e88:	69f9      	ldr	r1, [r7, #28]
 8011e8a:	4401      	add	r1, r0
 8011e8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011e90:	4313      	orrs	r3, r2
 8011e92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011e94:	79fb      	ldrb	r3, [r7, #7]
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d14b      	bne.n	8011f32 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	69db      	ldr	r3, [r3, #28]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d009      	beq.n	8011eb6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	015a      	lsls	r2, r3, #5
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011eae:	461a      	mov	r2, r3
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	69db      	ldr	r3, [r3, #28]
 8011eb4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	791b      	ldrb	r3, [r3, #4]
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	d128      	bne.n	8011f10 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ec4:	689b      	ldr	r3, [r3, #8]
 8011ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d110      	bne.n	8011ef0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	015a      	lsls	r2, r3, #5
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	69ba      	ldr	r2, [r7, #24]
 8011ede:	0151      	lsls	r1, r2, #5
 8011ee0:	69fa      	ldr	r2, [r7, #28]
 8011ee2:	440a      	add	r2, r1
 8011ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011eec:	6013      	str	r3, [r2, #0]
 8011eee:	e00f      	b.n	8011f10 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	015a      	lsls	r2, r3, #5
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	69ba      	ldr	r2, [r7, #24]
 8011f00:	0151      	lsls	r1, r2, #5
 8011f02:	69fa      	ldr	r2, [r7, #28]
 8011f04:	440a      	add	r2, r1
 8011f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011f0e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f10:	69bb      	ldr	r3, [r7, #24]
 8011f12:	015a      	lsls	r2, r3, #5
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	4413      	add	r3, r2
 8011f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	69ba      	ldr	r2, [r7, #24]
 8011f20:	0151      	lsls	r1, r2, #5
 8011f22:	69fa      	ldr	r2, [r7, #28]
 8011f24:	440a      	add	r2, r1
 8011f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011f2e:	6013      	str	r3, [r2, #0]
 8011f30:	e169      	b.n	8012206 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	015a      	lsls	r2, r3, #5
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	4413      	add	r3, r2
 8011f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	69ba      	ldr	r2, [r7, #24]
 8011f42:	0151      	lsls	r1, r2, #5
 8011f44:	69fa      	ldr	r2, [r7, #28]
 8011f46:	440a      	add	r2, r1
 8011f48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011f50:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	791b      	ldrb	r3, [r3, #4]
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	d015      	beq.n	8011f86 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	691b      	ldr	r3, [r3, #16]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	f000 8151 	beq.w	8012206 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	f003 030f 	and.w	r3, r3, #15
 8011f74:	2101      	movs	r1, #1
 8011f76:	fa01 f303 	lsl.w	r3, r1, r3
 8011f7a:	69f9      	ldr	r1, [r7, #28]
 8011f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011f80:	4313      	orrs	r3, r2
 8011f82:	634b      	str	r3, [r1, #52]	@ 0x34
 8011f84:	e13f      	b.n	8012206 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011f8c:	689b      	ldr	r3, [r3, #8]
 8011f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d116      	bne.n	8011fc4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011f96:	69bb      	ldr	r3, [r7, #24]
 8011f98:	015a      	lsls	r2, r3, #5
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	4413      	add	r3, r2
 8011f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	69ba      	ldr	r2, [r7, #24]
 8011fa6:	0151      	lsls	r1, r2, #5
 8011fa8:	69fa      	ldr	r2, [r7, #28]
 8011faa:	440a      	add	r2, r1
 8011fac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011fb4:	6013      	str	r3, [r2, #0]
 8011fb6:	e015      	b.n	8011fe4 <USB_EPStartXfer+0x310>
 8011fb8:	e007ffff 	.word	0xe007ffff
 8011fbc:	fff80000 	.word	0xfff80000
 8011fc0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	015a      	lsls	r2, r3, #5
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	4413      	add	r3, r2
 8011fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	69ba      	ldr	r2, [r7, #24]
 8011fd4:	0151      	lsls	r1, r2, #5
 8011fd6:	69fa      	ldr	r2, [r7, #28]
 8011fd8:	440a      	add	r2, r1
 8011fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011fe2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	68d9      	ldr	r1, [r3, #12]
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	781a      	ldrb	r2, [r3, #0]
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	691b      	ldr	r3, [r3, #16]
 8011ff0:	b298      	uxth	r0, r3
 8011ff2:	79fb      	ldrb	r3, [r7, #7]
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	f000 f9b9 	bl	8012370 <USB_WritePacket>
 8011ffe:	e102      	b.n	8012206 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012000:	69bb      	ldr	r3, [r7, #24]
 8012002:	015a      	lsls	r2, r3, #5
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	4413      	add	r3, r2
 8012008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801200c:	691a      	ldr	r2, [r3, #16]
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	0159      	lsls	r1, r3, #5
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	440b      	add	r3, r1
 8012016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801201a:	4619      	mov	r1, r3
 801201c:	4b7c      	ldr	r3, [pc, #496]	@ (8012210 <USB_EPStartXfer+0x53c>)
 801201e:	4013      	ands	r3, r2
 8012020:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012022:	69bb      	ldr	r3, [r7, #24]
 8012024:	015a      	lsls	r2, r3, #5
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	4413      	add	r3, r2
 801202a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801202e:	691a      	ldr	r2, [r3, #16]
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	0159      	lsls	r1, r3, #5
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	440b      	add	r3, r1
 8012038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801203c:	4619      	mov	r1, r3
 801203e:	4b75      	ldr	r3, [pc, #468]	@ (8012214 <USB_EPStartXfer+0x540>)
 8012040:	4013      	ands	r3, r2
 8012042:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d12f      	bne.n	80120aa <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	691b      	ldr	r3, [r3, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d003      	beq.n	801205a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	689a      	ldr	r2, [r3, #8]
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	689a      	ldr	r2, [r3, #8]
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	015a      	lsls	r2, r3, #5
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	4413      	add	r3, r2
 801206a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801206e:	691a      	ldr	r2, [r3, #16]
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	6a1b      	ldr	r3, [r3, #32]
 8012074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012078:	69b9      	ldr	r1, [r7, #24]
 801207a:	0148      	lsls	r0, r1, #5
 801207c:	69f9      	ldr	r1, [r7, #28]
 801207e:	4401      	add	r1, r0
 8012080:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012084:	4313      	orrs	r3, r2
 8012086:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012088:	69bb      	ldr	r3, [r7, #24]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012094:	691b      	ldr	r3, [r3, #16]
 8012096:	69ba      	ldr	r2, [r7, #24]
 8012098:	0151      	lsls	r1, r2, #5
 801209a:	69fa      	ldr	r2, [r7, #28]
 801209c:	440a      	add	r2, r1
 801209e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80120a6:	6113      	str	r3, [r2, #16]
 80120a8:	e05f      	b.n	801216a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d123      	bne.n	80120fa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	015a      	lsls	r2, r3, #5
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	4413      	add	r3, r2
 80120ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120be:	691a      	ldr	r2, [r3, #16]
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120c8:	69b9      	ldr	r1, [r7, #24]
 80120ca:	0148      	lsls	r0, r1, #5
 80120cc:	69f9      	ldr	r1, [r7, #28]
 80120ce:	4401      	add	r1, r0
 80120d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80120d4:	4313      	orrs	r3, r2
 80120d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	015a      	lsls	r2, r3, #5
 80120dc:	69fb      	ldr	r3, [r7, #28]
 80120de:	4413      	add	r3, r2
 80120e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	69ba      	ldr	r2, [r7, #24]
 80120e8:	0151      	lsls	r1, r2, #5
 80120ea:	69fa      	ldr	r2, [r7, #28]
 80120ec:	440a      	add	r2, r1
 80120ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80120f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80120f6:	6113      	str	r3, [r2, #16]
 80120f8:	e037      	b.n	801216a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	691a      	ldr	r2, [r3, #16]
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	689b      	ldr	r3, [r3, #8]
 8012102:	4413      	add	r3, r2
 8012104:	1e5a      	subs	r2, r3, #1
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	fbb2 f3f3 	udiv	r3, r2, r3
 801210e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	689b      	ldr	r3, [r3, #8]
 8012114:	8afa      	ldrh	r2, [r7, #22]
 8012116:	fb03 f202 	mul.w	r2, r3, r2
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	015a      	lsls	r2, r3, #5
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	4413      	add	r3, r2
 8012126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801212a:	691a      	ldr	r2, [r3, #16]
 801212c:	8afb      	ldrh	r3, [r7, #22]
 801212e:	04d9      	lsls	r1, r3, #19
 8012130:	4b39      	ldr	r3, [pc, #228]	@ (8012218 <USB_EPStartXfer+0x544>)
 8012132:	400b      	ands	r3, r1
 8012134:	69b9      	ldr	r1, [r7, #24]
 8012136:	0148      	lsls	r0, r1, #5
 8012138:	69f9      	ldr	r1, [r7, #28]
 801213a:	4401      	add	r1, r0
 801213c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012140:	4313      	orrs	r3, r2
 8012142:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	015a      	lsls	r2, r3, #5
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	4413      	add	r3, r2
 801214c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012150:	691a      	ldr	r2, [r3, #16]
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	6a1b      	ldr	r3, [r3, #32]
 8012156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801215a:	69b9      	ldr	r1, [r7, #24]
 801215c:	0148      	lsls	r0, r1, #5
 801215e:	69f9      	ldr	r1, [r7, #28]
 8012160:	4401      	add	r1, r0
 8012162:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012166:	4313      	orrs	r3, r2
 8012168:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801216a:	79fb      	ldrb	r3, [r7, #7]
 801216c:	2b01      	cmp	r3, #1
 801216e:	d10d      	bne.n	801218c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d009      	beq.n	801218c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	68d9      	ldr	r1, [r3, #12]
 801217c:	69bb      	ldr	r3, [r7, #24]
 801217e:	015a      	lsls	r2, r3, #5
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	4413      	add	r3, r2
 8012184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012188:	460a      	mov	r2, r1
 801218a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	791b      	ldrb	r3, [r3, #4]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d128      	bne.n	80121e6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801219a:	689b      	ldr	r3, [r3, #8]
 801219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d110      	bne.n	80121c6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	015a      	lsls	r2, r3, #5
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	4413      	add	r3, r2
 80121ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	69ba      	ldr	r2, [r7, #24]
 80121b4:	0151      	lsls	r1, r2, #5
 80121b6:	69fa      	ldr	r2, [r7, #28]
 80121b8:	440a      	add	r2, r1
 80121ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	e00f      	b.n	80121e6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	015a      	lsls	r2, r3, #5
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	4413      	add	r3, r2
 80121ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	69ba      	ldr	r2, [r7, #24]
 80121d6:	0151      	lsls	r1, r2, #5
 80121d8:	69fa      	ldr	r2, [r7, #28]
 80121da:	440a      	add	r2, r1
 80121dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80121e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80121e6:	69bb      	ldr	r3, [r7, #24]
 80121e8:	015a      	lsls	r2, r3, #5
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	4413      	add	r3, r2
 80121ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	69ba      	ldr	r2, [r7, #24]
 80121f6:	0151      	lsls	r1, r2, #5
 80121f8:	69fa      	ldr	r2, [r7, #28]
 80121fa:	440a      	add	r2, r1
 80121fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012200:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012204:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012206:	2300      	movs	r3, #0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3720      	adds	r7, #32
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	fff80000 	.word	0xfff80000
 8012214:	e007ffff 	.word	0xe007ffff
 8012218:	1ff80000 	.word	0x1ff80000

0801221c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801221c:	b480      	push	{r7}
 801221e:	b087      	sub	sp, #28
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012226:	2300      	movs	r3, #0
 8012228:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801222a:	2300      	movs	r3, #0
 801222c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	785b      	ldrb	r3, [r3, #1]
 8012236:	2b01      	cmp	r3, #1
 8012238:	d14a      	bne.n	80122d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	015a      	lsls	r2, r3, #5
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	4413      	add	r3, r2
 8012244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801224e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012252:	f040 8086 	bne.w	8012362 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	015a      	lsls	r2, r3, #5
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	4413      	add	r3, r2
 8012260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	683a      	ldr	r2, [r7, #0]
 8012268:	7812      	ldrb	r2, [r2, #0]
 801226a:	0151      	lsls	r1, r2, #5
 801226c:	693a      	ldr	r2, [r7, #16]
 801226e:	440a      	add	r2, r1
 8012270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012274:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012278:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	015a      	lsls	r2, r3, #5
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	4413      	add	r3, r2
 8012284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	683a      	ldr	r2, [r7, #0]
 801228c:	7812      	ldrb	r2, [r2, #0]
 801228e:	0151      	lsls	r1, r2, #5
 8012290:	693a      	ldr	r2, [r7, #16]
 8012292:	440a      	add	r2, r1
 8012294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012298:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801229c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	3301      	adds	r3, #1
 80122a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d902      	bls.n	80122b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80122ae:	2301      	movs	r3, #1
 80122b0:	75fb      	strb	r3, [r7, #23]
          break;
 80122b2:	e056      	b.n	8012362 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	015a      	lsls	r2, r3, #5
 80122ba:	693b      	ldr	r3, [r7, #16]
 80122bc:	4413      	add	r3, r2
 80122be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80122c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80122cc:	d0e7      	beq.n	801229e <USB_EPStopXfer+0x82>
 80122ce:	e048      	b.n	8012362 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	015a      	lsls	r2, r3, #5
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	4413      	add	r3, r2
 80122da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80122e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80122e8:	d13b      	bne.n	8012362 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	015a      	lsls	r2, r3, #5
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	4413      	add	r3, r2
 80122f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	683a      	ldr	r2, [r7, #0]
 80122fc:	7812      	ldrb	r2, [r2, #0]
 80122fe:	0151      	lsls	r1, r2, #5
 8012300:	693a      	ldr	r2, [r7, #16]
 8012302:	440a      	add	r2, r1
 8012304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012308:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801230c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	015a      	lsls	r2, r3, #5
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	4413      	add	r3, r2
 8012318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	683a      	ldr	r2, [r7, #0]
 8012320:	7812      	ldrb	r2, [r2, #0]
 8012322:	0151      	lsls	r1, r2, #5
 8012324:	693a      	ldr	r2, [r7, #16]
 8012326:	440a      	add	r2, r1
 8012328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801232c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	3301      	adds	r3, #1
 8012336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801233e:	4293      	cmp	r3, r2
 8012340:	d902      	bls.n	8012348 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012342:	2301      	movs	r3, #1
 8012344:	75fb      	strb	r3, [r7, #23]
          break;
 8012346:	e00c      	b.n	8012362 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	015a      	lsls	r2, r3, #5
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	4413      	add	r3, r2
 8012352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801235c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012360:	d0e7      	beq.n	8012332 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012362:	7dfb      	ldrb	r3, [r7, #23]
}
 8012364:	4618      	mov	r0, r3
 8012366:	371c      	adds	r7, #28
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr

08012370 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012370:	b480      	push	{r7}
 8012372:	b089      	sub	sp, #36	@ 0x24
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	4611      	mov	r1, r2
 801237c:	461a      	mov	r2, r3
 801237e:	460b      	mov	r3, r1
 8012380:	71fb      	strb	r3, [r7, #7]
 8012382:	4613      	mov	r3, r2
 8012384:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801238e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012392:	2b00      	cmp	r3, #0
 8012394:	d123      	bne.n	80123de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012396:	88bb      	ldrh	r3, [r7, #4]
 8012398:	3303      	adds	r3, #3
 801239a:	089b      	lsrs	r3, r3, #2
 801239c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801239e:	2300      	movs	r3, #0
 80123a0:	61bb      	str	r3, [r7, #24]
 80123a2:	e018      	b.n	80123d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80123a4:	79fb      	ldrb	r3, [r7, #7]
 80123a6:	031a      	lsls	r2, r3, #12
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	4413      	add	r3, r2
 80123ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80123b0:	461a      	mov	r2, r3
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	3301      	adds	r3, #1
 80123bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	3301      	adds	r3, #1
 80123c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	3301      	adds	r3, #1
 80123c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	3301      	adds	r3, #1
 80123ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	3301      	adds	r3, #1
 80123d4:	61bb      	str	r3, [r7, #24]
 80123d6:	69ba      	ldr	r2, [r7, #24]
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d3e2      	bcc.n	80123a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3724      	adds	r7, #36	@ 0x24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b08b      	sub	sp, #44	@ 0x2c
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	4613      	mov	r3, r2
 80123f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012402:	88fb      	ldrh	r3, [r7, #6]
 8012404:	089b      	lsrs	r3, r3, #2
 8012406:	b29b      	uxth	r3, r3
 8012408:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801240a:	88fb      	ldrh	r3, [r7, #6]
 801240c:	f003 0303 	and.w	r3, r3, #3
 8012410:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012412:	2300      	movs	r3, #0
 8012414:	623b      	str	r3, [r7, #32]
 8012416:	e014      	b.n	8012442 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012418:	69bb      	ldr	r3, [r7, #24]
 801241a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012422:	601a      	str	r2, [r3, #0]
    pDest++;
 8012424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012426:	3301      	adds	r3, #1
 8012428:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242c:	3301      	adds	r3, #1
 801242e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012432:	3301      	adds	r3, #1
 8012434:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012438:	3301      	adds	r3, #1
 801243a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801243c:	6a3b      	ldr	r3, [r7, #32]
 801243e:	3301      	adds	r3, #1
 8012440:	623b      	str	r3, [r7, #32]
 8012442:	6a3a      	ldr	r2, [r7, #32]
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	429a      	cmp	r2, r3
 8012448:	d3e6      	bcc.n	8012418 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801244a:	8bfb      	ldrh	r3, [r7, #30]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d01e      	beq.n	801248e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012450:	2300      	movs	r3, #0
 8012452:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801245a:	461a      	mov	r2, r3
 801245c:	f107 0310 	add.w	r3, r7, #16
 8012460:	6812      	ldr	r2, [r2, #0]
 8012462:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012464:	693a      	ldr	r2, [r7, #16]
 8012466:	6a3b      	ldr	r3, [r7, #32]
 8012468:	b2db      	uxtb	r3, r3
 801246a:	00db      	lsls	r3, r3, #3
 801246c:	fa22 f303 	lsr.w	r3, r2, r3
 8012470:	b2da      	uxtb	r2, r3
 8012472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012474:	701a      	strb	r2, [r3, #0]
      i++;
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	3301      	adds	r3, #1
 801247a:	623b      	str	r3, [r7, #32]
      pDest++;
 801247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801247e:	3301      	adds	r3, #1
 8012480:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8012482:	8bfb      	ldrh	r3, [r7, #30]
 8012484:	3b01      	subs	r3, #1
 8012486:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012488:	8bfb      	ldrh	r3, [r7, #30]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d1ea      	bne.n	8012464 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012490:	4618      	mov	r0, r3
 8012492:	372c      	adds	r7, #44	@ 0x2c
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr

0801249c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801249c:	b480      	push	{r7}
 801249e:	b085      	sub	sp, #20
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	785b      	ldrb	r3, [r3, #1]
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d12c      	bne.n	8012512 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	015a      	lsls	r2, r3, #5
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4413      	add	r3, r2
 80124c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	db12      	blt.n	80124f0 <USB_EPSetStall+0x54>
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d00f      	beq.n	80124f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	015a      	lsls	r2, r3, #5
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	4413      	add	r3, r2
 80124d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	68ba      	ldr	r2, [r7, #8]
 80124e0:	0151      	lsls	r1, r2, #5
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	440a      	add	r2, r1
 80124e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80124ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80124ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	015a      	lsls	r2, r3, #5
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	4413      	add	r3, r2
 80124f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	68ba      	ldr	r2, [r7, #8]
 8012500:	0151      	lsls	r1, r2, #5
 8012502:	68fa      	ldr	r2, [r7, #12]
 8012504:	440a      	add	r2, r1
 8012506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801250a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	e02b      	b.n	801256a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	015a      	lsls	r2, r3, #5
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	4413      	add	r3, r2
 801251a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	db12      	blt.n	801254a <USB_EPSetStall+0xae>
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d00f      	beq.n	801254a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	015a      	lsls	r2, r3, #5
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	4413      	add	r3, r2
 8012532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	0151      	lsls	r1, r2, #5
 801253c:	68fa      	ldr	r2, [r7, #12]
 801253e:	440a      	add	r2, r1
 8012540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012544:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012548:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	015a      	lsls	r2, r3, #5
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	4413      	add	r3, r2
 8012552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	0151      	lsls	r1, r2, #5
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	440a      	add	r2, r1
 8012560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012568:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3714      	adds	r7, #20
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	785b      	ldrb	r3, [r3, #1]
 8012590:	2b01      	cmp	r3, #1
 8012592:	d128      	bne.n	80125e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	015a      	lsls	r2, r3, #5
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	4413      	add	r3, r2
 801259c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	68ba      	ldr	r2, [r7, #8]
 80125a4:	0151      	lsls	r1, r2, #5
 80125a6:	68fa      	ldr	r2, [r7, #12]
 80125a8:	440a      	add	r2, r1
 80125aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80125b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	791b      	ldrb	r3, [r3, #4]
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d003      	beq.n	80125c4 <USB_EPClearStall+0x4c>
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	791b      	ldrb	r3, [r3, #4]
 80125c0:	2b02      	cmp	r3, #2
 80125c2:	d138      	bne.n	8012636 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	015a      	lsls	r2, r3, #5
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	4413      	add	r3, r2
 80125cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	68ba      	ldr	r2, [r7, #8]
 80125d4:	0151      	lsls	r1, r2, #5
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	440a      	add	r2, r1
 80125da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80125de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80125e2:	6013      	str	r3, [r2, #0]
 80125e4:	e027      	b.n	8012636 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	015a      	lsls	r2, r3, #5
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	4413      	add	r3, r2
 80125ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	0151      	lsls	r1, r2, #5
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	440a      	add	r2, r1
 80125fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012600:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012604:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	791b      	ldrb	r3, [r3, #4]
 801260a:	2b03      	cmp	r3, #3
 801260c:	d003      	beq.n	8012616 <USB_EPClearStall+0x9e>
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	791b      	ldrb	r3, [r3, #4]
 8012612:	2b02      	cmp	r3, #2
 8012614:	d10f      	bne.n	8012636 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	015a      	lsls	r2, r3, #5
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	4413      	add	r3, r2
 801261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	0151      	lsls	r1, r2, #5
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	440a      	add	r2, r1
 801262c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012634:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	3714      	adds	r7, #20
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012644:	b480      	push	{r7}
 8012646:	b085      	sub	sp, #20
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	460b      	mov	r3, r1
 801264e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012662:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012666:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	78fb      	ldrb	r3, [r7, #3]
 8012672:	011b      	lsls	r3, r3, #4
 8012674:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012678:	68f9      	ldr	r1, [r7, #12]
 801267a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801267e:	4313      	orrs	r3, r2
 8012680:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012690:	b480      	push	{r7}
 8012692:	b085      	sub	sp, #20
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80126aa:	f023 0303 	bic.w	r3, r3, #3
 80126ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80126be:	f023 0302 	bic.w	r3, r3, #2
 80126c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr

080126d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80126d2:	b480      	push	{r7}
 80126d4:	b085      	sub	sp, #20
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80126ec:	f023 0303 	bic.w	r3, r3, #3
 80126f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	68fa      	ldr	r2, [r7, #12]
 80126fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012700:	f043 0302 	orr.w	r3, r3, #2
 8012704:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012706:	2300      	movs	r3, #0
}
 8012708:	4618      	mov	r0, r3
 801270a:	3714      	adds	r7, #20
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012714:	b480      	push	{r7}
 8012716:	b085      	sub	sp, #20
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	695b      	ldr	r3, [r3, #20]
 8012720:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	699b      	ldr	r3, [r3, #24]
 8012726:	68fa      	ldr	r2, [r7, #12]
 8012728:	4013      	ands	r3, r2
 801272a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801272c:	68fb      	ldr	r3, [r7, #12]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3714      	adds	r7, #20
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr

0801273a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801273a:	b480      	push	{r7}
 801273c:	b085      	sub	sp, #20
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801274c:	699b      	ldr	r3, [r3, #24]
 801274e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012756:	69db      	ldr	r3, [r3, #28]
 8012758:	68ba      	ldr	r2, [r7, #8]
 801275a:	4013      	ands	r3, r2
 801275c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	0c1b      	lsrs	r3, r3, #16
}
 8012762:	4618      	mov	r0, r3
 8012764:	3714      	adds	r7, #20
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr

0801276e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801276e:	b480      	push	{r7}
 8012770:	b085      	sub	sp, #20
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012780:	699b      	ldr	r3, [r3, #24]
 8012782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801278a:	69db      	ldr	r3, [r3, #28]
 801278c:	68ba      	ldr	r2, [r7, #8]
 801278e:	4013      	ands	r3, r2
 8012790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	b29b      	uxth	r3, r3
}
 8012796:	4618      	mov	r0, r3
 8012798:	3714      	adds	r7, #20
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr

080127a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80127a2:	b480      	push	{r7}
 80127a4:	b085      	sub	sp, #20
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
 80127aa:	460b      	mov	r3, r1
 80127ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80127b2:	78fb      	ldrb	r3, [r7, #3]
 80127b4:	015a      	lsls	r2, r3, #5
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	4413      	add	r3, r2
 80127ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127c8:	695b      	ldr	r3, [r3, #20]
 80127ca:	68ba      	ldr	r2, [r7, #8]
 80127cc:	4013      	ands	r3, r2
 80127ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80127d0:	68bb      	ldr	r3, [r7, #8]
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3714      	adds	r7, #20
 80127d6:	46bd      	mov	sp, r7
 80127d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127dc:	4770      	bx	lr

080127de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80127de:	b480      	push	{r7}
 80127e0:	b087      	sub	sp, #28
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
 80127e6:	460b      	mov	r3, r1
 80127e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127f4:	691b      	ldr	r3, [r3, #16]
 80127f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80127fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012800:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012802:	78fb      	ldrb	r3, [r7, #3]
 8012804:	f003 030f 	and.w	r3, r3, #15
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	fa22 f303 	lsr.w	r3, r2, r3
 801280e:	01db      	lsls	r3, r3, #7
 8012810:	b2db      	uxtb	r3, r3
 8012812:	693a      	ldr	r2, [r7, #16]
 8012814:	4313      	orrs	r3, r2
 8012816:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012818:	78fb      	ldrb	r3, [r7, #3]
 801281a:	015a      	lsls	r2, r3, #5
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	4413      	add	r3, r2
 8012820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012824:	689b      	ldr	r3, [r3, #8]
 8012826:	693a      	ldr	r2, [r7, #16]
 8012828:	4013      	ands	r3, r2
 801282a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801282c:	68bb      	ldr	r3, [r7, #8]
}
 801282e:	4618      	mov	r0, r3
 8012830:	371c      	adds	r7, #28
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr

0801283a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801283a:	b480      	push	{r7}
 801283c:	b083      	sub	sp, #12
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	695b      	ldr	r3, [r3, #20]
 8012846:	f003 0301 	and.w	r3, r3, #1
}
 801284a:	4618      	mov	r0, r3
 801284c:	370c      	adds	r7, #12
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
	...

08012858 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012858:	b480      	push	{r7}
 801285a:	b085      	sub	sp, #20
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012872:	4619      	mov	r1, r3
 8012874:	4b09      	ldr	r3, [pc, #36]	@ (801289c <USB_ActivateSetup+0x44>)
 8012876:	4013      	ands	r3, r2
 8012878:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801288c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3714      	adds	r7, #20
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr
 801289c:	fffff800 	.word	0xfffff800

080128a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b087      	sub	sp, #28
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	60f8      	str	r0, [r7, #12]
 80128a8:	460b      	mov	r3, r1
 80128aa:	607a      	str	r2, [r7, #4]
 80128ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	333c      	adds	r3, #60	@ 0x3c
 80128b6:	3304      	adds	r3, #4
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	4a26      	ldr	r2, [pc, #152]	@ (8012958 <USB_EP0_OutStart+0xb8>)
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d90a      	bls.n	80128da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80128d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80128d4:	d101      	bne.n	80128da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80128d6:	2300      	movs	r3, #0
 80128d8:	e037      	b.n	801294a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128e0:	461a      	mov	r2, r3
 80128e2:	2300      	movs	r3, #0
 80128e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80128ec:	691b      	ldr	r3, [r3, #16]
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80128f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80128f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012900:	691b      	ldr	r3, [r3, #16]
 8012902:	697a      	ldr	r2, [r7, #20]
 8012904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012908:	f043 0318 	orr.w	r3, r3, #24
 801290c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012914:	691b      	ldr	r3, [r3, #16]
 8012916:	697a      	ldr	r2, [r7, #20]
 8012918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801291c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8012920:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012922:	7afb      	ldrb	r3, [r7, #11]
 8012924:	2b01      	cmp	r3, #1
 8012926:	d10f      	bne.n	8012948 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801292e:	461a      	mov	r2, r3
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	697a      	ldr	r2, [r7, #20]
 801293e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012942:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	371c      	adds	r7, #28
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	4f54300a 	.word	0x4f54300a

0801295c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801295c:	b480      	push	{r7}
 801295e:	b085      	sub	sp, #20
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012964:	2300      	movs	r3, #0
 8012966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	3301      	adds	r3, #1
 801296c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012974:	d901      	bls.n	801297a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012976:	2303      	movs	r3, #3
 8012978:	e01b      	b.n	80129b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	691b      	ldr	r3, [r3, #16]
 801297e:	2b00      	cmp	r3, #0
 8012980:	daf2      	bge.n	8012968 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	691b      	ldr	r3, [r3, #16]
 801298a:	f043 0201 	orr.w	r2, r3, #1
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	3301      	adds	r3, #1
 8012996:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801299e:	d901      	bls.n	80129a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80129a0:	2303      	movs	r3, #3
 80129a2:	e006      	b.n	80129b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	691b      	ldr	r3, [r3, #16]
 80129a8:	f003 0301 	and.w	r3, r3, #1
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d0f0      	beq.n	8012992 <USB_CoreReset+0x36>

  return HAL_OK;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3714      	adds	r7, #20
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr
	...

080129c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	460b      	mov	r3, r1
 80129ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80129cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80129d0:	f002 fd54 	bl	801547c <USBD_static_malloc>
 80129d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d109      	bne.n	80129f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	32b0      	adds	r2, #176	@ 0xb0
 80129e6:	2100      	movs	r1, #0
 80129e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80129ec:	2302      	movs	r3, #2
 80129ee:	e0d4      	b.n	8012b9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80129f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80129f4:	2100      	movs	r1, #0
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f002 fda6 	bl	8015548 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	32b0      	adds	r2, #176	@ 0xb0
 8012a06:	68f9      	ldr	r1, [r7, #12]
 8012a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	32b0      	adds	r2, #176	@ 0xb0
 8012a16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	7c1b      	ldrb	r3, [r3, #16]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d138      	bne.n	8012a9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012a28:	4b5e      	ldr	r3, [pc, #376]	@ (8012ba4 <USBD_CDC_Init+0x1e4>)
 8012a2a:	7819      	ldrb	r1, [r3, #0]
 8012a2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012a30:	2202      	movs	r2, #2
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f002 fbff 	bl	8015236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012a38:	4b5a      	ldr	r3, [pc, #360]	@ (8012ba4 <USBD_CDC_Init+0x1e4>)
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	f003 020f 	and.w	r2, r3, #15
 8012a40:	6879      	ldr	r1, [r7, #4]
 8012a42:	4613      	mov	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	4413      	add	r3, r2
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	440b      	add	r3, r1
 8012a4c:	3324      	adds	r3, #36	@ 0x24
 8012a4e:	2201      	movs	r2, #1
 8012a50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012a52:	4b55      	ldr	r3, [pc, #340]	@ (8012ba8 <USBD_CDC_Init+0x1e8>)
 8012a54:	7819      	ldrb	r1, [r3, #0]
 8012a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012a5a:	2202      	movs	r2, #2
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f002 fbea 	bl	8015236 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012a62:	4b51      	ldr	r3, [pc, #324]	@ (8012ba8 <USBD_CDC_Init+0x1e8>)
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	f003 020f 	and.w	r2, r3, #15
 8012a6a:	6879      	ldr	r1, [r7, #4]
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	4413      	add	r3, r2
 8012a72:	009b      	lsls	r3, r3, #2
 8012a74:	440b      	add	r3, r1
 8012a76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8012bac <USBD_CDC_Init+0x1ec>)
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	f003 020f 	and.w	r2, r3, #15
 8012a86:	6879      	ldr	r1, [r7, #4]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	440b      	add	r3, r1
 8012a92:	3326      	adds	r3, #38	@ 0x26
 8012a94:	2210      	movs	r2, #16
 8012a96:	801a      	strh	r2, [r3, #0]
 8012a98:	e035      	b.n	8012b06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012a9a:	4b42      	ldr	r3, [pc, #264]	@ (8012ba4 <USBD_CDC_Init+0x1e4>)
 8012a9c:	7819      	ldrb	r1, [r3, #0]
 8012a9e:	2340      	movs	r3, #64	@ 0x40
 8012aa0:	2202      	movs	r2, #2
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f002 fbc7 	bl	8015236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8012ba4 <USBD_CDC_Init+0x1e4>)
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	f003 020f 	and.w	r2, r3, #15
 8012ab0:	6879      	ldr	r1, [r7, #4]
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	440b      	add	r3, r1
 8012abc:	3324      	adds	r3, #36	@ 0x24
 8012abe:	2201      	movs	r2, #1
 8012ac0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012ac2:	4b39      	ldr	r3, [pc, #228]	@ (8012ba8 <USBD_CDC_Init+0x1e8>)
 8012ac4:	7819      	ldrb	r1, [r3, #0]
 8012ac6:	2340      	movs	r3, #64	@ 0x40
 8012ac8:	2202      	movs	r2, #2
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f002 fbb3 	bl	8015236 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012ad0:	4b35      	ldr	r3, [pc, #212]	@ (8012ba8 <USBD_CDC_Init+0x1e8>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	f003 020f 	and.w	r2, r3, #15
 8012ad8:	6879      	ldr	r1, [r7, #4]
 8012ada:	4613      	mov	r3, r2
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	4413      	add	r3, r2
 8012ae0:	009b      	lsls	r3, r3, #2
 8012ae2:	440b      	add	r3, r1
 8012ae4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012ae8:	2201      	movs	r2, #1
 8012aea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012aec:	4b2f      	ldr	r3, [pc, #188]	@ (8012bac <USBD_CDC_Init+0x1ec>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	f003 020f 	and.w	r2, r3, #15
 8012af4:	6879      	ldr	r1, [r7, #4]
 8012af6:	4613      	mov	r3, r2
 8012af8:	009b      	lsls	r3, r3, #2
 8012afa:	4413      	add	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	440b      	add	r3, r1
 8012b00:	3326      	adds	r3, #38	@ 0x26
 8012b02:	2210      	movs	r2, #16
 8012b04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012b06:	4b29      	ldr	r3, [pc, #164]	@ (8012bac <USBD_CDC_Init+0x1ec>)
 8012b08:	7819      	ldrb	r1, [r3, #0]
 8012b0a:	2308      	movs	r3, #8
 8012b0c:	2203      	movs	r2, #3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f002 fb91 	bl	8015236 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012b14:	4b25      	ldr	r3, [pc, #148]	@ (8012bac <USBD_CDC_Init+0x1ec>)
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	f003 020f 	and.w	r2, r3, #15
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	4613      	mov	r3, r2
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	440b      	add	r3, r1
 8012b28:	3324      	adds	r3, #36	@ 0x24
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	33b0      	adds	r3, #176	@ 0xb0
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	4413      	add	r3, r2
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2200      	movs	r2, #0
 8012b56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012b64:	2302      	movs	r3, #2
 8012b66:	e018      	b.n	8012b9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	7c1b      	ldrb	r3, [r3, #16]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d10a      	bne.n	8012b86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012b70:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba8 <USBD_CDC_Init+0x1e8>)
 8012b72:	7819      	ldrb	r1, [r3, #0]
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f002 fc48 	bl	8015414 <USBD_LL_PrepareReceive>
 8012b84:	e008      	b.n	8012b98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012b86:	4b08      	ldr	r3, [pc, #32]	@ (8012ba8 <USBD_CDC_Init+0x1e8>)
 8012b88:	7819      	ldrb	r1, [r3, #0]
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012b90:	2340      	movs	r3, #64	@ 0x40
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f002 fc3e 	bl	8015414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012b98:	2300      	movs	r3, #0
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	2400009b 	.word	0x2400009b
 8012ba8:	2400009c 	.word	0x2400009c
 8012bac:	2400009d 	.word	0x2400009d

08012bb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8012ca8 <USBD_CDC_DeInit+0xf8>)
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f002 fb5d 	bl	8015282 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012bc8:	4b37      	ldr	r3, [pc, #220]	@ (8012ca8 <USBD_CDC_DeInit+0xf8>)
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	f003 020f 	and.w	r2, r3, #15
 8012bd0:	6879      	ldr	r1, [r7, #4]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	440b      	add	r3, r1
 8012bdc:	3324      	adds	r3, #36	@ 0x24
 8012bde:	2200      	movs	r2, #0
 8012be0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012be2:	4b32      	ldr	r3, [pc, #200]	@ (8012cac <USBD_CDC_DeInit+0xfc>)
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f002 fb4a 	bl	8015282 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012bee:	4b2f      	ldr	r3, [pc, #188]	@ (8012cac <USBD_CDC_DeInit+0xfc>)
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	f003 020f 	and.w	r2, r3, #15
 8012bf6:	6879      	ldr	r1, [r7, #4]
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	4413      	add	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	440b      	add	r3, r1
 8012c02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012c06:	2200      	movs	r2, #0
 8012c08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012c0a:	4b29      	ldr	r3, [pc, #164]	@ (8012cb0 <USBD_CDC_DeInit+0x100>)
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	4619      	mov	r1, r3
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f002 fb36 	bl	8015282 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012c16:	4b26      	ldr	r3, [pc, #152]	@ (8012cb0 <USBD_CDC_DeInit+0x100>)
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	f003 020f 	and.w	r2, r3, #15
 8012c1e:	6879      	ldr	r1, [r7, #4]
 8012c20:	4613      	mov	r3, r2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	440b      	add	r3, r1
 8012c2a:	3324      	adds	r3, #36	@ 0x24
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012c30:	4b1f      	ldr	r3, [pc, #124]	@ (8012cb0 <USBD_CDC_DeInit+0x100>)
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 020f 	and.w	r2, r3, #15
 8012c38:	6879      	ldr	r1, [r7, #4]
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	440b      	add	r3, r1
 8012c44:	3326      	adds	r3, #38	@ 0x26
 8012c46:	2200      	movs	r2, #0
 8012c48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	32b0      	adds	r2, #176	@ 0xb0
 8012c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d01f      	beq.n	8012c9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	33b0      	adds	r3, #176	@ 0xb0
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	4413      	add	r3, r2
 8012c6a:	685b      	ldr	r3, [r3, #4]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	32b0      	adds	r2, #176	@ 0xb0
 8012c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f002 fc0a 	bl	8015498 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	32b0      	adds	r2, #176	@ 0xb0
 8012c8e:	2100      	movs	r1, #0
 8012c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2200      	movs	r2, #0
 8012c98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012c9c:	2300      	movs	r3, #0
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3708      	adds	r7, #8
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	2400009b 	.word	0x2400009b
 8012cac:	2400009c 	.word	0x2400009c
 8012cb0:	2400009d 	.word	0x2400009d

08012cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b086      	sub	sp, #24
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	32b0      	adds	r2, #176	@ 0xb0
 8012cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ccc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d101      	bne.n	8012ce4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012ce0:	2303      	movs	r3, #3
 8012ce2:	e0bf      	b.n	8012e64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d050      	beq.n	8012d92 <USBD_CDC_Setup+0xde>
 8012cf0:	2b20      	cmp	r3, #32
 8012cf2:	f040 80af 	bne.w	8012e54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	88db      	ldrh	r3, [r3, #6]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d03a      	beq.n	8012d74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	b25b      	sxtb	r3, r3
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	da1b      	bge.n	8012d40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	33b0      	adds	r3, #176	@ 0xb0
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	683a      	ldr	r2, [r7, #0]
 8012d1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012d1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012d20:	683a      	ldr	r2, [r7, #0]
 8012d22:	88d2      	ldrh	r2, [r2, #6]
 8012d24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	88db      	ldrh	r3, [r3, #6]
 8012d2a:	2b07      	cmp	r3, #7
 8012d2c:	bf28      	it	cs
 8012d2e:	2307      	movcs	r3, #7
 8012d30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	89fa      	ldrh	r2, [r7, #14]
 8012d36:	4619      	mov	r1, r3
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f001 fdbd 	bl	80148b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012d3e:	e090      	b.n	8012e62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	785a      	ldrb	r2, [r3, #1]
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	88db      	ldrh	r3, [r3, #6]
 8012d4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8012d50:	d803      	bhi.n	8012d5a <USBD_CDC_Setup+0xa6>
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	88db      	ldrh	r3, [r3, #6]
 8012d56:	b2da      	uxtb	r2, r3
 8012d58:	e000      	b.n	8012d5c <USBD_CDC_Setup+0xa8>
 8012d5a:	2240      	movs	r2, #64	@ 0x40
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012d62:	6939      	ldr	r1, [r7, #16]
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f001 fdcf 	bl	8014910 <USBD_CtlPrepareRx>
      break;
 8012d72:	e076      	b.n	8012e62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	33b0      	adds	r3, #176	@ 0xb0
 8012d7e:	009b      	lsls	r3, r3, #2
 8012d80:	4413      	add	r3, r2
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	689b      	ldr	r3, [r3, #8]
 8012d86:	683a      	ldr	r2, [r7, #0]
 8012d88:	7850      	ldrb	r0, [r2, #1]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	6839      	ldr	r1, [r7, #0]
 8012d8e:	4798      	blx	r3
      break;
 8012d90:	e067      	b.n	8012e62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	785b      	ldrb	r3, [r3, #1]
 8012d96:	2b0b      	cmp	r3, #11
 8012d98:	d851      	bhi.n	8012e3e <USBD_CDC_Setup+0x18a>
 8012d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8012da0 <USBD_CDC_Setup+0xec>)
 8012d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da0:	08012dd1 	.word	0x08012dd1
 8012da4:	08012e4d 	.word	0x08012e4d
 8012da8:	08012e3f 	.word	0x08012e3f
 8012dac:	08012e3f 	.word	0x08012e3f
 8012db0:	08012e3f 	.word	0x08012e3f
 8012db4:	08012e3f 	.word	0x08012e3f
 8012db8:	08012e3f 	.word	0x08012e3f
 8012dbc:	08012e3f 	.word	0x08012e3f
 8012dc0:	08012e3f 	.word	0x08012e3f
 8012dc4:	08012e3f 	.word	0x08012e3f
 8012dc8:	08012dfb 	.word	0x08012dfb
 8012dcc:	08012e25 	.word	0x08012e25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	2b03      	cmp	r3, #3
 8012dda:	d107      	bne.n	8012dec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012ddc:	f107 030a 	add.w	r3, r7, #10
 8012de0:	2202      	movs	r2, #2
 8012de2:	4619      	mov	r1, r3
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f001 fd67 	bl	80148b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012dea:	e032      	b.n	8012e52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012dec:	6839      	ldr	r1, [r7, #0]
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f001 fce5 	bl	80147be <USBD_CtlError>
            ret = USBD_FAIL;
 8012df4:	2303      	movs	r3, #3
 8012df6:	75fb      	strb	r3, [r7, #23]
          break;
 8012df8:	e02b      	b.n	8012e52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e00:	b2db      	uxtb	r3, r3
 8012e02:	2b03      	cmp	r3, #3
 8012e04:	d107      	bne.n	8012e16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012e06:	f107 030d 	add.w	r3, r7, #13
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f001 fd52 	bl	80148b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012e14:	e01d      	b.n	8012e52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012e16:	6839      	ldr	r1, [r7, #0]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f001 fcd0 	bl	80147be <USBD_CtlError>
            ret = USBD_FAIL;
 8012e1e:	2303      	movs	r3, #3
 8012e20:	75fb      	strb	r3, [r7, #23]
          break;
 8012e22:	e016      	b.n	8012e52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b03      	cmp	r3, #3
 8012e2e:	d00f      	beq.n	8012e50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012e30:	6839      	ldr	r1, [r7, #0]
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f001 fcc3 	bl	80147be <USBD_CtlError>
            ret = USBD_FAIL;
 8012e38:	2303      	movs	r3, #3
 8012e3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012e3c:	e008      	b.n	8012e50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012e3e:	6839      	ldr	r1, [r7, #0]
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f001 fcbc 	bl	80147be <USBD_CtlError>
          ret = USBD_FAIL;
 8012e46:	2303      	movs	r3, #3
 8012e48:	75fb      	strb	r3, [r7, #23]
          break;
 8012e4a:	e002      	b.n	8012e52 <USBD_CDC_Setup+0x19e>
          break;
 8012e4c:	bf00      	nop
 8012e4e:	e008      	b.n	8012e62 <USBD_CDC_Setup+0x1ae>
          break;
 8012e50:	bf00      	nop
      }
      break;
 8012e52:	e006      	b.n	8012e62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012e54:	6839      	ldr	r1, [r7, #0]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f001 fcb1 	bl	80147be <USBD_CtlError>
      ret = USBD_FAIL;
 8012e5c:	2303      	movs	r3, #3
 8012e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8012e60:	bf00      	nop
  }

  return (uint8_t)ret;
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3718      	adds	r7, #24
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	460b      	mov	r3, r1
 8012e76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012e7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	32b0      	adds	r2, #176	@ 0xb0
 8012e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d101      	bne.n	8012e96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012e92:	2303      	movs	r3, #3
 8012e94:	e065      	b.n	8012f62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	32b0      	adds	r2, #176	@ 0xb0
 8012ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012ea6:	78fb      	ldrb	r3, [r7, #3]
 8012ea8:	f003 020f 	and.w	r2, r3, #15
 8012eac:	6879      	ldr	r1, [r7, #4]
 8012eae:	4613      	mov	r3, r2
 8012eb0:	009b      	lsls	r3, r3, #2
 8012eb2:	4413      	add	r3, r2
 8012eb4:	009b      	lsls	r3, r3, #2
 8012eb6:	440b      	add	r3, r1
 8012eb8:	3318      	adds	r3, #24
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d02f      	beq.n	8012f20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012ec0:	78fb      	ldrb	r3, [r7, #3]
 8012ec2:	f003 020f 	and.w	r2, r3, #15
 8012ec6:	6879      	ldr	r1, [r7, #4]
 8012ec8:	4613      	mov	r3, r2
 8012eca:	009b      	lsls	r3, r3, #2
 8012ecc:	4413      	add	r3, r2
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	440b      	add	r3, r1
 8012ed2:	3318      	adds	r3, #24
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	78fb      	ldrb	r3, [r7, #3]
 8012ed8:	f003 010f 	and.w	r1, r3, #15
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	460b      	mov	r3, r1
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	440b      	add	r3, r1
 8012ee4:	009b      	lsls	r3, r3, #2
 8012ee6:	4403      	add	r3, r0
 8012ee8:	331c      	adds	r3, #28
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	fbb2 f1f3 	udiv	r1, r2, r3
 8012ef0:	fb01 f303 	mul.w	r3, r1, r3
 8012ef4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d112      	bne.n	8012f20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012efa:	78fb      	ldrb	r3, [r7, #3]
 8012efc:	f003 020f 	and.w	r2, r3, #15
 8012f00:	6879      	ldr	r1, [r7, #4]
 8012f02:	4613      	mov	r3, r2
 8012f04:	009b      	lsls	r3, r3, #2
 8012f06:	4413      	add	r3, r2
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	440b      	add	r3, r1
 8012f0c:	3318      	adds	r3, #24
 8012f0e:	2200      	movs	r2, #0
 8012f10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012f12:	78f9      	ldrb	r1, [r7, #3]
 8012f14:	2300      	movs	r3, #0
 8012f16:	2200      	movs	r2, #0
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f002 fa5a 	bl	80153d2 <USBD_LL_Transmit>
 8012f1e:	e01f      	b.n	8012f60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	2200      	movs	r2, #0
 8012f24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	33b0      	adds	r3, #176	@ 0xb0
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	4413      	add	r3, r2
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d010      	beq.n	8012f60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f44:	687a      	ldr	r2, [r7, #4]
 8012f46:	33b0      	adds	r3, #176	@ 0xb0
 8012f48:	009b      	lsls	r3, r3, #2
 8012f4a:	4413      	add	r3, r2
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	691b      	ldr	r3, [r3, #16]
 8012f50:	68ba      	ldr	r2, [r7, #8]
 8012f52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012f56:	68ba      	ldr	r2, [r7, #8]
 8012f58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012f5c:	78fa      	ldrb	r2, [r7, #3]
 8012f5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f6a:	b580      	push	{r7, lr}
 8012f6c:	b084      	sub	sp, #16
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
 8012f72:	460b      	mov	r3, r1
 8012f74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	32b0      	adds	r2, #176	@ 0xb0
 8012f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	32b0      	adds	r2, #176	@ 0xb0
 8012f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d101      	bne.n	8012f9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012f98:	2303      	movs	r3, #3
 8012f9a:	e01a      	b.n	8012fd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012f9c:	78fb      	ldrb	r3, [r7, #3]
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f002 fa58 	bl	8015456 <USBD_LL_GetRxDataSize>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012fb4:	687a      	ldr	r2, [r7, #4]
 8012fb6:	33b0      	adds	r3, #176	@ 0xb0
 8012fb8:	009b      	lsls	r3, r3, #2
 8012fba:	4413      	add	r3, r2
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	68db      	ldr	r3, [r3, #12]
 8012fc0:	68fa      	ldr	r2, [r7, #12]
 8012fc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012fcc:	4611      	mov	r1, r2
 8012fce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012fda:	b580      	push	{r7, lr}
 8012fdc:	b084      	sub	sp, #16
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	32b0      	adds	r2, #176	@ 0xb0
 8012fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ff0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d101      	bne.n	8012ffc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012ff8:	2303      	movs	r3, #3
 8012ffa:	e024      	b.n	8013046 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	33b0      	adds	r3, #176	@ 0xb0
 8013006:	009b      	lsls	r3, r3, #2
 8013008:	4413      	add	r3, r2
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d019      	beq.n	8013044 <USBD_CDC_EP0_RxReady+0x6a>
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8013016:	2bff      	cmp	r3, #255	@ 0xff
 8013018:	d014      	beq.n	8013044 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	33b0      	adds	r3, #176	@ 0xb0
 8013024:	009b      	lsls	r3, r3, #2
 8013026:	4413      	add	r3, r2
 8013028:	685b      	ldr	r3, [r3, #4]
 801302a:	689b      	ldr	r3, [r3, #8]
 801302c:	68fa      	ldr	r2, [r7, #12]
 801302e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8013032:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801303a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	22ff      	movs	r2, #255	@ 0xff
 8013040:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8013044:	2300      	movs	r3, #0
}
 8013046:	4618      	mov	r0, r3
 8013048:	3710      	adds	r7, #16
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
	...

08013050 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013058:	2182      	movs	r1, #130	@ 0x82
 801305a:	4818      	ldr	r0, [pc, #96]	@ (80130bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801305c:	f000 fd4f 	bl	8013afe <USBD_GetEpDesc>
 8013060:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013062:	2101      	movs	r1, #1
 8013064:	4815      	ldr	r0, [pc, #84]	@ (80130bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013066:	f000 fd4a 	bl	8013afe <USBD_GetEpDesc>
 801306a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801306c:	2181      	movs	r1, #129	@ 0x81
 801306e:	4813      	ldr	r0, [pc, #76]	@ (80130bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013070:	f000 fd45 	bl	8013afe <USBD_GetEpDesc>
 8013074:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	2210      	movs	r2, #16
 8013080:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d006      	beq.n	8013096 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	2200      	movs	r2, #0
 801308c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013090:	711a      	strb	r2, [r3, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2200      	movs	r2, #0
 80130a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80130a4:	711a      	strb	r2, [r3, #4]
 80130a6:	2200      	movs	r2, #0
 80130a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2243      	movs	r2, #67	@ 0x43
 80130ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80130b0:	4b02      	ldr	r3, [pc, #8]	@ (80130bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3718      	adds	r7, #24
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	24000058 	.word	0x24000058

080130c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b086      	sub	sp, #24
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80130c8:	2182      	movs	r1, #130	@ 0x82
 80130ca:	4818      	ldr	r0, [pc, #96]	@ (801312c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80130cc:	f000 fd17 	bl	8013afe <USBD_GetEpDesc>
 80130d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80130d2:	2101      	movs	r1, #1
 80130d4:	4815      	ldr	r0, [pc, #84]	@ (801312c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80130d6:	f000 fd12 	bl	8013afe <USBD_GetEpDesc>
 80130da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80130dc:	2181      	movs	r1, #129	@ 0x81
 80130de:	4813      	ldr	r0, [pc, #76]	@ (801312c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80130e0:	f000 fd0d 	bl	8013afe <USBD_GetEpDesc>
 80130e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d002      	beq.n	80130f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	2210      	movs	r2, #16
 80130f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d006      	beq.n	8013106 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	2200      	movs	r2, #0
 80130fc:	711a      	strb	r2, [r3, #4]
 80130fe:	2200      	movs	r2, #0
 8013100:	f042 0202 	orr.w	r2, r2, #2
 8013104:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d006      	beq.n	801311a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2200      	movs	r2, #0
 8013110:	711a      	strb	r2, [r3, #4]
 8013112:	2200      	movs	r2, #0
 8013114:	f042 0202 	orr.w	r2, r2, #2
 8013118:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2243      	movs	r2, #67	@ 0x43
 801311e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013120:	4b02      	ldr	r3, [pc, #8]	@ (801312c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013122:	4618      	mov	r0, r3
 8013124:	3718      	adds	r7, #24
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	24000058 	.word	0x24000058

08013130 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b086      	sub	sp, #24
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013138:	2182      	movs	r1, #130	@ 0x82
 801313a:	4818      	ldr	r0, [pc, #96]	@ (801319c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801313c:	f000 fcdf 	bl	8013afe <USBD_GetEpDesc>
 8013140:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013142:	2101      	movs	r1, #1
 8013144:	4815      	ldr	r0, [pc, #84]	@ (801319c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013146:	f000 fcda 	bl	8013afe <USBD_GetEpDesc>
 801314a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801314c:	2181      	movs	r1, #129	@ 0x81
 801314e:	4813      	ldr	r0, [pc, #76]	@ (801319c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013150:	f000 fcd5 	bl	8013afe <USBD_GetEpDesc>
 8013154:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	2210      	movs	r2, #16
 8013160:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d006      	beq.n	8013176 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	2200      	movs	r2, #0
 801316c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013170:	711a      	strb	r2, [r3, #4]
 8013172:	2200      	movs	r2, #0
 8013174:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d006      	beq.n	801318a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2200      	movs	r2, #0
 8013180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013184:	711a      	strb	r2, [r3, #4]
 8013186:	2200      	movs	r2, #0
 8013188:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2243      	movs	r2, #67	@ 0x43
 801318e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013190:	4b02      	ldr	r3, [pc, #8]	@ (801319c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	24000058 	.word	0x24000058

080131a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	220a      	movs	r2, #10
 80131ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80131ae:	4b03      	ldr	r3, [pc, #12]	@ (80131bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr
 80131bc:	24000014 	.word	0x24000014

080131c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d101      	bne.n	80131d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80131d0:	2303      	movs	r3, #3
 80131d2:	e009      	b.n	80131e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	33b0      	adds	r3, #176	@ 0xb0
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	4413      	add	r3, r2
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80131e6:	2300      	movs	r3, #0
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	370c      	adds	r7, #12
 80131ec:	46bd      	mov	sp, r7
 80131ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f2:	4770      	bx	lr

080131f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80131f4:	b480      	push	{r7}
 80131f6:	b087      	sub	sp, #28
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	32b0      	adds	r2, #176	@ 0xb0
 801320a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801320e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013216:	2303      	movs	r3, #3
 8013218:	e008      	b.n	801322c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	68ba      	ldr	r2, [r7, #8]
 801321e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	371c      	adds	r7, #28
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr

08013238 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	32b0      	adds	r2, #176	@ 0xb0
 801324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013250:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d101      	bne.n	801325c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013258:	2303      	movs	r3, #3
 801325a:	e004      	b.n	8013266 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	683a      	ldr	r2, [r7, #0]
 8013260:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	3714      	adds	r7, #20
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr
	...

08013274 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	32b0      	adds	r2, #176	@ 0xb0
 8013286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801328a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801328c:	2301      	movs	r3, #1
 801328e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d101      	bne.n	801329a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013296:	2303      	movs	r3, #3
 8013298:	e025      	b.n	80132e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d11f      	bne.n	80132e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	2201      	movs	r2, #1
 80132a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80132ac:	4b10      	ldr	r3, [pc, #64]	@ (80132f0 <USBD_CDC_TransmitPacket+0x7c>)
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	f003 020f 	and.w	r2, r3, #15
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80132ba:	6878      	ldr	r0, [r7, #4]
 80132bc:	4613      	mov	r3, r2
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	4413      	add	r3, r2
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	4403      	add	r3, r0
 80132c6:	3318      	adds	r3, #24
 80132c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80132ca:	4b09      	ldr	r3, [pc, #36]	@ (80132f0 <USBD_CDC_TransmitPacket+0x7c>)
 80132cc:	7819      	ldrb	r1, [r3, #0]
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f002 f879 	bl	80153d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80132e0:	2300      	movs	r3, #0
 80132e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80132e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	2400009b 	.word	0x2400009b

080132f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b084      	sub	sp, #16
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	32b0      	adds	r2, #176	@ 0xb0
 8013306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801330a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	32b0      	adds	r2, #176	@ 0xb0
 8013316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801331e:	2303      	movs	r3, #3
 8013320:	e018      	b.n	8013354 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	7c1b      	ldrb	r3, [r3, #16]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d10a      	bne.n	8013340 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801332a:	4b0c      	ldr	r3, [pc, #48]	@ (801335c <USBD_CDC_ReceivePacket+0x68>)
 801332c:	7819      	ldrb	r1, [r3, #0]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f002 f86b 	bl	8015414 <USBD_LL_PrepareReceive>
 801333e:	e008      	b.n	8013352 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013340:	4b06      	ldr	r3, [pc, #24]	@ (801335c <USBD_CDC_ReceivePacket+0x68>)
 8013342:	7819      	ldrb	r1, [r3, #0]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801334a:	2340      	movs	r3, #64	@ 0x40
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f002 f861 	bl	8015414 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	3710      	adds	r7, #16
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	2400009c 	.word	0x2400009c

08013360 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	4613      	mov	r3, r2
 801336c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013374:	2303      	movs	r3, #3
 8013376:	e01f      	b.n	80133b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2200      	movs	r2, #0
 801337c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2200      	movs	r2, #0
 8013384:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2200      	movs	r2, #0
 801338c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d003      	beq.n	801339e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	68ba      	ldr	r2, [r7, #8]
 801339a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2201      	movs	r2, #1
 80133a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	79fa      	ldrb	r2, [r7, #7]
 80133aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80133ac:	68f8      	ldr	r0, [r7, #12]
 80133ae:	f001 fed7 	bl	8015160 <USBD_LL_Init>
 80133b2:	4603      	mov	r3, r0
 80133b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80133b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3718      	adds	r7, #24
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80133ca:	2300      	movs	r3, #0
 80133cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d101      	bne.n	80133d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80133d4:	2303      	movs	r3, #3
 80133d6:	e025      	b.n	8013424 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	683a      	ldr	r2, [r7, #0]
 80133dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	32ae      	adds	r2, #174	@ 0xae
 80133ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d00f      	beq.n	8013414 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	32ae      	adds	r2, #174	@ 0xae
 80133fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013404:	f107 020e 	add.w	r2, r7, #14
 8013408:	4610      	mov	r0, r2
 801340a:	4798      	blx	r3
 801340c:	4602      	mov	r2, r0
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801341a:	1c5a      	adds	r2, r3, #1
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f001 fee3 	bl	8015200 <USBD_LL_Start>
 801343a:	4603      	mov	r3, r0
}
 801343c:	4618      	mov	r0, r3
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801344c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801344e:	4618      	mov	r0, r3
 8013450:	370c      	adds	r7, #12
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr

0801345a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801345a:	b580      	push	{r7, lr}
 801345c:	b084      	sub	sp, #16
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
 8013462:	460b      	mov	r3, r1
 8013464:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013466:	2300      	movs	r3, #0
 8013468:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013470:	2b00      	cmp	r3, #0
 8013472:	d009      	beq.n	8013488 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	78fa      	ldrb	r2, [r7, #3]
 801347e:	4611      	mov	r1, r2
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	4798      	blx	r3
 8013484:	4603      	mov	r3, r0
 8013486:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013488:	7bfb      	ldrb	r3, [r7, #15]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013492:	b580      	push	{r7, lr}
 8013494:	b084      	sub	sp, #16
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	460b      	mov	r3, r1
 801349c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801349e:	2300      	movs	r3, #0
 80134a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	78fa      	ldrb	r2, [r7, #3]
 80134ac:	4611      	mov	r1, r2
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	4798      	blx	r3
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d001      	beq.n	80134bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80134b8:	2303      	movs	r3, #3
 80134ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80134bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3710      	adds	r7, #16
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b084      	sub	sp, #16
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
 80134ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80134d6:	6839      	ldr	r1, [r7, #0]
 80134d8:	4618      	mov	r0, r3
 80134da:	f001 f936 	bl	801474a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2201      	movs	r2, #1
 80134e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80134ec:	461a      	mov	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80134fa:	f003 031f 	and.w	r3, r3, #31
 80134fe:	2b02      	cmp	r3, #2
 8013500:	d01a      	beq.n	8013538 <USBD_LL_SetupStage+0x72>
 8013502:	2b02      	cmp	r3, #2
 8013504:	d822      	bhi.n	801354c <USBD_LL_SetupStage+0x86>
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <USBD_LL_SetupStage+0x4a>
 801350a:	2b01      	cmp	r3, #1
 801350c:	d00a      	beq.n	8013524 <USBD_LL_SetupStage+0x5e>
 801350e:	e01d      	b.n	801354c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013516:	4619      	mov	r1, r3
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 fb63 	bl	8013be4 <USBD_StdDevReq>
 801351e:	4603      	mov	r3, r0
 8013520:	73fb      	strb	r3, [r7, #15]
      break;
 8013522:	e020      	b.n	8013566 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801352a:	4619      	mov	r1, r3
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 fbcb 	bl	8013cc8 <USBD_StdItfReq>
 8013532:	4603      	mov	r3, r0
 8013534:	73fb      	strb	r3, [r7, #15]
      break;
 8013536:	e016      	b.n	8013566 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801353e:	4619      	mov	r1, r3
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f000 fc2d 	bl	8013da0 <USBD_StdEPReq>
 8013546:	4603      	mov	r3, r0
 8013548:	73fb      	strb	r3, [r7, #15]
      break;
 801354a:	e00c      	b.n	8013566 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013552:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013556:	b2db      	uxtb	r3, r3
 8013558:	4619      	mov	r1, r3
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f001 feb0 	bl	80152c0 <USBD_LL_StallEP>
 8013560:	4603      	mov	r3, r0
 8013562:	73fb      	strb	r3, [r7, #15]
      break;
 8013564:	bf00      	nop
  }

  return ret;
 8013566:	7bfb      	ldrb	r3, [r7, #15]
}
 8013568:	4618      	mov	r0, r3
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	460b      	mov	r3, r1
 801357a:	607a      	str	r2, [r7, #4]
 801357c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801357e:	2300      	movs	r3, #0
 8013580:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013582:	7afb      	ldrb	r3, [r7, #11]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d16e      	bne.n	8013666 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801358e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013596:	2b03      	cmp	r3, #3
 8013598:	f040 8098 	bne.w	80136cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	689a      	ldr	r2, [r3, #8]
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d913      	bls.n	80135d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	689a      	ldr	r2, [r3, #8]
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	1ad2      	subs	r2, r2, r3
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	68da      	ldr	r2, [r3, #12]
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	4293      	cmp	r3, r2
 80135c0:	bf28      	it	cs
 80135c2:	4613      	movcs	r3, r2
 80135c4:	461a      	mov	r2, r3
 80135c6:	6879      	ldr	r1, [r7, #4]
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f001 f9be 	bl	801494a <USBD_CtlContinueRx>
 80135ce:	e07d      	b.n	80136cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80135d6:	f003 031f 	and.w	r3, r3, #31
 80135da:	2b02      	cmp	r3, #2
 80135dc:	d014      	beq.n	8013608 <USBD_LL_DataOutStage+0x98>
 80135de:	2b02      	cmp	r3, #2
 80135e0:	d81d      	bhi.n	801361e <USBD_LL_DataOutStage+0xae>
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d002      	beq.n	80135ec <USBD_LL_DataOutStage+0x7c>
 80135e6:	2b01      	cmp	r3, #1
 80135e8:	d003      	beq.n	80135f2 <USBD_LL_DataOutStage+0x82>
 80135ea:	e018      	b.n	801361e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80135ec:	2300      	movs	r3, #0
 80135ee:	75bb      	strb	r3, [r7, #22]
            break;
 80135f0:	e018      	b.n	8013624 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80135f8:	b2db      	uxtb	r3, r3
 80135fa:	4619      	mov	r1, r3
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f000 fa64 	bl	8013aca <USBD_CoreFindIF>
 8013602:	4603      	mov	r3, r0
 8013604:	75bb      	strb	r3, [r7, #22]
            break;
 8013606:	e00d      	b.n	8013624 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801360e:	b2db      	uxtb	r3, r3
 8013610:	4619      	mov	r1, r3
 8013612:	68f8      	ldr	r0, [r7, #12]
 8013614:	f000 fa66 	bl	8013ae4 <USBD_CoreFindEP>
 8013618:	4603      	mov	r3, r0
 801361a:	75bb      	strb	r3, [r7, #22]
            break;
 801361c:	e002      	b.n	8013624 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801361e:	2300      	movs	r3, #0
 8013620:	75bb      	strb	r3, [r7, #22]
            break;
 8013622:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013624:	7dbb      	ldrb	r3, [r7, #22]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d119      	bne.n	801365e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013630:	b2db      	uxtb	r3, r3
 8013632:	2b03      	cmp	r3, #3
 8013634:	d113      	bne.n	801365e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013636:	7dba      	ldrb	r2, [r7, #22]
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	32ae      	adds	r2, #174	@ 0xae
 801363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013640:	691b      	ldr	r3, [r3, #16]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d00b      	beq.n	801365e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013646:	7dba      	ldrb	r2, [r7, #22]
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801364e:	7dba      	ldrb	r2, [r7, #22]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	32ae      	adds	r2, #174	@ 0xae
 8013654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013658:	691b      	ldr	r3, [r3, #16]
 801365a:	68f8      	ldr	r0, [r7, #12]
 801365c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801365e:	68f8      	ldr	r0, [r7, #12]
 8013660:	f001 f984 	bl	801496c <USBD_CtlSendStatus>
 8013664:	e032      	b.n	80136cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013666:	7afb      	ldrb	r3, [r7, #11]
 8013668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801366c:	b2db      	uxtb	r3, r3
 801366e:	4619      	mov	r1, r3
 8013670:	68f8      	ldr	r0, [r7, #12]
 8013672:	f000 fa37 	bl	8013ae4 <USBD_CoreFindEP>
 8013676:	4603      	mov	r3, r0
 8013678:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801367a:	7dbb      	ldrb	r3, [r7, #22]
 801367c:	2bff      	cmp	r3, #255	@ 0xff
 801367e:	d025      	beq.n	80136cc <USBD_LL_DataOutStage+0x15c>
 8013680:	7dbb      	ldrb	r3, [r7, #22]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d122      	bne.n	80136cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801368c:	b2db      	uxtb	r3, r3
 801368e:	2b03      	cmp	r3, #3
 8013690:	d117      	bne.n	80136c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013692:	7dba      	ldrb	r2, [r7, #22]
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	32ae      	adds	r2, #174	@ 0xae
 8013698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801369c:	699b      	ldr	r3, [r3, #24]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d00f      	beq.n	80136c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80136a2:	7dba      	ldrb	r2, [r7, #22]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80136aa:	7dba      	ldrb	r2, [r7, #22]
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	32ae      	adds	r2, #174	@ 0xae
 80136b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b4:	699b      	ldr	r3, [r3, #24]
 80136b6:	7afa      	ldrb	r2, [r7, #11]
 80136b8:	4611      	mov	r1, r2
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	4798      	blx	r3
 80136be:	4603      	mov	r3, r0
 80136c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80136c2:	7dfb      	ldrb	r3, [r7, #23]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d001      	beq.n	80136cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80136c8:	7dfb      	ldrb	r3, [r7, #23]
 80136ca:	e000      	b.n	80136ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80136cc:	2300      	movs	r3, #0
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3718      	adds	r7, #24
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b086      	sub	sp, #24
 80136da:	af00      	add	r7, sp, #0
 80136dc:	60f8      	str	r0, [r7, #12]
 80136de:	460b      	mov	r3, r1
 80136e0:	607a      	str	r2, [r7, #4]
 80136e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80136e4:	7afb      	ldrb	r3, [r7, #11]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d16f      	bne.n	80137ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	3314      	adds	r3, #20
 80136ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d15a      	bne.n	80137b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	689a      	ldr	r2, [r3, #8]
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	429a      	cmp	r2, r3
 8013704:	d914      	bls.n	8013730 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	689a      	ldr	r2, [r3, #8]
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	68db      	ldr	r3, [r3, #12]
 801370e:	1ad2      	subs	r2, r2, r3
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	689b      	ldr	r3, [r3, #8]
 8013718:	461a      	mov	r2, r3
 801371a:	6879      	ldr	r1, [r7, #4]
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f001 f8e6 	bl	80148ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013722:	2300      	movs	r3, #0
 8013724:	2200      	movs	r2, #0
 8013726:	2100      	movs	r1, #0
 8013728:	68f8      	ldr	r0, [r7, #12]
 801372a:	f001 fe73 	bl	8015414 <USBD_LL_PrepareReceive>
 801372e:	e03f      	b.n	80137b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	68da      	ldr	r2, [r3, #12]
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	689b      	ldr	r3, [r3, #8]
 8013738:	429a      	cmp	r2, r3
 801373a:	d11c      	bne.n	8013776 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	685a      	ldr	r2, [r3, #4]
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013744:	429a      	cmp	r2, r3
 8013746:	d316      	bcc.n	8013776 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	685a      	ldr	r2, [r3, #4]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013752:	429a      	cmp	r2, r3
 8013754:	d20f      	bcs.n	8013776 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013756:	2200      	movs	r2, #0
 8013758:	2100      	movs	r1, #0
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f001 f8c7 	bl	80148ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2200      	movs	r2, #0
 8013764:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013768:	2300      	movs	r3, #0
 801376a:	2200      	movs	r2, #0
 801376c:	2100      	movs	r1, #0
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	f001 fe50 	bl	8015414 <USBD_LL_PrepareReceive>
 8013774:	e01c      	b.n	80137b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801377c:	b2db      	uxtb	r3, r3
 801377e:	2b03      	cmp	r3, #3
 8013780:	d10f      	bne.n	80137a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d009      	beq.n	80137a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2200      	movs	r2, #0
 8013792:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80137a2:	2180      	movs	r1, #128	@ 0x80
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f001 fd8b 	bl	80152c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f001 f8f1 	bl	8014992 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d03a      	beq.n	8013830 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80137ba:	68f8      	ldr	r0, [r7, #12]
 80137bc:	f7ff fe42 	bl	8013444 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2200      	movs	r2, #0
 80137c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80137c8:	e032      	b.n	8013830 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80137ca:	7afb      	ldrb	r3, [r7, #11]
 80137cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	4619      	mov	r1, r3
 80137d4:	68f8      	ldr	r0, [r7, #12]
 80137d6:	f000 f985 	bl	8013ae4 <USBD_CoreFindEP>
 80137da:	4603      	mov	r3, r0
 80137dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80137de:	7dfb      	ldrb	r3, [r7, #23]
 80137e0:	2bff      	cmp	r3, #255	@ 0xff
 80137e2:	d025      	beq.n	8013830 <USBD_LL_DataInStage+0x15a>
 80137e4:	7dfb      	ldrb	r3, [r7, #23]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d122      	bne.n	8013830 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	2b03      	cmp	r3, #3
 80137f4:	d11c      	bne.n	8013830 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80137f6:	7dfa      	ldrb	r2, [r7, #23]
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	32ae      	adds	r2, #174	@ 0xae
 80137fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013800:	695b      	ldr	r3, [r3, #20]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d014      	beq.n	8013830 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013806:	7dfa      	ldrb	r2, [r7, #23]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801380e:	7dfa      	ldrb	r2, [r7, #23]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	32ae      	adds	r2, #174	@ 0xae
 8013814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013818:	695b      	ldr	r3, [r3, #20]
 801381a:	7afa      	ldrb	r2, [r7, #11]
 801381c:	4611      	mov	r1, r2
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	4798      	blx	r3
 8013822:	4603      	mov	r3, r0
 8013824:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013826:	7dbb      	ldrb	r3, [r7, #22]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801382c:	7dbb      	ldrb	r3, [r7, #22]
 801382e:	e000      	b.n	8013832 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013830:	2300      	movs	r3, #0
}
 8013832:	4618      	mov	r0, r3
 8013834:	3718      	adds	r7, #24
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}

0801383a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801383a:	b580      	push	{r7, lr}
 801383c:	b084      	sub	sp, #16
 801383e:	af00      	add	r7, sp, #0
 8013840:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013842:	2300      	movs	r3, #0
 8013844:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2201      	movs	r2, #1
 801384a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2200      	movs	r2, #0
 801385a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2200      	movs	r2, #0
 8013860:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2200      	movs	r2, #0
 8013868:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013872:	2b00      	cmp	r3, #0
 8013874:	d014      	beq.n	80138a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00e      	beq.n	80138a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	6852      	ldr	r2, [r2, #4]
 801388e:	b2d2      	uxtb	r2, r2
 8013890:	4611      	mov	r1, r2
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	4798      	blx	r3
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d001      	beq.n	80138a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801389c:	2303      	movs	r3, #3
 801389e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80138a0:	2340      	movs	r3, #64	@ 0x40
 80138a2:	2200      	movs	r2, #0
 80138a4:	2100      	movs	r1, #0
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f001 fcc5 	bl	8015236 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2201      	movs	r2, #1
 80138b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2240      	movs	r2, #64	@ 0x40
 80138b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80138bc:	2340      	movs	r3, #64	@ 0x40
 80138be:	2200      	movs	r2, #0
 80138c0:	2180      	movs	r1, #128	@ 0x80
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f001 fcb7 	bl	8015236 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2201      	movs	r2, #1
 80138cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2240      	movs	r2, #64	@ 0x40
 80138d2:	621a      	str	r2, [r3, #32]

  return ret;
 80138d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}

080138de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80138de:	b480      	push	{r7}
 80138e0:	b083      	sub	sp, #12
 80138e2:	af00      	add	r7, sp, #0
 80138e4:	6078      	str	r0, [r7, #4]
 80138e6:	460b      	mov	r3, r1
 80138e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	78fa      	ldrb	r2, [r7, #3]
 80138ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80138f0:	2300      	movs	r3, #0
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	370c      	adds	r7, #12
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80138fe:	b480      	push	{r7}
 8013900:	b083      	sub	sp, #12
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801390c:	b2db      	uxtb	r3, r3
 801390e:	2b04      	cmp	r3, #4
 8013910:	d006      	beq.n	8013920 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013918:	b2da      	uxtb	r2, r3
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2204      	movs	r2, #4
 8013924:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013928:	2300      	movs	r3, #0
}
 801392a:	4618      	mov	r0, r3
 801392c:	370c      	adds	r7, #12
 801392e:	46bd      	mov	sp, r7
 8013930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013934:	4770      	bx	lr

08013936 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013936:	b480      	push	{r7}
 8013938:	b083      	sub	sp, #12
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b04      	cmp	r3, #4
 8013948:	d106      	bne.n	8013958 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013950:	b2da      	uxtb	r2, r3
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013958:	2300      	movs	r3, #0
}
 801395a:	4618      	mov	r0, r3
 801395c:	370c      	adds	r7, #12
 801395e:	46bd      	mov	sp, r7
 8013960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013964:	4770      	bx	lr

08013966 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013966:	b580      	push	{r7, lr}
 8013968:	b082      	sub	sp, #8
 801396a:	af00      	add	r7, sp, #0
 801396c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013974:	b2db      	uxtb	r3, r3
 8013976:	2b03      	cmp	r3, #3
 8013978:	d110      	bne.n	801399c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801398a:	69db      	ldr	r3, [r3, #28]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d005      	beq.n	801399c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013996:	69db      	ldr	r3, [r3, #28]
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
 80139ae:	460b      	mov	r3, r1
 80139b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	32ae      	adds	r2, #174	@ 0xae
 80139bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d101      	bne.n	80139c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80139c4:	2303      	movs	r3, #3
 80139c6:	e01c      	b.n	8013a02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	2b03      	cmp	r3, #3
 80139d2:	d115      	bne.n	8013a00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	32ae      	adds	r2, #174	@ 0xae
 80139de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139e2:	6a1b      	ldr	r3, [r3, #32]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d00b      	beq.n	8013a00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	32ae      	adds	r2, #174	@ 0xae
 80139f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	78fa      	ldrb	r2, [r7, #3]
 80139fa:	4611      	mov	r1, r2
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}

08013a0a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b082      	sub	sp, #8
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
 8013a12:	460b      	mov	r3, r1
 8013a14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	32ae      	adds	r2, #174	@ 0xae
 8013a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d101      	bne.n	8013a2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013a28:	2303      	movs	r3, #3
 8013a2a:	e01c      	b.n	8013a66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	2b03      	cmp	r3, #3
 8013a36:	d115      	bne.n	8013a64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	32ae      	adds	r2, #174	@ 0xae
 8013a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00b      	beq.n	8013a64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	32ae      	adds	r2, #174	@ 0xae
 8013a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a5c:	78fa      	ldrb	r2, [r7, #3]
 8013a5e:	4611      	mov	r1, r2
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013a64:	2300      	movs	r3, #0
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013a6e:	b480      	push	{r7}
 8013a70:	b083      	sub	sp, #12
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013a76:	2300      	movs	r3, #0
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	370c      	adds	r7, #12
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a82:	4770      	bx	lr

08013a84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b084      	sub	sp, #16
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2201      	movs	r2, #1
 8013a94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d00e      	beq.n	8013ac0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	6852      	ldr	r2, [r2, #4]
 8013aae:	b2d2      	uxtb	r2, r2
 8013ab0:	4611      	mov	r1, r2
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	4798      	blx	r3
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d001      	beq.n	8013ac0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013abc:	2303      	movs	r3, #3
 8013abe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013aca:	b480      	push	{r7}
 8013acc:	b083      	sub	sp, #12
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
 8013ad2:	460b      	mov	r3, r1
 8013ad4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013ad6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr

08013ae4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	460b      	mov	r3, r1
 8013aee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013af0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013af2:	4618      	mov	r0, r3
 8013af4:	370c      	adds	r7, #12
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b086      	sub	sp, #24
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
 8013b06:	460b      	mov	r3, r1
 8013b08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013b12:	2300      	movs	r3, #0
 8013b14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	885b      	ldrh	r3, [r3, #2]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	7812      	ldrb	r2, [r2, #0]
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d91f      	bls.n	8013b64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013b2a:	e013      	b.n	8013b54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013b2c:	f107 030a 	add.w	r3, r7, #10
 8013b30:	4619      	mov	r1, r3
 8013b32:	6978      	ldr	r0, [r7, #20]
 8013b34:	f000 f81b 	bl	8013b6e <USBD_GetNextDesc>
 8013b38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	785b      	ldrb	r3, [r3, #1]
 8013b3e:	2b05      	cmp	r3, #5
 8013b40:	d108      	bne.n	8013b54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	789b      	ldrb	r3, [r3, #2]
 8013b4a:	78fa      	ldrb	r2, [r7, #3]
 8013b4c:	429a      	cmp	r2, r3
 8013b4e:	d008      	beq.n	8013b62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013b50:	2300      	movs	r3, #0
 8013b52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	885b      	ldrh	r3, [r3, #2]
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	897b      	ldrh	r3, [r7, #10]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d8e5      	bhi.n	8013b2c <USBD_GetEpDesc+0x2e>
 8013b60:	e000      	b.n	8013b64 <USBD_GetEpDesc+0x66>
          break;
 8013b62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013b64:	693b      	ldr	r3, [r7, #16]
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3718      	adds	r7, #24
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}

08013b6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013b6e:	b480      	push	{r7}
 8013b70:	b085      	sub	sp, #20
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
 8013b76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	881b      	ldrh	r3, [r3, #0]
 8013b80:	68fa      	ldr	r2, [r7, #12]
 8013b82:	7812      	ldrb	r2, [r2, #0]
 8013b84:	4413      	add	r3, r2
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	461a      	mov	r2, r3
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4413      	add	r3, r2
 8013b96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013b98:	68fb      	ldr	r3, [r7, #12]
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3714      	adds	r7, #20
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba4:	4770      	bx	lr

08013ba6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013ba6:	b480      	push	{r7}
 8013ba8:	b087      	sub	sp, #28
 8013baa:	af00      	add	r7, sp, #0
 8013bac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	3301      	adds	r3, #1
 8013bbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	781b      	ldrb	r3, [r3, #0]
 8013bc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013bc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013bc8:	021b      	lsls	r3, r3, #8
 8013bca:	b21a      	sxth	r2, r3
 8013bcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013bd0:	4313      	orrs	r3, r2
 8013bd2:	b21b      	sxth	r3, r3
 8013bd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013bd6:	89fb      	ldrh	r3, [r7, #14]
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	371c      	adds	r7, #28
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be2:	4770      	bx	lr

08013be4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	781b      	ldrb	r3, [r3, #0]
 8013bf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013bfa:	2b40      	cmp	r3, #64	@ 0x40
 8013bfc:	d005      	beq.n	8013c0a <USBD_StdDevReq+0x26>
 8013bfe:	2b40      	cmp	r3, #64	@ 0x40
 8013c00:	d857      	bhi.n	8013cb2 <USBD_StdDevReq+0xce>
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d00f      	beq.n	8013c26 <USBD_StdDevReq+0x42>
 8013c06:	2b20      	cmp	r3, #32
 8013c08:	d153      	bne.n	8013cb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	32ae      	adds	r2, #174	@ 0xae
 8013c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c18:	689b      	ldr	r3, [r3, #8]
 8013c1a:	6839      	ldr	r1, [r7, #0]
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	4798      	blx	r3
 8013c20:	4603      	mov	r3, r0
 8013c22:	73fb      	strb	r3, [r7, #15]
      break;
 8013c24:	e04a      	b.n	8013cbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	785b      	ldrb	r3, [r3, #1]
 8013c2a:	2b09      	cmp	r3, #9
 8013c2c:	d83b      	bhi.n	8013ca6 <USBD_StdDevReq+0xc2>
 8013c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8013c34 <USBD_StdDevReq+0x50>)
 8013c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c34:	08013c89 	.word	0x08013c89
 8013c38:	08013c9d 	.word	0x08013c9d
 8013c3c:	08013ca7 	.word	0x08013ca7
 8013c40:	08013c93 	.word	0x08013c93
 8013c44:	08013ca7 	.word	0x08013ca7
 8013c48:	08013c67 	.word	0x08013c67
 8013c4c:	08013c5d 	.word	0x08013c5d
 8013c50:	08013ca7 	.word	0x08013ca7
 8013c54:	08013c7f 	.word	0x08013c7f
 8013c58:	08013c71 	.word	0x08013c71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013c5c:	6839      	ldr	r1, [r7, #0]
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f000 fa3c 	bl	80140dc <USBD_GetDescriptor>
          break;
 8013c64:	e024      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013c66:	6839      	ldr	r1, [r7, #0]
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 fbcb 	bl	8014404 <USBD_SetAddress>
          break;
 8013c6e:	e01f      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013c70:	6839      	ldr	r1, [r7, #0]
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f000 fc0a 	bl	801448c <USBD_SetConfig>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	73fb      	strb	r3, [r7, #15]
          break;
 8013c7c:	e018      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013c7e:	6839      	ldr	r1, [r7, #0]
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f000 fcad 	bl	80145e0 <USBD_GetConfig>
          break;
 8013c86:	e013      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 fcde 	bl	801464c <USBD_GetStatus>
          break;
 8013c90:	e00e      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013c92:	6839      	ldr	r1, [r7, #0]
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f000 fd0d 	bl	80146b4 <USBD_SetFeature>
          break;
 8013c9a:	e009      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013c9c:	6839      	ldr	r1, [r7, #0]
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 fd31 	bl	8014706 <USBD_ClrFeature>
          break;
 8013ca4:	e004      	b.n	8013cb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013ca6:	6839      	ldr	r1, [r7, #0]
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f000 fd88 	bl	80147be <USBD_CtlError>
          break;
 8013cae:	bf00      	nop
      }
      break;
 8013cb0:	e004      	b.n	8013cbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013cb2:	6839      	ldr	r1, [r7, #0]
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 fd82 	bl	80147be <USBD_CtlError>
      break;
 8013cba:	bf00      	nop
  }

  return ret;
 8013cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop

08013cc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013cde:	2b40      	cmp	r3, #64	@ 0x40
 8013ce0:	d005      	beq.n	8013cee <USBD_StdItfReq+0x26>
 8013ce2:	2b40      	cmp	r3, #64	@ 0x40
 8013ce4:	d852      	bhi.n	8013d8c <USBD_StdItfReq+0xc4>
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d001      	beq.n	8013cee <USBD_StdItfReq+0x26>
 8013cea:	2b20      	cmp	r3, #32
 8013cec:	d14e      	bne.n	8013d8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	2b02      	cmp	r3, #2
 8013cfa:	d840      	bhi.n	8013d7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	889b      	ldrh	r3, [r3, #4]
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	2b01      	cmp	r3, #1
 8013d04:	d836      	bhi.n	8013d74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	889b      	ldrh	r3, [r3, #4]
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7ff fedb 	bl	8013aca <USBD_CoreFindIF>
 8013d14:	4603      	mov	r3, r0
 8013d16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d18:	7bbb      	ldrb	r3, [r7, #14]
 8013d1a:	2bff      	cmp	r3, #255	@ 0xff
 8013d1c:	d01d      	beq.n	8013d5a <USBD_StdItfReq+0x92>
 8013d1e:	7bbb      	ldrb	r3, [r7, #14]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d11a      	bne.n	8013d5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013d24:	7bba      	ldrb	r2, [r7, #14]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	32ae      	adds	r2, #174	@ 0xae
 8013d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2e:	689b      	ldr	r3, [r3, #8]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d00f      	beq.n	8013d54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013d34:	7bba      	ldrb	r2, [r7, #14]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013d3c:	7bba      	ldrb	r2, [r7, #14]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	32ae      	adds	r2, #174	@ 0xae
 8013d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d46:	689b      	ldr	r3, [r3, #8]
 8013d48:	6839      	ldr	r1, [r7, #0]
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	4798      	blx	r3
 8013d4e:	4603      	mov	r3, r0
 8013d50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013d52:	e004      	b.n	8013d5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013d54:	2303      	movs	r3, #3
 8013d56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013d58:	e001      	b.n	8013d5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013d5a:	2303      	movs	r3, #3
 8013d5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	88db      	ldrh	r3, [r3, #6]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d110      	bne.n	8013d88 <USBD_StdItfReq+0xc0>
 8013d66:	7bfb      	ldrb	r3, [r7, #15]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10d      	bne.n	8013d88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f000 fdfd 	bl	801496c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013d72:	e009      	b.n	8013d88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013d74:	6839      	ldr	r1, [r7, #0]
 8013d76:	6878      	ldr	r0, [r7, #4]
 8013d78:	f000 fd21 	bl	80147be <USBD_CtlError>
          break;
 8013d7c:	e004      	b.n	8013d88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013d7e:	6839      	ldr	r1, [r7, #0]
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f000 fd1c 	bl	80147be <USBD_CtlError>
          break;
 8013d86:	e000      	b.n	8013d8a <USBD_StdItfReq+0xc2>
          break;
 8013d88:	bf00      	nop
      }
      break;
 8013d8a:	e004      	b.n	8013d96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013d8c:	6839      	ldr	r1, [r7, #0]
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f000 fd15 	bl	80147be <USBD_CtlError>
      break;
 8013d94:	bf00      	nop
  }

  return ret;
 8013d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3710      	adds	r7, #16
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013daa:	2300      	movs	r3, #0
 8013dac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	889b      	ldrh	r3, [r3, #4]
 8013db2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013dbc:	2b40      	cmp	r3, #64	@ 0x40
 8013dbe:	d007      	beq.n	8013dd0 <USBD_StdEPReq+0x30>
 8013dc0:	2b40      	cmp	r3, #64	@ 0x40
 8013dc2:	f200 817f 	bhi.w	80140c4 <USBD_StdEPReq+0x324>
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d02a      	beq.n	8013e20 <USBD_StdEPReq+0x80>
 8013dca:	2b20      	cmp	r3, #32
 8013dcc:	f040 817a 	bne.w	80140c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013dd0:	7bbb      	ldrb	r3, [r7, #14]
 8013dd2:	4619      	mov	r1, r3
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f7ff fe85 	bl	8013ae4 <USBD_CoreFindEP>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013dde:	7b7b      	ldrb	r3, [r7, #13]
 8013de0:	2bff      	cmp	r3, #255	@ 0xff
 8013de2:	f000 8174 	beq.w	80140ce <USBD_StdEPReq+0x32e>
 8013de6:	7b7b      	ldrb	r3, [r7, #13]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f040 8170 	bne.w	80140ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013dee:	7b7a      	ldrb	r2, [r7, #13]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013df6:	7b7a      	ldrb	r2, [r7, #13]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	32ae      	adds	r2, #174	@ 0xae
 8013dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e00:	689b      	ldr	r3, [r3, #8]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f000 8163 	beq.w	80140ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013e08:	7b7a      	ldrb	r2, [r7, #13]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	32ae      	adds	r2, #174	@ 0xae
 8013e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	6839      	ldr	r1, [r7, #0]
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	4798      	blx	r3
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013e1e:	e156      	b.n	80140ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	785b      	ldrb	r3, [r3, #1]
 8013e24:	2b03      	cmp	r3, #3
 8013e26:	d008      	beq.n	8013e3a <USBD_StdEPReq+0x9a>
 8013e28:	2b03      	cmp	r3, #3
 8013e2a:	f300 8145 	bgt.w	80140b8 <USBD_StdEPReq+0x318>
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	f000 809b 	beq.w	8013f6a <USBD_StdEPReq+0x1ca>
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d03c      	beq.n	8013eb2 <USBD_StdEPReq+0x112>
 8013e38:	e13e      	b.n	80140b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e40:	b2db      	uxtb	r3, r3
 8013e42:	2b02      	cmp	r3, #2
 8013e44:	d002      	beq.n	8013e4c <USBD_StdEPReq+0xac>
 8013e46:	2b03      	cmp	r3, #3
 8013e48:	d016      	beq.n	8013e78 <USBD_StdEPReq+0xd8>
 8013e4a:	e02c      	b.n	8013ea6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013e4c:	7bbb      	ldrb	r3, [r7, #14]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d00d      	beq.n	8013e6e <USBD_StdEPReq+0xce>
 8013e52:	7bbb      	ldrb	r3, [r7, #14]
 8013e54:	2b80      	cmp	r3, #128	@ 0x80
 8013e56:	d00a      	beq.n	8013e6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013e58:	7bbb      	ldrb	r3, [r7, #14]
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f001 fa2f 	bl	80152c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e62:	2180      	movs	r1, #128	@ 0x80
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f001 fa2b 	bl	80152c0 <USBD_LL_StallEP>
 8013e6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013e6c:	e020      	b.n	8013eb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013e6e:	6839      	ldr	r1, [r7, #0]
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f000 fca4 	bl	80147be <USBD_CtlError>
              break;
 8013e76:	e01b      	b.n	8013eb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	885b      	ldrh	r3, [r3, #2]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d10e      	bne.n	8013e9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013e80:	7bbb      	ldrb	r3, [r7, #14]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00b      	beq.n	8013e9e <USBD_StdEPReq+0xfe>
 8013e86:	7bbb      	ldrb	r3, [r7, #14]
 8013e88:	2b80      	cmp	r3, #128	@ 0x80
 8013e8a:	d008      	beq.n	8013e9e <USBD_StdEPReq+0xfe>
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	88db      	ldrh	r3, [r3, #6]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d104      	bne.n	8013e9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013e94:	7bbb      	ldrb	r3, [r7, #14]
 8013e96:	4619      	mov	r1, r3
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f001 fa11 	bl	80152c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f000 fd64 	bl	801496c <USBD_CtlSendStatus>

              break;
 8013ea4:	e004      	b.n	8013eb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fc88 	bl	80147be <USBD_CtlError>
              break;
 8013eae:	bf00      	nop
          }
          break;
 8013eb0:	e107      	b.n	80140c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d002      	beq.n	8013ec4 <USBD_StdEPReq+0x124>
 8013ebe:	2b03      	cmp	r3, #3
 8013ec0:	d016      	beq.n	8013ef0 <USBD_StdEPReq+0x150>
 8013ec2:	e04b      	b.n	8013f5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ec4:	7bbb      	ldrb	r3, [r7, #14]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d00d      	beq.n	8013ee6 <USBD_StdEPReq+0x146>
 8013eca:	7bbb      	ldrb	r3, [r7, #14]
 8013ecc:	2b80      	cmp	r3, #128	@ 0x80
 8013ece:	d00a      	beq.n	8013ee6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ed0:	7bbb      	ldrb	r3, [r7, #14]
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f001 f9f3 	bl	80152c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013eda:	2180      	movs	r1, #128	@ 0x80
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f001 f9ef 	bl	80152c0 <USBD_LL_StallEP>
 8013ee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ee4:	e040      	b.n	8013f68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013ee6:	6839      	ldr	r1, [r7, #0]
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 fc68 	bl	80147be <USBD_CtlError>
              break;
 8013eee:	e03b      	b.n	8013f68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	885b      	ldrh	r3, [r3, #2]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d136      	bne.n	8013f66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ef8:	7bbb      	ldrb	r3, [r7, #14]
 8013efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d004      	beq.n	8013f0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013f02:	7bbb      	ldrb	r3, [r7, #14]
 8013f04:	4619      	mov	r1, r3
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f001 f9f9 	bl	80152fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f000 fd2d 	bl	801496c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013f12:	7bbb      	ldrb	r3, [r7, #14]
 8013f14:	4619      	mov	r1, r3
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f7ff fde4 	bl	8013ae4 <USBD_CoreFindEP>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f20:	7b7b      	ldrb	r3, [r7, #13]
 8013f22:	2bff      	cmp	r3, #255	@ 0xff
 8013f24:	d01f      	beq.n	8013f66 <USBD_StdEPReq+0x1c6>
 8013f26:	7b7b      	ldrb	r3, [r7, #13]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d11c      	bne.n	8013f66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013f2c:	7b7a      	ldrb	r2, [r7, #13]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013f34:	7b7a      	ldrb	r2, [r7, #13]
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	32ae      	adds	r2, #174	@ 0xae
 8013f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d010      	beq.n	8013f66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013f44:	7b7a      	ldrb	r2, [r7, #13]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	32ae      	adds	r2, #174	@ 0xae
 8013f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	6839      	ldr	r1, [r7, #0]
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	4798      	blx	r3
 8013f56:	4603      	mov	r3, r0
 8013f58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013f5a:	e004      	b.n	8013f66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013f5c:	6839      	ldr	r1, [r7, #0]
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f000 fc2d 	bl	80147be <USBD_CtlError>
              break;
 8013f64:	e000      	b.n	8013f68 <USBD_StdEPReq+0x1c8>
              break;
 8013f66:	bf00      	nop
          }
          break;
 8013f68:	e0ab      	b.n	80140c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	2b02      	cmp	r3, #2
 8013f74:	d002      	beq.n	8013f7c <USBD_StdEPReq+0x1dc>
 8013f76:	2b03      	cmp	r3, #3
 8013f78:	d032      	beq.n	8013fe0 <USBD_StdEPReq+0x240>
 8013f7a:	e097      	b.n	80140ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f7c:	7bbb      	ldrb	r3, [r7, #14]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d007      	beq.n	8013f92 <USBD_StdEPReq+0x1f2>
 8013f82:	7bbb      	ldrb	r3, [r7, #14]
 8013f84:	2b80      	cmp	r3, #128	@ 0x80
 8013f86:	d004      	beq.n	8013f92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013f88:	6839      	ldr	r1, [r7, #0]
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f000 fc17 	bl	80147be <USBD_CtlError>
                break;
 8013f90:	e091      	b.n	80140b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	da0b      	bge.n	8013fb2 <USBD_StdEPReq+0x212>
 8013f9a:	7bbb      	ldrb	r3, [r7, #14]
 8013f9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	4413      	add	r3, r2
 8013fa6:	009b      	lsls	r3, r3, #2
 8013fa8:	3310      	adds	r3, #16
 8013faa:	687a      	ldr	r2, [r7, #4]
 8013fac:	4413      	add	r3, r2
 8013fae:	3304      	adds	r3, #4
 8013fb0:	e00b      	b.n	8013fca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013fb2:	7bbb      	ldrb	r3, [r7, #14]
 8013fb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fb8:	4613      	mov	r3, r2
 8013fba:	009b      	lsls	r3, r3, #2
 8013fbc:	4413      	add	r3, r2
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013fc4:	687a      	ldr	r2, [r7, #4]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	3304      	adds	r3, #4
 8013fca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2202      	movs	r2, #2
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f000 fc6d 	bl	80148b8 <USBD_CtlSendData>
              break;
 8013fde:	e06a      	b.n	80140b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	da11      	bge.n	801400c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013fe8:	7bbb      	ldrb	r3, [r7, #14]
 8013fea:	f003 020f 	and.w	r2, r3, #15
 8013fee:	6879      	ldr	r1, [r7, #4]
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	4413      	add	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	440b      	add	r3, r1
 8013ffa:	3324      	adds	r3, #36	@ 0x24
 8013ffc:	881b      	ldrh	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d117      	bne.n	8014032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014002:	6839      	ldr	r1, [r7, #0]
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f000 fbda 	bl	80147be <USBD_CtlError>
                  break;
 801400a:	e054      	b.n	80140b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801400c:	7bbb      	ldrb	r3, [r7, #14]
 801400e:	f003 020f 	and.w	r2, r3, #15
 8014012:	6879      	ldr	r1, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	4413      	add	r3, r2
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	440b      	add	r3, r1
 801401e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014022:	881b      	ldrh	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d104      	bne.n	8014032 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014028:	6839      	ldr	r1, [r7, #0]
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 fbc7 	bl	80147be <USBD_CtlError>
                  break;
 8014030:	e041      	b.n	80140b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014036:	2b00      	cmp	r3, #0
 8014038:	da0b      	bge.n	8014052 <USBD_StdEPReq+0x2b2>
 801403a:	7bbb      	ldrb	r3, [r7, #14]
 801403c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014040:	4613      	mov	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4413      	add	r3, r2
 8014046:	009b      	lsls	r3, r3, #2
 8014048:	3310      	adds	r3, #16
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	4413      	add	r3, r2
 801404e:	3304      	adds	r3, #4
 8014050:	e00b      	b.n	801406a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014052:	7bbb      	ldrb	r3, [r7, #14]
 8014054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014058:	4613      	mov	r3, r2
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	4413      	add	r3, r2
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	4413      	add	r3, r2
 8014068:	3304      	adds	r3, #4
 801406a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801406c:	7bbb      	ldrb	r3, [r7, #14]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d002      	beq.n	8014078 <USBD_StdEPReq+0x2d8>
 8014072:	7bbb      	ldrb	r3, [r7, #14]
 8014074:	2b80      	cmp	r3, #128	@ 0x80
 8014076:	d103      	bne.n	8014080 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	2200      	movs	r2, #0
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	e00e      	b.n	801409e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014080:	7bbb      	ldrb	r3, [r7, #14]
 8014082:	4619      	mov	r1, r3
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f001 f959 	bl	801533c <USBD_LL_IsStallEP>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d003      	beq.n	8014098 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	2201      	movs	r2, #1
 8014094:	601a      	str	r2, [r3, #0]
 8014096:	e002      	b.n	801409e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	2200      	movs	r2, #0
 801409c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	2202      	movs	r2, #2
 80140a2:	4619      	mov	r1, r3
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f000 fc07 	bl	80148b8 <USBD_CtlSendData>
              break;
 80140aa:	e004      	b.n	80140b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80140ac:	6839      	ldr	r1, [r7, #0]
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f000 fb85 	bl	80147be <USBD_CtlError>
              break;
 80140b4:	bf00      	nop
          }
          break;
 80140b6:	e004      	b.n	80140c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80140b8:	6839      	ldr	r1, [r7, #0]
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f000 fb7f 	bl	80147be <USBD_CtlError>
          break;
 80140c0:	bf00      	nop
      }
      break;
 80140c2:	e005      	b.n	80140d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80140c4:	6839      	ldr	r1, [r7, #0]
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f000 fb79 	bl	80147be <USBD_CtlError>
      break;
 80140cc:	e000      	b.n	80140d0 <USBD_StdEPReq+0x330>
      break;
 80140ce:	bf00      	nop
  }

  return ret;
 80140d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
	...

080140dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80140e6:	2300      	movs	r3, #0
 80140e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80140ea:	2300      	movs	r3, #0
 80140ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80140ee:	2300      	movs	r3, #0
 80140f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	885b      	ldrh	r3, [r3, #2]
 80140f6:	0a1b      	lsrs	r3, r3, #8
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	3b01      	subs	r3, #1
 80140fc:	2b0e      	cmp	r3, #14
 80140fe:	f200 8152 	bhi.w	80143a6 <USBD_GetDescriptor+0x2ca>
 8014102:	a201      	add	r2, pc, #4	@ (adr r2, 8014108 <USBD_GetDescriptor+0x2c>)
 8014104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014108:	08014179 	.word	0x08014179
 801410c:	08014191 	.word	0x08014191
 8014110:	080141d1 	.word	0x080141d1
 8014114:	080143a7 	.word	0x080143a7
 8014118:	080143a7 	.word	0x080143a7
 801411c:	08014347 	.word	0x08014347
 8014120:	08014373 	.word	0x08014373
 8014124:	080143a7 	.word	0x080143a7
 8014128:	080143a7 	.word	0x080143a7
 801412c:	080143a7 	.word	0x080143a7
 8014130:	080143a7 	.word	0x080143a7
 8014134:	080143a7 	.word	0x080143a7
 8014138:	080143a7 	.word	0x080143a7
 801413c:	080143a7 	.word	0x080143a7
 8014140:	08014145 	.word	0x08014145
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801414a:	69db      	ldr	r3, [r3, #28]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d00b      	beq.n	8014168 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014156:	69db      	ldr	r3, [r3, #28]
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	7c12      	ldrb	r2, [r2, #16]
 801415c:	f107 0108 	add.w	r1, r7, #8
 8014160:	4610      	mov	r0, r2
 8014162:	4798      	blx	r3
 8014164:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014166:	e126      	b.n	80143b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014168:	6839      	ldr	r1, [r7, #0]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f000 fb27 	bl	80147be <USBD_CtlError>
        err++;
 8014170:	7afb      	ldrb	r3, [r7, #11]
 8014172:	3301      	adds	r3, #1
 8014174:	72fb      	strb	r3, [r7, #11]
      break;
 8014176:	e11e      	b.n	80143b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	687a      	ldr	r2, [r7, #4]
 8014182:	7c12      	ldrb	r2, [r2, #16]
 8014184:	f107 0108 	add.w	r1, r7, #8
 8014188:	4610      	mov	r0, r2
 801418a:	4798      	blx	r3
 801418c:	60f8      	str	r0, [r7, #12]
      break;
 801418e:	e112      	b.n	80143b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	7c1b      	ldrb	r3, [r3, #16]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10d      	bne.n	80141b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141a0:	f107 0208 	add.w	r2, r7, #8
 80141a4:	4610      	mov	r0, r2
 80141a6:	4798      	blx	r3
 80141a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	3301      	adds	r3, #1
 80141ae:	2202      	movs	r2, #2
 80141b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80141b2:	e100      	b.n	80143b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141bc:	f107 0208 	add.w	r2, r7, #8
 80141c0:	4610      	mov	r0, r2
 80141c2:	4798      	blx	r3
 80141c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	3301      	adds	r3, #1
 80141ca:	2202      	movs	r2, #2
 80141cc:	701a      	strb	r2, [r3, #0]
      break;
 80141ce:	e0f2      	b.n	80143b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	885b      	ldrh	r3, [r3, #2]
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	2b05      	cmp	r3, #5
 80141d8:	f200 80ac 	bhi.w	8014334 <USBD_GetDescriptor+0x258>
 80141dc:	a201      	add	r2, pc, #4	@ (adr r2, 80141e4 <USBD_GetDescriptor+0x108>)
 80141de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e2:	bf00      	nop
 80141e4:	080141fd 	.word	0x080141fd
 80141e8:	08014231 	.word	0x08014231
 80141ec:	08014265 	.word	0x08014265
 80141f0:	08014299 	.word	0x08014299
 80141f4:	080142cd 	.word	0x080142cd
 80141f8:	08014301 	.word	0x08014301
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d00b      	beq.n	8014220 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	687a      	ldr	r2, [r7, #4]
 8014212:	7c12      	ldrb	r2, [r2, #16]
 8014214:	f107 0108 	add.w	r1, r7, #8
 8014218:	4610      	mov	r0, r2
 801421a:	4798      	blx	r3
 801421c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801421e:	e091      	b.n	8014344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014220:	6839      	ldr	r1, [r7, #0]
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f000 facb 	bl	80147be <USBD_CtlError>
            err++;
 8014228:	7afb      	ldrb	r3, [r7, #11]
 801422a:	3301      	adds	r3, #1
 801422c:	72fb      	strb	r3, [r7, #11]
          break;
 801422e:	e089      	b.n	8014344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014236:	689b      	ldr	r3, [r3, #8]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d00b      	beq.n	8014254 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	7c12      	ldrb	r2, [r2, #16]
 8014248:	f107 0108 	add.w	r1, r7, #8
 801424c:	4610      	mov	r0, r2
 801424e:	4798      	blx	r3
 8014250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014252:	e077      	b.n	8014344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014254:	6839      	ldr	r1, [r7, #0]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 fab1 	bl	80147be <USBD_CtlError>
            err++;
 801425c:	7afb      	ldrb	r3, [r7, #11]
 801425e:	3301      	adds	r3, #1
 8014260:	72fb      	strb	r3, [r7, #11]
          break;
 8014262:	e06f      	b.n	8014344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801426a:	68db      	ldr	r3, [r3, #12]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d00b      	beq.n	8014288 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	7c12      	ldrb	r2, [r2, #16]
 801427c:	f107 0108 	add.w	r1, r7, #8
 8014280:	4610      	mov	r0, r2
 8014282:	4798      	blx	r3
 8014284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014286:	e05d      	b.n	8014344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014288:	6839      	ldr	r1, [r7, #0]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 fa97 	bl	80147be <USBD_CtlError>
            err++;
 8014290:	7afb      	ldrb	r3, [r7, #11]
 8014292:	3301      	adds	r3, #1
 8014294:	72fb      	strb	r3, [r7, #11]
          break;
 8014296:	e055      	b.n	8014344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801429e:	691b      	ldr	r3, [r3, #16]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d00b      	beq.n	80142bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142aa:	691b      	ldr	r3, [r3, #16]
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	7c12      	ldrb	r2, [r2, #16]
 80142b0:	f107 0108 	add.w	r1, r7, #8
 80142b4:	4610      	mov	r0, r2
 80142b6:	4798      	blx	r3
 80142b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142ba:	e043      	b.n	8014344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 fa7d 	bl	80147be <USBD_CtlError>
            err++;
 80142c4:	7afb      	ldrb	r3, [r7, #11]
 80142c6:	3301      	adds	r3, #1
 80142c8:	72fb      	strb	r3, [r7, #11]
          break;
 80142ca:	e03b      	b.n	8014344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142d2:	695b      	ldr	r3, [r3, #20]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00b      	beq.n	80142f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80142de:	695b      	ldr	r3, [r3, #20]
 80142e0:	687a      	ldr	r2, [r7, #4]
 80142e2:	7c12      	ldrb	r2, [r2, #16]
 80142e4:	f107 0108 	add.w	r1, r7, #8
 80142e8:	4610      	mov	r0, r2
 80142ea:	4798      	blx	r3
 80142ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142ee:	e029      	b.n	8014344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80142f0:	6839      	ldr	r1, [r7, #0]
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 fa63 	bl	80147be <USBD_CtlError>
            err++;
 80142f8:	7afb      	ldrb	r3, [r7, #11]
 80142fa:	3301      	adds	r3, #1
 80142fc:	72fb      	strb	r3, [r7, #11]
          break;
 80142fe:	e021      	b.n	8014344 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014306:	699b      	ldr	r3, [r3, #24]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d00b      	beq.n	8014324 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014312:	699b      	ldr	r3, [r3, #24]
 8014314:	687a      	ldr	r2, [r7, #4]
 8014316:	7c12      	ldrb	r2, [r2, #16]
 8014318:	f107 0108 	add.w	r1, r7, #8
 801431c:	4610      	mov	r0, r2
 801431e:	4798      	blx	r3
 8014320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014322:	e00f      	b.n	8014344 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014324:	6839      	ldr	r1, [r7, #0]
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 fa49 	bl	80147be <USBD_CtlError>
            err++;
 801432c:	7afb      	ldrb	r3, [r7, #11]
 801432e:	3301      	adds	r3, #1
 8014330:	72fb      	strb	r3, [r7, #11]
          break;
 8014332:	e007      	b.n	8014344 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014334:	6839      	ldr	r1, [r7, #0]
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f000 fa41 	bl	80147be <USBD_CtlError>
          err++;
 801433c:	7afb      	ldrb	r3, [r7, #11]
 801433e:	3301      	adds	r3, #1
 8014340:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014342:	bf00      	nop
      }
      break;
 8014344:	e037      	b.n	80143b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	7c1b      	ldrb	r3, [r3, #16]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d109      	bne.n	8014362 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014356:	f107 0208 	add.w	r2, r7, #8
 801435a:	4610      	mov	r0, r2
 801435c:	4798      	blx	r3
 801435e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014360:	e029      	b.n	80143b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 fa2a 	bl	80147be <USBD_CtlError>
        err++;
 801436a:	7afb      	ldrb	r3, [r7, #11]
 801436c:	3301      	adds	r3, #1
 801436e:	72fb      	strb	r3, [r7, #11]
      break;
 8014370:	e021      	b.n	80143b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	7c1b      	ldrb	r3, [r3, #16]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d10d      	bne.n	8014396 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014382:	f107 0208 	add.w	r2, r7, #8
 8014386:	4610      	mov	r0, r2
 8014388:	4798      	blx	r3
 801438a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	3301      	adds	r3, #1
 8014390:	2207      	movs	r2, #7
 8014392:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014394:	e00f      	b.n	80143b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014396:	6839      	ldr	r1, [r7, #0]
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f000 fa10 	bl	80147be <USBD_CtlError>
        err++;
 801439e:	7afb      	ldrb	r3, [r7, #11]
 80143a0:	3301      	adds	r3, #1
 80143a2:	72fb      	strb	r3, [r7, #11]
      break;
 80143a4:	e007      	b.n	80143b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fa08 	bl	80147be <USBD_CtlError>
      err++;
 80143ae:	7afb      	ldrb	r3, [r7, #11]
 80143b0:	3301      	adds	r3, #1
 80143b2:	72fb      	strb	r3, [r7, #11]
      break;
 80143b4:	bf00      	nop
  }

  if (err != 0U)
 80143b6:	7afb      	ldrb	r3, [r7, #11]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d11e      	bne.n	80143fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	88db      	ldrh	r3, [r3, #6]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d016      	beq.n	80143f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80143c4:	893b      	ldrh	r3, [r7, #8]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00e      	beq.n	80143e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	88da      	ldrh	r2, [r3, #6]
 80143ce:	893b      	ldrh	r3, [r7, #8]
 80143d0:	4293      	cmp	r3, r2
 80143d2:	bf28      	it	cs
 80143d4:	4613      	movcs	r3, r2
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80143da:	893b      	ldrh	r3, [r7, #8]
 80143dc:	461a      	mov	r2, r3
 80143de:	68f9      	ldr	r1, [r7, #12]
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f000 fa69 	bl	80148b8 <USBD_CtlSendData>
 80143e6:	e009      	b.n	80143fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80143e8:	6839      	ldr	r1, [r7, #0]
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f000 f9e7 	bl	80147be <USBD_CtlError>
 80143f0:	e004      	b.n	80143fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f000 faba 	bl	801496c <USBD_CtlSendStatus>
 80143f8:	e000      	b.n	80143fc <USBD_GetDescriptor+0x320>
    return;
 80143fa:	bf00      	nop
  }
}
 80143fc:	3710      	adds	r7, #16
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop

08014404 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801440e:	683b      	ldr	r3, [r7, #0]
 8014410:	889b      	ldrh	r3, [r3, #4]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d131      	bne.n	801447a <USBD_SetAddress+0x76>
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	88db      	ldrh	r3, [r3, #6]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d12d      	bne.n	801447a <USBD_SetAddress+0x76>
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	885b      	ldrh	r3, [r3, #2]
 8014422:	2b7f      	cmp	r3, #127	@ 0x7f
 8014424:	d829      	bhi.n	801447a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	885b      	ldrh	r3, [r3, #2]
 801442a:	b2db      	uxtb	r3, r3
 801442c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014430:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014438:	b2db      	uxtb	r3, r3
 801443a:	2b03      	cmp	r3, #3
 801443c:	d104      	bne.n	8014448 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801443e:	6839      	ldr	r1, [r7, #0]
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f000 f9bc 	bl	80147be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014446:	e01d      	b.n	8014484 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	7bfa      	ldrb	r2, [r7, #15]
 801444c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014450:	7bfb      	ldrb	r3, [r7, #15]
 8014452:	4619      	mov	r1, r3
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f000 ff9d 	bl	8015394 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f000 fa86 	bl	801496c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014460:	7bfb      	ldrb	r3, [r7, #15]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d004      	beq.n	8014470 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2202      	movs	r2, #2
 801446a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801446e:	e009      	b.n	8014484 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2201      	movs	r2, #1
 8014474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014478:	e004      	b.n	8014484 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801447a:	6839      	ldr	r1, [r7, #0]
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 f99e 	bl	80147be <USBD_CtlError>
  }
}
 8014482:	bf00      	nop
 8014484:	bf00      	nop
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014496:	2300      	movs	r3, #0
 8014498:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	885b      	ldrh	r3, [r3, #2]
 801449e:	b2da      	uxtb	r2, r3
 80144a0:	4b4e      	ldr	r3, [pc, #312]	@ (80145dc <USBD_SetConfig+0x150>)
 80144a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80144a4:	4b4d      	ldr	r3, [pc, #308]	@ (80145dc <USBD_SetConfig+0x150>)
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	d905      	bls.n	80144b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80144ac:	6839      	ldr	r1, [r7, #0]
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f000 f985 	bl	80147be <USBD_CtlError>
    return USBD_FAIL;
 80144b4:	2303      	movs	r3, #3
 80144b6:	e08c      	b.n	80145d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	2b02      	cmp	r3, #2
 80144c2:	d002      	beq.n	80144ca <USBD_SetConfig+0x3e>
 80144c4:	2b03      	cmp	r3, #3
 80144c6:	d029      	beq.n	801451c <USBD_SetConfig+0x90>
 80144c8:	e075      	b.n	80145b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80144ca:	4b44      	ldr	r3, [pc, #272]	@ (80145dc <USBD_SetConfig+0x150>)
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d020      	beq.n	8014514 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80144d2:	4b42      	ldr	r3, [pc, #264]	@ (80145dc <USBD_SetConfig+0x150>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	461a      	mov	r2, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80144dc:	4b3f      	ldr	r3, [pc, #252]	@ (80145dc <USBD_SetConfig+0x150>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	4619      	mov	r1, r3
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f7fe ffb9 	bl	801345a <USBD_SetClassConfig>
 80144e8:	4603      	mov	r3, r0
 80144ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80144ec:	7bfb      	ldrb	r3, [r7, #15]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d008      	beq.n	8014504 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80144f2:	6839      	ldr	r1, [r7, #0]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 f962 	bl	80147be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2202      	movs	r2, #2
 80144fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014502:	e065      	b.n	80145d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f000 fa31 	bl	801496c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2203      	movs	r2, #3
 801450e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014512:	e05d      	b.n	80145d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 fa29 	bl	801496c <USBD_CtlSendStatus>
      break;
 801451a:	e059      	b.n	80145d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801451c:	4b2f      	ldr	r3, [pc, #188]	@ (80145dc <USBD_SetConfig+0x150>)
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d112      	bne.n	801454a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2202      	movs	r2, #2
 8014528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801452c:	4b2b      	ldr	r3, [pc, #172]	@ (80145dc <USBD_SetConfig+0x150>)
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	461a      	mov	r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014536:	4b29      	ldr	r3, [pc, #164]	@ (80145dc <USBD_SetConfig+0x150>)
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	4619      	mov	r1, r3
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f7fe ffa8 	bl	8013492 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014542:	6878      	ldr	r0, [r7, #4]
 8014544:	f000 fa12 	bl	801496c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014548:	e042      	b.n	80145d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801454a:	4b24      	ldr	r3, [pc, #144]	@ (80145dc <USBD_SetConfig+0x150>)
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	461a      	mov	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	429a      	cmp	r2, r3
 8014556:	d02a      	beq.n	80145ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	b2db      	uxtb	r3, r3
 801455e:	4619      	mov	r1, r3
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f7fe ff96 	bl	8013492 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014566:	4b1d      	ldr	r3, [pc, #116]	@ (80145dc <USBD_SetConfig+0x150>)
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014570:	4b1a      	ldr	r3, [pc, #104]	@ (80145dc <USBD_SetConfig+0x150>)
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7fe ff6f 	bl	801345a <USBD_SetClassConfig>
 801457c:	4603      	mov	r3, r0
 801457e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014580:	7bfb      	ldrb	r3, [r7, #15]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00f      	beq.n	80145a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014586:	6839      	ldr	r1, [r7, #0]
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 f918 	bl	80147be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	b2db      	uxtb	r3, r3
 8014594:	4619      	mov	r1, r3
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f7fe ff7b 	bl	8013492 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2202      	movs	r2, #2
 80145a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80145a4:	e014      	b.n	80145d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f000 f9e0 	bl	801496c <USBD_CtlSendStatus>
      break;
 80145ac:	e010      	b.n	80145d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f000 f9dc 	bl	801496c <USBD_CtlSendStatus>
      break;
 80145b4:	e00c      	b.n	80145d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80145b6:	6839      	ldr	r1, [r7, #0]
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f000 f900 	bl	80147be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80145be:	4b07      	ldr	r3, [pc, #28]	@ (80145dc <USBD_SetConfig+0x150>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	4619      	mov	r1, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7fe ff64 	bl	8013492 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80145ca:	2303      	movs	r3, #3
 80145cc:	73fb      	strb	r3, [r7, #15]
      break;
 80145ce:	bf00      	nop
  }

  return ret;
 80145d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3710      	adds	r7, #16
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	24012dfc 	.word	0x24012dfc

080145e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	88db      	ldrh	r3, [r3, #6]
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d004      	beq.n	80145fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80145f2:	6839      	ldr	r1, [r7, #0]
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f000 f8e2 	bl	80147be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80145fa:	e023      	b.n	8014644 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014602:	b2db      	uxtb	r3, r3
 8014604:	2b02      	cmp	r3, #2
 8014606:	dc02      	bgt.n	801460e <USBD_GetConfig+0x2e>
 8014608:	2b00      	cmp	r3, #0
 801460a:	dc03      	bgt.n	8014614 <USBD_GetConfig+0x34>
 801460c:	e015      	b.n	801463a <USBD_GetConfig+0x5a>
 801460e:	2b03      	cmp	r3, #3
 8014610:	d00b      	beq.n	801462a <USBD_GetConfig+0x4a>
 8014612:	e012      	b.n	801463a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2200      	movs	r2, #0
 8014618:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	3308      	adds	r3, #8
 801461e:	2201      	movs	r2, #1
 8014620:	4619      	mov	r1, r3
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 f948 	bl	80148b8 <USBD_CtlSendData>
        break;
 8014628:	e00c      	b.n	8014644 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	3304      	adds	r3, #4
 801462e:	2201      	movs	r2, #1
 8014630:	4619      	mov	r1, r3
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f000 f940 	bl	80148b8 <USBD_CtlSendData>
        break;
 8014638:	e004      	b.n	8014644 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801463a:	6839      	ldr	r1, [r7, #0]
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 f8be 	bl	80147be <USBD_CtlError>
        break;
 8014642:	bf00      	nop
}
 8014644:	bf00      	nop
 8014646:	3708      	adds	r7, #8
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801465c:	b2db      	uxtb	r3, r3
 801465e:	3b01      	subs	r3, #1
 8014660:	2b02      	cmp	r3, #2
 8014662:	d81e      	bhi.n	80146a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	88db      	ldrh	r3, [r3, #6]
 8014668:	2b02      	cmp	r3, #2
 801466a:	d004      	beq.n	8014676 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801466c:	6839      	ldr	r1, [r7, #0]
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f000 f8a5 	bl	80147be <USBD_CtlError>
        break;
 8014674:	e01a      	b.n	80146ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2201      	movs	r2, #1
 801467a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014682:	2b00      	cmp	r3, #0
 8014684:	d005      	beq.n	8014692 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	f043 0202 	orr.w	r2, r3, #2
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	330c      	adds	r3, #12
 8014696:	2202      	movs	r2, #2
 8014698:	4619      	mov	r1, r3
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 f90c 	bl	80148b8 <USBD_CtlSendData>
      break;
 80146a0:	e004      	b.n	80146ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80146a2:	6839      	ldr	r1, [r7, #0]
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f000 f88a 	bl	80147be <USBD_CtlError>
      break;
 80146aa:	bf00      	nop
  }
}
 80146ac:	bf00      	nop
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}

080146b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	885b      	ldrh	r3, [r3, #2]
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d107      	bne.n	80146d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2201      	movs	r2, #1
 80146ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f94c 	bl	801496c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80146d4:	e013      	b.n	80146fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	885b      	ldrh	r3, [r3, #2]
 80146da:	2b02      	cmp	r3, #2
 80146dc:	d10b      	bne.n	80146f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	889b      	ldrh	r3, [r3, #4]
 80146e2:	0a1b      	lsrs	r3, r3, #8
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	b2da      	uxtb	r2, r3
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 f93c 	bl	801496c <USBD_CtlSendStatus>
}
 80146f4:	e003      	b.n	80146fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80146f6:	6839      	ldr	r1, [r7, #0]
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f000 f860 	bl	80147be <USBD_CtlError>
}
 80146fe:	bf00      	nop
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}

08014706 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b082      	sub	sp, #8
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014716:	b2db      	uxtb	r3, r3
 8014718:	3b01      	subs	r3, #1
 801471a:	2b02      	cmp	r3, #2
 801471c:	d80b      	bhi.n	8014736 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	885b      	ldrh	r3, [r3, #2]
 8014722:	2b01      	cmp	r3, #1
 8014724:	d10c      	bne.n	8014740 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2200      	movs	r2, #0
 801472a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 f91c 	bl	801496c <USBD_CtlSendStatus>
      }
      break;
 8014734:	e004      	b.n	8014740 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014736:	6839      	ldr	r1, [r7, #0]
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f000 f840 	bl	80147be <USBD_CtlError>
      break;
 801473e:	e000      	b.n	8014742 <USBD_ClrFeature+0x3c>
      break;
 8014740:	bf00      	nop
  }
}
 8014742:	bf00      	nop
 8014744:	3708      	adds	r7, #8
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801474a:	b580      	push	{r7, lr}
 801474c:	b084      	sub	sp, #16
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
 8014752:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	781a      	ldrb	r2, [r3, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	3301      	adds	r3, #1
 8014764:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	781a      	ldrb	r2, [r3, #0]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	3301      	adds	r3, #1
 8014772:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014774:	68f8      	ldr	r0, [r7, #12]
 8014776:	f7ff fa16 	bl	8013ba6 <SWAPBYTE>
 801477a:	4603      	mov	r3, r0
 801477c:	461a      	mov	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	3301      	adds	r3, #1
 8014786:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	3301      	adds	r3, #1
 801478c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801478e:	68f8      	ldr	r0, [r7, #12]
 8014790:	f7ff fa09 	bl	8013ba6 <SWAPBYTE>
 8014794:	4603      	mov	r3, r0
 8014796:	461a      	mov	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	3301      	adds	r3, #1
 80147a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	3301      	adds	r3, #1
 80147a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80147a8:	68f8      	ldr	r0, [r7, #12]
 80147aa:	f7ff f9fc 	bl	8013ba6 <SWAPBYTE>
 80147ae:	4603      	mov	r3, r0
 80147b0:	461a      	mov	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	80da      	strh	r2, [r3, #6]
}
 80147b6:	bf00      	nop
 80147b8:	3710      	adds	r7, #16
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}

080147be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147be:	b580      	push	{r7, lr}
 80147c0:	b082      	sub	sp, #8
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
 80147c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80147c8:	2180      	movs	r1, #128	@ 0x80
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 fd78 	bl	80152c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80147d0:	2100      	movs	r1, #0
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 fd74 	bl	80152c0 <USBD_LL_StallEP>
}
 80147d8:	bf00      	nop
 80147da:	3708      	adds	r7, #8
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80147ec:	2300      	movs	r3, #0
 80147ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d042      	beq.n	801487c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80147fa:	6938      	ldr	r0, [r7, #16]
 80147fc:	f000 f842 	bl	8014884 <USBD_GetLen>
 8014800:	4603      	mov	r3, r0
 8014802:	3301      	adds	r3, #1
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801480a:	d808      	bhi.n	801481e <USBD_GetString+0x3e>
 801480c:	6938      	ldr	r0, [r7, #16]
 801480e:	f000 f839 	bl	8014884 <USBD_GetLen>
 8014812:	4603      	mov	r3, r0
 8014814:	3301      	adds	r3, #1
 8014816:	b29b      	uxth	r3, r3
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	b29a      	uxth	r2, r3
 801481c:	e001      	b.n	8014822 <USBD_GetString+0x42>
 801481e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014826:	7dfb      	ldrb	r3, [r7, #23]
 8014828:	68ba      	ldr	r2, [r7, #8]
 801482a:	4413      	add	r3, r2
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	7812      	ldrb	r2, [r2, #0]
 8014830:	701a      	strb	r2, [r3, #0]
  idx++;
 8014832:	7dfb      	ldrb	r3, [r7, #23]
 8014834:	3301      	adds	r3, #1
 8014836:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014838:	7dfb      	ldrb	r3, [r7, #23]
 801483a:	68ba      	ldr	r2, [r7, #8]
 801483c:	4413      	add	r3, r2
 801483e:	2203      	movs	r2, #3
 8014840:	701a      	strb	r2, [r3, #0]
  idx++;
 8014842:	7dfb      	ldrb	r3, [r7, #23]
 8014844:	3301      	adds	r3, #1
 8014846:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014848:	e013      	b.n	8014872 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801484a:	7dfb      	ldrb	r3, [r7, #23]
 801484c:	68ba      	ldr	r2, [r7, #8]
 801484e:	4413      	add	r3, r2
 8014850:	693a      	ldr	r2, [r7, #16]
 8014852:	7812      	ldrb	r2, [r2, #0]
 8014854:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	3301      	adds	r3, #1
 801485a:	613b      	str	r3, [r7, #16]
    idx++;
 801485c:	7dfb      	ldrb	r3, [r7, #23]
 801485e:	3301      	adds	r3, #1
 8014860:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014862:	7dfb      	ldrb	r3, [r7, #23]
 8014864:	68ba      	ldr	r2, [r7, #8]
 8014866:	4413      	add	r3, r2
 8014868:	2200      	movs	r2, #0
 801486a:	701a      	strb	r2, [r3, #0]
    idx++;
 801486c:	7dfb      	ldrb	r3, [r7, #23]
 801486e:	3301      	adds	r3, #1
 8014870:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d1e7      	bne.n	801484a <USBD_GetString+0x6a>
 801487a:	e000      	b.n	801487e <USBD_GetString+0x9e>
    return;
 801487c:	bf00      	nop
  }
}
 801487e:	3718      	adds	r7, #24
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014884:	b480      	push	{r7}
 8014886:	b085      	sub	sp, #20
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801488c:	2300      	movs	r3, #0
 801488e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014894:	e005      	b.n	80148a2 <USBD_GetLen+0x1e>
  {
    len++;
 8014896:	7bfb      	ldrb	r3, [r7, #15]
 8014898:	3301      	adds	r3, #1
 801489a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	3301      	adds	r3, #1
 80148a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	781b      	ldrb	r3, [r3, #0]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d1f5      	bne.n	8014896 <USBD_GetLen+0x12>
  }

  return len;
 80148aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3714      	adds	r7, #20
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2202      	movs	r2, #2
 80148c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	68ba      	ldr	r2, [r7, #8]
 80148dc:	2100      	movs	r1, #0
 80148de:	68f8      	ldr	r0, [r7, #12]
 80148e0:	f000 fd77 	bl	80153d2 <USBD_LL_Transmit>

  return USBD_OK;
 80148e4:	2300      	movs	r3, #0
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}

080148ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80148ee:	b580      	push	{r7, lr}
 80148f0:	b084      	sub	sp, #16
 80148f2:	af00      	add	r7, sp, #0
 80148f4:	60f8      	str	r0, [r7, #12]
 80148f6:	60b9      	str	r1, [r7, #8]
 80148f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	68ba      	ldr	r2, [r7, #8]
 80148fe:	2100      	movs	r1, #0
 8014900:	68f8      	ldr	r0, [r7, #12]
 8014902:	f000 fd66 	bl	80153d2 <USBD_LL_Transmit>

  return USBD_OK;
 8014906:	2300      	movs	r3, #0
}
 8014908:	4618      	mov	r0, r3
 801490a:	3710      	adds	r7, #16
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}

08014910 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	60f8      	str	r0, [r7, #12]
 8014918:	60b9      	str	r1, [r7, #8]
 801491a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2203      	movs	r2, #3
 8014920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	687a      	ldr	r2, [r7, #4]
 8014928:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	68ba      	ldr	r2, [r7, #8]
 8014938:	2100      	movs	r1, #0
 801493a:	68f8      	ldr	r0, [r7, #12]
 801493c:	f000 fd6a 	bl	8015414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3710      	adds	r7, #16
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801494a:	b580      	push	{r7, lr}
 801494c:	b084      	sub	sp, #16
 801494e:	af00      	add	r7, sp, #0
 8014950:	60f8      	str	r0, [r7, #12]
 8014952:	60b9      	str	r1, [r7, #8]
 8014954:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	68ba      	ldr	r2, [r7, #8]
 801495a:	2100      	movs	r1, #0
 801495c:	68f8      	ldr	r0, [r7, #12]
 801495e:	f000 fd59 	bl	8015414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014962:	2300      	movs	r3, #0
}
 8014964:	4618      	mov	r0, r3
 8014966:	3710      	adds	r7, #16
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}

0801496c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2204      	movs	r2, #4
 8014978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801497c:	2300      	movs	r3, #0
 801497e:	2200      	movs	r2, #0
 8014980:	2100      	movs	r1, #0
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 fd25 	bl	80153d2 <USBD_LL_Transmit>

  return USBD_OK;
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	b082      	sub	sp, #8
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2205      	movs	r2, #5
 801499e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80149a2:	2300      	movs	r3, #0
 80149a4:	2200      	movs	r2, #0
 80149a6:	2100      	movs	r1, #0
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f000 fd33 	bl	8015414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <SendDataWithCorrection>:

extern uint8_t usb_device_rxFlag;

#define MIN(a,b) (((a)<(b))?(a):(b))

uint8_t SendDataWithCorrection(uint8_t* pData, uint32_t dLen, uint16_t packetSize) {
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b086      	sub	sp, #24
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	4613      	mov	r3, r2
 80149c4:	80fb      	strh	r3, [r7, #6]
	hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 80149c6:	4b24      	ldr	r3, [pc, #144]	@ (8014a58 <SendDataWithCorrection+0xa0>)
 80149c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80149cc:	4a22      	ldr	r2, [pc, #136]	@ (8014a58 <SendDataWithCorrection+0xa0>)
 80149ce:	33b0      	adds	r3, #176	@ 0xb0
 80149d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149d4:	4a21      	ldr	r2, [pc, #132]	@ (8014a5c <SendDataWithCorrection+0xa4>)
 80149d6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < dLen/packetSize; i++) {
 80149d8:	2300      	movs	r3, #0
 80149da:	617b      	str	r3, [r7, #20]
 80149dc:	e02f      	b.n	8014a3e <SendDataWithCorrection+0x86>
		usb_device_rxFlag = 0x00; // Reset flag
 80149de:	4b20      	ldr	r3, [pc, #128]	@ (8014a60 <SendDataWithCorrection+0xa8>)
 80149e0:	2200      	movs	r2, #0
 80149e2:	701a      	strb	r2, [r3, #0]
		// Keep transmitting data as long as received does not match sent
		while (usb_device_rxFlag == 0) {// || !memcmp(hcdc->RxBuffer, pData + i*packetSize, MIN(hcdc->RxLength, packetSize))) {
 80149e4:	e024      	b.n	8014a30 <SendDataWithCorrection+0x78>
			// Transmit byte number, preserves ordering on host side
			while (CDC_Transmit_FS(&i, 4)) { HAL_Delay(5); }
 80149e6:	2005      	movs	r0, #5
 80149e8:	f7ed fd0e 	bl	8002408 <HAL_Delay>
 80149ec:	f107 0314 	add.w	r3, r7, #20
 80149f0:	2104      	movs	r1, #4
 80149f2:	4618      	mov	r0, r3
 80149f4:	f000 f906 	bl	8014c04 <CDC_Transmit_FS>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d1f3      	bne.n	80149e6 <SendDataWithCorrection+0x2e>
			HAL_Delay(2);
 80149fe:	2002      	movs	r0, #2
 8014a00:	f7ed fd02 	bl	8002408 <HAL_Delay>
			// Transmit packet
			while (CDC_Transmit_FS(pData + i*packetSize, packetSize)) { HAL_Delay(1); }
 8014a04:	e002      	b.n	8014a0c <SendDataWithCorrection+0x54>
 8014a06:	2001      	movs	r0, #1
 8014a08:	f7ed fcfe 	bl	8002408 <HAL_Delay>
 8014a0c:	88fb      	ldrh	r3, [r7, #6]
 8014a0e:	697a      	ldr	r2, [r7, #20]
 8014a10:	fb02 f303 	mul.w	r3, r2, r3
 8014a14:	461a      	mov	r2, r3
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	4413      	add	r3, r2
 8014a1a:	88fa      	ldrh	r2, [r7, #6]
 8014a1c:	4611      	mov	r1, r2
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f000 f8f0 	bl	8014c04 <CDC_Transmit_FS>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d1ed      	bne.n	8014a06 <SendDataWithCorrection+0x4e>
			HAL_Delay(5);
 8014a2a:	2005      	movs	r0, #5
 8014a2c:	f7ed fcec 	bl	8002408 <HAL_Delay>
		while (usb_device_rxFlag == 0) {// || !memcmp(hcdc->RxBuffer, pData + i*packetSize, MIN(hcdc->RxLength, packetSize))) {
 8014a30:	4b0b      	ldr	r3, [pc, #44]	@ (8014a60 <SendDataWithCorrection+0xa8>)
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d0d9      	beq.n	80149ec <SendDataWithCorrection+0x34>
	for (int i = 0; i < dLen/packetSize; i++) {
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	617b      	str	r3, [r7, #20]
 8014a3e:	88fb      	ldrh	r3, [r7, #6]
 8014a40:	68ba      	ldr	r2, [r7, #8]
 8014a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a46:	697a      	ldr	r2, [r7, #20]
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d8c8      	bhi.n	80149de <SendDataWithCorrection+0x26>
		}
	}
	return 0;
 8014a4c:	2300      	movs	r3, #0
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3718      	adds	r7, #24
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	24012e00 	.word	0x24012e00
 8014a5c:	240130dc 	.word	0x240130dc
 8014a60:	24000658 	.word	0x24000658

08014a64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014a68:	2200      	movs	r2, #0
 8014a6a:	4918      	ldr	r1, [pc, #96]	@ (8014acc <MX_USB_DEVICE_Init+0x68>)
 8014a6c:	4818      	ldr	r0, [pc, #96]	@ (8014ad0 <MX_USB_DEVICE_Init+0x6c>)
 8014a6e:	f7fe fc77 	bl	8013360 <USBD_Init>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d001      	beq.n	8014a7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014a78:	f7ec fdb8 	bl	80015ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014a7c:	4915      	ldr	r1, [pc, #84]	@ (8014ad4 <MX_USB_DEVICE_Init+0x70>)
 8014a7e:	4814      	ldr	r0, [pc, #80]	@ (8014ad0 <MX_USB_DEVICE_Init+0x6c>)
 8014a80:	f7fe fc9e 	bl	80133c0 <USBD_RegisterClass>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d001      	beq.n	8014a8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014a8a:	f7ec fdaf 	bl	80015ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014a8e:	4912      	ldr	r1, [pc, #72]	@ (8014ad8 <MX_USB_DEVICE_Init+0x74>)
 8014a90:	480f      	ldr	r0, [pc, #60]	@ (8014ad0 <MX_USB_DEVICE_Init+0x6c>)
 8014a92:	f7fe fb95 	bl	80131c0 <USBD_CDC_RegisterInterface>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d001      	beq.n	8014aa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014a9c:	f7ec fda6 	bl	80015ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014aa0:	480b      	ldr	r0, [pc, #44]	@ (8014ad0 <MX_USB_DEVICE_Init+0x6c>)
 8014aa2:	f7fe fcc3 	bl	801342c <USBD_Start>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d001      	beq.n	8014ab0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014aac:	f7ec fd9e 	bl	80015ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014ab0:	f7f7 fb20 	bl	800c0f4 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8014ab4:	4b06      	ldr	r3, [pc, #24]	@ (8014ad0 <MX_USB_DEVICE_Init+0x6c>)
 8014ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014aba:	4a05      	ldr	r2, [pc, #20]	@ (8014ad0 <MX_USB_DEVICE_Init+0x6c>)
 8014abc:	33b0      	adds	r3, #176	@ 0xb0
 8014abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ac2:	4a06      	ldr	r2, [pc, #24]	@ (8014adc <MX_USB_DEVICE_Init+0x78>)
 8014ac4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014ac6:	bf00      	nop
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	240000b4 	.word	0x240000b4
 8014ad0:	24012e00 	.word	0x24012e00
 8014ad4:	24000020 	.word	0x24000020
 8014ad8:	240000a0 	.word	0x240000a0
 8014adc:	240130dc 	.word	0x240130dc

08014ae0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	4905      	ldr	r1, [pc, #20]	@ (8014afc <CDC_Init_FS+0x1c>)
 8014ae8:	4805      	ldr	r0, [pc, #20]	@ (8014b00 <CDC_Init_FS+0x20>)
 8014aea:	f7fe fb83 	bl	80131f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014aee:	4905      	ldr	r1, [pc, #20]	@ (8014b04 <CDC_Init_FS+0x24>)
 8014af0:	4803      	ldr	r0, [pc, #12]	@ (8014b00 <CDC_Init_FS+0x20>)
 8014af2:	f7fe fba1 	bl	8013238 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014af6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	bd80      	pop	{r7, pc}
 8014afc:	240138e0 	.word	0x240138e0
 8014b00:	24012e00 	.word	0x24012e00
 8014b04:	240130e0 	.word	0x240130e0

08014b08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014b08:	b480      	push	{r7}
 8014b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014b0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr

08014b18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b083      	sub	sp, #12
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	4603      	mov	r3, r0
 8014b20:	6039      	str	r1, [r7, #0]
 8014b22:	71fb      	strb	r3, [r7, #7]
 8014b24:	4613      	mov	r3, r2
 8014b26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014b28:	79fb      	ldrb	r3, [r7, #7]
 8014b2a:	2b23      	cmp	r3, #35	@ 0x23
 8014b2c:	d84a      	bhi.n	8014bc4 <CDC_Control_FS+0xac>
 8014b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8014b34 <CDC_Control_FS+0x1c>)
 8014b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b34:	08014bc5 	.word	0x08014bc5
 8014b38:	08014bc5 	.word	0x08014bc5
 8014b3c:	08014bc5 	.word	0x08014bc5
 8014b40:	08014bc5 	.word	0x08014bc5
 8014b44:	08014bc5 	.word	0x08014bc5
 8014b48:	08014bc5 	.word	0x08014bc5
 8014b4c:	08014bc5 	.word	0x08014bc5
 8014b50:	08014bc5 	.word	0x08014bc5
 8014b54:	08014bc5 	.word	0x08014bc5
 8014b58:	08014bc5 	.word	0x08014bc5
 8014b5c:	08014bc5 	.word	0x08014bc5
 8014b60:	08014bc5 	.word	0x08014bc5
 8014b64:	08014bc5 	.word	0x08014bc5
 8014b68:	08014bc5 	.word	0x08014bc5
 8014b6c:	08014bc5 	.word	0x08014bc5
 8014b70:	08014bc5 	.word	0x08014bc5
 8014b74:	08014bc5 	.word	0x08014bc5
 8014b78:	08014bc5 	.word	0x08014bc5
 8014b7c:	08014bc5 	.word	0x08014bc5
 8014b80:	08014bc5 	.word	0x08014bc5
 8014b84:	08014bc5 	.word	0x08014bc5
 8014b88:	08014bc5 	.word	0x08014bc5
 8014b8c:	08014bc5 	.word	0x08014bc5
 8014b90:	08014bc5 	.word	0x08014bc5
 8014b94:	08014bc5 	.word	0x08014bc5
 8014b98:	08014bc5 	.word	0x08014bc5
 8014b9c:	08014bc5 	.word	0x08014bc5
 8014ba0:	08014bc5 	.word	0x08014bc5
 8014ba4:	08014bc5 	.word	0x08014bc5
 8014ba8:	08014bc5 	.word	0x08014bc5
 8014bac:	08014bc5 	.word	0x08014bc5
 8014bb0:	08014bc5 	.word	0x08014bc5
 8014bb4:	08014bc5 	.word	0x08014bc5
 8014bb8:	08014bc5 	.word	0x08014bc5
 8014bbc:	08014bc5 	.word	0x08014bc5
 8014bc0:	08014bc5 	.word	0x08014bc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014bc4:	bf00      	nop
  }

  return (USBD_OK);
 8014bc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	370c      	adds	r7, #12
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd2:	4770      	bx	lr

08014bd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014bde:	6879      	ldr	r1, [r7, #4]
 8014be0:	4806      	ldr	r0, [pc, #24]	@ (8014bfc <CDC_Receive_FS+0x28>)
 8014be2:	f7fe fb29 	bl	8013238 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014be6:	4805      	ldr	r0, [pc, #20]	@ (8014bfc <CDC_Receive_FS+0x28>)
 8014be8:	f7fe fb84 	bl	80132f4 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8014bec:	4b04      	ldr	r3, [pc, #16]	@ (8014c00 <CDC_Receive_FS+0x2c>)
 8014bee:	2201      	movs	r2, #1
 8014bf0:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8014bf2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3708      	adds	r7, #8
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	24012e00 	.word	0x24012e00
 8014c00:	24000658 	.word	0x24000658

08014c04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	460b      	mov	r3, r1
 8014c0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014c10:	2300      	movs	r3, #0
 8014c12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014c14:	4b0d      	ldr	r3, [pc, #52]	@ (8014c4c <CDC_Transmit_FS+0x48>)
 8014c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014c1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d001      	beq.n	8014c2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014c26:	2301      	movs	r3, #1
 8014c28:	e00b      	b.n	8014c42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014c2a:	887b      	ldrh	r3, [r7, #2]
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	6879      	ldr	r1, [r7, #4]
 8014c30:	4806      	ldr	r0, [pc, #24]	@ (8014c4c <CDC_Transmit_FS+0x48>)
 8014c32:	f7fe fadf 	bl	80131f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014c36:	4805      	ldr	r0, [pc, #20]	@ (8014c4c <CDC_Transmit_FS+0x48>)
 8014c38:	f7fe fb1c 	bl	8013274 <USBD_CDC_TransmitPacket>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3710      	adds	r7, #16
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	24012e00 	.word	0x24012e00

08014c50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014c50:	b480      	push	{r7}
 8014c52:	b087      	sub	sp, #28
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60f8      	str	r0, [r7, #12]
 8014c58:	60b9      	str	r1, [r7, #8]
 8014c5a:	4613      	mov	r3, r2
 8014c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	371c      	adds	r7, #28
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr
	...

08014c74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b083      	sub	sp, #12
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	6039      	str	r1, [r7, #0]
 8014c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	2212      	movs	r2, #18
 8014c84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014c86:	4b03      	ldr	r3, [pc, #12]	@ (8014c94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	370c      	adds	r7, #12
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr
 8014c94:	240000d4 	.word	0x240000d4

08014c98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b083      	sub	sp, #12
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	6039      	str	r1, [r7, #0]
 8014ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	2204      	movs	r2, #4
 8014ca8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014caa:	4b03      	ldr	r3, [pc, #12]	@ (8014cb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	370c      	adds	r7, #12
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb6:	4770      	bx	lr
 8014cb8:	240000e8 	.word	0x240000e8

08014cbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	6039      	str	r1, [r7, #0]
 8014cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014cc8:	79fb      	ldrb	r3, [r7, #7]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d105      	bne.n	8014cda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014cce:	683a      	ldr	r2, [r7, #0]
 8014cd0:	4907      	ldr	r1, [pc, #28]	@ (8014cf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014cd2:	4808      	ldr	r0, [pc, #32]	@ (8014cf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014cd4:	f7ff fd84 	bl	80147e0 <USBD_GetString>
 8014cd8:	e004      	b.n	8014ce4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014cda:	683a      	ldr	r2, [r7, #0]
 8014cdc:	4904      	ldr	r1, [pc, #16]	@ (8014cf0 <USBD_FS_ProductStrDescriptor+0x34>)
 8014cde:	4805      	ldr	r0, [pc, #20]	@ (8014cf4 <USBD_FS_ProductStrDescriptor+0x38>)
 8014ce0:	f7ff fd7e 	bl	80147e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014ce4:	4b02      	ldr	r3, [pc, #8]	@ (8014cf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3708      	adds	r7, #8
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	240140e0 	.word	0x240140e0
 8014cf4:	08015fb0 	.word	0x08015fb0

08014cf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	4603      	mov	r3, r0
 8014d00:	6039      	str	r1, [r7, #0]
 8014d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014d04:	683a      	ldr	r2, [r7, #0]
 8014d06:	4904      	ldr	r1, [pc, #16]	@ (8014d18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014d08:	4804      	ldr	r0, [pc, #16]	@ (8014d1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014d0a:	f7ff fd69 	bl	80147e0 <USBD_GetString>
  return USBD_StrDesc;
 8014d0e:	4b02      	ldr	r3, [pc, #8]	@ (8014d18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	240140e0 	.word	0x240140e0
 8014d1c:	08015fc8 	.word	0x08015fc8

08014d20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b082      	sub	sp, #8
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	6039      	str	r1, [r7, #0]
 8014d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	221a      	movs	r2, #26
 8014d30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014d32:	f000 f843 	bl	8014dbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014d36:	4b02      	ldr	r3, [pc, #8]	@ (8014d40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3708      	adds	r7, #8
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}
 8014d40:	240000ec 	.word	0x240000ec

08014d44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	6039      	str	r1, [r7, #0]
 8014d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014d50:	79fb      	ldrb	r3, [r7, #7]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d105      	bne.n	8014d62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	4907      	ldr	r1, [pc, #28]	@ (8014d78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d5a:	4808      	ldr	r0, [pc, #32]	@ (8014d7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d5c:	f7ff fd40 	bl	80147e0 <USBD_GetString>
 8014d60:	e004      	b.n	8014d6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d62:	683a      	ldr	r2, [r7, #0]
 8014d64:	4904      	ldr	r1, [pc, #16]	@ (8014d78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d66:	4805      	ldr	r0, [pc, #20]	@ (8014d7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d68:	f7ff fd3a 	bl	80147e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d6c:	4b02      	ldr	r3, [pc, #8]	@ (8014d78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3708      	adds	r7, #8
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	240140e0 	.word	0x240140e0
 8014d7c:	08015fdc 	.word	0x08015fdc

08014d80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b082      	sub	sp, #8
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	4603      	mov	r3, r0
 8014d88:	6039      	str	r1, [r7, #0]
 8014d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d8c:	79fb      	ldrb	r3, [r7, #7]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d105      	bne.n	8014d9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	4907      	ldr	r1, [pc, #28]	@ (8014db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014d96:	4808      	ldr	r0, [pc, #32]	@ (8014db8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014d98:	f7ff fd22 	bl	80147e0 <USBD_GetString>
 8014d9c:	e004      	b.n	8014da8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014d9e:	683a      	ldr	r2, [r7, #0]
 8014da0:	4904      	ldr	r1, [pc, #16]	@ (8014db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014da2:	4805      	ldr	r0, [pc, #20]	@ (8014db8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014da4:	f7ff fd1c 	bl	80147e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014da8:	4b02      	ldr	r3, [pc, #8]	@ (8014db4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	240140e0 	.word	0x240140e0
 8014db8:	08015fe8 	.word	0x08015fe8

08014dbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b084      	sub	sp, #16
 8014dc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8014e00 <Get_SerialNum+0x44>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8014e04 <Get_SerialNum+0x48>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014dce:	4b0e      	ldr	r3, [pc, #56]	@ (8014e08 <Get_SerialNum+0x4c>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4413      	add	r3, r2
 8014dda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d009      	beq.n	8014df6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014de2:	2208      	movs	r2, #8
 8014de4:	4909      	ldr	r1, [pc, #36]	@ (8014e0c <Get_SerialNum+0x50>)
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f000 f814 	bl	8014e14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014dec:	2204      	movs	r2, #4
 8014dee:	4908      	ldr	r1, [pc, #32]	@ (8014e10 <Get_SerialNum+0x54>)
 8014df0:	68b8      	ldr	r0, [r7, #8]
 8014df2:	f000 f80f 	bl	8014e14 <IntToUnicode>
  }
}
 8014df6:	bf00      	nop
 8014df8:	3710      	adds	r7, #16
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	1ff1e800 	.word	0x1ff1e800
 8014e04:	1ff1e804 	.word	0x1ff1e804
 8014e08:	1ff1e808 	.word	0x1ff1e808
 8014e0c:	240000ee 	.word	0x240000ee
 8014e10:	240000fe 	.word	0x240000fe

08014e14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b087      	sub	sp, #28
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	4613      	mov	r3, r2
 8014e20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014e22:	2300      	movs	r3, #0
 8014e24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014e26:	2300      	movs	r3, #0
 8014e28:	75fb      	strb	r3, [r7, #23]
 8014e2a:	e027      	b.n	8014e7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	0f1b      	lsrs	r3, r3, #28
 8014e30:	2b09      	cmp	r3, #9
 8014e32:	d80b      	bhi.n	8014e4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	0f1b      	lsrs	r3, r3, #28
 8014e38:	b2da      	uxtb	r2, r3
 8014e3a:	7dfb      	ldrb	r3, [r7, #23]
 8014e3c:	005b      	lsls	r3, r3, #1
 8014e3e:	4619      	mov	r1, r3
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	440b      	add	r3, r1
 8014e44:	3230      	adds	r2, #48	@ 0x30
 8014e46:	b2d2      	uxtb	r2, r2
 8014e48:	701a      	strb	r2, [r3, #0]
 8014e4a:	e00a      	b.n	8014e62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	0f1b      	lsrs	r3, r3, #28
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	7dfb      	ldrb	r3, [r7, #23]
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	4619      	mov	r1, r3
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	440b      	add	r3, r1
 8014e5c:	3237      	adds	r2, #55	@ 0x37
 8014e5e:	b2d2      	uxtb	r2, r2
 8014e60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	011b      	lsls	r3, r3, #4
 8014e66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014e68:	7dfb      	ldrb	r3, [r7, #23]
 8014e6a:	005b      	lsls	r3, r3, #1
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	68ba      	ldr	r2, [r7, #8]
 8014e70:	4413      	add	r3, r2
 8014e72:	2200      	movs	r2, #0
 8014e74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014e76:	7dfb      	ldrb	r3, [r7, #23]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	75fb      	strb	r3, [r7, #23]
 8014e7c:	7dfa      	ldrb	r2, [r7, #23]
 8014e7e:	79fb      	ldrb	r3, [r7, #7]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d3d3      	bcc.n	8014e2c <IntToUnicode+0x18>
  }
}
 8014e84:	bf00      	nop
 8014e86:	bf00      	nop
 8014e88:	371c      	adds	r7, #28
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
	...

08014e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b0ba      	sub	sp, #232	@ 0xe8
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	601a      	str	r2, [r3, #0]
 8014ea4:	605a      	str	r2, [r3, #4]
 8014ea6:	609a      	str	r2, [r3, #8]
 8014ea8:	60da      	str	r2, [r3, #12]
 8014eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014eac:	f107 0310 	add.w	r3, r7, #16
 8014eb0:	22c0      	movs	r2, #192	@ 0xc0
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f000 fb47 	bl	8015548 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8014f70 <HAL_PCD_MspInit+0xdc>)
 8014ec0:	4293      	cmp	r3, r2
 8014ec2:	d151      	bne.n	8014f68 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014ec4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8014ec8:	f04f 0300 	mov.w	r3, #0
 8014ecc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8014ed0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014ed8:	f107 0310 	add.w	r3, r7, #16
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7f8 f8ff 	bl	800d0e0 <HAL_RCCEx_PeriphCLKConfig>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d001      	beq.n	8014eec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8014ee8:	f7ec fb80 	bl	80015ec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014eec:	f7f7 f902 	bl	800c0f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ef0:	4b20      	ldr	r3, [pc, #128]	@ (8014f74 <HAL_PCD_MspInit+0xe0>)
 8014ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8014f74 <HAL_PCD_MspInit+0xe0>)
 8014ef8:	f043 0301 	orr.w	r3, r3, #1
 8014efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014f00:	4b1c      	ldr	r3, [pc, #112]	@ (8014f74 <HAL_PCD_MspInit+0xe0>)
 8014f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014f06:	f003 0301 	and.w	r3, r3, #1
 8014f0a:	60fb      	str	r3, [r7, #12]
 8014f0c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014f0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f16:	2302      	movs	r3, #2
 8014f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f22:	2300      	movs	r3, #0
 8014f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014f28:	230a      	movs	r3, #10
 8014f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014f32:	4619      	mov	r1, r3
 8014f34:	4810      	ldr	r0, [pc, #64]	@ (8014f78 <HAL_PCD_MspInit+0xe4>)
 8014f36:	f7f1 fa0f 	bl	8006358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f74 <HAL_PCD_MspInit+0xe0>)
 8014f3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014f40:	4a0c      	ldr	r2, [pc, #48]	@ (8014f74 <HAL_PCD_MspInit+0xe0>)
 8014f42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014f46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8014f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8014f74 <HAL_PCD_MspInit+0xe0>)
 8014f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014f54:	60bb      	str	r3, [r7, #8]
 8014f56:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014f58:	2200      	movs	r2, #0
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	2065      	movs	r0, #101	@ 0x65
 8014f5e:	f7ed fb5e 	bl	800261e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014f62:	2065      	movs	r0, #101	@ 0x65
 8014f64:	f7ed fb75 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014f68:	bf00      	nop
 8014f6a:	37e8      	adds	r7, #232	@ 0xe8
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	40080000 	.word	0x40080000
 8014f74:	58024400 	.word	0x58024400
 8014f78:	58020000 	.word	0x58020000

08014f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014f90:	4619      	mov	r1, r3
 8014f92:	4610      	mov	r0, r2
 8014f94:	f7fe fa97 	bl	80134c6 <USBD_LL_SetupStage>
}
 8014f98:	bf00      	nop
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	460b      	mov	r3, r1
 8014faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014fb2:	78fa      	ldrb	r2, [r7, #3]
 8014fb4:	6879      	ldr	r1, [r7, #4]
 8014fb6:	4613      	mov	r3, r2
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	4413      	add	r3, r2
 8014fbc:	009b      	lsls	r3, r3, #2
 8014fbe:	440b      	add	r3, r1
 8014fc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014fc4:	681a      	ldr	r2, [r3, #0]
 8014fc6:	78fb      	ldrb	r3, [r7, #3]
 8014fc8:	4619      	mov	r1, r3
 8014fca:	f7fe fad1 	bl	8013570 <USBD_LL_DataOutStage>
}
 8014fce:	bf00      	nop
 8014fd0:	3708      	adds	r7, #8
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}

08014fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fd6:	b580      	push	{r7, lr}
 8014fd8:	b082      	sub	sp, #8
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	6078      	str	r0, [r7, #4]
 8014fde:	460b      	mov	r3, r1
 8014fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014fe8:	78fa      	ldrb	r2, [r7, #3]
 8014fea:	6879      	ldr	r1, [r7, #4]
 8014fec:	4613      	mov	r3, r2
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	4413      	add	r3, r2
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	440b      	add	r3, r1
 8014ff6:	3320      	adds	r3, #32
 8014ff8:	681a      	ldr	r2, [r3, #0]
 8014ffa:	78fb      	ldrb	r3, [r7, #3]
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	f7fe fb6a 	bl	80136d6 <USBD_LL_DataInStage>
}
 8015002:	bf00      	nop
 8015004:	3708      	adds	r7, #8
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b082      	sub	sp, #8
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015018:	4618      	mov	r0, r3
 801501a:	f7fe fca4 	bl	8013966 <USBD_LL_SOF>
}
 801501e:	bf00      	nop
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}

08015026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015026:	b580      	push	{r7, lr}
 8015028:	b084      	sub	sp, #16
 801502a:	af00      	add	r7, sp, #0
 801502c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801502e:	2301      	movs	r3, #1
 8015030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	79db      	ldrb	r3, [r3, #7]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d102      	bne.n	8015040 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801503a:	2300      	movs	r3, #0
 801503c:	73fb      	strb	r3, [r7, #15]
 801503e:	e008      	b.n	8015052 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	79db      	ldrb	r3, [r3, #7]
 8015044:	2b02      	cmp	r3, #2
 8015046:	d102      	bne.n	801504e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015048:	2301      	movs	r3, #1
 801504a:	73fb      	strb	r3, [r7, #15]
 801504c:	e001      	b.n	8015052 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801504e:	f7ec facd 	bl	80015ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015058:	7bfa      	ldrb	r2, [r7, #15]
 801505a:	4611      	mov	r1, r2
 801505c:	4618      	mov	r0, r3
 801505e:	f7fe fc3e 	bl	80138de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015068:	4618      	mov	r0, r3
 801506a:	f7fe fbe6 	bl	801383a <USBD_LL_Reset>
}
 801506e:	bf00      	nop
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
	...

08015078 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015086:	4618      	mov	r0, r3
 8015088:	f7fe fc39 	bl	80138fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	687a      	ldr	r2, [r7, #4]
 8015098:	6812      	ldr	r2, [r2, #0]
 801509a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801509e:	f043 0301 	orr.w	r3, r3, #1
 80150a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	7adb      	ldrb	r3, [r3, #11]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d005      	beq.n	80150b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80150ac:	4b04      	ldr	r3, [pc, #16]	@ (80150c0 <HAL_PCD_SuspendCallback+0x48>)
 80150ae:	691b      	ldr	r3, [r3, #16]
 80150b0:	4a03      	ldr	r2, [pc, #12]	@ (80150c0 <HAL_PCD_SuspendCallback+0x48>)
 80150b2:	f043 0306 	orr.w	r3, r3, #6
 80150b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80150b8:	bf00      	nop
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	e000ed00 	.word	0xe000ed00

080150c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fe fc2f 	bl	8013936 <USBD_LL_Resume>
}
 80150d8:	bf00      	nop
 80150da:	3708      	adds	r7, #8
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	460b      	mov	r3, r1
 80150ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80150f2:	78fa      	ldrb	r2, [r7, #3]
 80150f4:	4611      	mov	r1, r2
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7fe fc87 	bl	8013a0a <USBD_LL_IsoOUTIncomplete>
}
 80150fc:	bf00      	nop
 80150fe:	3708      	adds	r7, #8
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}

08015104 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	460b      	mov	r3, r1
 801510e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015116:	78fa      	ldrb	r2, [r7, #3]
 8015118:	4611      	mov	r1, r2
 801511a:	4618      	mov	r0, r3
 801511c:	f7fe fc43 	bl	80139a6 <USBD_LL_IsoINIncomplete>
}
 8015120:	bf00      	nop
 8015122:	3708      	adds	r7, #8
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015136:	4618      	mov	r0, r3
 8015138:	f7fe fc99 	bl	8013a6e <USBD_LL_DevConnected>
}
 801513c:	bf00      	nop
 801513e:	3708      	adds	r7, #8
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015152:	4618      	mov	r0, r3
 8015154:	f7fe fc96 	bl	8013a84 <USBD_LL_DevDisconnected>
}
 8015158:	bf00      	nop
 801515a:	3708      	adds	r7, #8
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d13e      	bne.n	80151ee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015170:	4a21      	ldr	r2, [pc, #132]	@ (80151f8 <USBD_LL_Init+0x98>)
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	4a1f      	ldr	r2, [pc, #124]	@ (80151f8 <USBD_LL_Init+0x98>)
 801517c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015180:	4b1d      	ldr	r3, [pc, #116]	@ (80151f8 <USBD_LL_Init+0x98>)
 8015182:	4a1e      	ldr	r2, [pc, #120]	@ (80151fc <USBD_LL_Init+0x9c>)
 8015184:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015186:	4b1c      	ldr	r3, [pc, #112]	@ (80151f8 <USBD_LL_Init+0x98>)
 8015188:	2209      	movs	r2, #9
 801518a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801518c:	4b1a      	ldr	r3, [pc, #104]	@ (80151f8 <USBD_LL_Init+0x98>)
 801518e:	2202      	movs	r2, #2
 8015190:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015192:	4b19      	ldr	r3, [pc, #100]	@ (80151f8 <USBD_LL_Init+0x98>)
 8015194:	2200      	movs	r2, #0
 8015196:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015198:	4b17      	ldr	r3, [pc, #92]	@ (80151f8 <USBD_LL_Init+0x98>)
 801519a:	2202      	movs	r2, #2
 801519c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801519e:	4b16      	ldr	r3, [pc, #88]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151a0:	2200      	movs	r2, #0
 80151a2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80151a4:	4b14      	ldr	r3, [pc, #80]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151a6:	2200      	movs	r2, #0
 80151a8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80151aa:	4b13      	ldr	r3, [pc, #76]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151ac:	2200      	movs	r2, #0
 80151ae:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80151b0:	4b11      	ldr	r3, [pc, #68]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151b2:	2200      	movs	r2, #0
 80151b4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80151b6:	4b10      	ldr	r3, [pc, #64]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151b8:	2200      	movs	r2, #0
 80151ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80151bc:	4b0e      	ldr	r3, [pc, #56]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151be:	2200      	movs	r2, #0
 80151c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80151c2:	480d      	ldr	r0, [pc, #52]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151c4:	f7f5 fcbc 	bl	800ab40 <HAL_PCD_Init>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d001      	beq.n	80151d2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80151ce:	f7ec fa0d 	bl	80015ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80151d2:	2180      	movs	r1, #128	@ 0x80
 80151d4:	4808      	ldr	r0, [pc, #32]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151d6:	f7f6 ff12 	bl	800bffe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80151da:	2240      	movs	r2, #64	@ 0x40
 80151dc:	2100      	movs	r1, #0
 80151de:	4806      	ldr	r0, [pc, #24]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151e0:	f7f6 fec6 	bl	800bf70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80151e4:	2280      	movs	r2, #128	@ 0x80
 80151e6:	2101      	movs	r1, #1
 80151e8:	4803      	ldr	r0, [pc, #12]	@ (80151f8 <USBD_LL_Init+0x98>)
 80151ea:	f7f6 fec1 	bl	800bf70 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80151ee:	2300      	movs	r3, #0
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	240142e0 	.word	0x240142e0
 80151fc:	40080000 	.word	0x40080000

08015200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015208:	2300      	movs	r3, #0
 801520a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801520c:	2300      	movs	r3, #0
 801520e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015216:	4618      	mov	r0, r3
 8015218:	f7f5 fd9e 	bl	800ad58 <HAL_PCD_Start>
 801521c:	4603      	mov	r3, r0
 801521e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015220:	7bfb      	ldrb	r3, [r7, #15]
 8015222:	4618      	mov	r0, r3
 8015224:	f000 f942 	bl	80154ac <USBD_Get_USB_Status>
 8015228:	4603      	mov	r3, r0
 801522a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801522c:	7bbb      	ldrb	r3, [r7, #14]
}
 801522e:	4618      	mov	r0, r3
 8015230:	3710      	adds	r7, #16
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}

08015236 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015236:	b580      	push	{r7, lr}
 8015238:	b084      	sub	sp, #16
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
 801523e:	4608      	mov	r0, r1
 8015240:	4611      	mov	r1, r2
 8015242:	461a      	mov	r2, r3
 8015244:	4603      	mov	r3, r0
 8015246:	70fb      	strb	r3, [r7, #3]
 8015248:	460b      	mov	r3, r1
 801524a:	70bb      	strb	r3, [r7, #2]
 801524c:	4613      	mov	r3, r2
 801524e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015250:	2300      	movs	r3, #0
 8015252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015254:	2300      	movs	r3, #0
 8015256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801525e:	78bb      	ldrb	r3, [r7, #2]
 8015260:	883a      	ldrh	r2, [r7, #0]
 8015262:	78f9      	ldrb	r1, [r7, #3]
 8015264:	f7f6 fa9f 	bl	800b7a6 <HAL_PCD_EP_Open>
 8015268:	4603      	mov	r3, r0
 801526a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801526c:	7bfb      	ldrb	r3, [r7, #15]
 801526e:	4618      	mov	r0, r3
 8015270:	f000 f91c 	bl	80154ac <USBD_Get_USB_Status>
 8015274:	4603      	mov	r3, r0
 8015276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015278:	7bbb      	ldrb	r3, [r7, #14]
}
 801527a:	4618      	mov	r0, r3
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}

08015282 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015282:	b580      	push	{r7, lr}
 8015284:	b084      	sub	sp, #16
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
 801528a:	460b      	mov	r3, r1
 801528c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801528e:	2300      	movs	r3, #0
 8015290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015292:	2300      	movs	r3, #0
 8015294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801529c:	78fa      	ldrb	r2, [r7, #3]
 801529e:	4611      	mov	r1, r2
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7f6 faea 	bl	800b87a <HAL_PCD_EP_Close>
 80152a6:	4603      	mov	r3, r0
 80152a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152aa:	7bfb      	ldrb	r3, [r7, #15]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f000 f8fd 	bl	80154ac <USBD_Get_USB_Status>
 80152b2:	4603      	mov	r3, r0
 80152b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3710      	adds	r7, #16
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b084      	sub	sp, #16
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	460b      	mov	r3, r1
 80152ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152cc:	2300      	movs	r3, #0
 80152ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152d0:	2300      	movs	r3, #0
 80152d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80152da:	78fa      	ldrb	r2, [r7, #3]
 80152dc:	4611      	mov	r1, r2
 80152de:	4618      	mov	r0, r3
 80152e0:	f7f6 fba2 	bl	800ba28 <HAL_PCD_EP_SetStall>
 80152e4:	4603      	mov	r3, r0
 80152e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152e8:	7bfb      	ldrb	r3, [r7, #15]
 80152ea:	4618      	mov	r0, r3
 80152ec:	f000 f8de 	bl	80154ac <USBD_Get_USB_Status>
 80152f0:	4603      	mov	r3, r0
 80152f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3710      	adds	r7, #16
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	6078      	str	r0, [r7, #4]
 8015306:	460b      	mov	r3, r1
 8015308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801530a:	2300      	movs	r3, #0
 801530c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801530e:	2300      	movs	r3, #0
 8015310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015318:	78fa      	ldrb	r2, [r7, #3]
 801531a:	4611      	mov	r1, r2
 801531c:	4618      	mov	r0, r3
 801531e:	f7f6 fbe6 	bl	800baee <HAL_PCD_EP_ClrStall>
 8015322:	4603      	mov	r3, r0
 8015324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015326:	7bfb      	ldrb	r3, [r7, #15]
 8015328:	4618      	mov	r0, r3
 801532a:	f000 f8bf 	bl	80154ac <USBD_Get_USB_Status>
 801532e:	4603      	mov	r3, r0
 8015330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015332:	7bbb      	ldrb	r3, [r7, #14]
}
 8015334:	4618      	mov	r0, r3
 8015336:	3710      	adds	r7, #16
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801533c:	b480      	push	{r7}
 801533e:	b085      	sub	sp, #20
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	460b      	mov	r3, r1
 8015346:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801534e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015354:	2b00      	cmp	r3, #0
 8015356:	da0b      	bge.n	8015370 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015358:	78fb      	ldrb	r3, [r7, #3]
 801535a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801535e:	68f9      	ldr	r1, [r7, #12]
 8015360:	4613      	mov	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	4413      	add	r3, r2
 8015366:	009b      	lsls	r3, r3, #2
 8015368:	440b      	add	r3, r1
 801536a:	3316      	adds	r3, #22
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	e00b      	b.n	8015388 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015370:	78fb      	ldrb	r3, [r7, #3]
 8015372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015376:	68f9      	ldr	r1, [r7, #12]
 8015378:	4613      	mov	r3, r2
 801537a:	00db      	lsls	r3, r3, #3
 801537c:	4413      	add	r3, r2
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	440b      	add	r3, r1
 8015382:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015386:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015388:	4618      	mov	r0, r3
 801538a:	3714      	adds	r7, #20
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr

08015394 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	460b      	mov	r3, r1
 801539e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153a0:	2300      	movs	r3, #0
 80153a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153a4:	2300      	movs	r3, #0
 80153a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80153ae:	78fa      	ldrb	r2, [r7, #3]
 80153b0:	4611      	mov	r1, r2
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7f6 f9d3 	bl	800b75e <HAL_PCD_SetAddress>
 80153b8:	4603      	mov	r3, r0
 80153ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153bc:	7bfb      	ldrb	r3, [r7, #15]
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 f874 	bl	80154ac <USBD_Get_USB_Status>
 80153c4:	4603      	mov	r3, r0
 80153c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3710      	adds	r7, #16
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80153d2:	b580      	push	{r7, lr}
 80153d4:	b086      	sub	sp, #24
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	60f8      	str	r0, [r7, #12]
 80153da:	607a      	str	r2, [r7, #4]
 80153dc:	603b      	str	r3, [r7, #0]
 80153de:	460b      	mov	r3, r1
 80153e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153e2:	2300      	movs	r3, #0
 80153e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153e6:	2300      	movs	r3, #0
 80153e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80153f0:	7af9      	ldrb	r1, [r7, #11]
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	f7f6 fadd 	bl	800b9b4 <HAL_PCD_EP_Transmit>
 80153fa:	4603      	mov	r3, r0
 80153fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153fe:	7dfb      	ldrb	r3, [r7, #23]
 8015400:	4618      	mov	r0, r3
 8015402:	f000 f853 	bl	80154ac <USBD_Get_USB_Status>
 8015406:	4603      	mov	r3, r0
 8015408:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801540a:	7dbb      	ldrb	r3, [r7, #22]
}
 801540c:	4618      	mov	r0, r3
 801540e:	3718      	adds	r7, #24
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
 801541a:	60f8      	str	r0, [r7, #12]
 801541c:	607a      	str	r2, [r7, #4]
 801541e:	603b      	str	r3, [r7, #0]
 8015420:	460b      	mov	r3, r1
 8015422:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015424:	2300      	movs	r3, #0
 8015426:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015428:	2300      	movs	r3, #0
 801542a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015432:	7af9      	ldrb	r1, [r7, #11]
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	f7f6 fa69 	bl	800b90e <HAL_PCD_EP_Receive>
 801543c:	4603      	mov	r3, r0
 801543e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015440:	7dfb      	ldrb	r3, [r7, #23]
 8015442:	4618      	mov	r0, r3
 8015444:	f000 f832 	bl	80154ac <USBD_Get_USB_Status>
 8015448:	4603      	mov	r3, r0
 801544a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801544c:	7dbb      	ldrb	r3, [r7, #22]
}
 801544e:	4618      	mov	r0, r3
 8015450:	3718      	adds	r7, #24
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}

08015456 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015456:	b580      	push	{r7, lr}
 8015458:	b082      	sub	sp, #8
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
 801545e:	460b      	mov	r3, r1
 8015460:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015468:	78fa      	ldrb	r2, [r7, #3]
 801546a:	4611      	mov	r1, r2
 801546c:	4618      	mov	r0, r3
 801546e:	f7f6 fa89 	bl	800b984 <HAL_PCD_EP_GetRxCount>
 8015472:	4603      	mov	r3, r0
}
 8015474:	4618      	mov	r0, r3
 8015476:	3708      	adds	r7, #8
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015484:	4b03      	ldr	r3, [pc, #12]	@ (8015494 <USBD_static_malloc+0x18>)
}
 8015486:	4618      	mov	r0, r3
 8015488:	370c      	adds	r7, #12
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr
 8015492:	bf00      	nop
 8015494:	240147c4 	.word	0x240147c4

08015498 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015498:	b480      	push	{r7}
 801549a:	b083      	sub	sp, #12
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80154a0:	bf00      	nop
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr

080154ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80154ac:	b480      	push	{r7}
 80154ae:	b085      	sub	sp, #20
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	4603      	mov	r3, r0
 80154b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154b6:	2300      	movs	r3, #0
 80154b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80154ba:	79fb      	ldrb	r3, [r7, #7]
 80154bc:	2b03      	cmp	r3, #3
 80154be:	d817      	bhi.n	80154f0 <USBD_Get_USB_Status+0x44>
 80154c0:	a201      	add	r2, pc, #4	@ (adr r2, 80154c8 <USBD_Get_USB_Status+0x1c>)
 80154c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154c6:	bf00      	nop
 80154c8:	080154d9 	.word	0x080154d9
 80154cc:	080154df 	.word	0x080154df
 80154d0:	080154e5 	.word	0x080154e5
 80154d4:	080154eb 	.word	0x080154eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80154d8:	2300      	movs	r3, #0
 80154da:	73fb      	strb	r3, [r7, #15]
    break;
 80154dc:	e00b      	b.n	80154f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80154de:	2303      	movs	r3, #3
 80154e0:	73fb      	strb	r3, [r7, #15]
    break;
 80154e2:	e008      	b.n	80154f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80154e4:	2301      	movs	r3, #1
 80154e6:	73fb      	strb	r3, [r7, #15]
    break;
 80154e8:	e005      	b.n	80154f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80154ea:	2303      	movs	r3, #3
 80154ec:	73fb      	strb	r3, [r7, #15]
    break;
 80154ee:	e002      	b.n	80154f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80154f0:	2303      	movs	r3, #3
 80154f2:	73fb      	strb	r3, [r7, #15]
    break;
 80154f4:	bf00      	nop
  }
  return usb_status;
 80154f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	3714      	adds	r7, #20
 80154fc:	46bd      	mov	sp, r7
 80154fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015502:	4770      	bx	lr

08015504 <siprintf>:
 8015504:	b40e      	push	{r1, r2, r3}
 8015506:	b510      	push	{r4, lr}
 8015508:	b09d      	sub	sp, #116	@ 0x74
 801550a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801550c:	9002      	str	r0, [sp, #8]
 801550e:	9006      	str	r0, [sp, #24]
 8015510:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015514:	480a      	ldr	r0, [pc, #40]	@ (8015540 <siprintf+0x3c>)
 8015516:	9107      	str	r1, [sp, #28]
 8015518:	9104      	str	r1, [sp, #16]
 801551a:	490a      	ldr	r1, [pc, #40]	@ (8015544 <siprintf+0x40>)
 801551c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015520:	9105      	str	r1, [sp, #20]
 8015522:	2400      	movs	r4, #0
 8015524:	a902      	add	r1, sp, #8
 8015526:	6800      	ldr	r0, [r0, #0]
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801552c:	f000 f994 	bl	8015858 <_svfiprintf_r>
 8015530:	9b02      	ldr	r3, [sp, #8]
 8015532:	701c      	strb	r4, [r3, #0]
 8015534:	b01d      	add	sp, #116	@ 0x74
 8015536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801553a:	b003      	add	sp, #12
 801553c:	4770      	bx	lr
 801553e:	bf00      	nop
 8015540:	24000108 	.word	0x24000108
 8015544:	ffff0208 	.word	0xffff0208

08015548 <memset>:
 8015548:	4402      	add	r2, r0
 801554a:	4603      	mov	r3, r0
 801554c:	4293      	cmp	r3, r2
 801554e:	d100      	bne.n	8015552 <memset+0xa>
 8015550:	4770      	bx	lr
 8015552:	f803 1b01 	strb.w	r1, [r3], #1
 8015556:	e7f9      	b.n	801554c <memset+0x4>

08015558 <__errno>:
 8015558:	4b01      	ldr	r3, [pc, #4]	@ (8015560 <__errno+0x8>)
 801555a:	6818      	ldr	r0, [r3, #0]
 801555c:	4770      	bx	lr
 801555e:	bf00      	nop
 8015560:	24000108 	.word	0x24000108

08015564 <__libc_init_array>:
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	4d0d      	ldr	r5, [pc, #52]	@ (801559c <__libc_init_array+0x38>)
 8015568:	4c0d      	ldr	r4, [pc, #52]	@ (80155a0 <__libc_init_array+0x3c>)
 801556a:	1b64      	subs	r4, r4, r5
 801556c:	10a4      	asrs	r4, r4, #2
 801556e:	2600      	movs	r6, #0
 8015570:	42a6      	cmp	r6, r4
 8015572:	d109      	bne.n	8015588 <__libc_init_array+0x24>
 8015574:	4d0b      	ldr	r5, [pc, #44]	@ (80155a4 <__libc_init_array+0x40>)
 8015576:	4c0c      	ldr	r4, [pc, #48]	@ (80155a8 <__libc_init_array+0x44>)
 8015578:	f000 fc64 	bl	8015e44 <_init>
 801557c:	1b64      	subs	r4, r4, r5
 801557e:	10a4      	asrs	r4, r4, #2
 8015580:	2600      	movs	r6, #0
 8015582:	42a6      	cmp	r6, r4
 8015584:	d105      	bne.n	8015592 <__libc_init_array+0x2e>
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	f855 3b04 	ldr.w	r3, [r5], #4
 801558c:	4798      	blx	r3
 801558e:	3601      	adds	r6, #1
 8015590:	e7ee      	b.n	8015570 <__libc_init_array+0xc>
 8015592:	f855 3b04 	ldr.w	r3, [r5], #4
 8015596:	4798      	blx	r3
 8015598:	3601      	adds	r6, #1
 801559a:	e7f2      	b.n	8015582 <__libc_init_array+0x1e>
 801559c:	080162d4 	.word	0x080162d4
 80155a0:	080162d4 	.word	0x080162d4
 80155a4:	080162d4 	.word	0x080162d4
 80155a8:	080162d8 	.word	0x080162d8

080155ac <__retarget_lock_acquire_recursive>:
 80155ac:	4770      	bx	lr

080155ae <__retarget_lock_release_recursive>:
 80155ae:	4770      	bx	lr

080155b0 <_free_r>:
 80155b0:	b538      	push	{r3, r4, r5, lr}
 80155b2:	4605      	mov	r5, r0
 80155b4:	2900      	cmp	r1, #0
 80155b6:	d041      	beq.n	801563c <_free_r+0x8c>
 80155b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155bc:	1f0c      	subs	r4, r1, #4
 80155be:	2b00      	cmp	r3, #0
 80155c0:	bfb8      	it	lt
 80155c2:	18e4      	addlt	r4, r4, r3
 80155c4:	f000 f8e0 	bl	8015788 <__malloc_lock>
 80155c8:	4a1d      	ldr	r2, [pc, #116]	@ (8015640 <_free_r+0x90>)
 80155ca:	6813      	ldr	r3, [r2, #0]
 80155cc:	b933      	cbnz	r3, 80155dc <_free_r+0x2c>
 80155ce:	6063      	str	r3, [r4, #4]
 80155d0:	6014      	str	r4, [r2, #0]
 80155d2:	4628      	mov	r0, r5
 80155d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155d8:	f000 b8dc 	b.w	8015794 <__malloc_unlock>
 80155dc:	42a3      	cmp	r3, r4
 80155de:	d908      	bls.n	80155f2 <_free_r+0x42>
 80155e0:	6820      	ldr	r0, [r4, #0]
 80155e2:	1821      	adds	r1, r4, r0
 80155e4:	428b      	cmp	r3, r1
 80155e6:	bf01      	itttt	eq
 80155e8:	6819      	ldreq	r1, [r3, #0]
 80155ea:	685b      	ldreq	r3, [r3, #4]
 80155ec:	1809      	addeq	r1, r1, r0
 80155ee:	6021      	streq	r1, [r4, #0]
 80155f0:	e7ed      	b.n	80155ce <_free_r+0x1e>
 80155f2:	461a      	mov	r2, r3
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	b10b      	cbz	r3, 80155fc <_free_r+0x4c>
 80155f8:	42a3      	cmp	r3, r4
 80155fa:	d9fa      	bls.n	80155f2 <_free_r+0x42>
 80155fc:	6811      	ldr	r1, [r2, #0]
 80155fe:	1850      	adds	r0, r2, r1
 8015600:	42a0      	cmp	r0, r4
 8015602:	d10b      	bne.n	801561c <_free_r+0x6c>
 8015604:	6820      	ldr	r0, [r4, #0]
 8015606:	4401      	add	r1, r0
 8015608:	1850      	adds	r0, r2, r1
 801560a:	4283      	cmp	r3, r0
 801560c:	6011      	str	r1, [r2, #0]
 801560e:	d1e0      	bne.n	80155d2 <_free_r+0x22>
 8015610:	6818      	ldr	r0, [r3, #0]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	6053      	str	r3, [r2, #4]
 8015616:	4408      	add	r0, r1
 8015618:	6010      	str	r0, [r2, #0]
 801561a:	e7da      	b.n	80155d2 <_free_r+0x22>
 801561c:	d902      	bls.n	8015624 <_free_r+0x74>
 801561e:	230c      	movs	r3, #12
 8015620:	602b      	str	r3, [r5, #0]
 8015622:	e7d6      	b.n	80155d2 <_free_r+0x22>
 8015624:	6820      	ldr	r0, [r4, #0]
 8015626:	1821      	adds	r1, r4, r0
 8015628:	428b      	cmp	r3, r1
 801562a:	bf04      	itt	eq
 801562c:	6819      	ldreq	r1, [r3, #0]
 801562e:	685b      	ldreq	r3, [r3, #4]
 8015630:	6063      	str	r3, [r4, #4]
 8015632:	bf04      	itt	eq
 8015634:	1809      	addeq	r1, r1, r0
 8015636:	6021      	streq	r1, [r4, #0]
 8015638:	6054      	str	r4, [r2, #4]
 801563a:	e7ca      	b.n	80155d2 <_free_r+0x22>
 801563c:	bd38      	pop	{r3, r4, r5, pc}
 801563e:	bf00      	nop
 8015640:	24014b28 	.word	0x24014b28

08015644 <sbrk_aligned>:
 8015644:	b570      	push	{r4, r5, r6, lr}
 8015646:	4e0f      	ldr	r6, [pc, #60]	@ (8015684 <sbrk_aligned+0x40>)
 8015648:	460c      	mov	r4, r1
 801564a:	6831      	ldr	r1, [r6, #0]
 801564c:	4605      	mov	r5, r0
 801564e:	b911      	cbnz	r1, 8015656 <sbrk_aligned+0x12>
 8015650:	f000 fba4 	bl	8015d9c <_sbrk_r>
 8015654:	6030      	str	r0, [r6, #0]
 8015656:	4621      	mov	r1, r4
 8015658:	4628      	mov	r0, r5
 801565a:	f000 fb9f 	bl	8015d9c <_sbrk_r>
 801565e:	1c43      	adds	r3, r0, #1
 8015660:	d103      	bne.n	801566a <sbrk_aligned+0x26>
 8015662:	f04f 34ff 	mov.w	r4, #4294967295
 8015666:	4620      	mov	r0, r4
 8015668:	bd70      	pop	{r4, r5, r6, pc}
 801566a:	1cc4      	adds	r4, r0, #3
 801566c:	f024 0403 	bic.w	r4, r4, #3
 8015670:	42a0      	cmp	r0, r4
 8015672:	d0f8      	beq.n	8015666 <sbrk_aligned+0x22>
 8015674:	1a21      	subs	r1, r4, r0
 8015676:	4628      	mov	r0, r5
 8015678:	f000 fb90 	bl	8015d9c <_sbrk_r>
 801567c:	3001      	adds	r0, #1
 801567e:	d1f2      	bne.n	8015666 <sbrk_aligned+0x22>
 8015680:	e7ef      	b.n	8015662 <sbrk_aligned+0x1e>
 8015682:	bf00      	nop
 8015684:	24014b24 	.word	0x24014b24

08015688 <_malloc_r>:
 8015688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801568c:	1ccd      	adds	r5, r1, #3
 801568e:	f025 0503 	bic.w	r5, r5, #3
 8015692:	3508      	adds	r5, #8
 8015694:	2d0c      	cmp	r5, #12
 8015696:	bf38      	it	cc
 8015698:	250c      	movcc	r5, #12
 801569a:	2d00      	cmp	r5, #0
 801569c:	4606      	mov	r6, r0
 801569e:	db01      	blt.n	80156a4 <_malloc_r+0x1c>
 80156a0:	42a9      	cmp	r1, r5
 80156a2:	d904      	bls.n	80156ae <_malloc_r+0x26>
 80156a4:	230c      	movs	r3, #12
 80156a6:	6033      	str	r3, [r6, #0]
 80156a8:	2000      	movs	r0, #0
 80156aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015784 <_malloc_r+0xfc>
 80156b2:	f000 f869 	bl	8015788 <__malloc_lock>
 80156b6:	f8d8 3000 	ldr.w	r3, [r8]
 80156ba:	461c      	mov	r4, r3
 80156bc:	bb44      	cbnz	r4, 8015710 <_malloc_r+0x88>
 80156be:	4629      	mov	r1, r5
 80156c0:	4630      	mov	r0, r6
 80156c2:	f7ff ffbf 	bl	8015644 <sbrk_aligned>
 80156c6:	1c43      	adds	r3, r0, #1
 80156c8:	4604      	mov	r4, r0
 80156ca:	d158      	bne.n	801577e <_malloc_r+0xf6>
 80156cc:	f8d8 4000 	ldr.w	r4, [r8]
 80156d0:	4627      	mov	r7, r4
 80156d2:	2f00      	cmp	r7, #0
 80156d4:	d143      	bne.n	801575e <_malloc_r+0xd6>
 80156d6:	2c00      	cmp	r4, #0
 80156d8:	d04b      	beq.n	8015772 <_malloc_r+0xea>
 80156da:	6823      	ldr	r3, [r4, #0]
 80156dc:	4639      	mov	r1, r7
 80156de:	4630      	mov	r0, r6
 80156e0:	eb04 0903 	add.w	r9, r4, r3
 80156e4:	f000 fb5a 	bl	8015d9c <_sbrk_r>
 80156e8:	4581      	cmp	r9, r0
 80156ea:	d142      	bne.n	8015772 <_malloc_r+0xea>
 80156ec:	6821      	ldr	r1, [r4, #0]
 80156ee:	1a6d      	subs	r5, r5, r1
 80156f0:	4629      	mov	r1, r5
 80156f2:	4630      	mov	r0, r6
 80156f4:	f7ff ffa6 	bl	8015644 <sbrk_aligned>
 80156f8:	3001      	adds	r0, #1
 80156fa:	d03a      	beq.n	8015772 <_malloc_r+0xea>
 80156fc:	6823      	ldr	r3, [r4, #0]
 80156fe:	442b      	add	r3, r5
 8015700:	6023      	str	r3, [r4, #0]
 8015702:	f8d8 3000 	ldr.w	r3, [r8]
 8015706:	685a      	ldr	r2, [r3, #4]
 8015708:	bb62      	cbnz	r2, 8015764 <_malloc_r+0xdc>
 801570a:	f8c8 7000 	str.w	r7, [r8]
 801570e:	e00f      	b.n	8015730 <_malloc_r+0xa8>
 8015710:	6822      	ldr	r2, [r4, #0]
 8015712:	1b52      	subs	r2, r2, r5
 8015714:	d420      	bmi.n	8015758 <_malloc_r+0xd0>
 8015716:	2a0b      	cmp	r2, #11
 8015718:	d917      	bls.n	801574a <_malloc_r+0xc2>
 801571a:	1961      	adds	r1, r4, r5
 801571c:	42a3      	cmp	r3, r4
 801571e:	6025      	str	r5, [r4, #0]
 8015720:	bf18      	it	ne
 8015722:	6059      	strne	r1, [r3, #4]
 8015724:	6863      	ldr	r3, [r4, #4]
 8015726:	bf08      	it	eq
 8015728:	f8c8 1000 	streq.w	r1, [r8]
 801572c:	5162      	str	r2, [r4, r5]
 801572e:	604b      	str	r3, [r1, #4]
 8015730:	4630      	mov	r0, r6
 8015732:	f000 f82f 	bl	8015794 <__malloc_unlock>
 8015736:	f104 000b 	add.w	r0, r4, #11
 801573a:	1d23      	adds	r3, r4, #4
 801573c:	f020 0007 	bic.w	r0, r0, #7
 8015740:	1ac2      	subs	r2, r0, r3
 8015742:	bf1c      	itt	ne
 8015744:	1a1b      	subne	r3, r3, r0
 8015746:	50a3      	strne	r3, [r4, r2]
 8015748:	e7af      	b.n	80156aa <_malloc_r+0x22>
 801574a:	6862      	ldr	r2, [r4, #4]
 801574c:	42a3      	cmp	r3, r4
 801574e:	bf0c      	ite	eq
 8015750:	f8c8 2000 	streq.w	r2, [r8]
 8015754:	605a      	strne	r2, [r3, #4]
 8015756:	e7eb      	b.n	8015730 <_malloc_r+0xa8>
 8015758:	4623      	mov	r3, r4
 801575a:	6864      	ldr	r4, [r4, #4]
 801575c:	e7ae      	b.n	80156bc <_malloc_r+0x34>
 801575e:	463c      	mov	r4, r7
 8015760:	687f      	ldr	r7, [r7, #4]
 8015762:	e7b6      	b.n	80156d2 <_malloc_r+0x4a>
 8015764:	461a      	mov	r2, r3
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	42a3      	cmp	r3, r4
 801576a:	d1fb      	bne.n	8015764 <_malloc_r+0xdc>
 801576c:	2300      	movs	r3, #0
 801576e:	6053      	str	r3, [r2, #4]
 8015770:	e7de      	b.n	8015730 <_malloc_r+0xa8>
 8015772:	230c      	movs	r3, #12
 8015774:	6033      	str	r3, [r6, #0]
 8015776:	4630      	mov	r0, r6
 8015778:	f000 f80c 	bl	8015794 <__malloc_unlock>
 801577c:	e794      	b.n	80156a8 <_malloc_r+0x20>
 801577e:	6005      	str	r5, [r0, #0]
 8015780:	e7d6      	b.n	8015730 <_malloc_r+0xa8>
 8015782:	bf00      	nop
 8015784:	24014b28 	.word	0x24014b28

08015788 <__malloc_lock>:
 8015788:	4801      	ldr	r0, [pc, #4]	@ (8015790 <__malloc_lock+0x8>)
 801578a:	f7ff bf0f 	b.w	80155ac <__retarget_lock_acquire_recursive>
 801578e:	bf00      	nop
 8015790:	24014b20 	.word	0x24014b20

08015794 <__malloc_unlock>:
 8015794:	4801      	ldr	r0, [pc, #4]	@ (801579c <__malloc_unlock+0x8>)
 8015796:	f7ff bf0a 	b.w	80155ae <__retarget_lock_release_recursive>
 801579a:	bf00      	nop
 801579c:	24014b20 	.word	0x24014b20

080157a0 <__ssputs_r>:
 80157a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157a4:	688e      	ldr	r6, [r1, #8]
 80157a6:	461f      	mov	r7, r3
 80157a8:	42be      	cmp	r6, r7
 80157aa:	680b      	ldr	r3, [r1, #0]
 80157ac:	4682      	mov	sl, r0
 80157ae:	460c      	mov	r4, r1
 80157b0:	4690      	mov	r8, r2
 80157b2:	d82d      	bhi.n	8015810 <__ssputs_r+0x70>
 80157b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80157b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80157bc:	d026      	beq.n	801580c <__ssputs_r+0x6c>
 80157be:	6965      	ldr	r5, [r4, #20]
 80157c0:	6909      	ldr	r1, [r1, #16]
 80157c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157c6:	eba3 0901 	sub.w	r9, r3, r1
 80157ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157ce:	1c7b      	adds	r3, r7, #1
 80157d0:	444b      	add	r3, r9
 80157d2:	106d      	asrs	r5, r5, #1
 80157d4:	429d      	cmp	r5, r3
 80157d6:	bf38      	it	cc
 80157d8:	461d      	movcc	r5, r3
 80157da:	0553      	lsls	r3, r2, #21
 80157dc:	d527      	bpl.n	801582e <__ssputs_r+0x8e>
 80157de:	4629      	mov	r1, r5
 80157e0:	f7ff ff52 	bl	8015688 <_malloc_r>
 80157e4:	4606      	mov	r6, r0
 80157e6:	b360      	cbz	r0, 8015842 <__ssputs_r+0xa2>
 80157e8:	6921      	ldr	r1, [r4, #16]
 80157ea:	464a      	mov	r2, r9
 80157ec:	f000 fae6 	bl	8015dbc <memcpy>
 80157f0:	89a3      	ldrh	r3, [r4, #12]
 80157f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80157f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80157fa:	81a3      	strh	r3, [r4, #12]
 80157fc:	6126      	str	r6, [r4, #16]
 80157fe:	6165      	str	r5, [r4, #20]
 8015800:	444e      	add	r6, r9
 8015802:	eba5 0509 	sub.w	r5, r5, r9
 8015806:	6026      	str	r6, [r4, #0]
 8015808:	60a5      	str	r5, [r4, #8]
 801580a:	463e      	mov	r6, r7
 801580c:	42be      	cmp	r6, r7
 801580e:	d900      	bls.n	8015812 <__ssputs_r+0x72>
 8015810:	463e      	mov	r6, r7
 8015812:	6820      	ldr	r0, [r4, #0]
 8015814:	4632      	mov	r2, r6
 8015816:	4641      	mov	r1, r8
 8015818:	f000 faa6 	bl	8015d68 <memmove>
 801581c:	68a3      	ldr	r3, [r4, #8]
 801581e:	1b9b      	subs	r3, r3, r6
 8015820:	60a3      	str	r3, [r4, #8]
 8015822:	6823      	ldr	r3, [r4, #0]
 8015824:	4433      	add	r3, r6
 8015826:	6023      	str	r3, [r4, #0]
 8015828:	2000      	movs	r0, #0
 801582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801582e:	462a      	mov	r2, r5
 8015830:	f000 fad2 	bl	8015dd8 <_realloc_r>
 8015834:	4606      	mov	r6, r0
 8015836:	2800      	cmp	r0, #0
 8015838:	d1e0      	bne.n	80157fc <__ssputs_r+0x5c>
 801583a:	6921      	ldr	r1, [r4, #16]
 801583c:	4650      	mov	r0, sl
 801583e:	f7ff feb7 	bl	80155b0 <_free_r>
 8015842:	230c      	movs	r3, #12
 8015844:	f8ca 3000 	str.w	r3, [sl]
 8015848:	89a3      	ldrh	r3, [r4, #12]
 801584a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801584e:	81a3      	strh	r3, [r4, #12]
 8015850:	f04f 30ff 	mov.w	r0, #4294967295
 8015854:	e7e9      	b.n	801582a <__ssputs_r+0x8a>
	...

08015858 <_svfiprintf_r>:
 8015858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801585c:	4698      	mov	r8, r3
 801585e:	898b      	ldrh	r3, [r1, #12]
 8015860:	061b      	lsls	r3, r3, #24
 8015862:	b09d      	sub	sp, #116	@ 0x74
 8015864:	4607      	mov	r7, r0
 8015866:	460d      	mov	r5, r1
 8015868:	4614      	mov	r4, r2
 801586a:	d510      	bpl.n	801588e <_svfiprintf_r+0x36>
 801586c:	690b      	ldr	r3, [r1, #16]
 801586e:	b973      	cbnz	r3, 801588e <_svfiprintf_r+0x36>
 8015870:	2140      	movs	r1, #64	@ 0x40
 8015872:	f7ff ff09 	bl	8015688 <_malloc_r>
 8015876:	6028      	str	r0, [r5, #0]
 8015878:	6128      	str	r0, [r5, #16]
 801587a:	b930      	cbnz	r0, 801588a <_svfiprintf_r+0x32>
 801587c:	230c      	movs	r3, #12
 801587e:	603b      	str	r3, [r7, #0]
 8015880:	f04f 30ff 	mov.w	r0, #4294967295
 8015884:	b01d      	add	sp, #116	@ 0x74
 8015886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801588a:	2340      	movs	r3, #64	@ 0x40
 801588c:	616b      	str	r3, [r5, #20]
 801588e:	2300      	movs	r3, #0
 8015890:	9309      	str	r3, [sp, #36]	@ 0x24
 8015892:	2320      	movs	r3, #32
 8015894:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015898:	f8cd 800c 	str.w	r8, [sp, #12]
 801589c:	2330      	movs	r3, #48	@ 0x30
 801589e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015a3c <_svfiprintf_r+0x1e4>
 80158a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80158a6:	f04f 0901 	mov.w	r9, #1
 80158aa:	4623      	mov	r3, r4
 80158ac:	469a      	mov	sl, r3
 80158ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158b2:	b10a      	cbz	r2, 80158b8 <_svfiprintf_r+0x60>
 80158b4:	2a25      	cmp	r2, #37	@ 0x25
 80158b6:	d1f9      	bne.n	80158ac <_svfiprintf_r+0x54>
 80158b8:	ebba 0b04 	subs.w	fp, sl, r4
 80158bc:	d00b      	beq.n	80158d6 <_svfiprintf_r+0x7e>
 80158be:	465b      	mov	r3, fp
 80158c0:	4622      	mov	r2, r4
 80158c2:	4629      	mov	r1, r5
 80158c4:	4638      	mov	r0, r7
 80158c6:	f7ff ff6b 	bl	80157a0 <__ssputs_r>
 80158ca:	3001      	adds	r0, #1
 80158cc:	f000 80a7 	beq.w	8015a1e <_svfiprintf_r+0x1c6>
 80158d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158d2:	445a      	add	r2, fp
 80158d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80158d6:	f89a 3000 	ldrb.w	r3, [sl]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f000 809f 	beq.w	8015a1e <_svfiprintf_r+0x1c6>
 80158e0:	2300      	movs	r3, #0
 80158e2:	f04f 32ff 	mov.w	r2, #4294967295
 80158e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158ea:	f10a 0a01 	add.w	sl, sl, #1
 80158ee:	9304      	str	r3, [sp, #16]
 80158f0:	9307      	str	r3, [sp, #28]
 80158f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80158f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80158f8:	4654      	mov	r4, sl
 80158fa:	2205      	movs	r2, #5
 80158fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015900:	484e      	ldr	r0, [pc, #312]	@ (8015a3c <_svfiprintf_r+0x1e4>)
 8015902:	f7ea fcf5 	bl	80002f0 <memchr>
 8015906:	9a04      	ldr	r2, [sp, #16]
 8015908:	b9d8      	cbnz	r0, 8015942 <_svfiprintf_r+0xea>
 801590a:	06d0      	lsls	r0, r2, #27
 801590c:	bf44      	itt	mi
 801590e:	2320      	movmi	r3, #32
 8015910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015914:	0711      	lsls	r1, r2, #28
 8015916:	bf44      	itt	mi
 8015918:	232b      	movmi	r3, #43	@ 0x2b
 801591a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801591e:	f89a 3000 	ldrb.w	r3, [sl]
 8015922:	2b2a      	cmp	r3, #42	@ 0x2a
 8015924:	d015      	beq.n	8015952 <_svfiprintf_r+0xfa>
 8015926:	9a07      	ldr	r2, [sp, #28]
 8015928:	4654      	mov	r4, sl
 801592a:	2000      	movs	r0, #0
 801592c:	f04f 0c0a 	mov.w	ip, #10
 8015930:	4621      	mov	r1, r4
 8015932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015936:	3b30      	subs	r3, #48	@ 0x30
 8015938:	2b09      	cmp	r3, #9
 801593a:	d94b      	bls.n	80159d4 <_svfiprintf_r+0x17c>
 801593c:	b1b0      	cbz	r0, 801596c <_svfiprintf_r+0x114>
 801593e:	9207      	str	r2, [sp, #28]
 8015940:	e014      	b.n	801596c <_svfiprintf_r+0x114>
 8015942:	eba0 0308 	sub.w	r3, r0, r8
 8015946:	fa09 f303 	lsl.w	r3, r9, r3
 801594a:	4313      	orrs	r3, r2
 801594c:	9304      	str	r3, [sp, #16]
 801594e:	46a2      	mov	sl, r4
 8015950:	e7d2      	b.n	80158f8 <_svfiprintf_r+0xa0>
 8015952:	9b03      	ldr	r3, [sp, #12]
 8015954:	1d19      	adds	r1, r3, #4
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	9103      	str	r1, [sp, #12]
 801595a:	2b00      	cmp	r3, #0
 801595c:	bfbb      	ittet	lt
 801595e:	425b      	neglt	r3, r3
 8015960:	f042 0202 	orrlt.w	r2, r2, #2
 8015964:	9307      	strge	r3, [sp, #28]
 8015966:	9307      	strlt	r3, [sp, #28]
 8015968:	bfb8      	it	lt
 801596a:	9204      	strlt	r2, [sp, #16]
 801596c:	7823      	ldrb	r3, [r4, #0]
 801596e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015970:	d10a      	bne.n	8015988 <_svfiprintf_r+0x130>
 8015972:	7863      	ldrb	r3, [r4, #1]
 8015974:	2b2a      	cmp	r3, #42	@ 0x2a
 8015976:	d132      	bne.n	80159de <_svfiprintf_r+0x186>
 8015978:	9b03      	ldr	r3, [sp, #12]
 801597a:	1d1a      	adds	r2, r3, #4
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	9203      	str	r2, [sp, #12]
 8015980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015984:	3402      	adds	r4, #2
 8015986:	9305      	str	r3, [sp, #20]
 8015988:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015a4c <_svfiprintf_r+0x1f4>
 801598c:	7821      	ldrb	r1, [r4, #0]
 801598e:	2203      	movs	r2, #3
 8015990:	4650      	mov	r0, sl
 8015992:	f7ea fcad 	bl	80002f0 <memchr>
 8015996:	b138      	cbz	r0, 80159a8 <_svfiprintf_r+0x150>
 8015998:	9b04      	ldr	r3, [sp, #16]
 801599a:	eba0 000a 	sub.w	r0, r0, sl
 801599e:	2240      	movs	r2, #64	@ 0x40
 80159a0:	4082      	lsls	r2, r0
 80159a2:	4313      	orrs	r3, r2
 80159a4:	3401      	adds	r4, #1
 80159a6:	9304      	str	r3, [sp, #16]
 80159a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159ac:	4824      	ldr	r0, [pc, #144]	@ (8015a40 <_svfiprintf_r+0x1e8>)
 80159ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80159b2:	2206      	movs	r2, #6
 80159b4:	f7ea fc9c 	bl	80002f0 <memchr>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d036      	beq.n	8015a2a <_svfiprintf_r+0x1d2>
 80159bc:	4b21      	ldr	r3, [pc, #132]	@ (8015a44 <_svfiprintf_r+0x1ec>)
 80159be:	bb1b      	cbnz	r3, 8015a08 <_svfiprintf_r+0x1b0>
 80159c0:	9b03      	ldr	r3, [sp, #12]
 80159c2:	3307      	adds	r3, #7
 80159c4:	f023 0307 	bic.w	r3, r3, #7
 80159c8:	3308      	adds	r3, #8
 80159ca:	9303      	str	r3, [sp, #12]
 80159cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ce:	4433      	add	r3, r6
 80159d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80159d2:	e76a      	b.n	80158aa <_svfiprintf_r+0x52>
 80159d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80159d8:	460c      	mov	r4, r1
 80159da:	2001      	movs	r0, #1
 80159dc:	e7a8      	b.n	8015930 <_svfiprintf_r+0xd8>
 80159de:	2300      	movs	r3, #0
 80159e0:	3401      	adds	r4, #1
 80159e2:	9305      	str	r3, [sp, #20]
 80159e4:	4619      	mov	r1, r3
 80159e6:	f04f 0c0a 	mov.w	ip, #10
 80159ea:	4620      	mov	r0, r4
 80159ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159f0:	3a30      	subs	r2, #48	@ 0x30
 80159f2:	2a09      	cmp	r2, #9
 80159f4:	d903      	bls.n	80159fe <_svfiprintf_r+0x1a6>
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d0c6      	beq.n	8015988 <_svfiprintf_r+0x130>
 80159fa:	9105      	str	r1, [sp, #20]
 80159fc:	e7c4      	b.n	8015988 <_svfiprintf_r+0x130>
 80159fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a02:	4604      	mov	r4, r0
 8015a04:	2301      	movs	r3, #1
 8015a06:	e7f0      	b.n	80159ea <_svfiprintf_r+0x192>
 8015a08:	ab03      	add	r3, sp, #12
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	462a      	mov	r2, r5
 8015a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8015a48 <_svfiprintf_r+0x1f0>)
 8015a10:	a904      	add	r1, sp, #16
 8015a12:	4638      	mov	r0, r7
 8015a14:	f3af 8000 	nop.w
 8015a18:	1c42      	adds	r2, r0, #1
 8015a1a:	4606      	mov	r6, r0
 8015a1c:	d1d6      	bne.n	80159cc <_svfiprintf_r+0x174>
 8015a1e:	89ab      	ldrh	r3, [r5, #12]
 8015a20:	065b      	lsls	r3, r3, #25
 8015a22:	f53f af2d 	bmi.w	8015880 <_svfiprintf_r+0x28>
 8015a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a28:	e72c      	b.n	8015884 <_svfiprintf_r+0x2c>
 8015a2a:	ab03      	add	r3, sp, #12
 8015a2c:	9300      	str	r3, [sp, #0]
 8015a2e:	462a      	mov	r2, r5
 8015a30:	4b05      	ldr	r3, [pc, #20]	@ (8015a48 <_svfiprintf_r+0x1f0>)
 8015a32:	a904      	add	r1, sp, #16
 8015a34:	4638      	mov	r0, r7
 8015a36:	f000 f879 	bl	8015b2c <_printf_i>
 8015a3a:	e7ed      	b.n	8015a18 <_svfiprintf_r+0x1c0>
 8015a3c:	08016298 	.word	0x08016298
 8015a40:	080162a2 	.word	0x080162a2
 8015a44:	00000000 	.word	0x00000000
 8015a48:	080157a1 	.word	0x080157a1
 8015a4c:	0801629e 	.word	0x0801629e

08015a50 <_printf_common>:
 8015a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a54:	4616      	mov	r6, r2
 8015a56:	4698      	mov	r8, r3
 8015a58:	688a      	ldr	r2, [r1, #8]
 8015a5a:	690b      	ldr	r3, [r1, #16]
 8015a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015a60:	4293      	cmp	r3, r2
 8015a62:	bfb8      	it	lt
 8015a64:	4613      	movlt	r3, r2
 8015a66:	6033      	str	r3, [r6, #0]
 8015a68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a6c:	4607      	mov	r7, r0
 8015a6e:	460c      	mov	r4, r1
 8015a70:	b10a      	cbz	r2, 8015a76 <_printf_common+0x26>
 8015a72:	3301      	adds	r3, #1
 8015a74:	6033      	str	r3, [r6, #0]
 8015a76:	6823      	ldr	r3, [r4, #0]
 8015a78:	0699      	lsls	r1, r3, #26
 8015a7a:	bf42      	ittt	mi
 8015a7c:	6833      	ldrmi	r3, [r6, #0]
 8015a7e:	3302      	addmi	r3, #2
 8015a80:	6033      	strmi	r3, [r6, #0]
 8015a82:	6825      	ldr	r5, [r4, #0]
 8015a84:	f015 0506 	ands.w	r5, r5, #6
 8015a88:	d106      	bne.n	8015a98 <_printf_common+0x48>
 8015a8a:	f104 0a19 	add.w	sl, r4, #25
 8015a8e:	68e3      	ldr	r3, [r4, #12]
 8015a90:	6832      	ldr	r2, [r6, #0]
 8015a92:	1a9b      	subs	r3, r3, r2
 8015a94:	42ab      	cmp	r3, r5
 8015a96:	dc26      	bgt.n	8015ae6 <_printf_common+0x96>
 8015a98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015a9c:	6822      	ldr	r2, [r4, #0]
 8015a9e:	3b00      	subs	r3, #0
 8015aa0:	bf18      	it	ne
 8015aa2:	2301      	movne	r3, #1
 8015aa4:	0692      	lsls	r2, r2, #26
 8015aa6:	d42b      	bmi.n	8015b00 <_printf_common+0xb0>
 8015aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015aac:	4641      	mov	r1, r8
 8015aae:	4638      	mov	r0, r7
 8015ab0:	47c8      	blx	r9
 8015ab2:	3001      	adds	r0, #1
 8015ab4:	d01e      	beq.n	8015af4 <_printf_common+0xa4>
 8015ab6:	6823      	ldr	r3, [r4, #0]
 8015ab8:	6922      	ldr	r2, [r4, #16]
 8015aba:	f003 0306 	and.w	r3, r3, #6
 8015abe:	2b04      	cmp	r3, #4
 8015ac0:	bf02      	ittt	eq
 8015ac2:	68e5      	ldreq	r5, [r4, #12]
 8015ac4:	6833      	ldreq	r3, [r6, #0]
 8015ac6:	1aed      	subeq	r5, r5, r3
 8015ac8:	68a3      	ldr	r3, [r4, #8]
 8015aca:	bf0c      	ite	eq
 8015acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ad0:	2500      	movne	r5, #0
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	bfc4      	itt	gt
 8015ad6:	1a9b      	subgt	r3, r3, r2
 8015ad8:	18ed      	addgt	r5, r5, r3
 8015ada:	2600      	movs	r6, #0
 8015adc:	341a      	adds	r4, #26
 8015ade:	42b5      	cmp	r5, r6
 8015ae0:	d11a      	bne.n	8015b18 <_printf_common+0xc8>
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	e008      	b.n	8015af8 <_printf_common+0xa8>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	4652      	mov	r2, sl
 8015aea:	4641      	mov	r1, r8
 8015aec:	4638      	mov	r0, r7
 8015aee:	47c8      	blx	r9
 8015af0:	3001      	adds	r0, #1
 8015af2:	d103      	bne.n	8015afc <_printf_common+0xac>
 8015af4:	f04f 30ff 	mov.w	r0, #4294967295
 8015af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015afc:	3501      	adds	r5, #1
 8015afe:	e7c6      	b.n	8015a8e <_printf_common+0x3e>
 8015b00:	18e1      	adds	r1, r4, r3
 8015b02:	1c5a      	adds	r2, r3, #1
 8015b04:	2030      	movs	r0, #48	@ 0x30
 8015b06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015b0a:	4422      	add	r2, r4
 8015b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015b10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015b14:	3302      	adds	r3, #2
 8015b16:	e7c7      	b.n	8015aa8 <_printf_common+0x58>
 8015b18:	2301      	movs	r3, #1
 8015b1a:	4622      	mov	r2, r4
 8015b1c:	4641      	mov	r1, r8
 8015b1e:	4638      	mov	r0, r7
 8015b20:	47c8      	blx	r9
 8015b22:	3001      	adds	r0, #1
 8015b24:	d0e6      	beq.n	8015af4 <_printf_common+0xa4>
 8015b26:	3601      	adds	r6, #1
 8015b28:	e7d9      	b.n	8015ade <_printf_common+0x8e>
	...

08015b2c <_printf_i>:
 8015b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b30:	7e0f      	ldrb	r7, [r1, #24]
 8015b32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015b34:	2f78      	cmp	r7, #120	@ 0x78
 8015b36:	4691      	mov	r9, r2
 8015b38:	4680      	mov	r8, r0
 8015b3a:	460c      	mov	r4, r1
 8015b3c:	469a      	mov	sl, r3
 8015b3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b42:	d807      	bhi.n	8015b54 <_printf_i+0x28>
 8015b44:	2f62      	cmp	r7, #98	@ 0x62
 8015b46:	d80a      	bhi.n	8015b5e <_printf_i+0x32>
 8015b48:	2f00      	cmp	r7, #0
 8015b4a:	f000 80d1 	beq.w	8015cf0 <_printf_i+0x1c4>
 8015b4e:	2f58      	cmp	r7, #88	@ 0x58
 8015b50:	f000 80b8 	beq.w	8015cc4 <_printf_i+0x198>
 8015b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015b5c:	e03a      	b.n	8015bd4 <_printf_i+0xa8>
 8015b5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015b62:	2b15      	cmp	r3, #21
 8015b64:	d8f6      	bhi.n	8015b54 <_printf_i+0x28>
 8015b66:	a101      	add	r1, pc, #4	@ (adr r1, 8015b6c <_printf_i+0x40>)
 8015b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b6c:	08015bc5 	.word	0x08015bc5
 8015b70:	08015bd9 	.word	0x08015bd9
 8015b74:	08015b55 	.word	0x08015b55
 8015b78:	08015b55 	.word	0x08015b55
 8015b7c:	08015b55 	.word	0x08015b55
 8015b80:	08015b55 	.word	0x08015b55
 8015b84:	08015bd9 	.word	0x08015bd9
 8015b88:	08015b55 	.word	0x08015b55
 8015b8c:	08015b55 	.word	0x08015b55
 8015b90:	08015b55 	.word	0x08015b55
 8015b94:	08015b55 	.word	0x08015b55
 8015b98:	08015cd7 	.word	0x08015cd7
 8015b9c:	08015c03 	.word	0x08015c03
 8015ba0:	08015c91 	.word	0x08015c91
 8015ba4:	08015b55 	.word	0x08015b55
 8015ba8:	08015b55 	.word	0x08015b55
 8015bac:	08015cf9 	.word	0x08015cf9
 8015bb0:	08015b55 	.word	0x08015b55
 8015bb4:	08015c03 	.word	0x08015c03
 8015bb8:	08015b55 	.word	0x08015b55
 8015bbc:	08015b55 	.word	0x08015b55
 8015bc0:	08015c99 	.word	0x08015c99
 8015bc4:	6833      	ldr	r3, [r6, #0]
 8015bc6:	1d1a      	adds	r2, r3, #4
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	6032      	str	r2, [r6, #0]
 8015bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015bd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e09c      	b.n	8015d12 <_printf_i+0x1e6>
 8015bd8:	6833      	ldr	r3, [r6, #0]
 8015bda:	6820      	ldr	r0, [r4, #0]
 8015bdc:	1d19      	adds	r1, r3, #4
 8015bde:	6031      	str	r1, [r6, #0]
 8015be0:	0606      	lsls	r6, r0, #24
 8015be2:	d501      	bpl.n	8015be8 <_printf_i+0xbc>
 8015be4:	681d      	ldr	r5, [r3, #0]
 8015be6:	e003      	b.n	8015bf0 <_printf_i+0xc4>
 8015be8:	0645      	lsls	r5, r0, #25
 8015bea:	d5fb      	bpl.n	8015be4 <_printf_i+0xb8>
 8015bec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015bf0:	2d00      	cmp	r5, #0
 8015bf2:	da03      	bge.n	8015bfc <_printf_i+0xd0>
 8015bf4:	232d      	movs	r3, #45	@ 0x2d
 8015bf6:	426d      	negs	r5, r5
 8015bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015bfc:	4858      	ldr	r0, [pc, #352]	@ (8015d60 <_printf_i+0x234>)
 8015bfe:	230a      	movs	r3, #10
 8015c00:	e011      	b.n	8015c26 <_printf_i+0xfa>
 8015c02:	6821      	ldr	r1, [r4, #0]
 8015c04:	6833      	ldr	r3, [r6, #0]
 8015c06:	0608      	lsls	r0, r1, #24
 8015c08:	f853 5b04 	ldr.w	r5, [r3], #4
 8015c0c:	d402      	bmi.n	8015c14 <_printf_i+0xe8>
 8015c0e:	0649      	lsls	r1, r1, #25
 8015c10:	bf48      	it	mi
 8015c12:	b2ad      	uxthmi	r5, r5
 8015c14:	2f6f      	cmp	r7, #111	@ 0x6f
 8015c16:	4852      	ldr	r0, [pc, #328]	@ (8015d60 <_printf_i+0x234>)
 8015c18:	6033      	str	r3, [r6, #0]
 8015c1a:	bf14      	ite	ne
 8015c1c:	230a      	movne	r3, #10
 8015c1e:	2308      	moveq	r3, #8
 8015c20:	2100      	movs	r1, #0
 8015c22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015c26:	6866      	ldr	r6, [r4, #4]
 8015c28:	60a6      	str	r6, [r4, #8]
 8015c2a:	2e00      	cmp	r6, #0
 8015c2c:	db05      	blt.n	8015c3a <_printf_i+0x10e>
 8015c2e:	6821      	ldr	r1, [r4, #0]
 8015c30:	432e      	orrs	r6, r5
 8015c32:	f021 0104 	bic.w	r1, r1, #4
 8015c36:	6021      	str	r1, [r4, #0]
 8015c38:	d04b      	beq.n	8015cd2 <_printf_i+0x1a6>
 8015c3a:	4616      	mov	r6, r2
 8015c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c40:	fb03 5711 	mls	r7, r3, r1, r5
 8015c44:	5dc7      	ldrb	r7, [r0, r7]
 8015c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c4a:	462f      	mov	r7, r5
 8015c4c:	42bb      	cmp	r3, r7
 8015c4e:	460d      	mov	r5, r1
 8015c50:	d9f4      	bls.n	8015c3c <_printf_i+0x110>
 8015c52:	2b08      	cmp	r3, #8
 8015c54:	d10b      	bne.n	8015c6e <_printf_i+0x142>
 8015c56:	6823      	ldr	r3, [r4, #0]
 8015c58:	07df      	lsls	r7, r3, #31
 8015c5a:	d508      	bpl.n	8015c6e <_printf_i+0x142>
 8015c5c:	6923      	ldr	r3, [r4, #16]
 8015c5e:	6861      	ldr	r1, [r4, #4]
 8015c60:	4299      	cmp	r1, r3
 8015c62:	bfde      	ittt	le
 8015c64:	2330      	movle	r3, #48	@ 0x30
 8015c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c6e:	1b92      	subs	r2, r2, r6
 8015c70:	6122      	str	r2, [r4, #16]
 8015c72:	f8cd a000 	str.w	sl, [sp]
 8015c76:	464b      	mov	r3, r9
 8015c78:	aa03      	add	r2, sp, #12
 8015c7a:	4621      	mov	r1, r4
 8015c7c:	4640      	mov	r0, r8
 8015c7e:	f7ff fee7 	bl	8015a50 <_printf_common>
 8015c82:	3001      	adds	r0, #1
 8015c84:	d14a      	bne.n	8015d1c <_printf_i+0x1f0>
 8015c86:	f04f 30ff 	mov.w	r0, #4294967295
 8015c8a:	b004      	add	sp, #16
 8015c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c90:	6823      	ldr	r3, [r4, #0]
 8015c92:	f043 0320 	orr.w	r3, r3, #32
 8015c96:	6023      	str	r3, [r4, #0]
 8015c98:	4832      	ldr	r0, [pc, #200]	@ (8015d64 <_printf_i+0x238>)
 8015c9a:	2778      	movs	r7, #120	@ 0x78
 8015c9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015ca0:	6823      	ldr	r3, [r4, #0]
 8015ca2:	6831      	ldr	r1, [r6, #0]
 8015ca4:	061f      	lsls	r7, r3, #24
 8015ca6:	f851 5b04 	ldr.w	r5, [r1], #4
 8015caa:	d402      	bmi.n	8015cb2 <_printf_i+0x186>
 8015cac:	065f      	lsls	r7, r3, #25
 8015cae:	bf48      	it	mi
 8015cb0:	b2ad      	uxthmi	r5, r5
 8015cb2:	6031      	str	r1, [r6, #0]
 8015cb4:	07d9      	lsls	r1, r3, #31
 8015cb6:	bf44      	itt	mi
 8015cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8015cbc:	6023      	strmi	r3, [r4, #0]
 8015cbe:	b11d      	cbz	r5, 8015cc8 <_printf_i+0x19c>
 8015cc0:	2310      	movs	r3, #16
 8015cc2:	e7ad      	b.n	8015c20 <_printf_i+0xf4>
 8015cc4:	4826      	ldr	r0, [pc, #152]	@ (8015d60 <_printf_i+0x234>)
 8015cc6:	e7e9      	b.n	8015c9c <_printf_i+0x170>
 8015cc8:	6823      	ldr	r3, [r4, #0]
 8015cca:	f023 0320 	bic.w	r3, r3, #32
 8015cce:	6023      	str	r3, [r4, #0]
 8015cd0:	e7f6      	b.n	8015cc0 <_printf_i+0x194>
 8015cd2:	4616      	mov	r6, r2
 8015cd4:	e7bd      	b.n	8015c52 <_printf_i+0x126>
 8015cd6:	6833      	ldr	r3, [r6, #0]
 8015cd8:	6825      	ldr	r5, [r4, #0]
 8015cda:	6961      	ldr	r1, [r4, #20]
 8015cdc:	1d18      	adds	r0, r3, #4
 8015cde:	6030      	str	r0, [r6, #0]
 8015ce0:	062e      	lsls	r6, r5, #24
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	d501      	bpl.n	8015cea <_printf_i+0x1be>
 8015ce6:	6019      	str	r1, [r3, #0]
 8015ce8:	e002      	b.n	8015cf0 <_printf_i+0x1c4>
 8015cea:	0668      	lsls	r0, r5, #25
 8015cec:	d5fb      	bpl.n	8015ce6 <_printf_i+0x1ba>
 8015cee:	8019      	strh	r1, [r3, #0]
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	6123      	str	r3, [r4, #16]
 8015cf4:	4616      	mov	r6, r2
 8015cf6:	e7bc      	b.n	8015c72 <_printf_i+0x146>
 8015cf8:	6833      	ldr	r3, [r6, #0]
 8015cfa:	1d1a      	adds	r2, r3, #4
 8015cfc:	6032      	str	r2, [r6, #0]
 8015cfe:	681e      	ldr	r6, [r3, #0]
 8015d00:	6862      	ldr	r2, [r4, #4]
 8015d02:	2100      	movs	r1, #0
 8015d04:	4630      	mov	r0, r6
 8015d06:	f7ea faf3 	bl	80002f0 <memchr>
 8015d0a:	b108      	cbz	r0, 8015d10 <_printf_i+0x1e4>
 8015d0c:	1b80      	subs	r0, r0, r6
 8015d0e:	6060      	str	r0, [r4, #4]
 8015d10:	6863      	ldr	r3, [r4, #4]
 8015d12:	6123      	str	r3, [r4, #16]
 8015d14:	2300      	movs	r3, #0
 8015d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015d1a:	e7aa      	b.n	8015c72 <_printf_i+0x146>
 8015d1c:	6923      	ldr	r3, [r4, #16]
 8015d1e:	4632      	mov	r2, r6
 8015d20:	4649      	mov	r1, r9
 8015d22:	4640      	mov	r0, r8
 8015d24:	47d0      	blx	sl
 8015d26:	3001      	adds	r0, #1
 8015d28:	d0ad      	beq.n	8015c86 <_printf_i+0x15a>
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	079b      	lsls	r3, r3, #30
 8015d2e:	d413      	bmi.n	8015d58 <_printf_i+0x22c>
 8015d30:	68e0      	ldr	r0, [r4, #12]
 8015d32:	9b03      	ldr	r3, [sp, #12]
 8015d34:	4298      	cmp	r0, r3
 8015d36:	bfb8      	it	lt
 8015d38:	4618      	movlt	r0, r3
 8015d3a:	e7a6      	b.n	8015c8a <_printf_i+0x15e>
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	4632      	mov	r2, r6
 8015d40:	4649      	mov	r1, r9
 8015d42:	4640      	mov	r0, r8
 8015d44:	47d0      	blx	sl
 8015d46:	3001      	adds	r0, #1
 8015d48:	d09d      	beq.n	8015c86 <_printf_i+0x15a>
 8015d4a:	3501      	adds	r5, #1
 8015d4c:	68e3      	ldr	r3, [r4, #12]
 8015d4e:	9903      	ldr	r1, [sp, #12]
 8015d50:	1a5b      	subs	r3, r3, r1
 8015d52:	42ab      	cmp	r3, r5
 8015d54:	dcf2      	bgt.n	8015d3c <_printf_i+0x210>
 8015d56:	e7eb      	b.n	8015d30 <_printf_i+0x204>
 8015d58:	2500      	movs	r5, #0
 8015d5a:	f104 0619 	add.w	r6, r4, #25
 8015d5e:	e7f5      	b.n	8015d4c <_printf_i+0x220>
 8015d60:	080162a9 	.word	0x080162a9
 8015d64:	080162ba 	.word	0x080162ba

08015d68 <memmove>:
 8015d68:	4288      	cmp	r0, r1
 8015d6a:	b510      	push	{r4, lr}
 8015d6c:	eb01 0402 	add.w	r4, r1, r2
 8015d70:	d902      	bls.n	8015d78 <memmove+0x10>
 8015d72:	4284      	cmp	r4, r0
 8015d74:	4623      	mov	r3, r4
 8015d76:	d807      	bhi.n	8015d88 <memmove+0x20>
 8015d78:	1e43      	subs	r3, r0, #1
 8015d7a:	42a1      	cmp	r1, r4
 8015d7c:	d008      	beq.n	8015d90 <memmove+0x28>
 8015d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d86:	e7f8      	b.n	8015d7a <memmove+0x12>
 8015d88:	4402      	add	r2, r0
 8015d8a:	4601      	mov	r1, r0
 8015d8c:	428a      	cmp	r2, r1
 8015d8e:	d100      	bne.n	8015d92 <memmove+0x2a>
 8015d90:	bd10      	pop	{r4, pc}
 8015d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d9a:	e7f7      	b.n	8015d8c <memmove+0x24>

08015d9c <_sbrk_r>:
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4d06      	ldr	r5, [pc, #24]	@ (8015db8 <_sbrk_r+0x1c>)
 8015da0:	2300      	movs	r3, #0
 8015da2:	4604      	mov	r4, r0
 8015da4:	4608      	mov	r0, r1
 8015da6:	602b      	str	r3, [r5, #0]
 8015da8:	f7ec f982 	bl	80020b0 <_sbrk>
 8015dac:	1c43      	adds	r3, r0, #1
 8015dae:	d102      	bne.n	8015db6 <_sbrk_r+0x1a>
 8015db0:	682b      	ldr	r3, [r5, #0]
 8015db2:	b103      	cbz	r3, 8015db6 <_sbrk_r+0x1a>
 8015db4:	6023      	str	r3, [r4, #0]
 8015db6:	bd38      	pop	{r3, r4, r5, pc}
 8015db8:	24014b1c 	.word	0x24014b1c

08015dbc <memcpy>:
 8015dbc:	440a      	add	r2, r1
 8015dbe:	4291      	cmp	r1, r2
 8015dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8015dc4:	d100      	bne.n	8015dc8 <memcpy+0xc>
 8015dc6:	4770      	bx	lr
 8015dc8:	b510      	push	{r4, lr}
 8015dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dd2:	4291      	cmp	r1, r2
 8015dd4:	d1f9      	bne.n	8015dca <memcpy+0xe>
 8015dd6:	bd10      	pop	{r4, pc}

08015dd8 <_realloc_r>:
 8015dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ddc:	4607      	mov	r7, r0
 8015dde:	4614      	mov	r4, r2
 8015de0:	460d      	mov	r5, r1
 8015de2:	b921      	cbnz	r1, 8015dee <_realloc_r+0x16>
 8015de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015de8:	4611      	mov	r1, r2
 8015dea:	f7ff bc4d 	b.w	8015688 <_malloc_r>
 8015dee:	b92a      	cbnz	r2, 8015dfc <_realloc_r+0x24>
 8015df0:	f7ff fbde 	bl	80155b0 <_free_r>
 8015df4:	4625      	mov	r5, r4
 8015df6:	4628      	mov	r0, r5
 8015df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dfc:	f000 f81a 	bl	8015e34 <_malloc_usable_size_r>
 8015e00:	4284      	cmp	r4, r0
 8015e02:	4606      	mov	r6, r0
 8015e04:	d802      	bhi.n	8015e0c <_realloc_r+0x34>
 8015e06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e0a:	d8f4      	bhi.n	8015df6 <_realloc_r+0x1e>
 8015e0c:	4621      	mov	r1, r4
 8015e0e:	4638      	mov	r0, r7
 8015e10:	f7ff fc3a 	bl	8015688 <_malloc_r>
 8015e14:	4680      	mov	r8, r0
 8015e16:	b908      	cbnz	r0, 8015e1c <_realloc_r+0x44>
 8015e18:	4645      	mov	r5, r8
 8015e1a:	e7ec      	b.n	8015df6 <_realloc_r+0x1e>
 8015e1c:	42b4      	cmp	r4, r6
 8015e1e:	4622      	mov	r2, r4
 8015e20:	4629      	mov	r1, r5
 8015e22:	bf28      	it	cs
 8015e24:	4632      	movcs	r2, r6
 8015e26:	f7ff ffc9 	bl	8015dbc <memcpy>
 8015e2a:	4629      	mov	r1, r5
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	f7ff fbbf 	bl	80155b0 <_free_r>
 8015e32:	e7f1      	b.n	8015e18 <_realloc_r+0x40>

08015e34 <_malloc_usable_size_r>:
 8015e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e38:	1f18      	subs	r0, r3, #4
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	bfbc      	itt	lt
 8015e3e:	580b      	ldrlt	r3, [r1, r0]
 8015e40:	18c0      	addlt	r0, r0, r3
 8015e42:	4770      	bx	lr

08015e44 <_init>:
 8015e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e46:	bf00      	nop
 8015e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e4a:	bc08      	pop	{r3}
 8015e4c:	469e      	mov	lr, r3
 8015e4e:	4770      	bx	lr

08015e50 <_fini>:
 8015e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e52:	bf00      	nop
 8015e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e56:	bc08      	pop	{r3}
 8015e58:	469e      	mov	lr, r3
 8015e5a:	4770      	bx	lr
