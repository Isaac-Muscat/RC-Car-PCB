
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126a8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08012948  08012948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012dac  08012dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012db4  08012db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012db8  08012db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08012dbc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000149d4  24000158  08012f14  00014158  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24014b2c  08012f14  00014b2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00014158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd11  00000000  00000000  00014186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050d2  00000000  00000000  0003fe97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020b0  00000000  00000000  00044f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001989  00000000  00000000  00047020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ca4d  00000000  00000000  000489a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e7f2  00000000  00000000  000853f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170af3  00000000  00000000  000b3be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002246db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009200  00000000  00000000  00224720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  0022d920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012930 	.word	0x08012930

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08012930 	.word	0x08012930

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0b2      	sub	sp, #200	@ 0xc8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fdfd 	bl	80012c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fca3 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f87b 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fc77 	bl	8000fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d2:	f000 fc35 	bl	8000f40 <MX_DMA_Init>
  MX_MDMA_Init();
 80006d6:	f000 fc53 	bl	8000f80 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 80006da:	f000 fbe5 	bl	8000ea8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006de:	f010 ff37 	bl	8011550 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 80006e2:	f000 f8e9 	bl	80008b8 <MX_DCMI_Init>
  MX_I2C2_Init();
 80006e6:	f000 f91f 	bl	8000928 <MX_I2C2_Init>
  MX_TIM14_Init();
 80006ea:	f000 fb91 	bl	8000e10 <MX_TIM14_Init>
  MX_TIM2_Init();
 80006ee:	f000 fa53 	bl	8000b98 <MX_TIM2_Init>
  MX_TIM4_Init();
 80006f2:	f000 fb27 	bl	8000d44 <MX_TIM4_Init>
  MX_TIM1_Init();
 80006f6:	f000 f9c1 	bl	8000a7c <MX_TIM1_Init>
  MX_TIM3_Init();
 80006fa:	f000 fabd 	bl	8000c78 <MX_TIM3_Init>
  MX_JPEG_Init();
 80006fe:	f000 f953 	bl	80009a8 <MX_JPEG_Init>
  MX_SPI2_Init();
 8000702:	f000 f965 	bl	80009d0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // ------------------------------------------------------------ PROGRAM THE XBEE -- //
  uint8_t at_buffer[100] = {0};	// Reserve 20 bytes for writing AT commands
 8000706:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800070a:	2264      	movs	r2, #100	@ 0x64
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f011 fc90 	bl	8012034 <memset>
  uint8_t usb_msg[100] = {0};	// Reserve 20 bytes for writing AT commands
 8000714:	463b      	mov	r3, r7
 8000716:	2264      	movs	r2, #100	@ 0x64
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f011 fc8a 	bl	8012034 <memset>

  // Enter command mode
  HAL_Delay(2000);
 8000720:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000724:	f001 fd06 	bl	8002134 <HAL_Delay>
  sprintf(at_buffer, "+++");
 8000728:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800072c:	4921      	ldr	r1, [pc, #132]	@ (80007b4 <main+0xf8>)
 800072e:	4618      	mov	r0, r3
 8000730:	f011 fc5e 	bl	8011ff0 <siprintf>
  HAL_UART_Transmit(&huart1, at_buffer, strlen(at_buffer), 1000);
 8000734:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fdd1 	bl	80002e0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074a:	481b      	ldr	r0, [pc, #108]	@ (80007b8 <main+0xfc>)
 800074c:	f00c f9ca 	bl	800cae4 <HAL_UART_Transmit>
  WriteDebug(at_buffer, strlen(at_buffer));
 8000750:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fdc3 	bl	80002e0 <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	b2da      	uxtb	r2, r3
 800075e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fce3 	bl	8001130 <WriteDebug>
  if (HAL_UART_Receive(&huart1, at_buffer, 10, 5000)) {
 800076a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800076e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000772:	220a      	movs	r2, #10
 8000774:	4810      	ldr	r0, [pc, #64]	@ (80007b8 <main+0xfc>)
 8000776:	f00c fa43 	bl	800cc00 <HAL_UART_Receive>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <main+0xd0>
  	  sprintf(usb_msg, " ERROR: SH");
 8000780:	463b      	mov	r3, r7
 8000782:	490e      	ldr	r1, [pc, #56]	@ (80007bc <main+0x100>)
 8000784:	4618      	mov	r0, r3
 8000786:	f011 fc33 	bl	8011ff0 <siprintf>
 800078a:	e006      	b.n	800079a <main+0xde>
    } else {
  	  sprintf(usb_msg, " %s", at_buffer);
 800078c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000790:	463b      	mov	r3, r7
 8000792:	490b      	ldr	r1, [pc, #44]	@ (80007c0 <main+0x104>)
 8000794:	4618      	mov	r0, r3
 8000796:	f011 fc2b 	bl	8011ff0 <siprintf>
    }
  WriteDebug(usb_msg, strlen(usb_msg));
 800079a:	463b      	mov	r3, r7
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd9f 	bl	80002e0 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	463b      	mov	r3, r7
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fcc0 	bl	8001130 <WriteDebug>

  while (1) {}
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <main+0xf4>
 80007b4:	08012948 	.word	0x08012948
 80007b8:	240005c4 	.word	0x240005c4
 80007bc:	0801294c 	.word	0x0801294c
 80007c0:	08012958 	.word	0x08012958

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	@ 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ce:	224c      	movs	r2, #76	@ 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f011 fc2e 	bl	8012034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f011 fc28 	bl	8012034 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f008 f9f7 	bl	8008bd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b30      	ldr	r3, [pc, #192]	@ (80008b0 <SystemClock_Config+0xec>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f2:	4a2f      	ldr	r2, [pc, #188]	@ (80008b0 <SystemClock_Config+0xec>)
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007fa:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <SystemClock_Config+0xec>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <SystemClock_Config+0xf0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a2a      	ldr	r2, [pc, #168]	@ (80008b4 <SystemClock_Config+0xf0>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <SystemClock_Config+0xf0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081c:	bf00      	nop
 800081e:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <SystemClock_Config+0xf0>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800082a:	d1f8      	bne.n	800081e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000842:	2318      	movs	r3, #24
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800084a:	2306      	movs	r3, #6
 800084c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f008 fa02 	bl	8008c6c <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800086e:	f000 fd53 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	@ 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	@ 0x40
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2102      	movs	r1, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f008 fe41 	bl	8009520 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008a4:	f000 fd38 	bl	8001318 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	@ 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008be:	4a19      	ldr	r2, [pc, #100]	@ (8000924 <MX_DCMI_Init+0x6c>)
 80008c0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALTERNATE_2;
 80008fc:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_DCMI_Init+0x68>)
 80008fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_DCMI_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_DCMI_Init+0x68>)
 800090c:	f001 fdca 	bl	80024a4 <HAL_DCMI_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DCMI_Init+0x62>
  {
    Error_Handler();
 8000916:	f000 fcff 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000174 	.word	0x24000174
 8000924:	48020000 	.word	0x48020000

08000928 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_I2C2_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_I2C2_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_I2C2_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <MX_I2C2_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_I2C2_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_I2C2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_I2C2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_I2C2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_I2C2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_I2C2_Init+0x74>)
 8000964:	f003 ffc0 	bl	80048e8 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 fcd3 	bl	8001318 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <MX_I2C2_Init+0x74>)
 8000976:	f004 ff5c 	bl	8005832 <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 fcca 	bl	8001318 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_I2C2_Init+0x74>)
 8000988:	f004 ff9e 	bl	80058c8 <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 fcc1 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2400023c 	.word	0x2400023c
 80009a0:	40005800 	.word	0x40005800
 80009a4:	00c0eaff 	.word	0x00c0eaff

080009a8 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_JPEG_Init+0x20>)
 80009ae:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <MX_JPEG_Init+0x24>)
 80009b0:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_JPEG_Init+0x20>)
 80009b4:	f004 ffd4 	bl	8005960 <HAL_JPEG_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80009be:	f000 fcab 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000290 	.word	0x24000290
 80009cc:	52003000 	.word	0x52003000

080009d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009d6:	4a28      	ldr	r2, [pc, #160]	@ (8000a78 <MX_SPI2_Init+0xa8>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009ea:	2203      	movs	r2, #3
 80009ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 80009fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_SPI2_Init+0xa4>)
 8000a60:	f00a ff16 	bl	800b890 <HAL_SPI_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000a6a:	f000 fc55 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	240003c0 	.word	0x240003c0
 8000a78:	40003800 	.word	0x40003800

08000a7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b096      	sub	sp, #88	@ 0x58
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	222c      	movs	r2, #44	@ 0x2c
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f011 fac3 	bl	8012034 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aae:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000ab0:	4a38      	ldr	r2, [pc, #224]	@ (8000b94 <MX_TIM1_Init+0x118>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000ac0:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000ac2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ace:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ada:	482d      	ldr	r0, [pc, #180]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000adc:	f00b f86e 	bl	800bbbc <HAL_TIM_PWM_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ae6:	f000 fc17 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4824      	ldr	r0, [pc, #144]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000afe:	f00b fe77 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b08:	f000 fc06 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0c:	2360      	movs	r3, #96	@ 0x60
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b28:	220c      	movs	r2, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4818      	ldr	r0, [pc, #96]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000b2e:	f00b f9a3 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000b38:	f000 fbee 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000b72:	f00b fecb 	bl	800c90c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000b7c:	f000 fbcc 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <MX_TIM1_Init+0x114>)
 8000b82:	f000 ff63 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3758      	adds	r7, #88	@ 0x58
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000448 	.word	0x24000448
 8000b94:	40010000 	.word	0x40010000

08000b98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000bd2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be4:	4823      	ldr	r0, [pc, #140]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000be6:	f00a ffe9 	bl	800bbbc <HAL_TIM_PWM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 fb92 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	481c      	ldr	r0, [pc, #112]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000c04:	f00b fdf4 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c0e:	f000 fb83 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c12:	2360      	movs	r3, #96	@ 0x60
 8000c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	4619      	mov	r1, r3
 8000c28:	4812      	ldr	r0, [pc, #72]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000c2a:	f00b f925 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000c34:	f000 fb70 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000c40:	f00b f91a 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c4a:	f000 fb65 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2208      	movs	r2, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000c56:	f00b f90f 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000c60:	f000 fb5a 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <MX_TIM2_Init+0xdc>)
 8000c66:	f000 fef1 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	@ 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	24000494 	.word	0x24000494

08000c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <MX_TIM3_Init+0xc8>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000cae:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000cb0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cc2:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000cc4:	f00a ff7a 	bl	800bbbc <HAL_TIM_PWM_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000cce:	f000 fb23 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4816      	ldr	r0, [pc, #88]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000ce2:	f00b fd85 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cec:	f000 fb14 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf0:	2360      	movs	r3, #96	@ 0x60
 8000cf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	2208      	movs	r2, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000d08:	f00b f8b6 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d12:	f000 fb01 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	220c      	movs	r2, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000d1e:	f00b f8ab 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d28:	f000 faf6 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM3_Init+0xc4>)
 8000d2e:	f000 fe8d 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240004e0 	.word	0x240004e0
 8000d40:	40000400 	.word	0x40000400

08000d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d6a:	4a28      	ldr	r2, [pc, #160]	@ (8000e0c <MX_TIM4_Init+0xc8>)
 8000d6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d74:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d7c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d8e:	481e      	ldr	r0, [pc, #120]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000d90:	f00a ff14 	bl	800bbbc <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d9a:	f000 fabd 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000dae:	f00b fd1f 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000db8:	f000 faae 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	@ 0x60
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2208      	movs	r2, #8
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000dd4:	f00b f850 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000dde:	f000 fa9b 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	220c      	movs	r2, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000dea:	f00b f845 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000df4:	f000 fa90 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000df8:	4803      	ldr	r0, [pc, #12]	@ (8000e08 <MX_TIM4_Init+0xc4>)
 8000dfa:	f000 fe27 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2400052c 	.word	0x2400052c
 8000e0c:	40000800 	.word	0x40000800

08000e10 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea4 <MX_TIM14_Init+0x94>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e48:	2280      	movs	r2, #128	@ 0x80
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e4c:	4814      	ldr	r0, [pc, #80]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e4e:	f00a fe5e 	bl	800bb0e <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 fa5e 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000e5c:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e5e:	f00a fead 	bl	800bbbc <HAL_TIM_PWM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8000e68:	f000 fa56 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	2360      	movs	r3, #96	@ 0x60
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8000e70:	2303      	movs	r3, #3
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e84:	f00a fff8 	bl	800be78 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8000e8e:	f000 fa43 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000e92:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <MX_TIM14_Init+0x90>)
 8000e94:	f000 fdda 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	24000578 	.word	0x24000578
 8000ea4:	40002000 	.word	0x40002000

08000ea8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eac:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eae:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <MX_USART1_UART_Init+0x94>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000ef2:	f00b fda7 	bl	800ca44 <HAL_UART_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000efc:	f000 fa0c 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000f04:	f00c ff05 	bl	800dd12 <HAL_UARTEx_SetTxFifoThreshold>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f0e:	f000 fa03 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000f16:	f00c ff3a 	bl	800dd8e <HAL_UARTEx_SetRxFifoThreshold>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f20:	f000 f9fa 	bl	8001318 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <MX_USART1_UART_Init+0x90>)
 8000f26:	f00c febb 	bl	800dca0 <HAL_UARTEx_DisableFifoMode>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f000 f9f2 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	240005c4 	.word	0x240005c4
 8000f3c:	40011000 	.word	0x40011000

08000f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f46:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <MX_DMA_Init+0x3c>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <MX_DMA_Init+0x3c>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_DMA_Init+0x3c>)
 8000f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	200b      	movs	r0, #11
 8000f6a:	f001 f9ee 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f6e:	200b      	movs	r0, #11
 8000f70:	f001 fa05 	bl	800237e <HAL_NVIC_EnableIRQ>

}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	58024400 	.word	0x58024400

08000f80 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <MX_MDMA_Init+0x3c>)
 8000f88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <MX_MDMA_Init+0x3c>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_MDMA_Init+0x3c>)
 8000f98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	207a      	movs	r0, #122	@ 0x7a
 8000faa:	f001 f9ce 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000fae:	207a      	movs	r0, #122	@ 0x7a
 8000fb0:	f001 f9e5 	bl	800237e <HAL_NVIC_EnableIRQ>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	@ 0x30
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	4b52      	ldr	r3, [pc, #328]	@ (8001120 <MX_GPIO_Init+0x160>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fdc:	4a50      	ldr	r2, [pc, #320]	@ (8001120 <MX_GPIO_Init+0x160>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8001120 <MX_GPIO_Init+0x160>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8001120 <MX_GPIO_Init+0x160>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	4a49      	ldr	r2, [pc, #292]	@ (8001120 <MX_GPIO_Init+0x160>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001004:	4b46      	ldr	r3, [pc, #280]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001012:	4b43      	ldr	r3, [pc, #268]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a41      	ldr	r2, [pc, #260]	@ (8001120 <MX_GPIO_Init+0x160>)
 800101a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b3f      	ldr	r3, [pc, #252]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001036:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001040:	4b37      	ldr	r3, [pc, #220]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a32      	ldr	r2, [pc, #200]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106c:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <MX_GPIO_Init+0x160>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <MX_GPIO_Init+0x160>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <MX_GPIO_Init+0x160>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001090:	4824      	ldr	r0, [pc, #144]	@ (8001124 <MX_GPIO_Init+0x164>)
 8001092:	f003 fc0f 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2108      	movs	r1, #8
 800109a:	4823      	ldr	r0, [pc, #140]	@ (8001128 <MX_GPIO_Init+0x168>)
 800109c:	f003 fc0a 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	4821      	ldr	r0, [pc, #132]	@ (800112c <MX_GPIO_Init+0x16c>)
 80010a6:	f003 fc05 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4818      	ldr	r0, [pc, #96]	@ (8001124 <MX_GPIO_Init+0x164>)
 80010c4:	f003 fa46 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4812      	ldr	r0, [pc, #72]	@ (8001124 <MX_GPIO_Init+0x164>)
 80010dc:	f003 fa3a 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e0:	2308      	movs	r3, #8
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <MX_GPIO_Init+0x168>)
 80010f8:	f003 fa2c 	bl	8004554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_GPIO_Init+0x16c>)
 8001114:	f003 fa1e 	bl	8004554 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	@ 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400
 8001124:	58020800 	.word	0x58020800
 8001128:	58020000 	.word	0x58020000
 800112c:	58020c00 	.word	0x58020c00

08001130 <WriteDebug>:

/* USER CODE BEGIN 4 */

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	4619      	mov	r1, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f010 fad5 	bl	80116f0 <CDC_Transmit_FS>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <GenerateJPEGMCUBlock>:

	  return HAL_OK;
}

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
	if (jpeg_block >= 600) { return 1; }
 8001156:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <GenerateJPEGMCUBlock+0xc0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800115e:	d301      	bcc.n	8001164 <GenerateJPEGMCUBlock+0x14>
 8001160:	2301      	movs	r3, #1
 8001162:	e04e      	b.n	8001202 <GenerateJPEGMCUBlock+0xb2>
	int xStart = (jpeg_block % 40) * 8;
 8001164:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <GenerateJPEGMCUBlock+0xc0>)
 8001166:	6819      	ldr	r1, [r3, #0]
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <GenerateJPEGMCUBlock+0xc4>)
 800116a:	fba3 2301 	umull	r2, r3, r3, r1
 800116e:	095a      	lsrs	r2, r3, #5
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	1aca      	subs	r2, r1, r3
 800117a:	00d3      	lsls	r3, r2, #3
 800117c:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / 40) * 8;
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <GenerateJPEGMCUBlock+0xc0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a24      	ldr	r2, [pc, #144]	@ (8001214 <GenerateJPEGMCUBlock+0xc4>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	607b      	str	r3, [r7, #4]
	int i = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	e029      	b.n	80011ec <GenerateJPEGMCUBlock+0x9c>
		for (int x = xStart; x < xStart + 8; x++) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e01e      	b.n	80011dc <GenerateJPEGMCUBlock+0x8c>
			// Pad to 8x8
			if (x >= CAM_WIDTH) {
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80011a4:	dd05      	ble.n	80011b2 <GenerateJPEGMCUBlock+0x62>
				jpeg_mcu[i] = 0x00;
 80011a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001218 <GenerateJPEGMCUBlock+0xc8>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	4413      	add	r3, r2
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e00e      	b.n	80011d0 <GenerateJPEGMCUBlock+0x80>
			} else {
				jpeg_mcu[i] = camera_mem[x + y * CAM_WIDTH];
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	019a      	lsls	r2, r3, #6
 80011bc:	1ad2      	subs	r2, r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <GenerateJPEGMCUBlock+0xcc>)
 80011c4:	5cd1      	ldrb	r1, [r2, r3]
 80011c6:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <GenerateJPEGMCUBlock+0xc8>)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	4413      	add	r3, r2
 80011cc:	460a      	mov	r2, r1
 80011ce:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3307      	adds	r3, #7
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dddb      	ble.n	800119e <GenerateJPEGMCUBlock+0x4e>
	for (int y = yStart; y < yStart + 8; y++) {
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	3301      	adds	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3307      	adds	r3, #7
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	ddd0      	ble.n	8001198 <GenerateJPEGMCUBlock+0x48>
		}
	}
	jpeg_block++;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <GenerateJPEGMCUBlock+0xc0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <GenerateJPEGMCUBlock+0xc0>)
 80011fe:	6013      	str	r3, [r2, #0]
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	24009a44 	.word	0x24009a44
 8001214:	cccccccd 	.word	0xcccccccd
 8001218:	24009a04 	.word	0x24009a04
 800121c:	2400065c 	.word	0x2400065c

08001220 <HAL_JPEG_GetDataCallback>:

// OVERRIDE THE JPEG CALLBACKS
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	//	sprintf(usb_msg, "JPEG: Block: %d\r\n", jpeg_block);
	//	CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//}

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 800122a:	f7ff ff91 	bl	8001150 <GenerateJPEGMCUBlock>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_JPEG_GetDataCallback+0x22>
		// ERROR - recover JPEG peripheral by restarting
		jpeg_ready = 1;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <HAL_JPEG_GetDataCallback+0x34>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
		//jpeg_size = 0;
		jpeg_block = 0;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <HAL_JPEG_GetDataCallback+0x38>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
	}
	else {
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
	//HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_INPUT);
}
 8001240:	e004      	b.n	800124c <HAL_JPEG_GetDataCallback+0x2c>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001242:	2240      	movs	r2, #64	@ 0x40
 8001244:	4905      	ldr	r1, [pc, #20]	@ (800125c <HAL_JPEG_GetDataCallback+0x3c>)
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f004 fcf9 	bl	8005c3e <HAL_JPEG_ConfigInputBuffer>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24000000 	.word	0x24000000
 8001258:	24009a44 	.word	0x24009a44
 800125c:	24009a04 	.word	0x24009a04

08001260 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
	// Setup new output buffer loc
	jpeg_size += JPEG_OUTBUF_SIZE;
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_JPEG_DataReadyCallback+0x30>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3380      	adds	r3, #128	@ 0x80
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_JPEG_DataReadyCallback+0x30>)
 8001274:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_JPEG_DataReadyCallback+0x30>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <HAL_JPEG_DataReadyCallback+0x34>)
 800127c:	4413      	add	r3, r2
 800127e:	2280      	movs	r2, #128	@ 0x80
 8001280:	4619      	mov	r1, r3
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f004 fced 	bl	8005c62 <HAL_JPEG_ConfigOutputBuffer>
	// Debug MSG
	//uint8_t usb_msg[100] = {0};
	//sprintf(usb_msg, "JPEG: DataReady - output: %d\r\n", jpeg_size);
	//CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24012df0 	.word	0x24012df0
 8001294:	24009a48 	.word	0x24009a48

08001298 <HAL_JPEG_EncodeCpltCallback>:

void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	jpeg_ready = 1;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_JPEG_EncodeCpltCallback+0x20>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_JPEG_EncodeCpltCallback+0x24>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
	//uint8_t usb_msg[100] = {0};
	//sprintf(usb_msg, "JPEG: Finished encode\r\n");
	//CDC_Transmit_FS(usb_msg, strlen(usb_msg));
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	24000000 	.word	0x24000000
 80012bc:	24009a44 	.word	0x24009a44

080012c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012d2:	f001 f86f 	bl	80023b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012d6:	2301      	movs	r3, #1
 80012d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012da:	2300      	movs	r3, #0
 80012dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012e2:	231f      	movs	r3, #31
 80012e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012e6:	2387      	movs	r3, #135	@ 0x87
 80012e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012ee:	2300      	movs	r3, #0
 80012f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012f2:	2301      	movs	r3, #1
 80012f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f88d 	bl	8002424 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800130a:	2004      	movs	r0, #4
 800130c:	f001 f86a 	bl	80023e4 <HAL_MPU_Enable>

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <Error_Handler+0x8>

08001324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_MspInit+0x30>)
 800132c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001330:	4a08      	ldr	r2, [pc, #32]	@ (8001354 <HAL_MspInit+0x30>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_MspInit+0x30>)
 800133c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	58024400 	.word	0x58024400

08001358 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	@ 0x38
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a79      	ldr	r2, [pc, #484]	@ (800155c <HAL_DCMI_MspInit+0x204>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f040 80eb 	bne.w	8001552 <HAL_DCMI_MspInit+0x1fa>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800137c:	4b78      	ldr	r3, [pc, #480]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 800137e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001382:	4a77      	ldr	r2, [pc, #476]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800138c:	4b74      	ldr	r3, [pc, #464]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 800138e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	623b      	str	r3, [r7, #32]
 8001398:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4b71      	ldr	r3, [pc, #452]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a0:	4a6f      	ldr	r2, [pc, #444]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b69      	ldr	r3, [pc, #420]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013be:	4a68      	ldr	r2, [pc, #416]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c8:	4b65      	ldr	r3, [pc, #404]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b62      	ldr	r3, [pc, #392]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a60      	ldr	r2, [pc, #384]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	4a59      	ldr	r2, [pc, #356]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001404:	4b56      	ldr	r3, [pc, #344]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b53      	ldr	r3, [pc, #332]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	4a51      	ldr	r2, [pc, #324]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001422:	4b4f      	ldr	r3, [pc, #316]	@ (8001560 <HAL_DCMI_MspInit+0x208>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 8001430:	2373      	movs	r3, #115	@ 0x73
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001440:	230d      	movs	r3, #13
 8001442:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4846      	ldr	r0, [pc, #280]	@ (8001564 <HAL_DCMI_MspInit+0x20c>)
 800144c:	f003 f882 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001450:	2350      	movs	r3, #80	@ 0x50
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001460:	230d      	movs	r3, #13
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	483f      	ldr	r0, [pc, #252]	@ (8001568 <HAL_DCMI_MspInit+0x210>)
 800146c:	f003 f872 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	@ 0xc0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001480:	230d      	movs	r3, #13
 8001482:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4838      	ldr	r0, [pc, #224]	@ (800156c <HAL_DCMI_MspInit+0x214>)
 800148c:	f003 f862 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001490:	2308      	movs	r3, #8
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014a0:	230d      	movs	r3, #13
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4831      	ldr	r0, [pc, #196]	@ (8001570 <HAL_DCMI_MspInit+0x218>)
 80014ac:	f003 f852 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014c0:	230d      	movs	r3, #13
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	482a      	ldr	r0, [pc, #168]	@ (8001574 <HAL_DCMI_MspInit+0x21c>)
 80014cc:	f003 f842 	bl	8004554 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014d2:	4a2a      	ldr	r2, [pc, #168]	@ (800157c <HAL_DCMI_MspInit+0x224>)
 80014d4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014d8:	224b      	movs	r2, #75	@ 0x4b
 80014da:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014dc:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 80014fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 8001508:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800150c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 8001510:	2204      	movs	r2, #4
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 8001516:	2203      	movs	r2, #3
 8001518:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 8001522:	2200      	movs	r2, #0
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001526:	4814      	ldr	r0, [pc, #80]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 8001528:	f001 f8fe 	bl	8002728 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_DCMI_MspInit+0x1de>
    {
      Error_Handler();
 8001532:	f7ff fef1 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 800153a:	649a      	str	r2, [r3, #72]	@ 0x48
 800153c:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_DCMI_MspInit+0x220>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	204e      	movs	r0, #78	@ 0x4e
 8001548:	f000 feff 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800154c:	204e      	movs	r0, #78	@ 0x4e
 800154e:	f000 ff16 	bl	800237e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	@ 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	48020000 	.word	0x48020000
 8001560:	58024400 	.word	0x58024400
 8001564:	58021000 	.word	0x58021000
 8001568:	58020000 	.word	0x58020000
 800156c:	58020800 	.word	0x58020800
 8001570:	58020c00 	.word	0x58020c00
 8001574:	58020400 	.word	0x58020400
 8001578:	240001c4 	.word	0x240001c4
 800157c:	40020010 	.word	0x40020010

08001580 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0ba      	sub	sp, #232	@ 0xe8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	22c0      	movs	r2, #192	@ 0xc0
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f010 fd47 	bl	8012034 <memset>
  if(hi2c->Instance==I2C2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a38      	ldr	r2, [pc, #224]	@ (800168c <HAL_I2C_MspInit+0x10c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d169      	bne.n	8001684 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015b0:	f04f 0208 	mov.w	r2, #8
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 80015c0:	230c      	movs	r3, #12
 80015c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 80015cc:	2303      	movs	r3, #3
 80015ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80015d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80015d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015da:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80015e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f008 fb23 	bl	8009c38 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 80015f8:	f7ff fe8e 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <HAL_I2C_MspInit+0x110>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <HAL_I2C_MspInit+0x110>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_I2C_MspInit+0x110>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800161e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001622:	2312      	movs	r3, #18
 8001624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001628:	2301      	movs	r3, #1
 800162a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001634:	2304      	movs	r3, #4
 8001636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800163e:	4619      	mov	r1, r3
 8001640:	4814      	ldr	r0, [pc, #80]	@ (8001694 <HAL_I2C_MspInit+0x114>)
 8001642:	f002 ff87 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_I2C_MspInit+0x110>)
 8001648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800164c:	4a10      	ldr	r2, [pc, #64]	@ (8001690 <HAL_I2C_MspInit+0x110>)
 800164e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001652:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_I2C_MspInit+0x110>)
 8001658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800165c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2021      	movs	r0, #33	@ 0x21
 800166a:	f000 fe6e 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800166e:	2021      	movs	r0, #33	@ 0x21
 8001670:	f000 fe85 	bl	800237e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2022      	movs	r0, #34	@ 0x22
 800167a:	f000 fe66 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800167e:	2022      	movs	r0, #34	@ 0x22
 8001680:	f000 fe7d 	bl	800237e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001684:	bf00      	nop
 8001686:	37e8      	adds	r7, #232	@ 0xe8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40005800 	.word	0x40005800
 8001690:	58024400 	.word	0x58024400
 8001694:	58020400 	.word	0x58020400

08001698 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a55      	ldr	r2, [pc, #340]	@ (80017fc <HAL_JPEG_MspInit+0x164>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	f040 80a3 	bne.w	80017f2 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016ac:	4b54      	ldr	r3, [pc, #336]	@ (8001800 <HAL_JPEG_MspInit+0x168>)
 80016ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016b2:	4a53      	ldr	r2, [pc, #332]	@ (8001800 <HAL_JPEG_MspInit+0x168>)
 80016b4:	f043 0320 	orr.w	r3, r3, #32
 80016b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80016bc:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <HAL_JPEG_MspInit+0x168>)
 80016be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80016ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001808 <HAL_JPEG_MspInit+0x170>)
 80016ce:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80016d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016d2:	2211      	movs	r2, #17
 80016d4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80016dc:	4b49      	ldr	r3, [pc, #292]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80016e2:	4b48      	ldr	r3, [pc, #288]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80016e8:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80016ee:	4b45      	ldr	r3, [pc, #276]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 80016f4:	4b43      	ldr	r3, [pc, #268]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80016fa:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001700:	4b40      	ldr	r3, [pc, #256]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 8001702:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001708:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 800170a:	2220      	movs	r2, #32
 800170c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001714:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 8001716:	2200      	movs	r2, #0
 8001718:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 800171c:	2200      	movs	r2, #0
 800171e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001720:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 8001722:	2200      	movs	r2, #0
 8001724:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001726:	4837      	ldr	r0, [pc, #220]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 8001728:	f005 fd04 	bl	8007134 <HAL_MDMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001732:	f7ff fdf1 	bl	8001318 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	4832      	ldr	r0, [pc, #200]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 800173c:	f005 fd46 	bl	80071cc <HAL_MDMA_ConfigPostRequestMask>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001746:	f7ff fde7 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a2d      	ldr	r2, [pc, #180]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <HAL_JPEG_MspInit+0x16c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001758:	4a2d      	ldr	r2, [pc, #180]	@ (8001810 <HAL_JPEG_MspInit+0x178>)
 800175a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 800175e:	2214      	movs	r2, #20
 8001760:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 800176a:	2240      	movs	r2, #64	@ 0x40
 800176c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 800177c:	2208      	movs	r2, #8
 800177e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001786:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 800178e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001794:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 8001796:	2204      	movs	r2, #4
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 800179c:	2200      	movs	r2, #0
 800179e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 80017ac:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 80017b2:	4816      	ldr	r0, [pc, #88]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017b4:	f005 fcbe 	bl	8007134 <HAL_MDMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 80017be:	f7ff fdab 	bl	8001318 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	4811      	ldr	r0, [pc, #68]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017c8:	f005 fd00 	bl	80071cc <HAL_MDMA_ConfigPostRequestMask>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 80017d2:	f7ff fda1 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34
 80017dc:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <HAL_JPEG_MspInit+0x174>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2079      	movs	r0, #121	@ 0x79
 80017e8:	f000 fdaf 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80017ec:	2079      	movs	r0, #121	@ 0x79
 80017ee:	f000 fdc6 	bl	800237e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	52003000 	.word	0x52003000
 8001800:	58024400 	.word	0x58024400
 8001804:	240002e8 	.word	0x240002e8
 8001808:	52000040 	.word	0x52000040
 800180c:	24000354 	.word	0x24000354
 8001810:	52000080 	.word	0x52000080

08001814 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0bc      	sub	sp, #240	@ 0xf0
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182c:	f107 0318 	add.w	r3, r7, #24
 8001830:	22c0      	movs	r2, #192	@ 0xc0
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f010 fbfd 	bl	8012034 <memset>
  if(hspi->Instance==SPI2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a38      	ldr	r2, [pc, #224]	@ (8001920 <HAL_SPI_MspInit+0x10c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d169      	bne.n	8001918 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001844:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001850:	2300      	movs	r3, #0
 8001852:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	4618      	mov	r0, r3
 800185a:	f008 f9ed 	bl	8009c38 <HAL_RCCEx_PeriphCLKConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001864:	f7ff fd58 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001868:	4b2e      	ldr	r3, [pc, #184]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 800186a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800186e:	4a2d      	ldr	r2, [pc, #180]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001878:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 800187a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800187e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 8001888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188c:	4a25      	ldr	r2, [pc, #148]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001896:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_SPI_MspInit+0x110>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018c2:	2306      	movs	r3, #6
 80018c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018da:	2305      	movs	r3, #5
 80018dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018e4:	4619      	mov	r1, r3
 80018e6:	4810      	ldr	r0, [pc, #64]	@ (8001928 <HAL_SPI_MspInit+0x114>)
 80018e8:	f002 fe34 	bl	8004554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001906:	2305      	movs	r3, #5
 8001908:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001910:	4619      	mov	r1, r3
 8001912:	4806      	ldr	r0, [pc, #24]	@ (800192c <HAL_SPI_MspInit+0x118>)
 8001914:	f002 fe1e 	bl	8004554 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	37f0      	adds	r7, #240	@ 0xf0
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40003800 	.word	0x40003800
 8001924:	58024400 	.word	0x58024400
 8001928:	58020800 	.word	0x58020800
 800192c:	58020400 	.word	0x58020400

08001930 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2b      	ldr	r2, [pc, #172]	@ (80019ec <HAL_TIM_PWM_MspInit+0xbc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d10f      	bne.n	8001962 <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001942:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001948:	4a29      	ldr	r2, [pc, #164]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001952:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001960:	e03d      	b.n	80019de <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800196a:	d10f      	bne.n	800198c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196c:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800196e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001972:	4a1f      	ldr	r2, [pc, #124]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800197e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	e028      	b.n	80019de <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_TIM_PWM_MspInit+0xc4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10f      	bne.n	80019b6 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 8001998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019a6:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80019a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	e013      	b.n	80019de <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_TIM_PWM_MspInit+0xc8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d10e      	bne.n	80019de <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80019c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019d0:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_TIM_PWM_MspInit+0xc0>)
 80019d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40010000 	.word	0x40010000
 80019f0:	58024400 	.word	0x58024400
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40000800 	.word	0x40000800

080019fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <HAL_TIM_Base_MspInit+0x48>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d116      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_TIM_Base_MspInit+0x4c>)
 8001a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a14:	4a0c      	ldr	r2, [pc, #48]	@ (8001a48 <HAL_TIM_Base_MspInit+0x4c>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_TIM_Base_MspInit+0x4c>)
 8001a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	202d      	movs	r0, #45	@ 0x2d
 8001a32:	f000 fc8a 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a36:	202d      	movs	r0, #45	@ 0x2d
 8001a38:	f000 fca1 	bl	800237e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40002000 	.word	0x40002000
 8001a48:	58024400 	.word	0x58024400

08001a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5d      	ldr	r2, [pc, #372]	@ (8001be0 <HAL_TIM_MspPostInit+0x194>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d120      	bne.n	8001ab0 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a74:	4a5b      	ldr	r2, [pc, #364]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a7e:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	484f      	ldr	r0, [pc, #316]	@ (8001be8 <HAL_TIM_MspPostInit+0x19c>)
 8001aaa:	f002 fd53 	bl	8004554 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001aae:	e093      	b.n	8001bd8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab8:	d11f      	bne.n	8001afa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac0:	4a48      	ldr	r2, [pc, #288]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aca:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ad8:	2307      	movs	r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	483e      	ldr	r0, [pc, #248]	@ (8001bec <HAL_TIM_MspPostInit+0x1a0>)
 8001af4:	f002 fd2e 	bl	8004554 <HAL_GPIO_Init>
}
 8001af8:	e06e      	b.n	8001bd8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf0 <HAL_TIM_MspPostInit+0x1a4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d11f      	bne.n	8001b44 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b0a:	4a36      	ldr	r2, [pc, #216]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b14:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b22:	2303      	movs	r3, #3
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b32:	2302      	movs	r3, #2
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	482d      	ldr	r0, [pc, #180]	@ (8001bf4 <HAL_TIM_MspPostInit+0x1a8>)
 8001b3e:	f002 fd09 	bl	8004554 <HAL_GPIO_Init>
}
 8001b42:	e049      	b.n	8001bd8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <HAL_TIM_MspPostInit+0x1ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d120      	bne.n	8001b90 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b54:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	481a      	ldr	r0, [pc, #104]	@ (8001bf4 <HAL_TIM_MspPostInit+0x1a8>)
 8001b8a:	f002 fce3 	bl	8004554 <HAL_GPIO_Init>
}
 8001b8e:	e023      	b.n	8001bd8 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	@ (8001bfc <HAL_TIM_MspPostInit+0x1b0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d11e      	bne.n	8001bd8 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba0:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_TIM_MspPostInit+0x198>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001bc8:	2309      	movs	r3, #9
 8001bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <HAL_TIM_MspPostInit+0x1a0>)
 8001bd4:	f002 fcbe 	bl	8004554 <HAL_GPIO_Init>
}
 8001bd8:	bf00      	nop
 8001bda:	3730      	adds	r7, #48	@ 0x30
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40010000 	.word	0x40010000
 8001be4:	58024400 	.word	0x58024400
 8001be8:	58021000 	.word	0x58021000
 8001bec:	58020000 	.word	0x58020000
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	58020400 	.word	0x58020400
 8001bf8:	40000800 	.word	0x40000800
 8001bfc:	40002000 	.word	0x40002000

08001c00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0ba      	sub	sp, #232	@ 0xe8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	22c0      	movs	r2, #192	@ 0xc0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f010 fa07 	bl	8012034 <memset>
  if(huart->Instance==USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_UART_MspInit+0xc8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d146      	bne.n	8001cbe <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c30:	f04f 0201 	mov.w	r2, #1
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fff6 	bl	8009c38 <HAL_RCCEx_PeriphCLKConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c52:	f7ff fb61 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_UART_MspInit+0xcc>)
 8001c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ccc <HAL_UART_MspInit+0xcc>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <HAL_UART_MspInit+0xcc>)
 8001c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_UART_MspInit+0xcc>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7a:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <HAL_UART_MspInit+0xcc>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_UART_MspInit+0xcc>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c92:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001cac:	2304      	movs	r3, #4
 8001cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <HAL_UART_MspInit+0xd0>)
 8001cba:	f002 fc4b 	bl	8004554 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cbe:	bf00      	nop
 8001cc0:	37e8      	adds	r7, #232	@ 0xe8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	58020400 	.word	0x58020400

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <NMI_Handler+0x4>

08001cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2a:	f000 f9e3 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA1_Stream0_IRQHandler+0x10>)
 8001d3a:	f001 fa97 	bl	800326c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	240001c4 	.word	0x240001c4

08001d48 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <I2C2_EV_IRQHandler+0x10>)
 8001d4e:	f002 fe67 	bl	8004a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2400023c 	.word	0x2400023c

08001d5c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <I2C2_ER_IRQHandler+0x10>)
 8001d62:	f002 fe77 	bl	8004a54 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2400023c 	.word	0x2400023c

08001d70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001d76:	f009 ff78 	bl	800bc6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	24000578 	.word	0x24000578

08001d84 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001d88:	4802      	ldr	r0, [pc, #8]	@ (8001d94 <DCMI_IRQHandler+0x10>)
 8001d8a:	f000 fc05 	bl	8002598 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	24000174 	.word	0x24000174

08001d98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <OTG_FS_IRQHandler+0x10>)
 8001d9e:	f005 fdbc 	bl	800791a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	240142e0 	.word	0x240142e0

08001dac <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <JPEG_IRQHandler+0x10>)
 8001db2:	f003 ff7d 	bl	8005cb0 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	24000290 	.word	0x24000290

08001dc0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <MDMA_IRQHandler+0x14>)
 8001dc6:	f005 fa7b 	bl	80072c0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <MDMA_IRQHandler+0x18>)
 8001dcc:	f005 fa78 	bl	80072c0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	240002e8 	.word	0x240002e8
 8001dd8:	24000354 	.word	0x24000354

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f010 f91a 	bl	8012044 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	24080000 	.word	0x24080000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	24012df4 	.word	0x24012df4
 8001e44:	24014b30 	.word	0x24014b30

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <SystemInit+0x114>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e52:	4a42      	ldr	r2, [pc, #264]	@ (8001f5c <SystemInit+0x114>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e5c:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <SystemInit+0x118>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d807      	bhi.n	8001e78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e68:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <SystemInit+0x118>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 030f 	bic.w	r3, r3, #15
 8001e70:	4a3b      	ldr	r2, [pc, #236]	@ (8001f60 <SystemInit+0x118>)
 8001e72:	f043 0307 	orr.w	r3, r3, #7
 8001e76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e78:	4b3a      	ldr	r3, [pc, #232]	@ (8001f64 <SystemInit+0x11c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a39      	ldr	r2, [pc, #228]	@ (8001f64 <SystemInit+0x11c>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e84:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <SystemInit+0x11c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e8a:	4b36      	ldr	r3, [pc, #216]	@ (8001f64 <SystemInit+0x11c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4935      	ldr	r1, [pc, #212]	@ (8001f64 <SystemInit+0x11c>)
 8001e90:	4b35      	ldr	r3, [pc, #212]	@ (8001f68 <SystemInit+0x120>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e96:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <SystemInit+0x118>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <SystemInit+0x118>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 030f 	bic.w	r3, r3, #15
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <SystemInit+0x118>)
 8001eac:	f043 0307 	orr.w	r3, r3, #7
 8001eb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <SystemInit+0x11c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f64 <SystemInit+0x11c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ebe:	4b29      	ldr	r3, [pc, #164]	@ (8001f64 <SystemInit+0x11c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <SystemInit+0x11c>)
 8001ec6:	4a29      	ldr	r2, [pc, #164]	@ (8001f6c <SystemInit+0x124>)
 8001ec8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001eca:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <SystemInit+0x11c>)
 8001ecc:	4a28      	ldr	r2, [pc, #160]	@ (8001f70 <SystemInit+0x128>)
 8001ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <SystemInit+0x11c>)
 8001ed2:	4a28      	ldr	r2, [pc, #160]	@ (8001f74 <SystemInit+0x12c>)
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <SystemInit+0x11c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <SystemInit+0x11c>)
 8001ede:	4a25      	ldr	r2, [pc, #148]	@ (8001f74 <SystemInit+0x12c>)
 8001ee0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ee2:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <SystemInit+0x11c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <SystemInit+0x11c>)
 8001eea:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <SystemInit+0x12c>)
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001eee:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <SystemInit+0x11c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <SystemInit+0x11c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <SystemInit+0x11c>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <SystemInit+0x11c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <SystemInit+0x130>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <SystemInit+0x134>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f12:	d202      	bcs.n	8001f1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <SystemInit+0x138>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <SystemInit+0x11c>)
 8001f1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d113      	bne.n	8001f50 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <SystemInit+0x11c>)
 8001f2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <SystemInit+0x11c>)
 8001f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <SystemInit+0x13c>)
 8001f3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <SystemInit+0x11c>)
 8001f42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f46:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <SystemInit+0x11c>)
 8001f48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00
 8001f60:	52002000 	.word	0x52002000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f6c:	02020200 	.word	0x02020200
 8001f70:	01ff0000 	.word	0x01ff0000
 8001f74:	01010280 	.word	0x01010280
 8001f78:	5c001000 	.word	0x5c001000
 8001f7c:	ffff0000 	.word	0xffff0000
 8001f80:	51008108 	.word	0x51008108
 8001f84:	52004000 	.word	0x52004000

08001f88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <ExitRun0Mode+0x2c>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <ExitRun0Mode+0x2c>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001f98:	bf00      	nop
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <ExitRun0Mode+0x2c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f9      	beq.n	8001f9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	58024800 	.word	0x58024800

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ff4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001fbc:	f7ff ffe4 	bl	8001f88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc0:	f7ff ff42 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc4:	480c      	ldr	r0, [pc, #48]	@ (8001ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc6:	490d      	ldr	r1, [pc, #52]	@ (8001ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8002008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f010 f831 	bl	8012050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7fe fb65 	bl	80006bc <main>
  bx  lr
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ff8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ffc:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8002000:	08012dbc 	.word	0x08012dbc
  ldr r2, =_sbss
 8002004:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8002008:	24014b2c 	.word	0x24014b2c

0800200c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC3_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f000 f98c 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800201c:	f007 fc36 	bl	800988c <HAL_RCC_GetSysClockFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <HAL_Init+0x68>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4913      	ldr	r1, [pc, #76]	@ (800207c <HAL_Init+0x6c>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_Init+0x68>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a0e      	ldr	r2, [pc, #56]	@ (800207c <HAL_Init+0x6c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <HAL_Init+0x70>)
 8002052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002054:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <HAL_Init+0x74>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	200f      	movs	r0, #15
 800205c:	f000 f814 	bl	8002088 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e002      	b.n	8002070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800206a:	f7ff f95b 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400
 800207c:	08012ad8 	.word	0x08012ad8
 8002080:	24000008 	.word	0x24000008
 8002084:	24000004 	.word	0x24000004

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002090:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_InitTick+0x60>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e021      	b.n	80020e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_InitTick+0x64>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_InitTick+0x60>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f971 	bl	800239a <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 f93b 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	@ (80020f0 <HAL_InitTick+0x68>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24000010 	.word	0x24000010
 80020ec:	24000004 	.word	0x24000004
 80020f0:	2400000c 	.word	0x2400000c

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	24000010 	.word	0x24000010
 8002118:	24012df8 	.word	0x24012df8

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	24012df8 	.word	0x24012df8

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	24000010 	.word	0x24000010

0800217c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_GetREVID+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0c1b      	lsrs	r3, r3, #16
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	5c001000 	.word	0x5c001000

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <__NVIC_SetPriorityGrouping+0x40>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <__NVIC_SetPriorityGrouping+0x40>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	05fa0000 	.word	0x05fa0000

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	@ (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002358:	f7ff ff40 	bl	80021dc <__NVIC_GetPriorityGrouping>
 800235c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f7ff ff90 	bl	8002288 <NVIC_EncodePriority>
 8002368:	4602      	mov	r2, r0
 800236a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff5f 	bl	8002234 <__NVIC_SetPriority>
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff33 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffa4 	bl	80022f0 <SysTick_Config>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023b8:	f3bf 8f5f 	dmb	sy
}
 80023bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023be:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <HAL_MPU_Disable+0x28>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	4a06      	ldr	r2, [pc, #24]	@ (80023dc <HAL_MPU_Disable+0x28>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_MPU_Disable+0x2c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00
 80023e0:	e000ed90 	.word	0xe000ed90

080023e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023ec:	4a0b      	ldr	r2, [pc, #44]	@ (800241c <HAL_MPU_Enable+0x38>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_MPU_Enable+0x3c>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_MPU_Enable+0x3c>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002400:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002402:	f3bf 8f4f 	dsb	sy
}
 8002406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002408:	f3bf 8f6f 	isb	sy
}
 800240c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed90 	.word	0xe000ed90
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	785a      	ldrb	r2, [r3, #1]
 8002430:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002432:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <HAL_MPU_ConfigRegion+0x7c>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002440:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7b1b      	ldrb	r3, [r3, #12]
 800244c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7adb      	ldrb	r3, [r3, #11]
 8002452:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002454:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7a9b      	ldrb	r3, [r3, #10]
 800245a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800245c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7b5b      	ldrb	r3, [r3, #13]
 8002462:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002464:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7b9b      	ldrb	r3, [r3, #14]
 800246a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800246c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7bdb      	ldrb	r3, [r3, #15]
 8002472:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7a5b      	ldrb	r3, [r3, #9]
 800247a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800247c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7a1b      	ldrb	r3, [r3, #8]
 8002482:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002484:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800248e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002490:	6113      	str	r3, [r2, #16]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed90 	.word	0xe000ed90

080024a4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e069      	b.n	800258a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe ff48 	bl	8001358 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <HAL_DCMI_Init+0xf0>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002502:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800250e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800251a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002526:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002532:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d112      	bne.n	800256a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7f5b      	ldrb	r3, [r3, #29]
 800254e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002550:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f9b      	ldrb	r3, [r3, #30]
 8002556:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002558:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7fdb      	ldrb	r3, [r3, #31]
 8002560:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002566:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002568:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 021e 	orr.w	r2, r2, #30
 8002578:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	ffe0f007 	.word	0xffe0f007

08002598 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2204      	movs	r2, #4
 80025b8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d2:	4a31      	ldr	r2, [pc, #196]	@ (8002698 <HAL_DCMI_IRQHandler+0x100>)
 80025d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fc00 	bl	8002de0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	4a23      	ldr	r2, [pc, #140]	@ (8002698 <HAL_DCMI_IRQHandler+0x100>)
 800260c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fbe4 	bl	8002de0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2210      	movs	r2, #16
 8002628:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f840 	bl	80026b0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2208      	movs	r2, #8
 8002640:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f83e 	bl	80026c4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01d      	beq.n	800268e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	d107      	bne.n	8002670 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 021e 	bic.w	r2, r2, #30
 800266e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f825 	bl	80026d8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	080026ed 	.word	0x080026ed

0800269c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	2b02      	cmp	r3, #2
 8002702:	d009      	beq.n	8002718 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff ffbf 	bl	800269c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff fcf4 	bl	800211c <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e316      	b.n	8002d6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a66      	ldr	r2, [pc, #408]	@ (80028e0 <HAL_DMA_Init+0x1b8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d04a      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a65      	ldr	r2, [pc, #404]	@ (80028e4 <HAL_DMA_Init+0x1bc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d045      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a63      	ldr	r2, [pc, #396]	@ (80028e8 <HAL_DMA_Init+0x1c0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d040      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a62      	ldr	r2, [pc, #392]	@ (80028ec <HAL_DMA_Init+0x1c4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d03b      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a60      	ldr	r2, [pc, #384]	@ (80028f0 <HAL_DMA_Init+0x1c8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d036      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5f      	ldr	r2, [pc, #380]	@ (80028f4 <HAL_DMA_Init+0x1cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d031      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_DMA_Init+0x1d0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d02c      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5c      	ldr	r2, [pc, #368]	@ (80028fc <HAL_DMA_Init+0x1d4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d027      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a5a      	ldr	r2, [pc, #360]	@ (8002900 <HAL_DMA_Init+0x1d8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d022      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a59      	ldr	r2, [pc, #356]	@ (8002904 <HAL_DMA_Init+0x1dc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d01d      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a57      	ldr	r2, [pc, #348]	@ (8002908 <HAL_DMA_Init+0x1e0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d018      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_DMA_Init+0x1e4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a54      	ldr	r2, [pc, #336]	@ (8002910 <HAL_DMA_Init+0x1e8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00e      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a53      	ldr	r2, [pc, #332]	@ (8002914 <HAL_DMA_Init+0x1ec>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a51      	ldr	r2, [pc, #324]	@ (8002918 <HAL_DMA_Init+0x1f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_DMA_Init+0xb8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a50      	ldr	r2, [pc, #320]	@ (800291c <HAL_DMA_Init+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_DMA_Init+0xbc>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_DMA_Init+0xbe>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 813b 	beq.w	8002a62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a37      	ldr	r2, [pc, #220]	@ (80028e0 <HAL_DMA_Init+0x1b8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d04a      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a36      	ldr	r2, [pc, #216]	@ (80028e4 <HAL_DMA_Init+0x1bc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d045      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a34      	ldr	r2, [pc, #208]	@ (80028e8 <HAL_DMA_Init+0x1c0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d040      	beq.n	800289c <HAL_DMA_Init+0x174>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a33      	ldr	r2, [pc, #204]	@ (80028ec <HAL_DMA_Init+0x1c4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d03b      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a31      	ldr	r2, [pc, #196]	@ (80028f0 <HAL_DMA_Init+0x1c8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d036      	beq.n	800289c <HAL_DMA_Init+0x174>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a30      	ldr	r2, [pc, #192]	@ (80028f4 <HAL_DMA_Init+0x1cc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d031      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2e      	ldr	r2, [pc, #184]	@ (80028f8 <HAL_DMA_Init+0x1d0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02c      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a2d      	ldr	r2, [pc, #180]	@ (80028fc <HAL_DMA_Init+0x1d4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d027      	beq.n	800289c <HAL_DMA_Init+0x174>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2b      	ldr	r2, [pc, #172]	@ (8002900 <HAL_DMA_Init+0x1d8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d022      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2a      	ldr	r2, [pc, #168]	@ (8002904 <HAL_DMA_Init+0x1dc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d01d      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a28      	ldr	r2, [pc, #160]	@ (8002908 <HAL_DMA_Init+0x1e0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_DMA_Init+0x174>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a27      	ldr	r2, [pc, #156]	@ (800290c <HAL_DMA_Init+0x1e4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a25      	ldr	r2, [pc, #148]	@ (8002910 <HAL_DMA_Init+0x1e8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_DMA_Init+0x174>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <HAL_DMA_Init+0x1ec>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_DMA_Init+0x1f0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Init+0x174>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a21      	ldr	r2, [pc, #132]	@ (800291c <HAL_DMA_Init+0x1f4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d108      	bne.n	80028ae <HAL_DMA_Init+0x186>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <HAL_DMA_Init+0x196>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028be:	e02f      	b.n	8002920 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c0:	f7ff fc2c 	bl	800211c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d928      	bls.n	8002920 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2203      	movs	r2, #3
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e246      	b.n	8002d6e <HAL_DMA_Init+0x646>
 80028e0:	40020010 	.word	0x40020010
 80028e4:	40020028 	.word	0x40020028
 80028e8:	40020040 	.word	0x40020040
 80028ec:	40020058 	.word	0x40020058
 80028f0:	40020070 	.word	0x40020070
 80028f4:	40020088 	.word	0x40020088
 80028f8:	400200a0 	.word	0x400200a0
 80028fc:	400200b8 	.word	0x400200b8
 8002900:	40020410 	.word	0x40020410
 8002904:	40020428 	.word	0x40020428
 8002908:	40020440 	.word	0x40020440
 800290c:	40020458 	.word	0x40020458
 8002910:	40020470 	.word	0x40020470
 8002914:	40020488 	.word	0x40020488
 8002918:	400204a0 	.word	0x400204a0
 800291c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1c8      	bne.n	80028c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4b83      	ldr	r3, [pc, #524]	@ (8002b48 <HAL_DMA_Init+0x420>)
 800293a:	4013      	ands	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002946:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002952:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	2b04      	cmp	r3, #4
 8002972:	d107      	bne.n	8002984 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002984:	4b71      	ldr	r3, [pc, #452]	@ (8002b4c <HAL_DMA_Init+0x424>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b71      	ldr	r3, [pc, #452]	@ (8002b50 <HAL_DMA_Init+0x428>)
 800298a:	4013      	ands	r3, r2
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002990:	d328      	bcc.n	80029e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b28      	cmp	r3, #40	@ 0x28
 8002998:	d903      	bls.n	80029a2 <HAL_DMA_Init+0x27a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b2e      	cmp	r3, #46	@ 0x2e
 80029a0:	d917      	bls.n	80029d2 <HAL_DMA_Init+0x2aa>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80029a8:	d903      	bls.n	80029b2 <HAL_DMA_Init+0x28a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b42      	cmp	r3, #66	@ 0x42
 80029b0:	d90f      	bls.n	80029d2 <HAL_DMA_Init+0x2aa>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b46      	cmp	r3, #70	@ 0x46
 80029b8:	d903      	bls.n	80029c2 <HAL_DMA_Init+0x29a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b48      	cmp	r3, #72	@ 0x48
 80029c0:	d907      	bls.n	80029d2 <HAL_DMA_Init+0x2aa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80029c8:	d905      	bls.n	80029d6 <HAL_DMA_Init+0x2ae>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b52      	cmp	r3, #82	@ 0x52
 80029d0:	d801      	bhi.n	80029d6 <HAL_DMA_Init+0x2ae>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_DMA_Init+0x2b0>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0307 	bic.w	r3, r3, #7
 80029fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d117      	bne.n	8002a3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f001 fc0d 	bl	8004240 <DMA_CheckFifoParam>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2240      	movs	r2, #64	@ 0x40
 8002a30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e197      	b.n	8002d6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f001 fb48 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	223f      	movs	r2, #63	@ 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e0cd      	b.n	8002bfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3b      	ldr	r2, [pc, #236]	@ (8002b54 <HAL_DMA_Init+0x42c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a39      	ldr	r2, [pc, #228]	@ (8002b58 <HAL_DMA_Init+0x430>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01d      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a38      	ldr	r2, [pc, #224]	@ (8002b5c <HAL_DMA_Init+0x434>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d018      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a36      	ldr	r2, [pc, #216]	@ (8002b60 <HAL_DMA_Init+0x438>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a35      	ldr	r2, [pc, #212]	@ (8002b64 <HAL_DMA_Init+0x43c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00e      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a33      	ldr	r2, [pc, #204]	@ (8002b68 <HAL_DMA_Init+0x440>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_DMA_Init+0x444>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_DMA_Init+0x38a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a30      	ldr	r2, [pc, #192]	@ (8002b70 <HAL_DMA_Init+0x448>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_Init+0x38e>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_Init+0x390>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8097 	beq.w	8002bec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a24      	ldr	r2, [pc, #144]	@ (8002b54 <HAL_DMA_Init+0x42c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d021      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a22      	ldr	r2, [pc, #136]	@ (8002b58 <HAL_DMA_Init+0x430>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01c      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a21      	ldr	r2, [pc, #132]	@ (8002b5c <HAL_DMA_Init+0x434>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d017      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b60 <HAL_DMA_Init+0x438>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d012      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1e      	ldr	r2, [pc, #120]	@ (8002b64 <HAL_DMA_Init+0x43c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <HAL_DMA_Init+0x440>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d008      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <HAL_DMA_Init+0x444>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <HAL_DMA_Init+0x3e4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <HAL_DMA_Init+0x448>)
 8002b0a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_DMA_Init+0x44c>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d021      	beq.n	8002b78 <HAL_DMA_Init+0x450>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b80      	cmp	r3, #128	@ 0x80
 8002b3a:	d102      	bne.n	8002b42 <HAL_DMA_Init+0x41a>
 8002b3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b40:	e01b      	b.n	8002b7a <HAL_DMA_Init+0x452>
 8002b42:	2300      	movs	r3, #0
 8002b44:	e019      	b.n	8002b7a <HAL_DMA_Init+0x452>
 8002b46:	bf00      	nop
 8002b48:	fe10803f 	.word	0xfe10803f
 8002b4c:	5c001000 	.word	0x5c001000
 8002b50:	ffff0000 	.word	0xffff0000
 8002b54:	58025408 	.word	0x58025408
 8002b58:	5802541c 	.word	0x5802541c
 8002b5c:	58025430 	.word	0x58025430
 8002b60:	58025444 	.word	0x58025444
 8002b64:	58025458 	.word	0x58025458
 8002b68:	5802546c 	.word	0x5802546c
 8002b6c:	58025480 	.word	0x58025480
 8002b70:	58025494 	.word	0x58025494
 8002b74:	fffe000f 	.word	0xfffe000f
 8002b78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ba8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8002d78 <HAL_DMA_Init+0x650>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d7c <HAL_DMA_Init+0x654>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f001 fa83 	bl	80040dc <DMA_CalcBaseAndBitshift>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2201      	movs	r2, #1
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	e008      	b.n	8002bfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0b7      	b.n	8002d6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_DMA_Init+0x658>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d072      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002d84 <HAL_DMA_Init+0x65c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d06d      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_DMA_Init+0x660>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d068      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a5a      	ldr	r2, [pc, #360]	@ (8002d8c <HAL_DMA_Init+0x664>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d063      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a59      	ldr	r2, [pc, #356]	@ (8002d90 <HAL_DMA_Init+0x668>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d05e      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a57      	ldr	r2, [pc, #348]	@ (8002d94 <HAL_DMA_Init+0x66c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d059      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a56      	ldr	r2, [pc, #344]	@ (8002d98 <HAL_DMA_Init+0x670>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d054      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a54      	ldr	r2, [pc, #336]	@ (8002d9c <HAL_DMA_Init+0x674>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d04f      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a53      	ldr	r2, [pc, #332]	@ (8002da0 <HAL_DMA_Init+0x678>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04a      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a51      	ldr	r2, [pc, #324]	@ (8002da4 <HAL_DMA_Init+0x67c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d045      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a50      	ldr	r2, [pc, #320]	@ (8002da8 <HAL_DMA_Init+0x680>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	@ (8002dac <HAL_DMA_Init+0x684>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d03b      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_DMA_Init+0x688>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d036      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	@ (8002db4 <HAL_DMA_Init+0x68c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002db8 <HAL_DMA_Init+0x690>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02c      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a48      	ldr	r2, [pc, #288]	@ (8002dbc <HAL_DMA_Init+0x694>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d027      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a47      	ldr	r2, [pc, #284]	@ (8002dc0 <HAL_DMA_Init+0x698>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a45      	ldr	r2, [pc, #276]	@ (8002dc4 <HAL_DMA_Init+0x69c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a44      	ldr	r2, [pc, #272]	@ (8002dc8 <HAL_DMA_Init+0x6a0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a42      	ldr	r2, [pc, #264]	@ (8002dcc <HAL_DMA_Init+0x6a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a41      	ldr	r2, [pc, #260]	@ (8002dd0 <HAL_DMA_Init+0x6a8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd4 <HAL_DMA_Init+0x6ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3e      	ldr	r2, [pc, #248]	@ (8002dd8 <HAL_DMA_Init+0x6b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_Init+0x5c6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ddc <HAL_DMA_Init+0x6b4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Init+0x5ca>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_DMA_Init+0x5cc>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d032      	beq.n	8002d5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f001 fb1d 	bl	8004338 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b80      	cmp	r3, #128	@ 0x80
 8002d04:	d102      	bne.n	8002d0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_DMA_Init+0x624>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d80c      	bhi.n	8002d4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 fb9a 	bl	800446c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e008      	b.n	8002d5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	a7fdabf8 	.word	0xa7fdabf8
 8002d7c:	cccccccd 	.word	0xcccccccd
 8002d80:	40020010 	.word	0x40020010
 8002d84:	40020028 	.word	0x40020028
 8002d88:	40020040 	.word	0x40020040
 8002d8c:	40020058 	.word	0x40020058
 8002d90:	40020070 	.word	0x40020070
 8002d94:	40020088 	.word	0x40020088
 8002d98:	400200a0 	.word	0x400200a0
 8002d9c:	400200b8 	.word	0x400200b8
 8002da0:	40020410 	.word	0x40020410
 8002da4:	40020428 	.word	0x40020428
 8002da8:	40020440 	.word	0x40020440
 8002dac:	40020458 	.word	0x40020458
 8002db0:	40020470 	.word	0x40020470
 8002db4:	40020488 	.word	0x40020488
 8002db8:	400204a0 	.word	0x400204a0
 8002dbc:	400204b8 	.word	0x400204b8
 8002dc0:	58025408 	.word	0x58025408
 8002dc4:	5802541c 	.word	0x5802541c
 8002dc8:	58025430 	.word	0x58025430
 8002dcc:	58025444 	.word	0x58025444
 8002dd0:	58025458 	.word	0x58025458
 8002dd4:	5802546c 	.word	0x5802546c
 8002dd8:	58025480 	.word	0x58025480
 8002ddc:	58025494 	.word	0x58025494

08002de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e237      	b.n	8003262 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2280      	movs	r2, #128	@ 0x80
 8002e02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e22c      	b.n	8003262 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f80 <HAL_DMA_Abort_IT+0x1a0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04a      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a5b      	ldr	r2, [pc, #364]	@ (8002f84 <HAL_DMA_Abort_IT+0x1a4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d045      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a59      	ldr	r2, [pc, #356]	@ (8002f88 <HAL_DMA_Abort_IT+0x1a8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d040      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a58      	ldr	r2, [pc, #352]	@ (8002f8c <HAL_DMA_Abort_IT+0x1ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d03b      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_DMA_Abort_IT+0x1b0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d036      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a55      	ldr	r2, [pc, #340]	@ (8002f94 <HAL_DMA_Abort_IT+0x1b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d031      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a53      	ldr	r2, [pc, #332]	@ (8002f98 <HAL_DMA_Abort_IT+0x1b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02c      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a52      	ldr	r2, [pc, #328]	@ (8002f9c <HAL_DMA_Abort_IT+0x1bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d027      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a50      	ldr	r2, [pc, #320]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8002fac <HAL_DMA_Abort_IT+0x1cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a49      	ldr	r2, [pc, #292]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a47      	ldr	r2, [pc, #284]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xc8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a46      	ldr	r2, [pc, #280]	@ (8002fbc <HAL_DMA_Abort_IT+0x1dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Abort_IT+0xcc>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_DMA_Abort_IT+0xce>
 8002eac:	2300      	movs	r3, #0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8086 	beq.w	8002fc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f80 <HAL_DMA_Abort_IT+0x1a0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d04a      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2e      	ldr	r2, [pc, #184]	@ (8002f84 <HAL_DMA_Abort_IT+0x1a4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d045      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f88 <HAL_DMA_Abort_IT+0x1a8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d040      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2b      	ldr	r2, [pc, #172]	@ (8002f8c <HAL_DMA_Abort_IT+0x1ac>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d03b      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a29      	ldr	r2, [pc, #164]	@ (8002f90 <HAL_DMA_Abort_IT+0x1b0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d036      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <HAL_DMA_Abort_IT+0x1b4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a26      	ldr	r2, [pc, #152]	@ (8002f98 <HAL_DMA_Abort_IT+0x1b8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02c      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a25      	ldr	r2, [pc, #148]	@ (8002f9c <HAL_DMA_Abort_IT+0x1bc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d027      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d01d      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a20      	ldr	r2, [pc, #128]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fac <HAL_DMA_Abort_IT+0x1cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x17c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_DMA_Abort_IT+0x1dc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_Abort_IT+0x18e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e178      	b.n	8003260 <HAL_DMA_Abort_IT+0x480>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e16f      	b.n	8003260 <HAL_DMA_Abort_IT+0x480>
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 020e 	bic.w	r2, r2, #14
 8002fce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6c      	ldr	r2, [pc, #432]	@ (8003188 <HAL_DMA_Abort_IT+0x3a8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04a      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6b      	ldr	r2, [pc, #428]	@ (800318c <HAL_DMA_Abort_IT+0x3ac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d045      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <HAL_DMA_Abort_IT+0x3b0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d040      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a68      	ldr	r2, [pc, #416]	@ (8003194 <HAL_DMA_Abort_IT+0x3b4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d03b      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a66      	ldr	r2, [pc, #408]	@ (8003198 <HAL_DMA_Abort_IT+0x3b8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d036      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a65      	ldr	r2, [pc, #404]	@ (800319c <HAL_DMA_Abort_IT+0x3bc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d031      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a63      	ldr	r2, [pc, #396]	@ (80031a0 <HAL_DMA_Abort_IT+0x3c0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02c      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a62      	ldr	r2, [pc, #392]	@ (80031a4 <HAL_DMA_Abort_IT+0x3c4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d027      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a60      	ldr	r2, [pc, #384]	@ (80031a8 <HAL_DMA_Abort_IT+0x3c8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d022      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5f      	ldr	r2, [pc, #380]	@ (80031ac <HAL_DMA_Abort_IT+0x3cc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d01d      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a5d      	ldr	r2, [pc, #372]	@ (80031b0 <HAL_DMA_Abort_IT+0x3d0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a5c      	ldr	r2, [pc, #368]	@ (80031b4 <HAL_DMA_Abort_IT+0x3d4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a5a      	ldr	r2, [pc, #360]	@ (80031b8 <HAL_DMA_Abort_IT+0x3d8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00e      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a59      	ldr	r2, [pc, #356]	@ (80031bc <HAL_DMA_Abort_IT+0x3dc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a57      	ldr	r2, [pc, #348]	@ (80031c0 <HAL_DMA_Abort_IT+0x3e0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_Abort_IT+0x290>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a56      	ldr	r2, [pc, #344]	@ (80031c4 <HAL_DMA_Abort_IT+0x3e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d108      	bne.n	8003082 <HAL_DMA_Abort_IT+0x2a2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e007      	b.n	8003092 <HAL_DMA_Abort_IT+0x2b2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a3c      	ldr	r2, [pc, #240]	@ (8003188 <HAL_DMA_Abort_IT+0x3a8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d072      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3a      	ldr	r2, [pc, #232]	@ (800318c <HAL_DMA_Abort_IT+0x3ac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d06d      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a39      	ldr	r2, [pc, #228]	@ (8003190 <HAL_DMA_Abort_IT+0x3b0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d068      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a37      	ldr	r2, [pc, #220]	@ (8003194 <HAL_DMA_Abort_IT+0x3b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d063      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a36      	ldr	r2, [pc, #216]	@ (8003198 <HAL_DMA_Abort_IT+0x3b8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d05e      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a34      	ldr	r2, [pc, #208]	@ (800319c <HAL_DMA_Abort_IT+0x3bc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d059      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	@ (80031a0 <HAL_DMA_Abort_IT+0x3c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d054      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a31      	ldr	r2, [pc, #196]	@ (80031a4 <HAL_DMA_Abort_IT+0x3c4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d04f      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a30      	ldr	r2, [pc, #192]	@ (80031a8 <HAL_DMA_Abort_IT+0x3c8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d04a      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2e      	ldr	r2, [pc, #184]	@ (80031ac <HAL_DMA_Abort_IT+0x3cc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d045      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2d      	ldr	r2, [pc, #180]	@ (80031b0 <HAL_DMA_Abort_IT+0x3d0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d040      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <HAL_DMA_Abort_IT+0x3d4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d03b      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2a      	ldr	r2, [pc, #168]	@ (80031b8 <HAL_DMA_Abort_IT+0x3d8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d036      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a28      	ldr	r2, [pc, #160]	@ (80031bc <HAL_DMA_Abort_IT+0x3dc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d031      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a27      	ldr	r2, [pc, #156]	@ (80031c0 <HAL_DMA_Abort_IT+0x3e0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d02c      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a25      	ldr	r2, [pc, #148]	@ (80031c4 <HAL_DMA_Abort_IT+0x3e4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d027      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a24      	ldr	r2, [pc, #144]	@ (80031c8 <HAL_DMA_Abort_IT+0x3e8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	@ (80031cc <HAL_DMA_Abort_IT+0x3ec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01d      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a21      	ldr	r2, [pc, #132]	@ (80031d0 <HAL_DMA_Abort_IT+0x3f0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1f      	ldr	r2, [pc, #124]	@ (80031d4 <HAL_DMA_Abort_IT+0x3f4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1e      	ldr	r2, [pc, #120]	@ (80031d8 <HAL_DMA_Abort_IT+0x3f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <HAL_DMA_Abort_IT+0x3fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <HAL_DMA_Abort_IT+0x400>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_DMA_Abort_IT+0x3a2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_DMA_Abort_IT+0x404>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d132      	bne.n	80031e8 <HAL_DMA_Abort_IT+0x408>
 8003182:	2301      	movs	r3, #1
 8003184:	e031      	b.n	80031ea <HAL_DMA_Abort_IT+0x40a>
 8003186:	bf00      	nop
 8003188:	40020010 	.word	0x40020010
 800318c:	40020028 	.word	0x40020028
 8003190:	40020040 	.word	0x40020040
 8003194:	40020058 	.word	0x40020058
 8003198:	40020070 	.word	0x40020070
 800319c:	40020088 	.word	0x40020088
 80031a0:	400200a0 	.word	0x400200a0
 80031a4:	400200b8 	.word	0x400200b8
 80031a8:	40020410 	.word	0x40020410
 80031ac:	40020428 	.word	0x40020428
 80031b0:	40020440 	.word	0x40020440
 80031b4:	40020458 	.word	0x40020458
 80031b8:	40020470 	.word	0x40020470
 80031bc:	40020488 	.word	0x40020488
 80031c0:	400204a0 	.word	0x400204a0
 80031c4:	400204b8 	.word	0x400204b8
 80031c8:	58025408 	.word	0x58025408
 80031cc:	5802541c 	.word	0x5802541c
 80031d0:	58025430 	.word	0x58025430
 80031d4:	58025444 	.word	0x58025444
 80031d8:	58025458 	.word	0x58025458
 80031dc:	5802546c 	.word	0x5802546c
 80031e0:	58025480 	.word	0x58025480
 80031e4:	58025494 	.word	0x58025494
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003202:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2201      	movs	r2, #1
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800321c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003230:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003234:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800323e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop

0800326c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	@ 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003278:	4b67      	ldr	r3, [pc, #412]	@ (8003418 <HAL_DMA_IRQHandler+0x1ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a67      	ldr	r2, [pc, #412]	@ (800341c <HAL_DMA_IRQHandler+0x1b0>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003290:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003420 <HAL_DMA_IRQHandler+0x1b4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d04a      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003424 <HAL_DMA_IRQHandler+0x1b8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d045      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003428 <HAL_DMA_IRQHandler+0x1bc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d040      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5a      	ldr	r2, [pc, #360]	@ (800342c <HAL_DMA_IRQHandler+0x1c0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d03b      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a59      	ldr	r2, [pc, #356]	@ (8003430 <HAL_DMA_IRQHandler+0x1c4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d036      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a57      	ldr	r2, [pc, #348]	@ (8003434 <HAL_DMA_IRQHandler+0x1c8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d031      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a56      	ldr	r2, [pc, #344]	@ (8003438 <HAL_DMA_IRQHandler+0x1cc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d02c      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a54      	ldr	r2, [pc, #336]	@ (800343c <HAL_DMA_IRQHandler+0x1d0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d027      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a53      	ldr	r2, [pc, #332]	@ (8003440 <HAL_DMA_IRQHandler+0x1d4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a51      	ldr	r2, [pc, #324]	@ (8003444 <HAL_DMA_IRQHandler+0x1d8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01d      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a50      	ldr	r2, [pc, #320]	@ (8003448 <HAL_DMA_IRQHandler+0x1dc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4e      	ldr	r2, [pc, #312]	@ (800344c <HAL_DMA_IRQHandler+0x1e0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a4d      	ldr	r2, [pc, #308]	@ (8003450 <HAL_DMA_IRQHandler+0x1e4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a4b      	ldr	r2, [pc, #300]	@ (8003454 <HAL_DMA_IRQHandler+0x1e8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a4a      	ldr	r2, [pc, #296]	@ (8003458 <HAL_DMA_IRQHandler+0x1ec>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_DMA_IRQHandler+0xd2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a48      	ldr	r2, [pc, #288]	@ (800345c <HAL_DMA_IRQHandler+0x1f0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_DMA_IRQHandler+0xd6>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_DMA_IRQHandler+0xd8>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 842b 	beq.w	8003ba0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2208      	movs	r2, #8
 8003354:	409a      	lsls	r2, r3
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80a2 	beq.w	80034a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a2e      	ldr	r2, [pc, #184]	@ (8003420 <HAL_DMA_IRQHandler+0x1b4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d04a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_DMA_IRQHandler+0x1b8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d045      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2b      	ldr	r2, [pc, #172]	@ (8003428 <HAL_DMA_IRQHandler+0x1bc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d040      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2a      	ldr	r2, [pc, #168]	@ (800342c <HAL_DMA_IRQHandler+0x1c0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d03b      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a28      	ldr	r2, [pc, #160]	@ (8003430 <HAL_DMA_IRQHandler+0x1c4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d036      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a27      	ldr	r2, [pc, #156]	@ (8003434 <HAL_DMA_IRQHandler+0x1c8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d031      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	@ (8003438 <HAL_DMA_IRQHandler+0x1cc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d02c      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	@ (800343c <HAL_DMA_IRQHandler+0x1d0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d027      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_DMA_IRQHandler+0x1d4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d022      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <HAL_DMA_IRQHandler+0x1d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d01d      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_DMA_IRQHandler+0x1dc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d018      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <HAL_DMA_IRQHandler+0x1e0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003450 <HAL_DMA_IRQHandler+0x1e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00e      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003454 <HAL_DMA_IRQHandler+0x1e8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_DMA_IRQHandler+0x1ec>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_DMA_IRQHandler+0x194>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a18      	ldr	r2, [pc, #96]	@ (800345c <HAL_DMA_IRQHandler+0x1f0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d12f      	bne.n	8003460 <HAL_DMA_IRQHandler+0x1f4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e02e      	b.n	8003474 <HAL_DMA_IRQHandler+0x208>
 8003416:	bf00      	nop
 8003418:	24000004 	.word	0x24000004
 800341c:	1b4e81b5 	.word	0x1b4e81b5
 8003420:	40020010 	.word	0x40020010
 8003424:	40020028 	.word	0x40020028
 8003428:	40020040 	.word	0x40020040
 800342c:	40020058 	.word	0x40020058
 8003430:	40020070 	.word	0x40020070
 8003434:	40020088 	.word	0x40020088
 8003438:	400200a0 	.word	0x400200a0
 800343c:	400200b8 	.word	0x400200b8
 8003440:	40020410 	.word	0x40020410
 8003444:	40020428 	.word	0x40020428
 8003448:	40020440 	.word	0x40020440
 800344c:	40020458 	.word	0x40020458
 8003450:	40020470 	.word	0x40020470
 8003454:	40020488 	.word	0x40020488
 8003458:	400204a0 	.word	0x400204a0
 800345c:	400204b8 	.word	0x400204b8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2208      	movs	r2, #8
 8003492:	409a      	lsls	r2, r3
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06e      	beq.n	8003598 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a69      	ldr	r2, [pc, #420]	@ (8003664 <HAL_DMA_IRQHandler+0x3f8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d04a      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a67      	ldr	r2, [pc, #412]	@ (8003668 <HAL_DMA_IRQHandler+0x3fc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d045      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a66      	ldr	r2, [pc, #408]	@ (800366c <HAL_DMA_IRQHandler+0x400>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d040      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a64      	ldr	r2, [pc, #400]	@ (8003670 <HAL_DMA_IRQHandler+0x404>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d03b      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a63      	ldr	r2, [pc, #396]	@ (8003674 <HAL_DMA_IRQHandler+0x408>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d036      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a61      	ldr	r2, [pc, #388]	@ (8003678 <HAL_DMA_IRQHandler+0x40c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d031      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a60      	ldr	r2, [pc, #384]	@ (800367c <HAL_DMA_IRQHandler+0x410>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d02c      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5e      	ldr	r2, [pc, #376]	@ (8003680 <HAL_DMA_IRQHandler+0x414>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d027      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5d      	ldr	r2, [pc, #372]	@ (8003684 <HAL_DMA_IRQHandler+0x418>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a5b      	ldr	r2, [pc, #364]	@ (8003688 <HAL_DMA_IRQHandler+0x41c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01d      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a5a      	ldr	r2, [pc, #360]	@ (800368c <HAL_DMA_IRQHandler+0x420>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a58      	ldr	r2, [pc, #352]	@ (8003690 <HAL_DMA_IRQHandler+0x424>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a57      	ldr	r2, [pc, #348]	@ (8003694 <HAL_DMA_IRQHandler+0x428>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a55      	ldr	r2, [pc, #340]	@ (8003698 <HAL_DMA_IRQHandler+0x42c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a54      	ldr	r2, [pc, #336]	@ (800369c <HAL_DMA_IRQHandler+0x430>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_DMA_IRQHandler+0x2ee>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_DMA_IRQHandler+0x434>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10a      	bne.n	8003570 <HAL_DMA_IRQHandler+0x304>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e003      	b.n	8003578 <HAL_DMA_IRQHandler+0x30c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2201      	movs	r2, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	f043 0202 	orr.w	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2204      	movs	r2, #4
 80035a2:	409a      	lsls	r2, r3
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808f 	beq.w	80036cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003664 <HAL_DMA_IRQHandler+0x3f8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d04a      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003668 <HAL_DMA_IRQHandler+0x3fc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a29      	ldr	r2, [pc, #164]	@ (800366c <HAL_DMA_IRQHandler+0x400>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a27      	ldr	r2, [pc, #156]	@ (8003670 <HAL_DMA_IRQHandler+0x404>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d03b      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a26      	ldr	r2, [pc, #152]	@ (8003674 <HAL_DMA_IRQHandler+0x408>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a24      	ldr	r2, [pc, #144]	@ (8003678 <HAL_DMA_IRQHandler+0x40c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a23      	ldr	r2, [pc, #140]	@ (800367c <HAL_DMA_IRQHandler+0x410>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d02c      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a21      	ldr	r2, [pc, #132]	@ (8003680 <HAL_DMA_IRQHandler+0x414>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d027      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a20      	ldr	r2, [pc, #128]	@ (8003684 <HAL_DMA_IRQHandler+0x418>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <HAL_DMA_IRQHandler+0x41c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01d      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <HAL_DMA_IRQHandler+0x420>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d018      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <HAL_DMA_IRQHandler+0x424>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1a      	ldr	r2, [pc, #104]	@ (8003694 <HAL_DMA_IRQHandler+0x428>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00e      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <HAL_DMA_IRQHandler+0x42c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <HAL_DMA_IRQHandler+0x430>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_DMA_IRQHandler+0x3e2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a15      	ldr	r2, [pc, #84]	@ (80036a0 <HAL_DMA_IRQHandler+0x434>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12a      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x438>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e023      	b.n	80036ac <HAL_DMA_IRQHandler+0x440>
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2210      	movs	r2, #16
 80036d6:	409a      	lsls	r2, r3
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a6 	beq.w	800382e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a85      	ldr	r2, [pc, #532]	@ (80038fc <HAL_DMA_IRQHandler+0x690>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d04a      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a83      	ldr	r2, [pc, #524]	@ (8003900 <HAL_DMA_IRQHandler+0x694>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d045      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a82      	ldr	r2, [pc, #520]	@ (8003904 <HAL_DMA_IRQHandler+0x698>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a80      	ldr	r2, [pc, #512]	@ (8003908 <HAL_DMA_IRQHandler+0x69c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d03b      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a7f      	ldr	r2, [pc, #508]	@ (800390c <HAL_DMA_IRQHandler+0x6a0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d036      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7d      	ldr	r2, [pc, #500]	@ (8003910 <HAL_DMA_IRQHandler+0x6a4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d031      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7c      	ldr	r2, [pc, #496]	@ (8003914 <HAL_DMA_IRQHandler+0x6a8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d02c      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a7a      	ldr	r2, [pc, #488]	@ (8003918 <HAL_DMA_IRQHandler+0x6ac>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d027      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a79      	ldr	r2, [pc, #484]	@ (800391c <HAL_DMA_IRQHandler+0x6b0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a77      	ldr	r2, [pc, #476]	@ (8003920 <HAL_DMA_IRQHandler+0x6b4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a76      	ldr	r2, [pc, #472]	@ (8003924 <HAL_DMA_IRQHandler+0x6b8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a74      	ldr	r2, [pc, #464]	@ (8003928 <HAL_DMA_IRQHandler+0x6bc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a73      	ldr	r2, [pc, #460]	@ (800392c <HAL_DMA_IRQHandler+0x6c0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a71      	ldr	r2, [pc, #452]	@ (8003930 <HAL_DMA_IRQHandler+0x6c4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a70      	ldr	r2, [pc, #448]	@ (8003934 <HAL_DMA_IRQHandler+0x6c8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_IRQHandler+0x516>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a6e      	ldr	r2, [pc, #440]	@ (8003938 <HAL_DMA_IRQHandler+0x6cc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10a      	bne.n	8003798 <HAL_DMA_IRQHandler+0x52c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e009      	b.n	80037ac <HAL_DMA_IRQHandler+0x540>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03e      	beq.n	800382e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	2210      	movs	r2, #16
 80037ba:	409a      	lsls	r2, r3
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d018      	beq.n	8003800 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d108      	bne.n	80037ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d024      	beq.n	800382e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	e01f      	b.n	800382e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
 80037fe:	e016      	b.n	800382e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0208 	bic.w	r2, r2, #8
 800381c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2220      	movs	r2, #32
 8003838:	409a      	lsls	r2, r3
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8110 	beq.w	8003a64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2c      	ldr	r2, [pc, #176]	@ (80038fc <HAL_DMA_IRQHandler+0x690>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d04a      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2b      	ldr	r2, [pc, #172]	@ (8003900 <HAL_DMA_IRQHandler+0x694>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d045      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a29      	ldr	r2, [pc, #164]	@ (8003904 <HAL_DMA_IRQHandler+0x698>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d040      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a28      	ldr	r2, [pc, #160]	@ (8003908 <HAL_DMA_IRQHandler+0x69c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d03b      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a26      	ldr	r2, [pc, #152]	@ (800390c <HAL_DMA_IRQHandler+0x6a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d036      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a25      	ldr	r2, [pc, #148]	@ (8003910 <HAL_DMA_IRQHandler+0x6a4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d031      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	@ (8003914 <HAL_DMA_IRQHandler+0x6a8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d02c      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a22      	ldr	r2, [pc, #136]	@ (8003918 <HAL_DMA_IRQHandler+0x6ac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d027      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a20      	ldr	r2, [pc, #128]	@ (800391c <HAL_DMA_IRQHandler+0x6b0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d022      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003920 <HAL_DMA_IRQHandler+0x6b4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d01d      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <HAL_DMA_IRQHandler+0x6b8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d018      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <HAL_DMA_IRQHandler+0x6bc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a1a      	ldr	r2, [pc, #104]	@ (800392c <HAL_DMA_IRQHandler+0x6c0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00e      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a19      	ldr	r2, [pc, #100]	@ (8003930 <HAL_DMA_IRQHandler+0x6c4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <HAL_DMA_IRQHandler+0x6c8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x678>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a16      	ldr	r2, [pc, #88]	@ (8003938 <HAL_DMA_IRQHandler+0x6cc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d12b      	bne.n	800393c <HAL_DMA_IRQHandler+0x6d0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e02a      	b.n	8003950 <HAL_DMA_IRQHandler+0x6e4>
 80038fa:	bf00      	nop
 80038fc:	40020010 	.word	0x40020010
 8003900:	40020028 	.word	0x40020028
 8003904:	40020040 	.word	0x40020040
 8003908:	40020058 	.word	0x40020058
 800390c:	40020070 	.word	0x40020070
 8003910:	40020088 	.word	0x40020088
 8003914:	400200a0 	.word	0x400200a0
 8003918:	400200b8 	.word	0x400200b8
 800391c:	40020410 	.word	0x40020410
 8003920:	40020428 	.word	0x40020428
 8003924:	40020440 	.word	0x40020440
 8003928:	40020458 	.word	0x40020458
 800392c:	40020470 	.word	0x40020470
 8003930:	40020488 	.word	0x40020488
 8003934:	400204a0 	.word	0x400204a0
 8003938:	400204b8 	.word	0x400204b8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8087 	beq.w	8003a64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2220      	movs	r2, #32
 8003960:	409a      	lsls	r2, r3
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b04      	cmp	r3, #4
 8003970:	d139      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0216 	bic.w	r2, r2, #22
 8003980:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003990:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x736>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0208 	bic.w	r2, r2, #8
 80039b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	223f      	movs	r2, #63	@ 0x3f
 80039bc:	409a      	lsls	r2, r3
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 834a 	beq.w	8004070 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
          }
          return;
 80039e4:	e344      	b.n	8004070 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d108      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d02c      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	e027      	b.n	8003a64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d023      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
 8003a24:	e01e      	b.n	8003a64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10f      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0210 	bic.w	r2, r2, #16
 8003a42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8306 	beq.w	800407a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8088 	beq.w	8003b8c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a7a      	ldr	r2, [pc, #488]	@ (8003c74 <HAL_DMA_IRQHandler+0xa08>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d04a      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a79      	ldr	r2, [pc, #484]	@ (8003c78 <HAL_DMA_IRQHandler+0xa0c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d045      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a77      	ldr	r2, [pc, #476]	@ (8003c7c <HAL_DMA_IRQHandler+0xa10>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d040      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a76      	ldr	r2, [pc, #472]	@ (8003c80 <HAL_DMA_IRQHandler+0xa14>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d03b      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a74      	ldr	r2, [pc, #464]	@ (8003c84 <HAL_DMA_IRQHandler+0xa18>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d036      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a73      	ldr	r2, [pc, #460]	@ (8003c88 <HAL_DMA_IRQHandler+0xa1c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d031      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a71      	ldr	r2, [pc, #452]	@ (8003c8c <HAL_DMA_IRQHandler+0xa20>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02c      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a70      	ldr	r2, [pc, #448]	@ (8003c90 <HAL_DMA_IRQHandler+0xa24>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d027      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c94 <HAL_DMA_IRQHandler+0xa28>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d022      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6d      	ldr	r2, [pc, #436]	@ (8003c98 <HAL_DMA_IRQHandler+0xa2c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d01d      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6b      	ldr	r2, [pc, #428]	@ (8003c9c <HAL_DMA_IRQHandler+0xa30>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6a      	ldr	r2, [pc, #424]	@ (8003ca0 <HAL_DMA_IRQHandler+0xa34>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a68      	ldr	r2, [pc, #416]	@ (8003ca4 <HAL_DMA_IRQHandler+0xa38>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a67      	ldr	r2, [pc, #412]	@ (8003ca8 <HAL_DMA_IRQHandler+0xa3c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_DMA_IRQHandler+0xa40>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x8b8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a64      	ldr	r2, [pc, #400]	@ (8003cb0 <HAL_DMA_IRQHandler+0xa44>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d108      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x8ca>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <HAL_DMA_IRQHandler+0x8da>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d307      	bcc.n	8003b62 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f2      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x8da>
 8003b60:	e000      	b.n	8003b64 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b62:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2203      	movs	r2, #3
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b7a:	e003      	b.n	8003b84 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8272 	beq.w	800407a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
 8003b9e:	e26c      	b.n	800407a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a43      	ldr	r2, [pc, #268]	@ (8003cb4 <HAL_DMA_IRQHandler+0xa48>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <HAL_DMA_IRQHandler+0xa4c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a40      	ldr	r2, [pc, #256]	@ (8003cbc <HAL_DMA_IRQHandler+0xa50>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a3f      	ldr	r2, [pc, #252]	@ (8003cc0 <HAL_DMA_IRQHandler+0xa54>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8003cc4 <HAL_DMA_IRQHandler+0xa58>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <HAL_DMA_IRQHandler+0xa5c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3a      	ldr	r2, [pc, #232]	@ (8003ccc <HAL_DMA_IRQHandler+0xa60>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x984>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a39      	ldr	r2, [pc, #228]	@ (8003cd0 <HAL_DMA_IRQHandler+0xa64>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x988>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x98a>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 823f 	beq.w	800407a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80cd 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xb48>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80c7 	beq.w	8003db4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2204      	movs	r2, #4
 8003c30:	409a      	lsls	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d049      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8210 	beq.w	8004074 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c5c:	e20a      	b.n	8004074 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8206 	beq.w	8004074 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c70:	e200      	b.n	8004074 <HAL_DMA_IRQHandler+0xe08>
 8003c72:	bf00      	nop
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
 8003cb4:	58025408 	.word	0x58025408
 8003cb8:	5802541c 	.word	0x5802541c
 8003cbc:	58025430 	.word	0x58025430
 8003cc0:	58025444 	.word	0x58025444
 8003cc4:	58025458 	.word	0x58025458
 8003cc8:	5802546c 	.word	0x5802546c
 8003ccc:	58025480 	.word	0x58025480
 8003cd0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d160      	bne.n	8003da0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ee0 <HAL_DMA_IRQHandler+0xc74>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee4 <HAL_DMA_IRQHandler+0xc78>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee8 <HAL_DMA_IRQHandler+0xc7c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7a      	ldr	r2, [pc, #488]	@ (8003eec <HAL_DMA_IRQHandler+0xc80>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a79      	ldr	r2, [pc, #484]	@ (8003ef0 <HAL_DMA_IRQHandler+0xc84>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a77      	ldr	r2, [pc, #476]	@ (8003ef4 <HAL_DMA_IRQHandler+0xc88>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a76      	ldr	r2, [pc, #472]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc8c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a74      	ldr	r2, [pc, #464]	@ (8003efc <HAL_DMA_IRQHandler+0xc90>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	@ (8003f00 <HAL_DMA_IRQHandler+0xc94>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a71      	ldr	r2, [pc, #452]	@ (8003f04 <HAL_DMA_IRQHandler+0xc98>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a70      	ldr	r2, [pc, #448]	@ (8003f08 <HAL_DMA_IRQHandler+0xc9c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6e      	ldr	r2, [pc, #440]	@ (8003f0c <HAL_DMA_IRQHandler+0xca0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003f10 <HAL_DMA_IRQHandler+0xca4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	@ (8003f14 <HAL_DMA_IRQHandler+0xca8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003f18 <HAL_DMA_IRQHandler+0xcac>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xb12>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	@ (8003f1c <HAL_DMA_IRQHandler+0xcb0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d108      	bne.n	8003d90 <HAL_DMA_IRQHandler+0xb24>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0208 	bic.w	r2, r2, #8
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e007      	b.n	8003da0 <HAL_DMA_IRQHandler+0xb34>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8165 	beq.w	8004074 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db2:	e15f      	b.n	8004074 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80c5 	beq.w	8003f54 <HAL_DMA_IRQHandler+0xce8>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80bf 	beq.w	8003f54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2202      	movs	r2, #2
 8003de0:	409a      	lsls	r2, r3
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 813a 	beq.w	8004078 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0c:	e134      	b.n	8004078 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8130 	beq.w	8004078 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e20:	e12a      	b.n	8004078 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 8089 	bne.w	8003f40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee0 <HAL_DMA_IRQHandler+0xc74>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d04a      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a29      	ldr	r2, [pc, #164]	@ (8003ee4 <HAL_DMA_IRQHandler+0xc78>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d045      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a28      	ldr	r2, [pc, #160]	@ (8003ee8 <HAL_DMA_IRQHandler+0xc7c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d040      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <HAL_DMA_IRQHandler+0xc80>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d03b      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a25      	ldr	r2, [pc, #148]	@ (8003ef0 <HAL_DMA_IRQHandler+0xc84>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d036      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a23      	ldr	r2, [pc, #140]	@ (8003ef4 <HAL_DMA_IRQHandler+0xc88>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d031      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a22      	ldr	r2, [pc, #136]	@ (8003ef8 <HAL_DMA_IRQHandler+0xc8c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02c      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <HAL_DMA_IRQHandler+0xc90>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d027      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <HAL_DMA_IRQHandler+0xc94>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f04 <HAL_DMA_IRQHandler+0xc98>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <HAL_DMA_IRQHandler+0xc9c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <HAL_DMA_IRQHandler+0xca0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a19      	ldr	r2, [pc, #100]	@ (8003f10 <HAL_DMA_IRQHandler+0xca4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <HAL_DMA_IRQHandler+0xca8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <HAL_DMA_IRQHandler+0xcac>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_IRQHandler+0xc62>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a14      	ldr	r2, [pc, #80]	@ (8003f1c <HAL_DMA_IRQHandler+0xcb0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d128      	bne.n	8003f20 <HAL_DMA_IRQHandler+0xcb4>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0214 	bic.w	r2, r2, #20
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e027      	b.n	8003f30 <HAL_DMA_IRQHandler+0xcc4>
 8003ee0:	40020010 	.word	0x40020010
 8003ee4:	40020028 	.word	0x40020028
 8003ee8:	40020040 	.word	0x40020040
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	40020070 	.word	0x40020070
 8003ef4:	40020088 	.word	0x40020088
 8003ef8:	400200a0 	.word	0x400200a0
 8003efc:	400200b8 	.word	0x400200b8
 8003f00:	40020410 	.word	0x40020410
 8003f04:	40020428 	.word	0x40020428
 8003f08:	40020440 	.word	0x40020440
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	40020470 	.word	0x40020470
 8003f14:	40020488 	.word	0x40020488
 8003f18:	400204a0 	.word	0x400204a0
 8003f1c:	400204b8 	.word	0x400204b8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 020a 	bic.w	r2, r2, #10
 8003f2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8097 	beq.w	8004078 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f52:	e091      	b.n	8004078 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8088 	beq.w	800407a <HAL_DMA_IRQHandler+0xe0e>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8082 	beq.w	800407a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a41      	ldr	r2, [pc, #260]	@ (8004080 <HAL_DMA_IRQHandler+0xe14>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d04a      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3f      	ldr	r2, [pc, #252]	@ (8004084 <HAL_DMA_IRQHandler+0xe18>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d045      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8004088 <HAL_DMA_IRQHandler+0xe1c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d040      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a3c      	ldr	r2, [pc, #240]	@ (800408c <HAL_DMA_IRQHandler+0xe20>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03b      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8004090 <HAL_DMA_IRQHandler+0xe24>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d036      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a39      	ldr	r2, [pc, #228]	@ (8004094 <HAL_DMA_IRQHandler+0xe28>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a38      	ldr	r2, [pc, #224]	@ (8004098 <HAL_DMA_IRQHandler+0xe2c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d02c      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a36      	ldr	r2, [pc, #216]	@ (800409c <HAL_DMA_IRQHandler+0xe30>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d027      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a35      	ldr	r2, [pc, #212]	@ (80040a0 <HAL_DMA_IRQHandler+0xe34>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <HAL_DMA_IRQHandler+0xe38>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a32      	ldr	r2, [pc, #200]	@ (80040a8 <HAL_DMA_IRQHandler+0xe3c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a30      	ldr	r2, [pc, #192]	@ (80040ac <HAL_DMA_IRQHandler+0xe40>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80040b0 <HAL_DMA_IRQHandler+0xe44>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80040b4 <HAL_DMA_IRQHandler+0xe48>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2c      	ldr	r2, [pc, #176]	@ (80040b8 <HAL_DMA_IRQHandler+0xe4c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_DMA_IRQHandler+0xdaa>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2a      	ldr	r2, [pc, #168]	@ (80040bc <HAL_DMA_IRQHandler+0xe50>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d108      	bne.n	8004028 <HAL_DMA_IRQHandler+0xdbc>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 021c 	bic.w	r2, r2, #28
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e007      	b.n	8004038 <HAL_DMA_IRQHandler+0xdcc>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 020e 	bic.w	r2, r2, #14
 8004036:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2201      	movs	r2, #1
 8004042:	409a      	lsls	r2, r3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
 800406e:	e004      	b.n	800407a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004070:	bf00      	nop
 8004072:	e002      	b.n	800407a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004078:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40020010 	.word	0x40020010
 8004084:	40020028 	.word	0x40020028
 8004088:	40020040 	.word	0x40020040
 800408c:	40020058 	.word	0x40020058
 8004090:	40020070 	.word	0x40020070
 8004094:	40020088 	.word	0x40020088
 8004098:	400200a0 	.word	0x400200a0
 800409c:	400200b8 	.word	0x400200b8
 80040a0:	40020410 	.word	0x40020410
 80040a4:	40020428 	.word	0x40020428
 80040a8:	40020440 	.word	0x40020440
 80040ac:	40020458 	.word	0x40020458
 80040b0:	40020470 	.word	0x40020470
 80040b4:	40020488 	.word	0x40020488
 80040b8:	400204a0 	.word	0x400204a0
 80040bc:	400204b8 	.word	0x400204b8

080040c0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040ce:	b2db      	uxtb	r3, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a42      	ldr	r2, [pc, #264]	@ (80041f4 <DMA_CalcBaseAndBitshift+0x118>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d04a      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a41      	ldr	r2, [pc, #260]	@ (80041f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d045      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3f      	ldr	r2, [pc, #252]	@ (80041fc <DMA_CalcBaseAndBitshift+0x120>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d040      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3e      	ldr	r2, [pc, #248]	@ (8004200 <DMA_CalcBaseAndBitshift+0x124>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d03b      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a3c      	ldr	r2, [pc, #240]	@ (8004204 <DMA_CalcBaseAndBitshift+0x128>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d036      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a3b      	ldr	r2, [pc, #236]	@ (8004208 <DMA_CalcBaseAndBitshift+0x12c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d031      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a39      	ldr	r2, [pc, #228]	@ (800420c <DMA_CalcBaseAndBitshift+0x130>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d02c      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a38      	ldr	r2, [pc, #224]	@ (8004210 <DMA_CalcBaseAndBitshift+0x134>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d027      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a36      	ldr	r2, [pc, #216]	@ (8004214 <DMA_CalcBaseAndBitshift+0x138>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <DMA_CalcBaseAndBitshift+0x13c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01d      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <DMA_CalcBaseAndBitshift+0x140>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a32      	ldr	r2, [pc, #200]	@ (8004220 <DMA_CalcBaseAndBitshift+0x144>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a30      	ldr	r2, [pc, #192]	@ (8004224 <DMA_CalcBaseAndBitshift+0x148>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2f      	ldr	r2, [pc, #188]	@ (8004228 <DMA_CalcBaseAndBitshift+0x14c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2d      	ldr	r2, [pc, #180]	@ (800422c <DMA_CalcBaseAndBitshift+0x150>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <DMA_CalcBaseAndBitshift+0xa8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <DMA_CalcBaseAndBitshift+0x154>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <DMA_CalcBaseAndBitshift+0xac>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <DMA_CalcBaseAndBitshift+0xae>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d024      	beq.n	80041d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3b10      	subs	r3, #16
 8004196:	4a27      	ldr	r2, [pc, #156]	@ (8004234 <DMA_CalcBaseAndBitshift+0x158>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	4a24      	ldr	r2, [pc, #144]	@ (8004238 <DMA_CalcBaseAndBitshift+0x15c>)
 80041a8:	5cd3      	ldrb	r3, [r2, r3]
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d908      	bls.n	80041c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b1f      	ldr	r3, [pc, #124]	@ (800423c <DMA_CalcBaseAndBitshift+0x160>)
 80041be:	4013      	ands	r3, r2
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80041c6:	e00d      	b.n	80041e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <DMA_CalcBaseAndBitshift+0x160>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d6:	e005      	b.n	80041e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40020010 	.word	0x40020010
 80041f8:	40020028 	.word	0x40020028
 80041fc:	40020040 	.word	0x40020040
 8004200:	40020058 	.word	0x40020058
 8004204:	40020070 	.word	0x40020070
 8004208:	40020088 	.word	0x40020088
 800420c:	400200a0 	.word	0x400200a0
 8004210:	400200b8 	.word	0x400200b8
 8004214:	40020410 	.word	0x40020410
 8004218:	40020428 	.word	0x40020428
 800421c:	40020440 	.word	0x40020440
 8004220:	40020458 	.word	0x40020458
 8004224:	40020470 	.word	0x40020470
 8004228:	40020488 	.word	0x40020488
 800422c:	400204a0 	.word	0x400204a0
 8004230:	400204b8 	.word	0x400204b8
 8004234:	aaaaaaab 	.word	0xaaaaaaab
 8004238:	08012ae8 	.word	0x08012ae8
 800423c:	fffffc00 	.word	0xfffffc00

08004240 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d120      	bne.n	8004296 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004258:	2b03      	cmp	r3, #3
 800425a:	d858      	bhi.n	800430e <DMA_CheckFifoParam+0xce>
 800425c:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <DMA_CheckFifoParam+0x24>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004275 	.word	0x08004275
 8004268:	08004287 	.word	0x08004287
 800426c:	08004275 	.word	0x08004275
 8004270:	0800430f 	.word	0x0800430f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d048      	beq.n	8004312 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004284:	e045      	b.n	8004312 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800428e:	d142      	bne.n	8004316 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004294:	e03f      	b.n	8004316 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800429e:	d123      	bne.n	80042e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d838      	bhi.n	800431a <DMA_CheckFifoParam+0xda>
 80042a8:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <DMA_CheckFifoParam+0x70>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042c7 	.word	0x080042c7
 80042b8:	080042c1 	.word	0x080042c1
 80042bc:	080042d9 	.word	0x080042d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
        break;
 80042c4:	e030      	b.n	8004328 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d025      	beq.n	800431e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042d6:	e022      	b.n	800431e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042e0:	d11f      	bne.n	8004322 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042e6:	e01c      	b.n	8004322 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d902      	bls.n	80042f6 <DMA_CheckFifoParam+0xb6>
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d003      	beq.n	80042fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042f4:	e018      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
        break;
 80042fa:	e015      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00e      	beq.n	8004326 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
    break;
 800430c:	e00b      	b.n	8004326 <DMA_CheckFifoParam+0xe6>
        break;
 800430e:	bf00      	nop
 8004310:	e00a      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        break;
 8004312:	bf00      	nop
 8004314:	e008      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        break;
 8004316:	bf00      	nop
 8004318:	e006      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        break;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
        break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <DMA_CheckFifoParam+0xe8>
    break;
 8004326:	bf00      	nop
    }
  }

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop

08004338 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a38      	ldr	r2, [pc, #224]	@ (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a36      	ldr	r2, [pc, #216]	@ (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01d      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a35      	ldr	r2, [pc, #212]	@ (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a33      	ldr	r2, [pc, #204]	@ (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a32      	ldr	r2, [pc, #200]	@ (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a30      	ldr	r2, [pc, #192]	@ (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01a      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	3b08      	subs	r3, #8
 80043a8:	4a28      	ldr	r2, [pc, #160]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4b26      	ldr	r3, [pc, #152]	@ (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a24      	ldr	r2, [pc, #144]	@ (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043d4:	e024      	b.n	8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	3b10      	subs	r3, #16
 80043de:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a1c      	ldr	r2, [pc, #112]	@ (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d806      	bhi.n	80043fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d902      	bls.n	80043fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3308      	adds	r3, #8
 80043fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	461a      	mov	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a16      	ldr	r2, [pc, #88]	@ (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004410:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2201      	movs	r2, #1
 800441a:	409a      	lsls	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	58025408 	.word	0x58025408
 8004430:	5802541c 	.word	0x5802541c
 8004434:	58025430 	.word	0x58025430
 8004438:	58025444 	.word	0x58025444
 800443c:	58025458 	.word	0x58025458
 8004440:	5802546c 	.word	0x5802546c
 8004444:	58025480 	.word	0x58025480
 8004448:	58025494 	.word	0x58025494
 800444c:	cccccccd 	.word	0xcccccccd
 8004450:	16009600 	.word	0x16009600
 8004454:	58025880 	.word	0x58025880
 8004458:	aaaaaaab 	.word	0xaaaaaaab
 800445c:	400204b8 	.word	0x400204b8
 8004460:	4002040f 	.word	0x4002040f
 8004464:	10008200 	.word	0x10008200
 8004468:	40020880 	.word	0x40020880

0800446c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d04a      	beq.n	8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d847      	bhi.n	8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a25      	ldr	r2, [pc, #148]	@ (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d01d      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a22      	ldr	r2, [pc, #136]	@ (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	@ (8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1e      	ldr	r2, [pc, #120]	@ (8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	@ (800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4b17      	ldr	r3, [pc, #92]	@ (8004544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	461a      	mov	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80044f6:	e009      	b.n	800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4b14      	ldr	r3, [pc, #80]	@ (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800450a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b01      	subs	r3, #1
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	58025408 	.word	0x58025408
 8004528:	5802541c 	.word	0x5802541c
 800452c:	58025430 	.word	0x58025430
 8004530:	58025444 	.word	0x58025444
 8004534:	58025458 	.word	0x58025458
 8004538:	5802546c 	.word	0x5802546c
 800453c:	58025480 	.word	0x58025480
 8004540:	58025494 	.word	0x58025494
 8004544:	1600963f 	.word	0x1600963f
 8004548:	58025940 	.word	0x58025940
 800454c:	1000823f 	.word	0x1000823f
 8004550:	40020940 	.word	0x40020940

08004554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004554:	b480      	push	{r7}
 8004556:	b089      	sub	sp, #36	@ 0x24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004562:	4b89      	ldr	r3, [pc, #548]	@ (8004788 <HAL_GPIO_Init+0x234>)
 8004564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004566:	e194      	b.n	8004892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8186 	beq.w	800488c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d005      	beq.n	8004598 <HAL_GPIO_Init+0x44>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d130      	bne.n	80045fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ce:	2201      	movs	r2, #1
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4013      	ands	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0201 	and.w	r2, r3, #1
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d017      	beq.n	8004636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2203      	movs	r2, #3
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d123      	bne.n	800468a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	08da      	lsrs	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3208      	adds	r2, #8
 800464a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	08da      	lsrs	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3208      	adds	r2, #8
 8004684:	69b9      	ldr	r1, [r7, #24]
 8004686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80e0 	beq.w	800488c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046cc:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <HAL_GPIO_Init+0x238>)
 80046ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046d2:	4a2e      	ldr	r2, [pc, #184]	@ (800478c <HAL_GPIO_Init+0x238>)
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046dc:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <HAL_GPIO_Init+0x238>)
 80046de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ea:	4a29      	ldr	r2, [pc, #164]	@ (8004790 <HAL_GPIO_Init+0x23c>)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a20      	ldr	r2, [pc, #128]	@ (8004794 <HAL_GPIO_Init+0x240>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d052      	beq.n	80047bc <HAL_GPIO_Init+0x268>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1f      	ldr	r2, [pc, #124]	@ (8004798 <HAL_GPIO_Init+0x244>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d031      	beq.n	8004782 <HAL_GPIO_Init+0x22e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1e      	ldr	r2, [pc, #120]	@ (800479c <HAL_GPIO_Init+0x248>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02b      	beq.n	800477e <HAL_GPIO_Init+0x22a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <HAL_GPIO_Init+0x24c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d025      	beq.n	800477a <HAL_GPIO_Init+0x226>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <HAL_GPIO_Init+0x250>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <HAL_GPIO_Init+0x222>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1b      	ldr	r2, [pc, #108]	@ (80047a8 <HAL_GPIO_Init+0x254>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d019      	beq.n	8004772 <HAL_GPIO_Init+0x21e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1a      	ldr	r2, [pc, #104]	@ (80047ac <HAL_GPIO_Init+0x258>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_GPIO_Init+0x21a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_GPIO_Init+0x25c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00d      	beq.n	800476a <HAL_GPIO_Init+0x216>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_GPIO_Init+0x260>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_GPIO_Init+0x212>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a17      	ldr	r2, [pc, #92]	@ (80047b8 <HAL_GPIO_Init+0x264>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_GPIO_Init+0x20e>
 800475e:	2309      	movs	r3, #9
 8004760:	e02d      	b.n	80047be <HAL_GPIO_Init+0x26a>
 8004762:	230a      	movs	r3, #10
 8004764:	e02b      	b.n	80047be <HAL_GPIO_Init+0x26a>
 8004766:	2308      	movs	r3, #8
 8004768:	e029      	b.n	80047be <HAL_GPIO_Init+0x26a>
 800476a:	2307      	movs	r3, #7
 800476c:	e027      	b.n	80047be <HAL_GPIO_Init+0x26a>
 800476e:	2306      	movs	r3, #6
 8004770:	e025      	b.n	80047be <HAL_GPIO_Init+0x26a>
 8004772:	2305      	movs	r3, #5
 8004774:	e023      	b.n	80047be <HAL_GPIO_Init+0x26a>
 8004776:	2304      	movs	r3, #4
 8004778:	e021      	b.n	80047be <HAL_GPIO_Init+0x26a>
 800477a:	2303      	movs	r3, #3
 800477c:	e01f      	b.n	80047be <HAL_GPIO_Init+0x26a>
 800477e:	2302      	movs	r3, #2
 8004780:	e01d      	b.n	80047be <HAL_GPIO_Init+0x26a>
 8004782:	2301      	movs	r3, #1
 8004784:	e01b      	b.n	80047be <HAL_GPIO_Init+0x26a>
 8004786:	bf00      	nop
 8004788:	58000080 	.word	0x58000080
 800478c:	58024400 	.word	0x58024400
 8004790:	58000400 	.word	0x58000400
 8004794:	58020000 	.word	0x58020000
 8004798:	58020400 	.word	0x58020400
 800479c:	58020800 	.word	0x58020800
 80047a0:	58020c00 	.word	0x58020c00
 80047a4:	58021000 	.word	0x58021000
 80047a8:	58021400 	.word	0x58021400
 80047ac:	58021800 	.word	0x58021800
 80047b0:	58021c00 	.word	0x58021c00
 80047b4:	58022000 	.word	0x58022000
 80047b8:	58022400 	.word	0x58022400
 80047bc:	2300      	movs	r3, #0
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	f002 0203 	and.w	r2, r2, #3
 80047c4:	0092      	lsls	r2, r2, #2
 80047c6:	4093      	lsls	r3, r2
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ce:	4938      	ldr	r1, [pc, #224]	@ (80048b0 <HAL_GPIO_Init+0x35c>)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	3302      	adds	r3, #2
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800480a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3301      	adds	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f ae63 	bne.w	8004568 <HAL_GPIO_Init+0x14>
  }
}
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
 80048a6:	3724      	adds	r7, #36	@ 0x24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	58000400 	.word	0x58000400

080048b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
 80048c0:	4613      	mov	r3, r2
 80048c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048c4:	787b      	ldrb	r3, [r7, #1]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80048d0:	e003      	b.n	80048da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048d2:	887b      	ldrh	r3, [r7, #2]
 80048d4:	041a      	lsls	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	619a      	str	r2, [r3, #24]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e08b      	b.n	8004a12 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc fe36 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	@ 0x24
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004938:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004948:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	e006      	b.n	8004970 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800496e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d108      	bne.n	800498a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	e007      	b.n	800499a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <HAL_I2C_Init+0x134>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	02008000 	.word	0x02008000

08004a20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	09db      	lsrs	r3, r3, #7
 8004a7c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a88:	f043 0201 	orr.w	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a98:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	0a9b      	lsrs	r3, r3, #10
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d010      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	09db      	lsrs	r3, r3, #7
 8004aaa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	f043 0208 	orr.w	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ac6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	0a5b      	lsrs	r3, r3, #9
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d010      	beq.n	8004af6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	09db      	lsrs	r3, r3, #7
 8004ad8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae4:	f043 0202 	orr.w	r2, r3, #2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004af4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 030b 	and.w	r3, r3, #11
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004b06:	68f9      	ldr	r1, [r7, #12]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fcdb 	bl	80054c4 <I2C_ITError>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <I2C_Slave_ISR_IT+0x24>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0ed      	b.n	8004d96 <I2C_Slave_ISR_IT+0x200>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	095b      	lsrs	r3, r3, #5
 8004bd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004bda:	6939      	ldr	r1, [r7, #16]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f9c1 	bl	8004f64 <I2C_ITSlaveCplt>
 8004be2:	e0d3      	b.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d04d      	beq.n	8004c8c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d047      	beq.n	8004c8c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d128      	bne.n	8004c58 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b28      	cmp	r3, #40	@ 0x28
 8004c10:	d108      	bne.n	8004c24 <I2C_Slave_ISR_IT+0x8e>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c18:	d104      	bne.n	8004c24 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fbfb 	bl	8005418 <I2C_ITListenCplt>
 8004c22:	e032      	b.n	8004c8a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b29      	cmp	r3, #41	@ 0x29
 8004c2e:	d10e      	bne.n	8004c4e <I2C_Slave_ISR_IT+0xb8>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c36:	d00a      	beq.n	8004c4e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fd56 	bl	80056f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f92d 	bl	8004ea6 <I2C_ITSlaveSeqCplt>
 8004c4c:	e01d      	b.n	8004c8a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2210      	movs	r2, #16
 8004c54:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004c56:	e096      	b.n	8004d86 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <I2C_Slave_ISR_IT+0xe6>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c78:	f040 8085 	bne.w	8004d86 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	4619      	mov	r1, r3
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fc1e 	bl	80054c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004c88:	e07d      	b.n	8004d86 <I2C_Slave_ISR_IT+0x1f0>
 8004c8a:	e07c      	b.n	8004d86 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d030      	beq.n	8004cfa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	089b      	lsrs	r3, r3, #2
 8004c9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02a      	beq.n	8004cfa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d14f      	bne.n	8004d8a <I2C_Slave_ISR_IT+0x1f4>
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cf0:	d04b      	beq.n	8004d8a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f8d7 	bl	8004ea6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004cf8:	e047      	b.n	8004d8a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	08db      	lsrs	r3, r3, #3
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	08db      	lsrs	r3, r3, #3
 8004d0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d004      	beq.n	8004d1c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004d12:	6939      	ldr	r1, [r7, #16]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f842 	bl	8004d9e <I2C_ITAddrCplt>
 8004d1a:	e037      	b.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d031      	beq.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	085b      	lsrs	r3, r3, #1
 8004d2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d02b      	beq.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d018      	beq.n	8004d70 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004d6e:	e00d      	b.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d76:	d002      	beq.n	8004d7e <I2C_Slave_ISR_IT+0x1e8>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f891 	bl	8004ea6 <I2C_ITSlaveSeqCplt>
 8004d84:	e002      	b.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004d8a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004db4:	2b28      	cmp	r3, #40	@ 0x28
 8004db6:	d16a      	bne.n	8004e8e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004dd6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004df2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d138      	bne.n	8004e6e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004dfc:	897b      	ldrh	r3, [r7, #10]
 8004dfe:	09db      	lsrs	r3, r3, #7
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	89bb      	ldrh	r3, [r7, #12]
 8004e04:	4053      	eors	r3, r2
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f003 0306 	and.w	r3, r3, #6
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11c      	bne.n	8004e4a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004e10:	897b      	ldrh	r3, [r7, #10]
 8004e12:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d13b      	bne.n	8004e9e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2208      	movs	r2, #8
 8004e32:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e3c:	89ba      	ldrh	r2, [r7, #12]
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fe7b 	bl	8004b3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e48:	e029      	b.n	8004e9e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fc8f 	bl	8005776 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e60:	89ba      	ldrh	r2, [r7, #12]
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe69 	bl	8004b3e <HAL_I2C_AddrCallback>
}
 8004e6c:	e017      	b.n	8004e9e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fc7f 	bl	8005776 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e80:	89ba      	ldrh	r2, [r7, #12]
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe59 	bl	8004b3e <HAL_I2C_AddrCallback>
}
 8004e8c:	e007      	b.n	8004e9e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2208      	movs	r2, #8
 8004e94:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	0b9b      	lsrs	r3, r3, #14
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e00d      	b.n	8004ef8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0bdb      	lsrs	r3, r3, #15
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ef6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b29      	cmp	r3, #41	@ 0x29
 8004f02:	d112      	bne.n	8004f2a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2228      	movs	r2, #40	@ 0x28
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2221      	movs	r2, #33	@ 0x21
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f12:	2101      	movs	r1, #1
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fc2e 	bl	8005776 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fdf7 	bl	8004b16 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f28:	e017      	b.n	8004f5a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f34:	d111      	bne.n	8004f5a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2228      	movs	r2, #40	@ 0x28
 8004f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2222      	movs	r2, #34	@ 0x22
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f44:	2102      	movs	r1, #2
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fc15 	bl	8005776 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fde8 	bl	8004b2a <HAL_I2C_SlaveRxCpltCallback>
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f86:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f90:	7afb      	ldrb	r3, [r7, #11]
 8004f92:	2b21      	cmp	r3, #33	@ 0x21
 8004f94:	d002      	beq.n	8004f9c <I2C_ITSlaveCplt+0x38>
 8004f96:	7afb      	ldrb	r3, [r7, #11]
 8004f98:	2b29      	cmp	r3, #41	@ 0x29
 8004f9a:	d108      	bne.n	8004fae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004f9c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fbe8 	bl	8005776 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2221      	movs	r2, #33	@ 0x21
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fac:	e019      	b.n	8004fe2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fae:	7afb      	ldrb	r3, [r7, #11]
 8004fb0:	2b22      	cmp	r3, #34	@ 0x22
 8004fb2:	d002      	beq.n	8004fba <I2C_ITSlaveCplt+0x56>
 8004fb4:	7afb      	ldrb	r3, [r7, #11]
 8004fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fb8:	d108      	bne.n	8004fcc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004fba:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fbd9 	bl	8005776 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2222      	movs	r2, #34	@ 0x22
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fca:	e00a      	b.n	8004fe2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
 8004fce:	2b28      	cmp	r3, #40	@ 0x28
 8004fd0:	d107      	bne.n	8004fe2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004fd2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fbcd 	bl	8005776 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b80      	ldr	r3, [pc, #512]	@ (8005200 <I2C_ITSlaveCplt+0x29c>)
 8004ffe:	400b      	ands	r3, r1
 8005000:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fb75 	bl	80056f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	0b9b      	lsrs	r3, r3, #14
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d07a      	beq.n	800510a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005022:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8112 	beq.w	8005252 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a73      	ldr	r2, [pc, #460]	@ (8005204 <I2C_ITSlaveCplt+0x2a0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d059      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a71      	ldr	r2, [pc, #452]	@ (8005208 <I2C_ITSlaveCplt+0x2a4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d053      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6f      	ldr	r2, [pc, #444]	@ (800520c <I2C_ITSlaveCplt+0x2a8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d04d      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6d      	ldr	r2, [pc, #436]	@ (8005210 <I2C_ITSlaveCplt+0x2ac>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d047      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a6b      	ldr	r2, [pc, #428]	@ (8005214 <I2C_ITSlaveCplt+0x2b0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d041      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a69      	ldr	r2, [pc, #420]	@ (8005218 <I2C_ITSlaveCplt+0x2b4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a67      	ldr	r2, [pc, #412]	@ (800521c <I2C_ITSlaveCplt+0x2b8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d035      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a65      	ldr	r2, [pc, #404]	@ (8005220 <I2C_ITSlaveCplt+0x2bc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02f      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a63      	ldr	r2, [pc, #396]	@ (8005224 <I2C_ITSlaveCplt+0x2c0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d029      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a61      	ldr	r2, [pc, #388]	@ (8005228 <I2C_ITSlaveCplt+0x2c4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d023      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5f      	ldr	r2, [pc, #380]	@ (800522c <I2C_ITSlaveCplt+0x2c8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005230 <I2C_ITSlaveCplt+0x2cc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d017      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a5b      	ldr	r2, [pc, #364]	@ (8005234 <I2C_ITSlaveCplt+0x2d0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d011      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a59      	ldr	r2, [pc, #356]	@ (8005238 <I2C_ITSlaveCplt+0x2d4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00b      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a57      	ldr	r2, [pc, #348]	@ (800523c <I2C_ITSlaveCplt+0x2d8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d005      	beq.n	80050ee <I2C_ITSlaveCplt+0x18a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a55      	ldr	r2, [pc, #340]	@ (8005240 <I2C_ITSlaveCplt+0x2dc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d105      	bne.n	80050fa <I2C_ITSlaveCplt+0x196>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	e004      	b.n	8005104 <I2C_ITSlaveCplt+0x1a0>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	b29b      	uxth	r3, r3
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005108:	e0a3      	b.n	8005252 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	0bdb      	lsrs	r3, r3, #15
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 809d 	beq.w	8005252 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005126:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8090 	beq.w	8005252 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a32      	ldr	r2, [pc, #200]	@ (8005204 <I2C_ITSlaveCplt+0x2a0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d059      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a30      	ldr	r2, [pc, #192]	@ (8005208 <I2C_ITSlaveCplt+0x2a4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d053      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2e      	ldr	r2, [pc, #184]	@ (800520c <I2C_ITSlaveCplt+0x2a8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d04d      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2c      	ldr	r2, [pc, #176]	@ (8005210 <I2C_ITSlaveCplt+0x2ac>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d047      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2a      	ldr	r2, [pc, #168]	@ (8005214 <I2C_ITSlaveCplt+0x2b0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d041      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a28      	ldr	r2, [pc, #160]	@ (8005218 <I2C_ITSlaveCplt+0x2b4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d03b      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a26      	ldr	r2, [pc, #152]	@ (800521c <I2C_ITSlaveCplt+0x2b8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d035      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <I2C_ITSlaveCplt+0x2bc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02f      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a22      	ldr	r2, [pc, #136]	@ (8005224 <I2C_ITSlaveCplt+0x2c0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d029      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a20      	ldr	r2, [pc, #128]	@ (8005228 <I2C_ITSlaveCplt+0x2c4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d023      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1e      	ldr	r2, [pc, #120]	@ (800522c <I2C_ITSlaveCplt+0x2c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01d      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005230 <I2C_ITSlaveCplt+0x2cc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d017      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005234 <I2C_ITSlaveCplt+0x2d0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d011      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	@ (8005238 <I2C_ITSlaveCplt+0x2d4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <I2C_ITSlaveCplt+0x2d8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d005      	beq.n	80051f2 <I2C_ITSlaveCplt+0x28e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <I2C_ITSlaveCplt+0x2dc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d128      	bne.n	8005244 <I2C_ITSlaveCplt+0x2e0>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	e027      	b.n	800524e <I2C_ITSlaveCplt+0x2ea>
 80051fe:	bf00      	nop
 8005200:	fe00e800 	.word	0xfe00e800
 8005204:	40020010 	.word	0x40020010
 8005208:	40020028 	.word	0x40020028
 800520c:	40020040 	.word	0x40020040
 8005210:	40020058 	.word	0x40020058
 8005214:	40020070 	.word	0x40020070
 8005218:	40020088 	.word	0x40020088
 800521c:	400200a0 	.word	0x400200a0
 8005220:	400200b8 	.word	0x400200b8
 8005224:	40020410 	.word	0x40020410
 8005228:	40020428 	.word	0x40020428
 800522c:	40020440 	.word	0x40020440
 8005230:	40020458 	.word	0x40020458
 8005234:	40020470 	.word	0x40020470
 8005238:	40020488 	.word	0x40020488
 800523c:	400204a0 	.word	0x400204a0
 8005240:	400204b8 	.word	0x400204b8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	b29b      	uxth	r3, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d020      	beq.n	80052a0 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04a      	beq.n	8005358 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d044      	beq.n	8005358 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d128      	bne.n	800532a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b28      	cmp	r3, #40	@ 0x28
 80052e2:	d108      	bne.n	80052f6 <I2C_ITSlaveCplt+0x392>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ea:	d104      	bne.n	80052f6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80052ec:	6979      	ldr	r1, [r7, #20]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f892 	bl	8005418 <I2C_ITListenCplt>
 80052f4:	e030      	b.n	8005358 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b29      	cmp	r3, #41	@ 0x29
 8005300:	d10e      	bne.n	8005320 <I2C_ITSlaveCplt+0x3bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005308:	d00a      	beq.n	8005320 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2210      	movs	r2, #16
 8005310:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9ed 	bl	80056f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fdc4 	bl	8004ea6 <I2C_ITSlaveSeqCplt>
 800531e:	e01b      	b.n	8005358 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2210      	movs	r2, #16
 8005326:	61da      	str	r2, [r3, #28]
 8005328:	e016      	b.n	8005358 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2210      	movs	r2, #16
 8005330:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005336:	f043 0204 	orr.w	r2, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <I2C_ITSlaveCplt+0x3e8>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800534a:	d105      	bne.n	8005358 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8b6 	bl	80054c4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	2b00      	cmp	r3, #0
 800536c:	d010      	beq.n	8005390 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f8a5 	bl	80054c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b28      	cmp	r3, #40	@ 0x28
 8005384:	d141      	bne.n	800540a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f845 	bl	8005418 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800538e:	e03c      	b.n	800540a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005398:	d014      	beq.n	80053c4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fd83 	bl	8004ea6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <I2C_ITSlaveCplt+0x4b0>)
 80053a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fbcc 	bl	8004b5a <HAL_I2C_ListenCpltCallback>
}
 80053c2:	e022      	b.n	800540a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b22      	cmp	r3, #34	@ 0x22
 80053ce:	d10e      	bne.n	80053ee <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fb9f 	bl	8004b2a <HAL_I2C_SlaveRxCpltCallback>
}
 80053ec:	e00d      	b.n	800540a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fb86 	bl	8004b16 <HAL_I2C_SlaveTxCpltCallback>
}
 800540a:	bf00      	nop
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	ffff0000 	.word	0xffff0000

08005418 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a26      	ldr	r2, [pc, #152]	@ (80054c0 <I2C_ITListenCplt+0xa8>)
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d022      	beq.n	8005496 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	d012      	beq.n	8005496 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005496:	f248 0103 	movw	r1, #32771	@ 0x8003
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f96b 	bl	8005776 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2210      	movs	r2, #16
 80054a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fb52 	bl	8004b5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	ffff0000 	.word	0xffff0000

080054c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a6d      	ldr	r2, [pc, #436]	@ (8005698 <I2C_ITError+0x1d4>)
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b28      	cmp	r3, #40	@ 0x28
 80054fa:	d005      	beq.n	8005508 <I2C_ITError+0x44>
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b29      	cmp	r3, #41	@ 0x29
 8005500:	d002      	beq.n	8005508 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b2a      	cmp	r3, #42	@ 0x2a
 8005506:	d10b      	bne.n	8005520 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005508:	2103      	movs	r1, #3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f933 	bl	8005776 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2228      	movs	r2, #40	@ 0x28
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a60      	ldr	r2, [pc, #384]	@ (800569c <I2C_ITError+0x1d8>)
 800551c:	635a      	str	r2, [r3, #52]	@ 0x34
 800551e:	e030      	b.n	8005582 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005520:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f926 	bl	8005776 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8e1 	bl	80056f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b60      	cmp	r3, #96	@ 0x60
 800553a:	d01f      	beq.n	800557c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d114      	bne.n	800557c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d109      	bne.n	8005574 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2210      	movs	r2, #16
 8005566:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556c:	f043 0204 	orr.w	r2, r3, #4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2220      	movs	r2, #32
 800557a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d039      	beq.n	8005604 <I2C_ITError+0x140>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b11      	cmp	r3, #17
 8005594:	d002      	beq.n	800559c <I2C_ITError+0xd8>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b21      	cmp	r3, #33	@ 0x21
 800559a:	d133      	bne.n	8005604 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055aa:	d107      	bne.n	80055bc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe fd7d 	bl	80040c0 <HAL_DMA_GetState>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d017      	beq.n	80055fc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	4a33      	ldr	r2, [pc, #204]	@ (80056a0 <I2C_ITError+0x1dc>)
 80055d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fd fbfd 	bl	8002de0 <HAL_DMA_Abort_IT>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d04d      	beq.n	8005688 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055f6:	4610      	mov	r0, r2
 80055f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055fa:	e045      	b.n	8005688 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f851 	bl	80056a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005602:	e041      	b.n	8005688 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005608:	2b00      	cmp	r3, #0
 800560a:	d039      	beq.n	8005680 <I2C_ITError+0x1bc>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b12      	cmp	r3, #18
 8005610:	d002      	beq.n	8005618 <I2C_ITError+0x154>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b22      	cmp	r3, #34	@ 0x22
 8005616:	d133      	bne.n	8005680 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005626:	d107      	bne.n	8005638 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005636:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe fd3f 	bl	80040c0 <HAL_DMA_GetState>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d017      	beq.n	8005678 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800564c:	4a14      	ldr	r2, [pc, #80]	@ (80056a0 <I2C_ITError+0x1dc>)
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	4618      	mov	r0, r3
 800565e:	f7fd fbbf 	bl	8002de0 <HAL_DMA_Abort_IT>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d011      	beq.n	800568c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005672:	4610      	mov	r0, r2
 8005674:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005676:	e009      	b.n	800568c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f813 	bl	80056a4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800567e:	e005      	b.n	800568c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f80f 	bl	80056a4 <I2C_TreatErrorCallback>
  }
}
 8005686:	e002      	b.n	800568e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800568c:	bf00      	nop
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	ffff0000 	.word	0xffff0000
 800569c:	08004b97 	.word	0x08004b97
 80056a0:	0800573b 	.word	0x0800573b

080056a4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b60      	cmp	r3, #96	@ 0x60
 80056b6:	d10e      	bne.n	80056d6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fa57 	bl	8004b82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056d4:	e009      	b.n	80056ea <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fa42 	bl	8004b6e <HAL_I2C_ErrorCallback>
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d103      	bne.n	8005710 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2200      	movs	r2, #0
 800570e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b01      	cmp	r3, #1
 800571c:	d007      	beq.n	800572e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0201 	orr.w	r2, r2, #1
 800572c:	619a      	str	r2, [r3, #24]
  }
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	2200      	movs	r2, #0
 8005756:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005764:	2200      	movs	r2, #0
 8005766:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ff9b 	bl	80056a4 <I2C_TreatErrorCallback>
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00f      	beq.n	80057b0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005796:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057a4:	2b28      	cmp	r3, #40	@ 0x28
 80057a6:	d003      	beq.n	80057b0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80057ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80057b0:	887b      	ldrh	r3, [r7, #2]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00f      	beq.n	80057da <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80057c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057ce:	2b28      	cmp	r3, #40	@ 0x28
 80057d0:	d003      	beq.n	80057da <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80057d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da03      	bge.n	80057ea <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d103      	bne.n	80057f8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057f8:	887b      	ldrh	r3, [r7, #2]
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d103      	bne.n	8005806 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f043 0320 	orr.w	r3, r3, #32
 8005804:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	2b40      	cmp	r3, #64	@ 0x40
 800580a:	d103      	bne.n	8005814 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	43da      	mvns	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	400a      	ands	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b20      	cmp	r3, #32
 8005846:	d138      	bne.n	80058ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005852:	2302      	movs	r3, #2
 8005854:	e032      	b.n	80058bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2224      	movs	r2, #36	@ 0x24
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005884:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6819      	ldr	r1, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e000      	b.n	80058bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
  }
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d139      	bne.n	8005952 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e033      	b.n	8005954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2224      	movs	r2, #36	@ 0x24
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800591a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0201 	orr.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e070      	b.n	8005a54 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb fe86 	bl	8001698 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80059f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a19      	ldr	r2, [pc, #100]	@ (8005a5c <HAL_JPEG_Init+0xfc>)
 80059f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <HAL_JPEG_Init+0x100>)
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fc83 	bl	8006318 <JPEG_Set_HuffEnc_Mem>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e018      	b.n	8005a54 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a30:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	08012cd0 	.word	0x08012cd0
 8005a60:	08012d10 	.word	0x08012d10

08005a64 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_JPEG_GetInfo+0x16>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e083      	b.n	8005b86 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d103      	bne.n	8005a94 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e017      	b.n	8005ac4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e00c      	b.n	8005ac4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d103      	bne.n	8005ac0 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2230      	movs	r2, #48	@ 0x30
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e001      	b.n	8005ac4 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e060      	b.n	8005b86 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d003      	beq.n	8005af0 <HAL_JPEG_GetInfo+0x8c>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b30      	cmp	r3, #48	@ 0x30
 8005aee:	d140      	bne.n	8005b72 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	091b      	lsrs	r3, r3, #4
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	091b      	lsrs	r3, r3, #4
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d109      	bne.n	8005b34 <HAL_JPEG_GetInfo+0xd0>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_JPEG_GetInfo+0xd0>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e01d      	b.n	8005b70 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <HAL_JPEG_GetInfo+0xea>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_JPEG_GetInfo+0xea>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	e010      	b.n	8005b70 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d109      	bne.n	8005b68 <HAL_JPEG_GetInfo+0x104>
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_JPEG_GetInfo+0x104>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d103      	bne.n	8005b68 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	e003      	b.n	8005b70 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8005b6e:	e003      	b.n	8005b78 <HAL_JPEG_GetInfo+0x114>
 8005b70:	e002      	b.n	8005b78 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2200      	movs	r2, #0
 8005b76:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f001 fa7d 	bl	8007078 <JPEG_GetQuality>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b0c      	cmp	r3, #12
 8005ba6:	d116      	bne.n	8005bd6 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d033      	beq.n	8005c30 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bcc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005bd4:	e02c      	b.n	8005c30 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d126      	bne.n	8005c30 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f043 0306 	orr.w	r3, r3, #6
 8005bfe:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8005c1c:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	43da      	mvns	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	400a      	ands	r2, r1
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	3b03      	subs	r3, #3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d813      	bhi.n	8005cee <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d103      	bne.n	8005cda <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fda2 	bl	800681c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8005cd8:	e00b      	b.n	8005cf2 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b0c      	cmp	r3, #12
 8005ce4:	d105      	bne.n	8005cf2 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 f847 	bl	8006d7a <JPEG_DMA_ContinueProcess>
      break;
 8005cec:	e001      	b.n	8005cf2 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_JPEG_IRQHandler+0x44>
      break;
 8005cf2:	bf00      	nop
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b08b      	sub	sp, #44	@ 0x2c
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e020      	b.n	8005d56 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	4413      	add	r3, r2
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d28:	d90f      	bls.n	8005d4a <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e055      	b.n	8005dda <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	440b      	add	r3, r1
 8005d38:	3201      	adds	r2, #1
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
      p++;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	3301      	adds	r3, #1
 8005d42:	623b      	str	r3, [r7, #32]
      i--;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	3b01      	subs	r3, #1
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ee      	bne.n	8005d2e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	3301      	adds	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2b0f      	cmp	r3, #15
 8005d5a:	d9db      	bls.n	8005d14 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6a3a      	ldr	r2, [r7, #32]
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	617b      	str	r3, [r7, #20]
  p = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8005d7a:	e027      	b.n	8005dcc <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]
      p++;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	623b      	str	r3, [r7, #32]
      code++;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3301      	adds	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4413      	add	r3, r2
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d0eb      	beq.n	8005d7c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b1f      	cmp	r3, #31
 8005da8:	d901      	bls.n	8005dae <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e015      	b.n	8005dda <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005dae:	2201      	movs	r2, #1
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d301      	bcc.n	8005dc0 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e00c      	b.n	8005dda <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	61bb      	str	r3, [r7, #24]
    si++;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1dd      	bne.n	8005d94 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	372c      	adds	r7, #44	@ 0x2c
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005df2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8005df6:	6018      	str	r0, [r3, #0]
 8005df8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005dfc:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8005e00:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005e02:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005e06:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	f107 020c 	add.w	r2, r7, #12
 8005e14:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8005e18:	f7ff ff70 	bl	8005cfc <JPEG_Bits_To_SizeCodes>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8005e22:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8005e2a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8005e2e:	e075      	b.n	8005f1c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8005e36:	e067      	b.n	8005f08 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8005e38:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005e3c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005e46:	4413      	add	r3, r2
 8005e48:	3310      	adds	r3, #16
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8005e50:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8005e58:	23a0      	movs	r3, #160	@ 0xa0
 8005e5a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8005e5e:	e021      	b.n	8005ea4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8005e60:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005e64:	2bf0      	cmp	r3, #240	@ 0xf0
 8005e66:	d103      	bne.n	8005e70 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8005e68:	23a1      	movs	r3, #161	@ 0xa1
 8005e6a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8005e6e:	e019      	b.n	8005ea4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8005e70:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8005e7e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8005e8a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	461a      	mov	r2, r3
 8005e98:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005ea4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005ea8:	2ba1      	cmp	r3, #161	@ 0xa1
 8005eaa:	d901      	bls.n	8005eb0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005eac:	2301      	movs	r3, #1
 8005eae:	e035      	b.n	8005f1c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005eb0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005eb4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005eb8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8005ebc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ec0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005ec4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8005ec8:	6819      	ldr	r1, [r3, #0]
 8005eca:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005ece:	3328      	adds	r3, #40	@ 0x28
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005ed6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005eda:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8005ede:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005ee2:	4413      	add	r3, r2
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b2d9      	uxtb	r1, r3
 8005eea:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005eee:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005ef8:	4413      	add	r3, r2
 8005efa:	460a      	mov	r2, r1
 8005efc:	701a      	strb	r2, [r3, #0]
      k++;
 8005efe:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005f02:	3301      	adds	r3, #1
 8005f04:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8005f08:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8005f0c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d38e      	bcc.n	8005e38 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005f32:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005f36:	6018      	str	r0, [r3, #0]
 8005f38:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005f3c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005f40:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005f42:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005f46:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8005f50:	f107 0208 	add.w	r2, r7, #8
 8005f54:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8005f58:	f7ff fed0 	bl	8005cfc <JPEG_Bits_To_SizeCodes>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8005f62:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8005f6a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8005f6e:	e048      	b.n	8006002 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8005f76:	e03d      	b.n	8005ff4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005f78:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005f7c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005f86:	4413      	add	r3, r2
 8005f88:	3310      	adds	r3, #16
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005f90:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005f94:	2b0b      	cmp	r3, #11
 8005f96:	d901      	bls.n	8005f9c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e032      	b.n	8006002 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005f9c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005fa0:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8005fa4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8005fa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fac:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005fb0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005fb4:	6819      	ldr	r1, [r3, #0]
 8005fb6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005fba:	3302      	adds	r3, #2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005fc2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005fc6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8005fca:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b2d9      	uxtb	r1, r3
 8005fd6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005fda:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8005fe4:	4413      	add	r3, r2
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	701a      	strb	r2, [r3, #0]
      k++;
 8005fea:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005fee:	3301      	adds	r3, #1
 8005ff0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8005ff4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8005ff8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3bb      	bcc.n	8005f78 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b09a      	sub	sp, #104	@ 0x68
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d106      	bne.n	8006034 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800602e:	3318      	adds	r3, #24
 8006030:	663b      	str	r3, [r7, #96]	@ 0x60
 8006032:	e00f      	b.n	8006054 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d106      	bne.n	8006050 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800604a:	3318      	adds	r3, #24
 800604c:	663b      	str	r3, [r7, #96]	@ 0x60
 800604e:	e001      	b.n	8006054 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e059      	b.n	8006108 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d055      	beq.n	8006106 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800605a:	f107 0314 	add.w	r3, r7, #20
 800605e:	4619      	mov	r1, r3
 8006060:	68b8      	ldr	r0, [r7, #8]
 8006062:	f7ff ff60 	bl	8005f26 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800606c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8006074:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006078:	e046      	b.n	8006108 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800607a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800607c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800607e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006080:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8006084:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006088:	3304      	adds	r3, #4
 800608a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800608c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800608e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8006092:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8006094:	230c      	movs	r3, #12
 8006096:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8006098:	e032      	b.n	8006100 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800609a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800609c:	3b01      	subs	r3, #1
 800609e:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80060a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060a2:	3b04      	subs	r3, #4
 80060a4:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80060a6:	f107 0214 	add.w	r2, r7, #20
 80060aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060ac:	4413      	add	r3, r2
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80060b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060b8:	3302      	adds	r3, #2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	3368      	adds	r3, #104	@ 0x68
 80060be:	443b      	add	r3, r7
 80060c0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 80060ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060cc:	3b01      	subs	r3, #1
 80060ce:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80060d0:	f107 0214 	add.w	r2, r7, #20
 80060d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060d6:	4413      	add	r3, r2
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	021b      	lsls	r3, r3, #8
 80060dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80060e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060e2:	3302      	adds	r3, #2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	3368      	adds	r3, #104	@ 0x68
 80060e8:	443b      	add	r3, r7
 80060ea:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	4313      	orrs	r3, r2
 80060f2:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80060f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f6:	041a      	lsls	r2, r3, #16
 80060f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060fa:	431a      	orrs	r2, r3
 80060fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060fe:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8006100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006102:	2b01      	cmp	r3, #1
 8006104:	d8c9      	bhi.n	800609a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3768      	adds	r7, #104	@ 0x68
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8006116:	af00      	add	r7, sp, #0
 8006118:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800611c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006120:	6018      	str	r0, [r3, #0]
 8006122:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006126:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800612a:	6019      	str	r1, [r3, #0]
 800612c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006130:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8006134:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8006136:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800613a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006146:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800614a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d10c      	bne.n	800616e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006154:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006158:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006164:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8006168:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800616c:	e01d      	b.n	80061aa <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800616e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006172:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800617e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8006182:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d10c      	bne.n	80061a6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800618c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006190:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800619c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80061a0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80061a4:	e001      	b.n	80061aa <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e0a8      	b.n	80062fc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 80061aa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80061ae:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a0 	beq.w	80062fa <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 80061ba:	f107 0214 	add.w	r2, r7, #20
 80061be:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80061c2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80061c6:	4611      	mov	r1, r2
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f7ff fe0c 	bl	8005de6 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 80061d4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80061dc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80061e0:	e08c      	b.n	80062fc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80061e2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80061e6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80061f0:	e00e      	b.n	8006210 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80061f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80061f6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80061fa:	601a      	str	r2, [r3, #0]
      addressDef++;
 80061fc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006200:	3304      	adds	r3, #4
 8006202:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8006206:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800620a:	3301      	adds	r3, #1
 800620c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8006210:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006214:	2b02      	cmp	r3, #2
 8006216:	d9ec      	bls.n	80061f2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8006218:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800621c:	4a3a      	ldr	r2, [pc, #232]	@ (8006308 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800621e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006220:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006224:	3304      	adds	r3, #4
 8006226:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800622a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800622e:	4a37      	ldr	r2, [pc, #220]	@ (800630c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8006230:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006232:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006236:	3304      	adds	r3, #4
 8006238:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800623c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006240:	4a33      	ldr	r2, [pc, #204]	@ (8006310 <JPEG_Set_HuffAC_Mem+0x200>)
 8006242:	601a      	str	r2, [r3, #0]
    addressDef++;
 8006244:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006248:	3304      	adds	r3, #4
 800624a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800624e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8006252:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <JPEG_Set_HuffAC_Mem+0x204>)
 8006254:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8006256:	23a2      	movs	r3, #162	@ 0xa2
 8006258:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800625c:	e049      	b.n	80062f2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800625e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006262:	3b01      	subs	r3, #1
 8006264:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8006268:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800626c:	3b04      	subs	r3, #4
 800626e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006272:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8006276:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800627a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800627e:	4413      	add	r3, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006288:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800628c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8006290:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8006294:	3328      	adds	r3, #40	@ 0x28
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80062a4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80062ae:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80062b2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80062b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80062ba:	4413      	add	r3, r2
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80062c4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80062c8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80062cc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80062d0:	3328      	adds	r3, #40	@ 0x28
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80062e0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80062e4:	041a      	lsls	r2, r3, #16
 80062e6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80062ea:	431a      	orrs	r2, r3
 80062ec:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80062f0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80062f2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d8b1      	bhi.n	800625e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	0fd10fd0 	.word	0x0fd10fd0
 800630c:	0fd30fd2 	.word	0x0fd30fd2
 8006310:	0fd50fd4 	.word	0x0fd50fd4
 8006314:	0fd70fd6 	.word	0x0fd70fd6

08006318 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f84d 	bl	80063c0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800632e:	461a      	mov	r2, r3
 8006330:	491f      	ldr	r1, [pc, #124]	@ (80063b0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff feec 	bl	8006110 <JPEG_Set_HuffAC_Mem>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	e030      	b.n	80063a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800634e:	461a      	mov	r2, r3
 8006350:	4918      	ldr	r1, [pc, #96]	@ (80063b4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fedc 	bl	8006110 <JPEG_Set_HuffAC_Mem>
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	e020      	b.n	80063a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800636e:	461a      	mov	r2, r3
 8006370:	4911      	ldr	r1, [pc, #68]	@ (80063b8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fe4a 	bl	800600c <JPEG_Set_HuffDC_Mem>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	e010      	b.n	80063a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800638e:	461a      	mov	r2, r3
 8006390:	490a      	ldr	r1, [pc, #40]	@ (80063bc <JPEG_Set_HuffEnc_Mem+0xa4>)
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe3a 	bl	800600c <JPEG_Set_HuffDC_Mem>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	e000      	b.n	80063a8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	08012b28 	.word	0x08012b28
 80063b4:	08012bdc 	.word	0x08012bdc
 80063b8:	08012af0 	.word	0x08012af0
 80063bc:	08012b0c 	.word	0x08012b0c

080063c0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b08b      	sub	sp, #44	@ 0x2c
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80063c8:	4b80      	ldr	r3, [pc, #512]	@ (80065cc <JPEG_Set_Huff_DHTMem+0x20c>)
 80063ca:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80063cc:	4b80      	ldr	r3, [pc, #512]	@ (80065d0 <JPEG_Set_Huff_DHTMem+0x210>)
 80063ce:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80063d0:	4b80      	ldr	r3, [pc, #512]	@ (80065d4 <JPEG_Set_Huff_DHTMem+0x214>)
 80063d2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80063d4:	4b80      	ldr	r3, [pc, #512]	@ (80065d8 <JPEG_Set_Huff_DHTMem+0x218>)
 80063d6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80063e0:	330c      	adds	r3, #12
 80063e2:	623b      	str	r3, [r7, #32]
  index = 16;
 80063e4:	2310      	movs	r3, #16
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80063e8:	e01d      	b.n	8006426 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	3b01      	subs	r3, #1
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	5cd3      	ldrb	r3, [r2, r3]
 80063f2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80063f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f6:	3b02      	subs	r3, #2
 80063f8:	6979      	ldr	r1, [r7, #20]
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80063fe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	3b03      	subs	r3, #3
 8006404:	6979      	ldr	r1, [r7, #20]
 8006406:	5ccb      	ldrb	r3, [r1, r3]
 8006408:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800640a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800640c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640e:	3a04      	subs	r2, #4
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006414:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	601a      	str	r2, [r3, #0]
    address--;
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	3b04      	subs	r3, #4
 800641e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	3b04      	subs	r3, #4
 8006424:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	2b03      	cmp	r3, #3
 800642a:	d8de      	bhi.n	80063ea <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006434:	3318      	adds	r3, #24
 8006436:	623b      	str	r3, [r7, #32]
  index = 12;
 8006438:	230c      	movs	r3, #12
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800643c:	e021      	b.n	8006482 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	3b01      	subs	r3, #1
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	7c1b      	ldrb	r3, [r3, #16]
 8006448:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	3b02      	subs	r3, #2
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	440b      	add	r3, r1
 8006452:	7c1b      	ldrb	r3, [r3, #16]
 8006454:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006456:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	3b03      	subs	r3, #3
 800645c:	6979      	ldr	r1, [r7, #20]
 800645e:	440b      	add	r3, r1
 8006460:	7c1b      	ldrb	r3, [r3, #16]
 8006462:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006464:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8006466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006468:	3a04      	subs	r2, #4
 800646a:	6979      	ldr	r1, [r7, #20]
 800646c:	440a      	add	r2, r1
 800646e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006470:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	601a      	str	r2, [r3, #0]
    address--;
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	3b04      	subs	r3, #4
 800647a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	3b04      	subs	r3, #4
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	2b03      	cmp	r3, #3
 8006486:	d8da      	bhi.n	800643e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006490:	3328      	adds	r3, #40	@ 0x28
 8006492:	623b      	str	r3, [r7, #32]
  index = 16;
 8006494:	2310      	movs	r3, #16
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006498:	e01d      	b.n	80064d6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	3b01      	subs	r3, #1
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	5cd3      	ldrb	r3, [r2, r3]
 80064a2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	3b02      	subs	r3, #2
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80064ae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	3b03      	subs	r3, #3
 80064b4:	69f9      	ldr	r1, [r7, #28]
 80064b6:	5ccb      	ldrb	r3, [r1, r3]
 80064b8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80064ba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80064bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064be:	3a04      	subs	r2, #4
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80064c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	601a      	str	r2, [r3, #0]
    address--;
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	3b04      	subs	r3, #4
 80064d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d8de      	bhi.n	800649a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80064e4:	33cc      	adds	r3, #204	@ 0xcc
 80064e6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4b3b      	ldr	r3, [pc, #236]	@ (80065dc <JPEG_Set_Huff_DHTMem+0x21c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80064f8:	021a      	lsls	r2, r3, #8
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	3b04      	subs	r3, #4
 8006512:	623b      	str	r3, [r7, #32]
  index = 160;
 8006514:	23a0      	movs	r3, #160	@ 0xa0
 8006516:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006518:	e021      	b.n	800655e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	3b01      	subs	r3, #1
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	4413      	add	r3, r2
 8006522:	7c1b      	ldrb	r3, [r3, #16]
 8006524:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	3b02      	subs	r3, #2
 800652a:	69f9      	ldr	r1, [r7, #28]
 800652c:	440b      	add	r3, r1
 800652e:	7c1b      	ldrb	r3, [r3, #16]
 8006530:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8006532:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	3b03      	subs	r3, #3
 8006538:	69f9      	ldr	r1, [r7, #28]
 800653a:	440b      	add	r3, r1
 800653c:	7c1b      	ldrb	r3, [r3, #16]
 800653e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8006540:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8006542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006544:	3a04      	subs	r2, #4
 8006546:	69f9      	ldr	r1, [r7, #28]
 8006548:	440a      	add	r2, r1
 800654a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800654c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	601a      	str	r2, [r3, #0]
    address--;
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	3b04      	subs	r3, #4
 8006556:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	3b04      	subs	r3, #4
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	2b03      	cmp	r3, #3
 8006562:	d8da      	bhi.n	800651a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800656c:	33cc      	adds	r3, #204	@ 0xcc
 800656e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	061a      	lsls	r2, r3, #24
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	431a      	orrs	r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800659a:	33dc      	adds	r3, #220	@ 0xdc
 800659c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b0e      	ldr	r3, [pc, #56]	@ (80065dc <JPEG_Set_Huff_DHTMem+0x21c>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	7bdb      	ldrb	r3, [r3, #15]
 80065ac:	021a      	lsls	r2, r3, #8
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	7b92      	ldrb	r2, [r2, #14]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	3b04      	subs	r3, #4
 80065c4:	623b      	str	r3, [r7, #32]
  index = 12;
 80065c6:	230c      	movs	r3, #12
 80065c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80065ca:	e027      	b.n	800661c <JPEG_Set_Huff_DHTMem+0x25c>
 80065cc:	08012b28 	.word	0x08012b28
 80065d0:	08012bdc 	.word	0x08012bdc
 80065d4:	08012af0 	.word	0x08012af0
 80065d8:	08012b0c 	.word	0x08012b0c
 80065dc:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	3301      	adds	r3, #1
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	5cd3      	ldrb	r3, [r2, r3]
 80065e8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80065ea:	6939      	ldr	r1, [r7, #16]
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	440b      	add	r3, r1
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80065f4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	3b01      	subs	r3, #1
 80065fa:	6939      	ldr	r1, [r7, #16]
 80065fc:	5ccb      	ldrb	r3, [r1, r3]
 80065fe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006600:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8006602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006604:	3a02      	subs	r2, #2
 8006606:	6939      	ldr	r1, [r7, #16]
 8006608:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800660a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	601a      	str	r2, [r3, #0]
    address--;
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	3b04      	subs	r3, #4
 8006614:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	3b04      	subs	r3, #4
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	2b03      	cmp	r3, #3
 8006620:	d8de      	bhi.n	80065e0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800662a:	33dc      	adds	r3, #220	@ 0xdc
 800662c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	7c5b      	ldrb	r3, [r3, #17]
 800663a:	061a      	lsls	r2, r3, #24
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	431a      	orrs	r2, r3
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	041b      	lsls	r3, r3, #16
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006658:	33e8      	adds	r3, #232	@ 0xe8
 800665a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b6d      	ldr	r3, [pc, #436]	@ (8006818 <JPEG_Set_Huff_DHTMem+0x458>)
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	7edb      	ldrb	r3, [r3, #27]
 800666a:	021a      	lsls	r2, r3, #8
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	7e92      	ldrb	r2, [r2, #26]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	3b04      	subs	r3, #4
 8006682:	623b      	str	r3, [r7, #32]
  index = 8;
 8006684:	2308      	movs	r3, #8
 8006686:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006688:	e021      	b.n	80066ce <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	3301      	adds	r3, #1
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	7c1b      	ldrb	r3, [r3, #16]
 8006694:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006696:	6939      	ldr	r1, [r7, #16]
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	440b      	add	r3, r1
 800669c:	3310      	adds	r3, #16
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80066a2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	3b01      	subs	r3, #1
 80066a8:	6939      	ldr	r1, [r7, #16]
 80066aa:	440b      	add	r3, r1
 80066ac:	7c1b      	ldrb	r3, [r3, #16]
 80066ae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80066b0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80066b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b4:	3a02      	subs	r2, #2
 80066b6:	6939      	ldr	r1, [r7, #16]
 80066b8:	440a      	add	r2, r1
 80066ba:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80066bc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	601a      	str	r2, [r3, #0]
    address--;
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	3b04      	subs	r3, #4
 80066c6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	3b04      	subs	r3, #4
 80066cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d8da      	bhi.n	800668a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80066dc:	33e8      	adds	r3, #232	@ 0xe8
 80066de:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	061a      	lsls	r2, r3, #24
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	041b      	lsls	r3, r3, #16
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800670a:	33f8      	adds	r3, #248	@ 0xf8
 800670c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b41      	ldr	r3, [pc, #260]	@ (8006818 <JPEG_Set_Huff_DHTMem+0x458>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	7bdb      	ldrb	r3, [r3, #15]
 800671c:	021a      	lsls	r2, r3, #8
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	7b92      	ldrb	r2, [r2, #14]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  *address = value;
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	3b04      	subs	r3, #4
 8006734:	623b      	str	r3, [r7, #32]
  index = 12;
 8006736:	230c      	movs	r3, #12
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800673a:	e01d      	b.n	8006778 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	5cd3      	ldrb	r3, [r2, r3]
 8006744:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8006746:	69b9      	ldr	r1, [r7, #24]
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	440b      	add	r3, r1
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006750:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	3b01      	subs	r3, #1
 8006756:	69b9      	ldr	r1, [r7, #24]
 8006758:	5ccb      	ldrb	r3, [r1, r3]
 800675a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800675c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800675e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006760:	3a02      	subs	r2, #2
 8006762:	69b9      	ldr	r1, [r7, #24]
 8006764:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8006766:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	601a      	str	r2, [r3, #0]
    address--;
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	3b04      	subs	r3, #4
 8006770:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	3b04      	subs	r3, #4
 8006776:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	2b03      	cmp	r3, #3
 800677c:	d8de      	bhi.n	800673c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8006786:	33f8      	adds	r3, #248	@ 0xf8
 8006788:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	7c5b      	ldrb	r3, [r3, #17]
 8006796:	061a      	lsls	r2, r3, #24
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	431a      	orrs	r2, r3
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	7c1b      	ldrb	r3, [r3, #16]
 80067a0:	041b      	lsls	r3, r3, #16
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80067b4:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80067b8:	623b      	str	r3, [r7, #32]
  index = 160;
 80067ba:	23a0      	movs	r3, #160	@ 0xa0
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80067be:	e021      	b.n	8006804 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	3301      	adds	r3, #1
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	4413      	add	r3, r2
 80067c8:	7c1b      	ldrb	r3, [r3, #16]
 80067ca:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	440b      	add	r3, r1
 80067d2:	3310      	adds	r3, #16
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80067d8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	3b01      	subs	r3, #1
 80067de:	69b9      	ldr	r1, [r7, #24]
 80067e0:	440b      	add	r3, r1
 80067e2:	7c1b      	ldrb	r3, [r3, #16]
 80067e4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80067e6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80067e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ea:	3a02      	subs	r2, #2
 80067ec:	69b9      	ldr	r1, [r7, #24]
 80067ee:	440a      	add	r2, r1
 80067f0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80067f2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	601a      	str	r2, [r3, #0]
    address--;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	3b04      	subs	r3, #4
 80067fc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	3b04      	subs	r3, #4
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	2b03      	cmp	r3, #3
 8006808:	d8da      	bhi.n	80067c0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	372c      	adds	r7, #44	@ 0x2c
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	ffff0000 	.word	0xffff0000

0800681c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006828:	f003 0303 	and.w	r3, r3, #3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d125      	bne.n	800687c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01e      	beq.n	800687c <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3304      	adds	r3, #4
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff f90d 	bl	8005a64 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fa15 	bl	8005c86 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800687a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d116      	bne.n	80068b6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8006896:	2108      	movs	r1, #8
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f988 	bl	8006bae <JPEG_ReadInputData>
 800689e:	e00a      	b.n	80068b6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 80068ae:	2101      	movs	r1, #1
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f97c 	bl	8006bae <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d116      	bne.n	80068f0 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80068d0:	2108      	movs	r1, #8
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f864 	bl	80069a0 <JPEG_StoreOutputData>
 80068d8:	e00a      	b.n	80068f0 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80068e8:	2101      	movs	r1, #1
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f858 	bl	80069a0 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d14b      	bne.n	8006996 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b08      	cmp	r3, #8
 8006918:	d107      	bne.n	800692a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006938:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69d9      	ldr	r1, [r3, #28]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694a:	461a      	mov	r2, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fa fc87 	bl	8001260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006962:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d103      	bne.n	800698c <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff f989 	bl	8005c9c <HAL_JPEG_DecodeCpltCallback>
 800698a:	e002      	b.n	8006992 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fa fc83 	bl	8001298 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d34b      	bcc.n	8006a54 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 80069bc:	2300      	movs	r3, #0
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e031      	b.n	8006a26 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69da      	ldr	r2, [r3, #28]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	4413      	add	r3, r2
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	0a19      	lsrs	r1, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69da      	ldr	r2, [r3, #28]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	3301      	adds	r3, #1
 80069e8:	4413      	add	r3, r2
 80069ea:	b2ca      	uxtb	r2, r1
 80069ec:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	0c19      	lsrs	r1, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	3302      	adds	r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	b2ca      	uxtb	r2, r1
 8006a00:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	0e19      	lsrs	r1, r3, #24
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0e:	3303      	adds	r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	b2ca      	uxtb	r2, r1
 8006a14:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	3301      	adds	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d3c9      	bcc.n	80069c2 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	429a      	cmp	r2, r3
 8006a38:	f040 80b5 	bne.w	8006ba6 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69d9      	ldr	r1, [r3, #28]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a44:	461a      	mov	r2, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fa fc0a 	bl	8001260 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a52:	e0a8      	b.n	8006ba6 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	f240 80a2 	bls.w	8006ba6 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e031      	b.n	8006ada <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a7c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69da      	ldr	r2, [r3, #28]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	4413      	add	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	0a19      	lsrs	r1, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69da      	ldr	r2, [r3, #28]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	4413      	add	r3, r2
 8006a9e:	b2ca      	uxtb	r2, r1
 8006aa0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0c19      	lsrs	r1, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	3302      	adds	r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	b2ca      	uxtb	r2, r1
 8006ab4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	0e19      	lsrs	r1, r3, #24
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69da      	ldr	r2, [r3, #28]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac2:	3303      	adds	r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	b2ca      	uxtb	r2, r1
 8006ac8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	1d1a      	adds	r2, r3, #4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d3c9      	bcc.n	8006a76 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d10b      	bne.n	8006b06 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69d9      	ldr	r1, [r3, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af6:	461a      	mov	r2, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7fa fbb1 	bl	8001260 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006b04:	e04f      	b.n	8006ba6 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b18:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	e015      	b.n	8006b4c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	fa22 f103 	lsr.w	r1, r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	4413      	add	r3, r2
 8006b38:	b2ca      	uxtb	r2, r1
 8006b3a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3e5      	bcc.n	8006b20 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69d9      	ldr	r1, [r3, #28]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa fb7e 	bl	8001260 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f1c3 0304 	rsb	r3, r3, #4
 8006b70:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e013      	b.n	8006ba0 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	fa22 f103 	lsr.w	r1, r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69da      	ldr	r2, [r3, #28]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	4413      	add	r3, r2
 8006b8c:	b2ca      	uxtb	r2, r1
 8006b8e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d9e8      	bls.n	8006b78 <JPEG_StoreOutputData+0x1d8>
}
 8006ba6:	bf00      	nop
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b088      	sub	sp, #32
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <JPEG_ReadInputData+0x1c>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8006bca:	2101      	movs	r1, #1
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fe ffde 	bl	8005b8e <HAL_JPEG_Pause>
 8006bd2:	e028      	b.n	8006c26 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d906      	bls.n	8006bee <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e01b      	b.n	8006c26 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d115      	bne.n	8006c26 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fa fb0d 	bl	8001220 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d905      	bls.n	8006c1a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	f023 0203 	bic.w	r2, r3, #3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 809f 	bne.w	8006d72 <JPEG_ReadInputData+0x1c4>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 809b 	beq.w	8006d72 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d335      	bcc.n	8006cb6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e02d      	b.n	8006cac <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699a      	ldr	r2, [r3, #24]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	4413      	add	r3, r2
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c70:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6999      	ldr	r1, [r3, #24]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006c82:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3303      	adds	r3, #3
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006c98:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006c9a:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3cd      	bcc.n	8006c50 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8006cb4:	e05d      	b.n	8006d72 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d035      	beq.n	8006d28 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e02d      	b.n	8006d1e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006ce2:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6999      	ldr	r1, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3302      	adds	r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8006cf4:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3303      	adds	r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8006d0a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3cd      	bcc.n	8006cc2 <JPEG_ReadInputData+0x114>
}
 8006d26:	e024      	b.n	8006d72 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e017      	b.n	8006d62 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d3e3      	bcc.n	8006d32 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006d72:	bf00      	nop
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d125      	bne.n	8006dda <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01e      	beq.n	8006dda <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fe fe5e 	bl	8005a64 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fe ff66 	bl	8005c86 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dc8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d039      	beq.n	8006e5c <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0201 	bic.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8006e12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006e22:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d104      	bne.n	8006e3c <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fa1a 	bl	8007270 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d105      	bne.n	8006e56 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fa0e 	bl	8007270 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8006e54:	e002      	b.n	8006e5c <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f804 	bl	8006e64 <JPEG_DMA_EndProcess>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8006e7c:	1ad2      	subs	r2, r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d10a      	bne.n	8006ea4 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69d9      	ldr	r1, [r3, #28]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	461a      	mov	r2, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fa f9e1 	bl	8001260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d134      	bne.n	8006f1c <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69d9      	ldr	r1, [r3, #28]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fa f9cb 	bl	8001260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eea:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d103      	bne.n	8006f14 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fe fec5 	bl	8005c9c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8006f12:	e00c      	b.n	8006f2e <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fa f9bf 	bl	8001298 <HAL_JPEG_EncodeCpltCallback>
}
 8006f1a:	e008      	b.n	8006f2e <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f804 	bl	8006f36 <JPEG_DMA_PollResidualData>
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006f3e:	2310      	movs	r3, #16
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e04f      	b.n	8006fe4 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d146      	bne.n	8006fde <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f56:	f003 0310 	and.w	r3, r3, #16
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d03f      	beq.n	8006fde <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f64:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69da      	ldr	r2, [r3, #28]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	4413      	add	r3, r2
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	0a19      	lsrs	r1, r3, #8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f82:	3301      	adds	r3, #1
 8006f84:	4413      	add	r3, r2
 8006f86:	b2ca      	uxtb	r2, r1
 8006f88:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	0c19      	lsrs	r1, r3, #16
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69da      	ldr	r2, [r3, #28]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	3302      	adds	r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	b2ca      	uxtb	r2, r1
 8006f9c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	0e19      	lsrs	r1, r3, #24
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	3303      	adds	r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	b2ca      	uxtb	r2, r1
 8006fb0:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d10a      	bne.n	8006fde <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	69d9      	ldr	r1, [r3, #28]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fa f944 	bl	8001260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1ac      	bne.n	8006f44 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fee:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <JPEG_DMA_PollResidualData+0xd2>
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d133      	bne.n	8007070 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0201 	bic.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	461a      	mov	r2, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa f918 	bl	8001260 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703a:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007040:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d103      	bne.n	800706a <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fe fe1a 	bl	8005c9c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8007068:	e002      	b.n	8007070 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa f914 	bl	8001298 <HAL_JPEG_EncodeCpltCallback>
}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8007078:	b480      	push	{r7}
 800707a:	b08b      	sub	sp, #44	@ 0x2c
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3350      	adds	r3, #80	@ 0x50
 800708a:	61bb      	str	r3, [r7, #24]

  i = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007090:	e042      	b.n	8007118 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e033      	b.n	8007106 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d103      	bne.n	80070ba <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	3364      	adds	r3, #100	@ 0x64
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b8:	e022      	b.n	8007100 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2264      	movs	r2, #100	@ 0x64
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80070c6:	6a38      	ldr	r0, [r7, #32]
 80070c8:	69f9      	ldr	r1, [r7, #28]
 80070ca:	4401      	add	r1, r0
 80070cc:	4818      	ldr	r0, [pc, #96]	@ (8007130 <JPEG_GetQuality+0xb8>)
 80070ce:	5c41      	ldrb	r1, [r0, r1]
 80070d0:	440a      	add	r2, r1
 80070d2:	7812      	ldrb	r2, [r2, #0]
 80070d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b64      	cmp	r3, #100	@ 0x64
 80070de:	d807      	bhi.n	80070f0 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ea:	4413      	add	r3, r2
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ee:	e007      	b.n	8007100 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 80070f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070fc:	4413      	add	r3, r2
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	3301      	adds	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d9c8      	bls.n	800709e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	3304      	adds	r3, #4
 8007110:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3304      	adds	r3, #4
 8007116:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2b3c      	cmp	r3, #60	@ 0x3c
 800711c:	d9b9      	bls.n	8007092 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	099b      	lsrs	r3, r3, #6
}
 8007122:	4618      	mov	r0, r3
 8007124:	372c      	adds	r7, #44	@ 0x2c
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	08012c90 	.word	0x08012c90

08007134 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800713c:	f7fa ffee 	bl	800211c <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e03b      	b.n	80071c4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800716c:	e00f      	b.n	800718e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800716e:	f7fa ffd5 	bl	800211c <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b05      	cmp	r3, #5
 800717a:	d908      	bls.n	800718e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2240      	movs	r2, #64	@ 0x40
 8007180:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2203      	movs	r2, #3
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e01a      	b.n	80071c4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e8      	bne.n	800716e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f9e3 	bl	8007568 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e03e      	b.n	8007264 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_MDMA_ConfigPostRequestMask+0x28>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e037      	b.n	8007264 <HAL_MDMA_ConfigPostRequestMask+0x98>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b01      	cmp	r3, #1
 8007206:	d126      	bne.n	8007256 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d11c      	bne.n	8007250 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800723a:	611a      	str	r2, [r3, #16]
 800723c:	e00d      	b.n	800725a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800724c:	611a      	str	r2, [r3, #16]
 800724e:	e004      	b.n	800725a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
 8007254:	e001      	b.n	800725a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
}
 8007264:	4618      	mov	r0, r3
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e017      	b.n	80072b2 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d004      	beq.n	8007298 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2280      	movs	r2, #128	@ 0x80
 8007292:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e00c      	b.n	80072b2 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072cc:	4b91      	ldr	r3, [pc, #580]	@ (8007514 <HAL_MDMA_IRQHandler+0x254>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a91      	ldr	r2, [pc, #580]	@ (8007518 <HAL_MDMA_IRQHandler+0x258>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0a9b      	lsrs	r3, r3, #10
 80072d8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	4b8e      	ldr	r3, [pc, #568]	@ (800751c <HAL_MDMA_IRQHandler+0x25c>)
 80072e2:	4413      	add	r3, r2
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2201      	movs	r2, #1
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80072f2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 812d 	beq.w	800755c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d054      	beq.n	80073ba <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d04d      	beq.n	80073ba <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0202 	bic.w	r2, r2, #2
 800732c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007344:	f043 0201 	orr.w	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	669a      	str	r2, [r3, #104]	@ 0x68
 800734c:	e005      	b.n	800735a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007352:	f043 0202 	orr.w	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007368:	f043 0204 	orr.w	r2, r3, #4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800737e:	f043 0208 	orr.w	r2, r3, #8
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007394:	f043 0210 	orr.w	r2, r3, #16
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2201      	movs	r2, #1
 80073b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d012      	beq.n	8007422 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2208      	movs	r2, #8
 8007410:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d012      	beq.n	8007456 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2204      	movs	r2, #4
 8007444:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d039      	beq.n	80074d8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d032      	beq.n	80074d8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8007480:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b04      	cmp	r3, #4
 800748c:	d110      	bne.n	80074b0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d05c      	beq.n	8007560 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
        }
        return;
 80074ae:	e057      	b.n	8007560 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2202      	movs	r2, #2
 80074b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d040      	beq.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2204      	movs	r2, #4
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	429a      	cmp	r2, r3
 8007502:	d30d      	bcc.n	8007520 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f2      	bne.n	80074f8 <HAL_MDMA_IRQHandler+0x238>
 8007512:	e006      	b.n	8007522 <HAL_MDMA_IRQHandler+0x262>
 8007514:	24000004 	.word	0x24000004
 8007518:	1b4e81b5 	.word	0x1b4e81b5
 800751c:	adffffc0 	.word	0xadffffc0
        break;
 8007520:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2203      	movs	r2, #3
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007540:	e003      	b.n	800754a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
 800755a:	e002      	b.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007560:	bf00      	nop
    }
  }
}
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68d9      	ldr	r1, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800758e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800759a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80075a6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	3b01      	subs	r3, #1
 80075ae:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80075b0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80075bc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80075be:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c8:	d107      	bne.n	80075da <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80075d8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	da11      	bge.n	800760e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80075f8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fe:	425b      	negs	r3, r3
 8007600:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	b292      	uxth	r2, r2
 800760a:	621a      	str	r2, [r3, #32]
 800760c:	e006      	b.n	800761c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	b292      	uxth	r2, r2
 800761a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	da15      	bge.n	8007650 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007632:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007638:	425b      	negs	r3, r3
 800763a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a19      	ldr	r1, [r3, #32]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	041a      	lsls	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	621a      	str	r2, [r3, #32]
 800764e:	e009      	b.n	8007664 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a19      	ldr	r1, [r3, #32]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	041a      	lsls	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766c:	d006      	beq.n	800767c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	629a      	str	r2, [r3, #40]	@ 0x28
 800767a:	e003      	b.n	8007684 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2200      	movs	r2, #0
 8007682:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2200      	movs	r2, #0
 800768a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0fe      	b.n	80078a8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f00a f95e 	bl	8011980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f006 fd0e 	bl	800e0f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c1a      	ldrb	r2, [r3, #16]
 80076de:	f88d 2000 	strb.w	r2, [sp]
 80076e2:	3304      	adds	r3, #4
 80076e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e6:	f006 fbdf 	bl	800dea8 <USB_CoreInit>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0d5      	b.n	80078a8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f006 fd06 	bl	800e114 <USB_SetCurrentMode>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e0c6      	b.n	80078a8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	e04a      	b.n	80077b6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007720:	7bfa      	ldrb	r2, [r7, #15]
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	3315      	adds	r3, #21
 8007730:	2201      	movs	r2, #1
 8007732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007734:	7bfa      	ldrb	r2, [r7, #15]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	440b      	add	r3, r1
 8007742:	3314      	adds	r3, #20
 8007744:	7bfa      	ldrb	r2, [r7, #15]
 8007746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007748:	7bfa      	ldrb	r2, [r7, #15]
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	b298      	uxth	r0, r3
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	332e      	adds	r3, #46	@ 0x2e
 800775c:	4602      	mov	r2, r0
 800775e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007760:	7bfa      	ldrb	r2, [r7, #15]
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	3318      	adds	r3, #24
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007774:	7bfa      	ldrb	r2, [r7, #15]
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	331c      	adds	r3, #28
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007788:	7bfa      	ldrb	r2, [r7, #15]
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4613      	mov	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3320      	adds	r3, #32
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800779c:	7bfa      	ldrb	r2, [r7, #15]
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	440b      	add	r3, r1
 80077aa:	3324      	adds	r3, #36	@ 0x24
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	3301      	adds	r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	7bfa      	ldrb	r2, [r7, #15]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d3af      	bcc.n	8007720 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
 80077c4:	e044      	b.n	8007850 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80077c6:	7bfa      	ldrb	r2, [r7, #15]
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80077dc:	7bfa      	ldrb	r2, [r7, #15]
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80077ee:	7bfa      	ldrb	r2, [r7, #15]
 80077f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077f2:	7bfa      	ldrb	r2, [r7, #15]
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	440b      	add	r3, r1
 8007800:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007808:	7bfa      	ldrb	r2, [r7, #15]
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800781e:	7bfa      	ldrb	r2, [r7, #15]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007834:	7bfa      	ldrb	r2, [r7, #15]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	3301      	adds	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	7bfa      	ldrb	r2, [r7, #15]
 8007856:	429a      	cmp	r2, r3
 8007858:	d3b5      	bcc.n	80077c6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7c1a      	ldrb	r2, [r3, #16]
 8007862:	f88d 2000 	strb.w	r2, [sp]
 8007866:	3304      	adds	r3, #4
 8007868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800786a:	f006 fc9f 	bl	800e1ac <USB_DevInit>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e013      	b.n	80078a8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7b1b      	ldrb	r3, [r3, #12]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d102      	bne.n	800789c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 f96e 	bl	8008b78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f007 fce2 	bl	800f26a <USB_DevDisconnect>

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_PCD_Start+0x1c>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e022      	b.n	8007912 <HAL_PCD_Start+0x62>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d105      	bne.n	80078f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f006 fbe9 	bl	800e0d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f007 fc90 	bl	800f228 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800791a:	b590      	push	{r4, r7, lr}
 800791c:	b08d      	sub	sp, #52	@ 0x34
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f007 fd4e 	bl	800f3d2 <USB_GetMode>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 84b9 	bne.w	80082b0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f007 fcb2 	bl	800f2ac <USB_ReadInterrupts>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 84af 	beq.w	80082ae <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f007 fc9f 	bl	800f2ac <USB_ReadInterrupts>
 800796e:	4603      	mov	r3, r0
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b02      	cmp	r3, #2
 8007976:	d107      	bne.n	8007988 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	695a      	ldr	r2, [r3, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f002 0202 	and.w	r2, r2, #2
 8007986:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4618      	mov	r0, r3
 800798e:	f007 fc8d 	bl	800f2ac <USB_ReadInterrupts>
 8007992:	4603      	mov	r3, r0
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b10      	cmp	r3, #16
 800799a:	d161      	bne.n	8007a60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0210 	bic.w	r2, r2, #16
 80079aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	f003 020f 	and.w	r2, r3, #15
 80079b8:	4613      	mov	r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	4413      	add	r3, r2
 80079c8:	3304      	adds	r3, #4
 80079ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80079d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079d6:	d124      	bne.n	8007a22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80079de:	4013      	ands	r3, r2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d035      	beq.n	8007a50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80079ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	6a38      	ldr	r0, [r7, #32]
 80079f8:	f007 fac4 	bl	800ef84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	091b      	lsrs	r3, r3, #4
 8007a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a08:	441a      	add	r2, r3
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	091b      	lsrs	r3, r3, #4
 8007a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a1a:	441a      	add	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	615a      	str	r2, [r3, #20]
 8007a20:	e016      	b.n	8007a50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007a28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007a2c:	d110      	bne.n	8007a50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a34:	2208      	movs	r2, #8
 8007a36:	4619      	mov	r1, r3
 8007a38:	6a38      	ldr	r0, [r7, #32]
 8007a3a:	f007 faa3 	bl	800ef84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	091b      	lsrs	r3, r3, #4
 8007a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a4a:	441a      	add	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0210 	orr.w	r2, r2, #16
 8007a5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f007 fc21 	bl	800f2ac <USB_ReadInterrupts>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007a74:	f040 80a7 	bne.w	8007bc6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f007 fc26 	bl	800f2d2 <USB_ReadDevAllOutEpInterrupt>
 8007a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007a88:	e099      	b.n	8007bbe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 808e 	beq.w	8007bb2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f007 fc4a 	bl	800f33a <USB_ReadDevOutEPInterrupt>
 8007aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00c      	beq.n	8007acc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abe:	461a      	mov	r2, r3
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fed0 	bl	800886c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00c      	beq.n	8007af0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 ffa6 	bl	8008a3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	2310      	movs	r3, #16
 8007b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d030      	beq.n	8007b78 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1e:	2b80      	cmp	r3, #128	@ 0x80
 8007b20:	d109      	bne.n	8007b36 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b34:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	3304      	adds	r3, #4
 8007b4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	78db      	ldrb	r3, [r3, #3]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d108      	bne.n	8007b66 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2200      	movs	r2, #0
 8007b58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f00a f833 	bl	8011bcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b72:	461a      	mov	r2, r3
 8007b74:	2302      	movs	r3, #2
 8007b76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8e:	461a      	mov	r2, r3
 8007b90:	2320      	movs	r3, #32
 8007b92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007baa:	461a      	mov	r2, r3
 8007bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007bb0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bba:	085b      	lsrs	r3, r3, #1
 8007bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f47f af62 	bne.w	8007a8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f007 fb6e 	bl	800f2ac <USB_ReadInterrupts>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bda:	f040 80db 	bne.w	8007d94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f007 fb8f 	bl	800f306 <USB_ReadDevAllInEpInterrupt>
 8007be8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007bee:	e0cd      	b.n	8007d8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80c2 	beq.w	8007d80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f007 fbb5 	bl	800f376 <USB_ReadDevInEPInterrupt>
 8007c0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d057      	beq.n	8007cc8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	2201      	movs	r2, #1
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	43db      	mvns	r3, r3
 8007c32:	69f9      	ldr	r1, [r7, #28]
 8007c34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c38:	4013      	ands	r3, r2
 8007c3a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c48:	461a      	mov	r2, r3
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	799b      	ldrb	r3, [r3, #6]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d132      	bne.n	8007cbc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	3320      	adds	r3, #32
 8007c66:	6819      	ldr	r1, [r3, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4403      	add	r3, r0
 8007c76:	331c      	adds	r3, #28
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4419      	add	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4403      	add	r3, r0
 8007c8a:	3320      	adds	r3, #32
 8007c8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d113      	bne.n	8007cbc <HAL_PCD_IRQHandler+0x3a2>
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3324      	adds	r3, #36	@ 0x24
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d108      	bne.n	8007cbc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	f007 fbbe 	bl	800f438 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f009 fefd 	bl	8011ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	461a      	mov	r2, r3
 8007d18:	2340      	movs	r3, #64	@ 0x40
 8007d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d023      	beq.n	8007d6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d28:	6a38      	ldr	r0, [r7, #32]
 8007d2a:	f006 fb9d 	bl	800e468 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	3310      	adds	r3, #16
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3304      	adds	r3, #4
 8007d40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	78db      	ldrb	r3, [r3, #3]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d108      	bne.n	8007d5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f009 ff4a 	bl	8011bf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fcea 	bl	8008754 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	3301      	adds	r3, #1
 8007d84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f47f af2e 	bne.w	8007bf0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f007 fa87 	bl	800f2ac <USB_ReadInterrupts>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da8:	d122      	bne.n	8007df0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d108      	bne.n	8007dda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fef4 	bl	8008bc0 <HAL_PCDEx_LPM_Callback>
 8007dd8:	e002      	b.n	8007de0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f009 fee8 	bl	8011bb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695a      	ldr	r2, [r3, #20]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f007 fa59 	bl	800f2ac <USB_ReadInterrupts>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e04:	d112      	bne.n	8007e2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d102      	bne.n	8007e1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f009 fea4 	bl	8011b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f007 fa3b 	bl	800f2ac <USB_ReadInterrupts>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e40:	d121      	bne.n	8007e86 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007e50:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d111      	bne.n	8007e80 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e6a:	089b      	lsrs	r3, r3, #2
 8007e6c:	f003 020f 	and.w	r2, r3, #15
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007e76:	2101      	movs	r1, #1
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fea1 	bl	8008bc0 <HAL_PCDEx_LPM_Callback>
 8007e7e:	e002      	b.n	8007e86 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f009 fe6f 	bl	8011b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f007 fa0e 	bl	800f2ac <USB_ReadInterrupts>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e9a:	f040 80b7 	bne.w	800800c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007eac:	f023 0301 	bic.w	r3, r3, #1
 8007eb0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2110      	movs	r1, #16
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f006 fad5 	bl	800e468 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec2:	e046      	b.n	8007f52 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ed6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ef6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f04:	461a      	mov	r2, r3
 8007f06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4e:	3301      	adds	r3, #1
 8007f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	791b      	ldrb	r3, [r3, #4]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d3b2      	bcc.n	8007ec4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007f70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	7bdb      	ldrb	r3, [r3, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d016      	beq.n	8007fa8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f8a:	f043 030b 	orr.w	r3, r3, #11
 8007f8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fa0:	f043 030b 	orr.w	r3, r3, #11
 8007fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007fa6:	e015      	b.n	8007fd4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fae:	695a      	ldr	r2, [r3, #20]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f242 032b 	movw	r3, #8235	@ 0x202b
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fce:	f043 030b 	orr.w	r3, r3, #11
 8007fd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fe2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007fe6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f007 fa1e 	bl	800f438 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	695a      	ldr	r2, [r3, #20]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800800a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4618      	mov	r0, r3
 8008012:	f007 f94b 	bl	800f2ac <USB_ReadInterrupts>
 8008016:	4603      	mov	r3, r0
 8008018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800801c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008020:	d123      	bne.n	800806a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f007 f9e2 	bl	800f3f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f006 fa92 	bl	800e55a <USB_GetDevSpeed>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681c      	ldr	r4, [r3, #0]
 8008042:	f001 fd9d 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 8008046:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800804c:	461a      	mov	r2, r3
 800804e:	4620      	mov	r0, r4
 8008050:	f005 ff9c 	bl	800df8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f009 fd5c 	bl	8011b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695a      	ldr	r2, [r3, #20]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008068:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f007 f91c 	bl	800f2ac <USB_ReadInterrupts>
 8008074:	4603      	mov	r3, r0
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b08      	cmp	r3, #8
 800807c:	d10a      	bne.n	8008094 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f009 fd39 	bl	8011af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f002 0208 	and.w	r2, r2, #8
 8008092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f007 f907 	bl	800f2ac <USB_ReadInterrupts>
 800809e:	4603      	mov	r3, r0
 80080a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a4:	2b80      	cmp	r3, #128	@ 0x80
 80080a6:	d123      	bne.n	80080f0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080b4:	2301      	movs	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b8:	e014      	b.n	80080e4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080be:	4613      	mov	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d105      	bne.n	80080de <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb0a 	bl	80086f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	3301      	adds	r3, #1
 80080e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	791b      	ldrb	r3, [r3, #4]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d3e4      	bcc.n	80080ba <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f007 f8d9 	bl	800f2ac <USB_ReadInterrupts>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008104:	d13c      	bne.n	8008180 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008106:	2301      	movs	r3, #1
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
 800810a:	e02b      	b.n	8008164 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008120:	4613      	mov	r3, r2
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	3318      	adds	r3, #24
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d115      	bne.n	800815e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008132:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008134:	2b00      	cmp	r3, #0
 8008136:	da12      	bge.n	800815e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800813c:	4613      	mov	r3, r2
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	3317      	adds	r3, #23
 8008148:	2201      	movs	r2, #1
 800814a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800814c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814e:	b2db      	uxtb	r3, r3
 8008150:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008154:	b2db      	uxtb	r3, r3
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 faca 	bl	80086f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	3301      	adds	r3, #1
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	791b      	ldrb	r3, [r3, #4]
 8008168:	461a      	mov	r2, r3
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	4293      	cmp	r3, r2
 800816e:	d3cd      	bcc.n	800810c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	695a      	ldr	r2, [r3, #20]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800817e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4618      	mov	r0, r3
 8008186:	f007 f891 	bl	800f2ac <USB_ReadInterrupts>
 800818a:	4603      	mov	r3, r0
 800818c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008194:	d156      	bne.n	8008244 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008196:	2301      	movs	r3, #1
 8008198:	627b      	str	r3, [r7, #36]	@ 0x24
 800819a:	e045      	b.n	8008228 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b0:	4613      	mov	r3, r2
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d12e      	bne.n	8008222 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da2b      	bge.n	8008222 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	0c1a      	lsrs	r2, r3, #16
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80081d4:	4053      	eors	r3, r2
 80081d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d121      	bne.n	8008222 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e2:	4613      	mov	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800821a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800821e:	6053      	str	r3, [r2, #4]
            break;
 8008220:	e008      	b.n	8008234 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	3301      	adds	r3, #1
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	791b      	ldrb	r3, [r3, #4]
 800822c:	461a      	mov	r2, r3
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	4293      	cmp	r3, r2
 8008232:	d3b3      	bcc.n	800819c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4618      	mov	r0, r3
 800824a:	f007 f82f 	bl	800f2ac <USB_ReadInterrupts>
 800824e:	4603      	mov	r3, r0
 8008250:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008258:	d10a      	bne.n	8008270 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f009 fcda 	bl	8011c14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800826e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4618      	mov	r0, r3
 8008276:	f007 f819 	bl	800f2ac <USB_ReadInterrupts>
 800827a:	4603      	mov	r3, r0
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b04      	cmp	r3, #4
 8008282:	d115      	bne.n	80082b0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f009 fcca 	bl	8011c30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6859      	ldr	r1, [r3, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	e000      	b.n	80082b0 <HAL_PCD_IRQHandler+0x996>
      return;
 80082ae:	bf00      	nop
    }
  }
}
 80082b0:	3734      	adds	r7, #52	@ 0x34
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd90      	pop	{r4, r7, pc}

080082b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_PCD_SetAddress+0x1a>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e012      	b.n	80082f6 <HAL_PCD_SetAddress+0x40>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f006 ff78 	bl	800f1dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	4608      	mov	r0, r1
 8008308:	4611      	mov	r1, r2
 800830a:	461a      	mov	r2, r3
 800830c:	4603      	mov	r3, r0
 800830e:	70fb      	strb	r3, [r7, #3]
 8008310:	460b      	mov	r3, r1
 8008312:	803b      	strh	r3, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800831c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008320:	2b00      	cmp	r3, #0
 8008322:	da0f      	bge.n	8008344 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	4613      	mov	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	3310      	adds	r3, #16
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	3304      	adds	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	705a      	strb	r2, [r3, #1]
 8008342:	e00f      	b.n	8008364 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	f003 020f 	and.w	r2, r3, #15
 800834a:	4613      	mov	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	4413      	add	r3, r2
 800835a:	3304      	adds	r3, #4
 800835c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	b2da      	uxtb	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008370:	883b      	ldrh	r3, [r7, #0]
 8008372:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	78ba      	ldrb	r2, [r7, #2]
 800837e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008392:	78bb      	ldrb	r3, [r7, #2]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d102      	bne.n	800839e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_PCD_EP_Open+0xae>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e00e      	b.n	80083ca <HAL_PCD_EP_Open+0xcc>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68f9      	ldr	r1, [r7, #12]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f006 f8f2 	bl	800e5a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80083c8:	7afb      	ldrb	r3, [r7, #11]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	460b      	mov	r3, r1
 80083dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80083de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da0f      	bge.n	8008406 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	4613      	mov	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	3310      	adds	r3, #16
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	3304      	adds	r3, #4
 80083fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	705a      	strb	r2, [r3, #1]
 8008404:	e00f      	b.n	8008426 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	f003 020f 	and.w	r2, r3, #15
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4413      	add	r3, r2
 800841c:	3304      	adds	r3, #4
 800841e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	b2da      	uxtb	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_PCD_EP_Close+0x6e>
 800843c:	2302      	movs	r3, #2
 800843e:	e00e      	b.n	800845e <HAL_PCD_EP_Close+0x8c>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	4618      	mov	r0, r3
 8008450:	f006 f930 	bl	800e6b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	460b      	mov	r3, r1
 8008474:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	f003 020f 	and.w	r2, r3, #15
 800847c:	4613      	mov	r3, r2
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2200      	movs	r2, #0
 80084a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2200      	movs	r2, #0
 80084a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	799b      	ldrb	r3, [r3, #6]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d102      	bne.n	80084c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	799b      	ldrb	r3, [r3, #6]
 80084ca:	461a      	mov	r2, r3
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	f006 f9cd 	bl	800e86c <USB_EPStartXfer>

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80084e8:	78fb      	ldrb	r3, [r7, #3]
 80084ea:	f003 020f 	and.w	r2, r3, #15
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4613      	mov	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80084fe:	681b      	ldr	r3, [r3, #0]
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	460b      	mov	r3, r1
 800851a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	f003 020f 	and.w	r2, r3, #15
 8008522:	4613      	mov	r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	3310      	adds	r3, #16
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	3304      	adds	r3, #4
 8008532:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2200      	movs	r2, #0
 8008544:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2201      	movs	r2, #1
 800854a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	b2da      	uxtb	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	799b      	ldrb	r3, [r3, #6]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d102      	bne.n	8008566 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	799b      	ldrb	r3, [r3, #6]
 800856e:	461a      	mov	r2, r3
 8008570:	6979      	ldr	r1, [r7, #20]
 8008572:	f006 f97b 	bl	800e86c <USB_EPStartXfer>

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	7912      	ldrb	r2, [r2, #4]
 8008596:	4293      	cmp	r3, r2
 8008598:	d901      	bls.n	800859e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e04f      	b.n	800863e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800859e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	da0f      	bge.n	80085c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	4613      	mov	r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	3310      	adds	r3, #16
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4413      	add	r3, r2
 80085ba:	3304      	adds	r3, #4
 80085bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2201      	movs	r2, #1
 80085c2:	705a      	strb	r2, [r3, #1]
 80085c4:	e00d      	b.n	80085e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	4613      	mov	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	3304      	adds	r3, #4
 80085da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_PCD_EP_SetStall+0x82>
 80085fe:	2302      	movs	r3, #2
 8008600:	e01d      	b.n	800863e <HAL_PCD_EP_SetStall+0xbe>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	4618      	mov	r0, r3
 8008612:	f006 fd0f 	bl	800f034 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	2b00      	cmp	r3, #0
 800861e:	d109      	bne.n	8008634 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6818      	ldr	r0, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	7999      	ldrb	r1, [r3, #6]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800862e:	461a      	mov	r2, r3
 8008630:	f006 ff02 	bl	800f438 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7912      	ldrb	r2, [r2, #4]
 800865c:	4293      	cmp	r3, r2
 800865e:	d901      	bls.n	8008664 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e042      	b.n	80086ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da0f      	bge.n	800868c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	f003 020f 	and.w	r2, r3, #15
 8008672:	4613      	mov	r3, r2
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	3310      	adds	r3, #16
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	4413      	add	r3, r2
 8008680:	3304      	adds	r3, #4
 8008682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	705a      	strb	r2, [r3, #1]
 800868a:	e00f      	b.n	80086ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	f003 020f 	and.w	r2, r3, #15
 8008692:	4613      	mov	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	3304      	adds	r3, #4
 80086a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_PCD_EP_ClrStall+0x86>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e00e      	b.n	80086ea <HAL_PCD_EP_ClrStall+0xa4>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68f9      	ldr	r1, [r7, #12]
 80086da:	4618      	mov	r0, r3
 80086dc:	f006 fd18 	bl	800f110 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80086fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008702:	2b00      	cmp	r3, #0
 8008704:	da0c      	bge.n	8008720 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	f003 020f 	and.w	r2, r3, #15
 800870c:	4613      	mov	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	3310      	adds	r3, #16
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4413      	add	r3, r2
 800871a:	3304      	adds	r3, #4
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e00c      	b.n	800873a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	f003 020f 	and.w	r2, r3, #15
 8008726:	4613      	mov	r3, r2
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	4413      	add	r3, r2
 8008736:	3304      	adds	r3, #4
 8008738:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	4618      	mov	r0, r3
 8008742:	f006 fb37 	bl	800edb4 <USB_EPStopXfer>
 8008746:	4603      	mov	r3, r0
 8008748:	72fb      	strb	r3, [r7, #11]

  return ret;
 800874a:	7afb      	ldrb	r3, [r7, #11]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	@ 0x28
 8008758:	af02      	add	r7, sp, #8
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	4613      	mov	r3, r2
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	3310      	adds	r3, #16
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	4413      	add	r3, r2
 8008778:	3304      	adds	r3, #4
 800877a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	695a      	ldr	r2, [r3, #20]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d901      	bls.n	800878c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e06b      	b.n	8008864 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d902      	bls.n	80087a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	3303      	adds	r3, #3
 80087ac:	089b      	lsrs	r3, r3, #2
 80087ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087b0:	e02a      	b.n	8008808 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d902      	bls.n	80087ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3303      	adds	r3, #3
 80087d2:	089b      	lsrs	r3, r3, #2
 80087d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68d9      	ldr	r1, [r3, #12]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4603      	mov	r3, r0
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	f006 fb8c 	bl	800ef08 <USB_WritePacket>

    ep->xfer_buff  += len;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	441a      	add	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	695a      	ldr	r2, [r3, #20]
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	441a      	add	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	429a      	cmp	r2, r3
 800881c:	d809      	bhi.n	8008832 <PCD_WriteEmptyTxFifo+0xde>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008826:	429a      	cmp	r2, r3
 8008828:	d203      	bcs.n	8008832 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1bf      	bne.n	80087b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	429a      	cmp	r2, r3
 800883c:	d811      	bhi.n	8008862 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	2201      	movs	r2, #1
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	43db      	mvns	r3, r3
 8008858:	6939      	ldr	r1, [r7, #16]
 800885a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800885e:	4013      	ands	r3, r2
 8008860:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3720      	adds	r7, #32
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	333c      	adds	r3, #60	@ 0x3c
 8008884:	3304      	adds	r3, #4
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	799b      	ldrb	r3, [r3, #6]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d17b      	bne.n	800899a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d015      	beq.n	80088d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4a61      	ldr	r2, [pc, #388]	@ (8008a34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	f240 80b9 	bls.w	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 80b3 	beq.w	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ce:	461a      	mov	r2, r3
 80088d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088d4:	6093      	str	r3, [r2, #8]
 80088d6:	e0a7      	b.n	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ee:	461a      	mov	r2, r3
 80088f0:	2320      	movs	r3, #32
 80088f2:	6093      	str	r3, [r2, #8]
 80088f4:	e098      	b.n	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 8093 	bne.w	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	4a4b      	ldr	r2, [pc, #300]	@ (8008a34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d90f      	bls.n	800892a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008920:	461a      	mov	r2, r3
 8008922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008926:	6093      	str	r3, [r2, #8]
 8008928:	e07e      	b.n	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800892a:	683a      	ldr	r2, [r7, #0]
 800892c:	4613      	mov	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4413      	add	r3, r2
 800893c:	3304      	adds	r3, #4
 800893e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1a      	ldr	r2, [r3, #32]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	0159      	lsls	r1, r3, #5
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	440b      	add	r3, r1
 800894c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d114      	bne.n	800898c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008974:	461a      	mov	r2, r3
 8008976:	2101      	movs	r1, #1
 8008978:	f006 fd5e 	bl	800f438 <USB_EP0_OutStart>
 800897c:	e006      	b.n	800898c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	441a      	add	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f009 f87a 	bl	8011a8c <HAL_PCD_DataOutStageCallback>
 8008998:	e046      	b.n	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4a26      	ldr	r2, [pc, #152]	@ (8008a38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d124      	bne.n	80089ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b8:	461a      	mov	r2, r3
 80089ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089be:	6093      	str	r3, [r2, #8]
 80089c0:	e032      	b.n	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d008      	beq.n	80089de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d8:	461a      	mov	r2, r3
 80089da:	2320      	movs	r3, #32
 80089dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f009 f851 	bl	8011a8c <HAL_PCD_DataOutStageCallback>
 80089ea:	e01d      	b.n	8008a28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d114      	bne.n	8008a1c <PCD_EP_OutXfrComplete_int+0x1b0>
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	4613      	mov	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	440b      	add	r3, r1
 8008a00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d108      	bne.n	8008a1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a14:	461a      	mov	r2, r3
 8008a16:	2100      	movs	r1, #0
 8008a18:	f006 fd0e 	bl	800f438 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f009 f832 	bl	8011a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	4f54300a 	.word	0x4f54300a
 8008a38:	4f54310a 	.word	0x4f54310a

08008a3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	333c      	adds	r3, #60	@ 0x3c
 8008a54:	3304      	adds	r3, #4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	4a15      	ldr	r2, [pc, #84]	@ (8008ac4 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d90e      	bls.n	8008a90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f008 ffe9 	bl	8011a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac4 <PCD_EP_OutSetupPacket_int+0x88>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d90c      	bls.n	8008ab8 <PCD_EP_OutSetupPacket_int+0x7c>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	799b      	ldrb	r3, [r3, #6]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d108      	bne.n	8008ab8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	f006 fcc0 	bl	800f438 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	4f54300a 	.word	0x4f54300a

08008ac8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ade:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d107      	bne.n	8008af6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008ae6:	883b      	ldrh	r3, [r7, #0]
 8008ae8:	0419      	lsls	r1, r3, #16
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8008af4:	e028      	b.n	8008b48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	0c1b      	lsrs	r3, r3, #16
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
 8008b08:	e00d      	b.n	8008b26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	3340      	adds	r3, #64	@ 0x40
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	3301      	adds	r3, #1
 8008b24:	73fb      	strb	r3, [r7, #15]
 8008b26:	7bfa      	ldrb	r2, [r7, #15]
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d3ec      	bcc.n	8008b0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b30:	883b      	ldrh	r3, [r7, #0]
 8008b32:	0418      	lsls	r0, r3, #16
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6819      	ldr	r1, [r3, #0]
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	4302      	orrs	r2, r0
 8008b40:	3340      	adds	r3, #64	@ 0x40
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	460b      	mov	r3, r1
 8008b60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	887a      	ldrh	r2, [r7, #2]
 8008b68:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ba6:	4b05      	ldr	r3, [pc, #20]	@ (8008bbc <HAL_PCDEx_ActivateLPM+0x44>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	10000003 	.word	0x10000003

08008bc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008be0:	4b19      	ldr	r3, [pc, #100]	@ (8008c48 <HAL_PWREx_ConfigSupply+0x70>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d00a      	beq.n	8008c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bec:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <HAL_PWREx_ConfigSupply+0x70>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0307 	and.w	r3, r3, #7
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d001      	beq.n	8008bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e01f      	b.n	8008c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e01d      	b.n	8008c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c02:	4b11      	ldr	r3, [pc, #68]	@ (8008c48 <HAL_PWREx_ConfigSupply+0x70>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f023 0207 	bic.w	r2, r3, #7
 8008c0a:	490f      	ldr	r1, [pc, #60]	@ (8008c48 <HAL_PWREx_ConfigSupply+0x70>)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c12:	f7f9 fa83 	bl	800211c <HAL_GetTick>
 8008c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c18:	e009      	b.n	8008c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c1a:	f7f9 fa7f 	bl	800211c <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c28:	d901      	bls.n	8008c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e007      	b.n	8008c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c2e:	4b06      	ldr	r3, [pc, #24]	@ (8008c48 <HAL_PWREx_ConfigSupply+0x70>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c3a:	d1ee      	bne.n	8008c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	58024800 	.word	0x58024800

08008c4c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008c50:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	4a04      	ldr	r2, [pc, #16]	@ (8008c68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c5a:	60d3      	str	r3, [r2, #12]
}
 8008c5c:	bf00      	nop
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	58024800 	.word	0x58024800

08008c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	@ 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f000 bc48 	b.w	8009510 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 8088 	beq.w	8008d9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c8e:	4b99      	ldr	r3, [pc, #612]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c98:	4b96      	ldr	r3, [pc, #600]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d007      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x48>
 8008ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca6:	2b18      	cmp	r3, #24
 8008ca8:	d111      	bne.n	8008cce <HAL_RCC_OscConfig+0x62>
 8008caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cac:	f003 0303 	and.w	r3, r3, #3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d10c      	bne.n	8008cce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d06d      	beq.n	8008d9c <HAL_RCC_OscConfig+0x130>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d169      	bne.n	8008d9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f000 bc21 	b.w	8009510 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd6:	d106      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x7a>
 8008cd8:	4b86      	ldr	r3, [pc, #536]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a85      	ldr	r2, [pc, #532]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	e02e      	b.n	8008d44 <HAL_RCC_OscConfig+0xd8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10c      	bne.n	8008d08 <HAL_RCC_OscConfig+0x9c>
 8008cee:	4b81      	ldr	r3, [pc, #516]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a80      	ldr	r2, [pc, #512]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	4b7e      	ldr	r3, [pc, #504]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a7d      	ldr	r2, [pc, #500]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	e01d      	b.n	8008d44 <HAL_RCC_OscConfig+0xd8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d10:	d10c      	bne.n	8008d2c <HAL_RCC_OscConfig+0xc0>
 8008d12:	4b78      	ldr	r3, [pc, #480]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a77      	ldr	r2, [pc, #476]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	4b75      	ldr	r3, [pc, #468]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a74      	ldr	r2, [pc, #464]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	e00b      	b.n	8008d44 <HAL_RCC_OscConfig+0xd8>
 8008d2c:	4b71      	ldr	r3, [pc, #452]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a70      	ldr	r2, [pc, #448]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	4b6e      	ldr	r3, [pc, #440]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a6d      	ldr	r2, [pc, #436]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d013      	beq.n	8008d74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7f9 f9e6 	bl	800211c <HAL_GetTick>
 8008d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d54:	f7f9 f9e2 	bl	800211c <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b64      	cmp	r3, #100	@ 0x64
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e3d4      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d66:	4b63      	ldr	r3, [pc, #396]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0xe8>
 8008d72:	e014      	b.n	8008d9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d74:	f7f9 f9d2 	bl	800211c <HAL_GetTick>
 8008d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d7a:	e008      	b.n	8008d8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d7c:	f7f9 f9ce 	bl	800211c <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b64      	cmp	r3, #100	@ 0x64
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e3c0      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d8e:	4b59      	ldr	r3, [pc, #356]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f0      	bne.n	8008d7c <HAL_RCC_OscConfig+0x110>
 8008d9a:	e000      	b.n	8008d9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80ca 	beq.w	8008f40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dac:	4b51      	ldr	r3, [pc, #324]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008db4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008db6:	4b4f      	ldr	r3, [pc, #316]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d007      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x166>
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	2b18      	cmp	r3, #24
 8008dc6:	d156      	bne.n	8008e76 <HAL_RCC_OscConfig+0x20a>
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d151      	bne.n	8008e76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dd2:	4b48      	ldr	r3, [pc, #288]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0304 	and.w	r3, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <HAL_RCC_OscConfig+0x17e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e392      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008dea:	4b42      	ldr	r3, [pc, #264]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f023 0219 	bic.w	r2, r3, #25
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	493f      	ldr	r1, [pc, #252]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfc:	f7f9 f98e 	bl	800211c <HAL_GetTick>
 8008e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e04:	f7f9 f98a 	bl	800211c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e37c      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e16:	4b37      	ldr	r3, [pc, #220]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e22:	f7f9 f9ab 	bl	800217c <HAL_GetREVID>
 8008e26:	4603      	mov	r3, r0
 8008e28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d817      	bhi.n	8008e60 <HAL_RCC_OscConfig+0x1f4>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	2b40      	cmp	r3, #64	@ 0x40
 8008e36:	d108      	bne.n	8008e4a <HAL_RCC_OscConfig+0x1de>
 8008e38:	4b2e      	ldr	r3, [pc, #184]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008e40:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e48:	e07a      	b.n	8008f40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	031b      	lsls	r3, r3, #12
 8008e58:	4926      	ldr	r1, [pc, #152]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e5e:	e06f      	b.n	8008f40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e60:	4b24      	ldr	r3, [pc, #144]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	4921      	ldr	r1, [pc, #132]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e74:	e064      	b.n	8008f40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d047      	beq.n	8008f0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f023 0219 	bic.w	r2, r3, #25
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	491a      	ldr	r1, [pc, #104]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e90:	f7f9 f944 	bl	800211c <HAL_GetTick>
 8008e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e98:	f7f9 f940 	bl	800211c <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e332      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eaa:	4b12      	ldr	r3, [pc, #72]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f0      	beq.n	8008e98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb6:	f7f9 f961 	bl	800217c <HAL_GetREVID>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d819      	bhi.n	8008ef8 <HAL_RCC_OscConfig+0x28c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	2b40      	cmp	r3, #64	@ 0x40
 8008eca:	d108      	bne.n	8008ede <HAL_RCC_OscConfig+0x272>
 8008ecc:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ed4:	4a07      	ldr	r2, [pc, #28]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eda:	6053      	str	r3, [r2, #4]
 8008edc:	e030      	b.n	8008f40 <HAL_RCC_OscConfig+0x2d4>
 8008ede:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	031b      	lsls	r3, r3, #12
 8008eec:	4901      	ldr	r1, [pc, #4]	@ (8008ef4 <HAL_RCC_OscConfig+0x288>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	604b      	str	r3, [r1, #4]
 8008ef2:	e025      	b.n	8008f40 <HAL_RCC_OscConfig+0x2d4>
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	4b9a      	ldr	r3, [pc, #616]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	061b      	lsls	r3, r3, #24
 8008f06:	4997      	ldr	r1, [pc, #604]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	604b      	str	r3, [r1, #4]
 8008f0c:	e018      	b.n	8008f40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f0e:	4b95      	ldr	r3, [pc, #596]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a94      	ldr	r2, [pc, #592]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f1a:	f7f9 f8ff 	bl	800211c <HAL_GetTick>
 8008f1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f20:	e008      	b.n	8008f34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f22:	f7f9 f8fb 	bl	800211c <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e2ed      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f34:	4b8b      	ldr	r3, [pc, #556]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f0      	bne.n	8008f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0310 	and.w	r3, r3, #16
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 80a9 	beq.w	80090a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f4e:	4b85      	ldr	r3, [pc, #532]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f58:	4b82      	ldr	r3, [pc, #520]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d007      	beq.n	8008f74 <HAL_RCC_OscConfig+0x308>
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	2b18      	cmp	r3, #24
 8008f68:	d13a      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x374>
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d135      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f74:	4b7b      	ldr	r3, [pc, #492]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <HAL_RCC_OscConfig+0x320>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	2b80      	cmp	r3, #128	@ 0x80
 8008f86:	d001      	beq.n	8008f8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e2c1      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f8c:	f7f9 f8f6 	bl	800217c <HAL_GetREVID>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d817      	bhi.n	8008fca <HAL_RCC_OscConfig+0x35e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d108      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x348>
 8008fa2:	4b70      	ldr	r3, [pc, #448]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008faa:	4a6e      	ldr	r2, [pc, #440]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fb2:	e075      	b.n	80090a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	069b      	lsls	r3, r3, #26
 8008fc2:	4968      	ldr	r1, [pc, #416]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fc8:	e06a      	b.n	80090a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fca:	4b66      	ldr	r3, [pc, #408]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	061b      	lsls	r3, r3, #24
 8008fd8:	4962      	ldr	r1, [pc, #392]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fde:	e05f      	b.n	80090a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d042      	beq.n	800906e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a5d      	ldr	r2, [pc, #372]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8008fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff4:	f7f9 f892 	bl	800211c <HAL_GetTick>
 8008ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ffc:	f7f9 f88e 	bl	800211c <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e280      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800900e:	4b55      	ldr	r3, [pc, #340]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0f0      	beq.n	8008ffc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800901a:	f7f9 f8af 	bl	800217c <HAL_GetREVID>
 800901e:	4603      	mov	r3, r0
 8009020:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009024:	4293      	cmp	r3, r2
 8009026:	d817      	bhi.n	8009058 <HAL_RCC_OscConfig+0x3ec>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	2b20      	cmp	r3, #32
 800902e:	d108      	bne.n	8009042 <HAL_RCC_OscConfig+0x3d6>
 8009030:	4b4c      	ldr	r3, [pc, #304]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009038:	4a4a      	ldr	r2, [pc, #296]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 800903a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800903e:	6053      	str	r3, [r2, #4]
 8009040:	e02e      	b.n	80090a0 <HAL_RCC_OscConfig+0x434>
 8009042:	4b48      	ldr	r3, [pc, #288]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	069b      	lsls	r3, r3, #26
 8009050:	4944      	ldr	r1, [pc, #272]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009052:	4313      	orrs	r3, r2
 8009054:	604b      	str	r3, [r1, #4]
 8009056:	e023      	b.n	80090a0 <HAL_RCC_OscConfig+0x434>
 8009058:	4b42      	ldr	r3, [pc, #264]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	061b      	lsls	r3, r3, #24
 8009066:	493f      	ldr	r1, [pc, #252]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009068:	4313      	orrs	r3, r2
 800906a:	60cb      	str	r3, [r1, #12]
 800906c:	e018      	b.n	80090a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800906e:	4b3d      	ldr	r3, [pc, #244]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a3c      	ldr	r2, [pc, #240]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907a:	f7f9 f84f 	bl	800211c <HAL_GetTick>
 800907e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009080:	e008      	b.n	8009094 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009082:	f7f9 f84b 	bl	800211c <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d901      	bls.n	8009094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e23d      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009094:	4b33      	ldr	r3, [pc, #204]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1f0      	bne.n	8009082 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0308 	and.w	r3, r3, #8
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d036      	beq.n	800911a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d019      	beq.n	80090e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090b4:	4b2b      	ldr	r3, [pc, #172]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 80090b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c0:	f7f9 f82c 	bl	800211c <HAL_GetTick>
 80090c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090c8:	f7f9 f828 	bl	800211c <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e21a      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090da:	4b22      	ldr	r3, [pc, #136]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 80090dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCC_OscConfig+0x45c>
 80090e6:	e018      	b.n	800911a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 80090ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 80090ee:	f023 0301 	bic.w	r3, r3, #1
 80090f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f4:	f7f9 f812 	bl	800211c <HAL_GetTick>
 80090f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090fa:	e008      	b.n	800910e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090fc:	f7f9 f80e 	bl	800211c <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d901      	bls.n	800910e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e200      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800910e:	4b15      	ldr	r3, [pc, #84]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1f0      	bne.n	80090fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d039      	beq.n	800919a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01c      	beq.n	8009168 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800912e:	4b0d      	ldr	r3, [pc, #52]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a0c      	ldr	r2, [pc, #48]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009134:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009138:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800913a:	f7f8 ffef 	bl	800211c <HAL_GetTick>
 800913e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009140:	e008      	b.n	8009154 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009142:	f7f8 ffeb 	bl	800211c <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e1dd      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009154:	4b03      	ldr	r3, [pc, #12]	@ (8009164 <HAL_RCC_OscConfig+0x4f8>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f0      	beq.n	8009142 <HAL_RCC_OscConfig+0x4d6>
 8009160:	e01b      	b.n	800919a <HAL_RCC_OscConfig+0x52e>
 8009162:	bf00      	nop
 8009164:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009168:	4b9b      	ldr	r3, [pc, #620]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a9a      	ldr	r2, [pc, #616]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800916e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009172:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009174:	f7f8 ffd2 	bl	800211c <HAL_GetTick>
 8009178:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800917c:	f7f8 ffce 	bl	800211c <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e1c0      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800918e:	4b92      	ldr	r3, [pc, #584]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f0      	bne.n	800917c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 8081 	beq.w	80092aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091a8:	4b8c      	ldr	r3, [pc, #560]	@ (80093dc <HAL_RCC_OscConfig+0x770>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a8b      	ldr	r2, [pc, #556]	@ (80093dc <HAL_RCC_OscConfig+0x770>)
 80091ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091b4:	f7f8 ffb2 	bl	800211c <HAL_GetTick>
 80091b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ba:	e008      	b.n	80091ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091bc:	f7f8 ffae 	bl	800211c <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b64      	cmp	r3, #100	@ 0x64
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e1a0      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ce:	4b83      	ldr	r3, [pc, #524]	@ (80093dc <HAL_RCC_OscConfig+0x770>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0f0      	beq.n	80091bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d106      	bne.n	80091f0 <HAL_RCC_OscConfig+0x584>
 80091e2:	4b7d      	ldr	r3, [pc, #500]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80091e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e6:	4a7c      	ldr	r2, [pc, #496]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ee:	e02d      	b.n	800924c <HAL_RCC_OscConfig+0x5e0>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10c      	bne.n	8009212 <HAL_RCC_OscConfig+0x5a6>
 80091f8:	4b77      	ldr	r3, [pc, #476]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80091fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fc:	4a76      	ldr	r2, [pc, #472]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80091fe:	f023 0301 	bic.w	r3, r3, #1
 8009202:	6713      	str	r3, [r2, #112]	@ 0x70
 8009204:	4b74      	ldr	r3, [pc, #464]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009208:	4a73      	ldr	r2, [pc, #460]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800920a:	f023 0304 	bic.w	r3, r3, #4
 800920e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009210:	e01c      	b.n	800924c <HAL_RCC_OscConfig+0x5e0>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	2b05      	cmp	r3, #5
 8009218:	d10c      	bne.n	8009234 <HAL_RCC_OscConfig+0x5c8>
 800921a:	4b6f      	ldr	r3, [pc, #444]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800921c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800921e:	4a6e      	ldr	r2, [pc, #440]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009220:	f043 0304 	orr.w	r3, r3, #4
 8009224:	6713      	str	r3, [r2, #112]	@ 0x70
 8009226:	4b6c      	ldr	r3, [pc, #432]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800922a:	4a6b      	ldr	r2, [pc, #428]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	6713      	str	r3, [r2, #112]	@ 0x70
 8009232:	e00b      	b.n	800924c <HAL_RCC_OscConfig+0x5e0>
 8009234:	4b68      	ldr	r3, [pc, #416]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009238:	4a67      	ldr	r2, [pc, #412]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009240:	4b65      	ldr	r3, [pc, #404]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009244:	4a64      	ldr	r2, [pc, #400]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009246:	f023 0304 	bic.w	r3, r3, #4
 800924a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d015      	beq.n	8009280 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009254:	f7f8 ff62 	bl	800211c <HAL_GetTick>
 8009258:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800925a:	e00a      	b.n	8009272 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800925c:	f7f8 ff5e 	bl	800211c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800926a:	4293      	cmp	r3, r2
 800926c:	d901      	bls.n	8009272 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e14e      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009272:	4b59      	ldr	r3, [pc, #356]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0ee      	beq.n	800925c <HAL_RCC_OscConfig+0x5f0>
 800927e:	e014      	b.n	80092aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009280:	f7f8 ff4c 	bl	800211c <HAL_GetTick>
 8009284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009286:	e00a      	b.n	800929e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009288:	f7f8 ff48 	bl	800211c <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009296:	4293      	cmp	r3, r2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e138      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800929e:	4b4e      	ldr	r3, [pc, #312]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80092a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1ee      	bne.n	8009288 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 812d 	beq.w	800950e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092b4:	4b48      	ldr	r3, [pc, #288]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092bc:	2b18      	cmp	r3, #24
 80092be:	f000 80bd 	beq.w	800943c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	f040 809e 	bne.w	8009408 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092cc:	4b42      	ldr	r3, [pc, #264]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a41      	ldr	r2, [pc, #260]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80092d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d8:	f7f8 ff20 	bl	800211c <HAL_GetTick>
 80092dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092de:	e008      	b.n	80092f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092e0:	f7f8 ff1c 	bl	800211c <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e10e      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092f2:	4b39      	ldr	r3, [pc, #228]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f0      	bne.n	80092e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092fe:	4b36      	ldr	r3, [pc, #216]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009300:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009302:	4b37      	ldr	r3, [pc, #220]	@ (80093e0 <HAL_RCC_OscConfig+0x774>)
 8009304:	4013      	ands	r3, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800930e:	0112      	lsls	r2, r2, #4
 8009310:	430a      	orrs	r2, r1
 8009312:	4931      	ldr	r1, [pc, #196]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009314:	4313      	orrs	r3, r2
 8009316:	628b      	str	r3, [r1, #40]	@ 0x28
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931c:	3b01      	subs	r3, #1
 800931e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009326:	3b01      	subs	r3, #1
 8009328:	025b      	lsls	r3, r3, #9
 800932a:	b29b      	uxth	r3, r3
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009332:	3b01      	subs	r3, #1
 8009334:	041b      	lsls	r3, r3, #16
 8009336:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009340:	3b01      	subs	r3, #1
 8009342:	061b      	lsls	r3, r3, #24
 8009344:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009348:	4923      	ldr	r1, [pc, #140]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800934a:	4313      	orrs	r3, r2
 800934c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800934e:	4b22      	ldr	r3, [pc, #136]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	4a21      	ldr	r2, [pc, #132]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800935a:	4b1f      	ldr	r3, [pc, #124]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800935c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800935e:	4b21      	ldr	r3, [pc, #132]	@ (80093e4 <HAL_RCC_OscConfig+0x778>)
 8009360:	4013      	ands	r3, r2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009366:	00d2      	lsls	r2, r2, #3
 8009368:	491b      	ldr	r1, [pc, #108]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800936a:	4313      	orrs	r3, r2
 800936c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800936e:	4b1a      	ldr	r3, [pc, #104]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009372:	f023 020c 	bic.w	r2, r3, #12
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937a:	4917      	ldr	r1, [pc, #92]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800937c:	4313      	orrs	r3, r2
 800937e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009380:	4b15      	ldr	r3, [pc, #84]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009384:	f023 0202 	bic.w	r2, r3, #2
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938c:	4912      	ldr	r1, [pc, #72]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 800938e:	4313      	orrs	r3, r2
 8009390:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009392:	4b11      	ldr	r3, [pc, #68]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009396:	4a10      	ldr	r2, [pc, #64]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 8009398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800939c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939e:	4b0e      	ldr	r3, [pc, #56]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a2:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093aa:	4b0b      	ldr	r3, [pc, #44]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ae:	4a0a      	ldr	r2, [pc, #40]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80093b6:	4b08      	ldr	r3, [pc, #32]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ba:	4a07      	ldr	r2, [pc, #28]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093c2:	4b05      	ldr	r3, [pc, #20]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a04      	ldr	r2, [pc, #16]	@ (80093d8 <HAL_RCC_OscConfig+0x76c>)
 80093c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ce:	f7f8 fea5 	bl	800211c <HAL_GetTick>
 80093d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093d4:	e011      	b.n	80093fa <HAL_RCC_OscConfig+0x78e>
 80093d6:	bf00      	nop
 80093d8:	58024400 	.word	0x58024400
 80093dc:	58024800 	.word	0x58024800
 80093e0:	fffffc0c 	.word	0xfffffc0c
 80093e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093e8:	f7f8 fe98 	bl	800211c <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e08a      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093fa:	4b47      	ldr	r3, [pc, #284]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f0      	beq.n	80093e8 <HAL_RCC_OscConfig+0x77c>
 8009406:	e082      	b.n	800950e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009408:	4b43      	ldr	r3, [pc, #268]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a42      	ldr	r2, [pc, #264]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009414:	f7f8 fe82 	bl	800211c <HAL_GetTick>
 8009418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800941a:	e008      	b.n	800942e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800941c:	f7f8 fe7e 	bl	800211c <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d901      	bls.n	800942e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e070      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800942e:	4b3a      	ldr	r3, [pc, #232]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1f0      	bne.n	800941c <HAL_RCC_OscConfig+0x7b0>
 800943a:	e068      	b.n	800950e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800943c:	4b36      	ldr	r3, [pc, #216]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009442:	4b35      	ldr	r3, [pc, #212]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 8009444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009446:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	2b01      	cmp	r3, #1
 800944e:	d031      	beq.n	80094b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f003 0203 	and.w	r2, r3, #3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800945a:	429a      	cmp	r2, r3
 800945c:	d12a      	bne.n	80094b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	091b      	lsrs	r3, r3, #4
 8009462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946a:	429a      	cmp	r2, r3
 800946c:	d122      	bne.n	80094b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009478:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800947a:	429a      	cmp	r2, r3
 800947c:	d11a      	bne.n	80094b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	0a5b      	lsrs	r3, r3, #9
 8009482:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d111      	bne.n	80094b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800949e:	429a      	cmp	r2, r3
 80094a0:	d108      	bne.n	80094b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	0e1b      	lsrs	r3, r3, #24
 80094a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d001      	beq.n	80094b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e02b      	b.n	8009510 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80094b8:	4b17      	ldr	r3, [pc, #92]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 80094ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094bc:	08db      	lsrs	r3, r3, #3
 80094be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d01f      	beq.n	800950e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094ce:	4b12      	ldr	r3, [pc, #72]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	4a11      	ldr	r2, [pc, #68]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094da:	f7f8 fe1f 	bl	800211c <HAL_GetTick>
 80094de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80094e0:	bf00      	nop
 80094e2:	f7f8 fe1b 	bl	800211c <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d0f9      	beq.n	80094e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 80094f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094f2:	4b0a      	ldr	r3, [pc, #40]	@ (800951c <HAL_RCC_OscConfig+0x8b0>)
 80094f4:	4013      	ands	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80094fa:	00d2      	lsls	r2, r2, #3
 80094fc:	4906      	ldr	r1, [pc, #24]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009502:	4b05      	ldr	r3, [pc, #20]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 8009504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009506:	4a04      	ldr	r2, [pc, #16]	@ (8009518 <HAL_RCC_OscConfig+0x8ac>)
 8009508:	f043 0301 	orr.w	r3, r3, #1
 800950c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3730      	adds	r7, #48	@ 0x30
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58024400 	.word	0x58024400
 800951c:	ffff0007 	.word	0xffff0007

08009520 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e19c      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009534:	4b8a      	ldr	r3, [pc, #552]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d910      	bls.n	8009564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009542:	4b87      	ldr	r3, [pc, #540]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f023 020f 	bic.w	r2, r3, #15
 800954a:	4985      	ldr	r1, [pc, #532]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	4313      	orrs	r3, r2
 8009550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009552:	4b83      	ldr	r3, [pc, #524]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 030f 	and.w	r3, r3, #15
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	429a      	cmp	r2, r3
 800955e:	d001      	beq.n	8009564 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e184      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d010      	beq.n	8009592 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691a      	ldr	r2, [r3, #16]
 8009574:	4b7b      	ldr	r3, [pc, #492]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800957c:	429a      	cmp	r2, r3
 800957e:	d908      	bls.n	8009592 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009580:	4b78      	ldr	r3, [pc, #480]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	4975      	ldr	r1, [pc, #468]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 800958e:	4313      	orrs	r3, r2
 8009590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0308 	and.w	r3, r3, #8
 800959a:	2b00      	cmp	r3, #0
 800959c:	d010      	beq.n	80095c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695a      	ldr	r2, [r3, #20]
 80095a2:	4b70      	ldr	r3, [pc, #448]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d908      	bls.n	80095c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095ae:	4b6d      	ldr	r3, [pc, #436]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	496a      	ldr	r1, [pc, #424]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d010      	beq.n	80095ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699a      	ldr	r2, [r3, #24]
 80095d0:	4b64      	ldr	r3, [pc, #400]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095d8:	429a      	cmp	r2, r3
 80095da:	d908      	bls.n	80095ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095dc:	4b61      	ldr	r3, [pc, #388]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	495e      	ldr	r1, [pc, #376]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d010      	beq.n	800961c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	69da      	ldr	r2, [r3, #28]
 80095fe:	4b59      	ldr	r3, [pc, #356]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009606:	429a      	cmp	r2, r3
 8009608:	d908      	bls.n	800961c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800960a:	4b56      	ldr	r3, [pc, #344]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	4953      	ldr	r1, [pc, #332]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009618:	4313      	orrs	r3, r2
 800961a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	d010      	beq.n	800964a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	4b4d      	ldr	r3, [pc, #308]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	f003 030f 	and.w	r3, r3, #15
 8009634:	429a      	cmp	r2, r3
 8009636:	d908      	bls.n	800964a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009638:	4b4a      	ldr	r3, [pc, #296]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	f023 020f 	bic.w	r2, r3, #15
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	4947      	ldr	r1, [pc, #284]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009646:	4313      	orrs	r3, r2
 8009648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d055      	beq.n	8009702 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009656:	4b43      	ldr	r3, [pc, #268]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	4940      	ldr	r1, [pc, #256]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009664:	4313      	orrs	r3, r2
 8009666:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d107      	bne.n	8009680 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009670:	4b3c      	ldr	r3, [pc, #240]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d121      	bne.n	80096c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e0f6      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2b03      	cmp	r3, #3
 8009686:	d107      	bne.n	8009698 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009688:	4b36      	ldr	r3, [pc, #216]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d115      	bne.n	80096c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e0ea      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d107      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096a0:	4b30      	ldr	r3, [pc, #192]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d109      	bne.n	80096c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0de      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096b0:	4b2c      	ldr	r3, [pc, #176]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e0d6      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096c0:	4b28      	ldr	r3, [pc, #160]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f023 0207 	bic.w	r2, r3, #7
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	4925      	ldr	r1, [pc, #148]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096d2:	f7f8 fd23 	bl	800211c <HAL_GetTick>
 80096d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096d8:	e00a      	b.n	80096f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096da:	f7f8 fd1f 	bl	800211c <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e0be      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	429a      	cmp	r2, r3
 8009700:	d1eb      	bne.n	80096da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0302 	and.w	r3, r3, #2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d010      	beq.n	8009730 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	4b14      	ldr	r3, [pc, #80]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	429a      	cmp	r2, r3
 800971c:	d208      	bcs.n	8009730 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800971e:	4b11      	ldr	r3, [pc, #68]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	f023 020f 	bic.w	r2, r3, #15
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	490e      	ldr	r1, [pc, #56]	@ (8009764 <HAL_RCC_ClockConfig+0x244>)
 800972c:	4313      	orrs	r3, r2
 800972e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009730:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d214      	bcs.n	8009768 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800973e:	4b08      	ldr	r3, [pc, #32]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f023 020f 	bic.w	r2, r3, #15
 8009746:	4906      	ldr	r1, [pc, #24]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	4313      	orrs	r3, r2
 800974c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800974e:	4b04      	ldr	r3, [pc, #16]	@ (8009760 <HAL_RCC_ClockConfig+0x240>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d005      	beq.n	8009768 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e086      	b.n	800986e <HAL_RCC_ClockConfig+0x34e>
 8009760:	52002000 	.word	0x52002000
 8009764:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	4b3f      	ldr	r3, [pc, #252]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009780:	429a      	cmp	r2, r3
 8009782:	d208      	bcs.n	8009796 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009784:	4b3c      	ldr	r3, [pc, #240]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	4939      	ldr	r1, [pc, #228]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 8009792:	4313      	orrs	r3, r2
 8009794:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d010      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695a      	ldr	r2, [r3, #20]
 80097a6:	4b34      	ldr	r3, [pc, #208]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d208      	bcs.n	80097c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097b2:	4b31      	ldr	r3, [pc, #196]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	492e      	ldr	r1, [pc, #184]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d010      	beq.n	80097f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699a      	ldr	r2, [r3, #24]
 80097d4:	4b28      	ldr	r3, [pc, #160]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097dc:	429a      	cmp	r2, r3
 80097de:	d208      	bcs.n	80097f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097e0:	4b25      	ldr	r3, [pc, #148]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	4922      	ldr	r1, [pc, #136]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0320 	and.w	r3, r3, #32
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d010      	beq.n	8009820 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	69da      	ldr	r2, [r3, #28]
 8009802:	4b1d      	ldr	r3, [pc, #116]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800980a:	429a      	cmp	r2, r3
 800980c:	d208      	bcs.n	8009820 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800980e:	4b1a      	ldr	r3, [pc, #104]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	4917      	ldr	r1, [pc, #92]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 800981c:	4313      	orrs	r3, r2
 800981e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009820:	f000 f834 	bl	800988c <HAL_RCC_GetSysClockFreq>
 8009824:	4602      	mov	r2, r0
 8009826:	4b14      	ldr	r3, [pc, #80]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	0a1b      	lsrs	r3, r3, #8
 800982c:	f003 030f 	and.w	r3, r3, #15
 8009830:	4912      	ldr	r1, [pc, #72]	@ (800987c <HAL_RCC_ClockConfig+0x35c>)
 8009832:	5ccb      	ldrb	r3, [r1, r3]
 8009834:	f003 031f 	and.w	r3, r3, #31
 8009838:	fa22 f303 	lsr.w	r3, r2, r3
 800983c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800983e:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <HAL_RCC_ClockConfig+0x358>)
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f003 030f 	and.w	r3, r3, #15
 8009846:	4a0d      	ldr	r2, [pc, #52]	@ (800987c <HAL_RCC_ClockConfig+0x35c>)
 8009848:	5cd3      	ldrb	r3, [r2, r3]
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	fa22 f303 	lsr.w	r3, r2, r3
 8009854:	4a0a      	ldr	r2, [pc, #40]	@ (8009880 <HAL_RCC_ClockConfig+0x360>)
 8009856:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009858:	4a0a      	ldr	r2, [pc, #40]	@ (8009884 <HAL_RCC_ClockConfig+0x364>)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800985e:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <HAL_RCC_ClockConfig+0x368>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7f8 fc10 	bl	8002088 <HAL_InitTick>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3718      	adds	r7, #24
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	58024400 	.word	0x58024400
 800987c:	08012ad8 	.word	0x08012ad8
 8009880:	24000008 	.word	0x24000008
 8009884:	24000004 	.word	0x24000004
 8009888:	2400000c 	.word	0x2400000c

0800988c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800988c:	b480      	push	{r7}
 800988e:	b089      	sub	sp, #36	@ 0x24
 8009890:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009892:	4bb3      	ldr	r3, [pc, #716]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800989a:	2b18      	cmp	r3, #24
 800989c:	f200 8155 	bhi.w	8009b4a <HAL_RCC_GetSysClockFreq+0x2be>
 80098a0:	a201      	add	r2, pc, #4	@ (adr r2, 80098a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80098a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a6:	bf00      	nop
 80098a8:	0800990d 	.word	0x0800990d
 80098ac:	08009b4b 	.word	0x08009b4b
 80098b0:	08009b4b 	.word	0x08009b4b
 80098b4:	08009b4b 	.word	0x08009b4b
 80098b8:	08009b4b 	.word	0x08009b4b
 80098bc:	08009b4b 	.word	0x08009b4b
 80098c0:	08009b4b 	.word	0x08009b4b
 80098c4:	08009b4b 	.word	0x08009b4b
 80098c8:	08009933 	.word	0x08009933
 80098cc:	08009b4b 	.word	0x08009b4b
 80098d0:	08009b4b 	.word	0x08009b4b
 80098d4:	08009b4b 	.word	0x08009b4b
 80098d8:	08009b4b 	.word	0x08009b4b
 80098dc:	08009b4b 	.word	0x08009b4b
 80098e0:	08009b4b 	.word	0x08009b4b
 80098e4:	08009b4b 	.word	0x08009b4b
 80098e8:	08009939 	.word	0x08009939
 80098ec:	08009b4b 	.word	0x08009b4b
 80098f0:	08009b4b 	.word	0x08009b4b
 80098f4:	08009b4b 	.word	0x08009b4b
 80098f8:	08009b4b 	.word	0x08009b4b
 80098fc:	08009b4b 	.word	0x08009b4b
 8009900:	08009b4b 	.word	0x08009b4b
 8009904:	08009b4b 	.word	0x08009b4b
 8009908:	0800993f 	.word	0x0800993f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800990c:	4b94      	ldr	r3, [pc, #592]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0320 	and.w	r3, r3, #32
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009918:	4b91      	ldr	r3, [pc, #580]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	08db      	lsrs	r3, r3, #3
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	4a90      	ldr	r2, [pc, #576]	@ (8009b64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
 8009928:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800992a:	e111      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800992c:	4b8d      	ldr	r3, [pc, #564]	@ (8009b64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800992e:	61bb      	str	r3, [r7, #24]
      break;
 8009930:	e10e      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009932:	4b8d      	ldr	r3, [pc, #564]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009934:	61bb      	str	r3, [r7, #24]
      break;
 8009936:	e10b      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009938:	4b8c      	ldr	r3, [pc, #560]	@ (8009b6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800993a:	61bb      	str	r3, [r7, #24]
      break;
 800993c:	e108      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800993e:	4b88      	ldr	r3, [pc, #544]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009942:	f003 0303 	and.w	r3, r3, #3
 8009946:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009948:	4b85      	ldr	r3, [pc, #532]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800994a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994c:	091b      	lsrs	r3, r3, #4
 800994e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009952:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009954:	4b82      	ldr	r3, [pc, #520]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800995e:	4b80      	ldr	r3, [pc, #512]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009962:	08db      	lsrs	r3, r3, #3
 8009964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	fb02 f303 	mul.w	r3, r2, r3
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009976:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 80e1 	beq.w	8009b44 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b02      	cmp	r3, #2
 8009986:	f000 8083 	beq.w	8009a90 <HAL_RCC_GetSysClockFreq+0x204>
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b02      	cmp	r3, #2
 800998e:	f200 80a1 	bhi.w	8009ad4 <HAL_RCC_GetSysClockFreq+0x248>
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d003      	beq.n	80099a0 <HAL_RCC_GetSysClockFreq+0x114>
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d056      	beq.n	8009a4c <HAL_RCC_GetSysClockFreq+0x1c0>
 800999e:	e099      	b.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a0:	4b6f      	ldr	r3, [pc, #444]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d02d      	beq.n	8009a08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ac:	4b6c      	ldr	r3, [pc, #432]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	08db      	lsrs	r3, r3, #3
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	4a6b      	ldr	r2, [pc, #428]	@ (8009b64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099b8:	fa22 f303 	lsr.w	r3, r2, r3
 80099bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b62      	ldr	r3, [pc, #392]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009a06:	e087      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009b74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b51      	ldr	r3, [pc, #324]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a4a:	e065      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009b78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5e:	4b40      	ldr	r3, [pc, #256]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a8e:	e043      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009b7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ab6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ace:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ad2:	e021      	b.n	8009b18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009b78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009afa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009b70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b18:	4b11      	ldr	r3, [pc, #68]	@ (8009b60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1c:	0a5b      	lsrs	r3, r3, #9
 8009b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b22:	3301      	adds	r3, #1
 8009b24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	ee07 3a90 	vmov	s15, r3
 8009b2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b3c:	ee17 3a90 	vmov	r3, s15
 8009b40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b42:	e005      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	61bb      	str	r3, [r7, #24]
      break;
 8009b48:	e002      	b.n	8009b50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b4a:	4b07      	ldr	r3, [pc, #28]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b4c:	61bb      	str	r3, [r7, #24]
      break;
 8009b4e:	bf00      	nop
  }

  return sysclockfreq;
 8009b50:	69bb      	ldr	r3, [r7, #24]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3724      	adds	r7, #36	@ 0x24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	58024400 	.word	0x58024400
 8009b64:	03d09000 	.word	0x03d09000
 8009b68:	003d0900 	.word	0x003d0900
 8009b6c:	017d7840 	.word	0x017d7840
 8009b70:	46000000 	.word	0x46000000
 8009b74:	4c742400 	.word	0x4c742400
 8009b78:	4a742400 	.word	0x4a742400
 8009b7c:	4bbebc20 	.word	0x4bbebc20

08009b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b86:	f7ff fe81 	bl	800988c <HAL_RCC_GetSysClockFreq>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	4b10      	ldr	r3, [pc, #64]	@ (8009bd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	0a1b      	lsrs	r3, r3, #8
 8009b92:	f003 030f 	and.w	r3, r3, #15
 8009b96:	490f      	ldr	r1, [pc, #60]	@ (8009bd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b98:	5ccb      	ldrb	r3, [r1, r3]
 8009b9a:	f003 031f 	and.w	r3, r3, #31
 8009b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	f003 030f 	and.w	r3, r3, #15
 8009bac:	4a09      	ldr	r2, [pc, #36]	@ (8009bd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bae:	5cd3      	ldrb	r3, [r2, r3]
 8009bb0:	f003 031f 	and.w	r3, r3, #31
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bba:	4a07      	ldr	r2, [pc, #28]	@ (8009bd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bbe:	4a07      	ldr	r2, [pc, #28]	@ (8009bdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009bc4:	4b04      	ldr	r3, [pc, #16]	@ (8009bd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	08012ad8 	.word	0x08012ad8
 8009bd8:	24000008 	.word	0x24000008
 8009bdc:	24000004 	.word	0x24000004

08009be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009be4:	f7ff ffcc 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 8009be8:	4602      	mov	r2, r0
 8009bea:	4b06      	ldr	r3, [pc, #24]	@ (8009c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	091b      	lsrs	r3, r3, #4
 8009bf0:	f003 0307 	and.w	r3, r3, #7
 8009bf4:	4904      	ldr	r1, [pc, #16]	@ (8009c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bf6:	5ccb      	ldrb	r3, [r1, r3]
 8009bf8:	f003 031f 	and.w	r3, r3, #31
 8009bfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	58024400 	.word	0x58024400
 8009c08:	08012ad8 	.word	0x08012ad8

08009c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c10:	f7ff ffb6 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 8009c14:	4602      	mov	r2, r0
 8009c16:	4b06      	ldr	r3, [pc, #24]	@ (8009c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	0a1b      	lsrs	r3, r3, #8
 8009c1c:	f003 0307 	and.w	r3, r3, #7
 8009c20:	4904      	ldr	r1, [pc, #16]	@ (8009c34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c22:	5ccb      	ldrb	r3, [r1, r3]
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	58024400 	.word	0x58024400
 8009c34:	08012ad8 	.word	0x08012ad8

08009c38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c3c:	b0ca      	sub	sp, #296	@ 0x128
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c44:	2300      	movs	r3, #0
 8009c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009c5c:	2500      	movs	r5, #0
 8009c5e:	ea54 0305 	orrs.w	r3, r4, r5
 8009c62:	d049      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009c6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c6e:	d02f      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c74:	d828      	bhi.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c7a:	d01a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c80:	d822      	bhi.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c8a:	d007      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c8c:	e01c      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c8e:	4bb8      	ldr	r3, [pc, #736]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c92:	4ab7      	ldr	r2, [pc, #732]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009c9a:	e01a      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	2102      	movs	r1, #2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f001 fc8f 	bl	800b5c8 <RCCEx_PLL2_Config>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cb0:	e00f      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	3328      	adds	r3, #40	@ 0x28
 8009cb8:	2102      	movs	r1, #2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fd36 	bl	800b72c <RCCEx_PLL3_Config>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cc6:	e004      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cce:	e000      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009cda:	4ba5      	ldr	r3, [pc, #660]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ce8:	4aa1      	ldr	r2, [pc, #644]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cea:	430b      	orrs	r3, r1
 8009cec:	6513      	str	r3, [r2, #80]	@ 0x50
 8009cee:	e003      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009d04:	f04f 0900 	mov.w	r9, #0
 8009d08:	ea58 0309 	orrs.w	r3, r8, r9
 8009d0c:	d047      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d82a      	bhi.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d18:	a201      	add	r2, pc, #4	@ (adr r2, 8009d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1e:	bf00      	nop
 8009d20:	08009d35 	.word	0x08009d35
 8009d24:	08009d43 	.word	0x08009d43
 8009d28:	08009d59 	.word	0x08009d59
 8009d2c:	08009d77 	.word	0x08009d77
 8009d30:	08009d77 	.word	0x08009d77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d34:	4b8e      	ldr	r3, [pc, #568]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d38:	4a8d      	ldr	r2, [pc, #564]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d40:	e01a      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d46:	3308      	adds	r3, #8
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fc3c 	bl	800b5c8 <RCCEx_PLL2_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d56:	e00f      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5c:	3328      	adds	r3, #40	@ 0x28
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 fce3 	bl	800b72c <RCCEx_PLL3_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d6c:	e004      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d74:	e000      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d80:	4b7b      	ldr	r3, [pc, #492]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d84:	f023 0107 	bic.w	r1, r3, #7
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d8e:	4a78      	ldr	r2, [pc, #480]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d90:	430b      	orrs	r3, r1
 8009d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d94:	e003      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009daa:	f04f 0b00 	mov.w	fp, #0
 8009dae:	ea5a 030b 	orrs.w	r3, sl, fp
 8009db2:	d04c      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dbe:	d030      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dc4:	d829      	bhi.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dc8:	d02d      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dcc:	d825      	bhi.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dce:	2b80      	cmp	r3, #128	@ 0x80
 8009dd0:	d018      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009dd2:	2b80      	cmp	r3, #128	@ 0x80
 8009dd4:	d821      	bhi.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009dda:	2b40      	cmp	r3, #64	@ 0x40
 8009ddc:	d007      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009dde:	e01c      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de0:	4b63      	ldr	r3, [pc, #396]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de4:	4a62      	ldr	r2, [pc, #392]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009dec:	e01c      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df2:	3308      	adds	r3, #8
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 fbe6 	bl	800b5c8 <RCCEx_PLL2_Config>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e02:	e011      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e08:	3328      	adds	r3, #40	@ 0x28
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 fc8d 	bl	800b72c <RCCEx_PLL3_Config>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009e18:	e006      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e20:	e002      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e22:	bf00      	nop
 8009e24:	e000      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009e30:	4b4f      	ldr	r3, [pc, #316]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e44:	e003      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009e5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009e64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	d053      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009e76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e7a:	d035      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009e7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009e80:	d82e      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e86:	d031      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009e88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009e8c:	d828      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e92:	d01a      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e98:	d822      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009e9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ea2:	d007      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009ea4:	e01c      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea6:	4b32      	ldr	r3, [pc, #200]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eaa:	4a31      	ldr	r2, [pc, #196]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eb2:	e01c      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb8:	3308      	adds	r3, #8
 8009eba:	2100      	movs	r1, #0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 fb83 	bl	800b5c8 <RCCEx_PLL2_Config>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ec8:	e011      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ece:	3328      	adds	r3, #40	@ 0x28
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f001 fc2a 	bl	800b72c <RCCEx_PLL3_Config>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ede:	e006      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ee6:	e002      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ee8:	bf00      	nop
 8009eea:	e000      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009efa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f06:	4a1a      	ldr	r2, [pc, #104]	@ (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f08:	430b      	orrs	r3, r1
 8009f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f0c:	e003      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009f22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f26:	2300      	movs	r3, #0
 8009f28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009f2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009f30:	460b      	mov	r3, r1
 8009f32:	4313      	orrs	r3, r2
 8009f34:	d056      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f42:	d038      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f48:	d831      	bhi.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f4e:	d034      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009f50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f54:	d82b      	bhi.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f5a:	d01d      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009f5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f60:	d825      	bhi.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d006      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f6a:	d00a      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f6c:	e01f      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009f6e:	bf00      	nop
 8009f70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f74:	4ba2      	ldr	r3, [pc, #648]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f78:	4aa1      	ldr	r2, [pc, #644]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f80:	e01c      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	3308      	adds	r3, #8
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fb1c 	bl	800b5c8 <RCCEx_PLL2_Config>
 8009f90:	4603      	mov	r3, r0
 8009f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f96:	e011      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9c:	3328      	adds	r3, #40	@ 0x28
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f001 fbc3 	bl	800b72c <RCCEx_PLL3_Config>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fac:	e006      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fb4:	e002      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009fb6:	bf00      	nop
 8009fb8:	e000      	b.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10b      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009fc4:	4b8e      	ldr	r3, [pc, #568]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009fd4:	4a8a      	ldr	r2, [pc, #552]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fda:	e003      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ffa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009ffe:	460b      	mov	r3, r1
 800a000:	4313      	orrs	r3, r2
 800a002:	d03a      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a00a:	2b30      	cmp	r3, #48	@ 0x30
 800a00c:	d01f      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a00e:	2b30      	cmp	r3, #48	@ 0x30
 800a010:	d819      	bhi.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a012:	2b20      	cmp	r3, #32
 800a014:	d00c      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a016:	2b20      	cmp	r3, #32
 800a018:	d815      	bhi.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d019      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a01e:	2b10      	cmp	r3, #16
 800a020:	d111      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a022:	4b77      	ldr	r3, [pc, #476]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a026:	4a76      	ldr	r2, [pc, #472]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a02c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a02e:	e011      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a034:	3308      	adds	r3, #8
 800a036:	2102      	movs	r1, #2
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 fac5 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a044:	e006      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a04c:	e002      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a052:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a05c:	4b68      	ldr	r3, [pc, #416]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a060:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a06a:	4a65      	ldr	r2, [pc, #404]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a06c:	430b      	orrs	r3, r1
 800a06e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a070:	e003      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a086:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a08a:	2300      	movs	r3, #0
 800a08c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a090:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a094:	460b      	mov	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	d051      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0a4:	d035      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a0a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0aa:	d82e      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0b0:	d031      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a0b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0b6:	d828      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0bc:	d01a      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a0be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0c2:	d822      	bhi.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a0c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0cc:	d007      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a0ce:	e01c      	b.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d0:	4b4b      	ldr	r3, [pc, #300]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d4:	4a4a      	ldr	r2, [pc, #296]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0dc:	e01c      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 fa6e 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0f2:	e011      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f8:	3328      	adds	r3, #40	@ 0x28
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fb15 	bl	800b72c <RCCEx_PLL3_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a108:	e006      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a110:	e002      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a116:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a120:	4b37      	ldr	r3, [pc, #220]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a124:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a12e:	4a34      	ldr	r2, [pc, #208]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a130:	430b      	orrs	r3, r1
 800a132:	6513      	str	r3, [r2, #80]	@ 0x50
 800a134:	e003      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a13a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a14a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a14e:	2300      	movs	r3, #0
 800a150:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a154:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a158:	460b      	mov	r3, r1
 800a15a:	4313      	orrs	r3, r2
 800a15c:	d056      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a168:	d033      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a16a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a16e:	d82c      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a170:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a174:	d02f      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a17a:	d826      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a17c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a180:	d02b      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a182:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a186:	d820      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a18c:	d012      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a18e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a192:	d81a      	bhi.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a194:	2b00      	cmp	r3, #0
 800a196:	d022      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a19c:	d115      	bne.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f001 fa0e 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1b2:	e015      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b8:	3328      	adds	r3, #40	@ 0x28
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 fab5 	bl	800b72c <RCCEx_PLL3_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1c8:	e00a      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1d2:	bf00      	nop
 800a1d4:	e004      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1d6:	bf00      	nop
 800a1d8:	e002      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1da:	bf00      	nop
 800a1dc:	e000      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10d      	bne.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1e8:	4b05      	ldr	r3, [pc, #20]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1f6:	4a02      	ldr	r2, [pc, #8]	@ (800a200 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1f8:	430b      	orrs	r3, r1
 800a1fa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1fc:	e006      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a1fe:	bf00      	nop
 800a200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a21c:	2300      	movs	r3, #0
 800a21e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a222:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a226:	460b      	mov	r3, r1
 800a228:	4313      	orrs	r3, r2
 800a22a:	d055      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a230:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a238:	d033      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a23a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a23e:	d82c      	bhi.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a244:	d02f      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a24a:	d826      	bhi.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a24c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a250:	d02b      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a252:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a256:	d820      	bhi.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a25c:	d012      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a25e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a262:	d81a      	bhi.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a264:	2b00      	cmp	r3, #0
 800a266:	d022      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a26c:	d115      	bne.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a272:	3308      	adds	r3, #8
 800a274:	2101      	movs	r1, #1
 800a276:	4618      	mov	r0, r3
 800a278:	f001 f9a6 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a282:	e015      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a288:	3328      	adds	r3, #40	@ 0x28
 800a28a:	2101      	movs	r1, #1
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 fa4d 	bl	800b72c <RCCEx_PLL3_Config>
 800a292:	4603      	mov	r3, r0
 800a294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a298:	e00a      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2a0:	e006      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2a2:	bf00      	nop
 800a2a4:	e004      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2a6:	bf00      	nop
 800a2a8:	e002      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2aa:	bf00      	nop
 800a2ac:	e000      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10b      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2b8:	4ba3      	ldr	r3, [pc, #652]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2bc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2c8:	4a9f      	ldr	r2, [pc, #636]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2ce:	e003      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a2e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a2ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d037      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a302:	d00e      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a308:	d816      	bhi.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d018      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a30e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a312:	d111      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a314:	4b8c      	ldr	r3, [pc, #560]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a318:	4a8b      	ldr	r2, [pc, #556]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a31a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a31e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a320:	e00f      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a326:	3308      	adds	r3, #8
 800a328:	2101      	movs	r1, #1
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 f94c 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a336:	e004      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a33e:	e000      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a340:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a34a:	4b7f      	ldr	r3, [pc, #508]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a34c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a358:	4a7b      	ldr	r2, [pc, #492]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a35a:	430b      	orrs	r3, r1
 800a35c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a35e:	e003      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a378:	2300      	movs	r3, #0
 800a37a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a37e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a382:	460b      	mov	r3, r1
 800a384:	4313      	orrs	r3, r2
 800a386:	d039      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d81c      	bhi.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a392:	a201      	add	r2, pc, #4	@ (adr r2, 800a398 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a398:	0800a3d5 	.word	0x0800a3d5
 800a39c:	0800a3a9 	.word	0x0800a3a9
 800a3a0:	0800a3b7 	.word	0x0800a3b7
 800a3a4:	0800a3d5 	.word	0x0800a3d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a8:	4b67      	ldr	r3, [pc, #412]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ac:	4a66      	ldr	r2, [pc, #408]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3b4:	e00f      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	2102      	movs	r1, #2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 f902 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3ca:	e004      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3d2:	e000      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a3de:	4b5a      	ldr	r3, [pc, #360]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3e2:	f023 0103 	bic.w	r1, r3, #3
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ec:	4a56      	ldr	r2, [pc, #344]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3f2:	e003      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a408:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a40c:	2300      	movs	r3, #0
 800a40e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a412:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a416:	460b      	mov	r3, r1
 800a418:	4313      	orrs	r3, r2
 800a41a:	f000 809f 	beq.w	800a55c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a41e:	4b4b      	ldr	r3, [pc, #300]	@ (800a54c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a4a      	ldr	r2, [pc, #296]	@ (800a54c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a42a:	f7f7 fe77 	bl	800211c <HAL_GetTick>
 800a42e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a432:	e00b      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a434:	f7f7 fe72 	bl	800211c <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	2b64      	cmp	r3, #100	@ 0x64
 800a442:	d903      	bls.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a44a:	e005      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a44c:	4b3f      	ldr	r3, [pc, #252]	@ (800a54c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0ed      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d179      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a460:	4b39      	ldr	r3, [pc, #228]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a462:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a468:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a46c:	4053      	eors	r3, r2
 800a46e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a472:	2b00      	cmp	r3, #0
 800a474:	d015      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a476:	4b34      	ldr	r3, [pc, #208]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a47a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a47e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a482:	4b31      	ldr	r3, [pc, #196]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a486:	4a30      	ldr	r2, [pc, #192]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a48c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a48e:	4b2e      	ldr	r3, [pc, #184]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a492:	4a2d      	ldr	r2, [pc, #180]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a498:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a49a:	4a2b      	ldr	r2, [pc, #172]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a49c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a4a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ae:	d118      	bne.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4b0:	f7f7 fe34 	bl	800211c <HAL_GetTick>
 800a4b4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4b8:	e00d      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ba:	f7f7 fe2f 	bl	800211c <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a4c4:	1ad2      	subs	r2, r2, r3
 800a4c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d903      	bls.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a4d4:	e005      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4d6:	4b1c      	ldr	r3, [pc, #112]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0eb      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d129      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a4f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4fa:	d10e      	bne.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a4fc:	4b12      	ldr	r3, [pc, #72]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a508:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a50c:	091a      	lsrs	r2, r3, #4
 800a50e:	4b10      	ldr	r3, [pc, #64]	@ (800a550 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a510:	4013      	ands	r3, r2
 800a512:	4a0d      	ldr	r2, [pc, #52]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a514:	430b      	orrs	r3, r1
 800a516:	6113      	str	r3, [r2, #16]
 800a518:	e005      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a51a:	4b0b      	ldr	r3, [pc, #44]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	4a0a      	ldr	r2, [pc, #40]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a520:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a524:	6113      	str	r3, [r2, #16]
 800a526:	4b08      	ldr	r3, [pc, #32]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a528:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a536:	4a04      	ldr	r2, [pc, #16]	@ (800a548 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a538:	430b      	orrs	r3, r1
 800a53a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a53c:	e00e      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a53e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a546:	e009      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a548:	58024400 	.word	0x58024400
 800a54c:	58024800 	.word	0x58024800
 800a550:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a558:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f002 0301 	and.w	r3, r2, #1
 800a568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a56c:	2300      	movs	r3, #0
 800a56e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a572:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a576:	460b      	mov	r3, r1
 800a578:	4313      	orrs	r3, r2
 800a57a:	f000 8089 	beq.w	800a690 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a584:	2b28      	cmp	r3, #40	@ 0x28
 800a586:	d86b      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a588:	a201      	add	r2, pc, #4	@ (adr r2, 800a590 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a669 	.word	0x0800a669
 800a594:	0800a661 	.word	0x0800a661
 800a598:	0800a661 	.word	0x0800a661
 800a59c:	0800a661 	.word	0x0800a661
 800a5a0:	0800a661 	.word	0x0800a661
 800a5a4:	0800a661 	.word	0x0800a661
 800a5a8:	0800a661 	.word	0x0800a661
 800a5ac:	0800a661 	.word	0x0800a661
 800a5b0:	0800a635 	.word	0x0800a635
 800a5b4:	0800a661 	.word	0x0800a661
 800a5b8:	0800a661 	.word	0x0800a661
 800a5bc:	0800a661 	.word	0x0800a661
 800a5c0:	0800a661 	.word	0x0800a661
 800a5c4:	0800a661 	.word	0x0800a661
 800a5c8:	0800a661 	.word	0x0800a661
 800a5cc:	0800a661 	.word	0x0800a661
 800a5d0:	0800a64b 	.word	0x0800a64b
 800a5d4:	0800a661 	.word	0x0800a661
 800a5d8:	0800a661 	.word	0x0800a661
 800a5dc:	0800a661 	.word	0x0800a661
 800a5e0:	0800a661 	.word	0x0800a661
 800a5e4:	0800a661 	.word	0x0800a661
 800a5e8:	0800a661 	.word	0x0800a661
 800a5ec:	0800a661 	.word	0x0800a661
 800a5f0:	0800a669 	.word	0x0800a669
 800a5f4:	0800a661 	.word	0x0800a661
 800a5f8:	0800a661 	.word	0x0800a661
 800a5fc:	0800a661 	.word	0x0800a661
 800a600:	0800a661 	.word	0x0800a661
 800a604:	0800a661 	.word	0x0800a661
 800a608:	0800a661 	.word	0x0800a661
 800a60c:	0800a661 	.word	0x0800a661
 800a610:	0800a669 	.word	0x0800a669
 800a614:	0800a661 	.word	0x0800a661
 800a618:	0800a661 	.word	0x0800a661
 800a61c:	0800a661 	.word	0x0800a661
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a661 	.word	0x0800a661
 800a628:	0800a661 	.word	0x0800a661
 800a62c:	0800a661 	.word	0x0800a661
 800a630:	0800a669 	.word	0x0800a669
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a638:	3308      	adds	r3, #8
 800a63a:	2101      	movs	r1, #1
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 ffc3 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a648:	e00f      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64e:	3328      	adds	r3, #40	@ 0x28
 800a650:	2101      	movs	r1, #1
 800a652:	4618      	mov	r0, r3
 800a654:	f001 f86a 	bl	800b72c <RCCEx_PLL3_Config>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a65e:	e004      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a666:	e000      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a672:	4bbf      	ldr	r3, [pc, #764]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a676:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a680:	4abb      	ldr	r2, [pc, #748]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a682:	430b      	orrs	r3, r1
 800a684:	6553      	str	r3, [r2, #84]	@ 0x54
 800a686:	e003      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a68c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f002 0302 	and.w	r3, r2, #2
 800a69c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a6a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	d041      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d824      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a70d 	.word	0x0800a70d
 800a6c4:	0800a6d9 	.word	0x0800a6d9
 800a6c8:	0800a6ef 	.word	0x0800a6ef
 800a6cc:	0800a70d 	.word	0x0800a70d
 800a6d0:	0800a70d 	.word	0x0800a70d
 800a6d4:	0800a70d 	.word	0x0800a70d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6dc:	3308      	adds	r3, #8
 800a6de:	2101      	movs	r1, #1
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 ff71 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a6ec:	e00f      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f2:	3328      	adds	r3, #40	@ 0x28
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 f818 	bl	800b72c <RCCEx_PLL3_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a702:	e004      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a70a:	e000      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a70e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a716:	4b96      	ldr	r3, [pc, #600]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71a:	f023 0107 	bic.w	r1, r3, #7
 800a71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a722:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a724:	4a92      	ldr	r2, [pc, #584]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a726:	430b      	orrs	r3, r1
 800a728:	6553      	str	r3, [r2, #84]	@ 0x54
 800a72a:	e003      	b.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f002 0304 	and.w	r3, r2, #4
 800a740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a744:	2300      	movs	r3, #0
 800a746:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a74a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a74e:	460b      	mov	r3, r1
 800a750:	4313      	orrs	r3, r2
 800a752:	d044      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a75c:	2b05      	cmp	r3, #5
 800a75e:	d825      	bhi.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a760:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a7b5 	.word	0x0800a7b5
 800a76c:	0800a781 	.word	0x0800a781
 800a770:	0800a797 	.word	0x0800a797
 800a774:	0800a7b5 	.word	0x0800a7b5
 800a778:	0800a7b5 	.word	0x0800a7b5
 800a77c:	0800a7b5 	.word	0x0800a7b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a784:	3308      	adds	r3, #8
 800a786:	2101      	movs	r1, #1
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 ff1d 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a78e:	4603      	mov	r3, r0
 800a790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a794:	e00f      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a79a:	3328      	adds	r3, #40	@ 0x28
 800a79c:	2101      	movs	r1, #1
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 ffc4 	bl	800b72c <RCCEx_PLL3_Config>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7aa:	e004      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7b2:	e000      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10b      	bne.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7be:	4b6c      	ldr	r3, [pc, #432]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7c2:	f023 0107 	bic.w	r1, r3, #7
 800a7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7ce:	4a68      	ldr	r2, [pc, #416]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7d4:	e003      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f002 0320 	and.w	r3, r2, #32
 800a7ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	d055      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a80a:	d033      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a810:	d82c      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a816:	d02f      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a81c:	d826      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a81e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a822:	d02b      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a824:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a828:	d820      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a82a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a82e:	d012      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a834:	d81a      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d022      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a83a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a83e:	d115      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a844:	3308      	adds	r3, #8
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 febd 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a854:	e015      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85a:	3328      	adds	r3, #40	@ 0x28
 800a85c:	2102      	movs	r1, #2
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 ff64 	bl	800b72c <RCCEx_PLL3_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a86a:	e00a      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a872:	e006      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a874:	bf00      	nop
 800a876:	e004      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a878:	bf00      	nop
 800a87a:	e002      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a87c:	bf00      	nop
 800a87e:	e000      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a880:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10b      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a88a:	4b39      	ldr	r3, [pc, #228]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a88e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a89a:	4a35      	ldr	r2, [pc, #212]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8a0:	e003      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a8b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a8c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	d058      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a8d6:	d033      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a8dc:	d82c      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a8de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8e2:	d02f      	beq.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a8e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8e8:	d826      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a8ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8ee:	d02b      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a8f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a8f4:	d820      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a8f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8fa:	d012      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a8fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a900:	d81a      	bhi.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d022      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a90a:	d115      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a910:	3308      	adds	r3, #8
 800a912:	2100      	movs	r1, #0
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fe57 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a91a:	4603      	mov	r3, r0
 800a91c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a920:	e015      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a926:	3328      	adds	r3, #40	@ 0x28
 800a928:	2102      	movs	r1, #2
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 fefe 	bl	800b72c <RCCEx_PLL3_Config>
 800a930:	4603      	mov	r3, r0
 800a932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a936:	e00a      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a93e:	e006      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a940:	bf00      	nop
 800a942:	e004      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a944:	bf00      	nop
 800a946:	e002      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a948:	bf00      	nop
 800a94a:	e000      	b.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a94c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10e      	bne.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a956:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a95a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a966:	4a02      	ldr	r2, [pc, #8]	@ (800a970 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a968:	430b      	orrs	r3, r1
 800a96a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a96c:	e006      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a96e:	bf00      	nop
 800a970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a98c:	2300      	movs	r3, #0
 800a98e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a992:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a996:	460b      	mov	r3, r1
 800a998:	4313      	orrs	r3, r2
 800a99a:	d055      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a9a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a9a8:	d033      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a9aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a9ae:	d82c      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9b4:	d02f      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a9b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9ba:	d826      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9c0:	d02b      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a9c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9c6:	d820      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9cc:	d012      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a9ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9d2:	d81a      	bhi.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d022      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a9d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9dc:	d115      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 fdee 	bl	800b5c8 <RCCEx_PLL2_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a9f2:	e015      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9f8:	3328      	adds	r3, #40	@ 0x28
 800a9fa:	2102      	movs	r1, #2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fe95 	bl	800b72c <RCCEx_PLL3_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa08:	e00a      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa10:	e006      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa12:	bf00      	nop
 800aa14:	e004      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa16:	bf00      	nop
 800aa18:	e002      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa1a:	bf00      	nop
 800aa1c:	e000      	b.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aa1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10b      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa28:	4ba1      	ldr	r3, [pc, #644]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa2c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa38:	4a9d      	ldr	r2, [pc, #628]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa3e:	e003      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f002 0308 	and.w	r3, r2, #8
 800aa54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa62:	460b      	mov	r3, r1
 800aa64:	4313      	orrs	r3, r2
 800aa66:	d01e      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa74:	d10c      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa7a:	3328      	adds	r3, #40	@ 0x28
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fe54 	bl	800b72c <RCCEx_PLL3_Config>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aa90:	4b87      	ldr	r3, [pc, #540]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa94:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaa0:	4a83      	ldr	r2, [pc, #524]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f002 0310 	and.w	r3, r2, #16
 800aab2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aab6:	2300      	movs	r3, #0
 800aab8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aabc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aac0:	460b      	mov	r3, r1
 800aac2:	4313      	orrs	r3, r2
 800aac4:	d01e      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aad2:	d10c      	bne.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad8:	3328      	adds	r3, #40	@ 0x28
 800aada:	2102      	movs	r1, #2
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fe25 	bl	800b72c <RCCEx_PLL3_Config>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aaee:	4b70      	ldr	r3, [pc, #448]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaf2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aaf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aafa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aafe:	4a6c      	ldr	r2, [pc, #432]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab00:	430b      	orrs	r3, r1
 800ab02:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ab10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab14:	2300      	movs	r3, #0
 800ab16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4313      	orrs	r3, r2
 800ab22:	d03e      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab30:	d022      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ab32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab36:	d81b      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ab3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab40:	d00b      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ab42:	e015      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab48:	3308      	adds	r3, #8
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fd3b 	bl	800b5c8 <RCCEx_PLL2_Config>
 800ab52:	4603      	mov	r3, r0
 800ab54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab58:	e00f      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab5e:	3328      	adds	r3, #40	@ 0x28
 800ab60:	2102      	movs	r1, #2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fde2 	bl	800b72c <RCCEx_PLL3_Config>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab6e:	e004      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab76:	e000      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ab78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10b      	bne.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ab82:	4b4b      	ldr	r3, [pc, #300]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ab8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab92:	4a47      	ldr	r2, [pc, #284]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab94:	430b      	orrs	r3, r1
 800ab96:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab98:	e003      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abaa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800abae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abb0:	2300      	movs	r3, #0
 800abb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800abb8:	460b      	mov	r3, r1
 800abba:	4313      	orrs	r3, r2
 800abbc:	d03b      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800abbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abca:	d01f      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800abcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abd0:	d818      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800abd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abd6:	d003      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800abd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abdc:	d007      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800abde:	e011      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe0:	4b33      	ldr	r3, [pc, #204]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe4:	4a32      	ldr	r2, [pc, #200]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800abec:	e00f      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf2:	3328      	adds	r3, #40	@ 0x28
 800abf4:	2101      	movs	r1, #1
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fd98 	bl	800b72c <RCCEx_PLL3_Config>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac02:	e004      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac0a:	e000      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ac0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac16:	4b26      	ldr	r3, [pc, #152]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ac1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac26:	4a22      	ldr	r2, [pc, #136]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac2c:	e003      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ac42:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac44:	2300      	movs	r3, #0
 800ac46:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	d034      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d003      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ac5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac60:	d007      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ac62:	e011      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac64:	4b12      	ldr	r3, [pc, #72]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac68:	4a11      	ldr	r2, [pc, #68]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac70:	e00e      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac76:	3308      	adds	r3, #8
 800ac78:	2102      	movs	r1, #2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fca4 	bl	800b5c8 <RCCEx_PLL2_Config>
 800ac80:	4603      	mov	r3, r0
 800ac82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ac86:	e003      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10d      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac98:	4b05      	ldr	r3, [pc, #20]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca6:	4a02      	ldr	r2, [pc, #8]	@ (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aca8:	430b      	orrs	r3, r1
 800acaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800acac:	e006      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800acae:	bf00      	nop
 800acb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800acc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acca:	2300      	movs	r3, #0
 800accc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800acd2:	460b      	mov	r3, r1
 800acd4:	4313      	orrs	r3, r2
 800acd6:	d00c      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acdc:	3328      	adds	r3, #40	@ 0x28
 800acde:	2102      	movs	r1, #2
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fd23 	bl	800b72c <RCCEx_PLL3_Config>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800acfe:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad00:	2300      	movs	r3, #0
 800ad02:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	d038      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad1a:	d018      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ad1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad20:	d811      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad26:	d014      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ad28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad2c:	d80b      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d011      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ad32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad36:	d106      	bne.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad38:	4bc3      	ldr	r3, [pc, #780]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3c:	4ac2      	ldr	r2, [pc, #776]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ad44:	e008      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad4c:	e004      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad4e:	bf00      	nop
 800ad50:	e002      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad52:	bf00      	nop
 800ad54:	e000      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ad56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10b      	bne.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad60:	4bb9      	ldr	r3, [pc, #740]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad70:	4ab5      	ldr	r2, [pc, #724]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad72:	430b      	orrs	r3, r1
 800ad74:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad76:	e003      	b.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ad8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad8e:	2300      	movs	r3, #0
 800ad90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ad96:	460b      	mov	r3, r1
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	d009      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad9c:	4baa      	ldr	r3, [pc, #680]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ada0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ada4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adaa:	4aa7      	ldr	r2, [pc, #668]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adac:	430b      	orrs	r3, r1
 800adae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800adb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800adbc:	653b      	str	r3, [r7, #80]	@ 0x50
 800adbe:	2300      	movs	r3, #0
 800adc0:	657b      	str	r3, [r7, #84]	@ 0x54
 800adc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800adc6:	460b      	mov	r3, r1
 800adc8:	4313      	orrs	r3, r2
 800adca:	d00a      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800adcc:	4b9e      	ldr	r3, [pc, #632]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800addc:	4a9a      	ldr	r2, [pc, #616]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adde:	430b      	orrs	r3, r1
 800ade0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ade2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800adee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adf0:	2300      	movs	r3, #0
 800adf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800adf8:	460b      	mov	r3, r1
 800adfa:	4313      	orrs	r3, r2
 800adfc:	d009      	beq.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800adfe:	4b92      	ldr	r3, [pc, #584]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae02:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ae06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae0c:	4a8e      	ldr	r2, [pc, #568]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ae1e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae20:	2300      	movs	r3, #0
 800ae22:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	d00e      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae2e:	4b86      	ldr	r3, [pc, #536]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	4a85      	ldr	r2, [pc, #532]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae38:	6113      	str	r3, [r2, #16]
 800ae3a:	4b83      	ldr	r3, [pc, #524]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae3c:	6919      	ldr	r1, [r3, #16]
 800ae3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ae46:	4a80      	ldr	r2, [pc, #512]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ae58:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ae62:	460b      	mov	r3, r1
 800ae64:	4313      	orrs	r3, r2
 800ae66:	d009      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae68:	4b77      	ldr	r3, [pc, #476]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae6c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ae70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae76:	4a74      	ldr	r2, [pc, #464]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ae88:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ae92:	460b      	mov	r3, r1
 800ae94:	4313      	orrs	r3, r2
 800ae96:	d00a      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae98:	4b6b      	ldr	r3, [pc, #428]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aea8:	4a67      	ldr	r2, [pc, #412]	@ (800b048 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aeae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aec0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aec4:	460b      	mov	r3, r1
 800aec6:	4313      	orrs	r3, r2
 800aec8:	d011      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aece:	3308      	adds	r3, #8
 800aed0:	2100      	movs	r1, #0
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fb78 	bl	800b5c8 <RCCEx_PLL2_Config>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	2100      	movs	r1, #0
 800aef8:	6239      	str	r1, [r7, #32]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	627b      	str	r3, [r7, #36]	@ 0x24
 800af00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af04:	460b      	mov	r3, r1
 800af06:	4313      	orrs	r3, r2
 800af08:	d011      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0e:	3308      	adds	r3, #8
 800af10:	2101      	movs	r1, #1
 800af12:	4618      	mov	r0, r3
 800af14:	f000 fb58 	bl	800b5c8 <RCCEx_PLL2_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	2100      	movs	r1, #0
 800af38:	61b9      	str	r1, [r7, #24]
 800af3a:	f003 0304 	and.w	r3, r3, #4
 800af3e:	61fb      	str	r3, [r7, #28]
 800af40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af44:	460b      	mov	r3, r1
 800af46:	4313      	orrs	r3, r2
 800af48:	d011      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af4e:	3308      	adds	r3, #8
 800af50:	2102      	movs	r1, #2
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fb38 	bl	800b5c8 <RCCEx_PLL2_Config>
 800af58:	4603      	mov	r3, r0
 800af5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800af6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	2100      	movs	r1, #0
 800af78:	6139      	str	r1, [r7, #16]
 800af7a:	f003 0308 	and.w	r3, r3, #8
 800af7e:	617b      	str	r3, [r7, #20]
 800af80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af84:	460b      	mov	r3, r1
 800af86:	4313      	orrs	r3, r2
 800af88:	d011      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af8e:	3328      	adds	r3, #40	@ 0x28
 800af90:	2100      	movs	r1, #0
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fbca 	bl	800b72c <RCCEx_PLL3_Config>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800af9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800afae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	2100      	movs	r1, #0
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800afc4:	460b      	mov	r3, r1
 800afc6:	4313      	orrs	r3, r2
 800afc8:	d011      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afce:	3328      	adds	r3, #40	@ 0x28
 800afd0:	2101      	movs	r1, #1
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 fbaa 	bl	800b72c <RCCEx_PLL3_Config>
 800afd8:	4603      	mov	r3, r0
 800afda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800afde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800afee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	2100      	movs	r1, #0
 800aff8:	6039      	str	r1, [r7, #0]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b004:	460b      	mov	r3, r1
 800b006:	4313      	orrs	r3, r2
 800b008:	d011      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b00e:	3328      	adds	r3, #40	@ 0x28
 800b010:	2102      	movs	r1, #2
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fb8a 	bl	800b72c <RCCEx_PLL3_Config>
 800b018:	4603      	mov	r3, r0
 800b01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b01e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b02a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b02e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	e000      	b.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b042:	46bd      	mov	sp, r7
 800b044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b048:	58024400 	.word	0x58024400

0800b04c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b050:	f7fe fd96 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 800b054:	4602      	mov	r2, r0
 800b056:	4b06      	ldr	r3, [pc, #24]	@ (800b070 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	091b      	lsrs	r3, r3, #4
 800b05c:	f003 0307 	and.w	r3, r3, #7
 800b060:	4904      	ldr	r1, [pc, #16]	@ (800b074 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b062:	5ccb      	ldrb	r3, [r1, r3]
 800b064:	f003 031f 	and.w	r3, r3, #31
 800b068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	58024400 	.word	0x58024400
 800b074:	08012ad8 	.word	0x08012ad8

0800b078 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b078:	b480      	push	{r7}
 800b07a:	b089      	sub	sp, #36	@ 0x24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b080:	4ba1      	ldr	r3, [pc, #644]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	f003 0303 	and.w	r3, r3, #3
 800b088:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b08a:	4b9f      	ldr	r3, [pc, #636]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b08e:	0b1b      	lsrs	r3, r3, #12
 800b090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b094:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b096:	4b9c      	ldr	r3, [pc, #624]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09a:	091b      	lsrs	r3, r3, #4
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b0a2:	4b99      	ldr	r3, [pc, #612]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0a6:	08db      	lsrs	r3, r3, #3
 800b0a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	fb02 f303 	mul.w	r3, r2, r3
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 8111 	beq.w	800b2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	f000 8083 	beq.w	800b1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	f200 80a1 	bhi.w	800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d056      	beq.n	800b190 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b0e2:	e099      	b.n	800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0e4:	4b88      	ldr	r3, [pc, #544]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0320 	and.w	r3, r3, #32
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d02d      	beq.n	800b14c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0f0:	4b85      	ldr	r3, [pc, #532]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	08db      	lsrs	r3, r3, #3
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	4a84      	ldr	r2, [pc, #528]	@ (800b30c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b100:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	ee07 3a90 	vmov	s15, r3
 800b108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b11a:	4b7b      	ldr	r3, [pc, #492]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b13a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b146:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b14a:	e087      	b.n	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b156:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b314 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b15e:	4b6a      	ldr	r3, [pc, #424]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b166:	ee07 3a90 	vmov	s15, r3
 800b16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b172:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b17e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b18e:	e065      	b.n	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a2:	4b59      	ldr	r3, [pc, #356]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1d2:	e043      	b.n	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	ee07 3a90 	vmov	s15, r3
 800b1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b31c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e6:	4b48      	ldr	r3, [pc, #288]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ee:	ee07 3a90 	vmov	s15, r3
 800b1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b216:	e021      	b.n	800b25c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	ee07 3a90 	vmov	s15, r3
 800b21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b222:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22a:	4b37      	ldr	r3, [pc, #220]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b23e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b25a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b25c:	4b2a      	ldr	r3, [pc, #168]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b260:	0a5b      	lsrs	r3, r3, #9
 800b262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b266:	ee07 3a90 	vmov	s15, r3
 800b26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b272:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b276:	edd7 6a07 	vldr	s13, [r7, #28]
 800b27a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b27e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b282:	ee17 2a90 	vmov	r2, s15
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b28a:	4b1f      	ldr	r3, [pc, #124]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28e:	0c1b      	lsrs	r3, r3, #16
 800b290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b294:	ee07 3a90 	vmov	s15, r3
 800b298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b29c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b0:	ee17 2a90 	vmov	r2, s15
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b2b8:	4b13      	ldr	r3, [pc, #76]	@ (800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2bc:	0e1b      	lsrs	r3, r3, #24
 800b2be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2de:	ee17 2a90 	vmov	r2, s15
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b2e6:	e008      	b.n	800b2fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	609a      	str	r2, [r3, #8]
}
 800b2fa:	bf00      	nop
 800b2fc:	3724      	adds	r7, #36	@ 0x24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	58024400 	.word	0x58024400
 800b30c:	03d09000 	.word	0x03d09000
 800b310:	46000000 	.word	0x46000000
 800b314:	4c742400 	.word	0x4c742400
 800b318:	4a742400 	.word	0x4a742400
 800b31c:	4bbebc20 	.word	0x4bbebc20

0800b320 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b320:	b480      	push	{r7}
 800b322:	b089      	sub	sp, #36	@ 0x24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b328:	4ba1      	ldr	r3, [pc, #644]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32c:	f003 0303 	and.w	r3, r3, #3
 800b330:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b332:	4b9f      	ldr	r3, [pc, #636]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b336:	0d1b      	lsrs	r3, r3, #20
 800b338:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b33c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b33e:	4b9c      	ldr	r3, [pc, #624]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b34a:	4b99      	ldr	r3, [pc, #612]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b34e:	08db      	lsrs	r3, r3, #3
 800b350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 8111 	beq.w	800b590 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b02      	cmp	r3, #2
 800b372:	f000 8083 	beq.w	800b47c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	f200 80a1 	bhi.w	800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d056      	beq.n	800b438 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b38a:	e099      	b.n	800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b38c:	4b88      	ldr	r3, [pc, #544]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0320 	and.w	r3, r3, #32
 800b394:	2b00      	cmp	r3, #0
 800b396:	d02d      	beq.n	800b3f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b398:	4b85      	ldr	r3, [pc, #532]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	08db      	lsrs	r3, r3, #3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	4a84      	ldr	r2, [pc, #528]	@ (800b5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	ee07 3a90 	vmov	s15, r3
 800b3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c2:	4b7b      	ldr	r3, [pc, #492]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b3f2:	e087      	b.n	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b5bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b406:	4b6a      	ldr	r3, [pc, #424]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b40e:	ee07 3a90 	vmov	s15, r3
 800b412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b416:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b41e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b42a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b436:	e065      	b.n	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b442:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44a:	4b59      	ldr	r3, [pc, #356]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b45e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b46e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b47a:	e043      	b.n	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b48a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b48e:	4b48      	ldr	r3, [pc, #288]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b496:	ee07 3a90 	vmov	s15, r3
 800b49a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4be:	e021      	b.n	800b504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	ee07 3a90 	vmov	s15, r3
 800b4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d2:	4b37      	ldr	r3, [pc, #220]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b502:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b504:	4b2a      	ldr	r3, [pc, #168]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b508:	0a5b      	lsrs	r3, r3, #9
 800b50a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b51a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b51e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52a:	ee17 2a90 	vmov	r2, s15
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b532:	4b1f      	ldr	r3, [pc, #124]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b536:	0c1b      	lsrs	r3, r3, #16
 800b538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b54c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b558:	ee17 2a90 	vmov	r2, s15
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b560:	4b13      	ldr	r3, [pc, #76]	@ (800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b564:	0e1b      	lsrs	r3, r3, #24
 800b566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b57a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b586:	ee17 2a90 	vmov	r2, s15
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b58e:	e008      	b.n	800b5a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	609a      	str	r2, [r3, #8]
}
 800b5a2:	bf00      	nop
 800b5a4:	3724      	adds	r7, #36	@ 0x24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	03d09000 	.word	0x03d09000
 800b5b8:	46000000 	.word	0x46000000
 800b5bc:	4c742400 	.word	0x4c742400
 800b5c0:	4a742400 	.word	0x4a742400
 800b5c4:	4bbebc20 	.word	0x4bbebc20

0800b5c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5d6:	4b53      	ldr	r3, [pc, #332]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5da:	f003 0303 	and.w	r3, r3, #3
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d101      	bne.n	800b5e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e099      	b.n	800b71a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5e6:	4b4f      	ldr	r3, [pc, #316]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a4e      	ldr	r2, [pc, #312]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b5ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b5f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5f2:	f7f6 fd93 	bl	800211c <HAL_GetTick>
 800b5f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b5f8:	e008      	b.n	800b60c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5fa:	f7f6 fd8f 	bl	800211c <HAL_GetTick>
 800b5fe:	4602      	mov	r2, r0
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	2b02      	cmp	r3, #2
 800b606:	d901      	bls.n	800b60c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e086      	b.n	800b71a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b60c:	4b45      	ldr	r3, [pc, #276]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1f0      	bne.n	800b5fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b618:	4b42      	ldr	r3, [pc, #264]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b61c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	031b      	lsls	r3, r3, #12
 800b626:	493f      	ldr	r1, [pc, #252]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	3b01      	subs	r3, #1
 800b632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	025b      	lsls	r3, r3, #9
 800b63e:	b29b      	uxth	r3, r3
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	3b01      	subs	r3, #1
 800b648:	041b      	lsls	r3, r3, #16
 800b64a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b64e:	431a      	orrs	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	3b01      	subs	r3, #1
 800b656:	061b      	lsls	r3, r3, #24
 800b658:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b65c:	4931      	ldr	r1, [pc, #196]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b662:	4b30      	ldr	r3, [pc, #192]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b666:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	492d      	ldr	r1, [pc, #180]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b670:	4313      	orrs	r3, r2
 800b672:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b674:	4b2b      	ldr	r3, [pc, #172]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b678:	f023 0220 	bic.w	r2, r3, #32
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	699b      	ldr	r3, [r3, #24]
 800b680:	4928      	ldr	r1, [pc, #160]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b682:	4313      	orrs	r3, r2
 800b684:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b686:	4b27      	ldr	r3, [pc, #156]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68a:	4a26      	ldr	r2, [pc, #152]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b68c:	f023 0310 	bic.w	r3, r3, #16
 800b690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b692:	4b24      	ldr	r3, [pc, #144]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b696:	4b24      	ldr	r3, [pc, #144]	@ (800b728 <RCCEx_PLL2_Config+0x160>)
 800b698:	4013      	ands	r3, r2
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	69d2      	ldr	r2, [r2, #28]
 800b69e:	00d2      	lsls	r2, r2, #3
 800b6a0:	4920      	ldr	r1, [pc, #128]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6ac:	f043 0310 	orr.w	r3, r3, #16
 800b6b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6bc:	4a19      	ldr	r2, [pc, #100]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6c4:	e00f      	b.n	800b6e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d106      	bne.n	800b6da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6cc:	4b15      	ldr	r3, [pc, #84]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d0:	4a14      	ldr	r2, [pc, #80]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6d8:	e005      	b.n	800b6e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6da:	4b12      	ldr	r3, [pc, #72]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6de:	4a11      	ldr	r2, [pc, #68]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a0e      	ldr	r2, [pc, #56]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b6ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6f2:	f7f6 fd13 	bl	800211c <HAL_GetTick>
 800b6f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b6f8:	e008      	b.n	800b70c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6fa:	f7f6 fd0f 	bl	800211c <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b02      	cmp	r3, #2
 800b706:	d901      	bls.n	800b70c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e006      	b.n	800b71a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b70c:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <RCCEx_PLL2_Config+0x15c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0f0      	beq.n	800b6fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	58024400 	.word	0x58024400
 800b728:	ffff0007 	.word	0xffff0007

0800b72c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b73a:	4b53      	ldr	r3, [pc, #332]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	2b03      	cmp	r3, #3
 800b744:	d101      	bne.n	800b74a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e099      	b.n	800b87e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b74a:	4b4f      	ldr	r3, [pc, #316]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a4e      	ldr	r2, [pc, #312]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b756:	f7f6 fce1 	bl	800211c <HAL_GetTick>
 800b75a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b75c:	e008      	b.n	800b770 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b75e:	f7f6 fcdd 	bl	800211c <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d901      	bls.n	800b770 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e086      	b.n	800b87e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b770:	4b45      	ldr	r3, [pc, #276]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1f0      	bne.n	800b75e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b77c:	4b42      	ldr	r3, [pc, #264]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b780:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	051b      	lsls	r3, r3, #20
 800b78a:	493f      	ldr	r1, [pc, #252]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	3b01      	subs	r3, #1
 800b796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	025b      	lsls	r3, r3, #9
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	041b      	lsls	r3, r3, #16
 800b7ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7b2:	431a      	orrs	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	061b      	lsls	r3, r3, #24
 800b7bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7c0:	4931      	ldr	r1, [pc, #196]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7c6:	4b30      	ldr	r3, [pc, #192]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	492d      	ldr	r1, [pc, #180]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7d8:	4b2b      	ldr	r3, [pc, #172]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	4928      	ldr	r1, [pc, #160]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b7ea:	4b27      	ldr	r3, [pc, #156]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ee:	4a26      	ldr	r2, [pc, #152]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b7f6:	4b24      	ldr	r3, [pc, #144]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b7f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7fa:	4b24      	ldr	r3, [pc, #144]	@ (800b88c <RCCEx_PLL3_Config+0x160>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	69d2      	ldr	r2, [r2, #28]
 800b802:	00d2      	lsls	r2, r2, #3
 800b804:	4920      	ldr	r1, [pc, #128]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b806:	4313      	orrs	r3, r2
 800b808:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b80a:	4b1f      	ldr	r3, [pc, #124]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80e:	4a1e      	ldr	r2, [pc, #120]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b814:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b81c:	4b1a      	ldr	r3, [pc, #104]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b820:	4a19      	ldr	r2, [pc, #100]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b822:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b826:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b828:	e00f      	b.n	800b84a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d106      	bne.n	800b83e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b830:	4b15      	ldr	r3, [pc, #84]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b834:	4a14      	ldr	r2, [pc, #80]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b836:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b83a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b83c:	e005      	b.n	800b84a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b83e:	4b12      	ldr	r3, [pc, #72]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b842:	4a11      	ldr	r2, [pc, #68]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b844:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b848:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b84a:	4b0f      	ldr	r3, [pc, #60]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a0e      	ldr	r2, [pc, #56]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b856:	f7f6 fc61 	bl	800211c <HAL_GetTick>
 800b85a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b85c:	e008      	b.n	800b870 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b85e:	f7f6 fc5d 	bl	800211c <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d901      	bls.n	800b870 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b86c:	2303      	movs	r3, #3
 800b86e:	e006      	b.n	800b87e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b870:	4b05      	ldr	r3, [pc, #20]	@ (800b888 <RCCEx_PLL3_Config+0x15c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0f0      	beq.n	800b85e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	58024400 	.word	0x58024400
 800b88c:	ffff0007 	.word	0xffff0007

0800b890 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e10f      	b.n	800bac2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a87      	ldr	r2, [pc, #540]	@ (800bacc <HAL_SPI_Init+0x23c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00f      	beq.n	800b8d2 <HAL_SPI_Init+0x42>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a86      	ldr	r2, [pc, #536]	@ (800bad0 <HAL_SPI_Init+0x240>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d00a      	beq.n	800b8d2 <HAL_SPI_Init+0x42>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a84      	ldr	r2, [pc, #528]	@ (800bad4 <HAL_SPI_Init+0x244>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d005      	beq.n	800b8d2 <HAL_SPI_Init+0x42>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	2b0f      	cmp	r3, #15
 800b8cc:	d901      	bls.n	800b8d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e0f7      	b.n	800bac2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f900 	bl	800bad8 <SPI_GetPacketSize>
 800b8d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a7b      	ldr	r2, [pc, #492]	@ (800bacc <HAL_SPI_Init+0x23c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d00c      	beq.n	800b8fe <HAL_SPI_Init+0x6e>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a79      	ldr	r2, [pc, #484]	@ (800bad0 <HAL_SPI_Init+0x240>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d007      	beq.n	800b8fe <HAL_SPI_Init+0x6e>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a78      	ldr	r2, [pc, #480]	@ (800bad4 <HAL_SPI_Init+0x244>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d002      	beq.n	800b8fe <HAL_SPI_Init+0x6e>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b08      	cmp	r3, #8
 800b8fc:	d811      	bhi.n	800b922 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b902:	4a72      	ldr	r2, [pc, #456]	@ (800bacc <HAL_SPI_Init+0x23c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d009      	beq.n	800b91c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a70      	ldr	r2, [pc, #448]	@ (800bad0 <HAL_SPI_Init+0x240>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d004      	beq.n	800b91c <HAL_SPI_Init+0x8c>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a6f      	ldr	r2, [pc, #444]	@ (800bad4 <HAL_SPI_Init+0x244>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d104      	bne.n	800b926 <HAL_SPI_Init+0x96>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b10      	cmp	r3, #16
 800b920:	d901      	bls.n	800b926 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e0cd      	b.n	800bac2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d106      	bne.n	800b940 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7f5 ff6a 	bl	8001814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2202      	movs	r2, #2
 800b944:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f022 0201 	bic.w	r2, r2, #1
 800b956:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b962:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b96c:	d119      	bne.n	800b9a2 <HAL_SPI_Init+0x112>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b976:	d103      	bne.n	800b980 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d008      	beq.n	800b992 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10c      	bne.n	800b9a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b98c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b990:	d107      	bne.n	800b9a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b9a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00f      	beq.n	800b9ce <HAL_SPI_Init+0x13e>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	2b06      	cmp	r3, #6
 800b9b4:	d90b      	bls.n	800b9ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	e007      	b.n	800b9de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b9dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69da      	ldr	r2, [r3, #28]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f0:	ea42 0103 	orr.w	r1, r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba08:	431a      	orrs	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0e:	431a      	orrs	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	431a      	orrs	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	431a      	orrs	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	431a      	orrs	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba32:	431a      	orrs	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	431a      	orrs	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba3e:	ea42 0103 	orr.w	r1, r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d113      	bne.n	800ba7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f022 0201 	bic.w	r2, r2, #1
 800ba8c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	40013000 	.word	0x40013000
 800bad0:	40003800 	.word	0x40003800
 800bad4:	40003c00 	.word	0x40003c00

0800bad8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae4:	095b      	lsrs	r3, r3, #5
 800bae6:	3301      	adds	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	3301      	adds	r3, #1
 800baf0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	3307      	adds	r3, #7
 800baf6:	08db      	lsrs	r3, r3, #3
 800baf8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e049      	b.n	800bbb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d106      	bne.n	800bb3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7f5 ff61 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f000 fad9 	bl	800c104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e049      	b.n	800bc62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7f5 fea4 	bl	8001930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2202      	movs	r2, #2
 800bbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	f000 fa82 	bl	800c104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	f003 0302 	and.w	r3, r3, #2
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d020      	beq.n	800bcce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d01b      	beq.n	800bcce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f06f 0202 	mvn.w	r2, #2
 800bc9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	f003 0303 	and.w	r3, r3, #3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d003      	beq.n	800bcbc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fa07 	bl	800c0c8 <HAL_TIM_IC_CaptureCallback>
 800bcba:	e005      	b.n	800bcc8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f9f9 	bl	800c0b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa0a 	bl	800c0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d020      	beq.n	800bd1a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d01b      	beq.n	800bd1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f06f 0204 	mvn.w	r2, #4
 800bcea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d003      	beq.n	800bd08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f9e1 	bl	800c0c8 <HAL_TIM_IC_CaptureCallback>
 800bd06:	e005      	b.n	800bd14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9d3 	bl	800c0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f9e4 	bl	800c0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f003 0308 	and.w	r3, r3, #8
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d020      	beq.n	800bd66 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f003 0308 	and.w	r3, r3, #8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d01b      	beq.n	800bd66 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f06f 0208 	mvn.w	r2, #8
 800bd36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2204      	movs	r2, #4
 800bd3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69db      	ldr	r3, [r3, #28]
 800bd44:	f003 0303 	and.w	r3, r3, #3
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9bb 	bl	800c0c8 <HAL_TIM_IC_CaptureCallback>
 800bd52:	e005      	b.n	800bd60 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f9ad 	bl	800c0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f9be 	bl	800c0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	f003 0310 	and.w	r3, r3, #16
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d020      	beq.n	800bdb2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f003 0310 	and.w	r3, r3, #16
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d01b      	beq.n	800bdb2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f06f 0210 	mvn.w	r2, #16
 800bd82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2208      	movs	r2, #8
 800bd88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d003      	beq.n	800bda0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f995 	bl	800c0c8 <HAL_TIM_IC_CaptureCallback>
 800bd9e:	e005      	b.n	800bdac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f987 	bl	800c0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f998 	bl	800c0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00c      	beq.n	800bdd6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d007      	beq.n	800bdd6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f06f 0201 	mvn.w	r2, #1
 800bdce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f965 	bl	800c0a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d104      	bne.n	800bdea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00c      	beq.n	800be04 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d007      	beq.n	800be04 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bdfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fe0c 	bl	800ca1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00c      	beq.n	800be28 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be14:	2b00      	cmp	r3, #0
 800be16:	d007      	beq.n	800be28 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800be20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fe04 	bl	800ca30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00c      	beq.n	800be4c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d007      	beq.n	800be4c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f952 	bl	800c0f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f003 0320 	and.w	r3, r3, #32
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00c      	beq.n	800be70 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f003 0320 	and.w	r3, r3, #32
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d007      	beq.n	800be70 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f06f 0220 	mvn.w	r2, #32
 800be68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fdcc 	bl	800ca08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be70:	bf00      	nop
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d101      	bne.n	800be96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800be92:	2302      	movs	r3, #2
 800be94:	e0ff      	b.n	800c096 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b14      	cmp	r3, #20
 800bea2:	f200 80f0 	bhi.w	800c086 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bea6:	a201      	add	r2, pc, #4	@ (adr r2, 800beac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bf01 	.word	0x0800bf01
 800beb0:	0800c087 	.word	0x0800c087
 800beb4:	0800c087 	.word	0x0800c087
 800beb8:	0800c087 	.word	0x0800c087
 800bebc:	0800bf41 	.word	0x0800bf41
 800bec0:	0800c087 	.word	0x0800c087
 800bec4:	0800c087 	.word	0x0800c087
 800bec8:	0800c087 	.word	0x0800c087
 800becc:	0800bf83 	.word	0x0800bf83
 800bed0:	0800c087 	.word	0x0800c087
 800bed4:	0800c087 	.word	0x0800c087
 800bed8:	0800c087 	.word	0x0800c087
 800bedc:	0800bfc3 	.word	0x0800bfc3
 800bee0:	0800c087 	.word	0x0800c087
 800bee4:	0800c087 	.word	0x0800c087
 800bee8:	0800c087 	.word	0x0800c087
 800beec:	0800c005 	.word	0x0800c005
 800bef0:	0800c087 	.word	0x0800c087
 800bef4:	0800c087 	.word	0x0800c087
 800bef8:	0800c087 	.word	0x0800c087
 800befc:	0800c045 	.word	0x0800c045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 f99c 	bl	800c244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	699a      	ldr	r2, [r3, #24]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0208 	orr.w	r2, r2, #8
 800bf1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	699a      	ldr	r2, [r3, #24]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f022 0204 	bic.w	r2, r2, #4
 800bf2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6999      	ldr	r1, [r3, #24]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	691a      	ldr	r2, [r3, #16]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	619a      	str	r2, [r3, #24]
      break;
 800bf3e:	e0a5      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 fa0c 	bl	800c364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	699a      	ldr	r2, [r3, #24]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699a      	ldr	r2, [r3, #24]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6999      	ldr	r1, [r3, #24]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	021a      	lsls	r2, r3, #8
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	619a      	str	r2, [r3, #24]
      break;
 800bf80:	e084      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fa75 	bl	800c478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	69da      	ldr	r2, [r3, #28]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f042 0208 	orr.w	r2, r2, #8
 800bf9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	69da      	ldr	r2, [r3, #28]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f022 0204 	bic.w	r2, r2, #4
 800bfac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69d9      	ldr	r1, [r3, #28]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	691a      	ldr	r2, [r3, #16]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	61da      	str	r2, [r3, #28]
      break;
 800bfc0:	e064      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 fadd 	bl	800c588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69da      	ldr	r2, [r3, #28]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bfdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69da      	ldr	r2, [r3, #28]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69d9      	ldr	r1, [r3, #28]
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	021a      	lsls	r2, r3, #8
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	61da      	str	r2, [r3, #28]
      break;
 800c002:	e043      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 fb26 	bl	800c65c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f042 0208 	orr.w	r2, r2, #8
 800c01e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 0204 	bic.w	r2, r2, #4
 800c02e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	691a      	ldr	r2, [r3, #16]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c042:	e023      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 fb6a 	bl	800c724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c05e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c06e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	021a      	lsls	r2, r3, #8
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c084:	e002      	b.n	800c08c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	75fb      	strb	r3, [r7, #23]
      break;
 800c08a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop

0800c0a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a43      	ldr	r2, [pc, #268]	@ (800c224 <TIM_Base_SetConfig+0x120>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d013      	beq.n	800c144 <TIM_Base_SetConfig+0x40>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c122:	d00f      	beq.n	800c144 <TIM_Base_SetConfig+0x40>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a40      	ldr	r2, [pc, #256]	@ (800c228 <TIM_Base_SetConfig+0x124>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d00b      	beq.n	800c144 <TIM_Base_SetConfig+0x40>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a3f      	ldr	r2, [pc, #252]	@ (800c22c <TIM_Base_SetConfig+0x128>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d007      	beq.n	800c144 <TIM_Base_SetConfig+0x40>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a3e      	ldr	r2, [pc, #248]	@ (800c230 <TIM_Base_SetConfig+0x12c>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d003      	beq.n	800c144 <TIM_Base_SetConfig+0x40>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a3d      	ldr	r2, [pc, #244]	@ (800c234 <TIM_Base_SetConfig+0x130>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d108      	bne.n	800c156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c14a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4313      	orrs	r3, r2
 800c154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a32      	ldr	r2, [pc, #200]	@ (800c224 <TIM_Base_SetConfig+0x120>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d01f      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c164:	d01b      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a2f      	ldr	r2, [pc, #188]	@ (800c228 <TIM_Base_SetConfig+0x124>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d017      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a2e      	ldr	r2, [pc, #184]	@ (800c22c <TIM_Base_SetConfig+0x128>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d013      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a2d      	ldr	r2, [pc, #180]	@ (800c230 <TIM_Base_SetConfig+0x12c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d00f      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a2c      	ldr	r2, [pc, #176]	@ (800c234 <TIM_Base_SetConfig+0x130>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d00b      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a2b      	ldr	r2, [pc, #172]	@ (800c238 <TIM_Base_SetConfig+0x134>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d007      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a2a      	ldr	r2, [pc, #168]	@ (800c23c <TIM_Base_SetConfig+0x138>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <TIM_Base_SetConfig+0x9a>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a29      	ldr	r2, [pc, #164]	@ (800c240 <TIM_Base_SetConfig+0x13c>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d108      	bne.n	800c1b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a14      	ldr	r2, [pc, #80]	@ (800c224 <TIM_Base_SetConfig+0x120>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00f      	beq.n	800c1f6 <TIM_Base_SetConfig+0xf2>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a16      	ldr	r2, [pc, #88]	@ (800c234 <TIM_Base_SetConfig+0x130>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00b      	beq.n	800c1f6 <TIM_Base_SetConfig+0xf2>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a15      	ldr	r2, [pc, #84]	@ (800c238 <TIM_Base_SetConfig+0x134>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d007      	beq.n	800c1f6 <TIM_Base_SetConfig+0xf2>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a14      	ldr	r2, [pc, #80]	@ (800c23c <TIM_Base_SetConfig+0x138>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d003      	beq.n	800c1f6 <TIM_Base_SetConfig+0xf2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a13      	ldr	r2, [pc, #76]	@ (800c240 <TIM_Base_SetConfig+0x13c>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d103      	bne.n	800c1fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	691a      	ldr	r2, [r3, #16]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f043 0204 	orr.w	r2, r3, #4
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	601a      	str	r2, [r3, #0]
}
 800c216:	bf00      	nop
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	40010000 	.word	0x40010000
 800c228:	40000400 	.word	0x40000400
 800c22c:	40000800 	.word	0x40000800
 800c230:	40000c00 	.word	0x40000c00
 800c234:	40010400 	.word	0x40010400
 800c238:	40014000 	.word	0x40014000
 800c23c:	40014400 	.word	0x40014400
 800c240:	40014800 	.word	0x40014800

0800c244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c244:	b480      	push	{r7}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6a1b      	ldr	r3, [r3, #32]
 800c258:	f023 0201 	bic.w	r2, r3, #1
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	4b37      	ldr	r3, [pc, #220]	@ (800c34c <TIM_OC1_SetConfig+0x108>)
 800c270:	4013      	ands	r3, r2
 800c272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f023 0303 	bic.w	r3, r3, #3
 800c27a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	4313      	orrs	r3, r2
 800c284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	f023 0302 	bic.w	r3, r3, #2
 800c28c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	4313      	orrs	r3, r2
 800c296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a2d      	ldr	r2, [pc, #180]	@ (800c350 <TIM_OC1_SetConfig+0x10c>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d00f      	beq.n	800c2c0 <TIM_OC1_SetConfig+0x7c>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a2c      	ldr	r2, [pc, #176]	@ (800c354 <TIM_OC1_SetConfig+0x110>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d00b      	beq.n	800c2c0 <TIM_OC1_SetConfig+0x7c>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a2b      	ldr	r2, [pc, #172]	@ (800c358 <TIM_OC1_SetConfig+0x114>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d007      	beq.n	800c2c0 <TIM_OC1_SetConfig+0x7c>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a2a      	ldr	r2, [pc, #168]	@ (800c35c <TIM_OC1_SetConfig+0x118>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d003      	beq.n	800c2c0 <TIM_OC1_SetConfig+0x7c>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a29      	ldr	r2, [pc, #164]	@ (800c360 <TIM_OC1_SetConfig+0x11c>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d10c      	bne.n	800c2da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f023 0308 	bic.w	r3, r3, #8
 800c2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f023 0304 	bic.w	r3, r3, #4
 800c2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a1c      	ldr	r2, [pc, #112]	@ (800c350 <TIM_OC1_SetConfig+0x10c>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d00f      	beq.n	800c302 <TIM_OC1_SetConfig+0xbe>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a1b      	ldr	r2, [pc, #108]	@ (800c354 <TIM_OC1_SetConfig+0x110>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d00b      	beq.n	800c302 <TIM_OC1_SetConfig+0xbe>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a1a      	ldr	r2, [pc, #104]	@ (800c358 <TIM_OC1_SetConfig+0x114>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d007      	beq.n	800c302 <TIM_OC1_SetConfig+0xbe>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a19      	ldr	r2, [pc, #100]	@ (800c35c <TIM_OC1_SetConfig+0x118>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d003      	beq.n	800c302 <TIM_OC1_SetConfig+0xbe>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a18      	ldr	r2, [pc, #96]	@ (800c360 <TIM_OC1_SetConfig+0x11c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d111      	bne.n	800c326 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	4313      	orrs	r3, r2
 800c31a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	4313      	orrs	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	621a      	str	r2, [r3, #32]
}
 800c340:	bf00      	nop
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	fffeff8f 	.word	0xfffeff8f
 800c350:	40010000 	.word	0x40010000
 800c354:	40010400 	.word	0x40010400
 800c358:	40014000 	.word	0x40014000
 800c35c:	40014400 	.word	0x40014400
 800c360:	40014800 	.word	0x40014800

0800c364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a1b      	ldr	r3, [r3, #32]
 800c378:	f023 0210 	bic.w	r2, r3, #16
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4b34      	ldr	r3, [pc, #208]	@ (800c460 <TIM_OC2_SetConfig+0xfc>)
 800c390:	4013      	ands	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	021b      	lsls	r3, r3, #8
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f023 0320 	bic.w	r3, r3, #32
 800c3ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	011b      	lsls	r3, r3, #4
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a29      	ldr	r2, [pc, #164]	@ (800c464 <TIM_OC2_SetConfig+0x100>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d003      	beq.n	800c3cc <TIM_OC2_SetConfig+0x68>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a28      	ldr	r2, [pc, #160]	@ (800c468 <TIM_OC2_SetConfig+0x104>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d10d      	bne.n	800c3e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	011b      	lsls	r3, r3, #4
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a1e      	ldr	r2, [pc, #120]	@ (800c464 <TIM_OC2_SetConfig+0x100>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d00f      	beq.n	800c410 <TIM_OC2_SetConfig+0xac>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a1d      	ldr	r2, [pc, #116]	@ (800c468 <TIM_OC2_SetConfig+0x104>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d00b      	beq.n	800c410 <TIM_OC2_SetConfig+0xac>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a1c      	ldr	r2, [pc, #112]	@ (800c46c <TIM_OC2_SetConfig+0x108>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d007      	beq.n	800c410 <TIM_OC2_SetConfig+0xac>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a1b      	ldr	r2, [pc, #108]	@ (800c470 <TIM_OC2_SetConfig+0x10c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d003      	beq.n	800c410 <TIM_OC2_SetConfig+0xac>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a1a      	ldr	r2, [pc, #104]	@ (800c474 <TIM_OC2_SetConfig+0x110>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d113      	bne.n	800c438 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c41e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	4313      	orrs	r3, r2
 800c42a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	4313      	orrs	r3, r2
 800c436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	621a      	str	r2, [r3, #32]
}
 800c452:	bf00      	nop
 800c454:	371c      	adds	r7, #28
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	feff8fff 	.word	0xfeff8fff
 800c464:	40010000 	.word	0x40010000
 800c468:	40010400 	.word	0x40010400
 800c46c:	40014000 	.word	0x40014000
 800c470:	40014400 	.word	0x40014400
 800c474:	40014800 	.word	0x40014800

0800c478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a1b      	ldr	r3, [r3, #32]
 800c48c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4b33      	ldr	r3, [pc, #204]	@ (800c570 <TIM_OC3_SetConfig+0xf8>)
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f023 0303 	bic.w	r3, r3, #3
 800c4ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c4c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	021b      	lsls	r3, r3, #8
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a28      	ldr	r2, [pc, #160]	@ (800c574 <TIM_OC3_SetConfig+0xfc>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d003      	beq.n	800c4de <TIM_OC3_SetConfig+0x66>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a27      	ldr	r2, [pc, #156]	@ (800c578 <TIM_OC3_SetConfig+0x100>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d10d      	bne.n	800c4fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	021b      	lsls	r3, r3, #8
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c574 <TIM_OC3_SetConfig+0xfc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d00f      	beq.n	800c522 <TIM_OC3_SetConfig+0xaa>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a1c      	ldr	r2, [pc, #112]	@ (800c578 <TIM_OC3_SetConfig+0x100>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d00b      	beq.n	800c522 <TIM_OC3_SetConfig+0xaa>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a1b      	ldr	r2, [pc, #108]	@ (800c57c <TIM_OC3_SetConfig+0x104>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d007      	beq.n	800c522 <TIM_OC3_SetConfig+0xaa>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a1a      	ldr	r2, [pc, #104]	@ (800c580 <TIM_OC3_SetConfig+0x108>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d003      	beq.n	800c522 <TIM_OC3_SetConfig+0xaa>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a19      	ldr	r2, [pc, #100]	@ (800c584 <TIM_OC3_SetConfig+0x10c>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d113      	bne.n	800c54a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	011b      	lsls	r3, r3, #4
 800c538:	693a      	ldr	r2, [r7, #16]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	699b      	ldr	r3, [r3, #24]
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	4313      	orrs	r3, r2
 800c548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	685a      	ldr	r2, [r3, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	621a      	str	r2, [r3, #32]
}
 800c564:	bf00      	nop
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	fffeff8f 	.word	0xfffeff8f
 800c574:	40010000 	.word	0x40010000
 800c578:	40010400 	.word	0x40010400
 800c57c:	40014000 	.word	0x40014000
 800c580:	40014400 	.word	0x40014400
 800c584:	40014800 	.word	0x40014800

0800c588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	69db      	ldr	r3, [r3, #28]
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	4b24      	ldr	r3, [pc, #144]	@ (800c644 <TIM_OC4_SetConfig+0xbc>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c5be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c5d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	031b      	lsls	r3, r3, #12
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a19      	ldr	r2, [pc, #100]	@ (800c648 <TIM_OC4_SetConfig+0xc0>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d00f      	beq.n	800c608 <TIM_OC4_SetConfig+0x80>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a18      	ldr	r2, [pc, #96]	@ (800c64c <TIM_OC4_SetConfig+0xc4>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d00b      	beq.n	800c608 <TIM_OC4_SetConfig+0x80>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a17      	ldr	r2, [pc, #92]	@ (800c650 <TIM_OC4_SetConfig+0xc8>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d007      	beq.n	800c608 <TIM_OC4_SetConfig+0x80>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a16      	ldr	r2, [pc, #88]	@ (800c654 <TIM_OC4_SetConfig+0xcc>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d003      	beq.n	800c608 <TIM_OC4_SetConfig+0x80>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a15      	ldr	r2, [pc, #84]	@ (800c658 <TIM_OC4_SetConfig+0xd0>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d109      	bne.n	800c61c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c60e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	019b      	lsls	r3, r3, #6
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	4313      	orrs	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	621a      	str	r2, [r3, #32]
}
 800c636:	bf00      	nop
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	feff8fff 	.word	0xfeff8fff
 800c648:	40010000 	.word	0x40010000
 800c64c:	40010400 	.word	0x40010400
 800c650:	40014000 	.word	0x40014000
 800c654:	40014400 	.word	0x40014400
 800c658:	40014800 	.word	0x40014800

0800c65c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a1b      	ldr	r3, [r3, #32]
 800c670:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	4b21      	ldr	r3, [pc, #132]	@ (800c70c <TIM_OC5_SetConfig+0xb0>)
 800c688:	4013      	ands	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	4313      	orrs	r3, r2
 800c694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c69c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	041b      	lsls	r3, r3, #16
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a18      	ldr	r2, [pc, #96]	@ (800c710 <TIM_OC5_SetConfig+0xb4>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d00f      	beq.n	800c6d2 <TIM_OC5_SetConfig+0x76>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a17      	ldr	r2, [pc, #92]	@ (800c714 <TIM_OC5_SetConfig+0xb8>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d00b      	beq.n	800c6d2 <TIM_OC5_SetConfig+0x76>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a16      	ldr	r2, [pc, #88]	@ (800c718 <TIM_OC5_SetConfig+0xbc>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d007      	beq.n	800c6d2 <TIM_OC5_SetConfig+0x76>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a15      	ldr	r2, [pc, #84]	@ (800c71c <TIM_OC5_SetConfig+0xc0>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d003      	beq.n	800c6d2 <TIM_OC5_SetConfig+0x76>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a14      	ldr	r2, [pc, #80]	@ (800c720 <TIM_OC5_SetConfig+0xc4>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d109      	bne.n	800c6e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c6d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	021b      	lsls	r3, r3, #8
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	621a      	str	r2, [r3, #32]
}
 800c700:	bf00      	nop
 800c702:	371c      	adds	r7, #28
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	fffeff8f 	.word	0xfffeff8f
 800c710:	40010000 	.word	0x40010000
 800c714:	40010400 	.word	0x40010400
 800c718:	40014000 	.word	0x40014000
 800c71c:	40014400 	.word	0x40014400
 800c720:	40014800 	.word	0x40014800

0800c724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	4b22      	ldr	r3, [pc, #136]	@ (800c7d8 <TIM_OC6_SetConfig+0xb4>)
 800c750:	4013      	ands	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	021b      	lsls	r3, r3, #8
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	051b      	lsls	r3, r3, #20
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	4313      	orrs	r3, r2
 800c772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a19      	ldr	r2, [pc, #100]	@ (800c7dc <TIM_OC6_SetConfig+0xb8>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d00f      	beq.n	800c79c <TIM_OC6_SetConfig+0x78>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a18      	ldr	r2, [pc, #96]	@ (800c7e0 <TIM_OC6_SetConfig+0xbc>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d00b      	beq.n	800c79c <TIM_OC6_SetConfig+0x78>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a17      	ldr	r2, [pc, #92]	@ (800c7e4 <TIM_OC6_SetConfig+0xc0>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d007      	beq.n	800c79c <TIM_OC6_SetConfig+0x78>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a16      	ldr	r2, [pc, #88]	@ (800c7e8 <TIM_OC6_SetConfig+0xc4>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d003      	beq.n	800c79c <TIM_OC6_SetConfig+0x78>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a15      	ldr	r2, [pc, #84]	@ (800c7ec <TIM_OC6_SetConfig+0xc8>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d109      	bne.n	800c7b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	695b      	ldr	r3, [r3, #20]
 800c7a8:	029b      	lsls	r3, r3, #10
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	685a      	ldr	r2, [r3, #4]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	693a      	ldr	r2, [r7, #16]
 800c7c8:	621a      	str	r2, [r3, #32]
}
 800c7ca:	bf00      	nop
 800c7cc:	371c      	adds	r7, #28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	feff8fff 	.word	0xfeff8fff
 800c7dc:	40010000 	.word	0x40010000
 800c7e0:	40010400 	.word	0x40010400
 800c7e4:	40014000 	.word	0x40014000
 800c7e8:	40014400 	.word	0x40014400
 800c7ec:	40014800 	.word	0x40014800

0800c7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c800:	2b01      	cmp	r3, #1
 800c802:	d101      	bne.n	800c808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c804:	2302      	movs	r3, #2
 800c806:	e06d      	b.n	800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2202      	movs	r2, #2
 800c814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a30      	ldr	r2, [pc, #192]	@ (800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d004      	beq.n	800c83c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a2f      	ldr	r2, [pc, #188]	@ (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d108      	bne.n	800c84e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a20      	ldr	r2, [pc, #128]	@ (800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d022      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c87a:	d01d      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a1d      	ldr	r2, [pc, #116]	@ (800c8f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d018      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a1c      	ldr	r2, [pc, #112]	@ (800c8fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d013      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a1a      	ldr	r2, [pc, #104]	@ (800c900 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d00e      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a15      	ldr	r2, [pc, #84]	@ (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d009      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a16      	ldr	r2, [pc, #88]	@ (800c904 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d004      	beq.n	800c8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a15      	ldr	r2, [pc, #84]	@ (800c908 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d10c      	bne.n	800c8d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	40010000 	.word	0x40010000
 800c8f4:	40010400 	.word	0x40010400
 800c8f8:	40000400 	.word	0x40000400
 800c8fc:	40000800 	.word	0x40000800
 800c900:	40000c00 	.word	0x40000c00
 800c904:	40001800 	.word	0x40001800
 800c908:	40014000 	.word	0x40014000

0800c90c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c920:	2b01      	cmp	r3, #1
 800c922:	d101      	bne.n	800c928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c924:	2302      	movs	r3, #2
 800c926:	e065      	b.n	800c9f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	4313      	orrs	r3, r2
 800c94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	4313      	orrs	r3, r2
 800c958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4313      	orrs	r3, r2
 800c966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	4313      	orrs	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	041b      	lsls	r3, r3, #16
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a16      	ldr	r2, [pc, #88]	@ (800ca00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d004      	beq.n	800c9b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a14      	ldr	r2, [pc, #80]	@ (800ca04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d115      	bne.n	800c9e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c0:	051b      	lsls	r3, r3, #20
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	40010000 	.word	0x40010000
 800ca04:	40010400 	.word	0x40010400

0800ca08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d101      	bne.n	800ca56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	e042      	b.n	800cadc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d106      	bne.n	800ca6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7f5 f8c9 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2224      	movs	r2, #36	@ 0x24
 800ca72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f022 0201 	bic.w	r2, r2, #1
 800ca84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fee6 	bl	800d860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f97b 	bl	800cd90 <UART_SetConfig>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d101      	bne.n	800caa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e01b      	b.n	800cadc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689a      	ldr	r2, [r3, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f042 0201 	orr.w	r2, r2, #1
 800cad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 ff65 	bl	800d9a4 <UART_CheckIdleState>
 800cada:	4603      	mov	r3, r0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b08a      	sub	sp, #40	@ 0x28
 800cae8:	af02      	add	r7, sp, #8
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	4613      	mov	r3, r2
 800caf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d17b      	bne.n	800cbf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <HAL_UART_Transmit+0x26>
 800cb04:	88fb      	ldrh	r3, [r7, #6]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e074      	b.n	800cbf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2221      	movs	r2, #33	@ 0x21
 800cb1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb1e:	f7f5 fafd 	bl	800211c <HAL_GetTick>
 800cb22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	88fa      	ldrh	r2, [r7, #6]
 800cb28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	88fa      	ldrh	r2, [r7, #6]
 800cb30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb3c:	d108      	bne.n	800cb50 <HAL_UART_Transmit+0x6c>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d104      	bne.n	800cb50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cb46:	2300      	movs	r3, #0
 800cb48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	61bb      	str	r3, [r7, #24]
 800cb4e:	e003      	b.n	800cb58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cb58:	e030      	b.n	800cbbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	2200      	movs	r2, #0
 800cb62:	2180      	movs	r1, #128	@ 0x80
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 ffc7 	bl	800daf8 <UART_WaitOnFlagUntilTimeout>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2220      	movs	r2, #32
 800cb74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e03d      	b.n	800cbf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10b      	bne.n	800cb9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	3302      	adds	r3, #2
 800cb96:	61bb      	str	r3, [r7, #24]
 800cb98:	e007      	b.n	800cbaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	781a      	ldrb	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	3301      	adds	r3, #1
 800cba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1c8      	bne.n	800cb5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	9300      	str	r3, [sp, #0]
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2140      	movs	r1, #64	@ 0x40
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f000 ff90 	bl	800daf8 <UART_WaitOnFlagUntilTimeout>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d005      	beq.n	800cbea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2220      	movs	r2, #32
 800cbe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e006      	b.n	800cbf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2220      	movs	r2, #32
 800cbee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e000      	b.n	800cbf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cbf6:	2302      	movs	r3, #2
  }
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3720      	adds	r7, #32
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08a      	sub	sp, #40	@ 0x28
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	603b      	str	r3, [r7, #0]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc16:	2b20      	cmp	r3, #32
 800cc18:	f040 80b5 	bne.w	800cd86 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <HAL_UART_Receive+0x28>
 800cc22:	88fb      	ldrh	r3, [r7, #6]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	e0ad      	b.n	800cd88 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2222      	movs	r2, #34	@ 0x22
 800cc38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc42:	f7f5 fa6b 	bl	800211c <HAL_GetTick>
 800cc46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	88fa      	ldrh	r2, [r7, #6]
 800cc4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	88fa      	ldrh	r2, [r7, #6]
 800cc54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc60:	d10e      	bne.n	800cc80 <HAL_UART_Receive+0x80>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d105      	bne.n	800cc76 <HAL_UART_Receive+0x76>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cc70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc74:	e02d      	b.n	800ccd2 <HAL_UART_Receive+0xd2>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	22ff      	movs	r2, #255	@ 0xff
 800cc7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc7e:	e028      	b.n	800ccd2 <HAL_UART_Receive+0xd2>
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10d      	bne.n	800cca4 <HAL_UART_Receive+0xa4>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d104      	bne.n	800cc9a <HAL_UART_Receive+0x9a>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	22ff      	movs	r2, #255	@ 0xff
 800cc94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cc98:	e01b      	b.n	800ccd2 <HAL_UART_Receive+0xd2>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	227f      	movs	r2, #127	@ 0x7f
 800cc9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cca2:	e016      	b.n	800ccd2 <HAL_UART_Receive+0xd2>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccac:	d10d      	bne.n	800ccca <HAL_UART_Receive+0xca>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d104      	bne.n	800ccc0 <HAL_UART_Receive+0xc0>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	227f      	movs	r2, #127	@ 0x7f
 800ccba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ccbe:	e008      	b.n	800ccd2 <HAL_UART_Receive+0xd2>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	223f      	movs	r2, #63	@ 0x3f
 800ccc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ccc8:	e003      	b.n	800ccd2 <HAL_UART_Receive+0xd2>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ccd8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce2:	d108      	bne.n	800ccf6 <HAL_UART_Receive+0xf6>
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ccec:	2300      	movs	r3, #0
 800ccee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	e003      	b.n	800ccfe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ccfe:	e036      	b.n	800cd6e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2200      	movs	r2, #0
 800cd08:	2120      	movs	r1, #32
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 fef4 	bl	800daf8 <UART_WaitOnFlagUntilTimeout>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d005      	beq.n	800cd22 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e032      	b.n	800cd88 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10c      	bne.n	800cd42 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	8a7b      	ldrh	r3, [r7, #18]
 800cd32:	4013      	ands	r3, r2
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	61bb      	str	r3, [r7, #24]
 800cd40:	e00c      	b.n	800cd5c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	8a7b      	ldrh	r3, [r7, #18]
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	4013      	ands	r3, r2
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	3b01      	subs	r3, #1
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1c2      	bne.n	800cd00 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e000      	b.n	800cd88 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800cd86:	2302      	movs	r3, #2
  }
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3720      	adds	r7, #32
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd94:	b092      	sub	sp, #72	@ 0x48
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4bbe      	ldr	r3, [pc, #760]	@ (800d0b8 <UART_SetConfig+0x328>)
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	6812      	ldr	r2, [r2, #0]
 800cdc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	68da      	ldr	r2, [r3, #12]
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	430a      	orrs	r2, r1
 800cde0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4ab3      	ldr	r2, [pc, #716]	@ (800d0bc <UART_SetConfig+0x32c>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d004      	beq.n	800cdfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689a      	ldr	r2, [r3, #8]
 800ce02:	4baf      	ldr	r3, [pc, #700]	@ (800d0c0 <UART_SetConfig+0x330>)
 800ce04:	4013      	ands	r3, r2
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	6812      	ldr	r2, [r2, #0]
 800ce0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce0c:	430b      	orrs	r3, r1
 800ce0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce16:	f023 010f 	bic.w	r1, r3, #15
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	430a      	orrs	r2, r1
 800ce24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4aa6      	ldr	r2, [pc, #664]	@ (800d0c4 <UART_SetConfig+0x334>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d177      	bne.n	800cf20 <UART_SetConfig+0x190>
 800ce30:	4ba5      	ldr	r3, [pc, #660]	@ (800d0c8 <UART_SetConfig+0x338>)
 800ce32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce38:	2b28      	cmp	r3, #40	@ 0x28
 800ce3a:	d86d      	bhi.n	800cf18 <UART_SetConfig+0x188>
 800ce3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce44 <UART_SetConfig+0xb4>)
 800ce3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce42:	bf00      	nop
 800ce44:	0800cee9 	.word	0x0800cee9
 800ce48:	0800cf19 	.word	0x0800cf19
 800ce4c:	0800cf19 	.word	0x0800cf19
 800ce50:	0800cf19 	.word	0x0800cf19
 800ce54:	0800cf19 	.word	0x0800cf19
 800ce58:	0800cf19 	.word	0x0800cf19
 800ce5c:	0800cf19 	.word	0x0800cf19
 800ce60:	0800cf19 	.word	0x0800cf19
 800ce64:	0800cef1 	.word	0x0800cef1
 800ce68:	0800cf19 	.word	0x0800cf19
 800ce6c:	0800cf19 	.word	0x0800cf19
 800ce70:	0800cf19 	.word	0x0800cf19
 800ce74:	0800cf19 	.word	0x0800cf19
 800ce78:	0800cf19 	.word	0x0800cf19
 800ce7c:	0800cf19 	.word	0x0800cf19
 800ce80:	0800cf19 	.word	0x0800cf19
 800ce84:	0800cef9 	.word	0x0800cef9
 800ce88:	0800cf19 	.word	0x0800cf19
 800ce8c:	0800cf19 	.word	0x0800cf19
 800ce90:	0800cf19 	.word	0x0800cf19
 800ce94:	0800cf19 	.word	0x0800cf19
 800ce98:	0800cf19 	.word	0x0800cf19
 800ce9c:	0800cf19 	.word	0x0800cf19
 800cea0:	0800cf19 	.word	0x0800cf19
 800cea4:	0800cf01 	.word	0x0800cf01
 800cea8:	0800cf19 	.word	0x0800cf19
 800ceac:	0800cf19 	.word	0x0800cf19
 800ceb0:	0800cf19 	.word	0x0800cf19
 800ceb4:	0800cf19 	.word	0x0800cf19
 800ceb8:	0800cf19 	.word	0x0800cf19
 800cebc:	0800cf19 	.word	0x0800cf19
 800cec0:	0800cf19 	.word	0x0800cf19
 800cec4:	0800cf09 	.word	0x0800cf09
 800cec8:	0800cf19 	.word	0x0800cf19
 800cecc:	0800cf19 	.word	0x0800cf19
 800ced0:	0800cf19 	.word	0x0800cf19
 800ced4:	0800cf19 	.word	0x0800cf19
 800ced8:	0800cf19 	.word	0x0800cf19
 800cedc:	0800cf19 	.word	0x0800cf19
 800cee0:	0800cf19 	.word	0x0800cf19
 800cee4:	0800cf11 	.word	0x0800cf11
 800cee8:	2301      	movs	r3, #1
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceee:	e222      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cef0:	2304      	movs	r3, #4
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cef6:	e21e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cef8:	2308      	movs	r3, #8
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cefe:	e21a      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf00:	2310      	movs	r3, #16
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf06:	e216      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf08:	2320      	movs	r3, #32
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e212      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf10:	2340      	movs	r3, #64	@ 0x40
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e20e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf18:	2380      	movs	r3, #128	@ 0x80
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e20a      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a69      	ldr	r2, [pc, #420]	@ (800d0cc <UART_SetConfig+0x33c>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d130      	bne.n	800cf8c <UART_SetConfig+0x1fc>
 800cf2a:	4b67      	ldr	r3, [pc, #412]	@ (800d0c8 <UART_SetConfig+0x338>)
 800cf2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	2b05      	cmp	r3, #5
 800cf34:	d826      	bhi.n	800cf84 <UART_SetConfig+0x1f4>
 800cf36:	a201      	add	r2, pc, #4	@ (adr r2, 800cf3c <UART_SetConfig+0x1ac>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf55 	.word	0x0800cf55
 800cf40:	0800cf5d 	.word	0x0800cf5d
 800cf44:	0800cf65 	.word	0x0800cf65
 800cf48:	0800cf6d 	.word	0x0800cf6d
 800cf4c:	0800cf75 	.word	0x0800cf75
 800cf50:	0800cf7d 	.word	0x0800cf7d
 800cf54:	2300      	movs	r3, #0
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5a:	e1ec      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf5c:	2304      	movs	r3, #4
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf62:	e1e8      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf64:	2308      	movs	r3, #8
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf6a:	e1e4      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf6c:	2310      	movs	r3, #16
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf72:	e1e0      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf74:	2320      	movs	r3, #32
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf7a:	e1dc      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf7c:	2340      	movs	r3, #64	@ 0x40
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf82:	e1d8      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf84:	2380      	movs	r3, #128	@ 0x80
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e1d4      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a4f      	ldr	r2, [pc, #316]	@ (800d0d0 <UART_SetConfig+0x340>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d130      	bne.n	800cff8 <UART_SetConfig+0x268>
 800cf96:	4b4c      	ldr	r3, [pc, #304]	@ (800d0c8 <UART_SetConfig+0x338>)
 800cf98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf9a:	f003 0307 	and.w	r3, r3, #7
 800cf9e:	2b05      	cmp	r3, #5
 800cfa0:	d826      	bhi.n	800cff0 <UART_SetConfig+0x260>
 800cfa2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa8 <UART_SetConfig+0x218>)
 800cfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa8:	0800cfc1 	.word	0x0800cfc1
 800cfac:	0800cfc9 	.word	0x0800cfc9
 800cfb0:	0800cfd1 	.word	0x0800cfd1
 800cfb4:	0800cfd9 	.word	0x0800cfd9
 800cfb8:	0800cfe1 	.word	0x0800cfe1
 800cfbc:	0800cfe9 	.word	0x0800cfe9
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc6:	e1b6      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cfc8:	2304      	movs	r3, #4
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfce:	e1b2      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfd6:	e1ae      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cfd8:	2310      	movs	r3, #16
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfde:	e1aa      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfe6:	e1a6      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cfe8:	2340      	movs	r3, #64	@ 0x40
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfee:	e1a2      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cff0:	2380      	movs	r3, #128	@ 0x80
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff6:	e19e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a35      	ldr	r2, [pc, #212]	@ (800d0d4 <UART_SetConfig+0x344>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d130      	bne.n	800d064 <UART_SetConfig+0x2d4>
 800d002:	4b31      	ldr	r3, [pc, #196]	@ (800d0c8 <UART_SetConfig+0x338>)
 800d004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d006:	f003 0307 	and.w	r3, r3, #7
 800d00a:	2b05      	cmp	r3, #5
 800d00c:	d826      	bhi.n	800d05c <UART_SetConfig+0x2cc>
 800d00e:	a201      	add	r2, pc, #4	@ (adr r2, 800d014 <UART_SetConfig+0x284>)
 800d010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d014:	0800d02d 	.word	0x0800d02d
 800d018:	0800d035 	.word	0x0800d035
 800d01c:	0800d03d 	.word	0x0800d03d
 800d020:	0800d045 	.word	0x0800d045
 800d024:	0800d04d 	.word	0x0800d04d
 800d028:	0800d055 	.word	0x0800d055
 800d02c:	2300      	movs	r3, #0
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e180      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d034:	2304      	movs	r3, #4
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03a:	e17c      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d03c:	2308      	movs	r3, #8
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d042:	e178      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d044:	2310      	movs	r3, #16
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04a:	e174      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d04c:	2320      	movs	r3, #32
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d052:	e170      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d054:	2340      	movs	r3, #64	@ 0x40
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05a:	e16c      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d05c:	2380      	movs	r3, #128	@ 0x80
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d062:	e168      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a1b      	ldr	r2, [pc, #108]	@ (800d0d8 <UART_SetConfig+0x348>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d142      	bne.n	800d0f4 <UART_SetConfig+0x364>
 800d06e:	4b16      	ldr	r3, [pc, #88]	@ (800d0c8 <UART_SetConfig+0x338>)
 800d070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	2b05      	cmp	r3, #5
 800d078:	d838      	bhi.n	800d0ec <UART_SetConfig+0x35c>
 800d07a:	a201      	add	r2, pc, #4	@ (adr r2, 800d080 <UART_SetConfig+0x2f0>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d099 	.word	0x0800d099
 800d084:	0800d0a1 	.word	0x0800d0a1
 800d088:	0800d0a9 	.word	0x0800d0a9
 800d08c:	0800d0b1 	.word	0x0800d0b1
 800d090:	0800d0dd 	.word	0x0800d0dd
 800d094:	0800d0e5 	.word	0x0800d0e5
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e14a      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0a0:	2304      	movs	r3, #4
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e146      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0a8:	2308      	movs	r3, #8
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	e142      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0b0:	2310      	movs	r3, #16
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	e13e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0b8:	cfff69f3 	.word	0xcfff69f3
 800d0bc:	58000c00 	.word	0x58000c00
 800d0c0:	11fff4ff 	.word	0x11fff4ff
 800d0c4:	40011000 	.word	0x40011000
 800d0c8:	58024400 	.word	0x58024400
 800d0cc:	40004400 	.word	0x40004400
 800d0d0:	40004800 	.word	0x40004800
 800d0d4:	40004c00 	.word	0x40004c00
 800d0d8:	40005000 	.word	0x40005000
 800d0dc:	2320      	movs	r3, #32
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e128      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0e4:	2340      	movs	r3, #64	@ 0x40
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e124      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0ec:	2380      	movs	r3, #128	@ 0x80
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e120      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4acb      	ldr	r2, [pc, #812]	@ (800d428 <UART_SetConfig+0x698>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d176      	bne.n	800d1ec <UART_SetConfig+0x45c>
 800d0fe:	4bcb      	ldr	r3, [pc, #812]	@ (800d42c <UART_SetConfig+0x69c>)
 800d100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d106:	2b28      	cmp	r3, #40	@ 0x28
 800d108:	d86c      	bhi.n	800d1e4 <UART_SetConfig+0x454>
 800d10a:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <UART_SetConfig+0x380>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d1b5 	.word	0x0800d1b5
 800d114:	0800d1e5 	.word	0x0800d1e5
 800d118:	0800d1e5 	.word	0x0800d1e5
 800d11c:	0800d1e5 	.word	0x0800d1e5
 800d120:	0800d1e5 	.word	0x0800d1e5
 800d124:	0800d1e5 	.word	0x0800d1e5
 800d128:	0800d1e5 	.word	0x0800d1e5
 800d12c:	0800d1e5 	.word	0x0800d1e5
 800d130:	0800d1bd 	.word	0x0800d1bd
 800d134:	0800d1e5 	.word	0x0800d1e5
 800d138:	0800d1e5 	.word	0x0800d1e5
 800d13c:	0800d1e5 	.word	0x0800d1e5
 800d140:	0800d1e5 	.word	0x0800d1e5
 800d144:	0800d1e5 	.word	0x0800d1e5
 800d148:	0800d1e5 	.word	0x0800d1e5
 800d14c:	0800d1e5 	.word	0x0800d1e5
 800d150:	0800d1c5 	.word	0x0800d1c5
 800d154:	0800d1e5 	.word	0x0800d1e5
 800d158:	0800d1e5 	.word	0x0800d1e5
 800d15c:	0800d1e5 	.word	0x0800d1e5
 800d160:	0800d1e5 	.word	0x0800d1e5
 800d164:	0800d1e5 	.word	0x0800d1e5
 800d168:	0800d1e5 	.word	0x0800d1e5
 800d16c:	0800d1e5 	.word	0x0800d1e5
 800d170:	0800d1cd 	.word	0x0800d1cd
 800d174:	0800d1e5 	.word	0x0800d1e5
 800d178:	0800d1e5 	.word	0x0800d1e5
 800d17c:	0800d1e5 	.word	0x0800d1e5
 800d180:	0800d1e5 	.word	0x0800d1e5
 800d184:	0800d1e5 	.word	0x0800d1e5
 800d188:	0800d1e5 	.word	0x0800d1e5
 800d18c:	0800d1e5 	.word	0x0800d1e5
 800d190:	0800d1d5 	.word	0x0800d1d5
 800d194:	0800d1e5 	.word	0x0800d1e5
 800d198:	0800d1e5 	.word	0x0800d1e5
 800d19c:	0800d1e5 	.word	0x0800d1e5
 800d1a0:	0800d1e5 	.word	0x0800d1e5
 800d1a4:	0800d1e5 	.word	0x0800d1e5
 800d1a8:	0800d1e5 	.word	0x0800d1e5
 800d1ac:	0800d1e5 	.word	0x0800d1e5
 800d1b0:	0800d1dd 	.word	0x0800d1dd
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	e0bc      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1bc:	2304      	movs	r3, #4
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c2:	e0b8      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1c4:	2308      	movs	r3, #8
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ca:	e0b4      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1cc:	2310      	movs	r3, #16
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d2:	e0b0      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1d4:	2320      	movs	r3, #32
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1da:	e0ac      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1dc:	2340      	movs	r3, #64	@ 0x40
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e2:	e0a8      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ea:	e0a4      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a8f      	ldr	r2, [pc, #572]	@ (800d430 <UART_SetConfig+0x6a0>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d130      	bne.n	800d258 <UART_SetConfig+0x4c8>
 800d1f6:	4b8d      	ldr	r3, [pc, #564]	@ (800d42c <UART_SetConfig+0x69c>)
 800d1f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1fa:	f003 0307 	and.w	r3, r3, #7
 800d1fe:	2b05      	cmp	r3, #5
 800d200:	d826      	bhi.n	800d250 <UART_SetConfig+0x4c0>
 800d202:	a201      	add	r2, pc, #4	@ (adr r2, 800d208 <UART_SetConfig+0x478>)
 800d204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d208:	0800d221 	.word	0x0800d221
 800d20c:	0800d229 	.word	0x0800d229
 800d210:	0800d231 	.word	0x0800d231
 800d214:	0800d239 	.word	0x0800d239
 800d218:	0800d241 	.word	0x0800d241
 800d21c:	0800d249 	.word	0x0800d249
 800d220:	2300      	movs	r3, #0
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e086      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d228:	2304      	movs	r3, #4
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22e:	e082      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d230:	2308      	movs	r3, #8
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d236:	e07e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d238:	2310      	movs	r3, #16
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d23e:	e07a      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d240:	2320      	movs	r3, #32
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d246:	e076      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d248:	2340      	movs	r3, #64	@ 0x40
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24e:	e072      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d250:	2380      	movs	r3, #128	@ 0x80
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d256:	e06e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a75      	ldr	r2, [pc, #468]	@ (800d434 <UART_SetConfig+0x6a4>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d130      	bne.n	800d2c4 <UART_SetConfig+0x534>
 800d262:	4b72      	ldr	r3, [pc, #456]	@ (800d42c <UART_SetConfig+0x69c>)
 800d264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d266:	f003 0307 	and.w	r3, r3, #7
 800d26a:	2b05      	cmp	r3, #5
 800d26c:	d826      	bhi.n	800d2bc <UART_SetConfig+0x52c>
 800d26e:	a201      	add	r2, pc, #4	@ (adr r2, 800d274 <UART_SetConfig+0x4e4>)
 800d270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d274:	0800d28d 	.word	0x0800d28d
 800d278:	0800d295 	.word	0x0800d295
 800d27c:	0800d29d 	.word	0x0800d29d
 800d280:	0800d2a5 	.word	0x0800d2a5
 800d284:	0800d2ad 	.word	0x0800d2ad
 800d288:	0800d2b5 	.word	0x0800d2b5
 800d28c:	2300      	movs	r3, #0
 800d28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d292:	e050      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d294:	2304      	movs	r3, #4
 800d296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d29a:	e04c      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d29c:	2308      	movs	r3, #8
 800d29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2a2:	e048      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2aa:	e044      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d2ac:	2320      	movs	r3, #32
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2b2:	e040      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d2b4:	2340      	movs	r3, #64	@ 0x40
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ba:	e03c      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d2bc:	2380      	movs	r3, #128	@ 0x80
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e038      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a5b      	ldr	r2, [pc, #364]	@ (800d438 <UART_SetConfig+0x6a8>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d130      	bne.n	800d330 <UART_SetConfig+0x5a0>
 800d2ce:	4b57      	ldr	r3, [pc, #348]	@ (800d42c <UART_SetConfig+0x69c>)
 800d2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d2:	f003 0307 	and.w	r3, r3, #7
 800d2d6:	2b05      	cmp	r3, #5
 800d2d8:	d826      	bhi.n	800d328 <UART_SetConfig+0x598>
 800d2da:	a201      	add	r2, pc, #4	@ (adr r2, 800d2e0 <UART_SetConfig+0x550>)
 800d2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e0:	0800d2f9 	.word	0x0800d2f9
 800d2e4:	0800d301 	.word	0x0800d301
 800d2e8:	0800d309 	.word	0x0800d309
 800d2ec:	0800d311 	.word	0x0800d311
 800d2f0:	0800d319 	.word	0x0800d319
 800d2f4:	0800d321 	.word	0x0800d321
 800d2f8:	2302      	movs	r3, #2
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fe:	e01a      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d300:	2304      	movs	r3, #4
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d306:	e016      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d308:	2308      	movs	r3, #8
 800d30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d30e:	e012      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d310:	2310      	movs	r3, #16
 800d312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d316:	e00e      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d318:	2320      	movs	r3, #32
 800d31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d31e:	e00a      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d320:	2340      	movs	r3, #64	@ 0x40
 800d322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d326:	e006      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d328:	2380      	movs	r3, #128	@ 0x80
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32e:	e002      	b.n	800d336 <UART_SetConfig+0x5a6>
 800d330:	2380      	movs	r3, #128	@ 0x80
 800d332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a3f      	ldr	r2, [pc, #252]	@ (800d438 <UART_SetConfig+0x6a8>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	f040 80f8 	bne.w	800d532 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d342:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d346:	2b20      	cmp	r3, #32
 800d348:	dc46      	bgt.n	800d3d8 <UART_SetConfig+0x648>
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	f2c0 8082 	blt.w	800d454 <UART_SetConfig+0x6c4>
 800d350:	3b02      	subs	r3, #2
 800d352:	2b1e      	cmp	r3, #30
 800d354:	d87e      	bhi.n	800d454 <UART_SetConfig+0x6c4>
 800d356:	a201      	add	r2, pc, #4	@ (adr r2, 800d35c <UART_SetConfig+0x5cc>)
 800d358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35c:	0800d3df 	.word	0x0800d3df
 800d360:	0800d455 	.word	0x0800d455
 800d364:	0800d3e7 	.word	0x0800d3e7
 800d368:	0800d455 	.word	0x0800d455
 800d36c:	0800d455 	.word	0x0800d455
 800d370:	0800d455 	.word	0x0800d455
 800d374:	0800d3f7 	.word	0x0800d3f7
 800d378:	0800d455 	.word	0x0800d455
 800d37c:	0800d455 	.word	0x0800d455
 800d380:	0800d455 	.word	0x0800d455
 800d384:	0800d455 	.word	0x0800d455
 800d388:	0800d455 	.word	0x0800d455
 800d38c:	0800d455 	.word	0x0800d455
 800d390:	0800d455 	.word	0x0800d455
 800d394:	0800d407 	.word	0x0800d407
 800d398:	0800d455 	.word	0x0800d455
 800d39c:	0800d455 	.word	0x0800d455
 800d3a0:	0800d455 	.word	0x0800d455
 800d3a4:	0800d455 	.word	0x0800d455
 800d3a8:	0800d455 	.word	0x0800d455
 800d3ac:	0800d455 	.word	0x0800d455
 800d3b0:	0800d455 	.word	0x0800d455
 800d3b4:	0800d455 	.word	0x0800d455
 800d3b8:	0800d455 	.word	0x0800d455
 800d3bc:	0800d455 	.word	0x0800d455
 800d3c0:	0800d455 	.word	0x0800d455
 800d3c4:	0800d455 	.word	0x0800d455
 800d3c8:	0800d455 	.word	0x0800d455
 800d3cc:	0800d455 	.word	0x0800d455
 800d3d0:	0800d455 	.word	0x0800d455
 800d3d4:	0800d447 	.word	0x0800d447
 800d3d8:	2b40      	cmp	r3, #64	@ 0x40
 800d3da:	d037      	beq.n	800d44c <UART_SetConfig+0x6bc>
 800d3dc:	e03a      	b.n	800d454 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d3de:	f7fd fe35 	bl	800b04c <HAL_RCCEx_GetD3PCLK1Freq>
 800d3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3e4:	e03c      	b.n	800d460 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fd fe44 	bl	800b078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f4:	e034      	b.n	800d460 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3f6:	f107 0318 	add.w	r3, r7, #24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fd ff90 	bl	800b320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d404:	e02c      	b.n	800d460 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d406:	4b09      	ldr	r3, [pc, #36]	@ (800d42c <UART_SetConfig+0x69c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 0320 	and.w	r3, r3, #32
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d016      	beq.n	800d440 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d412:	4b06      	ldr	r3, [pc, #24]	@ (800d42c <UART_SetConfig+0x69c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	08db      	lsrs	r3, r3, #3
 800d418:	f003 0303 	and.w	r3, r3, #3
 800d41c:	4a07      	ldr	r2, [pc, #28]	@ (800d43c <UART_SetConfig+0x6ac>)
 800d41e:	fa22 f303 	lsr.w	r3, r2, r3
 800d422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d424:	e01c      	b.n	800d460 <UART_SetConfig+0x6d0>
 800d426:	bf00      	nop
 800d428:	40011400 	.word	0x40011400
 800d42c:	58024400 	.word	0x58024400
 800d430:	40007800 	.word	0x40007800
 800d434:	40007c00 	.word	0x40007c00
 800d438:	58000c00 	.word	0x58000c00
 800d43c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d440:	4b9d      	ldr	r3, [pc, #628]	@ (800d6b8 <UART_SetConfig+0x928>)
 800d442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d444:	e00c      	b.n	800d460 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d446:	4b9d      	ldr	r3, [pc, #628]	@ (800d6bc <UART_SetConfig+0x92c>)
 800d448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d44a:	e009      	b.n	800d460 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d44c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d452:	e005      	b.n	800d460 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d454:	2300      	movs	r3, #0
 800d456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d45e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 81de 	beq.w	800d824 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d46c:	4a94      	ldr	r2, [pc, #592]	@ (800d6c0 <UART_SetConfig+0x930>)
 800d46e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d472:	461a      	mov	r2, r3
 800d474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d476:	fbb3 f3f2 	udiv	r3, r3, r2
 800d47a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	685a      	ldr	r2, [r3, #4]
 800d480:	4613      	mov	r3, r2
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	4413      	add	r3, r2
 800d486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d488:	429a      	cmp	r2, r3
 800d48a:	d305      	bcc.n	800d498 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d494:	429a      	cmp	r2, r3
 800d496:	d903      	bls.n	800d4a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d49e:	e1c1      	b.n	800d824 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	60bb      	str	r3, [r7, #8]
 800d4a6:	60fa      	str	r2, [r7, #12]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ac:	4a84      	ldr	r2, [pc, #528]	@ (800d6c0 <UART_SetConfig+0x930>)
 800d4ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4c2:	f7f2 ff65 	bl	8000390 <__aeabi_uldivmod>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	f04f 0200 	mov.w	r2, #0
 800d4d2:	f04f 0300 	mov.w	r3, #0
 800d4d6:	020b      	lsls	r3, r1, #8
 800d4d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4dc:	0202      	lsls	r2, r0, #8
 800d4de:	6979      	ldr	r1, [r7, #20]
 800d4e0:	6849      	ldr	r1, [r1, #4]
 800d4e2:	0849      	lsrs	r1, r1, #1
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	eb12 0804 	adds.w	r8, r2, r4
 800d4ee:	eb43 0905 	adc.w	r9, r3, r5
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	469a      	mov	sl, r3
 800d4fa:	4693      	mov	fp, r2
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	465b      	mov	r3, fp
 800d500:	4640      	mov	r0, r8
 800d502:	4649      	mov	r1, r9
 800d504:	f7f2 ff44 	bl	8000390 <__aeabi_uldivmod>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4613      	mov	r3, r2
 800d50e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d516:	d308      	bcc.n	800d52a <UART_SetConfig+0x79a>
 800d518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d51a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d51e:	d204      	bcs.n	800d52a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d526:	60da      	str	r2, [r3, #12]
 800d528:	e17c      	b.n	800d824 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d530:	e178      	b.n	800d824 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d53a:	f040 80c5 	bne.w	800d6c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d53e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d542:	2b20      	cmp	r3, #32
 800d544:	dc48      	bgt.n	800d5d8 <UART_SetConfig+0x848>
 800d546:	2b00      	cmp	r3, #0
 800d548:	db7b      	blt.n	800d642 <UART_SetConfig+0x8b2>
 800d54a:	2b20      	cmp	r3, #32
 800d54c:	d879      	bhi.n	800d642 <UART_SetConfig+0x8b2>
 800d54e:	a201      	add	r2, pc, #4	@ (adr r2, 800d554 <UART_SetConfig+0x7c4>)
 800d550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d554:	0800d5df 	.word	0x0800d5df
 800d558:	0800d5e7 	.word	0x0800d5e7
 800d55c:	0800d643 	.word	0x0800d643
 800d560:	0800d643 	.word	0x0800d643
 800d564:	0800d5ef 	.word	0x0800d5ef
 800d568:	0800d643 	.word	0x0800d643
 800d56c:	0800d643 	.word	0x0800d643
 800d570:	0800d643 	.word	0x0800d643
 800d574:	0800d5ff 	.word	0x0800d5ff
 800d578:	0800d643 	.word	0x0800d643
 800d57c:	0800d643 	.word	0x0800d643
 800d580:	0800d643 	.word	0x0800d643
 800d584:	0800d643 	.word	0x0800d643
 800d588:	0800d643 	.word	0x0800d643
 800d58c:	0800d643 	.word	0x0800d643
 800d590:	0800d643 	.word	0x0800d643
 800d594:	0800d60f 	.word	0x0800d60f
 800d598:	0800d643 	.word	0x0800d643
 800d59c:	0800d643 	.word	0x0800d643
 800d5a0:	0800d643 	.word	0x0800d643
 800d5a4:	0800d643 	.word	0x0800d643
 800d5a8:	0800d643 	.word	0x0800d643
 800d5ac:	0800d643 	.word	0x0800d643
 800d5b0:	0800d643 	.word	0x0800d643
 800d5b4:	0800d643 	.word	0x0800d643
 800d5b8:	0800d643 	.word	0x0800d643
 800d5bc:	0800d643 	.word	0x0800d643
 800d5c0:	0800d643 	.word	0x0800d643
 800d5c4:	0800d643 	.word	0x0800d643
 800d5c8:	0800d643 	.word	0x0800d643
 800d5cc:	0800d643 	.word	0x0800d643
 800d5d0:	0800d643 	.word	0x0800d643
 800d5d4:	0800d635 	.word	0x0800d635
 800d5d8:	2b40      	cmp	r3, #64	@ 0x40
 800d5da:	d02e      	beq.n	800d63a <UART_SetConfig+0x8aa>
 800d5dc:	e031      	b.n	800d642 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5de:	f7fc faff 	bl	8009be0 <HAL_RCC_GetPCLK1Freq>
 800d5e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5e4:	e033      	b.n	800d64e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5e6:	f7fc fb11 	bl	8009c0c <HAL_RCC_GetPCLK2Freq>
 800d5ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5ec:	e02f      	b.n	800d64e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fd fd40 	bl	800b078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5fc:	e027      	b.n	800d64e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5fe:	f107 0318 	add.w	r3, r7, #24
 800d602:	4618      	mov	r0, r3
 800d604:	f7fd fe8c 	bl	800b320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d60c:	e01f      	b.n	800d64e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d60e:	4b2d      	ldr	r3, [pc, #180]	@ (800d6c4 <UART_SetConfig+0x934>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f003 0320 	and.w	r3, r3, #32
 800d616:	2b00      	cmp	r3, #0
 800d618:	d009      	beq.n	800d62e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d61a:	4b2a      	ldr	r3, [pc, #168]	@ (800d6c4 <UART_SetConfig+0x934>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	08db      	lsrs	r3, r3, #3
 800d620:	f003 0303 	and.w	r3, r3, #3
 800d624:	4a24      	ldr	r2, [pc, #144]	@ (800d6b8 <UART_SetConfig+0x928>)
 800d626:	fa22 f303 	lsr.w	r3, r2, r3
 800d62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d62c:	e00f      	b.n	800d64e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d62e:	4b22      	ldr	r3, [pc, #136]	@ (800d6b8 <UART_SetConfig+0x928>)
 800d630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d632:	e00c      	b.n	800d64e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d634:	4b21      	ldr	r3, [pc, #132]	@ (800d6bc <UART_SetConfig+0x92c>)
 800d636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d638:	e009      	b.n	800d64e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d63a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d640:	e005      	b.n	800d64e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d642:	2300      	movs	r3, #0
 800d644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d64c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 80e7 	beq.w	800d824 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d65a:	4a19      	ldr	r2, [pc, #100]	@ (800d6c0 <UART_SetConfig+0x930>)
 800d65c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d660:	461a      	mov	r2, r3
 800d662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d664:	fbb3 f3f2 	udiv	r3, r3, r2
 800d668:	005a      	lsls	r2, r3, #1
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	085b      	lsrs	r3, r3, #1
 800d670:	441a      	add	r2, r3
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	fbb2 f3f3 	udiv	r3, r2, r3
 800d67a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67e:	2b0f      	cmp	r3, #15
 800d680:	d916      	bls.n	800d6b0 <UART_SetConfig+0x920>
 800d682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d688:	d212      	bcs.n	800d6b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	f023 030f 	bic.w	r3, r3, #15
 800d692:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d696:	085b      	lsrs	r3, r3, #1
 800d698:	b29b      	uxth	r3, r3
 800d69a:	f003 0307 	and.w	r3, r3, #7
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d6ac:	60da      	str	r2, [r3, #12]
 800d6ae:	e0b9      	b.n	800d824 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6b6:	e0b5      	b.n	800d824 <UART_SetConfig+0xa94>
 800d6b8:	03d09000 	.word	0x03d09000
 800d6bc:	003d0900 	.word	0x003d0900
 800d6c0:	08012d50 	.word	0x08012d50
 800d6c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6cc:	2b20      	cmp	r3, #32
 800d6ce:	dc49      	bgt.n	800d764 <UART_SetConfig+0x9d4>
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	db7c      	blt.n	800d7ce <UART_SetConfig+0xa3e>
 800d6d4:	2b20      	cmp	r3, #32
 800d6d6:	d87a      	bhi.n	800d7ce <UART_SetConfig+0xa3e>
 800d6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <UART_SetConfig+0x950>)
 800d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6de:	bf00      	nop
 800d6e0:	0800d76b 	.word	0x0800d76b
 800d6e4:	0800d773 	.word	0x0800d773
 800d6e8:	0800d7cf 	.word	0x0800d7cf
 800d6ec:	0800d7cf 	.word	0x0800d7cf
 800d6f0:	0800d77b 	.word	0x0800d77b
 800d6f4:	0800d7cf 	.word	0x0800d7cf
 800d6f8:	0800d7cf 	.word	0x0800d7cf
 800d6fc:	0800d7cf 	.word	0x0800d7cf
 800d700:	0800d78b 	.word	0x0800d78b
 800d704:	0800d7cf 	.word	0x0800d7cf
 800d708:	0800d7cf 	.word	0x0800d7cf
 800d70c:	0800d7cf 	.word	0x0800d7cf
 800d710:	0800d7cf 	.word	0x0800d7cf
 800d714:	0800d7cf 	.word	0x0800d7cf
 800d718:	0800d7cf 	.word	0x0800d7cf
 800d71c:	0800d7cf 	.word	0x0800d7cf
 800d720:	0800d79b 	.word	0x0800d79b
 800d724:	0800d7cf 	.word	0x0800d7cf
 800d728:	0800d7cf 	.word	0x0800d7cf
 800d72c:	0800d7cf 	.word	0x0800d7cf
 800d730:	0800d7cf 	.word	0x0800d7cf
 800d734:	0800d7cf 	.word	0x0800d7cf
 800d738:	0800d7cf 	.word	0x0800d7cf
 800d73c:	0800d7cf 	.word	0x0800d7cf
 800d740:	0800d7cf 	.word	0x0800d7cf
 800d744:	0800d7cf 	.word	0x0800d7cf
 800d748:	0800d7cf 	.word	0x0800d7cf
 800d74c:	0800d7cf 	.word	0x0800d7cf
 800d750:	0800d7cf 	.word	0x0800d7cf
 800d754:	0800d7cf 	.word	0x0800d7cf
 800d758:	0800d7cf 	.word	0x0800d7cf
 800d75c:	0800d7cf 	.word	0x0800d7cf
 800d760:	0800d7c1 	.word	0x0800d7c1
 800d764:	2b40      	cmp	r3, #64	@ 0x40
 800d766:	d02e      	beq.n	800d7c6 <UART_SetConfig+0xa36>
 800d768:	e031      	b.n	800d7ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d76a:	f7fc fa39 	bl	8009be0 <HAL_RCC_GetPCLK1Freq>
 800d76e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d770:	e033      	b.n	800d7da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d772:	f7fc fa4b 	bl	8009c0c <HAL_RCC_GetPCLK2Freq>
 800d776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d778:	e02f      	b.n	800d7da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d77a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fd fc7a 	bl	800b078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d788:	e027      	b.n	800d7da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d78a:	f107 0318 	add.w	r3, r7, #24
 800d78e:	4618      	mov	r0, r3
 800d790:	f7fd fdc6 	bl	800b320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d798:	e01f      	b.n	800d7da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d79a:	4b2d      	ldr	r3, [pc, #180]	@ (800d850 <UART_SetConfig+0xac0>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0320 	and.w	r3, r3, #32
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d009      	beq.n	800d7ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800d850 <UART_SetConfig+0xac0>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	08db      	lsrs	r3, r3, #3
 800d7ac:	f003 0303 	and.w	r3, r3, #3
 800d7b0:	4a28      	ldr	r2, [pc, #160]	@ (800d854 <UART_SetConfig+0xac4>)
 800d7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7b8:	e00f      	b.n	800d7da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d7ba:	4b26      	ldr	r3, [pc, #152]	@ (800d854 <UART_SetConfig+0xac4>)
 800d7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7be:	e00c      	b.n	800d7da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7c0:	4b25      	ldr	r3, [pc, #148]	@ (800d858 <UART_SetConfig+0xac8>)
 800d7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c4:	e009      	b.n	800d7da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7cc:	e005      	b.n	800d7da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7d8:	bf00      	nop
    }

    if (pclk != 0U)
 800d7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d021      	beq.n	800d824 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e4:	4a1d      	ldr	r2, [pc, #116]	@ (800d85c <UART_SetConfig+0xacc>)
 800d7e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	085b      	lsrs	r3, r3, #1
 800d7f8:	441a      	add	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d802:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d806:	2b0f      	cmp	r3, #15
 800d808:	d909      	bls.n	800d81e <UART_SetConfig+0xa8e>
 800d80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d810:	d205      	bcs.n	800d81e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d814:	b29a      	uxth	r2, r3
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	60da      	str	r2, [r3, #12]
 800d81c:	e002      	b.n	800d824 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	2201      	movs	r2, #1
 800d828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	2201      	movs	r2, #1
 800d830:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2200      	movs	r2, #0
 800d838:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2200      	movs	r2, #0
 800d83e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d840:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d844:	4618      	mov	r0, r3
 800d846:	3748      	adds	r7, #72	@ 0x48
 800d848:	46bd      	mov	sp, r7
 800d84a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d84e:	bf00      	nop
 800d850:	58024400 	.word	0x58024400
 800d854:	03d09000 	.word	0x03d09000
 800d858:	003d0900 	.word	0x003d0900
 800d85c:	08012d50 	.word	0x08012d50

0800d860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86c:	f003 0308 	and.w	r3, r3, #8
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00a      	beq.n	800d88a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	430a      	orrs	r2, r1
 800d888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00a      	beq.n	800d8ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b0:	f003 0302 	and.w	r3, r3, #2
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d2:	f003 0304 	and.w	r3, r3, #4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f4:	f003 0310 	and.w	r3, r3, #16
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	430a      	orrs	r2, r1
 800d910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00a      	beq.n	800d934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	430a      	orrs	r2, r1
 800d932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d01a      	beq.n	800d976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	430a      	orrs	r2, r1
 800d954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d95a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d95e:	d10a      	bne.n	800d976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	430a      	orrs	r2, r1
 800d974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d97a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00a      	beq.n	800d998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	430a      	orrs	r2, r1
 800d996:	605a      	str	r2, [r3, #4]
  }
}
 800d998:	bf00      	nop
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b098      	sub	sp, #96	@ 0x60
 800d9a8:	af02      	add	r7, sp, #8
 800d9aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9b4:	f7f4 fbb2 	bl	800211c <HAL_GetTick>
 800d9b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 0308 	and.w	r3, r3, #8
 800d9c4:	2b08      	cmp	r3, #8
 800d9c6:	d12f      	bne.n	800da28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f88e 	bl	800daf8 <UART_WaitOnFlagUntilTimeout>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d022      	beq.n	800da28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ea:	e853 3f00 	ldrex	r3, [r3]
 800d9ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da00:	647b      	str	r3, [r7, #68]	@ 0x44
 800da02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da08:	e841 2300 	strex	r3, r2, [r1]
 800da0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1e6      	bne.n	800d9e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2220      	movs	r2, #32
 800da18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da24:	2303      	movs	r3, #3
 800da26:	e063      	b.n	800daf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f003 0304 	and.w	r3, r3, #4
 800da32:	2b04      	cmp	r3, #4
 800da34:	d149      	bne.n	800daca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da3e:	2200      	movs	r2, #0
 800da40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 f857 	bl	800daf8 <UART_WaitOnFlagUntilTimeout>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d03c      	beq.n	800daca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	e853 3f00 	ldrex	r3, [r3]
 800da5c:	623b      	str	r3, [r7, #32]
   return(result);
 800da5e:	6a3b      	ldr	r3, [r7, #32]
 800da60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	461a      	mov	r2, r3
 800da6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800da70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da76:	e841 2300 	strex	r3, r2, [r1]
 800da7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d1e6      	bne.n	800da50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	3308      	adds	r3, #8
 800da88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	e853 3f00 	ldrex	r3, [r3]
 800da90:	60fb      	str	r3, [r7, #12]
   return(result);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f023 0301 	bic.w	r3, r3, #1
 800da98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3308      	adds	r3, #8
 800daa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800daa2:	61fa      	str	r2, [r7, #28]
 800daa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa6:	69b9      	ldr	r1, [r7, #24]
 800daa8:	69fa      	ldr	r2, [r7, #28]
 800daaa:	e841 2300 	strex	r3, r2, [r1]
 800daae:	617b      	str	r3, [r7, #20]
   return(result);
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1e5      	bne.n	800da82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2220      	movs	r2, #32
 800daba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dac6:	2303      	movs	r3, #3
 800dac8:	e012      	b.n	800daf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2220      	movs	r2, #32
 800dace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3758      	adds	r7, #88	@ 0x58
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	603b      	str	r3, [r7, #0]
 800db04:	4613      	mov	r3, r2
 800db06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db08:	e04f      	b.n	800dbaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db10:	d04b      	beq.n	800dbaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db12:	f7f4 fb03 	bl	800211c <HAL_GetTick>
 800db16:	4602      	mov	r2, r0
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	69ba      	ldr	r2, [r7, #24]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d302      	bcc.n	800db28 <UART_WaitOnFlagUntilTimeout+0x30>
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e04e      	b.n	800dbca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f003 0304 	and.w	r3, r3, #4
 800db36:	2b00      	cmp	r3, #0
 800db38:	d037      	beq.n	800dbaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2b80      	cmp	r3, #128	@ 0x80
 800db3e:	d034      	beq.n	800dbaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b40      	cmp	r3, #64	@ 0x40
 800db44:	d031      	beq.n	800dbaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	69db      	ldr	r3, [r3, #28]
 800db4c:	f003 0308 	and.w	r3, r3, #8
 800db50:	2b08      	cmp	r3, #8
 800db52:	d110      	bne.n	800db76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2208      	movs	r2, #8
 800db5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 f839 	bl	800dbd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2208      	movs	r2, #8
 800db66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	e029      	b.n	800dbca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	69db      	ldr	r3, [r3, #28]
 800db7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db84:	d111      	bne.n	800dbaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 f81f 	bl	800dbd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2220      	movs	r2, #32
 800db9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dba6:	2303      	movs	r3, #3
 800dba8:	e00f      	b.n	800dbca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69da      	ldr	r2, [r3, #28]
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	bf0c      	ite	eq
 800dbba:	2301      	moveq	r3, #1
 800dbbc:	2300      	movne	r3, #0
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	79fb      	ldrb	r3, [r7, #7]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d0a0      	beq.n	800db0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
	...

0800dbd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b095      	sub	sp, #84	@ 0x54
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe4:	e853 3f00 	ldrex	r3, [r3]
 800dbe8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc02:	e841 2300 	strex	r3, r2, [r1]
 800dc06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d1e6      	bne.n	800dbdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	3308      	adds	r3, #8
 800dc14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	e853 3f00 	ldrex	r3, [r3]
 800dc1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc1e:	69fa      	ldr	r2, [r7, #28]
 800dc20:	4b1e      	ldr	r3, [pc, #120]	@ (800dc9c <UART_EndRxTransfer+0xc8>)
 800dc22:	4013      	ands	r3, r2
 800dc24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e5      	bne.n	800dc0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d118      	bne.n	800dc7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	e853 3f00 	ldrex	r3, [r3]
 800dc56:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f023 0310 	bic.w	r3, r3, #16
 800dc5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc68:	61bb      	str	r3, [r7, #24]
 800dc6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6c:	6979      	ldr	r1, [r7, #20]
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	e841 2300 	strex	r3, r2, [r1]
 800dc74:	613b      	str	r3, [r7, #16]
   return(result);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1e6      	bne.n	800dc4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2220      	movs	r2, #32
 800dc80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc90:	bf00      	nop
 800dc92:	3754      	adds	r7, #84	@ 0x54
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	effffffe 	.word	0xeffffffe

0800dca0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d101      	bne.n	800dcb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	e027      	b.n	800dd06 <HAL_UARTEx_DisableFifoMode+0x66>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2224      	movs	r2, #36	@ 0x24
 800dcc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f022 0201 	bic.w	r2, r2, #1
 800dcdc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dce4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2220      	movs	r2, #32
 800dcf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d101      	bne.n	800dd2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd26:	2302      	movs	r3, #2
 800dd28:	e02d      	b.n	800dd86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2224      	movs	r2, #36	@ 0x24
 800dd36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f022 0201 	bic.w	r2, r2, #1
 800dd50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	430a      	orrs	r2, r1
 800dd64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f850 	bl	800de0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2220      	movs	r2, #32
 800dd78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
 800dd96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d101      	bne.n	800dda6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dda2:	2302      	movs	r3, #2
 800dda4:	e02d      	b.n	800de02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2201      	movs	r2, #1
 800ddaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2224      	movs	r2, #36	@ 0x24
 800ddb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f022 0201 	bic.w	r2, r2, #1
 800ddcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	430a      	orrs	r2, r1
 800dde0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 f812 	bl	800de0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2220      	movs	r2, #32
 800ddf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d108      	bne.n	800de2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de2c:	e031      	b.n	800de92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de2e:	2310      	movs	r3, #16
 800de30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de32:	2310      	movs	r3, #16
 800de34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	0e5b      	lsrs	r3, r3, #25
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	f003 0307 	and.w	r3, r3, #7
 800de44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	0f5b      	lsrs	r3, r3, #29
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	f003 0307 	and.w	r3, r3, #7
 800de54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de56:	7bbb      	ldrb	r3, [r7, #14]
 800de58:	7b3a      	ldrb	r2, [r7, #12]
 800de5a:	4911      	ldr	r1, [pc, #68]	@ (800dea0 <UARTEx_SetNbDataToProcess+0x94>)
 800de5c:	5c8a      	ldrb	r2, [r1, r2]
 800de5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de62:	7b3a      	ldrb	r2, [r7, #12]
 800de64:	490f      	ldr	r1, [pc, #60]	@ (800dea4 <UARTEx_SetNbDataToProcess+0x98>)
 800de66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de68:	fb93 f3f2 	sdiv	r3, r3, r2
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	7b7a      	ldrb	r2, [r7, #13]
 800de78:	4909      	ldr	r1, [pc, #36]	@ (800dea0 <UARTEx_SetNbDataToProcess+0x94>)
 800de7a:	5c8a      	ldrb	r2, [r1, r2]
 800de7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de80:	7b7a      	ldrb	r2, [r7, #13]
 800de82:	4908      	ldr	r1, [pc, #32]	@ (800dea4 <UARTEx_SetNbDataToProcess+0x98>)
 800de84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de86:	fb93 f3f2 	sdiv	r3, r3, r2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800de92:	bf00      	nop
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	08012d68 	.word	0x08012d68
 800dea4:	08012d70 	.word	0x08012d70

0800dea8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dea8:	b084      	sub	sp, #16
 800deaa:	b580      	push	{r7, lr}
 800deac:	b084      	sub	sp, #16
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	f107 001c 	add.w	r0, r7, #28
 800deb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800deba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d121      	bne.n	800df06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dec6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68da      	ldr	r2, [r3, #12]
 800ded2:	4b2c      	ldr	r3, [pc, #176]	@ (800df84 <USB_CoreInit+0xdc>)
 800ded4:	4013      	ands	r3, r2
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800deea:	2b01      	cmp	r3, #1
 800deec:	d105      	bne.n	800defa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f001 fafa 	bl	800f4f4 <USB_CoreReset>
 800df00:	4603      	mov	r3, r0
 800df02:	73fb      	strb	r3, [r7, #15]
 800df04:	e01b      	b.n	800df3e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f001 faee 	bl	800f4f4 <USB_CoreReset>
 800df18:	4603      	mov	r3, r0
 800df1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800df1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800df20:	2b00      	cmp	r3, #0
 800df22:	d106      	bne.n	800df32 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	639a      	str	r2, [r3, #56]	@ 0x38
 800df30:	e005      	b.n	800df3e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800df3e:	7fbb      	ldrb	r3, [r7, #30]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d116      	bne.n	800df72 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df52:	4b0d      	ldr	r3, [pc, #52]	@ (800df88 <USB_CoreInit+0xe0>)
 800df54:	4313      	orrs	r3, r2
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	f043 0206 	orr.w	r2, r3, #6
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f043 0220 	orr.w	r2, r3, #32
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800df72:	7bfb      	ldrb	r3, [r7, #15]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df7e:	b004      	add	sp, #16
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	ffbdffbf 	.word	0xffbdffbf
 800df88:	03ee0000 	.word	0x03ee0000

0800df8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	4613      	mov	r3, r2
 800df98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800df9a:	79fb      	ldrb	r3, [r7, #7]
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d165      	bne.n	800e06c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	4a41      	ldr	r2, [pc, #260]	@ (800e0a8 <USB_SetTurnaroundTime+0x11c>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d906      	bls.n	800dfb6 <USB_SetTurnaroundTime+0x2a>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	4a40      	ldr	r2, [pc, #256]	@ (800e0ac <USB_SetTurnaroundTime+0x120>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d202      	bcs.n	800dfb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dfb0:	230f      	movs	r3, #15
 800dfb2:	617b      	str	r3, [r7, #20]
 800dfb4:	e062      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	4a3c      	ldr	r2, [pc, #240]	@ (800e0ac <USB_SetTurnaroundTime+0x120>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d306      	bcc.n	800dfcc <USB_SetTurnaroundTime+0x40>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	4a3b      	ldr	r2, [pc, #236]	@ (800e0b0 <USB_SetTurnaroundTime+0x124>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d202      	bcs.n	800dfcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dfc6:	230e      	movs	r3, #14
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	e057      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4a38      	ldr	r2, [pc, #224]	@ (800e0b0 <USB_SetTurnaroundTime+0x124>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d306      	bcc.n	800dfe2 <USB_SetTurnaroundTime+0x56>
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	4a37      	ldr	r2, [pc, #220]	@ (800e0b4 <USB_SetTurnaroundTime+0x128>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d202      	bcs.n	800dfe2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dfdc:	230d      	movs	r3, #13
 800dfde:	617b      	str	r3, [r7, #20]
 800dfe0:	e04c      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	4a33      	ldr	r2, [pc, #204]	@ (800e0b4 <USB_SetTurnaroundTime+0x128>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d306      	bcc.n	800dff8 <USB_SetTurnaroundTime+0x6c>
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	4a32      	ldr	r2, [pc, #200]	@ (800e0b8 <USB_SetTurnaroundTime+0x12c>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d802      	bhi.n	800dff8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dff2:	230c      	movs	r3, #12
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	e041      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	4a2f      	ldr	r2, [pc, #188]	@ (800e0b8 <USB_SetTurnaroundTime+0x12c>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d906      	bls.n	800e00e <USB_SetTurnaroundTime+0x82>
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	4a2e      	ldr	r2, [pc, #184]	@ (800e0bc <USB_SetTurnaroundTime+0x130>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d802      	bhi.n	800e00e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e008:	230b      	movs	r3, #11
 800e00a:	617b      	str	r3, [r7, #20]
 800e00c:	e036      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	4a2a      	ldr	r2, [pc, #168]	@ (800e0bc <USB_SetTurnaroundTime+0x130>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d906      	bls.n	800e024 <USB_SetTurnaroundTime+0x98>
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	4a29      	ldr	r2, [pc, #164]	@ (800e0c0 <USB_SetTurnaroundTime+0x134>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d802      	bhi.n	800e024 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e01e:	230a      	movs	r3, #10
 800e020:	617b      	str	r3, [r7, #20]
 800e022:	e02b      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	4a26      	ldr	r2, [pc, #152]	@ (800e0c0 <USB_SetTurnaroundTime+0x134>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d906      	bls.n	800e03a <USB_SetTurnaroundTime+0xae>
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4a25      	ldr	r2, [pc, #148]	@ (800e0c4 <USB_SetTurnaroundTime+0x138>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d202      	bcs.n	800e03a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e034:	2309      	movs	r3, #9
 800e036:	617b      	str	r3, [r7, #20]
 800e038:	e020      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	4a21      	ldr	r2, [pc, #132]	@ (800e0c4 <USB_SetTurnaroundTime+0x138>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d306      	bcc.n	800e050 <USB_SetTurnaroundTime+0xc4>
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	4a20      	ldr	r2, [pc, #128]	@ (800e0c8 <USB_SetTurnaroundTime+0x13c>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d802      	bhi.n	800e050 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e04a:	2308      	movs	r3, #8
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	e015      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	4a1d      	ldr	r2, [pc, #116]	@ (800e0c8 <USB_SetTurnaroundTime+0x13c>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d906      	bls.n	800e066 <USB_SetTurnaroundTime+0xda>
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	4a1c      	ldr	r2, [pc, #112]	@ (800e0cc <USB_SetTurnaroundTime+0x140>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d202      	bcs.n	800e066 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e060:	2307      	movs	r3, #7
 800e062:	617b      	str	r3, [r7, #20]
 800e064:	e00a      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e066:	2306      	movs	r3, #6
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	e007      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e072:	2309      	movs	r3, #9
 800e074:	617b      	str	r3, [r7, #20]
 800e076:	e001      	b.n	800e07c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e078:	2309      	movs	r3, #9
 800e07a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	68da      	ldr	r2, [r3, #12]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	029b      	lsls	r3, r3, #10
 800e090:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e094:	431a      	orrs	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	371c      	adds	r7, #28
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	00d8acbf 	.word	0x00d8acbf
 800e0ac:	00e4e1c0 	.word	0x00e4e1c0
 800e0b0:	00f42400 	.word	0x00f42400
 800e0b4:	01067380 	.word	0x01067380
 800e0b8:	011a499f 	.word	0x011a499f
 800e0bc:	01312cff 	.word	0x01312cff
 800e0c0:	014ca43f 	.word	0x014ca43f
 800e0c4:	016e3600 	.word	0x016e3600
 800e0c8:	01a6ab1f 	.word	0x01a6ab1f
 800e0cc:	01e84800 	.word	0x01e84800

0800e0d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	f043 0201 	orr.w	r2, r3, #1
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b083      	sub	sp, #12
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	f023 0201 	bic.w	r2, r3, #1
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	460b      	mov	r3, r1
 800e11e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d115      	bne.n	800e162 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e142:	200a      	movs	r0, #10
 800e144:	f7f3 fff6 	bl	8002134 <HAL_Delay>
      ms += 10U;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	330a      	adds	r3, #10
 800e14c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f001 f93f 	bl	800f3d2 <USB_GetMode>
 800e154:	4603      	mov	r3, r0
 800e156:	2b01      	cmp	r3, #1
 800e158:	d01e      	beq.n	800e198 <USB_SetCurrentMode+0x84>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2bc7      	cmp	r3, #199	@ 0xc7
 800e15e:	d9f0      	bls.n	800e142 <USB_SetCurrentMode+0x2e>
 800e160:	e01a      	b.n	800e198 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e162:	78fb      	ldrb	r3, [r7, #3]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d115      	bne.n	800e194 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e174:	200a      	movs	r0, #10
 800e176:	f7f3 ffdd 	bl	8002134 <HAL_Delay>
      ms += 10U;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	330a      	adds	r3, #10
 800e17e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f001 f926 	bl	800f3d2 <USB_GetMode>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d005      	beq.n	800e198 <USB_SetCurrentMode+0x84>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2bc7      	cmp	r3, #199	@ 0xc7
 800e190:	d9f0      	bls.n	800e174 <USB_SetCurrentMode+0x60>
 800e192:	e001      	b.n	800e198 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	e005      	b.n	800e1a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2bc8      	cmp	r3, #200	@ 0xc8
 800e19c:	d101      	bne.n	800e1a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e000      	b.n	800e1a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b086      	sub	sp, #24
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e1ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	613b      	str	r3, [r7, #16]
 800e1ca:	e009      	b.n	800e1e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	3340      	adds	r3, #64	@ 0x40
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	4413      	add	r3, r2
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	613b      	str	r3, [r7, #16]
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	2b0e      	cmp	r3, #14
 800e1e4:	d9f2      	bls.n	800e1cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e1e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d11c      	bne.n	800e228 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e1fc:	f043 0302 	orr.w	r3, r3, #2
 800e200:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e206:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	e005      	b.n	800e234 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e22c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e23a:	461a      	mov	r2, r3
 800e23c:	2300      	movs	r3, #0
 800e23e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e240:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e244:	2b01      	cmp	r3, #1
 800e246:	d10d      	bne.n	800e264 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d104      	bne.n	800e25a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e250:	2100      	movs	r1, #0
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 f968 	bl	800e528 <USB_SetDevSpeed>
 800e258:	e008      	b.n	800e26c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e25a:	2101      	movs	r1, #1
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f963 	bl	800e528 <USB_SetDevSpeed>
 800e262:	e003      	b.n	800e26c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e264:	2103      	movs	r1, #3
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 f95e 	bl	800e528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e26c:	2110      	movs	r1, #16
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f8fa 	bl	800e468 <USB_FlushTxFifo>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e27a:	2301      	movs	r3, #1
 800e27c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f924 	bl	800e4cc <USB_FlushRxFifo>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e294:	461a      	mov	r2, r3
 800e296:	2300      	movs	r3, #0
 800e298:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	613b      	str	r3, [r7, #16]
 800e2b6:	e043      	b.n	800e340 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	015a      	lsls	r2, r3, #5
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2ce:	d118      	bne.n	800e302 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10a      	bne.n	800e2ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e2e8:	6013      	str	r3, [r2, #0]
 800e2ea:	e013      	b.n	800e314 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	e008      	b.n	800e314 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	015a      	lsls	r2, r3, #5
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	4413      	add	r3, r2
 800e30a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e30e:	461a      	mov	r2, r3
 800e310:	2300      	movs	r3, #0
 800e312:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	015a      	lsls	r2, r3, #5
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4413      	add	r3, r2
 800e31c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e320:	461a      	mov	r2, r3
 800e322:	2300      	movs	r3, #0
 800e324:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	015a      	lsls	r2, r3, #5
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	4413      	add	r3, r2
 800e32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e332:	461a      	mov	r2, r3
 800e334:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	3301      	adds	r3, #1
 800e33e:	613b      	str	r3, [r7, #16]
 800e340:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e344:	461a      	mov	r2, r3
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	4293      	cmp	r3, r2
 800e34a:	d3b5      	bcc.n	800e2b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e34c:	2300      	movs	r3, #0
 800e34e:	613b      	str	r3, [r7, #16]
 800e350:	e043      	b.n	800e3da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	015a      	lsls	r2, r3, #5
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	4413      	add	r3, r2
 800e35a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e368:	d118      	bne.n	800e39c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d10a      	bne.n	800e386 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	4413      	add	r3, r2
 800e378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e37c:	461a      	mov	r2, r3
 800e37e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	e013      	b.n	800e3ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	015a      	lsls	r2, r3, #5
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	4413      	add	r3, r2
 800e38e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e392:	461a      	mov	r2, r3
 800e394:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e398:	6013      	str	r3, [r2, #0]
 800e39a:	e008      	b.n	800e3ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	015a      	lsls	r2, r3, #5
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	015a      	lsls	r2, r3, #5
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	2300      	movs	r3, #0
 800e3be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e3d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	613b      	str	r3, [r7, #16]
 800e3da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e3de:	461a      	mov	r2, r3
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d3b5      	bcc.n	800e352 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e3f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e406:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d105      	bne.n	800e41c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	699b      	ldr	r3, [r3, #24]
 800e414:	f043 0210 	orr.w	r2, r3, #16
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	699a      	ldr	r2, [r3, #24]
 800e420:	4b0f      	ldr	r3, [pc, #60]	@ (800e460 <USB_DevInit+0x2b4>)
 800e422:	4313      	orrs	r3, r2
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e428:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d005      	beq.n	800e43c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	f043 0208 	orr.w	r2, r3, #8
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e43c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e440:	2b01      	cmp	r3, #1
 800e442:	d105      	bne.n	800e450 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	699a      	ldr	r2, [r3, #24]
 800e448:	4b06      	ldr	r3, [pc, #24]	@ (800e464 <USB_DevInit+0x2b8>)
 800e44a:	4313      	orrs	r3, r2
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e450:	7dfb      	ldrb	r3, [r7, #23]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3718      	adds	r7, #24
 800e456:	46bd      	mov	sp, r7
 800e458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e45c:	b004      	add	sp, #16
 800e45e:	4770      	bx	lr
 800e460:	803c3800 	.word	0x803c3800
 800e464:	40000004 	.word	0x40000004

0800e468 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e472:	2300      	movs	r3, #0
 800e474:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3301      	adds	r3, #1
 800e47a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e482:	d901      	bls.n	800e488 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e484:	2303      	movs	r3, #3
 800e486:	e01b      	b.n	800e4c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	daf2      	bge.n	800e476 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e490:	2300      	movs	r3, #0
 800e492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	019b      	lsls	r3, r3, #6
 800e498:	f043 0220 	orr.w	r2, r3, #32
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e4ac:	d901      	bls.n	800e4b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	e006      	b.n	800e4c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	f003 0320 	and.w	r3, r3, #32
 800e4ba:	2b20      	cmp	r3, #32
 800e4bc:	d0f0      	beq.n	800e4a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3714      	adds	r7, #20
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e4e4:	d901      	bls.n	800e4ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e4e6:	2303      	movs	r3, #3
 800e4e8:	e018      	b.n	800e51c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	daf2      	bge.n	800e4d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2210      	movs	r2, #16
 800e4fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3301      	adds	r3, #1
 800e500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e508:	d901      	bls.n	800e50e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e50a:	2303      	movs	r3, #3
 800e50c:	e006      	b.n	800e51c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	691b      	ldr	r3, [r3, #16]
 800e512:	f003 0310 	and.w	r3, r3, #16
 800e516:	2b10      	cmp	r3, #16
 800e518:	d0f0      	beq.n	800e4fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	68f9      	ldr	r1, [r7, #12]
 800e544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e548:	4313      	orrs	r3, r2
 800e54a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr

0800e55a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e55a:	b480      	push	{r7}
 800e55c:	b087      	sub	sp, #28
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	f003 0306 	and.w	r3, r3, #6
 800e572:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d102      	bne.n	800e580 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e57a:	2300      	movs	r3, #0
 800e57c:	75fb      	strb	r3, [r7, #23]
 800e57e:	e00a      	b.n	800e596 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2b02      	cmp	r3, #2
 800e584:	d002      	beq.n	800e58c <USB_GetDevSpeed+0x32>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2b06      	cmp	r3, #6
 800e58a:	d102      	bne.n	800e592 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e58c:	2302      	movs	r3, #2
 800e58e:	75fb      	strb	r3, [r7, #23]
 800e590:	e001      	b.n	800e596 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e592:	230f      	movs	r3, #15
 800e594:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e596:	7dfb      	ldrb	r3, [r7, #23]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	371c      	adds	r7, #28
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	785b      	ldrb	r3, [r3, #1]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d139      	bne.n	800e634 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5c6:	69da      	ldr	r2, [r3, #28]
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	f003 030f 	and.w	r3, r3, #15
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	68f9      	ldr	r1, [r7, #12]
 800e5da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	015a      	lsls	r2, r3, #5
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d153      	bne.n	800e6a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	015a      	lsls	r2, r3, #5
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4413      	add	r3, r2
 800e600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	791b      	ldrb	r3, [r3, #4]
 800e612:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e614:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	059b      	lsls	r3, r3, #22
 800e61a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e61c:	431a      	orrs	r2, r3
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	0159      	lsls	r1, r3, #5
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	440b      	add	r3, r1
 800e626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e62a:	4619      	mov	r1, r3
 800e62c:	4b20      	ldr	r3, [pc, #128]	@ (800e6b0 <USB_ActivateEndpoint+0x10c>)
 800e62e:	4313      	orrs	r3, r2
 800e630:	600b      	str	r3, [r1, #0]
 800e632:	e035      	b.n	800e6a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e63a:	69da      	ldr	r2, [r3, #28]
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	2101      	movs	r1, #1
 800e646:	fa01 f303 	lsl.w	r3, r1, r3
 800e64a:	041b      	lsls	r3, r3, #16
 800e64c:	68f9      	ldr	r1, [r7, #12]
 800e64e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e652:	4313      	orrs	r3, r2
 800e654:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	015a      	lsls	r2, r3, #5
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	4413      	add	r3, r2
 800e65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d119      	bne.n	800e6a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	015a      	lsls	r2, r3, #5
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	4413      	add	r3, r2
 800e674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	791b      	ldrb	r3, [r3, #4]
 800e686:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e688:	430b      	orrs	r3, r1
 800e68a:	431a      	orrs	r2, r3
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	0159      	lsls	r1, r3, #5
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	440b      	add	r3, r1
 800e694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e698:	4619      	mov	r1, r3
 800e69a:	4b05      	ldr	r3, [pc, #20]	@ (800e6b0 <USB_ActivateEndpoint+0x10c>)
 800e69c:	4313      	orrs	r3, r2
 800e69e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	10008000 	.word	0x10008000

0800e6b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	785b      	ldrb	r3, [r3, #1]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d161      	bne.n	800e794 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	015a      	lsls	r2, r3, #5
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e6e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6e6:	d11f      	bne.n	800e728 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	015a      	lsls	r2, r3, #5
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	0151      	lsls	r1, r2, #5
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	440a      	add	r2, r1
 800e6fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e706:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	015a      	lsls	r2, r3, #5
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	4413      	add	r3, r2
 800e710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	0151      	lsls	r1, r2, #5
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	440a      	add	r2, r1
 800e71e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e72e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	f003 030f 	and.w	r3, r3, #15
 800e738:	2101      	movs	r1, #1
 800e73a:	fa01 f303 	lsl.w	r3, r1, r3
 800e73e:	b29b      	uxth	r3, r3
 800e740:	43db      	mvns	r3, r3
 800e742:	68f9      	ldr	r1, [r7, #12]
 800e744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e748:	4013      	ands	r3, r2
 800e74a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e752:	69da      	ldr	r2, [r3, #28]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 030f 	and.w	r3, r3, #15
 800e75c:	2101      	movs	r1, #1
 800e75e:	fa01 f303 	lsl.w	r3, r1, r3
 800e762:	b29b      	uxth	r3, r3
 800e764:	43db      	mvns	r3, r3
 800e766:	68f9      	ldr	r1, [r7, #12]
 800e768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e76c:	4013      	ands	r3, r2
 800e76e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	015a      	lsls	r2, r3, #5
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	4413      	add	r3, r2
 800e778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	0159      	lsls	r1, r3, #5
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	440b      	add	r3, r1
 800e786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e78a:	4619      	mov	r1, r3
 800e78c:	4b35      	ldr	r3, [pc, #212]	@ (800e864 <USB_DeactivateEndpoint+0x1b0>)
 800e78e:	4013      	ands	r3, r2
 800e790:	600b      	str	r3, [r1, #0]
 800e792:	e060      	b.n	800e856 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	015a      	lsls	r2, r3, #5
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	4413      	add	r3, r2
 800e79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e7a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e7aa:	d11f      	bne.n	800e7ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	0151      	lsls	r1, r2, #5
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	440a      	add	r2, r1
 800e7c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e7ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	015a      	lsls	r2, r3, #5
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	0151      	lsls	r1, r2, #5
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	440a      	add	r2, r1
 800e7e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e7e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e7ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	f003 030f 	and.w	r3, r3, #15
 800e7fc:	2101      	movs	r1, #1
 800e7fe:	fa01 f303 	lsl.w	r3, r1, r3
 800e802:	041b      	lsls	r3, r3, #16
 800e804:	43db      	mvns	r3, r3
 800e806:	68f9      	ldr	r1, [r7, #12]
 800e808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e80c:	4013      	ands	r3, r2
 800e80e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e816:	69da      	ldr	r2, [r3, #28]
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	f003 030f 	and.w	r3, r3, #15
 800e820:	2101      	movs	r1, #1
 800e822:	fa01 f303 	lsl.w	r3, r1, r3
 800e826:	041b      	lsls	r3, r3, #16
 800e828:	43db      	mvns	r3, r3
 800e82a:	68f9      	ldr	r1, [r7, #12]
 800e82c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e830:	4013      	ands	r3, r2
 800e832:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	0159      	lsls	r1, r3, #5
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	440b      	add	r3, r1
 800e84a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e84e:	4619      	mov	r1, r3
 800e850:	4b05      	ldr	r3, [pc, #20]	@ (800e868 <USB_DeactivateEndpoint+0x1b4>)
 800e852:	4013      	ands	r3, r2
 800e854:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e856:	2300      	movs	r3, #0
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	ec337800 	.word	0xec337800
 800e868:	eff37800 	.word	0xeff37800

0800e86c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08a      	sub	sp, #40	@ 0x28
 800e870:	af02      	add	r7, sp, #8
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	4613      	mov	r3, r2
 800e878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	785b      	ldrb	r3, [r3, #1]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	f040 8185 	bne.w	800eb98 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d132      	bne.n	800e8fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	015a      	lsls	r2, r3, #5
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	4413      	add	r3, r2
 800e89e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8a2:	691a      	ldr	r2, [r3, #16]
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	0159      	lsls	r1, r3, #5
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	440b      	add	r3, r1
 800e8ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	4ba7      	ldr	r3, [pc, #668]	@ (800eb50 <USB_EPStartXfer+0x2e4>)
 800e8b4:	4013      	ands	r3, r2
 800e8b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	015a      	lsls	r2, r3, #5
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	4413      	add	r3, r2
 800e8c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	69ba      	ldr	r2, [r7, #24]
 800e8c8:	0151      	lsls	r1, r2, #5
 800e8ca:	69fa      	ldr	r2, [r7, #28]
 800e8cc:	440a      	add	r2, r1
 800e8ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	015a      	lsls	r2, r3, #5
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	4413      	add	r3, r2
 800e8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e4:	691a      	ldr	r2, [r3, #16]
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	0159      	lsls	r1, r3, #5
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	440b      	add	r3, r1
 800e8ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4b97      	ldr	r3, [pc, #604]	@ (800eb54 <USB_EPStartXfer+0x2e8>)
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	610b      	str	r3, [r1, #16]
 800e8fa:	e097      	b.n	800ea2c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e908:	691a      	ldr	r2, [r3, #16]
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	0159      	lsls	r1, r3, #5
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	440b      	add	r3, r1
 800e912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e916:	4619      	mov	r1, r3
 800e918:	4b8e      	ldr	r3, [pc, #568]	@ (800eb54 <USB_EPStartXfer+0x2e8>)
 800e91a:	4013      	ands	r3, r2
 800e91c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	015a      	lsls	r2, r3, #5
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	4413      	add	r3, r2
 800e926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e92a:	691a      	ldr	r2, [r3, #16]
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	0159      	lsls	r1, r3, #5
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	440b      	add	r3, r1
 800e934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e938:	4619      	mov	r1, r3
 800e93a:	4b85      	ldr	r3, [pc, #532]	@ (800eb50 <USB_EPStartXfer+0x2e4>)
 800e93c:	4013      	ands	r3, r2
 800e93e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d11a      	bne.n	800e97c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	691a      	ldr	r2, [r3, #16]
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d903      	bls.n	800e95a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	689a      	ldr	r2, [r3, #8]
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	015a      	lsls	r2, r3, #5
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	4413      	add	r3, r2
 800e962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	0151      	lsls	r1, r2, #5
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	440a      	add	r2, r1
 800e970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e974:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e978:	6113      	str	r3, [r2, #16]
 800e97a:	e044      	b.n	800ea06 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	691a      	ldr	r2, [r3, #16]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	4413      	add	r3, r2
 800e986:	1e5a      	subs	r2, r3, #1
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e990:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e99e:	691a      	ldr	r2, [r3, #16]
 800e9a0:	8afb      	ldrh	r3, [r7, #22]
 800e9a2:	04d9      	lsls	r1, r3, #19
 800e9a4:	4b6c      	ldr	r3, [pc, #432]	@ (800eb58 <USB_EPStartXfer+0x2ec>)
 800e9a6:	400b      	ands	r3, r1
 800e9a8:	69b9      	ldr	r1, [r7, #24]
 800e9aa:	0148      	lsls	r0, r1, #5
 800e9ac:	69f9      	ldr	r1, [r7, #28]
 800e9ae:	4401      	add	r1, r0
 800e9b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	791b      	ldrb	r3, [r3, #4]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d122      	bne.n	800ea06 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	015a      	lsls	r2, r3, #5
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9cc:	691b      	ldr	r3, [r3, #16]
 800e9ce:	69ba      	ldr	r2, [r7, #24]
 800e9d0:	0151      	lsls	r1, r2, #5
 800e9d2:	69fa      	ldr	r2, [r7, #28]
 800e9d4:	440a      	add	r2, r1
 800e9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e9de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	015a      	lsls	r2, r3, #5
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9ec:	691a      	ldr	r2, [r3, #16]
 800e9ee:	8afb      	ldrh	r3, [r7, #22]
 800e9f0:	075b      	lsls	r3, r3, #29
 800e9f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e9f6:	69b9      	ldr	r1, [r7, #24]
 800e9f8:	0148      	lsls	r0, r1, #5
 800e9fa:	69f9      	ldr	r1, [r7, #28]
 800e9fc:	4401      	add	r1, r0
 800e9fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ea02:	4313      	orrs	r3, r2
 800ea04:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	015a      	lsls	r2, r3, #5
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea12:	691a      	ldr	r2, [r3, #16]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea1c:	69b9      	ldr	r1, [r7, #24]
 800ea1e:	0148      	lsls	r0, r1, #5
 800ea20:	69f9      	ldr	r1, [r7, #28]
 800ea22:	4401      	add	r1, r0
 800ea24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ea2c:	79fb      	ldrb	r3, [r7, #7]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d14b      	bne.n	800eaca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	69db      	ldr	r3, [r3, #28]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d009      	beq.n	800ea4e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea46:	461a      	mov	r2, r3
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	69db      	ldr	r3, [r3, #28]
 800ea4c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	791b      	ldrb	r3, [r3, #4]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d128      	bne.n	800eaa8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d110      	bne.n	800ea88 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	015a      	lsls	r2, r3, #5
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	69ba      	ldr	r2, [r7, #24]
 800ea76:	0151      	lsls	r1, r2, #5
 800ea78:	69fa      	ldr	r2, [r7, #28]
 800ea7a:	440a      	add	r2, r1
 800ea7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea84:	6013      	str	r3, [r2, #0]
 800ea86:	e00f      	b.n	800eaa8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	015a      	lsls	r2, r3, #5
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	4413      	add	r3, r2
 800ea90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	69ba      	ldr	r2, [r7, #24]
 800ea98:	0151      	lsls	r1, r2, #5
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	440a      	add	r2, r1
 800ea9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eaa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eaa6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	015a      	lsls	r2, r3, #5
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	4413      	add	r3, r2
 800eab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	69ba      	ldr	r2, [r7, #24]
 800eab8:	0151      	lsls	r1, r2, #5
 800eaba:	69fa      	ldr	r2, [r7, #28]
 800eabc:	440a      	add	r2, r1
 800eabe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eac2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eac6:	6013      	str	r3, [r2, #0]
 800eac8:	e169      	b.n	800ed9e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	015a      	lsls	r2, r3, #5
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	4413      	add	r3, r2
 800ead2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	69ba      	ldr	r2, [r7, #24]
 800eada:	0151      	lsls	r1, r2, #5
 800eadc:	69fa      	ldr	r2, [r7, #28]
 800eade:	440a      	add	r2, r1
 800eae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eae4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eae8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	791b      	ldrb	r3, [r3, #4]
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d015      	beq.n	800eb1e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 8151 	beq.w	800ed9e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 030f 	and.w	r3, r3, #15
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb12:	69f9      	ldr	r1, [r7, #28]
 800eb14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	634b      	str	r3, [r1, #52]	@ 0x34
 800eb1c:	e13f      	b.n	800ed9e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d116      	bne.n	800eb5c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	015a      	lsls	r2, r3, #5
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	4413      	add	r3, r2
 800eb36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	69ba      	ldr	r2, [r7, #24]
 800eb3e:	0151      	lsls	r1, r2, #5
 800eb40:	69fa      	ldr	r2, [r7, #28]
 800eb42:	440a      	add	r2, r1
 800eb44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eb4c:	6013      	str	r3, [r2, #0]
 800eb4e:	e015      	b.n	800eb7c <USB_EPStartXfer+0x310>
 800eb50:	e007ffff 	.word	0xe007ffff
 800eb54:	fff80000 	.word	0xfff80000
 800eb58:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	4413      	add	r3, r2
 800eb64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	0151      	lsls	r1, r2, #5
 800eb6e:	69fa      	ldr	r2, [r7, #28]
 800eb70:	440a      	add	r2, r1
 800eb72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb7a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	68d9      	ldr	r1, [r3, #12]
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	781a      	ldrb	r2, [r3, #0]
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	691b      	ldr	r3, [r3, #16]
 800eb88:	b298      	uxth	r0, r3
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	4603      	mov	r3, r0
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f000 f9b9 	bl	800ef08 <USB_WritePacket>
 800eb96:	e102      	b.n	800ed9e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba4:	691a      	ldr	r2, [r3, #16]
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	0159      	lsls	r1, r3, #5
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	440b      	add	r3, r1
 800ebae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4b7c      	ldr	r3, [pc, #496]	@ (800eda8 <USB_EPStartXfer+0x53c>)
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc6:	691a      	ldr	r2, [r3, #16]
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	0159      	lsls	r1, r3, #5
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	440b      	add	r3, r1
 800ebd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4b75      	ldr	r3, [pc, #468]	@ (800edac <USB_EPStartXfer+0x540>)
 800ebd8:	4013      	ands	r3, r2
 800ebda:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d12f      	bne.n	800ec42 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	691b      	ldr	r3, [r3, #16]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d003      	beq.n	800ebf2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	689a      	ldr	r2, [r3, #8]
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	689a      	ldr	r2, [r3, #8]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec06:	691a      	ldr	r2, [r3, #16]
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	6a1b      	ldr	r3, [r3, #32]
 800ec0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec10:	69b9      	ldr	r1, [r7, #24]
 800ec12:	0148      	lsls	r0, r1, #5
 800ec14:	69f9      	ldr	r1, [r7, #28]
 800ec16:	4401      	add	r1, r0
 800ec18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	015a      	lsls	r2, r3, #5
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	4413      	add	r3, r2
 800ec28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	69ba      	ldr	r2, [r7, #24]
 800ec30:	0151      	lsls	r1, r2, #5
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	440a      	add	r2, r1
 800ec36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec3e:	6113      	str	r3, [r2, #16]
 800ec40:	e05f      	b.n	800ed02 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d123      	bne.n	800ec92 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	015a      	lsls	r2, r3, #5
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	4413      	add	r3, r2
 800ec52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec56:	691a      	ldr	r2, [r3, #16]
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec60:	69b9      	ldr	r1, [r7, #24]
 800ec62:	0148      	lsls	r0, r1, #5
 800ec64:	69f9      	ldr	r1, [r7, #28]
 800ec66:	4401      	add	r1, r0
 800ec68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	015a      	lsls	r2, r3, #5
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	4413      	add	r3, r2
 800ec78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	69ba      	ldr	r2, [r7, #24]
 800ec80:	0151      	lsls	r1, r2, #5
 800ec82:	69fa      	ldr	r2, [r7, #28]
 800ec84:	440a      	add	r2, r1
 800ec86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec8e:	6113      	str	r3, [r2, #16]
 800ec90:	e037      	b.n	800ed02 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	691a      	ldr	r2, [r3, #16]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	1e5a      	subs	r2, r3, #1
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	689b      	ldr	r3, [r3, #8]
 800eca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eca6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	8afa      	ldrh	r2, [r7, #22]
 800ecae:	fb03 f202 	mul.w	r2, r3, r2
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	015a      	lsls	r2, r3, #5
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecc2:	691a      	ldr	r2, [r3, #16]
 800ecc4:	8afb      	ldrh	r3, [r7, #22]
 800ecc6:	04d9      	lsls	r1, r3, #19
 800ecc8:	4b39      	ldr	r3, [pc, #228]	@ (800edb0 <USB_EPStartXfer+0x544>)
 800ecca:	400b      	ands	r3, r1
 800eccc:	69b9      	ldr	r1, [r7, #24]
 800ecce:	0148      	lsls	r0, r1, #5
 800ecd0:	69f9      	ldr	r1, [r7, #28]
 800ecd2:	4401      	add	r1, r0
 800ecd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	015a      	lsls	r2, r3, #5
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	4413      	add	r3, r2
 800ece4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece8:	691a      	ldr	r2, [r3, #16]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6a1b      	ldr	r3, [r3, #32]
 800ecee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecf2:	69b9      	ldr	r1, [r7, #24]
 800ecf4:	0148      	lsls	r0, r1, #5
 800ecf6:	69f9      	ldr	r1, [r7, #28]
 800ecf8:	4401      	add	r1, r0
 800ecfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ed02:	79fb      	ldrb	r3, [r7, #7]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d10d      	bne.n	800ed24 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d009      	beq.n	800ed24 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	68d9      	ldr	r1, [r3, #12]
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	015a      	lsls	r2, r3, #5
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed20:	460a      	mov	r2, r1
 800ed22:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	791b      	ldrb	r3, [r3, #4]
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d128      	bne.n	800ed7e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d110      	bne.n	800ed5e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	69ba      	ldr	r2, [r7, #24]
 800ed4c:	0151      	lsls	r1, r2, #5
 800ed4e:	69fa      	ldr	r2, [r7, #28]
 800ed50:	440a      	add	r2, r1
 800ed52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	e00f      	b.n	800ed7e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	015a      	lsls	r2, r3, #5
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	4413      	add	r3, r2
 800ed66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	69ba      	ldr	r2, [r7, #24]
 800ed6e:	0151      	lsls	r1, r2, #5
 800ed70:	69fa      	ldr	r2, [r7, #28]
 800ed72:	440a      	add	r2, r1
 800ed74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed7c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	015a      	lsls	r2, r3, #5
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	4413      	add	r3, r2
 800ed86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	0151      	lsls	r1, r2, #5
 800ed90:	69fa      	ldr	r2, [r7, #28]
 800ed92:	440a      	add	r2, r1
 800ed94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ed9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3720      	adds	r7, #32
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	fff80000 	.word	0xfff80000
 800edac:	e007ffff 	.word	0xe007ffff
 800edb0:	1ff80000 	.word	0x1ff80000

0800edb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b087      	sub	sp, #28
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	785b      	ldrb	r3, [r3, #1]
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d14a      	bne.n	800ee68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	015a      	lsls	r2, r3, #5
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	4413      	add	r3, r2
 800eddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ede6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edea:	f040 8086 	bne.w	800eefa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	015a      	lsls	r2, r3, #5
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	4413      	add	r3, r2
 800edf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	7812      	ldrb	r2, [r2, #0]
 800ee02:	0151      	lsls	r1, r2, #5
 800ee04:	693a      	ldr	r2, [r7, #16]
 800ee06:	440a      	add	r2, r1
 800ee08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ee10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	015a      	lsls	r2, r3, #5
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	7812      	ldrb	r2, [r2, #0]
 800ee26:	0151      	lsls	r1, r2, #5
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	440a      	add	r2, r1
 800ee2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d902      	bls.n	800ee4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	75fb      	strb	r3, [r7, #23]
          break;
 800ee4a:	e056      	b.n	800eefa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	015a      	lsls	r2, r3, #5
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	4413      	add	r3, r2
 800ee56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee64:	d0e7      	beq.n	800ee36 <USB_EPStopXfer+0x82>
 800ee66:	e048      	b.n	800eefa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	015a      	lsls	r2, r3, #5
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	4413      	add	r3, r2
 800ee72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ee7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ee80:	d13b      	bne.n	800eefa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	7812      	ldrb	r2, [r2, #0]
 800ee96:	0151      	lsls	r1, r2, #5
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	440a      	add	r2, r1
 800ee9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eea0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eea4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	015a      	lsls	r2, r3, #5
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	4413      	add	r3, r2
 800eeb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	7812      	ldrb	r2, [r2, #0]
 800eeba:	0151      	lsls	r1, r2, #5
 800eebc:	693a      	ldr	r2, [r7, #16]
 800eebe:	440a      	add	r2, r1
 800eec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eec4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eec8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	3301      	adds	r3, #1
 800eece:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d902      	bls.n	800eee0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800eeda:	2301      	movs	r3, #1
 800eedc:	75fb      	strb	r3, [r7, #23]
          break;
 800eede:	e00c      	b.n	800eefa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	015a      	lsls	r2, r3, #5
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	4413      	add	r3, r2
 800eeea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eef8:	d0e7      	beq.n	800eeca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800eefa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	371c      	adds	r7, #28
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b089      	sub	sp, #36	@ 0x24
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	4611      	mov	r1, r2
 800ef14:	461a      	mov	r2, r3
 800ef16:	460b      	mov	r3, r1
 800ef18:	71fb      	strb	r3, [r7, #7]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ef26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d123      	bne.n	800ef76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ef2e:	88bb      	ldrh	r3, [r7, #4]
 800ef30:	3303      	adds	r3, #3
 800ef32:	089b      	lsrs	r3, r3, #2
 800ef34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ef36:	2300      	movs	r3, #0
 800ef38:	61bb      	str	r3, [r7, #24]
 800ef3a:	e018      	b.n	800ef6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ef3c:	79fb      	ldrb	r3, [r7, #7]
 800ef3e:	031a      	lsls	r2, r3, #12
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	4413      	add	r3, r2
 800ef44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ef48:	461a      	mov	r2, r3
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	3301      	adds	r3, #1
 800ef54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	3301      	adds	r3, #1
 800ef66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	61bb      	str	r3, [r7, #24]
 800ef6e:	69ba      	ldr	r2, [r7, #24]
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d3e2      	bcc.n	800ef3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ef76:	2300      	movs	r3, #0
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3724      	adds	r7, #36	@ 0x24
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b08b      	sub	sp, #44	@ 0x2c
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ef9a:	88fb      	ldrh	r3, [r7, #6]
 800ef9c:	089b      	lsrs	r3, r3, #2
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800efa2:	88fb      	ldrh	r3, [r7, #6]
 800efa4:	f003 0303 	and.w	r3, r3, #3
 800efa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800efaa:	2300      	movs	r3, #0
 800efac:	623b      	str	r3, [r7, #32]
 800efae:	e014      	b.n	800efda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efba:	601a      	str	r2, [r3, #0]
    pDest++;
 800efbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efbe:	3301      	adds	r3, #1
 800efc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800efc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc4:	3301      	adds	r3, #1
 800efc6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800efc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efca:	3301      	adds	r3, #1
 800efcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800efce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd0:	3301      	adds	r3, #1
 800efd2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800efd4:	6a3b      	ldr	r3, [r7, #32]
 800efd6:	3301      	adds	r3, #1
 800efd8:	623b      	str	r3, [r7, #32]
 800efda:	6a3a      	ldr	r2, [r7, #32]
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d3e6      	bcc.n	800efb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800efe2:	8bfb      	ldrh	r3, [r7, #30]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d01e      	beq.n	800f026 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800efe8:	2300      	movs	r3, #0
 800efea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eff2:	461a      	mov	r2, r3
 800eff4:	f107 0310 	add.w	r3, r7, #16
 800eff8:	6812      	ldr	r2, [r2, #0]
 800effa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800effc:	693a      	ldr	r2, [r7, #16]
 800effe:	6a3b      	ldr	r3, [r7, #32]
 800f000:	b2db      	uxtb	r3, r3
 800f002:	00db      	lsls	r3, r3, #3
 800f004:	fa22 f303 	lsr.w	r3, r2, r3
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00c:	701a      	strb	r2, [r3, #0]
      i++;
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	3301      	adds	r3, #1
 800f012:	623b      	str	r3, [r7, #32]
      pDest++;
 800f014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f016:	3301      	adds	r3, #1
 800f018:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f01a:	8bfb      	ldrh	r3, [r7, #30]
 800f01c:	3b01      	subs	r3, #1
 800f01e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f020:	8bfb      	ldrh	r3, [r7, #30]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1ea      	bne.n	800effc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f028:	4618      	mov	r0, r3
 800f02a:	372c      	adds	r7, #44	@ 0x2c
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	785b      	ldrb	r3, [r3, #1]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d12c      	bne.n	800f0aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	015a      	lsls	r2, r3, #5
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4413      	add	r3, r2
 800f058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	db12      	blt.n	800f088 <USB_EPSetStall+0x54>
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00f      	beq.n	800f088 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	0151      	lsls	r1, r2, #5
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	440a      	add	r2, r1
 800f07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f082:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f086:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	015a      	lsls	r2, r3, #5
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	4413      	add	r3, r2
 800f090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	0151      	lsls	r1, r2, #5
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	440a      	add	r2, r1
 800f09e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	e02b      	b.n	800f102 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	015a      	lsls	r2, r3, #5
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	db12      	blt.n	800f0e2 <USB_EPSetStall+0xae>
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00f      	beq.n	800f0e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	015a      	lsls	r2, r3, #5
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	0151      	lsls	r1, r2, #5
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	440a      	add	r2, r1
 800f0d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f0e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	015a      	lsls	r2, r3, #5
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	0151      	lsls	r1, r2, #5
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	440a      	add	r2, r1
 800f0f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f100:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3714      	adds	r7, #20
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d128      	bne.n	800f17e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	015a      	lsls	r2, r3, #5
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	4413      	add	r3, r2
 800f134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	0151      	lsls	r1, r2, #5
 800f13e:	68fa      	ldr	r2, [r7, #12]
 800f140:	440a      	add	r2, r1
 800f142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f146:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f14a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	791b      	ldrb	r3, [r3, #4]
 800f150:	2b03      	cmp	r3, #3
 800f152:	d003      	beq.n	800f15c <USB_EPClearStall+0x4c>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	791b      	ldrb	r3, [r3, #4]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d138      	bne.n	800f1ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	015a      	lsls	r2, r3, #5
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	4413      	add	r3, r2
 800f164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	0151      	lsls	r1, r2, #5
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	440a      	add	r2, r1
 800f172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f17a:	6013      	str	r3, [r2, #0]
 800f17c:	e027      	b.n	800f1ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	015a      	lsls	r2, r3, #5
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	4413      	add	r3, r2
 800f186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	0151      	lsls	r1, r2, #5
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	440a      	add	r2, r1
 800f194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f198:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f19c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	791b      	ldrb	r3, [r3, #4]
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d003      	beq.n	800f1ae <USB_EPClearStall+0x9e>
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	791b      	ldrb	r3, [r3, #4]
 800f1aa:	2b02      	cmp	r3, #2
 800f1ac:	d10f      	bne.n	800f1ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	015a      	lsls	r2, r3, #5
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	0151      	lsls	r1, r2, #5
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	440a      	add	r2, r1
 800f1c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f1c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f1cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	68fa      	ldr	r2, [r7, #12]
 800f1f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f1fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	78fb      	ldrb	r3, [r7, #3]
 800f20a:	011b      	lsls	r3, r3, #4
 800f20c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f210:	68f9      	ldr	r1, [r7, #12]
 800f212:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f216:	4313      	orrs	r3, r2
 800f218:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f242:	f023 0303 	bic.w	r3, r3, #3
 800f246:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f256:	f023 0302 	bic.w	r3, r3, #2
 800f25a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b085      	sub	sp, #20
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f284:	f023 0303 	bic.w	r3, r3, #3
 800f288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f298:	f043 0302 	orr.w	r3, r3, #2
 800f29c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3714      	adds	r7, #20
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b085      	sub	sp, #20
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2e4:	699b      	ldr	r3, [r3, #24]
 800f2e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2ee:	69db      	ldr	r3, [r3, #28]
 800f2f0:	68ba      	ldr	r2, [r7, #8]
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	0c1b      	lsrs	r3, r3, #16
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f306:	b480      	push	{r7}
 800f308:	b085      	sub	sp, #20
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f322:	69db      	ldr	r3, [r3, #28]
 800f324:	68ba      	ldr	r2, [r7, #8]
 800f326:	4013      	ands	r3, r2
 800f328:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	b29b      	uxth	r3, r3
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr

0800f33a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f33a:	b480      	push	{r7}
 800f33c:	b085      	sub	sp, #20
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
 800f342:	460b      	mov	r3, r1
 800f344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f34a:	78fb      	ldrb	r3, [r7, #3]
 800f34c:	015a      	lsls	r2, r3, #5
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	4413      	add	r3, r2
 800f352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f360:	695b      	ldr	r3, [r3, #20]
 800f362:	68ba      	ldr	r2, [r7, #8]
 800f364:	4013      	ands	r3, r2
 800f366:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f368:	68bb      	ldr	r3, [r7, #8]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3714      	adds	r7, #20
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr

0800f376 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f376:	b480      	push	{r7}
 800f378:	b087      	sub	sp, #28
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	460b      	mov	r3, r1
 800f380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f398:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f39a:	78fb      	ldrb	r3, [r7, #3]
 800f39c:	f003 030f 	and.w	r3, r3, #15
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f3a6:	01db      	lsls	r3, r3, #7
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	693a      	ldr	r2, [r7, #16]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f3b0:	78fb      	ldrb	r3, [r7, #3]
 800f3b2:	015a      	lsls	r2, r3, #5
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	4413      	add	r3, r2
 800f3b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f3c4:	68bb      	ldr	r3, [r7, #8]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	371c      	adds	r7, #28
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr

0800f3d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f3d2:	b480      	push	{r7}
 800f3d4:	b083      	sub	sp, #12
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	f003 0301 	and.w	r3, r3, #1
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	370c      	adds	r7, #12
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
	...

0800f3f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b085      	sub	sp, #20
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f40a:	4619      	mov	r1, r3
 800f40c:	4b09      	ldr	r3, [pc, #36]	@ (800f434 <USB_ActivateSetup+0x44>)
 800f40e:	4013      	ands	r3, r2
 800f410:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3714      	adds	r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	fffff800 	.word	0xfffff800

0800f438 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f438:	b480      	push	{r7}
 800f43a:	b087      	sub	sp, #28
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	460b      	mov	r3, r1
 800f442:	607a      	str	r2, [r7, #4]
 800f444:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	333c      	adds	r3, #60	@ 0x3c
 800f44e:	3304      	adds	r3, #4
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	4a26      	ldr	r2, [pc, #152]	@ (800f4f0 <USB_EP0_OutStart+0xb8>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d90a      	bls.n	800f472 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f46c:	d101      	bne.n	800f472 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f46e:	2300      	movs	r3, #0
 800f470:	e037      	b.n	800f4e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f478:	461a      	mov	r2, r3
 800f47a:	2300      	movs	r3, #0
 800f47c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	697a      	ldr	r2, [r7, #20]
 800f488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f48c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4a0:	f043 0318 	orr.w	r3, r3, #24
 800f4a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f4b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f4ba:	7afb      	ldrb	r3, [r7, #11]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d10f      	bne.n	800f4e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f4da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f4de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	371c      	adds	r7, #28
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	4f54300a 	.word	0x4f54300a

0800f4f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	3301      	adds	r3, #1
 800f504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f50c:	d901      	bls.n	800f512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e01b      	b.n	800f54a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	691b      	ldr	r3, [r3, #16]
 800f516:	2b00      	cmp	r3, #0
 800f518:	daf2      	bge.n	800f500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f51a:	2300      	movs	r3, #0
 800f51c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	f043 0201 	orr.w	r2, r3, #1
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	3301      	adds	r3, #1
 800f52e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f536:	d901      	bls.n	800f53c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f538:	2303      	movs	r3, #3
 800f53a:	e006      	b.n	800f54a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	2b01      	cmp	r3, #1
 800f546:	d0f0      	beq.n	800f52a <USB_CoreReset+0x36>

  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
	...

0800f558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	460b      	mov	r3, r1
 800f562:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f564:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f568:	f002 fcfe 	bl	8011f68 <USBD_static_malloc>
 800f56c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d109      	bne.n	800f588 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	32b0      	adds	r2, #176	@ 0xb0
 800f57e:	2100      	movs	r1, #0
 800f580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f584:	2302      	movs	r3, #2
 800f586:	e0d4      	b.n	800f732 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f588:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f58c:	2100      	movs	r1, #0
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f002 fd50 	bl	8012034 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	32b0      	adds	r2, #176	@ 0xb0
 800f59e:	68f9      	ldr	r1, [r7, #12]
 800f5a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	32b0      	adds	r2, #176	@ 0xb0
 800f5ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	7c1b      	ldrb	r3, [r3, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d138      	bne.n	800f632 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f5c0:	4b5e      	ldr	r3, [pc, #376]	@ (800f73c <USBD_CDC_Init+0x1e4>)
 800f5c2:	7819      	ldrb	r1, [r3, #0]
 800f5c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f5c8:	2202      	movs	r2, #2
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f002 fba9 	bl	8011d22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f5d0:	4b5a      	ldr	r3, [pc, #360]	@ (800f73c <USBD_CDC_Init+0x1e4>)
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	f003 020f 	and.w	r2, r3, #15
 800f5d8:	6879      	ldr	r1, [r7, #4]
 800f5da:	4613      	mov	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	440b      	add	r3, r1
 800f5e4:	3324      	adds	r3, #36	@ 0x24
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f5ea:	4b55      	ldr	r3, [pc, #340]	@ (800f740 <USBD_CDC_Init+0x1e8>)
 800f5ec:	7819      	ldrb	r1, [r3, #0]
 800f5ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f002 fb94 	bl	8011d22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f5fa:	4b51      	ldr	r3, [pc, #324]	@ (800f740 <USBD_CDC_Init+0x1e8>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f003 020f 	and.w	r2, r3, #15
 800f602:	6879      	ldr	r1, [r7, #4]
 800f604:	4613      	mov	r3, r2
 800f606:	009b      	lsls	r3, r3, #2
 800f608:	4413      	add	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	440b      	add	r3, r1
 800f60e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f612:	2201      	movs	r2, #1
 800f614:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f616:	4b4b      	ldr	r3, [pc, #300]	@ (800f744 <USBD_CDC_Init+0x1ec>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	f003 020f 	and.w	r2, r3, #15
 800f61e:	6879      	ldr	r1, [r7, #4]
 800f620:	4613      	mov	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	4413      	add	r3, r2
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	440b      	add	r3, r1
 800f62a:	3326      	adds	r3, #38	@ 0x26
 800f62c:	2210      	movs	r2, #16
 800f62e:	801a      	strh	r2, [r3, #0]
 800f630:	e035      	b.n	800f69e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f632:	4b42      	ldr	r3, [pc, #264]	@ (800f73c <USBD_CDC_Init+0x1e4>)
 800f634:	7819      	ldrb	r1, [r3, #0]
 800f636:	2340      	movs	r3, #64	@ 0x40
 800f638:	2202      	movs	r2, #2
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f002 fb71 	bl	8011d22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f640:	4b3e      	ldr	r3, [pc, #248]	@ (800f73c <USBD_CDC_Init+0x1e4>)
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	f003 020f 	and.w	r2, r3, #15
 800f648:	6879      	ldr	r1, [r7, #4]
 800f64a:	4613      	mov	r3, r2
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	4413      	add	r3, r2
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	440b      	add	r3, r1
 800f654:	3324      	adds	r3, #36	@ 0x24
 800f656:	2201      	movs	r2, #1
 800f658:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f65a:	4b39      	ldr	r3, [pc, #228]	@ (800f740 <USBD_CDC_Init+0x1e8>)
 800f65c:	7819      	ldrb	r1, [r3, #0]
 800f65e:	2340      	movs	r3, #64	@ 0x40
 800f660:	2202      	movs	r2, #2
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f002 fb5d 	bl	8011d22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f668:	4b35      	ldr	r3, [pc, #212]	@ (800f740 <USBD_CDC_Init+0x1e8>)
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	f003 020f 	and.w	r2, r3, #15
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	4613      	mov	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	440b      	add	r3, r1
 800f67c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f680:	2201      	movs	r2, #1
 800f682:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f684:	4b2f      	ldr	r3, [pc, #188]	@ (800f744 <USBD_CDC_Init+0x1ec>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	f003 020f 	and.w	r2, r3, #15
 800f68c:	6879      	ldr	r1, [r7, #4]
 800f68e:	4613      	mov	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	440b      	add	r3, r1
 800f698:	3326      	adds	r3, #38	@ 0x26
 800f69a:	2210      	movs	r2, #16
 800f69c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f69e:	4b29      	ldr	r3, [pc, #164]	@ (800f744 <USBD_CDC_Init+0x1ec>)
 800f6a0:	7819      	ldrb	r1, [r3, #0]
 800f6a2:	2308      	movs	r3, #8
 800f6a4:	2203      	movs	r2, #3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f002 fb3b 	bl	8011d22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f6ac:	4b25      	ldr	r3, [pc, #148]	@ (800f744 <USBD_CDC_Init+0x1ec>)
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 020f 	and.w	r2, r3, #15
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	440b      	add	r3, r1
 800f6c0:	3324      	adds	r3, #36	@ 0x24
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	33b0      	adds	r3, #176	@ 0xb0
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f6fc:	2302      	movs	r3, #2
 800f6fe:	e018      	b.n	800f732 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	7c1b      	ldrb	r3, [r3, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10a      	bne.n	800f71e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f708:	4b0d      	ldr	r3, [pc, #52]	@ (800f740 <USBD_CDC_Init+0x1e8>)
 800f70a:	7819      	ldrb	r1, [r3, #0]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f002 fbf2 	bl	8011f00 <USBD_LL_PrepareReceive>
 800f71c:	e008      	b.n	800f730 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f71e:	4b08      	ldr	r3, [pc, #32]	@ (800f740 <USBD_CDC_Init+0x1e8>)
 800f720:	7819      	ldrb	r1, [r3, #0]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f728:	2340      	movs	r3, #64	@ 0x40
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f002 fbe8 	bl	8011f00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	2400009b 	.word	0x2400009b
 800f740:	2400009c 	.word	0x2400009c
 800f744:	2400009d 	.word	0x2400009d

0800f748 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f754:	4b3a      	ldr	r3, [pc, #232]	@ (800f840 <USBD_CDC_DeInit+0xf8>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	4619      	mov	r1, r3
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f002 fb07 	bl	8011d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f760:	4b37      	ldr	r3, [pc, #220]	@ (800f840 <USBD_CDC_DeInit+0xf8>)
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	f003 020f 	and.w	r2, r3, #15
 800f768:	6879      	ldr	r1, [r7, #4]
 800f76a:	4613      	mov	r3, r2
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4413      	add	r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	440b      	add	r3, r1
 800f774:	3324      	adds	r3, #36	@ 0x24
 800f776:	2200      	movs	r2, #0
 800f778:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f77a:	4b32      	ldr	r3, [pc, #200]	@ (800f844 <USBD_CDC_DeInit+0xfc>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	4619      	mov	r1, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f002 faf4 	bl	8011d6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f786:	4b2f      	ldr	r3, [pc, #188]	@ (800f844 <USBD_CDC_DeInit+0xfc>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	f003 020f 	and.w	r2, r3, #15
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	440b      	add	r3, r1
 800f79a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f79e:	2200      	movs	r2, #0
 800f7a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f7a2:	4b29      	ldr	r3, [pc, #164]	@ (800f848 <USBD_CDC_DeInit+0x100>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f002 fae0 	bl	8011d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f7ae:	4b26      	ldr	r3, [pc, #152]	@ (800f848 <USBD_CDC_DeInit+0x100>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	f003 020f 	and.w	r2, r3, #15
 800f7b6:	6879      	ldr	r1, [r7, #4]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	4413      	add	r3, r2
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	440b      	add	r3, r1
 800f7c2:	3324      	adds	r3, #36	@ 0x24
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f7c8:	4b1f      	ldr	r3, [pc, #124]	@ (800f848 <USBD_CDC_DeInit+0x100>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	f003 020f 	and.w	r2, r3, #15
 800f7d0:	6879      	ldr	r1, [r7, #4]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4413      	add	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	440b      	add	r3, r1
 800f7dc:	3326      	adds	r3, #38	@ 0x26
 800f7de:	2200      	movs	r2, #0
 800f7e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	32b0      	adds	r2, #176	@ 0xb0
 800f7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d01f      	beq.n	800f834 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	33b0      	adds	r3, #176	@ 0xb0
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4413      	add	r3, r2
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	32b0      	adds	r2, #176	@ 0xb0
 800f812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f816:	4618      	mov	r0, r3
 800f818:	f002 fbb4 	bl	8011f84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	32b0      	adds	r2, #176	@ 0xb0
 800f826:	2100      	movs	r1, #0
 800f828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	2400009b 	.word	0x2400009b
 800f844:	2400009c 	.word	0x2400009c
 800f848:	2400009d 	.word	0x2400009d

0800f84c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	32b0      	adds	r2, #176	@ 0xb0
 800f860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f864:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f866:	2300      	movs	r3, #0
 800f868:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d101      	bne.n	800f87c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f878:	2303      	movs	r3, #3
 800f87a:	e0bf      	b.n	800f9fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f884:	2b00      	cmp	r3, #0
 800f886:	d050      	beq.n	800f92a <USBD_CDC_Setup+0xde>
 800f888:	2b20      	cmp	r3, #32
 800f88a:	f040 80af 	bne.w	800f9ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	88db      	ldrh	r3, [r3, #6]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d03a      	beq.n	800f90c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	b25b      	sxtb	r3, r3
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	da1b      	bge.n	800f8d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	33b0      	adds	r3, #176	@ 0xb0
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	4413      	add	r3, r2
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	683a      	ldr	r2, [r7, #0]
 800f8b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f8b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f8b8:	683a      	ldr	r2, [r7, #0]
 800f8ba:	88d2      	ldrh	r2, [r2, #6]
 800f8bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	88db      	ldrh	r3, [r3, #6]
 800f8c2:	2b07      	cmp	r3, #7
 800f8c4:	bf28      	it	cs
 800f8c6:	2307      	movcs	r3, #7
 800f8c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	89fa      	ldrh	r2, [r7, #14]
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f001 fdbd 	bl	8011450 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f8d6:	e090      	b.n	800f9fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	785a      	ldrb	r2, [r3, #1]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	88db      	ldrh	r3, [r3, #6]
 800f8e6:	2b3f      	cmp	r3, #63	@ 0x3f
 800f8e8:	d803      	bhi.n	800f8f2 <USBD_CDC_Setup+0xa6>
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	88db      	ldrh	r3, [r3, #6]
 800f8ee:	b2da      	uxtb	r2, r3
 800f8f0:	e000      	b.n	800f8f4 <USBD_CDC_Setup+0xa8>
 800f8f2:	2240      	movs	r2, #64	@ 0x40
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f8fa:	6939      	ldr	r1, [r7, #16]
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f902:	461a      	mov	r2, r3
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f001 fdcf 	bl	80114a8 <USBD_CtlPrepareRx>
      break;
 800f90a:	e076      	b.n	800f9fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	33b0      	adds	r3, #176	@ 0xb0
 800f916:	009b      	lsls	r3, r3, #2
 800f918:	4413      	add	r3, r2
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	683a      	ldr	r2, [r7, #0]
 800f920:	7850      	ldrb	r0, [r2, #1]
 800f922:	2200      	movs	r2, #0
 800f924:	6839      	ldr	r1, [r7, #0]
 800f926:	4798      	blx	r3
      break;
 800f928:	e067      	b.n	800f9fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	785b      	ldrb	r3, [r3, #1]
 800f92e:	2b0b      	cmp	r3, #11
 800f930:	d851      	bhi.n	800f9d6 <USBD_CDC_Setup+0x18a>
 800f932:	a201      	add	r2, pc, #4	@ (adr r2, 800f938 <USBD_CDC_Setup+0xec>)
 800f934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f938:	0800f969 	.word	0x0800f969
 800f93c:	0800f9e5 	.word	0x0800f9e5
 800f940:	0800f9d7 	.word	0x0800f9d7
 800f944:	0800f9d7 	.word	0x0800f9d7
 800f948:	0800f9d7 	.word	0x0800f9d7
 800f94c:	0800f9d7 	.word	0x0800f9d7
 800f950:	0800f9d7 	.word	0x0800f9d7
 800f954:	0800f9d7 	.word	0x0800f9d7
 800f958:	0800f9d7 	.word	0x0800f9d7
 800f95c:	0800f9d7 	.word	0x0800f9d7
 800f960:	0800f993 	.word	0x0800f993
 800f964:	0800f9bd 	.word	0x0800f9bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	2b03      	cmp	r3, #3
 800f972:	d107      	bne.n	800f984 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f974:	f107 030a 	add.w	r3, r7, #10
 800f978:	2202      	movs	r2, #2
 800f97a:	4619      	mov	r1, r3
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f001 fd67 	bl	8011450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f982:	e032      	b.n	800f9ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f001 fce5 	bl	8011356 <USBD_CtlError>
            ret = USBD_FAIL;
 800f98c:	2303      	movs	r3, #3
 800f98e:	75fb      	strb	r3, [r7, #23]
          break;
 800f990:	e02b      	b.n	800f9ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d107      	bne.n	800f9ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f99e:	f107 030d 	add.w	r3, r7, #13
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f001 fd52 	bl	8011450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f9ac:	e01d      	b.n	800f9ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f9ae:	6839      	ldr	r1, [r7, #0]
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f001 fcd0 	bl	8011356 <USBD_CtlError>
            ret = USBD_FAIL;
 800f9b6:	2303      	movs	r3, #3
 800f9b8:	75fb      	strb	r3, [r7, #23]
          break;
 800f9ba:	e016      	b.n	800f9ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b03      	cmp	r3, #3
 800f9c6:	d00f      	beq.n	800f9e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f001 fcc3 	bl	8011356 <USBD_CtlError>
            ret = USBD_FAIL;
 800f9d0:	2303      	movs	r3, #3
 800f9d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f9d4:	e008      	b.n	800f9e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f001 fcbc 	bl	8011356 <USBD_CtlError>
          ret = USBD_FAIL;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	75fb      	strb	r3, [r7, #23]
          break;
 800f9e2:	e002      	b.n	800f9ea <USBD_CDC_Setup+0x19e>
          break;
 800f9e4:	bf00      	nop
 800f9e6:	e008      	b.n	800f9fa <USBD_CDC_Setup+0x1ae>
          break;
 800f9e8:	bf00      	nop
      }
      break;
 800f9ea:	e006      	b.n	800f9fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f001 fcb1 	bl	8011356 <USBD_CtlError>
      ret = USBD_FAIL;
 800f9f4:	2303      	movs	r3, #3
 800f9f6:	75fb      	strb	r3, [r7, #23]
      break;
 800f9f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3718      	adds	r7, #24
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	32b0      	adds	r2, #176	@ 0xb0
 800fa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d101      	bne.n	800fa2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	e065      	b.n	800fafa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	32b0      	adds	r2, #176	@ 0xb0
 800fa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fa3e:	78fb      	ldrb	r3, [r7, #3]
 800fa40:	f003 020f 	and.w	r2, r3, #15
 800fa44:	6879      	ldr	r1, [r7, #4]
 800fa46:	4613      	mov	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4413      	add	r3, r2
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	440b      	add	r3, r1
 800fa50:	3318      	adds	r3, #24
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d02f      	beq.n	800fab8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fa58:	78fb      	ldrb	r3, [r7, #3]
 800fa5a:	f003 020f 	and.w	r2, r3, #15
 800fa5e:	6879      	ldr	r1, [r7, #4]
 800fa60:	4613      	mov	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	440b      	add	r3, r1
 800fa6a:	3318      	adds	r3, #24
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	78fb      	ldrb	r3, [r7, #3]
 800fa70:	f003 010f 	and.w	r1, r3, #15
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	460b      	mov	r3, r1
 800fa78:	00db      	lsls	r3, r3, #3
 800fa7a:	440b      	add	r3, r1
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4403      	add	r3, r0
 800fa80:	331c      	adds	r3, #28
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	fbb2 f1f3 	udiv	r1, r2, r3
 800fa88:	fb01 f303 	mul.w	r3, r1, r3
 800fa8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d112      	bne.n	800fab8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fa92:	78fb      	ldrb	r3, [r7, #3]
 800fa94:	f003 020f 	and.w	r2, r3, #15
 800fa98:	6879      	ldr	r1, [r7, #4]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	440b      	add	r3, r1
 800faa4:	3318      	adds	r3, #24
 800faa6:	2200      	movs	r2, #0
 800faa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800faaa:	78f9      	ldrb	r1, [r7, #3]
 800faac:	2300      	movs	r3, #0
 800faae:	2200      	movs	r2, #0
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f002 fa04 	bl	8011ebe <USBD_LL_Transmit>
 800fab6:	e01f      	b.n	800faf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2200      	movs	r2, #0
 800fabc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	33b0      	adds	r3, #176	@ 0xb0
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	691b      	ldr	r3, [r3, #16]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d010      	beq.n	800faf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	33b0      	adds	r3, #176	@ 0xb0
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	691b      	ldr	r3, [r3, #16]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800faf4:	78fa      	ldrb	r2, [r7, #3]
 800faf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800faf8:	2300      	movs	r3, #0
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b084      	sub	sp, #16
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	32b0      	adds	r2, #176	@ 0xb0
 800fb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	32b0      	adds	r2, #176	@ 0xb0
 800fb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d101      	bne.n	800fb34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fb30:	2303      	movs	r3, #3
 800fb32:	e01a      	b.n	800fb6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fb34:	78fb      	ldrb	r3, [r7, #3]
 800fb36:	4619      	mov	r1, r3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f002 fa02 	bl	8011f42 <USBD_LL_GetRxDataSize>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	33b0      	adds	r3, #176	@ 0xb0
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	4413      	add	r3, r2
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fb5e:	68fa      	ldr	r2, [r7, #12]
 800fb60:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fb64:	4611      	mov	r1, r2
 800fb66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b084      	sub	sp, #16
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	32b0      	adds	r2, #176	@ 0xb0
 800fb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fb90:	2303      	movs	r3, #3
 800fb92:	e024      	b.n	800fbde <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	33b0      	adds	r3, #176	@ 0xb0
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	4413      	add	r3, r2
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d019      	beq.n	800fbdc <USBD_CDC_EP0_RxReady+0x6a>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fbae:	2bff      	cmp	r3, #255	@ 0xff
 800fbb0:	d014      	beq.n	800fbdc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	33b0      	adds	r3, #176	@ 0xb0
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fbca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fbd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	22ff      	movs	r2, #255	@ 0xff
 800fbd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b086      	sub	sp, #24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fbf0:	2182      	movs	r1, #130	@ 0x82
 800fbf2:	4818      	ldr	r0, [pc, #96]	@ (800fc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fbf4:	f000 fd4f 	bl	8010696 <USBD_GetEpDesc>
 800fbf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	4815      	ldr	r0, [pc, #84]	@ (800fc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fbfe:	f000 fd4a 	bl	8010696 <USBD_GetEpDesc>
 800fc02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc04:	2181      	movs	r1, #129	@ 0x81
 800fc06:	4813      	ldr	r0, [pc, #76]	@ (800fc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fc08:	f000 fd45 	bl	8010696 <USBD_GetEpDesc>
 800fc0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	2210      	movs	r2, #16
 800fc18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d006      	beq.n	800fc2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fc28:	711a      	strb	r2, [r3, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d006      	beq.n	800fc42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fc3c:	711a      	strb	r2, [r3, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2243      	movs	r2, #67	@ 0x43
 800fc46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fc48:	4b02      	ldr	r3, [pc, #8]	@ (800fc54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3718      	adds	r7, #24
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	24000058 	.word	0x24000058

0800fc58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b086      	sub	sp, #24
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fc60:	2182      	movs	r1, #130	@ 0x82
 800fc62:	4818      	ldr	r0, [pc, #96]	@ (800fcc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc64:	f000 fd17 	bl	8010696 <USBD_GetEpDesc>
 800fc68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fc6a:	2101      	movs	r1, #1
 800fc6c:	4815      	ldr	r0, [pc, #84]	@ (800fcc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc6e:	f000 fd12 	bl	8010696 <USBD_GetEpDesc>
 800fc72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc74:	2181      	movs	r1, #129	@ 0x81
 800fc76:	4813      	ldr	r0, [pc, #76]	@ (800fcc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fc78:	f000 fd0d 	bl	8010696 <USBD_GetEpDesc>
 800fc7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2210      	movs	r2, #16
 800fc88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d006      	beq.n	800fc9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	2200      	movs	r2, #0
 800fc94:	711a      	strb	r2, [r3, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	f042 0202 	orr.w	r2, r2, #2
 800fc9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d006      	beq.n	800fcb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	711a      	strb	r2, [r3, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f042 0202 	orr.w	r2, r2, #2
 800fcb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2243      	movs	r2, #67	@ 0x43
 800fcb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fcb8:	4b02      	ldr	r3, [pc, #8]	@ (800fcc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3718      	adds	r7, #24
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	24000058 	.word	0x24000058

0800fcc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fcd0:	2182      	movs	r1, #130	@ 0x82
 800fcd2:	4818      	ldr	r0, [pc, #96]	@ (800fd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fcd4:	f000 fcdf 	bl	8010696 <USBD_GetEpDesc>
 800fcd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fcda:	2101      	movs	r1, #1
 800fcdc:	4815      	ldr	r0, [pc, #84]	@ (800fd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fcde:	f000 fcda 	bl	8010696 <USBD_GetEpDesc>
 800fce2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fce4:	2181      	movs	r1, #129	@ 0x81
 800fce6:	4813      	ldr	r0, [pc, #76]	@ (800fd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fce8:	f000 fcd5 	bl	8010696 <USBD_GetEpDesc>
 800fcec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	2210      	movs	r2, #16
 800fcf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d006      	beq.n	800fd0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd08:	711a      	strb	r2, [r3, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d006      	beq.n	800fd22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2200      	movs	r2, #0
 800fd18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd1c:	711a      	strb	r2, [r3, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2243      	movs	r2, #67	@ 0x43
 800fd26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fd28:	4b02      	ldr	r3, [pc, #8]	@ (800fd34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	24000058 	.word	0x24000058

0800fd38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b083      	sub	sp, #12
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	220a      	movs	r2, #10
 800fd44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fd46:	4b03      	ldr	r3, [pc, #12]	@ (800fd54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr
 800fd54:	24000014 	.word	0x24000014

0800fd58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d101      	bne.n	800fd6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fd68:	2303      	movs	r3, #3
 800fd6a:	e009      	b.n	800fd80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	33b0      	adds	r3, #176	@ 0xb0
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	4413      	add	r3, r2
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b087      	sub	sp, #28
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	32b0      	adds	r2, #176	@ 0xb0
 800fda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d101      	bne.n	800fdb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fdae:	2303      	movs	r3, #3
 800fdb0:	e008      	b.n	800fdc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	371c      	adds	r7, #28
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	32b0      	adds	r2, #176	@ 0xb0
 800fde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d101      	bne.n	800fdf4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fdf0:	2303      	movs	r3, #3
 800fdf2:	e004      	b.n	800fdfe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3714      	adds	r7, #20
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
	...

0800fe0c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	32b0      	adds	r2, #176	@ 0xb0
 800fe1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe22:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fe24:	2301      	movs	r3, #1
 800fe26:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d101      	bne.n	800fe32 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fe2e:	2303      	movs	r3, #3
 800fe30:	e025      	b.n	800fe7e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d11f      	bne.n	800fe7c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fe44:	4b10      	ldr	r3, [pc, #64]	@ (800fe88 <USBD_CDC_TransmitPacket+0x7c>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f003 020f 	and.w	r2, r3, #15
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	4613      	mov	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4403      	add	r3, r0
 800fe5e:	3318      	adds	r3, #24
 800fe60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fe62:	4b09      	ldr	r3, [pc, #36]	@ (800fe88 <USBD_CDC_TransmitPacket+0x7c>)
 800fe64:	7819      	ldrb	r1, [r3, #0]
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f002 f823 	bl	8011ebe <USBD_LL_Transmit>

    ret = USBD_OK;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	2400009b 	.word	0x2400009b

0800fe8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	32b0      	adds	r2, #176	@ 0xb0
 800fe9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	32b0      	adds	r2, #176	@ 0xb0
 800feae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d101      	bne.n	800feba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800feb6:	2303      	movs	r3, #3
 800feb8:	e018      	b.n	800feec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	7c1b      	ldrb	r3, [r3, #16]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10a      	bne.n	800fed8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fec2:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <USBD_CDC_ReceivePacket+0x68>)
 800fec4:	7819      	ldrb	r1, [r3, #0]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f002 f815 	bl	8011f00 <USBD_LL_PrepareReceive>
 800fed6:	e008      	b.n	800feea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fed8:	4b06      	ldr	r3, [pc, #24]	@ (800fef4 <USBD_CDC_ReceivePacket+0x68>)
 800feda:	7819      	ldrb	r1, [r3, #0]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fee2:	2340      	movs	r3, #64	@ 0x40
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f002 f80b 	bl	8011f00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	2400009c 	.word	0x2400009c

0800fef8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b086      	sub	sp, #24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	4613      	mov	r3, r2
 800ff04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d101      	bne.n	800ff10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e01f      	b.n	800ff50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2200      	movs	r2, #0
 800ff14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2200      	movs	r2, #0
 800ff24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d003      	beq.n	800ff36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	68ba      	ldr	r2, [r7, #8]
 800ff32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	79fa      	ldrb	r2, [r7, #7]
 800ff42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f001 fe81 	bl	8011c4c <USBD_LL_Init>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ff4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3718      	adds	r7, #24
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ff62:	2300      	movs	r3, #0
 800ff64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d101      	bne.n	800ff70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ff6c:	2303      	movs	r3, #3
 800ff6e:	e025      	b.n	800ffbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	683a      	ldr	r2, [r7, #0]
 800ff74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	32ae      	adds	r2, #174	@ 0xae
 800ff82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d00f      	beq.n	800ffac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	32ae      	adds	r2, #174	@ 0xae
 800ff96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff9c:	f107 020e 	add.w	r2, r7, #14
 800ffa0:	4610      	mov	r0, r2
 800ffa2:	4798      	blx	r3
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f001 fe8d 	bl	8011cec <USBD_LL_Start>
 800ffd2:	4603      	mov	r3, r0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ffe4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	370c      	adds	r7, #12
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b084      	sub	sp, #16
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	460b      	mov	r3, r1
 800fffc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010008:	2b00      	cmp	r3, #0
 801000a:	d009      	beq.n	8010020 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	78fa      	ldrb	r2, [r7, #3]
 8010016:	4611      	mov	r1, r2
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	4798      	blx	r3
 801001c:	4603      	mov	r3, r0
 801001e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010020:	7bfb      	ldrb	r3, [r7, #15]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b084      	sub	sp, #16
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
 8010032:	460b      	mov	r3, r1
 8010034:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010036:	2300      	movs	r3, #0
 8010038:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	78fa      	ldrb	r2, [r7, #3]
 8010044:	4611      	mov	r1, r2
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	4798      	blx	r3
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010050:	2303      	movs	r3, #3
 8010052:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010054:	7bfb      	ldrb	r3, [r7, #15]
}
 8010056:	4618      	mov	r0, r3
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801005e:	b580      	push	{r7, lr}
 8010060:	b084      	sub	sp, #16
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	4618      	mov	r0, r3
 8010072:	f001 f936 	bl	80112e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010084:	461a      	mov	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010092:	f003 031f 	and.w	r3, r3, #31
 8010096:	2b02      	cmp	r3, #2
 8010098:	d01a      	beq.n	80100d0 <USBD_LL_SetupStage+0x72>
 801009a:	2b02      	cmp	r3, #2
 801009c:	d822      	bhi.n	80100e4 <USBD_LL_SetupStage+0x86>
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d002      	beq.n	80100a8 <USBD_LL_SetupStage+0x4a>
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d00a      	beq.n	80100bc <USBD_LL_SetupStage+0x5e>
 80100a6:	e01d      	b.n	80100e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80100ae:	4619      	mov	r1, r3
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fb63 	bl	801077c <USBD_StdDevReq>
 80100b6:	4603      	mov	r3, r0
 80100b8:	73fb      	strb	r3, [r7, #15]
      break;
 80100ba:	e020      	b.n	80100fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80100c2:	4619      	mov	r1, r3
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fbcb 	bl	8010860 <USBD_StdItfReq>
 80100ca:	4603      	mov	r3, r0
 80100cc:	73fb      	strb	r3, [r7, #15]
      break;
 80100ce:	e016      	b.n	80100fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fc2d 	bl	8010938 <USBD_StdEPReq>
 80100de:	4603      	mov	r3, r0
 80100e0:	73fb      	strb	r3, [r7, #15]
      break;
 80100e2:	e00c      	b.n	80100fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80100ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	4619      	mov	r1, r3
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f001 fe5a 	bl	8011dac <USBD_LL_StallEP>
 80100f8:	4603      	mov	r3, r0
 80100fa:	73fb      	strb	r3, [r7, #15]
      break;
 80100fc:	bf00      	nop
  }

  return ret;
 80100fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b086      	sub	sp, #24
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	460b      	mov	r3, r1
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801011a:	7afb      	ldrb	r3, [r7, #11]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d16e      	bne.n	80101fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010126:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801012e:	2b03      	cmp	r3, #3
 8010130:	f040 8098 	bne.w	8010264 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	689a      	ldr	r2, [r3, #8]
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	429a      	cmp	r2, r3
 801013e:	d913      	bls.n	8010168 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	689a      	ldr	r2, [r3, #8]
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	1ad2      	subs	r2, r2, r3
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	68da      	ldr	r2, [r3, #12]
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	4293      	cmp	r3, r2
 8010158:	bf28      	it	cs
 801015a:	4613      	movcs	r3, r2
 801015c:	461a      	mov	r2, r3
 801015e:	6879      	ldr	r1, [r7, #4]
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f001 f9be 	bl	80114e2 <USBD_CtlContinueRx>
 8010166:	e07d      	b.n	8010264 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801016e:	f003 031f 	and.w	r3, r3, #31
 8010172:	2b02      	cmp	r3, #2
 8010174:	d014      	beq.n	80101a0 <USBD_LL_DataOutStage+0x98>
 8010176:	2b02      	cmp	r3, #2
 8010178:	d81d      	bhi.n	80101b6 <USBD_LL_DataOutStage+0xae>
 801017a:	2b00      	cmp	r3, #0
 801017c:	d002      	beq.n	8010184 <USBD_LL_DataOutStage+0x7c>
 801017e:	2b01      	cmp	r3, #1
 8010180:	d003      	beq.n	801018a <USBD_LL_DataOutStage+0x82>
 8010182:	e018      	b.n	80101b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010184:	2300      	movs	r3, #0
 8010186:	75bb      	strb	r3, [r7, #22]
            break;
 8010188:	e018      	b.n	80101bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010190:	b2db      	uxtb	r3, r3
 8010192:	4619      	mov	r1, r3
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f000 fa64 	bl	8010662 <USBD_CoreFindIF>
 801019a:	4603      	mov	r3, r0
 801019c:	75bb      	strb	r3, [r7, #22]
            break;
 801019e:	e00d      	b.n	80101bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	4619      	mov	r1, r3
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f000 fa66 	bl	801067c <USBD_CoreFindEP>
 80101b0:	4603      	mov	r3, r0
 80101b2:	75bb      	strb	r3, [r7, #22]
            break;
 80101b4:	e002      	b.n	80101bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80101b6:	2300      	movs	r3, #0
 80101b8:	75bb      	strb	r3, [r7, #22]
            break;
 80101ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80101bc:	7dbb      	ldrb	r3, [r7, #22]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d119      	bne.n	80101f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	d113      	bne.n	80101f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80101ce:	7dba      	ldrb	r2, [r7, #22]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	32ae      	adds	r2, #174	@ 0xae
 80101d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00b      	beq.n	80101f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80101de:	7dba      	ldrb	r2, [r7, #22]
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80101e6:	7dba      	ldrb	r2, [r7, #22]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	32ae      	adds	r2, #174	@ 0xae
 80101ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f001 f984 	bl	8011504 <USBD_CtlSendStatus>
 80101fc:	e032      	b.n	8010264 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80101fe:	7afb      	ldrb	r3, [r7, #11]
 8010200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010204:	b2db      	uxtb	r3, r3
 8010206:	4619      	mov	r1, r3
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f000 fa37 	bl	801067c <USBD_CoreFindEP>
 801020e:	4603      	mov	r3, r0
 8010210:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010212:	7dbb      	ldrb	r3, [r7, #22]
 8010214:	2bff      	cmp	r3, #255	@ 0xff
 8010216:	d025      	beq.n	8010264 <USBD_LL_DataOutStage+0x15c>
 8010218:	7dbb      	ldrb	r3, [r7, #22]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d122      	bne.n	8010264 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010224:	b2db      	uxtb	r3, r3
 8010226:	2b03      	cmp	r3, #3
 8010228:	d117      	bne.n	801025a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801022a:	7dba      	ldrb	r2, [r7, #22]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	32ae      	adds	r2, #174	@ 0xae
 8010230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010234:	699b      	ldr	r3, [r3, #24]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00f      	beq.n	801025a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801023a:	7dba      	ldrb	r2, [r7, #22]
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010242:	7dba      	ldrb	r2, [r7, #22]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	32ae      	adds	r2, #174	@ 0xae
 8010248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801024c:	699b      	ldr	r3, [r3, #24]
 801024e:	7afa      	ldrb	r2, [r7, #11]
 8010250:	4611      	mov	r1, r2
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	4798      	blx	r3
 8010256:	4603      	mov	r3, r0
 8010258:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801025a:	7dfb      	ldrb	r3, [r7, #23]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d001      	beq.n	8010264 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	e000      	b.n	8010266 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b086      	sub	sp, #24
 8010272:	af00      	add	r7, sp, #0
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	460b      	mov	r3, r1
 8010278:	607a      	str	r2, [r7, #4]
 801027a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801027c:	7afb      	ldrb	r3, [r7, #11]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d16f      	bne.n	8010362 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	3314      	adds	r3, #20
 8010286:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801028e:	2b02      	cmp	r3, #2
 8010290:	d15a      	bne.n	8010348 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	689a      	ldr	r2, [r3, #8]
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	429a      	cmp	r2, r3
 801029c:	d914      	bls.n	80102c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	689a      	ldr	r2, [r3, #8]
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	1ad2      	subs	r2, r2, r3
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	461a      	mov	r2, r3
 80102b2:	6879      	ldr	r1, [r7, #4]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f001 f8e6 	bl	8011486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102ba:	2300      	movs	r3, #0
 80102bc:	2200      	movs	r2, #0
 80102be:	2100      	movs	r1, #0
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f001 fe1d 	bl	8011f00 <USBD_LL_PrepareReceive>
 80102c6:	e03f      	b.n	8010348 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	68da      	ldr	r2, [r3, #12]
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d11c      	bne.n	801030e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	685a      	ldr	r2, [r3, #4]
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80102dc:	429a      	cmp	r2, r3
 80102de:	d316      	bcc.n	801030e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d20f      	bcs.n	801030e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80102ee:	2200      	movs	r2, #0
 80102f0:	2100      	movs	r1, #0
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f001 f8c7 	bl	8011486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2200      	movs	r2, #0
 80102fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010300:	2300      	movs	r3, #0
 8010302:	2200      	movs	r2, #0
 8010304:	2100      	movs	r1, #0
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f001 fdfa 	bl	8011f00 <USBD_LL_PrepareReceive>
 801030c:	e01c      	b.n	8010348 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b03      	cmp	r3, #3
 8010318:	d10f      	bne.n	801033a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d009      	beq.n	801033a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801033a:	2180      	movs	r1, #128	@ 0x80
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f001 fd35 	bl	8011dac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f001 f8f1 	bl	801152a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d03a      	beq.n	80103c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7ff fe42 	bl	800ffdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2200      	movs	r2, #0
 801035c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010360:	e032      	b.n	80103c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010362:	7afb      	ldrb	r3, [r7, #11]
 8010364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010368:	b2db      	uxtb	r3, r3
 801036a:	4619      	mov	r1, r3
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 f985 	bl	801067c <USBD_CoreFindEP>
 8010372:	4603      	mov	r3, r0
 8010374:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010376:	7dfb      	ldrb	r3, [r7, #23]
 8010378:	2bff      	cmp	r3, #255	@ 0xff
 801037a:	d025      	beq.n	80103c8 <USBD_LL_DataInStage+0x15a>
 801037c:	7dfb      	ldrb	r3, [r7, #23]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d122      	bne.n	80103c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b03      	cmp	r3, #3
 801038c:	d11c      	bne.n	80103c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801038e:	7dfa      	ldrb	r2, [r7, #23]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	32ae      	adds	r2, #174	@ 0xae
 8010394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010398:	695b      	ldr	r3, [r3, #20]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d014      	beq.n	80103c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801039e:	7dfa      	ldrb	r2, [r7, #23]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80103a6:	7dfa      	ldrb	r2, [r7, #23]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	32ae      	adds	r2, #174	@ 0xae
 80103ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b0:	695b      	ldr	r3, [r3, #20]
 80103b2:	7afa      	ldrb	r2, [r7, #11]
 80103b4:	4611      	mov	r1, r2
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	4798      	blx	r3
 80103ba:	4603      	mov	r3, r0
 80103bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80103be:	7dbb      	ldrb	r3, [r7, #22]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d001      	beq.n	80103c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80103c4:	7dbb      	ldrb	r3, [r7, #22]
 80103c6:	e000      	b.n	80103ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3718      	adds	r7, #24
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b084      	sub	sp, #16
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80103da:	2300      	movs	r3, #0
 80103dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2201      	movs	r2, #1
 80103e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801040a:	2b00      	cmp	r3, #0
 801040c:	d014      	beq.n	8010438 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00e      	beq.n	8010438 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	6852      	ldr	r2, [r2, #4]
 8010426:	b2d2      	uxtb	r2, r2
 8010428:	4611      	mov	r1, r2
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	4798      	blx	r3
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d001      	beq.n	8010438 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010434:	2303      	movs	r3, #3
 8010436:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010438:	2340      	movs	r3, #64	@ 0x40
 801043a:	2200      	movs	r2, #0
 801043c:	2100      	movs	r1, #0
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f001 fc6f 	bl	8011d22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2201      	movs	r2, #1
 8010448:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2240      	movs	r2, #64	@ 0x40
 8010450:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010454:	2340      	movs	r3, #64	@ 0x40
 8010456:	2200      	movs	r2, #0
 8010458:	2180      	movs	r1, #128	@ 0x80
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f001 fc61 	bl	8011d22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2240      	movs	r2, #64	@ 0x40
 801046a:	621a      	str	r2, [r3, #32]

  return ret;
 801046c:	7bfb      	ldrb	r3, [r7, #15]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010476:	b480      	push	{r7}
 8010478:	b083      	sub	sp, #12
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	460b      	mov	r3, r1
 8010480:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	78fa      	ldrb	r2, [r7, #3]
 8010486:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	370c      	adds	r7, #12
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr

08010496 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010496:	b480      	push	{r7}
 8010498:	b083      	sub	sp, #12
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104a4:	b2db      	uxtb	r3, r3
 80104a6:	2b04      	cmp	r3, #4
 80104a8:	d006      	beq.n	80104b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2204      	movs	r2, #4
 80104bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80104c0:	2300      	movs	r3, #0
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	370c      	adds	r7, #12
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr

080104ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80104ce:	b480      	push	{r7}
 80104d0:	b083      	sub	sp, #12
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	2b04      	cmp	r3, #4
 80104e0:	d106      	bne.n	80104f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80104fe:	b580      	push	{r7, lr}
 8010500:	b082      	sub	sp, #8
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801050c:	b2db      	uxtb	r3, r3
 801050e:	2b03      	cmp	r3, #3
 8010510:	d110      	bne.n	8010534 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00b      	beq.n	8010534 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d005      	beq.n	8010534 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801052e:	69db      	ldr	r3, [r3, #28]
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010534:	2300      	movs	r3, #0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801053e:	b580      	push	{r7, lr}
 8010540:	b082      	sub	sp, #8
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
 8010546:	460b      	mov	r3, r1
 8010548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	32ae      	adds	r2, #174	@ 0xae
 8010554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d101      	bne.n	8010560 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801055c:	2303      	movs	r3, #3
 801055e:	e01c      	b.n	801059a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b03      	cmp	r3, #3
 801056a:	d115      	bne.n	8010598 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	32ae      	adds	r2, #174	@ 0xae
 8010576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801057a:	6a1b      	ldr	r3, [r3, #32]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00b      	beq.n	8010598 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	32ae      	adds	r2, #174	@ 0xae
 801058a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801058e:	6a1b      	ldr	r3, [r3, #32]
 8010590:	78fa      	ldrb	r2, [r7, #3]
 8010592:	4611      	mov	r1, r2
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b082      	sub	sp, #8
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	460b      	mov	r3, r1
 80105ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	32ae      	adds	r2, #174	@ 0xae
 80105b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d101      	bne.n	80105c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80105c0:	2303      	movs	r3, #3
 80105c2:	e01c      	b.n	80105fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b03      	cmp	r3, #3
 80105ce:	d115      	bne.n	80105fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	32ae      	adds	r2, #174	@ 0xae
 80105da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00b      	beq.n	80105fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	32ae      	adds	r2, #174	@ 0xae
 80105ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105f4:	78fa      	ldrb	r2, [r7, #3]
 80105f6:	4611      	mov	r1, r2
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80105fc:	2300      	movs	r3, #0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801060e:	2300      	movs	r3, #0
}
 8010610:	4618      	mov	r0, r3
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr

0801061c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010624:	2300      	movs	r3, #0
 8010626:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2201      	movs	r2, #1
 801062c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00e      	beq.n	8010658 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	6852      	ldr	r2, [r2, #4]
 8010646:	b2d2      	uxtb	r2, r2
 8010648:	4611      	mov	r1, r2
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	4798      	blx	r3
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010654:	2303      	movs	r3, #3
 8010656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010658:	7bfb      	ldrb	r3, [r7, #15]
}
 801065a:	4618      	mov	r0, r3
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010662:	b480      	push	{r7}
 8010664:	b083      	sub	sp, #12
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	460b      	mov	r3, r1
 801066c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801066e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010670:	4618      	mov	r0, r3
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	460b      	mov	r3, r1
 8010686:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010688:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801068a:	4618      	mov	r0, r3
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr

08010696 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b086      	sub	sp, #24
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	460b      	mov	r3, r1
 80106a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	885b      	ldrh	r3, [r3, #2]
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	7812      	ldrb	r2, [r2, #0]
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d91f      	bls.n	80106fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80106c2:	e013      	b.n	80106ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80106c4:	f107 030a 	add.w	r3, r7, #10
 80106c8:	4619      	mov	r1, r3
 80106ca:	6978      	ldr	r0, [r7, #20]
 80106cc:	f000 f81b 	bl	8010706 <USBD_GetNextDesc>
 80106d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	785b      	ldrb	r3, [r3, #1]
 80106d6:	2b05      	cmp	r3, #5
 80106d8:	d108      	bne.n	80106ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	789b      	ldrb	r3, [r3, #2]
 80106e2:	78fa      	ldrb	r2, [r7, #3]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d008      	beq.n	80106fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80106e8:	2300      	movs	r3, #0
 80106ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	885b      	ldrh	r3, [r3, #2]
 80106f0:	b29a      	uxth	r2, r3
 80106f2:	897b      	ldrh	r3, [r7, #10]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d8e5      	bhi.n	80106c4 <USBD_GetEpDesc+0x2e>
 80106f8:	e000      	b.n	80106fc <USBD_GetEpDesc+0x66>
          break;
 80106fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80106fc:	693b      	ldr	r3, [r7, #16]
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3718      	adds	r7, #24
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010706:	b480      	push	{r7}
 8010708:	b085      	sub	sp, #20
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	7812      	ldrb	r2, [r2, #0]
 801071c:	4413      	add	r3, r2
 801071e:	b29a      	uxth	r2, r3
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	461a      	mov	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	4413      	add	r3, r2
 801072e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010730:	68fb      	ldr	r3, [r7, #12]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3714      	adds	r7, #20
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801073e:	b480      	push	{r7}
 8010740:	b087      	sub	sp, #28
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	3301      	adds	r3, #1
 8010754:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801075c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010760:	021b      	lsls	r3, r3, #8
 8010762:	b21a      	sxth	r2, r3
 8010764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010768:	4313      	orrs	r3, r2
 801076a:	b21b      	sxth	r3, r3
 801076c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801076e:	89fb      	ldrh	r3, [r7, #14]
}
 8010770:	4618      	mov	r0, r3
 8010772:	371c      	adds	r7, #28
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010786:	2300      	movs	r3, #0
 8010788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010792:	2b40      	cmp	r3, #64	@ 0x40
 8010794:	d005      	beq.n	80107a2 <USBD_StdDevReq+0x26>
 8010796:	2b40      	cmp	r3, #64	@ 0x40
 8010798:	d857      	bhi.n	801084a <USBD_StdDevReq+0xce>
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00f      	beq.n	80107be <USBD_StdDevReq+0x42>
 801079e:	2b20      	cmp	r3, #32
 80107a0:	d153      	bne.n	801084a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	32ae      	adds	r2, #174	@ 0xae
 80107ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107b0:	689b      	ldr	r3, [r3, #8]
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	4798      	blx	r3
 80107b8:	4603      	mov	r3, r0
 80107ba:	73fb      	strb	r3, [r7, #15]
      break;
 80107bc:	e04a      	b.n	8010854 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	785b      	ldrb	r3, [r3, #1]
 80107c2:	2b09      	cmp	r3, #9
 80107c4:	d83b      	bhi.n	801083e <USBD_StdDevReq+0xc2>
 80107c6:	a201      	add	r2, pc, #4	@ (adr r2, 80107cc <USBD_StdDevReq+0x50>)
 80107c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107cc:	08010821 	.word	0x08010821
 80107d0:	08010835 	.word	0x08010835
 80107d4:	0801083f 	.word	0x0801083f
 80107d8:	0801082b 	.word	0x0801082b
 80107dc:	0801083f 	.word	0x0801083f
 80107e0:	080107ff 	.word	0x080107ff
 80107e4:	080107f5 	.word	0x080107f5
 80107e8:	0801083f 	.word	0x0801083f
 80107ec:	08010817 	.word	0x08010817
 80107f0:	08010809 	.word	0x08010809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80107f4:	6839      	ldr	r1, [r7, #0]
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 fa3c 	bl	8010c74 <USBD_GetDescriptor>
          break;
 80107fc:	e024      	b.n	8010848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80107fe:	6839      	ldr	r1, [r7, #0]
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fbcb 	bl	8010f9c <USBD_SetAddress>
          break;
 8010806:	e01f      	b.n	8010848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 fc0a 	bl	8011024 <USBD_SetConfig>
 8010810:	4603      	mov	r3, r0
 8010812:	73fb      	strb	r3, [r7, #15]
          break;
 8010814:	e018      	b.n	8010848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fcad 	bl	8011178 <USBD_GetConfig>
          break;
 801081e:	e013      	b.n	8010848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fcde 	bl	80111e4 <USBD_GetStatus>
          break;
 8010828:	e00e      	b.n	8010848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801082a:	6839      	ldr	r1, [r7, #0]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fd0d 	bl	801124c <USBD_SetFeature>
          break;
 8010832:	e009      	b.n	8010848 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fd31 	bl	801129e <USBD_ClrFeature>
          break;
 801083c:	e004      	b.n	8010848 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fd88 	bl	8011356 <USBD_CtlError>
          break;
 8010846:	bf00      	nop
      }
      break;
 8010848:	e004      	b.n	8010854 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801084a:	6839      	ldr	r1, [r7, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 fd82 	bl	8011356 <USBD_CtlError>
      break;
 8010852:	bf00      	nop
  }

  return ret;
 8010854:	7bfb      	ldrb	r3, [r7, #15]
}
 8010856:	4618      	mov	r0, r3
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop

08010860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801086a:	2300      	movs	r3, #0
 801086c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010876:	2b40      	cmp	r3, #64	@ 0x40
 8010878:	d005      	beq.n	8010886 <USBD_StdItfReq+0x26>
 801087a:	2b40      	cmp	r3, #64	@ 0x40
 801087c:	d852      	bhi.n	8010924 <USBD_StdItfReq+0xc4>
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <USBD_StdItfReq+0x26>
 8010882:	2b20      	cmp	r3, #32
 8010884:	d14e      	bne.n	8010924 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801088c:	b2db      	uxtb	r3, r3
 801088e:	3b01      	subs	r3, #1
 8010890:	2b02      	cmp	r3, #2
 8010892:	d840      	bhi.n	8010916 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	889b      	ldrh	r3, [r3, #4]
 8010898:	b2db      	uxtb	r3, r3
 801089a:	2b01      	cmp	r3, #1
 801089c:	d836      	bhi.n	801090c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	889b      	ldrh	r3, [r3, #4]
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	4619      	mov	r1, r3
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff fedb 	bl	8010662 <USBD_CoreFindIF>
 80108ac:	4603      	mov	r3, r0
 80108ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108b0:	7bbb      	ldrb	r3, [r7, #14]
 80108b2:	2bff      	cmp	r3, #255	@ 0xff
 80108b4:	d01d      	beq.n	80108f2 <USBD_StdItfReq+0x92>
 80108b6:	7bbb      	ldrb	r3, [r7, #14]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d11a      	bne.n	80108f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80108bc:	7bba      	ldrb	r2, [r7, #14]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	32ae      	adds	r2, #174	@ 0xae
 80108c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00f      	beq.n	80108ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80108cc:	7bba      	ldrb	r2, [r7, #14]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80108d4:	7bba      	ldrb	r2, [r7, #14]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	32ae      	adds	r2, #174	@ 0xae
 80108da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108de:	689b      	ldr	r3, [r3, #8]
 80108e0:	6839      	ldr	r1, [r7, #0]
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	4798      	blx	r3
 80108e6:	4603      	mov	r3, r0
 80108e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80108ea:	e004      	b.n	80108f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80108ec:	2303      	movs	r3, #3
 80108ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80108f0:	e001      	b.n	80108f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80108f2:	2303      	movs	r3, #3
 80108f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	88db      	ldrh	r3, [r3, #6]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d110      	bne.n	8010920 <USBD_StdItfReq+0xc0>
 80108fe:	7bfb      	ldrb	r3, [r7, #15]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d10d      	bne.n	8010920 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f000 fdfd 	bl	8011504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801090a:	e009      	b.n	8010920 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fd21 	bl	8011356 <USBD_CtlError>
          break;
 8010914:	e004      	b.n	8010920 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 fd1c 	bl	8011356 <USBD_CtlError>
          break;
 801091e:	e000      	b.n	8010922 <USBD_StdItfReq+0xc2>
          break;
 8010920:	bf00      	nop
      }
      break;
 8010922:	e004      	b.n	801092e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fd15 	bl	8011356 <USBD_CtlError>
      break;
 801092c:	bf00      	nop
  }

  return ret;
 801092e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010930:	4618      	mov	r0, r3
 8010932:	3710      	adds	r7, #16
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	889b      	ldrh	r3, [r3, #4]
 801094a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010954:	2b40      	cmp	r3, #64	@ 0x40
 8010956:	d007      	beq.n	8010968 <USBD_StdEPReq+0x30>
 8010958:	2b40      	cmp	r3, #64	@ 0x40
 801095a:	f200 817f 	bhi.w	8010c5c <USBD_StdEPReq+0x324>
 801095e:	2b00      	cmp	r3, #0
 8010960:	d02a      	beq.n	80109b8 <USBD_StdEPReq+0x80>
 8010962:	2b20      	cmp	r3, #32
 8010964:	f040 817a 	bne.w	8010c5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010968:	7bbb      	ldrb	r3, [r7, #14]
 801096a:	4619      	mov	r1, r3
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7ff fe85 	bl	801067c <USBD_CoreFindEP>
 8010972:	4603      	mov	r3, r0
 8010974:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010976:	7b7b      	ldrb	r3, [r7, #13]
 8010978:	2bff      	cmp	r3, #255	@ 0xff
 801097a:	f000 8174 	beq.w	8010c66 <USBD_StdEPReq+0x32e>
 801097e:	7b7b      	ldrb	r3, [r7, #13]
 8010980:	2b00      	cmp	r3, #0
 8010982:	f040 8170 	bne.w	8010c66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010986:	7b7a      	ldrb	r2, [r7, #13]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801098e:	7b7a      	ldrb	r2, [r7, #13]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	32ae      	adds	r2, #174	@ 0xae
 8010994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	2b00      	cmp	r3, #0
 801099c:	f000 8163 	beq.w	8010c66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80109a0:	7b7a      	ldrb	r2, [r7, #13]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	32ae      	adds	r2, #174	@ 0xae
 80109a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	6839      	ldr	r1, [r7, #0]
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	4798      	blx	r3
 80109b2:	4603      	mov	r3, r0
 80109b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80109b6:	e156      	b.n	8010c66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	785b      	ldrb	r3, [r3, #1]
 80109bc:	2b03      	cmp	r3, #3
 80109be:	d008      	beq.n	80109d2 <USBD_StdEPReq+0x9a>
 80109c0:	2b03      	cmp	r3, #3
 80109c2:	f300 8145 	bgt.w	8010c50 <USBD_StdEPReq+0x318>
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f000 809b 	beq.w	8010b02 <USBD_StdEPReq+0x1ca>
 80109cc:	2b01      	cmp	r3, #1
 80109ce:	d03c      	beq.n	8010a4a <USBD_StdEPReq+0x112>
 80109d0:	e13e      	b.n	8010c50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d002      	beq.n	80109e4 <USBD_StdEPReq+0xac>
 80109de:	2b03      	cmp	r3, #3
 80109e0:	d016      	beq.n	8010a10 <USBD_StdEPReq+0xd8>
 80109e2:	e02c      	b.n	8010a3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109e4:	7bbb      	ldrb	r3, [r7, #14]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00d      	beq.n	8010a06 <USBD_StdEPReq+0xce>
 80109ea:	7bbb      	ldrb	r3, [r7, #14]
 80109ec:	2b80      	cmp	r3, #128	@ 0x80
 80109ee:	d00a      	beq.n	8010a06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f001 f9d9 	bl	8011dac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80109fa:	2180      	movs	r1, #128	@ 0x80
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f001 f9d5 	bl	8011dac <USBD_LL_StallEP>
 8010a02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a04:	e020      	b.n	8010a48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010a06:	6839      	ldr	r1, [r7, #0]
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f000 fca4 	bl	8011356 <USBD_CtlError>
              break;
 8010a0e:	e01b      	b.n	8010a48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	885b      	ldrh	r3, [r3, #2]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10e      	bne.n	8010a36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010a18:	7bbb      	ldrb	r3, [r7, #14]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00b      	beq.n	8010a36 <USBD_StdEPReq+0xfe>
 8010a1e:	7bbb      	ldrb	r3, [r7, #14]
 8010a20:	2b80      	cmp	r3, #128	@ 0x80
 8010a22:	d008      	beq.n	8010a36 <USBD_StdEPReq+0xfe>
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	88db      	ldrh	r3, [r3, #6]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d104      	bne.n	8010a36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a2c:	7bbb      	ldrb	r3, [r7, #14]
 8010a2e:	4619      	mov	r1, r3
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f001 f9bb 	bl	8011dac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 fd64 	bl	8011504 <USBD_CtlSendStatus>

              break;
 8010a3c:	e004      	b.n	8010a48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010a3e:	6839      	ldr	r1, [r7, #0]
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 fc88 	bl	8011356 <USBD_CtlError>
              break;
 8010a46:	bf00      	nop
          }
          break;
 8010a48:	e107      	b.n	8010c5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	2b02      	cmp	r3, #2
 8010a54:	d002      	beq.n	8010a5c <USBD_StdEPReq+0x124>
 8010a56:	2b03      	cmp	r3, #3
 8010a58:	d016      	beq.n	8010a88 <USBD_StdEPReq+0x150>
 8010a5a:	e04b      	b.n	8010af4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a5c:	7bbb      	ldrb	r3, [r7, #14]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00d      	beq.n	8010a7e <USBD_StdEPReq+0x146>
 8010a62:	7bbb      	ldrb	r3, [r7, #14]
 8010a64:	2b80      	cmp	r3, #128	@ 0x80
 8010a66:	d00a      	beq.n	8010a7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a68:	7bbb      	ldrb	r3, [r7, #14]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f001 f99d 	bl	8011dac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a72:	2180      	movs	r1, #128	@ 0x80
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f001 f999 	bl	8011dac <USBD_LL_StallEP>
 8010a7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a7c:	e040      	b.n	8010b00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010a7e:	6839      	ldr	r1, [r7, #0]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fc68 	bl	8011356 <USBD_CtlError>
              break;
 8010a86:	e03b      	b.n	8010b00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	885b      	ldrh	r3, [r3, #2]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d136      	bne.n	8010afe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010a90:	7bbb      	ldrb	r3, [r7, #14]
 8010a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d004      	beq.n	8010aa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a9a:	7bbb      	ldrb	r3, [r7, #14]
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f001 f9a3 	bl	8011dea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 fd2d 	bl	8011504 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010aaa:	7bbb      	ldrb	r3, [r7, #14]
 8010aac:	4619      	mov	r1, r3
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7ff fde4 	bl	801067c <USBD_CoreFindEP>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ab8:	7b7b      	ldrb	r3, [r7, #13]
 8010aba:	2bff      	cmp	r3, #255	@ 0xff
 8010abc:	d01f      	beq.n	8010afe <USBD_StdEPReq+0x1c6>
 8010abe:	7b7b      	ldrb	r3, [r7, #13]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d11c      	bne.n	8010afe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010ac4:	7b7a      	ldrb	r2, [r7, #13]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010acc:	7b7a      	ldrb	r2, [r7, #13]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	32ae      	adds	r2, #174	@ 0xae
 8010ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d010      	beq.n	8010afe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010adc:	7b7a      	ldrb	r2, [r7, #13]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	32ae      	adds	r2, #174	@ 0xae
 8010ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	6839      	ldr	r1, [r7, #0]
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	4798      	blx	r3
 8010aee:	4603      	mov	r3, r0
 8010af0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010af2:	e004      	b.n	8010afe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010af4:	6839      	ldr	r1, [r7, #0]
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fc2d 	bl	8011356 <USBD_CtlError>
              break;
 8010afc:	e000      	b.n	8010b00 <USBD_StdEPReq+0x1c8>
              break;
 8010afe:	bf00      	nop
          }
          break;
 8010b00:	e0ab      	b.n	8010c5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	2b02      	cmp	r3, #2
 8010b0c:	d002      	beq.n	8010b14 <USBD_StdEPReq+0x1dc>
 8010b0e:	2b03      	cmp	r3, #3
 8010b10:	d032      	beq.n	8010b78 <USBD_StdEPReq+0x240>
 8010b12:	e097      	b.n	8010c44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b14:	7bbb      	ldrb	r3, [r7, #14]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d007      	beq.n	8010b2a <USBD_StdEPReq+0x1f2>
 8010b1a:	7bbb      	ldrb	r3, [r7, #14]
 8010b1c:	2b80      	cmp	r3, #128	@ 0x80
 8010b1e:	d004      	beq.n	8010b2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010b20:	6839      	ldr	r1, [r7, #0]
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fc17 	bl	8011356 <USBD_CtlError>
                break;
 8010b28:	e091      	b.n	8010c4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	da0b      	bge.n	8010b4a <USBD_StdEPReq+0x212>
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b38:	4613      	mov	r3, r2
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4413      	add	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	3310      	adds	r3, #16
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	4413      	add	r3, r2
 8010b46:	3304      	adds	r3, #4
 8010b48:	e00b      	b.n	8010b62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b4a:	7bbb      	ldrb	r3, [r7, #14]
 8010b4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b50:	4613      	mov	r3, r2
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4413      	add	r3, r2
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	4413      	add	r3, r2
 8010b60:	3304      	adds	r3, #4
 8010b62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	2200      	movs	r2, #0
 8010b68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	2202      	movs	r2, #2
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 fc6d 	bl	8011450 <USBD_CtlSendData>
              break;
 8010b76:	e06a      	b.n	8010c4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	da11      	bge.n	8010ba4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010b80:	7bbb      	ldrb	r3, [r7, #14]
 8010b82:	f003 020f 	and.w	r2, r3, #15
 8010b86:	6879      	ldr	r1, [r7, #4]
 8010b88:	4613      	mov	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	440b      	add	r3, r1
 8010b92:	3324      	adds	r3, #36	@ 0x24
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d117      	bne.n	8010bca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010b9a:	6839      	ldr	r1, [r7, #0]
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f000 fbda 	bl	8011356 <USBD_CtlError>
                  break;
 8010ba2:	e054      	b.n	8010c4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
 8010ba6:	f003 020f 	and.w	r2, r3, #15
 8010baa:	6879      	ldr	r1, [r7, #4]
 8010bac:	4613      	mov	r3, r2
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	4413      	add	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	440b      	add	r3, r1
 8010bb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010bba:	881b      	ldrh	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d104      	bne.n	8010bca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fbc7 	bl	8011356 <USBD_CtlError>
                  break;
 8010bc8:	e041      	b.n	8010c4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	da0b      	bge.n	8010bea <USBD_StdEPReq+0x2b2>
 8010bd2:	7bbb      	ldrb	r3, [r7, #14]
 8010bd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	3310      	adds	r3, #16
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	4413      	add	r3, r2
 8010be6:	3304      	adds	r3, #4
 8010be8:	e00b      	b.n	8010c02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010bea:	7bbb      	ldrb	r3, [r7, #14]
 8010bec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	4413      	add	r3, r2
 8010bf6:	009b      	lsls	r3, r3, #2
 8010bf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	4413      	add	r3, r2
 8010c00:	3304      	adds	r3, #4
 8010c02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c04:	7bbb      	ldrb	r3, [r7, #14]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d002      	beq.n	8010c10 <USBD_StdEPReq+0x2d8>
 8010c0a:	7bbb      	ldrb	r3, [r7, #14]
 8010c0c:	2b80      	cmp	r3, #128	@ 0x80
 8010c0e:	d103      	bne.n	8010c18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2200      	movs	r2, #0
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	e00e      	b.n	8010c36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010c18:	7bbb      	ldrb	r3, [r7, #14]
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f001 f903 	bl	8011e28 <USBD_LL_IsStallEP>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d003      	beq.n	8010c30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	601a      	str	r2, [r3, #0]
 8010c2e:	e002      	b.n	8010c36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2200      	movs	r2, #0
 8010c34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	2202      	movs	r2, #2
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f000 fc07 	bl	8011450 <USBD_CtlSendData>
              break;
 8010c42:	e004      	b.n	8010c4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fb85 	bl	8011356 <USBD_CtlError>
              break;
 8010c4c:	bf00      	nop
          }
          break;
 8010c4e:	e004      	b.n	8010c5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 fb7f 	bl	8011356 <USBD_CtlError>
          break;
 8010c58:	bf00      	nop
      }
      break;
 8010c5a:	e005      	b.n	8010c68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010c5c:	6839      	ldr	r1, [r7, #0]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 fb79 	bl	8011356 <USBD_CtlError>
      break;
 8010c64:	e000      	b.n	8010c68 <USBD_StdEPReq+0x330>
      break;
 8010c66:	bf00      	nop
  }

  return ret;
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010c86:	2300      	movs	r3, #0
 8010c88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	885b      	ldrh	r3, [r3, #2]
 8010c8e:	0a1b      	lsrs	r3, r3, #8
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	3b01      	subs	r3, #1
 8010c94:	2b0e      	cmp	r3, #14
 8010c96:	f200 8152 	bhi.w	8010f3e <USBD_GetDescriptor+0x2ca>
 8010c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8010ca0 <USBD_GetDescriptor+0x2c>)
 8010c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca0:	08010d11 	.word	0x08010d11
 8010ca4:	08010d29 	.word	0x08010d29
 8010ca8:	08010d69 	.word	0x08010d69
 8010cac:	08010f3f 	.word	0x08010f3f
 8010cb0:	08010f3f 	.word	0x08010f3f
 8010cb4:	08010edf 	.word	0x08010edf
 8010cb8:	08010f0b 	.word	0x08010f0b
 8010cbc:	08010f3f 	.word	0x08010f3f
 8010cc0:	08010f3f 	.word	0x08010f3f
 8010cc4:	08010f3f 	.word	0x08010f3f
 8010cc8:	08010f3f 	.word	0x08010f3f
 8010ccc:	08010f3f 	.word	0x08010f3f
 8010cd0:	08010f3f 	.word	0x08010f3f
 8010cd4:	08010f3f 	.word	0x08010f3f
 8010cd8:	08010cdd 	.word	0x08010cdd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ce2:	69db      	ldr	r3, [r3, #28]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d00b      	beq.n	8010d00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cee:	69db      	ldr	r3, [r3, #28]
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	7c12      	ldrb	r2, [r2, #16]
 8010cf4:	f107 0108 	add.w	r1, r7, #8
 8010cf8:	4610      	mov	r0, r2
 8010cfa:	4798      	blx	r3
 8010cfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cfe:	e126      	b.n	8010f4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010d00:	6839      	ldr	r1, [r7, #0]
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f000 fb27 	bl	8011356 <USBD_CtlError>
        err++;
 8010d08:	7afb      	ldrb	r3, [r7, #11]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	72fb      	strb	r3, [r7, #11]
      break;
 8010d0e:	e11e      	b.n	8010f4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	7c12      	ldrb	r2, [r2, #16]
 8010d1c:	f107 0108 	add.w	r1, r7, #8
 8010d20:	4610      	mov	r0, r2
 8010d22:	4798      	blx	r3
 8010d24:	60f8      	str	r0, [r7, #12]
      break;
 8010d26:	e112      	b.n	8010f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	7c1b      	ldrb	r3, [r3, #16]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10d      	bne.n	8010d4c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d38:	f107 0208 	add.w	r2, r7, #8
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	4798      	blx	r3
 8010d40:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3301      	adds	r3, #1
 8010d46:	2202      	movs	r2, #2
 8010d48:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010d4a:	e100      	b.n	8010f4e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d54:	f107 0208 	add.w	r2, r7, #8
 8010d58:	4610      	mov	r0, r2
 8010d5a:	4798      	blx	r3
 8010d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3301      	adds	r3, #1
 8010d62:	2202      	movs	r2, #2
 8010d64:	701a      	strb	r2, [r3, #0]
      break;
 8010d66:	e0f2      	b.n	8010f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	885b      	ldrh	r3, [r3, #2]
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	2b05      	cmp	r3, #5
 8010d70:	f200 80ac 	bhi.w	8010ecc <USBD_GetDescriptor+0x258>
 8010d74:	a201      	add	r2, pc, #4	@ (adr r2, 8010d7c <USBD_GetDescriptor+0x108>)
 8010d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d7a:	bf00      	nop
 8010d7c:	08010d95 	.word	0x08010d95
 8010d80:	08010dc9 	.word	0x08010dc9
 8010d84:	08010dfd 	.word	0x08010dfd
 8010d88:	08010e31 	.word	0x08010e31
 8010d8c:	08010e65 	.word	0x08010e65
 8010d90:	08010e99 	.word	0x08010e99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00b      	beq.n	8010db8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	7c12      	ldrb	r2, [r2, #16]
 8010dac:	f107 0108 	add.w	r1, r7, #8
 8010db0:	4610      	mov	r0, r2
 8010db2:	4798      	blx	r3
 8010db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010db6:	e091      	b.n	8010edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010db8:	6839      	ldr	r1, [r7, #0]
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 facb 	bl	8011356 <USBD_CtlError>
            err++;
 8010dc0:	7afb      	ldrb	r3, [r7, #11]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8010dc6:	e089      	b.n	8010edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dce:	689b      	ldr	r3, [r3, #8]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00b      	beq.n	8010dec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	7c12      	ldrb	r2, [r2, #16]
 8010de0:	f107 0108 	add.w	r1, r7, #8
 8010de4:	4610      	mov	r0, r2
 8010de6:	4798      	blx	r3
 8010de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dea:	e077      	b.n	8010edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fab1 	bl	8011356 <USBD_CtlError>
            err++;
 8010df4:	7afb      	ldrb	r3, [r7, #11]
 8010df6:	3301      	adds	r3, #1
 8010df8:	72fb      	strb	r3, [r7, #11]
          break;
 8010dfa:	e06f      	b.n	8010edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00b      	beq.n	8010e20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	7c12      	ldrb	r2, [r2, #16]
 8010e14:	f107 0108 	add.w	r1, r7, #8
 8010e18:	4610      	mov	r0, r2
 8010e1a:	4798      	blx	r3
 8010e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e1e:	e05d      	b.n	8010edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa97 	bl	8011356 <USBD_CtlError>
            err++;
 8010e28:	7afb      	ldrb	r3, [r7, #11]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e2e:	e055      	b.n	8010edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e36:	691b      	ldr	r3, [r3, #16]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00b      	beq.n	8010e54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	7c12      	ldrb	r2, [r2, #16]
 8010e48:	f107 0108 	add.w	r1, r7, #8
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4798      	blx	r3
 8010e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e52:	e043      	b.n	8010edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e54:	6839      	ldr	r1, [r7, #0]
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 fa7d 	bl	8011356 <USBD_CtlError>
            err++;
 8010e5c:	7afb      	ldrb	r3, [r7, #11]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	72fb      	strb	r3, [r7, #11]
          break;
 8010e62:	e03b      	b.n	8010edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e6a:	695b      	ldr	r3, [r3, #20]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00b      	beq.n	8010e88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e76:	695b      	ldr	r3, [r3, #20]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	7c12      	ldrb	r2, [r2, #16]
 8010e7c:	f107 0108 	add.w	r1, r7, #8
 8010e80:	4610      	mov	r0, r2
 8010e82:	4798      	blx	r3
 8010e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e86:	e029      	b.n	8010edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e88:	6839      	ldr	r1, [r7, #0]
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fa63 	bl	8011356 <USBD_CtlError>
            err++;
 8010e90:	7afb      	ldrb	r3, [r7, #11]
 8010e92:	3301      	adds	r3, #1
 8010e94:	72fb      	strb	r3, [r7, #11]
          break;
 8010e96:	e021      	b.n	8010edc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e9e:	699b      	ldr	r3, [r3, #24]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00b      	beq.n	8010ebc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010eaa:	699b      	ldr	r3, [r3, #24]
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	7c12      	ldrb	r2, [r2, #16]
 8010eb0:	f107 0108 	add.w	r1, r7, #8
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	4798      	blx	r3
 8010eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010eba:	e00f      	b.n	8010edc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ebc:	6839      	ldr	r1, [r7, #0]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fa49 	bl	8011356 <USBD_CtlError>
            err++;
 8010ec4:	7afb      	ldrb	r3, [r7, #11]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8010eca:	e007      	b.n	8010edc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010ecc:	6839      	ldr	r1, [r7, #0]
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 fa41 	bl	8011356 <USBD_CtlError>
          err++;
 8010ed4:	7afb      	ldrb	r3, [r7, #11]
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010eda:	bf00      	nop
      }
      break;
 8010edc:	e037      	b.n	8010f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	7c1b      	ldrb	r3, [r3, #16]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d109      	bne.n	8010efa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eee:	f107 0208 	add.w	r2, r7, #8
 8010ef2:	4610      	mov	r0, r2
 8010ef4:	4798      	blx	r3
 8010ef6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ef8:	e029      	b.n	8010f4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 fa2a 	bl	8011356 <USBD_CtlError>
        err++;
 8010f02:	7afb      	ldrb	r3, [r7, #11]
 8010f04:	3301      	adds	r3, #1
 8010f06:	72fb      	strb	r3, [r7, #11]
      break;
 8010f08:	e021      	b.n	8010f4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	7c1b      	ldrb	r3, [r3, #16]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d10d      	bne.n	8010f2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f1a:	f107 0208 	add.w	r2, r7, #8
 8010f1e:	4610      	mov	r0, r2
 8010f20:	4798      	blx	r3
 8010f22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	3301      	adds	r3, #1
 8010f28:	2207      	movs	r2, #7
 8010f2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f2c:	e00f      	b.n	8010f4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f2e:	6839      	ldr	r1, [r7, #0]
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 fa10 	bl	8011356 <USBD_CtlError>
        err++;
 8010f36:	7afb      	ldrb	r3, [r7, #11]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8010f3c:	e007      	b.n	8010f4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010f3e:	6839      	ldr	r1, [r7, #0]
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 fa08 	bl	8011356 <USBD_CtlError>
      err++;
 8010f46:	7afb      	ldrb	r3, [r7, #11]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8010f4c:	bf00      	nop
  }

  if (err != 0U)
 8010f4e:	7afb      	ldrb	r3, [r7, #11]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d11e      	bne.n	8010f92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	88db      	ldrh	r3, [r3, #6]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d016      	beq.n	8010f8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010f5c:	893b      	ldrh	r3, [r7, #8]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d00e      	beq.n	8010f80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	88da      	ldrh	r2, [r3, #6]
 8010f66:	893b      	ldrh	r3, [r7, #8]
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	bf28      	it	cs
 8010f6c:	4613      	movcs	r3, r2
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010f72:	893b      	ldrh	r3, [r7, #8]
 8010f74:	461a      	mov	r2, r3
 8010f76:	68f9      	ldr	r1, [r7, #12]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fa69 	bl	8011450 <USBD_CtlSendData>
 8010f7e:	e009      	b.n	8010f94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010f80:	6839      	ldr	r1, [r7, #0]
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f000 f9e7 	bl	8011356 <USBD_CtlError>
 8010f88:	e004      	b.n	8010f94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 faba 	bl	8011504 <USBD_CtlSendStatus>
 8010f90:	e000      	b.n	8010f94 <USBD_GetDescriptor+0x320>
    return;
 8010f92:	bf00      	nop
  }
}
 8010f94:	3710      	adds	r7, #16
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
 8010f9a:	bf00      	nop

08010f9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	889b      	ldrh	r3, [r3, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d131      	bne.n	8011012 <USBD_SetAddress+0x76>
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	88db      	ldrh	r3, [r3, #6]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d12d      	bne.n	8011012 <USBD_SetAddress+0x76>
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	885b      	ldrh	r3, [r3, #2]
 8010fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8010fbc:	d829      	bhi.n	8011012 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	885b      	ldrh	r3, [r3, #2]
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	2b03      	cmp	r3, #3
 8010fd4:	d104      	bne.n	8010fe0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 f9bc 	bl	8011356 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fde:	e01d      	b.n	801101c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	7bfa      	ldrb	r2, [r7, #15]
 8010fe4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010fe8:	7bfb      	ldrb	r3, [r7, #15]
 8010fea:	4619      	mov	r1, r3
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 ff47 	bl	8011e80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 fa86 	bl	8011504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010ff8:	7bfb      	ldrb	r3, [r7, #15]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d004      	beq.n	8011008 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2202      	movs	r2, #2
 8011002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011006:	e009      	b.n	801101c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2201      	movs	r2, #1
 801100c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011010:	e004      	b.n	801101c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011012:	6839      	ldr	r1, [r7, #0]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 f99e 	bl	8011356 <USBD_CtlError>
  }
}
 801101a:	bf00      	nop
 801101c:	bf00      	nop
 801101e:	3710      	adds	r7, #16
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801102e:	2300      	movs	r3, #0
 8011030:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	885b      	ldrh	r3, [r3, #2]
 8011036:	b2da      	uxtb	r2, r3
 8011038:	4b4e      	ldr	r3, [pc, #312]	@ (8011174 <USBD_SetConfig+0x150>)
 801103a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801103c:	4b4d      	ldr	r3, [pc, #308]	@ (8011174 <USBD_SetConfig+0x150>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	2b01      	cmp	r3, #1
 8011042:	d905      	bls.n	8011050 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011044:	6839      	ldr	r1, [r7, #0]
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 f985 	bl	8011356 <USBD_CtlError>
    return USBD_FAIL;
 801104c:	2303      	movs	r3, #3
 801104e:	e08c      	b.n	801116a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011056:	b2db      	uxtb	r3, r3
 8011058:	2b02      	cmp	r3, #2
 801105a:	d002      	beq.n	8011062 <USBD_SetConfig+0x3e>
 801105c:	2b03      	cmp	r3, #3
 801105e:	d029      	beq.n	80110b4 <USBD_SetConfig+0x90>
 8011060:	e075      	b.n	801114e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011062:	4b44      	ldr	r3, [pc, #272]	@ (8011174 <USBD_SetConfig+0x150>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d020      	beq.n	80110ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801106a:	4b42      	ldr	r3, [pc, #264]	@ (8011174 <USBD_SetConfig+0x150>)
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	461a      	mov	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011074:	4b3f      	ldr	r3, [pc, #252]	@ (8011174 <USBD_SetConfig+0x150>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	4619      	mov	r1, r3
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7fe ffb9 	bl	800fff2 <USBD_SetClassConfig>
 8011080:	4603      	mov	r3, r0
 8011082:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011084:	7bfb      	ldrb	r3, [r7, #15]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d008      	beq.n	801109c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801108a:	6839      	ldr	r1, [r7, #0]
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 f962 	bl	8011356 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2202      	movs	r2, #2
 8011096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801109a:	e065      	b.n	8011168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fa31 	bl	8011504 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2203      	movs	r2, #3
 80110a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80110aa:	e05d      	b.n	8011168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fa29 	bl	8011504 <USBD_CtlSendStatus>
      break;
 80110b2:	e059      	b.n	8011168 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80110b4:	4b2f      	ldr	r3, [pc, #188]	@ (8011174 <USBD_SetConfig+0x150>)
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d112      	bne.n	80110e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2202      	movs	r2, #2
 80110c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80110c4:	4b2b      	ldr	r3, [pc, #172]	@ (8011174 <USBD_SetConfig+0x150>)
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	461a      	mov	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110ce:	4b29      	ldr	r3, [pc, #164]	@ (8011174 <USBD_SetConfig+0x150>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	4619      	mov	r1, r3
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7fe ffa8 	bl	801002a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 fa12 	bl	8011504 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80110e0:	e042      	b.n	8011168 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80110e2:	4b24      	ldr	r3, [pc, #144]	@ (8011174 <USBD_SetConfig+0x150>)
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	461a      	mov	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d02a      	beq.n	8011146 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	4619      	mov	r1, r3
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f7fe ff96 	bl	801002a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80110fe:	4b1d      	ldr	r3, [pc, #116]	@ (8011174 <USBD_SetConfig+0x150>)
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	461a      	mov	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011108:	4b1a      	ldr	r3, [pc, #104]	@ (8011174 <USBD_SetConfig+0x150>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f7fe ff6f 	bl	800fff2 <USBD_SetClassConfig>
 8011114:	4603      	mov	r3, r0
 8011116:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011118:	7bfb      	ldrb	r3, [r7, #15]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00f      	beq.n	801113e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801111e:	6839      	ldr	r1, [r7, #0]
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f000 f918 	bl	8011356 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	b2db      	uxtb	r3, r3
 801112c:	4619      	mov	r1, r3
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7fe ff7b 	bl	801002a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2202      	movs	r2, #2
 8011138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801113c:	e014      	b.n	8011168 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f000 f9e0 	bl	8011504 <USBD_CtlSendStatus>
      break;
 8011144:	e010      	b.n	8011168 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f9dc 	bl	8011504 <USBD_CtlSendStatus>
      break;
 801114c:	e00c      	b.n	8011168 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801114e:	6839      	ldr	r1, [r7, #0]
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 f900 	bl	8011356 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011156:	4b07      	ldr	r3, [pc, #28]	@ (8011174 <USBD_SetConfig+0x150>)
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	4619      	mov	r1, r3
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7fe ff64 	bl	801002a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011162:	2303      	movs	r3, #3
 8011164:	73fb      	strb	r3, [r7, #15]
      break;
 8011166:	bf00      	nop
  }

  return ret;
 8011168:	7bfb      	ldrb	r3, [r7, #15]
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	24012dfc 	.word	0x24012dfc

08011178 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	88db      	ldrh	r3, [r3, #6]
 8011186:	2b01      	cmp	r3, #1
 8011188:	d004      	beq.n	8011194 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801118a:	6839      	ldr	r1, [r7, #0]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f8e2 	bl	8011356 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011192:	e023      	b.n	80111dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801119a:	b2db      	uxtb	r3, r3
 801119c:	2b02      	cmp	r3, #2
 801119e:	dc02      	bgt.n	80111a6 <USBD_GetConfig+0x2e>
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dc03      	bgt.n	80111ac <USBD_GetConfig+0x34>
 80111a4:	e015      	b.n	80111d2 <USBD_GetConfig+0x5a>
 80111a6:	2b03      	cmp	r3, #3
 80111a8:	d00b      	beq.n	80111c2 <USBD_GetConfig+0x4a>
 80111aa:	e012      	b.n	80111d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3308      	adds	r3, #8
 80111b6:	2201      	movs	r2, #1
 80111b8:	4619      	mov	r1, r3
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 f948 	bl	8011450 <USBD_CtlSendData>
        break;
 80111c0:	e00c      	b.n	80111dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	3304      	adds	r3, #4
 80111c6:	2201      	movs	r2, #1
 80111c8:	4619      	mov	r1, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f940 	bl	8011450 <USBD_CtlSendData>
        break;
 80111d0:	e004      	b.n	80111dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 f8be 	bl	8011356 <USBD_CtlError>
        break;
 80111da:	bf00      	nop
}
 80111dc:	bf00      	nop
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	3b01      	subs	r3, #1
 80111f8:	2b02      	cmp	r3, #2
 80111fa:	d81e      	bhi.n	801123a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	88db      	ldrh	r3, [r3, #6]
 8011200:	2b02      	cmp	r3, #2
 8011202:	d004      	beq.n	801120e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 f8a5 	bl	8011356 <USBD_CtlError>
        break;
 801120c:	e01a      	b.n	8011244 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2201      	movs	r2, #1
 8011212:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801121a:	2b00      	cmp	r3, #0
 801121c:	d005      	beq.n	801122a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	f043 0202 	orr.w	r2, r3, #2
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	330c      	adds	r3, #12
 801122e:	2202      	movs	r2, #2
 8011230:	4619      	mov	r1, r3
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f000 f90c 	bl	8011450 <USBD_CtlSendData>
      break;
 8011238:	e004      	b.n	8011244 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801123a:	6839      	ldr	r1, [r7, #0]
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f000 f88a 	bl	8011356 <USBD_CtlError>
      break;
 8011242:	bf00      	nop
  }
}
 8011244:	bf00      	nop
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	885b      	ldrh	r3, [r3, #2]
 801125a:	2b01      	cmp	r3, #1
 801125c:	d107      	bne.n	801126e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2201      	movs	r2, #1
 8011262:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 f94c 	bl	8011504 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801126c:	e013      	b.n	8011296 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	885b      	ldrh	r3, [r3, #2]
 8011272:	2b02      	cmp	r3, #2
 8011274:	d10b      	bne.n	801128e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	889b      	ldrh	r3, [r3, #4]
 801127a:	0a1b      	lsrs	r3, r3, #8
 801127c:	b29b      	uxth	r3, r3
 801127e:	b2da      	uxtb	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 f93c 	bl	8011504 <USBD_CtlSendStatus>
}
 801128c:	e003      	b.n	8011296 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 f860 	bl	8011356 <USBD_CtlError>
}
 8011296:	bf00      	nop
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b082      	sub	sp, #8
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	3b01      	subs	r3, #1
 80112b2:	2b02      	cmp	r3, #2
 80112b4:	d80b      	bhi.n	80112ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	885b      	ldrh	r3, [r3, #2]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d10c      	bne.n	80112d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f91c 	bl	8011504 <USBD_CtlSendStatus>
      }
      break;
 80112cc:	e004      	b.n	80112d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80112ce:	6839      	ldr	r1, [r7, #0]
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 f840 	bl	8011356 <USBD_CtlError>
      break;
 80112d6:	e000      	b.n	80112da <USBD_ClrFeature+0x3c>
      break;
 80112d8:	bf00      	nop
  }
}
 80112da:	bf00      	nop
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b084      	sub	sp, #16
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	781a      	ldrb	r2, [r3, #0]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	3301      	adds	r3, #1
 80112fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	781a      	ldrb	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	3301      	adds	r3, #1
 801130a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801130c:	68f8      	ldr	r0, [r7, #12]
 801130e:	f7ff fa16 	bl	801073e <SWAPBYTE>
 8011312:	4603      	mov	r3, r0
 8011314:	461a      	mov	r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	3301      	adds	r3, #1
 801131e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	3301      	adds	r3, #1
 8011324:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f7ff fa09 	bl	801073e <SWAPBYTE>
 801132c:	4603      	mov	r3, r0
 801132e:	461a      	mov	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3301      	adds	r3, #1
 8011338:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	3301      	adds	r3, #1
 801133e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	f7ff f9fc 	bl	801073e <SWAPBYTE>
 8011346:	4603      	mov	r3, r0
 8011348:	461a      	mov	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	80da      	strh	r2, [r3, #6]
}
 801134e:	bf00      	nop
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b082      	sub	sp, #8
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
 801135e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011360:	2180      	movs	r1, #128	@ 0x80
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fd22 	bl	8011dac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011368:	2100      	movs	r1, #0
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 fd1e 	bl	8011dac <USBD_LL_StallEP>
}
 8011370:	bf00      	nop
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011384:	2300      	movs	r3, #0
 8011386:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d042      	beq.n	8011414 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011392:	6938      	ldr	r0, [r7, #16]
 8011394:	f000 f842 	bl	801141c <USBD_GetLen>
 8011398:	4603      	mov	r3, r0
 801139a:	3301      	adds	r3, #1
 801139c:	005b      	lsls	r3, r3, #1
 801139e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113a2:	d808      	bhi.n	80113b6 <USBD_GetString+0x3e>
 80113a4:	6938      	ldr	r0, [r7, #16]
 80113a6:	f000 f839 	bl	801141c <USBD_GetLen>
 80113aa:	4603      	mov	r3, r0
 80113ac:	3301      	adds	r3, #1
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	005b      	lsls	r3, r3, #1
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	e001      	b.n	80113ba <USBD_GetString+0x42>
 80113b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80113be:	7dfb      	ldrb	r3, [r7, #23]
 80113c0:	68ba      	ldr	r2, [r7, #8]
 80113c2:	4413      	add	r3, r2
 80113c4:	687a      	ldr	r2, [r7, #4]
 80113c6:	7812      	ldrb	r2, [r2, #0]
 80113c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80113ca:	7dfb      	ldrb	r3, [r7, #23]
 80113cc:	3301      	adds	r3, #1
 80113ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80113d0:	7dfb      	ldrb	r3, [r7, #23]
 80113d2:	68ba      	ldr	r2, [r7, #8]
 80113d4:	4413      	add	r3, r2
 80113d6:	2203      	movs	r2, #3
 80113d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80113da:	7dfb      	ldrb	r3, [r7, #23]
 80113dc:	3301      	adds	r3, #1
 80113de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80113e0:	e013      	b.n	801140a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80113e2:	7dfb      	ldrb	r3, [r7, #23]
 80113e4:	68ba      	ldr	r2, [r7, #8]
 80113e6:	4413      	add	r3, r2
 80113e8:	693a      	ldr	r2, [r7, #16]
 80113ea:	7812      	ldrb	r2, [r2, #0]
 80113ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	3301      	adds	r3, #1
 80113f2:	613b      	str	r3, [r7, #16]
    idx++;
 80113f4:	7dfb      	ldrb	r3, [r7, #23]
 80113f6:	3301      	adds	r3, #1
 80113f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80113fa:	7dfb      	ldrb	r3, [r7, #23]
 80113fc:	68ba      	ldr	r2, [r7, #8]
 80113fe:	4413      	add	r3, r2
 8011400:	2200      	movs	r2, #0
 8011402:	701a      	strb	r2, [r3, #0]
    idx++;
 8011404:	7dfb      	ldrb	r3, [r7, #23]
 8011406:	3301      	adds	r3, #1
 8011408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1e7      	bne.n	80113e2 <USBD_GetString+0x6a>
 8011412:	e000      	b.n	8011416 <USBD_GetString+0x9e>
    return;
 8011414:	bf00      	nop
  }
}
 8011416:	3718      	adds	r7, #24
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801141c:	b480      	push	{r7}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011424:	2300      	movs	r3, #0
 8011426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801142c:	e005      	b.n	801143a <USBD_GetLen+0x1e>
  {
    len++;
 801142e:	7bfb      	ldrb	r3, [r7, #15]
 8011430:	3301      	adds	r3, #1
 8011432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	3301      	adds	r3, #1
 8011438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1f5      	bne.n	801142e <USBD_GetLen+0x12>
  }

  return len;
 8011442:	7bfb      	ldrb	r3, [r7, #15]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3714      	adds	r7, #20
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2202      	movs	r2, #2
 8011460:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	2100      	movs	r1, #0
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f000 fd21 	bl	8011ebe <USBD_LL_Transmit>

  return USBD_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b084      	sub	sp, #16
 801148a:	af00      	add	r7, sp, #0
 801148c:	60f8      	str	r0, [r7, #12]
 801148e:	60b9      	str	r1, [r7, #8]
 8011490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	68ba      	ldr	r2, [r7, #8]
 8011496:	2100      	movs	r1, #0
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f000 fd10 	bl	8011ebe <USBD_LL_Transmit>

  return USBD_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	60b9      	str	r1, [r7, #8]
 80114b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2203      	movs	r2, #3
 80114b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	68ba      	ldr	r2, [r7, #8]
 80114d0:	2100      	movs	r1, #0
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f000 fd14 	bl	8011f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114d8:	2300      	movs	r3, #0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3710      	adds	r7, #16
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b084      	sub	sp, #16
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	60f8      	str	r0, [r7, #12]
 80114ea:	60b9      	str	r1, [r7, #8]
 80114ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	2100      	movs	r1, #0
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f000 fd03 	bl	8011f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b082      	sub	sp, #8
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2204      	movs	r2, #4
 8011510:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011514:	2300      	movs	r3, #0
 8011516:	2200      	movs	r2, #0
 8011518:	2100      	movs	r1, #0
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 fccf 	bl	8011ebe <USBD_LL_Transmit>

  return USBD_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}

0801152a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b082      	sub	sp, #8
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2205      	movs	r2, #5
 8011536:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801153a:	2300      	movs	r3, #0
 801153c:	2200      	movs	r2, #0
 801153e:	2100      	movs	r1, #0
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 fcdd 	bl	8011f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011546:	2300      	movs	r3, #0
}
 8011548:	4618      	mov	r0, r3
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011554:	2200      	movs	r2, #0
 8011556:	4918      	ldr	r1, [pc, #96]	@ (80115b8 <MX_USB_DEVICE_Init+0x68>)
 8011558:	4818      	ldr	r0, [pc, #96]	@ (80115bc <MX_USB_DEVICE_Init+0x6c>)
 801155a:	f7fe fccd 	bl	800fef8 <USBD_Init>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011564:	f7ef fed8 	bl	8001318 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011568:	4915      	ldr	r1, [pc, #84]	@ (80115c0 <MX_USB_DEVICE_Init+0x70>)
 801156a:	4814      	ldr	r0, [pc, #80]	@ (80115bc <MX_USB_DEVICE_Init+0x6c>)
 801156c:	f7fe fcf4 	bl	800ff58 <USBD_RegisterClass>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d001      	beq.n	801157a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011576:	f7ef fecf 	bl	8001318 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801157a:	4912      	ldr	r1, [pc, #72]	@ (80115c4 <MX_USB_DEVICE_Init+0x74>)
 801157c:	480f      	ldr	r0, [pc, #60]	@ (80115bc <MX_USB_DEVICE_Init+0x6c>)
 801157e:	f7fe fbeb 	bl	800fd58 <USBD_CDC_RegisterInterface>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011588:	f7ef fec6 	bl	8001318 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801158c:	480b      	ldr	r0, [pc, #44]	@ (80115bc <MX_USB_DEVICE_Init+0x6c>)
 801158e:	f7fe fd19 	bl	800ffc4 <USBD_Start>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011598:	f7ef febe 	bl	8001318 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801159c:	f7f7 fb56 	bl	8008c4c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 80115a0:	4b06      	ldr	r3, [pc, #24]	@ (80115bc <MX_USB_DEVICE_Init+0x6c>)
 80115a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80115a6:	4a05      	ldr	r2, [pc, #20]	@ (80115bc <MX_USB_DEVICE_Init+0x6c>)
 80115a8:	33b0      	adds	r3, #176	@ 0xb0
 80115aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115ae:	4a06      	ldr	r2, [pc, #24]	@ (80115c8 <MX_USB_DEVICE_Init+0x78>)
 80115b0:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80115b2:	bf00      	nop
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	240000b4 	.word	0x240000b4
 80115bc:	24012e00 	.word	0x24012e00
 80115c0:	24000020 	.word	0x24000020
 80115c4:	240000a0 	.word	0x240000a0
 80115c8:	240130dc 	.word	0x240130dc

080115cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80115d0:	2200      	movs	r2, #0
 80115d2:	4905      	ldr	r1, [pc, #20]	@ (80115e8 <CDC_Init_FS+0x1c>)
 80115d4:	4805      	ldr	r0, [pc, #20]	@ (80115ec <CDC_Init_FS+0x20>)
 80115d6:	f7fe fbd9 	bl	800fd8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80115da:	4905      	ldr	r1, [pc, #20]	@ (80115f0 <CDC_Init_FS+0x24>)
 80115dc:	4803      	ldr	r0, [pc, #12]	@ (80115ec <CDC_Init_FS+0x20>)
 80115de:	f7fe fbf7 	bl	800fdd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80115e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	240138e0 	.word	0x240138e0
 80115ec:	24012e00 	.word	0x24012e00
 80115f0:	240130e0 	.word	0x240130e0

080115f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80115f4:	b480      	push	{r7}
 80115f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80115f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	4603      	mov	r3, r0
 801160c:	6039      	str	r1, [r7, #0]
 801160e:	71fb      	strb	r3, [r7, #7]
 8011610:	4613      	mov	r3, r2
 8011612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011614:	79fb      	ldrb	r3, [r7, #7]
 8011616:	2b23      	cmp	r3, #35	@ 0x23
 8011618:	d84a      	bhi.n	80116b0 <CDC_Control_FS+0xac>
 801161a:	a201      	add	r2, pc, #4	@ (adr r2, 8011620 <CDC_Control_FS+0x1c>)
 801161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011620:	080116b1 	.word	0x080116b1
 8011624:	080116b1 	.word	0x080116b1
 8011628:	080116b1 	.word	0x080116b1
 801162c:	080116b1 	.word	0x080116b1
 8011630:	080116b1 	.word	0x080116b1
 8011634:	080116b1 	.word	0x080116b1
 8011638:	080116b1 	.word	0x080116b1
 801163c:	080116b1 	.word	0x080116b1
 8011640:	080116b1 	.word	0x080116b1
 8011644:	080116b1 	.word	0x080116b1
 8011648:	080116b1 	.word	0x080116b1
 801164c:	080116b1 	.word	0x080116b1
 8011650:	080116b1 	.word	0x080116b1
 8011654:	080116b1 	.word	0x080116b1
 8011658:	080116b1 	.word	0x080116b1
 801165c:	080116b1 	.word	0x080116b1
 8011660:	080116b1 	.word	0x080116b1
 8011664:	080116b1 	.word	0x080116b1
 8011668:	080116b1 	.word	0x080116b1
 801166c:	080116b1 	.word	0x080116b1
 8011670:	080116b1 	.word	0x080116b1
 8011674:	080116b1 	.word	0x080116b1
 8011678:	080116b1 	.word	0x080116b1
 801167c:	080116b1 	.word	0x080116b1
 8011680:	080116b1 	.word	0x080116b1
 8011684:	080116b1 	.word	0x080116b1
 8011688:	080116b1 	.word	0x080116b1
 801168c:	080116b1 	.word	0x080116b1
 8011690:	080116b1 	.word	0x080116b1
 8011694:	080116b1 	.word	0x080116b1
 8011698:	080116b1 	.word	0x080116b1
 801169c:	080116b1 	.word	0x080116b1
 80116a0:	080116b1 	.word	0x080116b1
 80116a4:	080116b1 	.word	0x080116b1
 80116a8:	080116b1 	.word	0x080116b1
 80116ac:	080116b1 	.word	0x080116b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80116b0:	bf00      	nop
  }

  return (USBD_OK);
 80116b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80116ca:	6879      	ldr	r1, [r7, #4]
 80116cc:	4806      	ldr	r0, [pc, #24]	@ (80116e8 <CDC_Receive_FS+0x28>)
 80116ce:	f7fe fb7f 	bl	800fdd0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80116d2:	4805      	ldr	r0, [pc, #20]	@ (80116e8 <CDC_Receive_FS+0x28>)
 80116d4:	f7fe fbda 	bl	800fe8c <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 80116d8:	4b04      	ldr	r3, [pc, #16]	@ (80116ec <CDC_Receive_FS+0x2c>)
 80116da:	2201      	movs	r2, #1
 80116dc:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 80116de:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	24012e00 	.word	0x24012e00
 80116ec:	24000658 	.word	0x24000658

080116f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	460b      	mov	r3, r1
 80116fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80116fc:	2300      	movs	r3, #0
 80116fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011700:	4b0d      	ldr	r3, [pc, #52]	@ (8011738 <CDC_Transmit_FS+0x48>)
 8011702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011706:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011712:	2301      	movs	r3, #1
 8011714:	e00b      	b.n	801172e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011716:	887b      	ldrh	r3, [r7, #2]
 8011718:	461a      	mov	r2, r3
 801171a:	6879      	ldr	r1, [r7, #4]
 801171c:	4806      	ldr	r0, [pc, #24]	@ (8011738 <CDC_Transmit_FS+0x48>)
 801171e:	f7fe fb35 	bl	800fd8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011722:	4805      	ldr	r0, [pc, #20]	@ (8011738 <CDC_Transmit_FS+0x48>)
 8011724:	f7fe fb72 	bl	800fe0c <USBD_CDC_TransmitPacket>
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801172c:	7bfb      	ldrb	r3, [r7, #15]
}
 801172e:	4618      	mov	r0, r3
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	24012e00 	.word	0x24012e00

0801173c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801173c:	b480      	push	{r7}
 801173e:	b087      	sub	sp, #28
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	4613      	mov	r3, r2
 8011748:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801174a:	2300      	movs	r3, #0
 801174c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011752:	4618      	mov	r0, r3
 8011754:	371c      	adds	r7, #28
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
	...

08011760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	4603      	mov	r3, r0
 8011768:	6039      	str	r1, [r7, #0]
 801176a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	2212      	movs	r2, #18
 8011770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011772:	4b03      	ldr	r3, [pc, #12]	@ (8011780 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011774:	4618      	mov	r0, r3
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr
 8011780:	240000d4 	.word	0x240000d4

08011784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	4603      	mov	r3, r0
 801178c:	6039      	str	r1, [r7, #0]
 801178e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	2204      	movs	r2, #4
 8011794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011796:	4b03      	ldr	r3, [pc, #12]	@ (80117a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011798:	4618      	mov	r0, r3
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	240000e8 	.word	0x240000e8

080117a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b082      	sub	sp, #8
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	4603      	mov	r3, r0
 80117b0:	6039      	str	r1, [r7, #0]
 80117b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117b4:	79fb      	ldrb	r3, [r7, #7]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d105      	bne.n	80117c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80117ba:	683a      	ldr	r2, [r7, #0]
 80117bc:	4907      	ldr	r1, [pc, #28]	@ (80117dc <USBD_FS_ProductStrDescriptor+0x34>)
 80117be:	4808      	ldr	r0, [pc, #32]	@ (80117e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80117c0:	f7ff fdda 	bl	8011378 <USBD_GetString>
 80117c4:	e004      	b.n	80117d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80117c6:	683a      	ldr	r2, [r7, #0]
 80117c8:	4904      	ldr	r1, [pc, #16]	@ (80117dc <USBD_FS_ProductStrDescriptor+0x34>)
 80117ca:	4805      	ldr	r0, [pc, #20]	@ (80117e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80117cc:	f7ff fdd4 	bl	8011378 <USBD_GetString>
  }
  return USBD_StrDesc;
 80117d0:	4b02      	ldr	r3, [pc, #8]	@ (80117dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	240140e0 	.word	0x240140e0
 80117e0:	08012a90 	.word	0x08012a90

080117e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	6039      	str	r1, [r7, #0]
 80117ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	4904      	ldr	r1, [pc, #16]	@ (8011804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80117f4:	4804      	ldr	r0, [pc, #16]	@ (8011808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80117f6:	f7ff fdbf 	bl	8011378 <USBD_GetString>
  return USBD_StrDesc;
 80117fa:	4b02      	ldr	r3, [pc, #8]	@ (8011804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	240140e0 	.word	0x240140e0
 8011808:	08012aa8 	.word	0x08012aa8

0801180c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	4603      	mov	r3, r0
 8011814:	6039      	str	r1, [r7, #0]
 8011816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	221a      	movs	r2, #26
 801181c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801181e:	f000 f843 	bl	80118a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011822:	4b02      	ldr	r3, [pc, #8]	@ (801182c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011824:	4618      	mov	r0, r3
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	240000ec 	.word	0x240000ec

08011830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	4603      	mov	r3, r0
 8011838:	6039      	str	r1, [r7, #0]
 801183a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801183c:	79fb      	ldrb	r3, [r7, #7]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d105      	bne.n	801184e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	4907      	ldr	r1, [pc, #28]	@ (8011864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011846:	4808      	ldr	r0, [pc, #32]	@ (8011868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011848:	f7ff fd96 	bl	8011378 <USBD_GetString>
 801184c:	e004      	b.n	8011858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801184e:	683a      	ldr	r2, [r7, #0]
 8011850:	4904      	ldr	r1, [pc, #16]	@ (8011864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011852:	4805      	ldr	r0, [pc, #20]	@ (8011868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011854:	f7ff fd90 	bl	8011378 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011858:	4b02      	ldr	r3, [pc, #8]	@ (8011864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801185a:	4618      	mov	r0, r3
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	240140e0 	.word	0x240140e0
 8011868:	08012abc 	.word	0x08012abc

0801186c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	4603      	mov	r3, r0
 8011874:	6039      	str	r1, [r7, #0]
 8011876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011878:	79fb      	ldrb	r3, [r7, #7]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d105      	bne.n	801188a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801187e:	683a      	ldr	r2, [r7, #0]
 8011880:	4907      	ldr	r1, [pc, #28]	@ (80118a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011882:	4808      	ldr	r0, [pc, #32]	@ (80118a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011884:	f7ff fd78 	bl	8011378 <USBD_GetString>
 8011888:	e004      	b.n	8011894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801188a:	683a      	ldr	r2, [r7, #0]
 801188c:	4904      	ldr	r1, [pc, #16]	@ (80118a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801188e:	4805      	ldr	r0, [pc, #20]	@ (80118a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011890:	f7ff fd72 	bl	8011378 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011894:	4b02      	ldr	r3, [pc, #8]	@ (80118a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011896:	4618      	mov	r0, r3
 8011898:	3708      	adds	r7, #8
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	240140e0 	.word	0x240140e0
 80118a4:	08012ac8 	.word	0x08012ac8

080118a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80118ae:	4b0f      	ldr	r3, [pc, #60]	@ (80118ec <Get_SerialNum+0x44>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80118b4:	4b0e      	ldr	r3, [pc, #56]	@ (80118f0 <Get_SerialNum+0x48>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80118ba:	4b0e      	ldr	r3, [pc, #56]	@ (80118f4 <Get_SerialNum+0x4c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4413      	add	r3, r2
 80118c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d009      	beq.n	80118e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80118ce:	2208      	movs	r2, #8
 80118d0:	4909      	ldr	r1, [pc, #36]	@ (80118f8 <Get_SerialNum+0x50>)
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	f000 f814 	bl	8011900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80118d8:	2204      	movs	r2, #4
 80118da:	4908      	ldr	r1, [pc, #32]	@ (80118fc <Get_SerialNum+0x54>)
 80118dc:	68b8      	ldr	r0, [r7, #8]
 80118de:	f000 f80f 	bl	8011900 <IntToUnicode>
  }
}
 80118e2:	bf00      	nop
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	1ff1e800 	.word	0x1ff1e800
 80118f0:	1ff1e804 	.word	0x1ff1e804
 80118f4:	1ff1e808 	.word	0x1ff1e808
 80118f8:	240000ee 	.word	0x240000ee
 80118fc:	240000fe 	.word	0x240000fe

08011900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011900:	b480      	push	{r7}
 8011902:	b087      	sub	sp, #28
 8011904:	af00      	add	r7, sp, #0
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	4613      	mov	r3, r2
 801190c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801190e:	2300      	movs	r3, #0
 8011910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011912:	2300      	movs	r3, #0
 8011914:	75fb      	strb	r3, [r7, #23]
 8011916:	e027      	b.n	8011968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	0f1b      	lsrs	r3, r3, #28
 801191c:	2b09      	cmp	r3, #9
 801191e:	d80b      	bhi.n	8011938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	0f1b      	lsrs	r3, r3, #28
 8011924:	b2da      	uxtb	r2, r3
 8011926:	7dfb      	ldrb	r3, [r7, #23]
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	4619      	mov	r1, r3
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	440b      	add	r3, r1
 8011930:	3230      	adds	r2, #48	@ 0x30
 8011932:	b2d2      	uxtb	r2, r2
 8011934:	701a      	strb	r2, [r3, #0]
 8011936:	e00a      	b.n	801194e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	0f1b      	lsrs	r3, r3, #28
 801193c:	b2da      	uxtb	r2, r3
 801193e:	7dfb      	ldrb	r3, [r7, #23]
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	4619      	mov	r1, r3
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	440b      	add	r3, r1
 8011948:	3237      	adds	r2, #55	@ 0x37
 801194a:	b2d2      	uxtb	r2, r2
 801194c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	011b      	lsls	r3, r3, #4
 8011952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011954:	7dfb      	ldrb	r3, [r7, #23]
 8011956:	005b      	lsls	r3, r3, #1
 8011958:	3301      	adds	r3, #1
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	4413      	add	r3, r2
 801195e:	2200      	movs	r2, #0
 8011960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011962:	7dfb      	ldrb	r3, [r7, #23]
 8011964:	3301      	adds	r3, #1
 8011966:	75fb      	strb	r3, [r7, #23]
 8011968:	7dfa      	ldrb	r2, [r7, #23]
 801196a:	79fb      	ldrb	r3, [r7, #7]
 801196c:	429a      	cmp	r2, r3
 801196e:	d3d3      	bcc.n	8011918 <IntToUnicode+0x18>
  }
}
 8011970:	bf00      	nop
 8011972:	bf00      	nop
 8011974:	371c      	adds	r7, #28
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
	...

08011980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b0ba      	sub	sp, #232	@ 0xe8
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011988:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801198c:	2200      	movs	r2, #0
 801198e:	601a      	str	r2, [r3, #0]
 8011990:	605a      	str	r2, [r3, #4]
 8011992:	609a      	str	r2, [r3, #8]
 8011994:	60da      	str	r2, [r3, #12]
 8011996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011998:	f107 0310 	add.w	r3, r7, #16
 801199c:	22c0      	movs	r2, #192	@ 0xc0
 801199e:	2100      	movs	r1, #0
 80119a0:	4618      	mov	r0, r3
 80119a2:	f000 fb47 	bl	8012034 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a2c      	ldr	r2, [pc, #176]	@ (8011a5c <HAL_PCD_MspInit+0xdc>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d151      	bne.n	8011a54 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80119b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80119b4:	f04f 0300 	mov.w	r3, #0
 80119b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80119bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80119c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80119c4:	f107 0310 	add.w	r3, r7, #16
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7f8 f935 	bl	8009c38 <HAL_RCCEx_PeriphCLKConfig>
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d001      	beq.n	80119d8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80119d4:	f7ef fca0 	bl	8001318 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80119d8:	f7f7 f938 	bl	8008c4c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80119dc:	4b20      	ldr	r3, [pc, #128]	@ (8011a60 <HAL_PCD_MspInit+0xe0>)
 80119de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80119e2:	4a1f      	ldr	r2, [pc, #124]	@ (8011a60 <HAL_PCD_MspInit+0xe0>)
 80119e4:	f043 0301 	orr.w	r3, r3, #1
 80119e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80119ec:	4b1c      	ldr	r3, [pc, #112]	@ (8011a60 <HAL_PCD_MspInit+0xe0>)
 80119ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80119f2:	f003 0301 	and.w	r3, r3, #1
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80119fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80119fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a02:	2302      	movs	r3, #2
 8011a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011a14:	230a      	movs	r3, #10
 8011a16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a1a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011a1e:	4619      	mov	r1, r3
 8011a20:	4810      	ldr	r0, [pc, #64]	@ (8011a64 <HAL_PCD_MspInit+0xe4>)
 8011a22:	f7f2 fd97 	bl	8004554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011a26:	4b0e      	ldr	r3, [pc, #56]	@ (8011a60 <HAL_PCD_MspInit+0xe0>)
 8011a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8011a60 <HAL_PCD_MspInit+0xe0>)
 8011a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011a32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011a36:	4b0a      	ldr	r3, [pc, #40]	@ (8011a60 <HAL_PCD_MspInit+0xe0>)
 8011a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011a40:	60bb      	str	r3, [r7, #8]
 8011a42:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011a44:	2200      	movs	r2, #0
 8011a46:	2100      	movs	r1, #0
 8011a48:	2065      	movs	r0, #101	@ 0x65
 8011a4a:	f7f0 fc7e 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011a4e:	2065      	movs	r0, #101	@ 0x65
 8011a50:	f7f0 fc95 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011a54:	bf00      	nop
 8011a56:	37e8      	adds	r7, #232	@ 0xe8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	40080000 	.word	0x40080000
 8011a60:	58024400 	.word	0x58024400
 8011a64:	58020000 	.word	0x58020000

08011a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	4610      	mov	r0, r2
 8011a80:	f7fe faed 	bl	801005e <USBD_LL_SetupStage>
}
 8011a84:	bf00      	nop
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011a9e:	78fa      	ldrb	r2, [r7, #3]
 8011aa0:	6879      	ldr	r1, [r7, #4]
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	4413      	add	r3, r2
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	440b      	add	r3, r1
 8011aac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	78fb      	ldrb	r3, [r7, #3]
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	f7fe fb27 	bl	8010108 <USBD_LL_DataOutStage>
}
 8011aba:	bf00      	nop
 8011abc:	3708      	adds	r7, #8
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b082      	sub	sp, #8
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
 8011aca:	460b      	mov	r3, r1
 8011acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011ad4:	78fa      	ldrb	r2, [r7, #3]
 8011ad6:	6879      	ldr	r1, [r7, #4]
 8011ad8:	4613      	mov	r3, r2
 8011ada:	00db      	lsls	r3, r3, #3
 8011adc:	4413      	add	r3, r2
 8011ade:	009b      	lsls	r3, r3, #2
 8011ae0:	440b      	add	r3, r1
 8011ae2:	3320      	adds	r3, #32
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	78fb      	ldrb	r3, [r7, #3]
 8011ae8:	4619      	mov	r1, r3
 8011aea:	f7fe fbc0 	bl	801026e <USBD_LL_DataInStage>
}
 8011aee:	bf00      	nop
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b082      	sub	sp, #8
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fe fcfa 	bl	80104fe <USBD_LL_SOF>
}
 8011b0a:	bf00      	nop
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b084      	sub	sp, #16
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	79db      	ldrb	r3, [r3, #7]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d102      	bne.n	8011b2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011b26:	2300      	movs	r3, #0
 8011b28:	73fb      	strb	r3, [r7, #15]
 8011b2a:	e008      	b.n	8011b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	79db      	ldrb	r3, [r3, #7]
 8011b30:	2b02      	cmp	r3, #2
 8011b32:	d102      	bne.n	8011b3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011b34:	2301      	movs	r3, #1
 8011b36:	73fb      	strb	r3, [r7, #15]
 8011b38:	e001      	b.n	8011b3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011b3a:	f7ef fbed 	bl	8001318 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011b44:	7bfa      	ldrb	r2, [r7, #15]
 8011b46:	4611      	mov	r1, r2
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fe fc94 	bl	8010476 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7fe fc3c 	bl	80103d2 <USBD_LL_Reset>
}
 8011b5a:	bf00      	nop
 8011b5c:	3710      	adds	r7, #16
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
	...

08011b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fe fc8f 	bl	8010496 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	6812      	ldr	r2, [r2, #0]
 8011b86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011b8a:	f043 0301 	orr.w	r3, r3, #1
 8011b8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	7adb      	ldrb	r3, [r3, #11]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d005      	beq.n	8011ba4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b98:	4b04      	ldr	r3, [pc, #16]	@ (8011bac <HAL_PCD_SuspendCallback+0x48>)
 8011b9a:	691b      	ldr	r3, [r3, #16]
 8011b9c:	4a03      	ldr	r2, [pc, #12]	@ (8011bac <HAL_PCD_SuspendCallback+0x48>)
 8011b9e:	f043 0306 	orr.w	r3, r3, #6
 8011ba2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	e000ed00 	.word	0xe000ed00

08011bb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fe fc85 	bl	80104ce <USBD_LL_Resume>
}
 8011bc4:	bf00      	nop
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011bde:	78fa      	ldrb	r2, [r7, #3]
 8011be0:	4611      	mov	r1, r2
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fe fcdd 	bl	80105a2 <USBD_LL_IsoOUTIncomplete>
}
 8011be8:	bf00      	nop
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011c02:	78fa      	ldrb	r2, [r7, #3]
 8011c04:	4611      	mov	r1, r2
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fe fc99 	bl	801053e <USBD_LL_IsoINIncomplete>
}
 8011c0c:	bf00      	nop
 8011c0e:	3708      	adds	r7, #8
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fe fcef 	bl	8010606 <USBD_LL_DevConnected>
}
 8011c28:	bf00      	nop
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fcec 	bl	801061c <USBD_LL_DevDisconnected>
}
 8011c44:	bf00      	nop
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d13e      	bne.n	8011cda <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011c5c:	4a21      	ldr	r2, [pc, #132]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	4a1f      	ldr	r2, [pc, #124]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c68:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8011ce8 <USBD_LL_Init+0x9c>)
 8011c70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011c72:	4b1c      	ldr	r3, [pc, #112]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c74:	2209      	movs	r2, #9
 8011c76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011c78:	4b1a      	ldr	r3, [pc, #104]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c7a:	2202      	movs	r2, #2
 8011c7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011c7e:	4b19      	ldr	r3, [pc, #100]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c80:	2200      	movs	r2, #0
 8011c82:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c84:	4b17      	ldr	r3, [pc, #92]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c86:	2202      	movs	r2, #2
 8011c88:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011c8a:	4b16      	ldr	r3, [pc, #88]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011c90:	4b14      	ldr	r3, [pc, #80]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c92:	2200      	movs	r2, #0
 8011c94:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011c96:	4b13      	ldr	r3, [pc, #76]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c98:	2200      	movs	r2, #0
 8011c9a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011c9c:	4b11      	ldr	r3, [pc, #68]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011ca2:	4b10      	ldr	r3, [pc, #64]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011caa:	2200      	movs	r2, #0
 8011cac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011cae:	480d      	ldr	r0, [pc, #52]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011cb0:	f7f5 fcf2 	bl	8007698 <HAL_PCD_Init>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d001      	beq.n	8011cbe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011cba:	f7ef fb2d 	bl	8001318 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011cbe:	2180      	movs	r1, #128	@ 0x80
 8011cc0:	4808      	ldr	r0, [pc, #32]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011cc2:	f7f6 ff48 	bl	8008b56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011cc6:	2240      	movs	r2, #64	@ 0x40
 8011cc8:	2100      	movs	r1, #0
 8011cca:	4806      	ldr	r0, [pc, #24]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011ccc:	f7f6 fefc 	bl	8008ac8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011cd0:	2280      	movs	r2, #128	@ 0x80
 8011cd2:	2101      	movs	r1, #1
 8011cd4:	4803      	ldr	r0, [pc, #12]	@ (8011ce4 <USBD_LL_Init+0x98>)
 8011cd6:	f7f6 fef7 	bl	8008ac8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011cda:	2300      	movs	r3, #0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	240142e0 	.word	0x240142e0
 8011ce8:	40080000 	.word	0x40080000

08011cec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7f5 fdd4 	bl	80078b0 <HAL_PCD_Start>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d0c:	7bfb      	ldrb	r3, [r7, #15]
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f000 f942 	bl	8011f98 <USBD_Get_USB_Status>
 8011d14:	4603      	mov	r3, r0
 8011d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b084      	sub	sp, #16
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	6078      	str	r0, [r7, #4]
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	461a      	mov	r2, r3
 8011d30:	4603      	mov	r3, r0
 8011d32:	70fb      	strb	r3, [r7, #3]
 8011d34:	460b      	mov	r3, r1
 8011d36:	70bb      	strb	r3, [r7, #2]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d40:	2300      	movs	r3, #0
 8011d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d4a:	78bb      	ldrb	r3, [r7, #2]
 8011d4c:	883a      	ldrh	r2, [r7, #0]
 8011d4e:	78f9      	ldrb	r1, [r7, #3]
 8011d50:	f7f6 fad5 	bl	80082fe <HAL_PCD_EP_Open>
 8011d54:	4603      	mov	r3, r0
 8011d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d58:	7bfb      	ldrb	r3, [r7, #15]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f000 f91c 	bl	8011f98 <USBD_Get_USB_Status>
 8011d60:	4603      	mov	r3, r0
 8011d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b084      	sub	sp, #16
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	460b      	mov	r3, r1
 8011d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d88:	78fa      	ldrb	r2, [r7, #3]
 8011d8a:	4611      	mov	r1, r2
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7f6 fb20 	bl	80083d2 <HAL_PCD_EP_Close>
 8011d92:	4603      	mov	r3, r0
 8011d94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d96:	7bfb      	ldrb	r3, [r7, #15]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f000 f8fd 	bl	8011f98 <USBD_Get_USB_Status>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	460b      	mov	r3, r1
 8011db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011db8:	2300      	movs	r3, #0
 8011dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011dc6:	78fa      	ldrb	r2, [r7, #3]
 8011dc8:	4611      	mov	r1, r2
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7f6 fbd8 	bl	8008580 <HAL_PCD_EP_SetStall>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dd4:	7bfb      	ldrb	r3, [r7, #15]
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f000 f8de 	bl	8011f98 <USBD_Get_USB_Status>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}

08011dea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dea:	b580      	push	{r7, lr}
 8011dec:	b084      	sub	sp, #16
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
 8011df2:	460b      	mov	r3, r1
 8011df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e04:	78fa      	ldrb	r2, [r7, #3]
 8011e06:	4611      	mov	r1, r2
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7f6 fc1c 	bl	8008646 <HAL_PCD_EP_ClrStall>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e12:	7bfb      	ldrb	r3, [r7, #15]
 8011e14:	4618      	mov	r0, r3
 8011e16:	f000 f8bf 	bl	8011f98 <USBD_Get_USB_Status>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3710      	adds	r7, #16
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	460b      	mov	r3, r1
 8011e32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	da0b      	bge.n	8011e5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011e44:	78fb      	ldrb	r3, [r7, #3]
 8011e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e4a:	68f9      	ldr	r1, [r7, #12]
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	00db      	lsls	r3, r3, #3
 8011e50:	4413      	add	r3, r2
 8011e52:	009b      	lsls	r3, r3, #2
 8011e54:	440b      	add	r3, r1
 8011e56:	3316      	adds	r3, #22
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	e00b      	b.n	8011e74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e5c:	78fb      	ldrb	r3, [r7, #3]
 8011e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e62:	68f9      	ldr	r1, [r7, #12]
 8011e64:	4613      	mov	r3, r2
 8011e66:	00db      	lsls	r3, r3, #3
 8011e68:	4413      	add	r3, r2
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	440b      	add	r3, r1
 8011e6e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3714      	adds	r7, #20
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr

08011e80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e90:	2300      	movs	r3, #0
 8011e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e9a:	78fa      	ldrb	r2, [r7, #3]
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7f6 fa09 	bl	80082b6 <HAL_PCD_SetAddress>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ea8:	7bfb      	ldrb	r3, [r7, #15]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f000 f874 	bl	8011f98 <USBD_Get_USB_Status>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	b086      	sub	sp, #24
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	60f8      	str	r0, [r7, #12]
 8011ec6:	607a      	str	r2, [r7, #4]
 8011ec8:	603b      	str	r3, [r7, #0]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011edc:	7af9      	ldrb	r1, [r7, #11]
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	687a      	ldr	r2, [r7, #4]
 8011ee2:	f7f6 fb13 	bl	800850c <HAL_PCD_EP_Transmit>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011eea:	7dfb      	ldrb	r3, [r7, #23]
 8011eec:	4618      	mov	r0, r3
 8011eee:	f000 f853 	bl	8011f98 <USBD_Get_USB_Status>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ef6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3718      	adds	r7, #24
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	607a      	str	r2, [r7, #4]
 8011f0a:	603b      	str	r3, [r7, #0]
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f10:	2300      	movs	r3, #0
 8011f12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f14:	2300      	movs	r3, #0
 8011f16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011f1e:	7af9      	ldrb	r1, [r7, #11]
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	f7f6 fa9f 	bl	8008466 <HAL_PCD_EP_Receive>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f2c:	7dfb      	ldrb	r3, [r7, #23]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f000 f832 	bl	8011f98 <USBD_Get_USB_Status>
 8011f34:	4603      	mov	r3, r0
 8011f36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011f38:	7dbb      	ldrb	r3, [r7, #22]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b082      	sub	sp, #8
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f54:	78fa      	ldrb	r2, [r7, #3]
 8011f56:	4611      	mov	r1, r2
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7f6 fabf 	bl	80084dc <HAL_PCD_EP_GetRxCount>
 8011f5e:	4603      	mov	r3, r0
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011f70:	4b03      	ldr	r3, [pc, #12]	@ (8011f80 <USBD_static_malloc+0x18>)
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	370c      	adds	r7, #12
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	240147c4 	.word	0x240147c4

08011f84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011f8c:	bf00      	nop
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	2b03      	cmp	r3, #3
 8011faa:	d817      	bhi.n	8011fdc <USBD_Get_USB_Status+0x44>
 8011fac:	a201      	add	r2, pc, #4	@ (adr r2, 8011fb4 <USBD_Get_USB_Status+0x1c>)
 8011fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb2:	bf00      	nop
 8011fb4:	08011fc5 	.word	0x08011fc5
 8011fb8:	08011fcb 	.word	0x08011fcb
 8011fbc:	08011fd1 	.word	0x08011fd1
 8011fc0:	08011fd7 	.word	0x08011fd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8011fc8:	e00b      	b.n	8011fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011fca:	2303      	movs	r3, #3
 8011fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8011fce:	e008      	b.n	8011fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8011fd4:	e005      	b.n	8011fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011fd6:	2303      	movs	r3, #3
 8011fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8011fda:	e002      	b.n	8011fe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011fdc:	2303      	movs	r3, #3
 8011fde:	73fb      	strb	r3, [r7, #15]
    break;
 8011fe0:	bf00      	nop
  }
  return usb_status;
 8011fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3714      	adds	r7, #20
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <siprintf>:
 8011ff0:	b40e      	push	{r1, r2, r3}
 8011ff2:	b510      	push	{r4, lr}
 8011ff4:	b09d      	sub	sp, #116	@ 0x74
 8011ff6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011ff8:	9002      	str	r0, [sp, #8]
 8011ffa:	9006      	str	r0, [sp, #24]
 8011ffc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012000:	480a      	ldr	r0, [pc, #40]	@ (801202c <siprintf+0x3c>)
 8012002:	9107      	str	r1, [sp, #28]
 8012004:	9104      	str	r1, [sp, #16]
 8012006:	490a      	ldr	r1, [pc, #40]	@ (8012030 <siprintf+0x40>)
 8012008:	f853 2b04 	ldr.w	r2, [r3], #4
 801200c:	9105      	str	r1, [sp, #20]
 801200e:	2400      	movs	r4, #0
 8012010:	a902      	add	r1, sp, #8
 8012012:	6800      	ldr	r0, [r0, #0]
 8012014:	9301      	str	r3, [sp, #4]
 8012016:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012018:	f000 f994 	bl	8012344 <_svfiprintf_r>
 801201c:	9b02      	ldr	r3, [sp, #8]
 801201e:	701c      	strb	r4, [r3, #0]
 8012020:	b01d      	add	sp, #116	@ 0x74
 8012022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012026:	b003      	add	sp, #12
 8012028:	4770      	bx	lr
 801202a:	bf00      	nop
 801202c:	24000108 	.word	0x24000108
 8012030:	ffff0208 	.word	0xffff0208

08012034 <memset>:
 8012034:	4402      	add	r2, r0
 8012036:	4603      	mov	r3, r0
 8012038:	4293      	cmp	r3, r2
 801203a:	d100      	bne.n	801203e <memset+0xa>
 801203c:	4770      	bx	lr
 801203e:	f803 1b01 	strb.w	r1, [r3], #1
 8012042:	e7f9      	b.n	8012038 <memset+0x4>

08012044 <__errno>:
 8012044:	4b01      	ldr	r3, [pc, #4]	@ (801204c <__errno+0x8>)
 8012046:	6818      	ldr	r0, [r3, #0]
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	24000108 	.word	0x24000108

08012050 <__libc_init_array>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	4d0d      	ldr	r5, [pc, #52]	@ (8012088 <__libc_init_array+0x38>)
 8012054:	4c0d      	ldr	r4, [pc, #52]	@ (801208c <__libc_init_array+0x3c>)
 8012056:	1b64      	subs	r4, r4, r5
 8012058:	10a4      	asrs	r4, r4, #2
 801205a:	2600      	movs	r6, #0
 801205c:	42a6      	cmp	r6, r4
 801205e:	d109      	bne.n	8012074 <__libc_init_array+0x24>
 8012060:	4d0b      	ldr	r5, [pc, #44]	@ (8012090 <__libc_init_array+0x40>)
 8012062:	4c0c      	ldr	r4, [pc, #48]	@ (8012094 <__libc_init_array+0x44>)
 8012064:	f000 fc64 	bl	8012930 <_init>
 8012068:	1b64      	subs	r4, r4, r5
 801206a:	10a4      	asrs	r4, r4, #2
 801206c:	2600      	movs	r6, #0
 801206e:	42a6      	cmp	r6, r4
 8012070:	d105      	bne.n	801207e <__libc_init_array+0x2e>
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	f855 3b04 	ldr.w	r3, [r5], #4
 8012078:	4798      	blx	r3
 801207a:	3601      	adds	r6, #1
 801207c:	e7ee      	b.n	801205c <__libc_init_array+0xc>
 801207e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012082:	4798      	blx	r3
 8012084:	3601      	adds	r6, #1
 8012086:	e7f2      	b.n	801206e <__libc_init_array+0x1e>
 8012088:	08012db4 	.word	0x08012db4
 801208c:	08012db4 	.word	0x08012db4
 8012090:	08012db4 	.word	0x08012db4
 8012094:	08012db8 	.word	0x08012db8

08012098 <__retarget_lock_acquire_recursive>:
 8012098:	4770      	bx	lr

0801209a <__retarget_lock_release_recursive>:
 801209a:	4770      	bx	lr

0801209c <_free_r>:
 801209c:	b538      	push	{r3, r4, r5, lr}
 801209e:	4605      	mov	r5, r0
 80120a0:	2900      	cmp	r1, #0
 80120a2:	d041      	beq.n	8012128 <_free_r+0x8c>
 80120a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120a8:	1f0c      	subs	r4, r1, #4
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	bfb8      	it	lt
 80120ae:	18e4      	addlt	r4, r4, r3
 80120b0:	f000 f8e0 	bl	8012274 <__malloc_lock>
 80120b4:	4a1d      	ldr	r2, [pc, #116]	@ (801212c <_free_r+0x90>)
 80120b6:	6813      	ldr	r3, [r2, #0]
 80120b8:	b933      	cbnz	r3, 80120c8 <_free_r+0x2c>
 80120ba:	6063      	str	r3, [r4, #4]
 80120bc:	6014      	str	r4, [r2, #0]
 80120be:	4628      	mov	r0, r5
 80120c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120c4:	f000 b8dc 	b.w	8012280 <__malloc_unlock>
 80120c8:	42a3      	cmp	r3, r4
 80120ca:	d908      	bls.n	80120de <_free_r+0x42>
 80120cc:	6820      	ldr	r0, [r4, #0]
 80120ce:	1821      	adds	r1, r4, r0
 80120d0:	428b      	cmp	r3, r1
 80120d2:	bf01      	itttt	eq
 80120d4:	6819      	ldreq	r1, [r3, #0]
 80120d6:	685b      	ldreq	r3, [r3, #4]
 80120d8:	1809      	addeq	r1, r1, r0
 80120da:	6021      	streq	r1, [r4, #0]
 80120dc:	e7ed      	b.n	80120ba <_free_r+0x1e>
 80120de:	461a      	mov	r2, r3
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	b10b      	cbz	r3, 80120e8 <_free_r+0x4c>
 80120e4:	42a3      	cmp	r3, r4
 80120e6:	d9fa      	bls.n	80120de <_free_r+0x42>
 80120e8:	6811      	ldr	r1, [r2, #0]
 80120ea:	1850      	adds	r0, r2, r1
 80120ec:	42a0      	cmp	r0, r4
 80120ee:	d10b      	bne.n	8012108 <_free_r+0x6c>
 80120f0:	6820      	ldr	r0, [r4, #0]
 80120f2:	4401      	add	r1, r0
 80120f4:	1850      	adds	r0, r2, r1
 80120f6:	4283      	cmp	r3, r0
 80120f8:	6011      	str	r1, [r2, #0]
 80120fa:	d1e0      	bne.n	80120be <_free_r+0x22>
 80120fc:	6818      	ldr	r0, [r3, #0]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	6053      	str	r3, [r2, #4]
 8012102:	4408      	add	r0, r1
 8012104:	6010      	str	r0, [r2, #0]
 8012106:	e7da      	b.n	80120be <_free_r+0x22>
 8012108:	d902      	bls.n	8012110 <_free_r+0x74>
 801210a:	230c      	movs	r3, #12
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	e7d6      	b.n	80120be <_free_r+0x22>
 8012110:	6820      	ldr	r0, [r4, #0]
 8012112:	1821      	adds	r1, r4, r0
 8012114:	428b      	cmp	r3, r1
 8012116:	bf04      	itt	eq
 8012118:	6819      	ldreq	r1, [r3, #0]
 801211a:	685b      	ldreq	r3, [r3, #4]
 801211c:	6063      	str	r3, [r4, #4]
 801211e:	bf04      	itt	eq
 8012120:	1809      	addeq	r1, r1, r0
 8012122:	6021      	streq	r1, [r4, #0]
 8012124:	6054      	str	r4, [r2, #4]
 8012126:	e7ca      	b.n	80120be <_free_r+0x22>
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	bf00      	nop
 801212c:	24014b28 	.word	0x24014b28

08012130 <sbrk_aligned>:
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	4e0f      	ldr	r6, [pc, #60]	@ (8012170 <sbrk_aligned+0x40>)
 8012134:	460c      	mov	r4, r1
 8012136:	6831      	ldr	r1, [r6, #0]
 8012138:	4605      	mov	r5, r0
 801213a:	b911      	cbnz	r1, 8012142 <sbrk_aligned+0x12>
 801213c:	f000 fba4 	bl	8012888 <_sbrk_r>
 8012140:	6030      	str	r0, [r6, #0]
 8012142:	4621      	mov	r1, r4
 8012144:	4628      	mov	r0, r5
 8012146:	f000 fb9f 	bl	8012888 <_sbrk_r>
 801214a:	1c43      	adds	r3, r0, #1
 801214c:	d103      	bne.n	8012156 <sbrk_aligned+0x26>
 801214e:	f04f 34ff 	mov.w	r4, #4294967295
 8012152:	4620      	mov	r0, r4
 8012154:	bd70      	pop	{r4, r5, r6, pc}
 8012156:	1cc4      	adds	r4, r0, #3
 8012158:	f024 0403 	bic.w	r4, r4, #3
 801215c:	42a0      	cmp	r0, r4
 801215e:	d0f8      	beq.n	8012152 <sbrk_aligned+0x22>
 8012160:	1a21      	subs	r1, r4, r0
 8012162:	4628      	mov	r0, r5
 8012164:	f000 fb90 	bl	8012888 <_sbrk_r>
 8012168:	3001      	adds	r0, #1
 801216a:	d1f2      	bne.n	8012152 <sbrk_aligned+0x22>
 801216c:	e7ef      	b.n	801214e <sbrk_aligned+0x1e>
 801216e:	bf00      	nop
 8012170:	24014b24 	.word	0x24014b24

08012174 <_malloc_r>:
 8012174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012178:	1ccd      	adds	r5, r1, #3
 801217a:	f025 0503 	bic.w	r5, r5, #3
 801217e:	3508      	adds	r5, #8
 8012180:	2d0c      	cmp	r5, #12
 8012182:	bf38      	it	cc
 8012184:	250c      	movcc	r5, #12
 8012186:	2d00      	cmp	r5, #0
 8012188:	4606      	mov	r6, r0
 801218a:	db01      	blt.n	8012190 <_malloc_r+0x1c>
 801218c:	42a9      	cmp	r1, r5
 801218e:	d904      	bls.n	801219a <_malloc_r+0x26>
 8012190:	230c      	movs	r3, #12
 8012192:	6033      	str	r3, [r6, #0]
 8012194:	2000      	movs	r0, #0
 8012196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012270 <_malloc_r+0xfc>
 801219e:	f000 f869 	bl	8012274 <__malloc_lock>
 80121a2:	f8d8 3000 	ldr.w	r3, [r8]
 80121a6:	461c      	mov	r4, r3
 80121a8:	bb44      	cbnz	r4, 80121fc <_malloc_r+0x88>
 80121aa:	4629      	mov	r1, r5
 80121ac:	4630      	mov	r0, r6
 80121ae:	f7ff ffbf 	bl	8012130 <sbrk_aligned>
 80121b2:	1c43      	adds	r3, r0, #1
 80121b4:	4604      	mov	r4, r0
 80121b6:	d158      	bne.n	801226a <_malloc_r+0xf6>
 80121b8:	f8d8 4000 	ldr.w	r4, [r8]
 80121bc:	4627      	mov	r7, r4
 80121be:	2f00      	cmp	r7, #0
 80121c0:	d143      	bne.n	801224a <_malloc_r+0xd6>
 80121c2:	2c00      	cmp	r4, #0
 80121c4:	d04b      	beq.n	801225e <_malloc_r+0xea>
 80121c6:	6823      	ldr	r3, [r4, #0]
 80121c8:	4639      	mov	r1, r7
 80121ca:	4630      	mov	r0, r6
 80121cc:	eb04 0903 	add.w	r9, r4, r3
 80121d0:	f000 fb5a 	bl	8012888 <_sbrk_r>
 80121d4:	4581      	cmp	r9, r0
 80121d6:	d142      	bne.n	801225e <_malloc_r+0xea>
 80121d8:	6821      	ldr	r1, [r4, #0]
 80121da:	1a6d      	subs	r5, r5, r1
 80121dc:	4629      	mov	r1, r5
 80121de:	4630      	mov	r0, r6
 80121e0:	f7ff ffa6 	bl	8012130 <sbrk_aligned>
 80121e4:	3001      	adds	r0, #1
 80121e6:	d03a      	beq.n	801225e <_malloc_r+0xea>
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	442b      	add	r3, r5
 80121ec:	6023      	str	r3, [r4, #0]
 80121ee:	f8d8 3000 	ldr.w	r3, [r8]
 80121f2:	685a      	ldr	r2, [r3, #4]
 80121f4:	bb62      	cbnz	r2, 8012250 <_malloc_r+0xdc>
 80121f6:	f8c8 7000 	str.w	r7, [r8]
 80121fa:	e00f      	b.n	801221c <_malloc_r+0xa8>
 80121fc:	6822      	ldr	r2, [r4, #0]
 80121fe:	1b52      	subs	r2, r2, r5
 8012200:	d420      	bmi.n	8012244 <_malloc_r+0xd0>
 8012202:	2a0b      	cmp	r2, #11
 8012204:	d917      	bls.n	8012236 <_malloc_r+0xc2>
 8012206:	1961      	adds	r1, r4, r5
 8012208:	42a3      	cmp	r3, r4
 801220a:	6025      	str	r5, [r4, #0]
 801220c:	bf18      	it	ne
 801220e:	6059      	strne	r1, [r3, #4]
 8012210:	6863      	ldr	r3, [r4, #4]
 8012212:	bf08      	it	eq
 8012214:	f8c8 1000 	streq.w	r1, [r8]
 8012218:	5162      	str	r2, [r4, r5]
 801221a:	604b      	str	r3, [r1, #4]
 801221c:	4630      	mov	r0, r6
 801221e:	f000 f82f 	bl	8012280 <__malloc_unlock>
 8012222:	f104 000b 	add.w	r0, r4, #11
 8012226:	1d23      	adds	r3, r4, #4
 8012228:	f020 0007 	bic.w	r0, r0, #7
 801222c:	1ac2      	subs	r2, r0, r3
 801222e:	bf1c      	itt	ne
 8012230:	1a1b      	subne	r3, r3, r0
 8012232:	50a3      	strne	r3, [r4, r2]
 8012234:	e7af      	b.n	8012196 <_malloc_r+0x22>
 8012236:	6862      	ldr	r2, [r4, #4]
 8012238:	42a3      	cmp	r3, r4
 801223a:	bf0c      	ite	eq
 801223c:	f8c8 2000 	streq.w	r2, [r8]
 8012240:	605a      	strne	r2, [r3, #4]
 8012242:	e7eb      	b.n	801221c <_malloc_r+0xa8>
 8012244:	4623      	mov	r3, r4
 8012246:	6864      	ldr	r4, [r4, #4]
 8012248:	e7ae      	b.n	80121a8 <_malloc_r+0x34>
 801224a:	463c      	mov	r4, r7
 801224c:	687f      	ldr	r7, [r7, #4]
 801224e:	e7b6      	b.n	80121be <_malloc_r+0x4a>
 8012250:	461a      	mov	r2, r3
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	42a3      	cmp	r3, r4
 8012256:	d1fb      	bne.n	8012250 <_malloc_r+0xdc>
 8012258:	2300      	movs	r3, #0
 801225a:	6053      	str	r3, [r2, #4]
 801225c:	e7de      	b.n	801221c <_malloc_r+0xa8>
 801225e:	230c      	movs	r3, #12
 8012260:	6033      	str	r3, [r6, #0]
 8012262:	4630      	mov	r0, r6
 8012264:	f000 f80c 	bl	8012280 <__malloc_unlock>
 8012268:	e794      	b.n	8012194 <_malloc_r+0x20>
 801226a:	6005      	str	r5, [r0, #0]
 801226c:	e7d6      	b.n	801221c <_malloc_r+0xa8>
 801226e:	bf00      	nop
 8012270:	24014b28 	.word	0x24014b28

08012274 <__malloc_lock>:
 8012274:	4801      	ldr	r0, [pc, #4]	@ (801227c <__malloc_lock+0x8>)
 8012276:	f7ff bf0f 	b.w	8012098 <__retarget_lock_acquire_recursive>
 801227a:	bf00      	nop
 801227c:	24014b20 	.word	0x24014b20

08012280 <__malloc_unlock>:
 8012280:	4801      	ldr	r0, [pc, #4]	@ (8012288 <__malloc_unlock+0x8>)
 8012282:	f7ff bf0a 	b.w	801209a <__retarget_lock_release_recursive>
 8012286:	bf00      	nop
 8012288:	24014b20 	.word	0x24014b20

0801228c <__ssputs_r>:
 801228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012290:	688e      	ldr	r6, [r1, #8]
 8012292:	461f      	mov	r7, r3
 8012294:	42be      	cmp	r6, r7
 8012296:	680b      	ldr	r3, [r1, #0]
 8012298:	4682      	mov	sl, r0
 801229a:	460c      	mov	r4, r1
 801229c:	4690      	mov	r8, r2
 801229e:	d82d      	bhi.n	80122fc <__ssputs_r+0x70>
 80122a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80122a8:	d026      	beq.n	80122f8 <__ssputs_r+0x6c>
 80122aa:	6965      	ldr	r5, [r4, #20]
 80122ac:	6909      	ldr	r1, [r1, #16]
 80122ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80122b2:	eba3 0901 	sub.w	r9, r3, r1
 80122b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122ba:	1c7b      	adds	r3, r7, #1
 80122bc:	444b      	add	r3, r9
 80122be:	106d      	asrs	r5, r5, #1
 80122c0:	429d      	cmp	r5, r3
 80122c2:	bf38      	it	cc
 80122c4:	461d      	movcc	r5, r3
 80122c6:	0553      	lsls	r3, r2, #21
 80122c8:	d527      	bpl.n	801231a <__ssputs_r+0x8e>
 80122ca:	4629      	mov	r1, r5
 80122cc:	f7ff ff52 	bl	8012174 <_malloc_r>
 80122d0:	4606      	mov	r6, r0
 80122d2:	b360      	cbz	r0, 801232e <__ssputs_r+0xa2>
 80122d4:	6921      	ldr	r1, [r4, #16]
 80122d6:	464a      	mov	r2, r9
 80122d8:	f000 fae6 	bl	80128a8 <memcpy>
 80122dc:	89a3      	ldrh	r3, [r4, #12]
 80122de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80122e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122e6:	81a3      	strh	r3, [r4, #12]
 80122e8:	6126      	str	r6, [r4, #16]
 80122ea:	6165      	str	r5, [r4, #20]
 80122ec:	444e      	add	r6, r9
 80122ee:	eba5 0509 	sub.w	r5, r5, r9
 80122f2:	6026      	str	r6, [r4, #0]
 80122f4:	60a5      	str	r5, [r4, #8]
 80122f6:	463e      	mov	r6, r7
 80122f8:	42be      	cmp	r6, r7
 80122fa:	d900      	bls.n	80122fe <__ssputs_r+0x72>
 80122fc:	463e      	mov	r6, r7
 80122fe:	6820      	ldr	r0, [r4, #0]
 8012300:	4632      	mov	r2, r6
 8012302:	4641      	mov	r1, r8
 8012304:	f000 faa6 	bl	8012854 <memmove>
 8012308:	68a3      	ldr	r3, [r4, #8]
 801230a:	1b9b      	subs	r3, r3, r6
 801230c:	60a3      	str	r3, [r4, #8]
 801230e:	6823      	ldr	r3, [r4, #0]
 8012310:	4433      	add	r3, r6
 8012312:	6023      	str	r3, [r4, #0]
 8012314:	2000      	movs	r0, #0
 8012316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801231a:	462a      	mov	r2, r5
 801231c:	f000 fad2 	bl	80128c4 <_realloc_r>
 8012320:	4606      	mov	r6, r0
 8012322:	2800      	cmp	r0, #0
 8012324:	d1e0      	bne.n	80122e8 <__ssputs_r+0x5c>
 8012326:	6921      	ldr	r1, [r4, #16]
 8012328:	4650      	mov	r0, sl
 801232a:	f7ff feb7 	bl	801209c <_free_r>
 801232e:	230c      	movs	r3, #12
 8012330:	f8ca 3000 	str.w	r3, [sl]
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801233a:	81a3      	strh	r3, [r4, #12]
 801233c:	f04f 30ff 	mov.w	r0, #4294967295
 8012340:	e7e9      	b.n	8012316 <__ssputs_r+0x8a>
	...

08012344 <_svfiprintf_r>:
 8012344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012348:	4698      	mov	r8, r3
 801234a:	898b      	ldrh	r3, [r1, #12]
 801234c:	061b      	lsls	r3, r3, #24
 801234e:	b09d      	sub	sp, #116	@ 0x74
 8012350:	4607      	mov	r7, r0
 8012352:	460d      	mov	r5, r1
 8012354:	4614      	mov	r4, r2
 8012356:	d510      	bpl.n	801237a <_svfiprintf_r+0x36>
 8012358:	690b      	ldr	r3, [r1, #16]
 801235a:	b973      	cbnz	r3, 801237a <_svfiprintf_r+0x36>
 801235c:	2140      	movs	r1, #64	@ 0x40
 801235e:	f7ff ff09 	bl	8012174 <_malloc_r>
 8012362:	6028      	str	r0, [r5, #0]
 8012364:	6128      	str	r0, [r5, #16]
 8012366:	b930      	cbnz	r0, 8012376 <_svfiprintf_r+0x32>
 8012368:	230c      	movs	r3, #12
 801236a:	603b      	str	r3, [r7, #0]
 801236c:	f04f 30ff 	mov.w	r0, #4294967295
 8012370:	b01d      	add	sp, #116	@ 0x74
 8012372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012376:	2340      	movs	r3, #64	@ 0x40
 8012378:	616b      	str	r3, [r5, #20]
 801237a:	2300      	movs	r3, #0
 801237c:	9309      	str	r3, [sp, #36]	@ 0x24
 801237e:	2320      	movs	r3, #32
 8012380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012384:	f8cd 800c 	str.w	r8, [sp, #12]
 8012388:	2330      	movs	r3, #48	@ 0x30
 801238a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012528 <_svfiprintf_r+0x1e4>
 801238e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012392:	f04f 0901 	mov.w	r9, #1
 8012396:	4623      	mov	r3, r4
 8012398:	469a      	mov	sl, r3
 801239a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801239e:	b10a      	cbz	r2, 80123a4 <_svfiprintf_r+0x60>
 80123a0:	2a25      	cmp	r2, #37	@ 0x25
 80123a2:	d1f9      	bne.n	8012398 <_svfiprintf_r+0x54>
 80123a4:	ebba 0b04 	subs.w	fp, sl, r4
 80123a8:	d00b      	beq.n	80123c2 <_svfiprintf_r+0x7e>
 80123aa:	465b      	mov	r3, fp
 80123ac:	4622      	mov	r2, r4
 80123ae:	4629      	mov	r1, r5
 80123b0:	4638      	mov	r0, r7
 80123b2:	f7ff ff6b 	bl	801228c <__ssputs_r>
 80123b6:	3001      	adds	r0, #1
 80123b8:	f000 80a7 	beq.w	801250a <_svfiprintf_r+0x1c6>
 80123bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123be:	445a      	add	r2, fp
 80123c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80123c2:	f89a 3000 	ldrb.w	r3, [sl]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f000 809f 	beq.w	801250a <_svfiprintf_r+0x1c6>
 80123cc:	2300      	movs	r3, #0
 80123ce:	f04f 32ff 	mov.w	r2, #4294967295
 80123d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123d6:	f10a 0a01 	add.w	sl, sl, #1
 80123da:	9304      	str	r3, [sp, #16]
 80123dc:	9307      	str	r3, [sp, #28]
 80123de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80123e4:	4654      	mov	r4, sl
 80123e6:	2205      	movs	r2, #5
 80123e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ec:	484e      	ldr	r0, [pc, #312]	@ (8012528 <_svfiprintf_r+0x1e4>)
 80123ee:	f7ed ff7f 	bl	80002f0 <memchr>
 80123f2:	9a04      	ldr	r2, [sp, #16]
 80123f4:	b9d8      	cbnz	r0, 801242e <_svfiprintf_r+0xea>
 80123f6:	06d0      	lsls	r0, r2, #27
 80123f8:	bf44      	itt	mi
 80123fa:	2320      	movmi	r3, #32
 80123fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012400:	0711      	lsls	r1, r2, #28
 8012402:	bf44      	itt	mi
 8012404:	232b      	movmi	r3, #43	@ 0x2b
 8012406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801240a:	f89a 3000 	ldrb.w	r3, [sl]
 801240e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012410:	d015      	beq.n	801243e <_svfiprintf_r+0xfa>
 8012412:	9a07      	ldr	r2, [sp, #28]
 8012414:	4654      	mov	r4, sl
 8012416:	2000      	movs	r0, #0
 8012418:	f04f 0c0a 	mov.w	ip, #10
 801241c:	4621      	mov	r1, r4
 801241e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012422:	3b30      	subs	r3, #48	@ 0x30
 8012424:	2b09      	cmp	r3, #9
 8012426:	d94b      	bls.n	80124c0 <_svfiprintf_r+0x17c>
 8012428:	b1b0      	cbz	r0, 8012458 <_svfiprintf_r+0x114>
 801242a:	9207      	str	r2, [sp, #28]
 801242c:	e014      	b.n	8012458 <_svfiprintf_r+0x114>
 801242e:	eba0 0308 	sub.w	r3, r0, r8
 8012432:	fa09 f303 	lsl.w	r3, r9, r3
 8012436:	4313      	orrs	r3, r2
 8012438:	9304      	str	r3, [sp, #16]
 801243a:	46a2      	mov	sl, r4
 801243c:	e7d2      	b.n	80123e4 <_svfiprintf_r+0xa0>
 801243e:	9b03      	ldr	r3, [sp, #12]
 8012440:	1d19      	adds	r1, r3, #4
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	9103      	str	r1, [sp, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	bfbb      	ittet	lt
 801244a:	425b      	neglt	r3, r3
 801244c:	f042 0202 	orrlt.w	r2, r2, #2
 8012450:	9307      	strge	r3, [sp, #28]
 8012452:	9307      	strlt	r3, [sp, #28]
 8012454:	bfb8      	it	lt
 8012456:	9204      	strlt	r2, [sp, #16]
 8012458:	7823      	ldrb	r3, [r4, #0]
 801245a:	2b2e      	cmp	r3, #46	@ 0x2e
 801245c:	d10a      	bne.n	8012474 <_svfiprintf_r+0x130>
 801245e:	7863      	ldrb	r3, [r4, #1]
 8012460:	2b2a      	cmp	r3, #42	@ 0x2a
 8012462:	d132      	bne.n	80124ca <_svfiprintf_r+0x186>
 8012464:	9b03      	ldr	r3, [sp, #12]
 8012466:	1d1a      	adds	r2, r3, #4
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	9203      	str	r2, [sp, #12]
 801246c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012470:	3402      	adds	r4, #2
 8012472:	9305      	str	r3, [sp, #20]
 8012474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012538 <_svfiprintf_r+0x1f4>
 8012478:	7821      	ldrb	r1, [r4, #0]
 801247a:	2203      	movs	r2, #3
 801247c:	4650      	mov	r0, sl
 801247e:	f7ed ff37 	bl	80002f0 <memchr>
 8012482:	b138      	cbz	r0, 8012494 <_svfiprintf_r+0x150>
 8012484:	9b04      	ldr	r3, [sp, #16]
 8012486:	eba0 000a 	sub.w	r0, r0, sl
 801248a:	2240      	movs	r2, #64	@ 0x40
 801248c:	4082      	lsls	r2, r0
 801248e:	4313      	orrs	r3, r2
 8012490:	3401      	adds	r4, #1
 8012492:	9304      	str	r3, [sp, #16]
 8012494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012498:	4824      	ldr	r0, [pc, #144]	@ (801252c <_svfiprintf_r+0x1e8>)
 801249a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801249e:	2206      	movs	r2, #6
 80124a0:	f7ed ff26 	bl	80002f0 <memchr>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d036      	beq.n	8012516 <_svfiprintf_r+0x1d2>
 80124a8:	4b21      	ldr	r3, [pc, #132]	@ (8012530 <_svfiprintf_r+0x1ec>)
 80124aa:	bb1b      	cbnz	r3, 80124f4 <_svfiprintf_r+0x1b0>
 80124ac:	9b03      	ldr	r3, [sp, #12]
 80124ae:	3307      	adds	r3, #7
 80124b0:	f023 0307 	bic.w	r3, r3, #7
 80124b4:	3308      	adds	r3, #8
 80124b6:	9303      	str	r3, [sp, #12]
 80124b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ba:	4433      	add	r3, r6
 80124bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80124be:	e76a      	b.n	8012396 <_svfiprintf_r+0x52>
 80124c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80124c4:	460c      	mov	r4, r1
 80124c6:	2001      	movs	r0, #1
 80124c8:	e7a8      	b.n	801241c <_svfiprintf_r+0xd8>
 80124ca:	2300      	movs	r3, #0
 80124cc:	3401      	adds	r4, #1
 80124ce:	9305      	str	r3, [sp, #20]
 80124d0:	4619      	mov	r1, r3
 80124d2:	f04f 0c0a 	mov.w	ip, #10
 80124d6:	4620      	mov	r0, r4
 80124d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124dc:	3a30      	subs	r2, #48	@ 0x30
 80124de:	2a09      	cmp	r2, #9
 80124e0:	d903      	bls.n	80124ea <_svfiprintf_r+0x1a6>
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d0c6      	beq.n	8012474 <_svfiprintf_r+0x130>
 80124e6:	9105      	str	r1, [sp, #20]
 80124e8:	e7c4      	b.n	8012474 <_svfiprintf_r+0x130>
 80124ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80124ee:	4604      	mov	r4, r0
 80124f0:	2301      	movs	r3, #1
 80124f2:	e7f0      	b.n	80124d6 <_svfiprintf_r+0x192>
 80124f4:	ab03      	add	r3, sp, #12
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	462a      	mov	r2, r5
 80124fa:	4b0e      	ldr	r3, [pc, #56]	@ (8012534 <_svfiprintf_r+0x1f0>)
 80124fc:	a904      	add	r1, sp, #16
 80124fe:	4638      	mov	r0, r7
 8012500:	f3af 8000 	nop.w
 8012504:	1c42      	adds	r2, r0, #1
 8012506:	4606      	mov	r6, r0
 8012508:	d1d6      	bne.n	80124b8 <_svfiprintf_r+0x174>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	065b      	lsls	r3, r3, #25
 801250e:	f53f af2d 	bmi.w	801236c <_svfiprintf_r+0x28>
 8012512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012514:	e72c      	b.n	8012370 <_svfiprintf_r+0x2c>
 8012516:	ab03      	add	r3, sp, #12
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	462a      	mov	r2, r5
 801251c:	4b05      	ldr	r3, [pc, #20]	@ (8012534 <_svfiprintf_r+0x1f0>)
 801251e:	a904      	add	r1, sp, #16
 8012520:	4638      	mov	r0, r7
 8012522:	f000 f879 	bl	8012618 <_printf_i>
 8012526:	e7ed      	b.n	8012504 <_svfiprintf_r+0x1c0>
 8012528:	08012d78 	.word	0x08012d78
 801252c:	08012d82 	.word	0x08012d82
 8012530:	00000000 	.word	0x00000000
 8012534:	0801228d 	.word	0x0801228d
 8012538:	08012d7e 	.word	0x08012d7e

0801253c <_printf_common>:
 801253c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012540:	4616      	mov	r6, r2
 8012542:	4698      	mov	r8, r3
 8012544:	688a      	ldr	r2, [r1, #8]
 8012546:	690b      	ldr	r3, [r1, #16]
 8012548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801254c:	4293      	cmp	r3, r2
 801254e:	bfb8      	it	lt
 8012550:	4613      	movlt	r3, r2
 8012552:	6033      	str	r3, [r6, #0]
 8012554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012558:	4607      	mov	r7, r0
 801255a:	460c      	mov	r4, r1
 801255c:	b10a      	cbz	r2, 8012562 <_printf_common+0x26>
 801255e:	3301      	adds	r3, #1
 8012560:	6033      	str	r3, [r6, #0]
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	0699      	lsls	r1, r3, #26
 8012566:	bf42      	ittt	mi
 8012568:	6833      	ldrmi	r3, [r6, #0]
 801256a:	3302      	addmi	r3, #2
 801256c:	6033      	strmi	r3, [r6, #0]
 801256e:	6825      	ldr	r5, [r4, #0]
 8012570:	f015 0506 	ands.w	r5, r5, #6
 8012574:	d106      	bne.n	8012584 <_printf_common+0x48>
 8012576:	f104 0a19 	add.w	sl, r4, #25
 801257a:	68e3      	ldr	r3, [r4, #12]
 801257c:	6832      	ldr	r2, [r6, #0]
 801257e:	1a9b      	subs	r3, r3, r2
 8012580:	42ab      	cmp	r3, r5
 8012582:	dc26      	bgt.n	80125d2 <_printf_common+0x96>
 8012584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012588:	6822      	ldr	r2, [r4, #0]
 801258a:	3b00      	subs	r3, #0
 801258c:	bf18      	it	ne
 801258e:	2301      	movne	r3, #1
 8012590:	0692      	lsls	r2, r2, #26
 8012592:	d42b      	bmi.n	80125ec <_printf_common+0xb0>
 8012594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012598:	4641      	mov	r1, r8
 801259a:	4638      	mov	r0, r7
 801259c:	47c8      	blx	r9
 801259e:	3001      	adds	r0, #1
 80125a0:	d01e      	beq.n	80125e0 <_printf_common+0xa4>
 80125a2:	6823      	ldr	r3, [r4, #0]
 80125a4:	6922      	ldr	r2, [r4, #16]
 80125a6:	f003 0306 	and.w	r3, r3, #6
 80125aa:	2b04      	cmp	r3, #4
 80125ac:	bf02      	ittt	eq
 80125ae:	68e5      	ldreq	r5, [r4, #12]
 80125b0:	6833      	ldreq	r3, [r6, #0]
 80125b2:	1aed      	subeq	r5, r5, r3
 80125b4:	68a3      	ldr	r3, [r4, #8]
 80125b6:	bf0c      	ite	eq
 80125b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125bc:	2500      	movne	r5, #0
 80125be:	4293      	cmp	r3, r2
 80125c0:	bfc4      	itt	gt
 80125c2:	1a9b      	subgt	r3, r3, r2
 80125c4:	18ed      	addgt	r5, r5, r3
 80125c6:	2600      	movs	r6, #0
 80125c8:	341a      	adds	r4, #26
 80125ca:	42b5      	cmp	r5, r6
 80125cc:	d11a      	bne.n	8012604 <_printf_common+0xc8>
 80125ce:	2000      	movs	r0, #0
 80125d0:	e008      	b.n	80125e4 <_printf_common+0xa8>
 80125d2:	2301      	movs	r3, #1
 80125d4:	4652      	mov	r2, sl
 80125d6:	4641      	mov	r1, r8
 80125d8:	4638      	mov	r0, r7
 80125da:	47c8      	blx	r9
 80125dc:	3001      	adds	r0, #1
 80125de:	d103      	bne.n	80125e8 <_printf_common+0xac>
 80125e0:	f04f 30ff 	mov.w	r0, #4294967295
 80125e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e8:	3501      	adds	r5, #1
 80125ea:	e7c6      	b.n	801257a <_printf_common+0x3e>
 80125ec:	18e1      	adds	r1, r4, r3
 80125ee:	1c5a      	adds	r2, r3, #1
 80125f0:	2030      	movs	r0, #48	@ 0x30
 80125f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80125f6:	4422      	add	r2, r4
 80125f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80125fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012600:	3302      	adds	r3, #2
 8012602:	e7c7      	b.n	8012594 <_printf_common+0x58>
 8012604:	2301      	movs	r3, #1
 8012606:	4622      	mov	r2, r4
 8012608:	4641      	mov	r1, r8
 801260a:	4638      	mov	r0, r7
 801260c:	47c8      	blx	r9
 801260e:	3001      	adds	r0, #1
 8012610:	d0e6      	beq.n	80125e0 <_printf_common+0xa4>
 8012612:	3601      	adds	r6, #1
 8012614:	e7d9      	b.n	80125ca <_printf_common+0x8e>
	...

08012618 <_printf_i>:
 8012618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801261c:	7e0f      	ldrb	r7, [r1, #24]
 801261e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012620:	2f78      	cmp	r7, #120	@ 0x78
 8012622:	4691      	mov	r9, r2
 8012624:	4680      	mov	r8, r0
 8012626:	460c      	mov	r4, r1
 8012628:	469a      	mov	sl, r3
 801262a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801262e:	d807      	bhi.n	8012640 <_printf_i+0x28>
 8012630:	2f62      	cmp	r7, #98	@ 0x62
 8012632:	d80a      	bhi.n	801264a <_printf_i+0x32>
 8012634:	2f00      	cmp	r7, #0
 8012636:	f000 80d1 	beq.w	80127dc <_printf_i+0x1c4>
 801263a:	2f58      	cmp	r7, #88	@ 0x58
 801263c:	f000 80b8 	beq.w	80127b0 <_printf_i+0x198>
 8012640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012648:	e03a      	b.n	80126c0 <_printf_i+0xa8>
 801264a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801264e:	2b15      	cmp	r3, #21
 8012650:	d8f6      	bhi.n	8012640 <_printf_i+0x28>
 8012652:	a101      	add	r1, pc, #4	@ (adr r1, 8012658 <_printf_i+0x40>)
 8012654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012658:	080126b1 	.word	0x080126b1
 801265c:	080126c5 	.word	0x080126c5
 8012660:	08012641 	.word	0x08012641
 8012664:	08012641 	.word	0x08012641
 8012668:	08012641 	.word	0x08012641
 801266c:	08012641 	.word	0x08012641
 8012670:	080126c5 	.word	0x080126c5
 8012674:	08012641 	.word	0x08012641
 8012678:	08012641 	.word	0x08012641
 801267c:	08012641 	.word	0x08012641
 8012680:	08012641 	.word	0x08012641
 8012684:	080127c3 	.word	0x080127c3
 8012688:	080126ef 	.word	0x080126ef
 801268c:	0801277d 	.word	0x0801277d
 8012690:	08012641 	.word	0x08012641
 8012694:	08012641 	.word	0x08012641
 8012698:	080127e5 	.word	0x080127e5
 801269c:	08012641 	.word	0x08012641
 80126a0:	080126ef 	.word	0x080126ef
 80126a4:	08012641 	.word	0x08012641
 80126a8:	08012641 	.word	0x08012641
 80126ac:	08012785 	.word	0x08012785
 80126b0:	6833      	ldr	r3, [r6, #0]
 80126b2:	1d1a      	adds	r2, r3, #4
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	6032      	str	r2, [r6, #0]
 80126b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80126c0:	2301      	movs	r3, #1
 80126c2:	e09c      	b.n	80127fe <_printf_i+0x1e6>
 80126c4:	6833      	ldr	r3, [r6, #0]
 80126c6:	6820      	ldr	r0, [r4, #0]
 80126c8:	1d19      	adds	r1, r3, #4
 80126ca:	6031      	str	r1, [r6, #0]
 80126cc:	0606      	lsls	r6, r0, #24
 80126ce:	d501      	bpl.n	80126d4 <_printf_i+0xbc>
 80126d0:	681d      	ldr	r5, [r3, #0]
 80126d2:	e003      	b.n	80126dc <_printf_i+0xc4>
 80126d4:	0645      	lsls	r5, r0, #25
 80126d6:	d5fb      	bpl.n	80126d0 <_printf_i+0xb8>
 80126d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80126dc:	2d00      	cmp	r5, #0
 80126de:	da03      	bge.n	80126e8 <_printf_i+0xd0>
 80126e0:	232d      	movs	r3, #45	@ 0x2d
 80126e2:	426d      	negs	r5, r5
 80126e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126e8:	4858      	ldr	r0, [pc, #352]	@ (801284c <_printf_i+0x234>)
 80126ea:	230a      	movs	r3, #10
 80126ec:	e011      	b.n	8012712 <_printf_i+0xfa>
 80126ee:	6821      	ldr	r1, [r4, #0]
 80126f0:	6833      	ldr	r3, [r6, #0]
 80126f2:	0608      	lsls	r0, r1, #24
 80126f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80126f8:	d402      	bmi.n	8012700 <_printf_i+0xe8>
 80126fa:	0649      	lsls	r1, r1, #25
 80126fc:	bf48      	it	mi
 80126fe:	b2ad      	uxthmi	r5, r5
 8012700:	2f6f      	cmp	r7, #111	@ 0x6f
 8012702:	4852      	ldr	r0, [pc, #328]	@ (801284c <_printf_i+0x234>)
 8012704:	6033      	str	r3, [r6, #0]
 8012706:	bf14      	ite	ne
 8012708:	230a      	movne	r3, #10
 801270a:	2308      	moveq	r3, #8
 801270c:	2100      	movs	r1, #0
 801270e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012712:	6866      	ldr	r6, [r4, #4]
 8012714:	60a6      	str	r6, [r4, #8]
 8012716:	2e00      	cmp	r6, #0
 8012718:	db05      	blt.n	8012726 <_printf_i+0x10e>
 801271a:	6821      	ldr	r1, [r4, #0]
 801271c:	432e      	orrs	r6, r5
 801271e:	f021 0104 	bic.w	r1, r1, #4
 8012722:	6021      	str	r1, [r4, #0]
 8012724:	d04b      	beq.n	80127be <_printf_i+0x1a6>
 8012726:	4616      	mov	r6, r2
 8012728:	fbb5 f1f3 	udiv	r1, r5, r3
 801272c:	fb03 5711 	mls	r7, r3, r1, r5
 8012730:	5dc7      	ldrb	r7, [r0, r7]
 8012732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012736:	462f      	mov	r7, r5
 8012738:	42bb      	cmp	r3, r7
 801273a:	460d      	mov	r5, r1
 801273c:	d9f4      	bls.n	8012728 <_printf_i+0x110>
 801273e:	2b08      	cmp	r3, #8
 8012740:	d10b      	bne.n	801275a <_printf_i+0x142>
 8012742:	6823      	ldr	r3, [r4, #0]
 8012744:	07df      	lsls	r7, r3, #31
 8012746:	d508      	bpl.n	801275a <_printf_i+0x142>
 8012748:	6923      	ldr	r3, [r4, #16]
 801274a:	6861      	ldr	r1, [r4, #4]
 801274c:	4299      	cmp	r1, r3
 801274e:	bfde      	ittt	le
 8012750:	2330      	movle	r3, #48	@ 0x30
 8012752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012756:	f106 36ff 	addle.w	r6, r6, #4294967295
 801275a:	1b92      	subs	r2, r2, r6
 801275c:	6122      	str	r2, [r4, #16]
 801275e:	f8cd a000 	str.w	sl, [sp]
 8012762:	464b      	mov	r3, r9
 8012764:	aa03      	add	r2, sp, #12
 8012766:	4621      	mov	r1, r4
 8012768:	4640      	mov	r0, r8
 801276a:	f7ff fee7 	bl	801253c <_printf_common>
 801276e:	3001      	adds	r0, #1
 8012770:	d14a      	bne.n	8012808 <_printf_i+0x1f0>
 8012772:	f04f 30ff 	mov.w	r0, #4294967295
 8012776:	b004      	add	sp, #16
 8012778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	f043 0320 	orr.w	r3, r3, #32
 8012782:	6023      	str	r3, [r4, #0]
 8012784:	4832      	ldr	r0, [pc, #200]	@ (8012850 <_printf_i+0x238>)
 8012786:	2778      	movs	r7, #120	@ 0x78
 8012788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	6831      	ldr	r1, [r6, #0]
 8012790:	061f      	lsls	r7, r3, #24
 8012792:	f851 5b04 	ldr.w	r5, [r1], #4
 8012796:	d402      	bmi.n	801279e <_printf_i+0x186>
 8012798:	065f      	lsls	r7, r3, #25
 801279a:	bf48      	it	mi
 801279c:	b2ad      	uxthmi	r5, r5
 801279e:	6031      	str	r1, [r6, #0]
 80127a0:	07d9      	lsls	r1, r3, #31
 80127a2:	bf44      	itt	mi
 80127a4:	f043 0320 	orrmi.w	r3, r3, #32
 80127a8:	6023      	strmi	r3, [r4, #0]
 80127aa:	b11d      	cbz	r5, 80127b4 <_printf_i+0x19c>
 80127ac:	2310      	movs	r3, #16
 80127ae:	e7ad      	b.n	801270c <_printf_i+0xf4>
 80127b0:	4826      	ldr	r0, [pc, #152]	@ (801284c <_printf_i+0x234>)
 80127b2:	e7e9      	b.n	8012788 <_printf_i+0x170>
 80127b4:	6823      	ldr	r3, [r4, #0]
 80127b6:	f023 0320 	bic.w	r3, r3, #32
 80127ba:	6023      	str	r3, [r4, #0]
 80127bc:	e7f6      	b.n	80127ac <_printf_i+0x194>
 80127be:	4616      	mov	r6, r2
 80127c0:	e7bd      	b.n	801273e <_printf_i+0x126>
 80127c2:	6833      	ldr	r3, [r6, #0]
 80127c4:	6825      	ldr	r5, [r4, #0]
 80127c6:	6961      	ldr	r1, [r4, #20]
 80127c8:	1d18      	adds	r0, r3, #4
 80127ca:	6030      	str	r0, [r6, #0]
 80127cc:	062e      	lsls	r6, r5, #24
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	d501      	bpl.n	80127d6 <_printf_i+0x1be>
 80127d2:	6019      	str	r1, [r3, #0]
 80127d4:	e002      	b.n	80127dc <_printf_i+0x1c4>
 80127d6:	0668      	lsls	r0, r5, #25
 80127d8:	d5fb      	bpl.n	80127d2 <_printf_i+0x1ba>
 80127da:	8019      	strh	r1, [r3, #0]
 80127dc:	2300      	movs	r3, #0
 80127de:	6123      	str	r3, [r4, #16]
 80127e0:	4616      	mov	r6, r2
 80127e2:	e7bc      	b.n	801275e <_printf_i+0x146>
 80127e4:	6833      	ldr	r3, [r6, #0]
 80127e6:	1d1a      	adds	r2, r3, #4
 80127e8:	6032      	str	r2, [r6, #0]
 80127ea:	681e      	ldr	r6, [r3, #0]
 80127ec:	6862      	ldr	r2, [r4, #4]
 80127ee:	2100      	movs	r1, #0
 80127f0:	4630      	mov	r0, r6
 80127f2:	f7ed fd7d 	bl	80002f0 <memchr>
 80127f6:	b108      	cbz	r0, 80127fc <_printf_i+0x1e4>
 80127f8:	1b80      	subs	r0, r0, r6
 80127fa:	6060      	str	r0, [r4, #4]
 80127fc:	6863      	ldr	r3, [r4, #4]
 80127fe:	6123      	str	r3, [r4, #16]
 8012800:	2300      	movs	r3, #0
 8012802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012806:	e7aa      	b.n	801275e <_printf_i+0x146>
 8012808:	6923      	ldr	r3, [r4, #16]
 801280a:	4632      	mov	r2, r6
 801280c:	4649      	mov	r1, r9
 801280e:	4640      	mov	r0, r8
 8012810:	47d0      	blx	sl
 8012812:	3001      	adds	r0, #1
 8012814:	d0ad      	beq.n	8012772 <_printf_i+0x15a>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	079b      	lsls	r3, r3, #30
 801281a:	d413      	bmi.n	8012844 <_printf_i+0x22c>
 801281c:	68e0      	ldr	r0, [r4, #12]
 801281e:	9b03      	ldr	r3, [sp, #12]
 8012820:	4298      	cmp	r0, r3
 8012822:	bfb8      	it	lt
 8012824:	4618      	movlt	r0, r3
 8012826:	e7a6      	b.n	8012776 <_printf_i+0x15e>
 8012828:	2301      	movs	r3, #1
 801282a:	4632      	mov	r2, r6
 801282c:	4649      	mov	r1, r9
 801282e:	4640      	mov	r0, r8
 8012830:	47d0      	blx	sl
 8012832:	3001      	adds	r0, #1
 8012834:	d09d      	beq.n	8012772 <_printf_i+0x15a>
 8012836:	3501      	adds	r5, #1
 8012838:	68e3      	ldr	r3, [r4, #12]
 801283a:	9903      	ldr	r1, [sp, #12]
 801283c:	1a5b      	subs	r3, r3, r1
 801283e:	42ab      	cmp	r3, r5
 8012840:	dcf2      	bgt.n	8012828 <_printf_i+0x210>
 8012842:	e7eb      	b.n	801281c <_printf_i+0x204>
 8012844:	2500      	movs	r5, #0
 8012846:	f104 0619 	add.w	r6, r4, #25
 801284a:	e7f5      	b.n	8012838 <_printf_i+0x220>
 801284c:	08012d89 	.word	0x08012d89
 8012850:	08012d9a 	.word	0x08012d9a

08012854 <memmove>:
 8012854:	4288      	cmp	r0, r1
 8012856:	b510      	push	{r4, lr}
 8012858:	eb01 0402 	add.w	r4, r1, r2
 801285c:	d902      	bls.n	8012864 <memmove+0x10>
 801285e:	4284      	cmp	r4, r0
 8012860:	4623      	mov	r3, r4
 8012862:	d807      	bhi.n	8012874 <memmove+0x20>
 8012864:	1e43      	subs	r3, r0, #1
 8012866:	42a1      	cmp	r1, r4
 8012868:	d008      	beq.n	801287c <memmove+0x28>
 801286a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801286e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012872:	e7f8      	b.n	8012866 <memmove+0x12>
 8012874:	4402      	add	r2, r0
 8012876:	4601      	mov	r1, r0
 8012878:	428a      	cmp	r2, r1
 801287a:	d100      	bne.n	801287e <memmove+0x2a>
 801287c:	bd10      	pop	{r4, pc}
 801287e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012886:	e7f7      	b.n	8012878 <memmove+0x24>

08012888 <_sbrk_r>:
 8012888:	b538      	push	{r3, r4, r5, lr}
 801288a:	4d06      	ldr	r5, [pc, #24]	@ (80128a4 <_sbrk_r+0x1c>)
 801288c:	2300      	movs	r3, #0
 801288e:	4604      	mov	r4, r0
 8012890:	4608      	mov	r0, r1
 8012892:	602b      	str	r3, [r5, #0]
 8012894:	f7ef faa2 	bl	8001ddc <_sbrk>
 8012898:	1c43      	adds	r3, r0, #1
 801289a:	d102      	bne.n	80128a2 <_sbrk_r+0x1a>
 801289c:	682b      	ldr	r3, [r5, #0]
 801289e:	b103      	cbz	r3, 80128a2 <_sbrk_r+0x1a>
 80128a0:	6023      	str	r3, [r4, #0]
 80128a2:	bd38      	pop	{r3, r4, r5, pc}
 80128a4:	24014b1c 	.word	0x24014b1c

080128a8 <memcpy>:
 80128a8:	440a      	add	r2, r1
 80128aa:	4291      	cmp	r1, r2
 80128ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80128b0:	d100      	bne.n	80128b4 <memcpy+0xc>
 80128b2:	4770      	bx	lr
 80128b4:	b510      	push	{r4, lr}
 80128b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128be:	4291      	cmp	r1, r2
 80128c0:	d1f9      	bne.n	80128b6 <memcpy+0xe>
 80128c2:	bd10      	pop	{r4, pc}

080128c4 <_realloc_r>:
 80128c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128c8:	4607      	mov	r7, r0
 80128ca:	4614      	mov	r4, r2
 80128cc:	460d      	mov	r5, r1
 80128ce:	b921      	cbnz	r1, 80128da <_realloc_r+0x16>
 80128d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128d4:	4611      	mov	r1, r2
 80128d6:	f7ff bc4d 	b.w	8012174 <_malloc_r>
 80128da:	b92a      	cbnz	r2, 80128e8 <_realloc_r+0x24>
 80128dc:	f7ff fbde 	bl	801209c <_free_r>
 80128e0:	4625      	mov	r5, r4
 80128e2:	4628      	mov	r0, r5
 80128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e8:	f000 f81a 	bl	8012920 <_malloc_usable_size_r>
 80128ec:	4284      	cmp	r4, r0
 80128ee:	4606      	mov	r6, r0
 80128f0:	d802      	bhi.n	80128f8 <_realloc_r+0x34>
 80128f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80128f6:	d8f4      	bhi.n	80128e2 <_realloc_r+0x1e>
 80128f8:	4621      	mov	r1, r4
 80128fa:	4638      	mov	r0, r7
 80128fc:	f7ff fc3a 	bl	8012174 <_malloc_r>
 8012900:	4680      	mov	r8, r0
 8012902:	b908      	cbnz	r0, 8012908 <_realloc_r+0x44>
 8012904:	4645      	mov	r5, r8
 8012906:	e7ec      	b.n	80128e2 <_realloc_r+0x1e>
 8012908:	42b4      	cmp	r4, r6
 801290a:	4622      	mov	r2, r4
 801290c:	4629      	mov	r1, r5
 801290e:	bf28      	it	cs
 8012910:	4632      	movcs	r2, r6
 8012912:	f7ff ffc9 	bl	80128a8 <memcpy>
 8012916:	4629      	mov	r1, r5
 8012918:	4638      	mov	r0, r7
 801291a:	f7ff fbbf 	bl	801209c <_free_r>
 801291e:	e7f1      	b.n	8012904 <_realloc_r+0x40>

08012920 <_malloc_usable_size_r>:
 8012920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012924:	1f18      	subs	r0, r3, #4
 8012926:	2b00      	cmp	r3, #0
 8012928:	bfbc      	itt	lt
 801292a:	580b      	ldrlt	r3, [r1, r0]
 801292c:	18c0      	addlt	r0, r0, r3
 801292e:	4770      	bx	lr

08012930 <_init>:
 8012930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012932:	bf00      	nop
 8012934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012936:	bc08      	pop	{r3}
 8012938:	469e      	mov	lr, r3
 801293a:	4770      	bx	lr

0801293c <_fini>:
 801293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801293e:	bf00      	nop
 8012940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012942:	bc08      	pop	{r3}
 8012944:	469e      	mov	lr, r3
 8012946:	4770      	bx	lr
