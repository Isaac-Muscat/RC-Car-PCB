
RC-Car-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aee8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0801b188  0801b188  0001c188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ba6c  0801ba6c  0001ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ba74  0801ba74  0001ca74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801ba78  0801ba78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  24000000  0801ba7c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000277b8  240002e4  0801bd60  0001d2e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24027a9c  0801bd60  0001da9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d2e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f9a2  00000000  00000000  0001d312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005933  00000000  00000000  0004ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022b8  00000000  00000000  000525e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b11  00000000  00000000  000548a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e06e  00000000  00000000  000563b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000321d1  00000000  00000000  0009441f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172efa  00000000  00000000  000c65f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002394ea  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a444  00000000  00000000  00239530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  00243974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002e4 	.word	0x240002e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b170 	.word	0x0801b170

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002e8 	.word	0x240002e8
 80002dc:	0801b170 	.word	0x0801b170

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fdb5 	bl	800225c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 fe51 	bl	8003398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f93d 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fda5 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fd4b 	bl	8001198 <MX_DMA_Init>
  MX_MDMA_Init();
 8000702:	f000 fd81 	bl	8001208 <MX_MDMA_Init>
  MX_USART1_UART_Init();
 8000706:	f000 fcf5 	bl	80010f4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070a:	f017 f9cf 	bl	8017aac <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 800070e:	f000 f9ab 	bl	8000a68 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000712:	f000 f9df 	bl	8000ad4 <MX_I2C2_Init>
  MX_TIM14_Init();
 8000716:	f000 fca1 	bl	800105c <MX_TIM14_Init>
  MX_TIM2_Init();
 800071a:	f000 fb13 	bl	8000d44 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071e:	f000 fbe7 	bl	8000ef0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000722:	f000 fa81 	bl	8000c28 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000726:	f000 fb7d 	bl	8000e24 <MX_TIM3_Init>
  MX_JPEG_Init();
 800072a:	f000 fa13 	bl	8000b54 <MX_JPEG_Init>
  MX_SPI2_Init();
 800072e:	f000 fa25 	bl	8000b7c <MX_SPI2_Init>
  MX_TIM5_Init();
 8000732:	f000 fc43 	bl	8000fbc <MX_TIM5_Init>
//			  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//		  }
//	}

	// ------------------------------------------------------------ SETUP INA229 -- //
  	hina229.spi_handle = &hspi2;
 8000736:	4b78      	ldr	r3, [pc, #480]	@ (8000918 <main+0x230>)
 8000738:	4a78      	ldr	r2, [pc, #480]	@ (800091c <main+0x234>)
 800073a:	601a      	str	r2, [r3, #0]
  	hina229.cs_gpio_handle = INA_CS_GPIO_Port;
 800073c:	4b76      	ldr	r3, [pc, #472]	@ (8000918 <main+0x230>)
 800073e:	4a78      	ldr	r2, [pc, #480]	@ (8000920 <main+0x238>)
 8000740:	605a      	str	r2, [r3, #4]
  	hina229.cs_gpio_pin = INA_CS_Pin;
 8000742:	4b75      	ldr	r3, [pc, #468]	@ (8000918 <main+0x230>)
 8000744:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000748:	811a      	strh	r2, [r3, #8]

	if (INA229_Init(&hina229)) {
 800074a:	4873      	ldr	r0, [pc, #460]	@ (8000918 <main+0x230>)
 800074c:	f002 fd91 	bl	8003272 <INA229_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00e      	beq.n	8000774 <main+0x8c>
		sprintf(ssd_msg, " Failed to Init INA229");
 8000756:	4973      	ldr	r1, [pc, #460]	@ (8000924 <main+0x23c>)
 8000758:	4873      	ldr	r0, [pc, #460]	@ (8000928 <main+0x240>)
 800075a:	f018 fcfd 	bl	8019158 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800075e:	4872      	ldr	r0, [pc, #456]	@ (8000928 <main+0x240>)
 8000760:	f7ff fe0e 	bl	8000380 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	486f      	ldr	r0, [pc, #444]	@ (8000928 <main+0x240>)
 800076c:	f001 fba5 	bl	8001eba <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000770:	f7ff ffa4 	bl	80006bc <__NVIC_SystemReset>
	}

	// ------------------------------------------------------------ SETUP CAMERA INTERFACE -- //
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);	// XCLK - Start the camera's core clock
 8000774:	2100      	movs	r1, #0
 8000776:	486d      	ldr	r0, [pc, #436]	@ (800092c <main+0x244>)
 8000778:	f010 fab8 	bl	8010cec <HAL_TIM_PWM_Start>
	// X 		  COM15 [6] = 1 (Data range [00-FF])
	// X 		  COM15 [5] = 0 (RGB 565)
	// X 		  COM15 [4] = 1 (RGB 565)
	uint8_t cam_regCache;

	cam_regCache = 0b00001000;
 800077c:	2308      	movs	r3, #8
 800077e:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x0C, cam_regCache, 0)) {}
 8000780:	bf00      	nop
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	200c      	movs	r0, #12
 800078a:	f001 fc1f 	bl	8001fcc <CAM_SetRegister>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f6      	bne.n	8000782 <main+0x9a>

	cam_regCache = 0b00010000;
 8000794:	2310      	movs	r3, #16
 8000796:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x12, cam_regCache, 0)) {}
 8000798:	bf00      	nop
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	2012      	movs	r0, #18
 80007a2:	f001 fc13 	bl	8001fcc <CAM_SetRegister>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1f6      	bne.n	800079a <main+0xb2>

	cam_regCache = 0b10000110;
 80007ac:	2386      	movs	r3, #134	@ 0x86
 80007ae:	71fb      	strb	r3, [r7, #7]
	while (CAM_SetRegister(0x32, cam_regCache, 0)) {}
 80007b0:	bf00      	nop
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	2032      	movs	r0, #50	@ 0x32
 80007ba:	f001 fc07 	bl	8001fcc <CAM_SetRegister>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f6      	bne.n	80007b2 <main+0xca>
	//while (CAM_SetRegister(0x40, cam_regCache, 0)) {}

	// ------------------------------------------------------------ SETUP JPEG ENCODING -- //
	// Set the CONFIG
	JPEG_ConfTypeDef* jpeg_config;
	jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
	//jpeg_config->ColorSpace = JPEG_YCBCR_COLORSPACE;
	//jpeg_config->ChromaSubsampling = JPEG_422_SUBSAMPLING;
	jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 80007ca:	4b59      	ldr	r3, [pc, #356]	@ (8000930 <main+0x248>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b58      	ldr	r3, [pc, #352]	@ (8000934 <main+0x24c>)
 80007d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	60da      	str	r2, [r3, #12]
	jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 80007de:	4b54      	ldr	r3, [pc, #336]	@ (8000930 <main+0x248>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b54      	ldr	r3, [pc, #336]	@ (8000938 <main+0x250>)
 80007e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	461a      	mov	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	609a      	str	r2, [r3, #8]
	jpeg_config->ImageQuality = JPEG_QUALITY;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2214      	movs	r2, #20
 80007f6:	611a      	str	r2, [r3, #16]
	HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	4850      	ldr	r0, [pc, #320]	@ (800093c <main+0x254>)
 80007fc:	f008 fd14 	bl	8009228 <HAL_JPEG_ConfigEncoding>

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 8000800:	484f      	ldr	r0, [pc, #316]	@ (8000940 <main+0x258>)
 8000802:	f010 f9a3 	bl	8010b4c <HAL_TIM_Base_Start_IT>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00e      	beq.n	800082a <main+0x142>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 800080c:	494d      	ldr	r1, [pc, #308]	@ (8000944 <main+0x25c>)
 800080e:	4846      	ldr	r0, [pc, #280]	@ (8000928 <main+0x240>)
 8000810:	f018 fca2 	bl	8019158 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000814:	4844      	ldr	r0, [pc, #272]	@ (8000928 <main+0x240>)
 8000816:	f7ff fdb3 	bl	8000380 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	4841      	ldr	r0, [pc, #260]	@ (8000928 <main+0x240>)
 8000822:	f001 fb4a 	bl	8001eba <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000826:	f7ff ff49 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <main+0x260>)
 800082c:	4a47      	ldr	r2, [pc, #284]	@ (800094c <main+0x264>)
 800082e:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 2;
 8000830:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <main+0x260>)
 8000832:	2202      	movs	r2, #2
 8000834:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 2;
 8000836:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <main+0x260>)
 8000838:	2202      	movs	r2, #2
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800083e:	4842      	ldr	r0, [pc, #264]	@ (8000948 <main+0x260>)
 8000840:	f014 ff51 	bl	80156e6 <XBEE_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00e      	beq.n	8000868 <main+0x180>
		sprintf(ssd_msg, " Failed to Init XBEE");
 800084a:	4941      	ldr	r1, [pc, #260]	@ (8000950 <main+0x268>)
 800084c:	4836      	ldr	r0, [pc, #216]	@ (8000928 <main+0x240>)
 800084e:	f018 fc83 	bl	8019158 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000852:	4835      	ldr	r0, [pc, #212]	@ (8000928 <main+0x240>)
 8000854:	f7ff fd94 	bl	8000380 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	4832      	ldr	r0, [pc, #200]	@ (8000928 <main+0x240>)
 8000860:	f001 fb2b 	bl	8001eba <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000864:	f7ff ff2a 	bl	80006bc <__NVIC_SystemReset>
	}

	// SETUP MOTOR
	TIM2->CCR1 = 0;
 8000868:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086c:	2200      	movs	r2, #0
 800086e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8000870:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR4 = 0;
 8000878:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <main+0x26c>)
 800087a:	2200      	movs	r2, #0
 800087c:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM4->CCR3 = 0;
 800087e:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <main+0x26c>)
 8000880:	2200      	movs	r2, #0
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // LEFT_PWM_1
 8000884:	2100      	movs	r1, #0
 8000886:	4834      	ldr	r0, [pc, #208]	@ (8000958 <main+0x270>)
 8000888:	f010 fa30 	bl	8010cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // RIGHT_PWM_1
 800088c:	2104      	movs	r1, #4
 800088e:	4832      	ldr	r0, [pc, #200]	@ (8000958 <main+0x270>)
 8000890:	f010 fa2c 	bl	8010cec <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // LEFT_PWM_2
 8000894:	210c      	movs	r1, #12
 8000896:	4831      	ldr	r0, [pc, #196]	@ (800095c <main+0x274>)
 8000898:	f010 fa28 	bl	8010cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // RIGHT_PWM_2
 800089c:	2108      	movs	r1, #8
 800089e:	482f      	ldr	r0, [pc, #188]	@ (800095c <main+0x274>)
 80008a0:	f010 fa24 	bl	8010cec <HAL_TIM_PWM_Start>

	// Setup lights
	TIM1->CCR4 = 1000; // 0 - 2000
 80008a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <main+0x278>)
 80008a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008aa:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR4 = 1000;
 80008ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <main+0x27c>)
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CCR3 = 1000;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <main+0x27c>)
 80008b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 1000;
 80008bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c4:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // LIGHTS_PWM_1
 80008c6:	210c      	movs	r1, #12
 80008c8:	4827      	ldr	r0, [pc, #156]	@ (8000968 <main+0x280>)
 80008ca:	f010 fa0f 	bl	8010cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // LIGHTS_PWM_2
 80008ce:	210c      	movs	r1, #12
 80008d0:	4826      	ldr	r0, [pc, #152]	@ (800096c <main+0x284>)
 80008d2:	f010 fa0b 	bl	8010cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // LIGHTS_PWM_3
 80008d6:	2108      	movs	r1, #8
 80008d8:	4824      	ldr	r0, [pc, #144]	@ (800096c <main+0x284>)
 80008da:	f010 fa07 	bl	8010cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // LIGHTS_PWM_4
 80008de:	2108      	movs	r1, #8
 80008e0:	481d      	ldr	r0, [pc, #116]	@ (8000958 <main+0x270>)
 80008e2:	f010 fa03 	bl	8010cec <HAL_TIM_PWM_Start>

	// Delay for goofiness
	HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ea:	f002 fde7 	bl	80034bc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	481f      	ldr	r0, [pc, #124]	@ (8000970 <main+0x288>)
 80008f4:	f006 ff30 	bl	8007758 <HAL_GPIO_WritePin>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();	// Handle radio recieve
 80008f8:	f000 fd66 	bl	80013c8 <SCH_XBeeRX>
		SCH_CTRL();		// Handle control signals
 80008fc:	f000 ff28 	bl	8001750 <SCH_CTRL>
		SCH_PowerMon();	// Power Monitoring
 8000900:	f001 f8a0 	bl	8001a44 <SCH_PowerMon>
		SCH_Camera();	// Take a picture if camera idle
 8000904:	f001 f8dc 	bl	8001ac0 <SCH_Camera>
		SCH_JPEG();		// Convert JPEG if camera ready to present
 8000908:	f001 f91a 	bl	8001b40 <SCH_JPEG>
		SCH_XBeeTX();	// Transmit JPEG if JPEG ready
 800090c:	f000 fe84 	bl	8001618 <SCH_XBeeTX>

		SCH_DEBUG();
 8000910:	f001 f956 	bl	8001bc0 <SCH_DEBUG>
		SCH_XBeeRX();	// Handle radio recieve
 8000914:	bf00      	nop
 8000916:	e7ef      	b.n	80008f8 <main+0x210>
 8000918:	24000944 	.word	0x24000944
 800091c:	2400054c 	.word	0x2400054c
 8000920:	58020800 	.word	0x58020800
 8000924:	0801b188 	.word	0x0801b188
 8000928:	240008dc 	.word	0x240008dc
 800092c:	24000750 	.word	0x24000750
 8000930:	24025d34 	.word	0x24025d34
 8000934:	24000004 	.word	0x24000004
 8000938:	2400000c 	.word	0x2400000c
 800093c:	2400041c 	.word	0x2400041c
 8000940:	24000704 	.word	0x24000704
 8000944:	0801b1a0 	.word	0x0801b1a0
 8000948:	24025d38 	.word	0x24025d38
 800094c:	2400079c 	.word	0x2400079c
 8000950:	0801b1bc 	.word	0x0801b1bc
 8000954:	40000800 	.word	0x40000800
 8000958:	24000620 	.word	0x24000620
 800095c:	240006b8 	.word	0x240006b8
 8000960:	40010000 	.word	0x40010000
 8000964:	40000400 	.word	0x40000400
 8000968:	240005d4 	.word	0x240005d4
 800096c:	2400066c 	.word	0x2400066c
 8000970:	58020000 	.word	0x58020000

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	@ 0x70
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	224c      	movs	r2, #76	@ 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f018 fc4d 	bl	8019222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f018 fc47 	bl	8019222 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000994:	2002      	movs	r0, #2
 8000996:	f00c fbb9 	bl	800d10c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <SystemClock_Config+0xec>)
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <SystemClock_Config+0xec>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009cc:	bf00      	nop
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <SystemClock_Config+0xf0>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009da:	d1f8      	bne.n	80009ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009f2:	2318      	movs	r3, #24
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009fa:	2306      	movs	r3, #6
 80009fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00c fbc4 	bl	800d1a0 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a1e:	f001 fc49 	bl	80022b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	233f      	movs	r3, #63	@ 0x3f
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a40:	2340      	movs	r3, #64	@ 0x40
 8000a42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2102      	movs	r1, #2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00d f803 	bl	800da54 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a54:	f001 fc2e 	bl	80022b4 <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	@ 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	58000400 	.word	0x58000400
 8000a64:	58024800 	.word	0x58024800

08000a68 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <MX_DCMI_Init+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_OTHER;
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000a9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_EVEN;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aa6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_DCMI_Init+0x64>)
 8000aba:	f002 feb7 	bl	800382c <HAL_DCMI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_DCMI_Init+0x60>
  {
    Error_Handler();
 8000ac4:	f001 fbf6 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000300 	.word	0x24000300
 8000ad0:	48020000 	.word	0x48020000

08000ad4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <MX_I2C2_Init+0x7c>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b10:	f006 fe3c 	bl	800778c <HAL_I2C_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b1a:	f001 fbcb 	bl	80022b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b22:	f008 fa67 	bl	8008ff4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f001 fbc2 	bl	80022b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b34:	f008 faa9 	bl	800908a <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f001 fbb9 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	240003c8 	.word	0x240003c8
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	00c0eaff 	.word	0x00c0eaff

08000b54 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_JPEG_Init+0x20>)
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <MX_JPEG_Init+0x24>)
 8000b5c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_JPEG_Init+0x20>)
 8000b60:	f008 fae0 	bl	8009124 <HAL_JPEG_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000b6a:	f001 fba3 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2400041c 	.word	0x2400041c
 8000b78:	52003000 	.word	0x52003000

08000b7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b82:	4a28      	ldr	r2, [pc, #160]	@ (8000c24 <MX_SPI2_Init+0xa8>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ba0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000baa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_SPI2_Init+0xa4>)
 8000c0e:	f00f f8d9 	bl	800fdc4 <HAL_SPI_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000c18:	f001 fb4c 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2400054c 	.word	0x2400054c
 8000c24:	40003800 	.word	0x40003800

08000c28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b096      	sub	sp, #88	@ 0x58
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	222c      	movs	r2, #44	@ 0x2c
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f018 fae4 	bl	8019222 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c5c:	4a38      	ldr	r2, [pc, #224]	@ (8000d40 <MX_TIM1_Init+0x118>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c60:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000c6c:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c86:	482d      	ldr	r0, [pc, #180]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000c88:	f00f ffd8 	bl	8010c3c <HAL_TIM_PWM_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f001 fb0f 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000caa:	f011 f8ad 	bl	8011e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cb4:	f001 fafe 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	@ 0x60
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000cda:	f010 fa1d 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ce4:	f001 fae6 	bl	80022b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000d1e:	f011 f901 	bl	8011f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000d28:	f001 fac4 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM1_Init+0x114>)
 8000d2e:	f001 fe7b 	bl	8002a28 <HAL_TIM_MspPostInit>

}
 8000d32:	bf00      	nop
 8000d34:	3758      	adds	r7, #88	@ 0x58
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240005d4 	.word	0x240005d4
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000d92:	f00f ff53 	bl	8010c3c <HAL_TIM_PWM_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f001 fa8a 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000db0:	f011 f82a 	bl	8011e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000dba:	f001 fa7b 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	@ 0x60
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000dd6:	f010 f99f 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000de0:	f001 fa68 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000dec:	f010 f994 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000df6:	f001 fa5d 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000e02:	f010 f989 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000e0c:	f001 fa52 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <MX_TIM2_Init+0xdc>)
 8000e12:	f001 fe09 	bl	8002a28 <HAL_TIM_MspPostInit>

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	@ 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	24000620 	.word	0x24000620

08000e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e48:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e4a:	4a28      	ldr	r2, [pc, #160]	@ (8000eec <MX_TIM3_Init+0xc8>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000e5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000e60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6e:	481e      	ldr	r0, [pc, #120]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e70:	f00f fee4 	bl	8010c3c <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f001 fa1b 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000e8e:	f010 ffbb 	bl	8011e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e98:	f001 fa0c 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	@ 0x60
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2208      	movs	r2, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eb4:	f010 f930 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ebe:	f001 f9f9 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eca:	f010 f925 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ed4:	f001 f9ee 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_TIM3_Init+0xc4>)
 8000eda:	f001 fda5 	bl	8002a28 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2400066c 	.word	0x2400066c
 8000eec:	40000400 	.word	0x40000400

08000ef0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f16:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <MX_TIM4_Init+0xc8>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000f2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f3a:	481e      	ldr	r0, [pc, #120]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f3c:	f00f fe7e 	bl	8010c3c <HAL_TIM_PWM_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f46:	f001 f9b5 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f5a:	f010 ff55 	bl	8011e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f64:	f001 f9a6 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	@ 0x60
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f80:	f010 f8ca 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f8a:	f001 f993 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	220c      	movs	r2, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000f96:	f010 f8bf 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000fa0:	f001 f988 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <MX_TIM4_Init+0xc4>)
 8000fa6:	f001 fd3f 	bl	8002a28 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3728      	adds	r7, #40	@ 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	240006b8 	.word	0x240006b8
 8000fb8:	40000800 	.word	0x40000800

08000fbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <MX_TIM5_Init+0x98>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000fee:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <MX_TIM5_Init+0x9c>)
 8000ff0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_TIM5_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ffe:	4814      	ldr	r0, [pc, #80]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001000:	f00f fd4d 	bl	8010a9e <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800100a:	f001 f953 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <MX_TIM5_Init+0x94>)
 800101c:	f010 f990 	bl	8011340 <HAL_TIM_ConfigClockSource>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001026:	f001 f945 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_TIM5_Init+0x94>)
 8001038:	f010 fee6 	bl	8011e08 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001042:	f001 f937 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000704 	.word	0x24000704
 8001054:	40000c00 	.word	0x40000c00
 8001058:	007270de 	.word	0x007270de

0800105c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_TIM14_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_TIM14_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001088:	2205      	movs	r2, #5
 800108a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_TIM14_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001092:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_TIM14_Init+0x90>)
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001098:	4814      	ldr	r0, [pc, #80]	@ (80010ec <MX_TIM14_Init+0x90>)
 800109a:	f00f fd00 	bl	8010a9e <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f001 f906 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010aa:	f00f fdc7 	bl	8010c3c <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80010b4:	f001 f8fe 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b8:	2360      	movs	r3, #96	@ 0x60
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 80010bc:	2303      	movs	r3, #3
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010d0:	f010 f822 	bl	8011118 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 80010da:	f001 f8eb 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80010de:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM14_Init+0x90>)
 80010e0:	f001 fca2 	bl	8002a28 <HAL_TIM_MspPostInit>

}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	24000750 	.word	0x24000750
 80010f0:	40002000 	.word	0x40002000

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <MX_USART1_UART_Init+0x98>)
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <MX_USART1_UART_Init+0x9c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 80010fe:	4b23      	ldr	r3, [pc, #140]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001100:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <MX_USART1_UART_Init+0xa0>)
 8001102:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001110:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001118:	220c      	movs	r2, #12
 800111a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001136:	2220      	movs	r2, #32
 8001138:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_USART1_UART_Init+0x98>)
 800113c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4812      	ldr	r0, [pc, #72]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001144:	f010 ff8a 	bl	801205c <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800114e:	f001 f8b1 	bl	80022b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001156:	f012 fea4 	bl	8013ea2 <HAL_UARTEx_SetTxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001160:	f001 f8a8 	bl	80022b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001168:	f012 fed9 	bl	8013f1e <HAL_UARTEx_SetRxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8001172:	f001 f89f 	bl	80022b4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_USART1_UART_Init+0x98>)
 8001178:	f012 fe58 	bl	8013e2c <HAL_UARTEx_EnableFifoMode>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8001182:	f001 f897 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2400079c 	.word	0x2400079c
 8001190:	40011000 	.word	0x40011000
 8001194:	0001b207 	.word	0x0001b207

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011a4:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011c2:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <MX_DMA_Init+0x6c>)
 80011ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f002 fa77 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f002 fa8e 	bl	8003706 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	@ 0x38
 80011f0:	f002 fa6f 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f4:	2038      	movs	r0, #56	@ 0x38
 80011f6:	f002 fa86 	bl	8003706 <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58024400 	.word	0x58024400

08001208 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001210:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001214:	4a0b      	ldr	r2, [pc, #44]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800121e:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_MDMA_Init+0x3c>)
 8001220:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	207a      	movs	r0, #122	@ 0x7a
 8001232:	f002 fa4e 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001236:	207a      	movs	r0, #122	@ 0x7a
 8001238:	f002 fa65 	bl	8003706 <HAL_NVIC_EnableIRQ>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	@ 0x30
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a50      	ldr	r2, [pc, #320]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127c:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <MX_GPIO_Init+0x160>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a41      	ldr	r2, [pc, #260]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b3f      	ldr	r3, [pc, #252]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a3a      	ldr	r2, [pc, #232]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b34      	ldr	r3, [pc, #208]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b30      	ldr	r3, [pc, #192]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a2b      	ldr	r2, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0x160>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <MX_GPIO_Init+0x160>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_CS_Pin|INA_CS_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001318:	4824      	ldr	r0, [pc, #144]	@ (80013ac <MX_GPIO_Init+0x164>)
 800131a:	f006 fa1d 	bl	8007758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2108      	movs	r1, #8
 8001322:	4823      	ldr	r0, [pc, #140]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001324:	f006 fa18 	bl	8007758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2101      	movs	r1, #1
 800132c:	4821      	ldr	r0, [pc, #132]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800132e:	f006 fa13 	bl	8007758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_CS_Pin INA_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|INA_CS_Pin;
 8001332:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	@ (80013ac <MX_GPIO_Init+0x164>)
 800134c:	f006 f854 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4812      	ldr	r0, [pc, #72]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001364:	f006 f848 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001368:	2308      	movs	r3, #8
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001380:	f006 f83a 	bl	80073f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800139c:	f006 f82c 	bl	80073f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020800 	.word	0x58020800
 80013b0:	58020000 	.word	0x58020000
 80013b4:	58020c00 	.word	0x58020c00

080013b8 <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	// TEMPORARY: DISABLE THIS FOR TESTING
	return;
 80013bc:	bf00      	nop
			// DEBUG
			sprintf(ssd_msg, "Network Dead!\n");
			WriteDebug(ssd_msg, strlen(ssd_msg));
		}
	}
}
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHEDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	uint8_t *packet;
	uint16_t byte_num;
	if (XBEE_RXPacket(&hxbee, &packet, &byte_num)) {
 80013ce:	1cba      	adds	r2, r7, #2
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4882      	ldr	r0, [pc, #520]	@ (80015e0 <SCH_XBeeRX+0x218>)
 80013d6:	f014 f9d9 	bl	801578c <XBEE_RXPacket>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 80f7 	bne.w	80015d0 <SCH_XBeeRX+0x208>
		return;
	}

	// Network active, reset the watchdog
	if (wdog_network >= WDOG_NETWORK_CUTOFF) {
 80013e2:	4b80      	ldr	r3, [pc, #512]	@ (80015e4 <SCH_XBeeRX+0x21c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d90c      	bls.n	8001404 <SCH_XBeeRX+0x3c>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Motor_en
		// DEBUG
		sprintf(ssd_msg, "Network Alive!\n");
 80013ea:	497f      	ldr	r1, [pc, #508]	@ (80015e8 <SCH_XBeeRX+0x220>)
 80013ec:	487f      	ldr	r0, [pc, #508]	@ (80015ec <SCH_XBeeRX+0x224>)
 80013ee:	f017 feb3 	bl	8019158 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80013f2:	487e      	ldr	r0, [pc, #504]	@ (80015ec <SCH_XBeeRX+0x224>)
 80013f4:	f7fe ffc4 	bl	8000380 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	487b      	ldr	r0, [pc, #492]	@ (80015ec <SCH_XBeeRX+0x224>)
 8001400:	f000 fd5b 	bl	8001eba <WriteDebug>
	}
	wdog_network = 0;
 8001404:	4b77      	ldr	r3, [pc, #476]	@ (80015e4 <SCH_XBeeRX+0x21c>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]

	// Parse the packet
	if (byte_num == 0xFFFF) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001410:	4293      	cmp	r3, r2
 8001412:	f040 80de 	bne.w	80015d2 <SCH_XBeeRX+0x20a>
		// Configuration Packet
		if (packet[1] != jpeg_quality) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3301      	adds	r3, #1
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b74      	ldr	r3, [pc, #464]	@ (80015f0 <SCH_XBeeRX+0x228>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d027      	beq.n	8001474 <SCH_XBeeRX+0xac>
			// JPEG QUALITY CHANGED
			jpeg_quality = packet[1];
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	785a      	ldrb	r2, [r3, #1]
 8001428:	4b71      	ldr	r3, [pc, #452]	@ (80015f0 <SCH_XBeeRX+0x228>)
 800142a:	701a      	strb	r2, [r3, #0]
			// Reconfigure the JPEG HW
			JPEG_ConfTypeDef* jpeg_config;
			jpeg_config->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
			jpeg_config->ImageWidth = jpeg_mcu_widths[jpeg_quality]*8;
 8001432:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <SCH_XBeeRX+0x228>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b6e      	ldr	r3, [pc, #440]	@ (80015f4 <SCH_XBeeRX+0x22c>)
 800143a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	461a      	mov	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	60da      	str	r2, [r3, #12]
			jpeg_config->ImageHeight = jpeg_mcu_heights[jpeg_quality]*8;
 8001446:	4b6a      	ldr	r3, [pc, #424]	@ (80015f0 <SCH_XBeeRX+0x228>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <SCH_XBeeRX+0x230>)
 800144e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	609a      	str	r2, [r3, #8]
			jpeg_config->ImageQuality = JPEG_QUALITY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2214      	movs	r2, #20
 800145e:	611a      	str	r2, [r3, #16]
			HAL_JPEG_ConfigEncoding(&hjpeg, jpeg_config);
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	4866      	ldr	r0, [pc, #408]	@ (80015fc <SCH_XBeeRX+0x234>)
 8001464:	f007 fee0 	bl	8009228 <HAL_JPEG_ConfigEncoding>

			jpeg_state = 0;	// Invalidate current JPEG
 8001468:	4b65      	ldr	r3, [pc, #404]	@ (8001600 <SCH_XBeeRX+0x238>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			tx_state = 2;	// Flag a header re-transmit
 800146e:	4b65      	ldr	r3, [pc, #404]	@ (8001604 <SCH_XBeeRX+0x23c>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
		}

		// Don't process high power systems if the overcurrent protection is active
		if (overcurrent_protState) {
 8001474:	4b64      	ldr	r3, [pc, #400]	@ (8001608 <SCH_XBeeRX+0x240>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d015      	beq.n	80014a8 <SCH_XBeeRX+0xe0>
			// KILL THE LIGHTS
			// LIGHTS (0-2000)
			TIM1->CCR4 = 0; // L1
 800147c:	4b63      	ldr	r3, [pc, #396]	@ (800160c <SCH_XBeeRX+0x244>)
 800147e:	2200      	movs	r2, #0
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR4 = 0; // L2
 8001482:	4b63      	ldr	r3, [pc, #396]	@ (8001610 <SCH_XBeeRX+0x248>)
 8001484:	2200      	movs	r2, #0
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR3 = 0; // L3
 8001488:	4b61      	ldr	r3, [pc, #388]	@ (8001610 <SCH_XBeeRX+0x248>)
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = 0; // L4
 800148e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001492:	2200      	movs	r2, #0
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40

			// KILL THE MOTORS (ABIDE BY CTRL RULES)
			ctrl_input[0] = 0; // Motor 1
 8001496:	4b5f      	ldr	r3, [pc, #380]	@ (8001614 <SCH_XBeeRX+0x24c>)
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
			ctrl_input[1] = 0; // Motor 2
 800149e:	4b5d      	ldr	r3, [pc, #372]	@ (8001614 <SCH_XBeeRX+0x24c>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	e094      	b.n	80015d2 <SCH_XBeeRX+0x20a>

		} else {
			// LIGHTS (0-2000)
			TIM1->CCR4 = packet[3]*500; // L1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3303      	adds	r3, #3
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014b4:	fb03 f202 	mul.w	r2, r3, r2
 80014b8:	4b54      	ldr	r3, [pc, #336]	@ (800160c <SCH_XBeeRX+0x244>)
 80014ba:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR4 = packet[4]*500; // L2
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014c8:	fb03 f202 	mul.w	r2, r3, r2
 80014cc:	4b50      	ldr	r3, [pc, #320]	@ (8001610 <SCH_XBeeRX+0x248>)
 80014ce:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM3->CCR3 = packet[5]*500; // L3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3305      	adds	r3, #5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014dc:	fb03 f202 	mul.w	r2, r3, r2
 80014e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <SCH_XBeeRX+0x248>)
 80014e2:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = packet[6]*500; // L4
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3306      	adds	r3, #6
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014f0:	fb03 f202 	mul.w	r2, r3, r2
 80014f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f8:	641a      	str	r2, [r3, #64]	@ 0x40


			// TANK CONTROL (THIS IS EXTREMELY IMPORTANT)
			uint8_t motor1_dir = packet[0x0A];	// DIR_LEFT
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7a9b      	ldrb	r3, [r3, #10]
 80014fe:	72fb      	strb	r3, [r7, #11]
			uint8_t motor2_dir = packet[0x09];	// DIR_RIGHT
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7a5b      	ldrb	r3, [r3, #9]
 8001504:	72bb      	strb	r3, [r7, #10]

			// Use the direction to set the desired power output
			// 0-255 >> REMAP >> 0-2000
			if (motor1_dir)
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d018      	beq.n	800153e <SCH_XBeeRX+0x176>
				ctrl_input[0] = -((float)packet[0x08])*20.0/2.55;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800151a:	eef1 7a67 	vneg.f32	s15, s15
 800151e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001522:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001526:	ee27 6b06 	vmul.f64	d6, d7, d6
 800152a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80015d8 <SCH_XBeeRX+0x210>
 800152e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001532:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001536:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <SCH_XBeeRX+0x24c>)
 8001538:	edc3 7a00 	vstr	s15, [r3]
 800153c:	e015      	b.n	800156a <SCH_XBeeRX+0x1a2>
			else
				ctrl_input[0] = ((float)packet[0x08])*20.0/2.55;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3308      	adds	r3, #8
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800154c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001550:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001554:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001558:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 80015d8 <SCH_XBeeRX+0x210>
 800155c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001560:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001564:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <SCH_XBeeRX+0x24c>)
 8001566:	edc3 7a00 	vstr	s15, [r3]

			if (motor2_dir)
 800156a:	7abb      	ldrb	r3, [r7, #10]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d016      	beq.n	800159e <SCH_XBeeRX+0x1d6>
				ctrl_input[1] = ((float)packet[0x07])*20.0/2.55;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3307      	adds	r3, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001582:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001586:	ee27 6b06 	vmul.f64	d6, d7, d6
 800158a:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 80015d8 <SCH_XBeeRX+0x210>
 800158e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001592:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <SCH_XBeeRX+0x24c>)
 8001598:	edc3 7a01 	vstr	s15, [r3, #4]
 800159c:	e019      	b.n	80015d2 <SCH_XBeeRX+0x20a>
			else
				ctrl_input[1] = -((float)packet[0x07])*20.0/2.55;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3307      	adds	r3, #7
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	eef1 7a67 	vneg.f32	s15, s15
 80015b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b4:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 80015b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015bc:	ed9f 5b06 	vldr	d5, [pc, #24]	@ 80015d8 <SCH_XBeeRX+0x210>
 80015c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <SCH_XBeeRX+0x24c>)
 80015ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80015ce:	e000      	b.n	80015d2 <SCH_XBeeRX+0x20a>
		return;
 80015d0:	bf00      	nop

//			ctrl_inputLast[0] = ctrl_input[0];
//			ctrl_inputLast[1] = ctrl_input[1];
		}
	}
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	66666666 	.word	0x66666666
 80015dc:	40046666 	.word	0x40046666
 80015e0:	24025d38 	.word	0x24025d38
 80015e4:	240008a8 	.word	0x240008a8
 80015e8:	0801b1d4 	.word	0x0801b1d4
 80015ec:	240008dc 	.word	0x240008dc
 80015f0:	24025d34 	.word	0x24025d34
 80015f4:	24000004 	.word	0x24000004
 80015f8:	2400000c 	.word	0x2400000c
 80015fc:	2400041c 	.word	0x2400041c
 8001600:	24025d2e 	.word	0x24025d2e
 8001604:	24025d5e 	.word	0x24025d5e
 8001608:	240008a9 	.word	0x240008a9
 800160c:	40010000 	.word	0x40010000
 8001610:	40000400 	.word	0x40000400
 8001614:	240008c4 	.word	0x240008c4

08001618 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0

	// Early exit if the JPEG isn't ready, nothing to transmit
	if (jpeg_state != 2)
 800161e:	4b44      	ldr	r3, [pc, #272]	@ (8001730 <SCH_XBeeTX+0x118>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d17a      	bne.n	800171e <SCH_XBeeTX+0x106>
		return;

	// Get delta time, there has to be a delay for the TX to work properly
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 8001628:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <SCH_XBeeTX+0x11c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fc2d 	bl	8001e8c <DeltaTime>
 8001632:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d973      	bls.n	8001722 <SCH_XBeeTX+0x10a>

	if (tx_state == 0)
 800163a:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <SCH_XBeeTX+0x120>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <SCH_XBeeTX+0x32>
		tx_state = 1;	// If Idle, Flag as transmitting IMAGE
 8001644:	4b3c      	ldr	r3, [pc, #240]	@ (8001738 <SCH_XBeeTX+0x120>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]

	if (tx_state == 1) {
 800164a:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <SCH_XBeeTX+0x120>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d112      	bne.n	800167a <SCH_XBeeTX+0x62>
		// Send an IMAGE packet
		// Image packet numbers:  0000, 0001, 0002, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE + JPEG_HEADERSIZE, tx_byte)) {
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <SCH_XBeeTX+0x124>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	019b      	lsls	r3, r3, #6
 800165c:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001660:	4a37      	ldr	r2, [pc, #220]	@ (8001740 <SCH_XBeeTX+0x128>)
 8001662:	4413      	add	r3, r2
 8001664:	4a35      	ldr	r2, [pc, #212]	@ (800173c <SCH_XBeeTX+0x124>)
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	b292      	uxth	r2, r2
 800166a:	4619      	mov	r1, r3
 800166c:	4835      	ldr	r0, [pc, #212]	@ (8001744 <SCH_XBeeTX+0x12c>)
 800166e:	f014 f8fd 	bl	801586c <XBEE_TXPacket>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01a      	beq.n	80016ae <SCH_XBeeTX+0x96>
			return;
 8001678:	e056      	b.n	8001728 <SCH_XBeeTX+0x110>
		}
	} else if (tx_state == 2) {
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <SCH_XBeeTX+0x120>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d114      	bne.n	80016ae <SCH_XBeeTX+0x96>
		// Send a HEADER packet
		// Header packet numbers: FFFE, FFFD, FFFC, ...
		if (XBEE_TXPacket(&hxbee, jpeg_out + tx_byte*UART_TXSIZE, 0xFFFF - (tx_byte+1))) {
 8001684:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <SCH_XBeeTX+0x124>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	461a      	mov	r2, r3
 800168e:	4b2c      	ldr	r3, [pc, #176]	@ (8001740 <SCH_XBeeTX+0x128>)
 8001690:	18d1      	adds	r1, r2, r3
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <SCH_XBeeTX+0x124>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b29a      	uxth	r2, r3
 8001698:	f06f 0301 	mvn.w	r3, #1
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4828      	ldr	r0, [pc, #160]	@ (8001744 <SCH_XBeeTX+0x12c>)
 80016a4:	f014 f8e2 	bl	801586c <XBEE_TXPacket>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13b      	bne.n	8001726 <SCH_XBeeTX+0x10e>
			return;
		}
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 80016ae:	f001 fef9 	bl	80034a4 <HAL_GetTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <SCH_XBeeTX+0x11c>)
 80016b6:	6013      	str	r3, [r2, #0]
	tx_byte++;
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <SCH_XBeeTX+0x124>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <SCH_XBeeTX+0x124>)
 80016c4:	801a      	strh	r2, [r3, #0]

	// IMAGE Transmission complete
	if (tx_state == 1 && tx_byte > (jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE + 1) {
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <SCH_XBeeTX+0x120>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d115      	bne.n	80016fc <SCH_XBeeTX+0xe4>
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <SCH_XBeeTX+0x124>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <SCH_XBeeTX+0x130>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d909      	bls.n	80016fc <SCH_XBeeTX+0xe4>
		tx_state = 0;	// Flag the radio as idle
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <SCH_XBeeTX+0x120>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <SCH_XBeeTX+0x124>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	801a      	strh	r2, [r3, #0]
		jpeg_state = 0;	// Flag the JPEG as idle
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <SCH_XBeeTX+0x118>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
		return;
 80016fa:	e015      	b.n	8001728 <SCH_XBeeTX+0x110>
	}

	// HEADER Transmission complete
	if (tx_state == 2 && tx_byte > JPEG_HEADERSIZE / UART_TXSIZE + 1) {
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <SCH_XBeeTX+0x120>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d110      	bne.n	8001728 <SCH_XBeeTX+0x110>
 8001706:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <SCH_XBeeTX+0x124>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	2b09      	cmp	r3, #9
 800170e:	d90b      	bls.n	8001728 <SCH_XBeeTX+0x110>
		tx_state = 0;	// Flag the radio as idle
 8001710:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <SCH_XBeeTX+0x120>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		tx_byte = 0;	// Reset the packet counter to 0
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <SCH_XBeeTX+0x124>)
 8001718:	2200      	movs	r2, #0
 800171a:	801a      	strh	r2, [r3, #0]
		return;
 800171c:	e004      	b.n	8001728 <SCH_XBeeTX+0x110>
		return;
 800171e:	bf00      	nop
 8001720:	e002      	b.n	8001728 <SCH_XBeeTX+0x110>
	if (delta_t < SCH_MS_TX) return;
 8001722:	bf00      	nop
 8001724:	e000      	b.n	8001728 <SCH_XBeeTX+0x110>
			return;
 8001726:	bf00      	nop

//	for (uint16_t i = 0; i < ((jpeg_size - JPEG_HEADERSIZE) / UART_TXSIZE) + 1; i++) {
//		XBEE_TXPacket(&hxbee, jpeg_out + i*UART_TXSIZE + JPEG_HEADERSIZE, i);
//		HAL_Delay(5);
//	}
}
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24025d2e 	.word	0x24025d2e
 8001734:	240008b4 	.word	0x240008b4
 8001738:	24025d5e 	.word	0x24025d5e
 800173c:	24025d5c 	.word	0x24025d5c
 8001740:	24013368 	.word	0x24013368
 8001744:	24025d38 	.word	0x24025d38
 8001748:	24025d30 	.word	0x24025d30
 800174c:	00000000 	.word	0x00000000

08001750 <SCH_CTRL>:

void SCH_CTRL() {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
	uint32_t delta_t = DeltaTime(sch_tim_ctrl);
 8001756:	4bb0      	ldr	r3, [pc, #704]	@ (8001a18 <SCH_CTRL+0x2c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fb96 	bl	8001e8c <DeltaTime>
 8001760:	6138      	str	r0, [r7, #16]
	sch_tim_ctrl = HAL_GetTick();
 8001762:	f001 fe9f 	bl	80034a4 <HAL_GetTick>
 8001766:	4603      	mov	r3, r0
 8001768:	4aab      	ldr	r2, [pc, #684]	@ (8001a18 <SCH_CTRL+0x2c8>)
 800176a:	6013      	str	r3, [r2, #0]

	float ctrl_safe[2] = {0, 0};
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
	ctrl_safe[0] = ctrl_input[0];
 8001778:	4ba8      	ldr	r3, [pc, #672]	@ (8001a1c <SCH_CTRL+0x2cc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	603b      	str	r3, [r7, #0]
	ctrl_safe[1] = ctrl_input[1];
 800177e:	4ba7      	ldr	r3, [pc, #668]	@ (8001a1c <SCH_CTRL+0x2cc>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	607b      	str	r3, [r7, #4]

	if (overcurrent_protState) {
 8001784:	4ba6      	ldr	r3, [pc, #664]	@ (8001a20 <SCH_CTRL+0x2d0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <SCH_CTRL+0x48>
		ctrl_safe[0] = 0;
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
		ctrl_safe[1] = 0;
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
	}

	// This is how much the power level of the motors can change right now
	float maxAllowablePwrDelta = CTRL_MAX_PWRDELTA_PERSECOND*(((float)delta_t)/1000.0);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017a6:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 8001a08 <SCH_CTRL+0x2b8>
 80017aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017ae:	ed9f 6b98 	vldr	d6, [pc, #608]	@ 8001a10 <SCH_CTRL+0x2c0>
 80017b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017ba:	edc7 7a03 	vstr	s15, [r7, #12]
	for (uint8_t i = 0; i < 2; i++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	e0ef      	b.n	80019a4 <SCH_CTRL+0x254>
		// Correct the control signals if they somehow go out of bounds
		if (ctrl_safe[i] >  2000.0) ctrl_safe[i] =  2000.0;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	3318      	adds	r3, #24
 80017ca:	443b      	add	r3, r7
 80017cc:	3b18      	subs	r3, #24
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001a24 <SCH_CTRL+0x2d4>
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	dd06      	ble.n	80017ee <SCH_CTRL+0x9e>
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	3318      	adds	r3, #24
 80017e6:	443b      	add	r3, r7
 80017e8:	3b18      	subs	r3, #24
 80017ea:	4a8f      	ldr	r2, [pc, #572]	@ (8001a28 <SCH_CTRL+0x2d8>)
 80017ec:	601a      	str	r2, [r3, #0]
		if (ctrl_safe[i] < -2000.0) ctrl_safe[i] = -2000.0;
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	3318      	adds	r3, #24
 80017f4:	443b      	add	r3, r7
 80017f6:	3b18      	subs	r3, #24
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001a2c <SCH_CTRL+0x2dc>
 8001800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d506      	bpl.n	8001818 <SCH_CTRL+0xc8>
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	3318      	adds	r3, #24
 8001810:	443b      	add	r3, r7
 8001812:	3b18      	subs	r3, #24
 8001814:	4a86      	ldr	r2, [pc, #536]	@ (8001a30 <SCH_CTRL+0x2e0>)
 8001816:	601a      	str	r2, [r3, #0]

		float delta = ctrl_safe[i] - ctrl_output[i];
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	3318      	adds	r3, #24
 800181e:	443b      	add	r3, r7
 8001820:	3b18      	subs	r3, #24
 8001822:	ed93 7a00 	vldr	s14, [r3]
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	4a82      	ldr	r2, [pc, #520]	@ (8001a34 <SCH_CTRL+0x2e4>)
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001836:	edc7 7a02 	vstr	s15, [r7, #8]
		if (delta > 0) {
 800183a:	edd7 7a02 	vldr	s15, [r7, #8]
 800183e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	dd25      	ble.n	8001894 <SCH_CTRL+0x144>
			if (maxAllowablePwrDelta >= delta)
 8001848:	ed97 7a03 	vldr	s14, [r7, #12]
 800184c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	db0b      	blt.n	8001872 <SCH_CTRL+0x122>
				ctrl_output[i] = ctrl_safe[i];
 800185a:	7dfa      	ldrb	r2, [r7, #23]
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	3218      	adds	r2, #24
 8001862:	443a      	add	r2, r7
 8001864:	3a18      	subs	r2, #24
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	4972      	ldr	r1, [pc, #456]	@ (8001a34 <SCH_CTRL+0x2e4>)
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e037      	b.n	80018e2 <SCH_CTRL+0x192>
			else
				ctrl_output[i] += maxAllowablePwrDelta;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	4a6f      	ldr	r2, [pc, #444]	@ (8001a34 <SCH_CTRL+0x2e4>)
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	ed93 7a00 	vldr	s14, [r3]
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001888:	4a6a      	ldr	r2, [pc, #424]	@ (8001a34 <SCH_CTRL+0x2e4>)
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	edc3 7a00 	vstr	s15, [r3]
 8001892:	e026      	b.n	80018e2 <SCH_CTRL+0x192>
		} else {
			if (maxAllowablePwrDelta >= -delta)
 8001894:	edd7 7a02 	vldr	s15, [r7, #8]
 8001898:	eef1 7a67 	vneg.f32	s15, s15
 800189c:	ed97 7a03 	vldr	s14, [r7, #12]
 80018a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	db0b      	blt.n	80018c2 <SCH_CTRL+0x172>
				ctrl_output[i] = ctrl_safe[i];
 80018aa:	7dfa      	ldrb	r2, [r7, #23]
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	0092      	lsls	r2, r2, #2
 80018b0:	3218      	adds	r2, #24
 80018b2:	443a      	add	r2, r7
 80018b4:	3a18      	subs	r2, #24
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	495e      	ldr	r1, [pc, #376]	@ (8001a34 <SCH_CTRL+0x2e4>)
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e00f      	b.n	80018e2 <SCH_CTRL+0x192>
			else
				ctrl_output[i] -= maxAllowablePwrDelta;
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	4a5b      	ldr	r2, [pc, #364]	@ (8001a34 <SCH_CTRL+0x2e4>)
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	ed93 7a00 	vldr	s14, [r3]
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d8:	4a56      	ldr	r2, [pc, #344]	@ (8001a34 <SCH_CTRL+0x2e4>)
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	edc3 7a00 	vstr	s15, [r3]
		}

		// Correct the output signals if they somehow go out of bounds
		if (ctrl_output[i] >  2000.0) ctrl_output[i] =  2000.0;
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	4a53      	ldr	r2, [pc, #332]	@ (8001a34 <SCH_CTRL+0x2e4>)
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001a24 <SCH_CTRL+0x2d4>
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	dd05      	ble.n	8001908 <SCH_CTRL+0x1b8>
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001a34 <SCH_CTRL+0x2e4>)
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	4a48      	ldr	r2, [pc, #288]	@ (8001a28 <SCH_CTRL+0x2d8>)
 8001906:	601a      	str	r2, [r3, #0]
		if (ctrl_output[i] < -2000.0) ctrl_output[i] = -2000.0;
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <SCH_CTRL+0x2e4>)
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001a2c <SCH_CTRL+0x2dc>
 8001918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d505      	bpl.n	800192e <SCH_CTRL+0x1de>
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	4a43      	ldr	r2, [pc, #268]	@ (8001a34 <SCH_CTRL+0x2e4>)
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	4a41      	ldr	r2, [pc, #260]	@ (8001a30 <SCH_CTRL+0x2e0>)
 800192c:	601a      	str	r2, [r3, #0]

		// Turn the interpolated values into actual PWM levels
		ctrl_output_dir[i] = ctrl_output[i] >= 0;
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	4a40      	ldr	r2, [pc, #256]	@ (8001a34 <SCH_CTRL+0x2e4>)
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	bfac      	ite	ge
 8001944:	2301      	movge	r3, #1
 8001946:	2300      	movlt	r3, #0
 8001948:	b2da      	uxtb	r2, r3
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	4611      	mov	r1, r2
 800194e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a38 <SCH_CTRL+0x2e8>)
 8001950:	54d1      	strb	r1, [r2, r3]
		if (ctrl_output_dir[i])
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	4a38      	ldr	r2, [pc, #224]	@ (8001a38 <SCH_CTRL+0x2e8>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00f      	beq.n	800197c <SCH_CTRL+0x22c>
			ctrl_output_mag[i] = (uint16_t)(ctrl_output[i]);
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	4a35      	ldr	r2, [pc, #212]	@ (8001a34 <SCH_CTRL+0x2e4>)
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196e:	ee17 2a90 	vmov	r2, s15
 8001972:	b291      	uxth	r1, r2
 8001974:	4a31      	ldr	r2, [pc, #196]	@ (8001a3c <SCH_CTRL+0x2ec>)
 8001976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800197a:	e010      	b.n	800199e <SCH_CTRL+0x24e>
		else
			ctrl_output_mag[i] = (uint16_t)(-ctrl_output[i]);
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a34 <SCH_CTRL+0x2e4>)
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	eef1 7a67 	vneg.f32	s15, s15
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001992:	ee17 2a90 	vmov	r2, s15
 8001996:	b291      	uxth	r1, r2
 8001998:	4a28      	ldr	r2, [pc, #160]	@ (8001a3c <SCH_CTRL+0x2ec>)
 800199a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 2; i++) {
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	3301      	adds	r3, #1
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	f67f af0c 	bls.w	80017c4 <SCH_CTRL+0x74>
	}

	// Toggle the motors
	if (ctrl_output_dir[0]) {
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <SCH_CTRL+0x2e8>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d009      	beq.n	80019c8 <SCH_CTRL+0x278>
		TIM2->CCR1 = 0;
 80019b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b8:	2200      	movs	r2, #0
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = ctrl_output_mag[0];
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <SCH_CTRL+0x2ec>)
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80019c6:	e008      	b.n	80019da <SCH_CTRL+0x28a>
	} else {
		TIM2->CCR1 = ctrl_output_mag[0];
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <SCH_CTRL+0x2ec>)
 80019ca:	881a      	ldrh	r2, [r3, #0]
 80019cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019d0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = 0;
 80019d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019d6:	2200      	movs	r2, #0
 80019d8:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if (ctrl_output_dir[1]) {
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <SCH_CTRL+0x2e8>)
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <SCH_CTRL+0x2a2>
		TIM4->CCR3 = 0;
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <SCH_CTRL+0x2f0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = ctrl_output_mag[1];
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <SCH_CTRL+0x2ec>)
 80019ea:	885a      	ldrh	r2, [r3, #2]
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <SCH_CTRL+0x2f0>)
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40
	} else {
		TIM4->CCR3 = ctrl_output_mag[1];
		TIM4->CCR4 = 0;
	}
}
 80019f0:	e006      	b.n	8001a00 <SCH_CTRL+0x2b0>
		TIM4->CCR3 = ctrl_output_mag[1];
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <SCH_CTRL+0x2ec>)
 80019f4:	885a      	ldrh	r2, [r3, #2]
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <SCH_CTRL+0x2f0>)
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM4->CCR4 = 0;
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <SCH_CTRL+0x2f0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	408f4000 	.word	0x408f4000
 8001a10:	00000000 	.word	0x00000000
 8001a14:	409f4000 	.word	0x409f4000
 8001a18:	240008b8 	.word	0x240008b8
 8001a1c:	240008c4 	.word	0x240008c4
 8001a20:	240008a9 	.word	0x240008a9
 8001a24:	44fa0000 	.word	0x44fa0000
 8001a28:	44fa0000 	.word	0x44fa0000
 8001a2c:	c4fa0000 	.word	0xc4fa0000
 8001a30:	c4fa0000 	.word	0xc4fa0000
 8001a34:	240008cc 	.word	0x240008cc
 8001a38:	240008d8 	.word	0x240008d8
 8001a3c:	240008d4 	.word	0x240008d4
 8001a40:	40000800 	.word	0x40000800

08001a44 <SCH_PowerMon>:

void SCH_PowerMon() {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	INA229_Get(&hina229);
 8001a48:	4819      	ldr	r0, [pc, #100]	@ (8001ab0 <SCH_PowerMon+0x6c>)
 8001a4a:	f001 fc41 	bl	80032d0 <INA229_Get>

	if (hina229.voltage > debug_peakVoltage) debug_peakVoltage = hina229.voltage;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <SCH_PowerMon+0x6c>)
 8001a50:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <SCH_PowerMon+0x70>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	dd03      	ble.n	8001a6c <SCH_PowerMon+0x28>
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <SCH_PowerMon+0x6c>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <SCH_PowerMon+0x70>)
 8001a6a:	6013      	str	r3, [r2, #0]
	if (hina229.current > debug_peakCurrent) debug_peakCurrent = hina229.current;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <SCH_PowerMon+0x6c>)
 8001a6e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <SCH_PowerMon+0x74>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	dd03      	ble.n	8001a8a <SCH_PowerMon+0x46>
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <SCH_PowerMon+0x6c>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <SCH_PowerMon+0x74>)
 8001a88:	6013      	str	r3, [r2, #0]

	overcurrent_protState = hina229.current >= OVERCURRENT_PROTLIMIT;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <SCH_PowerMon+0x6c>)
 8001a8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	bfac      	ite	ge
 8001a9e:	2301      	movge	r3, #1
 8001aa0:	2300      	movlt	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <SCH_PowerMon+0x78>)
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	24000944 	.word	0x24000944
 8001ab4:	240008ac 	.word	0x240008ac
 8001ab8:	240008b0 	.word	0x240008b0
 8001abc:	240008a9 	.word	0x240008a9

08001ac0 <SCH_Camera>:

void SCH_Camera() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <SCH_Camera+0x68>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d124      	bne.n	8001b1a <SCH_Camera+0x5a>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <SCH_Camera+0x6c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d121      	bne.n	8001b1e <SCH_Camera+0x5e>

	// Take a snapshot
	uint8_t ovStat = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, camera_mem, CAM_GRAYSIZE / 4);
 8001ada:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <SCH_Camera+0x70>)
 8001adc:	f644 2371 	movw	r3, #19057	@ 0x4a71
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4814      	ldr	r0, [pc, #80]	@ (8001b34 <SCH_Camera+0x74>)
 8001ae4:	f001 ff1c 	bl	8003920 <HAL_DCMI_Start_DMA>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
	if (ovStat) {
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00f      	beq.n	8001b12 <SCH_Camera+0x52>
		sprintf(ssd_msg, "DCMI/DMA ERROR - Code 0x%X\r\n", ovStat);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4910      	ldr	r1, [pc, #64]	@ (8001b38 <SCH_Camera+0x78>)
 8001af8:	4810      	ldr	r0, [pc, #64]	@ (8001b3c <SCH_Camera+0x7c>)
 8001afa:	f017 fb2d 	bl	8019158 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001afe:	480f      	ldr	r0, [pc, #60]	@ (8001b3c <SCH_Camera+0x7c>)
 8001b00:	f7fe fc3e 	bl	8000380 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <SCH_Camera+0x7c>)
 8001b0c:	f000 f9d5 	bl	8001eba <WriteDebug>
		return;
 8001b10:	e006      	b.n	8001b20 <SCH_Camera+0x60>
	}

	camera_state = 1;	// Flag Camera as DMA Queued
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <SCH_Camera+0x68>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e002      	b.n	8001b20 <SCH_Camera+0x60>
	if (camera_state != 0) return;	// Exit if the camera is capturing, queued, or has un-encoded data
 8001b1a:	bf00      	nop
 8001b1c:	e000      	b.n	8001b20 <SCH_Camera+0x60>
	if (jpeg_state != 0) return;	// Exit if the JPEG is processing (camera DMA can corrupt the working buffer of JPEG)
 8001b1e:	bf00      	nop
}
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	24013322 	.word	0x24013322
 8001b2c:	24025d2e 	.word	0x24025d2e
 8001b30:	2400095c 	.word	0x2400095c
 8001b34:	24000300 	.word	0x24000300
 8001b38:	0801b1e4 	.word	0x0801b1e4
 8001b3c:	240008dc 	.word	0x240008dc

08001b40 <SCH_JPEG>:

void SCH_JPEG() {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af02      	add	r7, sp, #8

	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <SCH_JPEG+0x60>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d120      	bne.n	8001b92 <SCH_JPEG+0x52>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <SCH_JPEG+0x64>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d11d      	bne.n	8001b96 <SCH_JPEG+0x56>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <SCH_JPEG+0x68>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d01a      	beq.n	8001b9a <SCH_JPEG+0x5a>

	camera_state = 0;	// flag the camera as idle, it won't start again until the JPEG is done
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <SCH_JPEG+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
	jpeg_state = 1;		// flag JPG as encoding
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <SCH_JPEG+0x60>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]

	jpeg_block = 0;		// Reset the JEPG block idx
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <SCH_JPEG+0x6c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
	jpeg_size = 0;		// Reset the JPEG size counter
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <SCH_JPEG+0x70>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

	GenerateJPEGMCUBlock();
 8001b7c:	f000 facc 	bl	8002118 <GenerateJPEGMCUBlock>
	HAL_JPEG_Encode_DMA(&hjpeg, jpeg_mcu, 64, jpeg_out, JPEG_OUTBUF_SIZE);
 8001b80:	2340      	movs	r3, #64	@ 0x40
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <SCH_JPEG+0x74>)
 8001b86:	2240      	movs	r2, #64	@ 0x40
 8001b88:	490b      	ldr	r1, [pc, #44]	@ (8001bb8 <SCH_JPEG+0x78>)
 8001b8a:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <SCH_JPEG+0x7c>)
 8001b8c:	f007 fd84 	bl	8009698 <HAL_JPEG_Encode_DMA>
 8001b90:	e004      	b.n	8001b9c <SCH_JPEG+0x5c>
	if (jpeg_state != 0) return;	// Exit if the JPEG is already processing
 8001b92:	bf00      	nop
 8001b94:	e002      	b.n	8001b9c <SCH_JPEG+0x5c>
	if (camera_state != 3) return;	// Exit if the camera does not have a new image to present
 8001b96:	bf00      	nop
 8001b98:	e000      	b.n	8001b9c <SCH_JPEG+0x5c>
	if (tx_state == 1) return;		// Exit if the radio is transmitting
 8001b9a:	bf00      	nop
}
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	24025d2e 	.word	0x24025d2e
 8001ba4:	24013322 	.word	0x24013322
 8001ba8:	24025d5e 	.word	0x24025d5e
 8001bac:	24013364 	.word	0x24013364
 8001bb0:	24025d30 	.word	0x24025d30
 8001bb4:	24013368 	.word	0x24013368
 8001bb8:	24013324 	.word	0x24013324
 8001bbc:	2400041c 	.word	0x2400041c

08001bc0 <SCH_DEBUG>:

void SCH_DEBUG() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af04      	add	r7, sp, #16
	uint32_t delta_t = DeltaTime(sch_tim_debug);
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8001cfc <SCH_DEBUG+0x13c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f95e 	bl	8001e8c <DeltaTime>
 8001bd0:	60b8      	str	r0, [r7, #8]
	if (delta_t < SCH_MS_DEBUG)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b31      	cmp	r3, #49	@ 0x31
 8001bd6:	f240 808d 	bls.w	8001cf4 <SCH_DEBUG+0x134>
		return;

	debug_ctr++;
 8001bda:	4b49      	ldr	r3, [pc, #292]	@ (8001d00 <SCH_DEBUG+0x140>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	4a47      	ldr	r2, [pc, #284]	@ (8001d00 <SCH_DEBUG+0x140>)
 8001be2:	6013      	str	r3, [r2, #0]

	if (debug_ctr >= 60) {
 8001be4:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <SCH_DEBUG+0x140>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bea:	d94a      	bls.n	8001c82 <SCH_DEBUG+0xc2>
		debug_ctr = 0;
 8001bec:	4b44      	ldr	r3, [pc, #272]	@ (8001d00 <SCH_DEBUG+0x140>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 2; i++) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e041      	b.n	8001c7c <SCH_DEBUG+0xbc>
			uint8_t polarity = rand()%2;
 8001bf8:	f016 fd78 	bl	80186ec <rand>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	bfb8      	it	lt
 8001c06:	425b      	neglt	r3, r3
 8001c08:	71fb      	strb	r3, [r7, #7]
			if (polarity)
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d018      	beq.n	8001c42 <SCH_DEBUG+0x82>
				ctrl_input[i] = (float)(rand()%2000);
 8001c10:	f016 fd6c 	bl	80186ec <rand>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a3b      	ldr	r2, [pc, #236]	@ (8001d04 <SCH_DEBUG+0x144>)
 8001c18:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1c:	11d1      	asrs	r1, r2, #7
 8001c1e:	17da      	asrs	r2, r3, #31
 8001c20:	1a8a      	subs	r2, r1, r2
 8001c22:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c26:	fb01 f202 	mul.w	r2, r1, r2
 8001c2a:	1a9a      	subs	r2, r3, r2
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	ee07 2a90 	vmov	s15, r2
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	4a34      	ldr	r2, [pc, #208]	@ (8001d08 <SCH_DEBUG+0x148>)
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
 8001c40:	e019      	b.n	8001c76 <SCH_DEBUG+0xb6>
			else
				ctrl_input[i] = -(float)(rand()%2000);
 8001c42:	f016 fd53 	bl	80186ec <rand>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a2e      	ldr	r2, [pc, #184]	@ (8001d04 <SCH_DEBUG+0x144>)
 8001c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4e:	11d1      	asrs	r1, r2, #7
 8001c50:	17da      	asrs	r2, r3, #31
 8001c52:	1a8a      	subs	r2, r1, r2
 8001c54:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c58:	fb01 f202 	mul.w	r2, r1, r2
 8001c5c:	1a9a      	subs	r2, r3, r2
 8001c5e:	ee07 2a90 	vmov	s15, r2
 8001c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	eef1 7a67 	vneg.f32	s15, s15
 8001c6c:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <SCH_DEBUG+0x148>)
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 2; i++) {
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d9ba      	bls.n	8001bf8 <SCH_DEBUG+0x38>
			//ctrl_inputLast[i] = ctrl_input[i];
		}
	}

	// Print Motor CTRL states
	if (overcurrent_protState == 1) {
 8001c82:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <SCH_DEBUG+0x14c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <SCH_DEBUG+0xd4>
		sprintf(ssd_msg, "!! OVERCURRENT !!\n----------\n");
 8001c8a:	4921      	ldr	r1, [pc, #132]	@ (8001d10 <SCH_DEBUG+0x150>)
 8001c8c:	4821      	ldr	r0, [pc, #132]	@ (8001d14 <SCH_DEBUG+0x154>)
 8001c8e:	f017 fa63 	bl	8019158 <siprintf>
 8001c92:	e018      	b.n	8001cc6 <SCH_DEBUG+0x106>
	} else {
		sprintf(ssd_msg, "L: %04d - R: %04d | V: %.2f, A: %.2f\n----------\n", ctrl_output_mag[0], ctrl_output_mag[1], debug_peakVoltage, debug_peakCurrent);
 8001c94:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <SCH_DEBUG+0x158>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <SCH_DEBUG+0x158>)
 8001c9c:	885b      	ldrh	r3, [r3, #2]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <SCH_DEBUG+0x15c>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001caa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <SCH_DEBUG+0x160>)
 8001cac:	edd3 6a00 	vldr	s13, [r3]
 8001cb0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001cb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001cb8:	ed8d 7b00 	vstr	d7, [sp]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4919      	ldr	r1, [pc, #100]	@ (8001d24 <SCH_DEBUG+0x164>)
 8001cc0:	4814      	ldr	r0, [pc, #80]	@ (8001d14 <SCH_DEBUG+0x154>)
 8001cc2:	f017 fa49 	bl	8019158 <siprintf>
	}
	// Print Power levels
	//sprintf(ssd_msg, "V: %.2f, A: %f\n", hina229.voltage, hina229.current);
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001cc6:	4813      	ldr	r0, [pc, #76]	@ (8001d14 <SCH_DEBUG+0x154>)
 8001cc8:	f7fe fb5a 	bl	8000380 <strlen>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4810      	ldr	r0, [pc, #64]	@ (8001d14 <SCH_DEBUG+0x154>)
 8001cd4:	f000 f8f1 	bl	8001eba <WriteDebug>

	debug_peakVoltage = 0;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <SCH_DEBUG+0x15c>)
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
	debug_peakCurrent = 0;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <SCH_DEBUG+0x160>)
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

	sch_tim_debug = HAL_GetTick();
 8001ce8:	f001 fbdc 	bl	80034a4 <HAL_GetTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a03      	ldr	r2, [pc, #12]	@ (8001cfc <SCH_DEBUG+0x13c>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e000      	b.n	8001cf6 <SCH_DEBUG+0x136>
		return;
 8001cf4:	bf00      	nop
}
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	240008bc 	.word	0x240008bc
 8001d00:	240008c0 	.word	0x240008c0
 8001d04:	10624dd3 	.word	0x10624dd3
 8001d08:	240008c4 	.word	0x240008c4
 8001d0c:	240008a9 	.word	0x240008a9
 8001d10:	0801b204 	.word	0x0801b204
 8001d14:	240008dc 	.word	0x240008dc
 8001d18:	240008d4 	.word	0x240008d4
 8001d1c:	240008ac 	.word	0x240008ac
 8001d20:	240008b0 	.word	0x240008b0
 8001d24:	0801b224 	.word	0x0801b224

08001d28 <HAL_DCMI_VsyncEventCallback>:

// ------------------------------------------------------------ OVERRIDE CALLBACKS -- //
// Frame captured event, called when the DMA buffer is full of new frame data
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d014      	beq.n	8001d64 <HAL_DCMI_VsyncEventCallback+0x3c>

	if (camera_state == 1) {	// Transition flag to CAPTURING
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d103      	bne.n	8001d4c <HAL_DCMI_VsyncEventCallback+0x24>
		camera_state = 2;
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	701a      	strb	r2, [r3, #0]
		return;
 8001d4a:	e00c      	b.n	8001d66 <HAL_DCMI_VsyncEventCallback+0x3e>
	}

	if (camera_state == 2) {	// Transition flag to READY
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_DCMI_VsyncEventCallback+0x3e>
		HAL_DCMI_Stop(hdcmi);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 fea4 	bl	8003aa4 <HAL_DCMI_Stop>
		camera_state = 3;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_DCMI_VsyncEventCallback+0x44>)
 8001d5e:	2203      	movs	r2, #3
 8001d60:	701a      	strb	r2, [r3, #0]
		return;
 8001d62:	e000      	b.n	8001d66 <HAL_DCMI_VsyncEventCallback+0x3e>
	if (!camera_state) return;	// Do nothing if the camera is IDLE
 8001d64:	bf00      	nop
	}
}
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24013322 	.word	0x24013322

08001d70 <HAL_UART_RxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	XBEE_RX_DMACallback(&hxbee);
 8001d78:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <HAL_UART_RxCpltCallback+0x18>)
 8001d7a:	f013 fde1 	bl	8015940 <XBEE_RX_DMACallback>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	24025d38 	.word	0x24025d38

08001d8c <HAL_JPEG_GetDataCallback>:

// JPEG hardware is requesting the next MCU block
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]

	// Restock the input buffer with new MCU
	if (GenerateJPEGMCUBlock()) {
 8001d96:	f000 f9bf 	bl	8002118 <GenerateJPEGMCUBlock>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_JPEG_GetDataCallback+0x3c>
		// ERROR while generating MCU, probable memory leak - recover JPEG peripheral by restarting
		jpeg_state = 0;	// Flag JPEG as idle
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_JPEG_GetDataCallback+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
		jpeg_block = 0;	// Reset the JPEG block IDX
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_JPEG_GetDataCallback+0x54>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

		sprintf(ssd_msg, "JPEG OVERRUN\n");
 8001dac:	490d      	ldr	r1, [pc, #52]	@ (8001de4 <HAL_JPEG_GetDataCallback+0x58>)
 8001dae:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <HAL_JPEG_GetDataCallback+0x5c>)
 8001db0:	f017 f9d2 	bl	8019158 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <HAL_JPEG_GetDataCallback+0x5c>)
 8001db6:	f7fe fae3 	bl	8000380 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <HAL_JPEG_GetDataCallback+0x5c>)
 8001dc2:	f000 f87a 	bl	8001eba <WriteDebug>
	}
	else {
		// Configure the buffer to be the same as before, it's contents have changed
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
	}
}
 8001dc6:	e004      	b.n	8001dd2 <HAL_JPEG_GetDataCallback+0x46>
		HAL_JPEG_ConfigInputBuffer(hjpeg, jpeg_mcu, 64);
 8001dc8:	2240      	movs	r2, #64	@ 0x40
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <HAL_JPEG_GetDataCallback+0x60>)
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f007 fd2b 	bl	8009828 <HAL_JPEG_ConfigInputBuffer>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	24025d2e 	.word	0x24025d2e
 8001de0:	24013364 	.word	0x24013364
 8001de4:	0801b258 	.word	0x0801b258
 8001de8:	240008dc 	.word	0x240008dc
 8001dec:	24013324 	.word	0x24013324

08001df0 <HAL_JPEG_DataReadyCallback>:

// JPEG hardware is requesting a larger output buffer.
// This is done to manage JPEG output size, give it a buffer only as large as required
void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
	// Setup new output buffer location (part of contiguous super-buffer)
	jpeg_size += JPEG_OUTBUF_SIZE;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_JPEG_DataReadyCallback+0x30>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3340      	adds	r3, #64	@ 0x40
 8001e02:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_JPEG_DataReadyCallback+0x30>)
 8001e04:	6013      	str	r3, [r2, #0]
	HAL_JPEG_ConfigOutputBuffer(hjpeg, jpeg_out + jpeg_size, JPEG_OUTBUF_SIZE);
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_JPEG_DataReadyCallback+0x30>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <HAL_JPEG_DataReadyCallback+0x34>)
 8001e0c:	4413      	add	r3, r2
 8001e0e:	2240      	movs	r2, #64	@ 0x40
 8001e10:	4619      	mov	r1, r3
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f007 fd1a 	bl	800984c <HAL_JPEG_ConfigOutputBuffer>
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	24025d30 	.word	0x24025d30
 8001e24:	24013368 	.word	0x24013368

08001e28 <HAL_JPEG_EncodeCpltCallback>:

// JPEG hardware has completed the current image
void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	jpeg_state = 2;	// Flag JPEG as ready
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_JPEG_EncodeCpltCallback+0x20>)
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]
	jpeg_block = 0;	// Reset the JPEG block IDX
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_JPEG_EncodeCpltCallback+0x24>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
//	sprintf(ssd_msg, "JPEG DONE\n");
//	WriteDebug(ssd_msg, strlen(ssd_msg));
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	24025d2e 	.word	0x24025d2e
 8001e4c:	24013364 	.word	0x24013364

08001e50 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001e58:	4909      	ldr	r1, [pc, #36]	@ (8001e80 <HAL_JPEG_ErrorCallback+0x30>)
 8001e5a:	480a      	ldr	r0, [pc, #40]	@ (8001e84 <HAL_JPEG_ErrorCallback+0x34>)
 8001e5c:	f017 f97c 	bl	8019158 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001e60:	4808      	ldr	r0, [pc, #32]	@ (8001e84 <HAL_JPEG_ErrorCallback+0x34>)
 8001e62:	f7fe fa8d 	bl	8000380 <strlen>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <HAL_JPEG_ErrorCallback+0x34>)
 8001e6e:	f000 f824 	bl	8001eba <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;	// Flag JPEG as idle
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_JPEG_ErrorCallback+0x38>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	0801b268 	.word	0x0801b268
 8001e84:	240008dc 	.word	0x240008dc
 8001e88:	24025d2e 	.word	0x24025d2e

08001e8c <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //
uint32_t DeltaTime(uint32_t start_t) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001e94:	f001 fb06 	bl	80034a4 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d204      	bcs.n	8001eac <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	e002      	b.n	8001eb2 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	1ad3      	subs	r3, r2, r3
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <WriteDebug>:

// Transmit wrapper, this is for continuity across Controller project which debugs by printing to OLEDs
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
	CDC_Transmit_FS(str_ptr, str_len);
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f015 fed8 	bl	8017c80 <CDC_Transmit_FS>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <CAM_GetRegister>:

HAL_StatusTypeDef CAM_GetRegister(uint8_t addr, uint8_t* pData, uint8_t haltOnError) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b09e      	sub	sp, #120	@ 0x78
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	2264      	movs	r2, #100	@ 0x64
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f017 f996 	bl	8019222 <memset>

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_READ, &addr, 1, 100);
 8001ef6:	1dfa      	adds	r2, r7, #7
 8001ef8:	2364      	movs	r3, #100	@ 0x64
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	2143      	movs	r1, #67	@ 0x43
 8001f00:	482f      	ldr	r0, [pc, #188]	@ (8001fc0 <CAM_GetRegister+0xe8>)
 8001f02:	f005 fcdf 	bl	80078c4 <HAL_I2C_Master_Transmit>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <CAM_GetRegister+0x7e>
		if (haltOnError) {
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01a      	beq.n	8001f50 <CAM_GetRegister+0x78>
			sprintf(usb_msg, "TX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f22:	f107 0008 	add.w	r0, r7, #8
 8001f26:	4927      	ldr	r1, [pc, #156]	@ (8001fc4 <CAM_GetRegister+0xec>)
 8001f28:	f017 f916 	bl	8019158 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fa25 	bl	8000380 <strlen>
 8001f36:	4602      	mov	r2, r0
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f015 fe9e 	bl	8017c80 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f48:	f001 fab8 	bl	80034bc <HAL_Delay>
			while (1) {
 8001f4c:	bf00      	nop
 8001f4e:	e7ed      	b.n	8001f2c <CAM_GetRegister+0x54>
			}
		}
		return ov_result;
 8001f50:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f54:	e030      	b.n	8001fb8 <CAM_GetRegister+0xe0>
	}


	ov_result = HAL_I2C_Master_Receive(&hi2c2, OV7670_ADDR_READ, pData, 1, 100);
 8001f56:	2364      	movs	r3, #100	@ 0x64
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	2143      	movs	r1, #67	@ 0x43
 8001f60:	4817      	ldr	r0, [pc, #92]	@ (8001fc0 <CAM_GetRegister+0xe8>)
 8001f62:	f005 fdc7 	bl	8007af4 <HAL_I2C_Master_Receive>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (ov_result) {
 8001f6c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <CAM_GetRegister+0xde>
		if (haltOnError) {
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01a      	beq.n	8001fb0 <CAM_GetRegister+0xd8>
			sprintf(usb_msg, "RX ERROR: Cannot read camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001f82:	f107 0008 	add.w	r0, r7, #8
 8001f86:	4910      	ldr	r1, [pc, #64]	@ (8001fc8 <CAM_GetRegister+0xf0>)
 8001f88:	f017 f8e6 	bl	8019158 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f9f5 	bl	8000380 <strlen>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f015 fe6e 	bl	8017c80 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8001fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa8:	f001 fa88 	bl	80034bc <HAL_Delay>
			while (1) {
 8001fac:	bf00      	nop
 8001fae:	e7ed      	b.n	8001f8c <CAM_GetRegister+0xb4>
			}
		}
		return ov_result;
 8001fb0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fb4:	e000      	b.n	8001fb8 <CAM_GetRegister+0xe0>
	}


	return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3770      	adds	r7, #112	@ 0x70
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	240003c8 	.word	0x240003c8
 8001fc4:	0801b274 	.word	0x0801b274
 8001fc8:	0801b2b0 	.word	0x0801b2b0

08001fcc <CAM_SetRegister>:

HAL_StatusTypeDef CAM_SetRegister(uint8_t addr, uint8_t data, uint8_t haltOnError) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0a0      	sub	sp, #128	@ 0x80
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	71bb      	strb	r3, [r7, #6]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef ov_result;
	uint8_t usb_msg[100] = {0};
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	2264      	movs	r2, #100	@ 0x64
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f017 f91b 	bl	8019222 <memset>

	uint8_t reg_set[2] = {addr, data};
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	733b      	strb	r3, [r7, #12]
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	737b      	strb	r3, [r7, #13]

	ov_result = HAL_I2C_Master_Transmit(&hi2c2, OV7670_ADDR_WRITE, reg_set, 2, 100);
 8001ff4:	f107 020c 	add.w	r2, r7, #12
 8001ff8:	2364      	movs	r3, #100	@ 0x64
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	2142      	movs	r1, #66	@ 0x42
 8002000:	4841      	ldr	r0, [pc, #260]	@ (8002108 <CAM_SetRegister+0x13c>)
 8002002:	f005 fc5f 	bl	80078c4 <HAL_I2C_Master_Transmit>
 8002006:	4603      	mov	r3, r0
 8002008:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800200c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01f      	beq.n	8002054 <CAM_SetRegister+0x88>
		if (haltOnError) {
 8002014:	797b      	ldrb	r3, [r7, #5]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d019      	beq.n	800204e <CAM_SetRegister+0x82>
			sprintf(usb_msg, "TX ERROR: Cannot write camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800201a:	79fa      	ldrb	r2, [r7, #7]
 800201c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002020:	f107 0010 	add.w	r0, r7, #16
 8002024:	4939      	ldr	r1, [pc, #228]	@ (800210c <CAM_SetRegister+0x140>)
 8002026:	f017 f897 	bl	8019158 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f9a6 	bl	8000380 <strlen>
 8002034:	4602      	mov	r2, r0
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f015 fe1f 	bl	8017c80 <CDC_Transmit_FS>
				HAL_Delay(1000);
 8002042:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002046:	f001 fa39 	bl	80034bc <HAL_Delay>
			while (1) {
 800204a:	bf00      	nop
 800204c:	e7ed      	b.n	800202a <CAM_SetRegister+0x5e>
			}
		}
		return ov_result;
 800204e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002052:	e054      	b.n	80020fe <CAM_SetRegister+0x132>
	}

	// Confirm write
	uint8_t reg_get = 0x00;
 8002054:	2300      	movs	r3, #0
 8002056:	72fb      	strb	r3, [r7, #11]
	ov_result = CAM_GetRegister(addr, &reg_get, 1);
 8002058:	f107 010b 	add.w	r1, r7, #11
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2201      	movs	r2, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff39 	bl	8001ed8 <CAM_GetRegister>
 8002066:	4603      	mov	r3, r0
 8002068:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (ov_result) {
 800206c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01f      	beq.n	80020b4 <CAM_SetRegister+0xe8>
		if (haltOnError) {
 8002074:	797b      	ldrb	r3, [r7, #5]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d019      	beq.n	80020ae <CAM_SetRegister+0xe2>
			sprintf(usb_msg, "CF ERROR: Cannot confirm camera register 0x%X - Code 0x%X\r\n", addr, ov_result);
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002080:	f107 0010 	add.w	r0, r7, #16
 8002084:	4922      	ldr	r1, [pc, #136]	@ (8002110 <CAM_SetRegister+0x144>)
 8002086:	f017 f867 	bl	8019158 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f976 	bl	8000380 <strlen>
 8002094:	4602      	mov	r2, r0
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f015 fdef 	bl	8017c80 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80020a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020a6:	f001 fa09 	bl	80034bc <HAL_Delay>
			while (1) {
 80020aa:	bf00      	nop
 80020ac:	e7ed      	b.n	800208a <CAM_SetRegister+0xbe>
			}
		}
		else {
			return ov_result;
 80020ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020b2:	e024      	b.n	80020fe <CAM_SetRegister+0x132>
		}
	}

	if (reg_get != data) {
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	79ba      	ldrb	r2, [r7, #6]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d01f      	beq.n	80020fc <CAM_SetRegister+0x130>
		// Error, bad write
		if (haltOnError) {
 80020bc:	797b      	ldrb	r3, [r7, #5]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <CAM_SetRegister+0x12c>
			sprintf(usb_msg, "CF ERROR: Bad write to register 0x%X - EXPECTED 0x%X, GOT 0x%X\r\n", addr, data, reg_get);
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	7af9      	ldrb	r1, [r7, #11]
 80020c8:	f107 0010 	add.w	r0, r7, #16
 80020cc:	9100      	str	r1, [sp, #0]
 80020ce:	4911      	ldr	r1, [pc, #68]	@ (8002114 <CAM_SetRegister+0x148>)
 80020d0:	f017 f842 	bl	8019158 <siprintf>
			while (1) {
				CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f951 	bl	8000380 <strlen>
 80020de:	4602      	mov	r2, r0
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f015 fdca 	bl	8017c80 <CDC_Transmit_FS>
				HAL_Delay(1000);
 80020ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020f0:	f001 f9e4 	bl	80034bc <HAL_Delay>
			while (1) {
 80020f4:	bf00      	nop
 80020f6:	e7ed      	b.n	80020d4 <CAM_SetRegister+0x108>
			}
		}
		return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <CAM_SetRegister+0x132>
	}

	return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3778      	adds	r7, #120	@ 0x78
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	240003c8 	.word	0x240003c8
 800210c:	0801b2ec 	.word	0x0801b2ec
 8002110:	0801b328 	.word	0x0801b328
 8002114:	0801b364 	.word	0x0801b364

08002118 <GenerateJPEGMCUBlock>:

// GENERATE JPEG MCU BLOCK
uint8_t GenerateJPEGMCUBlock() {
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
	// Don't go over the bounds of the specified MCU area
	if (jpeg_block > jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]) { return 1; }
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <GenerateJPEGMCUBlock+0x124>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b46      	ldr	r3, [pc, #280]	@ (8002240 <GenerateJPEGMCUBlock+0x128>)
 8002126:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800212a:	461a      	mov	r2, r3
 800212c:	4b43      	ldr	r3, [pc, #268]	@ (800223c <GenerateJPEGMCUBlock+0x124>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <GenerateJPEGMCUBlock+0x12c>)
 8002134:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	461a      	mov	r2, r3
 800213e:	4b42      	ldr	r3, [pc, #264]	@ (8002248 <GenerateJPEGMCUBlock+0x130>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d201      	bcs.n	800214a <GenerateJPEGMCUBlock+0x32>
 8002146:	2301      	movs	r3, #1
 8002148:	e072      	b.n	8002230 <GenerateJPEGMCUBlock+0x118>

	int xStart = (jpeg_block % jpeg_mcu_widths[jpeg_quality]) * 8;
 800214a:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <GenerateJPEGMCUBlock+0x130>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a3b      	ldr	r2, [pc, #236]	@ (800223c <GenerateJPEGMCUBlock+0x124>)
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	4611      	mov	r1, r2
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <GenerateJPEGMCUBlock+0x128>)
 8002156:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800215a:	fbb3 f1f2 	udiv	r1, r3, r2
 800215e:	fb01 f202 	mul.w	r2, r1, r2
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	60bb      	str	r3, [r7, #8]
	int yStart = (jpeg_block / jpeg_mcu_widths[jpeg_quality]) * 8;
 8002168:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <GenerateJPEGMCUBlock+0x130>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a33      	ldr	r2, [pc, #204]	@ (800223c <GenerateJPEGMCUBlock+0x124>)
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	4611      	mov	r1, r2
 8002172:	4a33      	ldr	r2, [pc, #204]	@ (8002240 <GenerateJPEGMCUBlock+0x128>)
 8002174:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002178:	fbb3 f3f2 	udiv	r3, r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	607b      	str	r3, [r7, #4]
	int i = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
	for (int y = yStart; y < yStart + 8; y++) {
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	e047      	b.n	800221a <GenerateJPEGMCUBlock+0x102>
		uint16_t cached_y = y*jpeg_scaleFactors[jpeg_quality];
 800218a:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <GenerateJPEGMCUBlock+0x124>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b2e      	ldr	r3, [pc, #184]	@ (800224c <GenerateJPEGMCUBlock+0x134>)
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	461a      	mov	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	b29b      	uxth	r3, r3
 800219a:	fb12 f303 	smulbb	r3, r2, r3
 800219e:	807b      	strh	r3, [r7, #2]

		for (int x = xStart; x < xStart + 8; x++) {
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e031      	b.n	800220a <GenerateJPEGMCUBlock+0xf2>
			uint16_t cached_x = x*jpeg_scaleFactors[jpeg_quality] + camera_vshift;
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <GenerateJPEGMCUBlock+0x124>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <GenerateJPEGMCUBlock+0x134>)
 80021ae:	5c9b      	ldrb	r3, [r3, r2]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	fb12 f303 	smulbb	r3, r2, r3
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <GenerateJPEGMCUBlock+0x138>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	803b      	strh	r3, [r7, #0]
			// Pad to 8x8
			if (cached_x >= CAM_WIDTH || cached_y >= CAM_HEIGHT) {
 80021c6:	883b      	ldrh	r3, [r7, #0]
 80021c8:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 80021cc:	d802      	bhi.n	80021d4 <GenerateJPEGMCUBlock+0xbc>
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	2bf1      	cmp	r3, #241	@ 0xf1
 80021d2:	d905      	bls.n	80021e0 <GenerateJPEGMCUBlock+0xc8>
				jpeg_mcu[i] = 0x00;
 80021d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002254 <GenerateJPEGMCUBlock+0x13c>)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4413      	add	r3, r2
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e00e      	b.n	80021fe <GenerateJPEGMCUBlock+0xe6>
			} else {
				jpeg_mcu[i] = camera_mem[cached_x + cached_y * CAM_WIDTH];
 80021e0:	8839      	ldrh	r1, [r7, #0]
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	019a      	lsls	r2, r3, #6
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	440b      	add	r3, r1
 80021f0:	4a19      	ldr	r2, [pc, #100]	@ (8002258 <GenerateJPEGMCUBlock+0x140>)
 80021f2:	5cd1      	ldrb	r1, [r2, r3]
 80021f4:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <GenerateJPEGMCUBlock+0x13c>)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4413      	add	r3, r2
 80021fa:	460a      	mov	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
		for (int x = xStart; x < xStart + 8; x++) {
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3307      	adds	r3, #7
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	ddc8      	ble.n	80021a6 <GenerateJPEGMCUBlock+0x8e>
	for (int y = yStart; y < yStart + 8; y++) {
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	3301      	adds	r3, #1
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3307      	adds	r3, #7
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	ddb2      	ble.n	800218a <GenerateJPEGMCUBlock+0x72>
		}
	}
	jpeg_block++;
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <GenerateJPEGMCUBlock+0x130>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a07      	ldr	r2, [pc, #28]	@ (8002248 <GenerateJPEGMCUBlock+0x130>)
 800222c:	6013      	str	r3, [r2, #0]
	return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	24025d34 	.word	0x24025d34
 8002240:	24000004 	.word	0x24000004
 8002244:	2400000c 	.word	0x2400000c
 8002248:	24013364 	.word	0x24013364
 800224c:	24000014 	.word	0x24000014
 8002250:	24000000 	.word	0x24000000
 8002254:	24013324 	.word	0x24013324
 8002258:	2400095c 	.word	0x2400095c

0800225c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002262:	463b      	mov	r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800226e:	f001 fa65 	bl	800373c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002272:	2301      	movs	r3, #1
 8002274:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002276:	2300      	movs	r3, #0
 8002278:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800227e:	231f      	movs	r3, #31
 8002280:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002282:	2387      	movs	r3, #135	@ 0x87
 8002284:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002286:	2300      	movs	r3, #0
 8002288:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800228a:	2300      	movs	r3, #0
 800228c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800228e:	2301      	movs	r3, #1
 8002290:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002292:	2301      	movs	r3, #1
 8002294:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800229e:	463b      	mov	r3, r7
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fa83 	bl	80037ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80022a6:	2004      	movs	r0, #4
 80022a8:	f001 fa60 	bl	800376c <HAL_MPU_Enable>

}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <Error_Handler+0x8>

080022c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_MspInit+0x30>)
 80022c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022cc:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <HAL_MspInit+0x30>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_MspInit+0x30>)
 80022d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	58024400 	.word	0x58024400

080022f4 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	@ 0x38
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a79      	ldr	r2, [pc, #484]	@ (80024f8 <HAL_DCMI_MspInit+0x204>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80ec 	bne.w	80024f0 <HAL_DCMI_MspInit+0x1fc>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002318:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 800231a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800231e:	4a77      	ldr	r2, [pc, #476]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002328:	4b74      	ldr	r3, [pc, #464]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 800232a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002336:	4b71      	ldr	r3, [pc, #452]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	4a6f      	ldr	r2, [pc, #444]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002346:	4b6d      	ldr	r3, [pc, #436]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002354:	4b69      	ldr	r3, [pc, #420]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235a:	4a68      	ldr	r2, [pc, #416]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002364:	4b65      	ldr	r3, [pc, #404]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	4b62      	ldr	r3, [pc, #392]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002378:	4a60      	ldr	r2, [pc, #384]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002382:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002390:	4b5a      	ldr	r3, [pc, #360]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002396:	4a59      	ldr	r2, [pc, #356]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023a0:	4b56      	ldr	r3, [pc, #344]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	4b53      	ldr	r3, [pc, #332]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b4:	4a51      	ldr	r2, [pc, #324]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023be:	4b4f      	ldr	r3, [pc, #316]	@ (80024fc <HAL_DCMI_MspInit+0x208>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0
 80023cc:	2373      	movs	r3, #115	@ 0x73
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023dc:	230d      	movs	r3, #13
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	4846      	ldr	r0, [pc, #280]	@ (8002500 <HAL_DCMI_MspInit+0x20c>)
 80023e8:	f005 f806 	bl	80073f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80023ec:	2350      	movs	r3, #80	@ 0x50
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023fc:	230d      	movs	r3, #13
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	483f      	ldr	r0, [pc, #252]	@ (8002504 <HAL_DCMI_MspInit+0x210>)
 8002408:	f004 fff6 	bl	80073f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800240c:	23c0      	movs	r3, #192	@ 0xc0
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800241c:	230d      	movs	r3, #13
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002424:	4619      	mov	r1, r3
 8002426:	4838      	ldr	r0, [pc, #224]	@ (8002508 <HAL_DCMI_MspInit+0x214>)
 8002428:	f004 ffe6 	bl	80073f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800242c:	2308      	movs	r3, #8
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800243c:	230d      	movs	r3, #13
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	4831      	ldr	r0, [pc, #196]	@ (800250c <HAL_DCMI_MspInit+0x218>)
 8002448:	f004 ffd6 	bl	80073f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800245c:	230d      	movs	r3, #13
 800245e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002464:	4619      	mov	r1, r3
 8002466:	482a      	ldr	r0, [pc, #168]	@ (8002510 <HAL_DCMI_MspInit+0x21c>)
 8002468:	f004 ffc6 	bl	80073f8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800246c:	4b29      	ldr	r3, [pc, #164]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 800246e:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_DCMI_MspInit+0x224>)
 8002470:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8002472:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 8002474:	224b      	movs	r2, #75	@ 0x4b
 8002476:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002478:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800247e:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002484:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 8002486:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800248a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800248c:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 800248e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002492:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 8002496:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800249a:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 800249e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024a2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024aa:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024ae:	2204      	movs	r2, #4
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024b2:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024b4:	2203      	movs	r2, #3
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80024b8:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80024c4:	4813      	ldr	r0, [pc, #76]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024c6:	f001 fc9d 	bl	8003e04 <HAL_DMA_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_DCMI_MspInit+0x1e0>
    {
      Error_Handler();
 80024d0:	f7ff fef0 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024d8:	649a      	str	r2, [r3, #72]	@ 0x48
 80024da:	4a0e      	ldr	r2, [pc, #56]	@ (8002514 <HAL_DCMI_MspInit+0x220>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	204e      	movs	r0, #78	@ 0x4e
 80024e6:	f001 f8f4 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80024ea:	204e      	movs	r0, #78	@ 0x4e
 80024ec:	f001 f90b 	bl	8003706 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80024f0:	bf00      	nop
 80024f2:	3738      	adds	r7, #56	@ 0x38
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	48020000 	.word	0x48020000
 80024fc:	58024400 	.word	0x58024400
 8002500:	58021000 	.word	0x58021000
 8002504:	58020000 	.word	0x58020000
 8002508:	58020800 	.word	0x58020800
 800250c:	58020c00 	.word	0x58020c00
 8002510:	58020400 	.word	0x58020400
 8002514:	24000350 	.word	0x24000350
 8002518:	40020010 	.word	0x40020010

0800251c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0ba      	sub	sp, #232	@ 0xe8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	22c0      	movs	r2, #192	@ 0xc0
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f016 fe70 	bl	8019222 <memset>
  if(hi2c->Instance==I2C2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a38      	ldr	r2, [pc, #224]	@ (8002628 <HAL_I2C_MspInit+0x10c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d169      	bne.n	8002620 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800254c:	f04f 0208 	mov.w	r2, #8
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8002558:	2302      	movs	r3, #2
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 12;
 800255c:	230c      	movs	r3, #12
 800255e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002560:	2302      	movs	r3, #2
 8002562:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002564:	2302      	movs	r3, #2
 8002566:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8002568:	2303      	movs	r3, #3
 800256a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800256c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002570:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002576:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800257c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002580:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f00b fdef 	bl	800e16c <HAL_RCCEx_PeriphCLKConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_MspInit+0x7c>
    {
      Error_Handler();
 8002594:	f7ff fe8e 	bl	80022b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_I2C_MspInit+0x110>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800259e:	4a23      	ldr	r2, [pc, #140]	@ (800262c <HAL_I2C_MspInit+0x110>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_I2C_MspInit+0x110>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025be:	2312      	movs	r3, #18
 80025c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025d0:	2304      	movs	r3, #4
 80025d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025da:	4619      	mov	r1, r3
 80025dc:	4814      	ldr	r0, [pc, #80]	@ (8002630 <HAL_I2C_MspInit+0x114>)
 80025de:	f004 ff0b 	bl	80073f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_I2C_MspInit+0x110>)
 80025e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025e8:	4a10      	ldr	r2, [pc, #64]	@ (800262c <HAL_I2C_MspInit+0x110>)
 80025ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <HAL_I2C_MspInit+0x110>)
 80025f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2021      	movs	r0, #33	@ 0x21
 8002606:	f001 f864 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800260a:	2021      	movs	r0, #33	@ 0x21
 800260c:	f001 f87b 	bl	8003706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2022      	movs	r0, #34	@ 0x22
 8002616:	f001 f85c 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800261a:	2022      	movs	r0, #34	@ 0x22
 800261c:	f001 f873 	bl	8003706 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002620:	bf00      	nop
 8002622:	37e8      	adds	r7, #232	@ 0xe8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40005800 	.word	0x40005800
 800262c:	58024400 	.word	0x58024400
 8002630:	58020400 	.word	0x58020400

08002634 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a55      	ldr	r2, [pc, #340]	@ (8002798 <HAL_JPEG_MspInit+0x164>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 80a3 	bne.w	800278e <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002648:	4b54      	ldr	r3, [pc, #336]	@ (800279c <HAL_JPEG_MspInit+0x168>)
 800264a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800264e:	4a53      	ldr	r2, [pc, #332]	@ (800279c <HAL_JPEG_MspInit+0x168>)
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002658:	4b50      	ldr	r3, [pc, #320]	@ (800279c <HAL_JPEG_MspInit+0x168>)
 800265a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8002666:	4b4e      	ldr	r3, [pc, #312]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 8002668:	4a4e      	ldr	r2, [pc, #312]	@ (80027a4 <HAL_JPEG_MspInit+0x170>)
 800266a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800266c:	4b4c      	ldr	r3, [pc, #304]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 800266e:	2211      	movs	r2, #17
 8002670:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8002672:	4b4b      	ldr	r3, [pc, #300]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002678:	4b49      	ldr	r3, [pc, #292]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 800267a:	2240      	movs	r2, #64	@ 0x40
 800267c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800267e:	4b48      	ldr	r3, [pc, #288]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8002684:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 8002686:	2202      	movs	r2, #2
 8002688:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800268a:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8002690:	4b43      	ldr	r3, [pc, #268]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8002696:	4b42      	ldr	r3, [pc, #264]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800269c:	4b40      	ldr	r3, [pc, #256]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 800269e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80026a4:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026a6:	2220      	movs	r2, #32
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80026aa:	4b3d      	ldr	r3, [pc, #244]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80026b0:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80026b6:	4b3a      	ldr	r3, [pc, #232]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80026bc:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80026c2:	4837      	ldr	r0, [pc, #220]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026c4:	f008 fee0 	bl	800b488 <HAL_MDMA_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80026ce:	f7ff fdf1 	bl	80022b4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	4832      	ldr	r0, [pc, #200]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026d8:	f008 ff22 	bl	800b520 <HAL_MDMA_ConfigPostRequestMask>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80026e2:	f7ff fde7 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2d      	ldr	r2, [pc, #180]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ec:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <HAL_JPEG_MspInit+0x16c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80026f2:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 80026f4:	4a2d      	ldr	r2, [pc, #180]	@ (80027ac <HAL_JPEG_MspInit+0x178>)
 80026f6:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 80026fa:	2214      	movs	r2, #20
 80026fc:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002704:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002706:	2240      	movs	r2, #64	@ 0x40
 8002708:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800270a:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8002716:	4b24      	ldr	r3, [pc, #144]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002718:	2208      	movs	r2, #8
 800271a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 800271e:	2220      	movs	r2, #32
 8002720:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 800272a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002732:	2204      	movs	r2, #4
 8002734:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002738:	2200      	movs	r2, #0
 800273a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8002742:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 800274a:	2200      	movs	r2, #0
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 800274e:	4816      	ldr	r0, [pc, #88]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002750:	f008 fe9a 	bl	800b488 <HAL_MDMA_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 800275a:	f7ff fdab 	bl	80022b4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	4811      	ldr	r0, [pc, #68]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002764:	f008 fedc 	bl	800b520 <HAL_MDMA_ConfigPostRequestMask>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800276e:	f7ff fda1 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 8002776:	635a      	str	r2, [r3, #52]	@ 0x34
 8002778:	4a0b      	ldr	r2, [pc, #44]	@ (80027a8 <HAL_JPEG_MspInit+0x174>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2079      	movs	r0, #121	@ 0x79
 8002784:	f000 ffa5 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002788:	2079      	movs	r0, #121	@ 0x79
 800278a:	f000 ffbc 	bl	8003706 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	52003000 	.word	0x52003000
 800279c:	58024400 	.word	0x58024400
 80027a0:	24000474 	.word	0x24000474
 80027a4:	52000040 	.word	0x52000040
 80027a8:	240004e0 	.word	0x240004e0
 80027ac:	52000080 	.word	0x52000080

080027b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0bc      	sub	sp, #240	@ 0xf0
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	22c0      	movs	r2, #192	@ 0xc0
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f016 fd26 	bl	8019222 <memset>
  if(hspi->Instance==SPI2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a38      	ldr	r2, [pc, #224]	@ (80028bc <HAL_SPI_MspInit+0x10c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d169      	bne.n	80028b4 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80027e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027f0:	f107 0318 	add.w	r3, r7, #24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f00b fcb9 	bl	800e16c <HAL_RCCEx_PeriphCLKConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002800:	f7ff fd58 	bl	80022b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002804:	4b2e      	ldr	r3, [pc, #184]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280a:	4a2d      	ldr	r2, [pc, #180]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002810:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002822:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002828:	4a25      	ldr	r2, [pc, #148]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002832:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	4b1f      	ldr	r3, [pc, #124]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002846:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_SPI_MspInit+0x110>)
 8002852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800285e:	2306      	movs	r3, #6
 8002860:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002876:	2305      	movs	r3, #5
 8002878:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002880:	4619      	mov	r1, r3
 8002882:	4810      	ldr	r0, [pc, #64]	@ (80028c4 <HAL_SPI_MspInit+0x114>)
 8002884:	f004 fdb8 	bl	80073f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800288c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028a2:	2305      	movs	r3, #5
 80028a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028ac:	4619      	mov	r1, r3
 80028ae:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <HAL_SPI_MspInit+0x118>)
 80028b0:	f004 fda2 	bl	80073f8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80028b4:	bf00      	nop
 80028b6:	37f0      	adds	r7, #240	@ 0xf0
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40003800 	.word	0x40003800
 80028c0:	58024400 	.word	0x58024400
 80028c4:	58020800 	.word	0x58020800
 80028c8:	58020400 	.word	0x58020400

080028cc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <HAL_TIM_PWM_MspInit+0xbc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10f      	bne.n	80028fe <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028de:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 80028e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e4:	4a29      	ldr	r2, [pc, #164]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ee:	4b27      	ldr	r3, [pc, #156]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 80028f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028fc:	e03d      	b.n	800297a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002906:	d10f      	bne.n	8002928 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002908:	4b20      	ldr	r3, [pc, #128]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 800290a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800290e:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002918:	4b1c      	ldr	r3, [pc, #112]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 800291a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
}
 8002926:	e028      	b.n	800297a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_TIM_PWM_MspInit+0xc4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10f      	bne.n	8002952 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002932:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 8002934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002938:	4a14      	ldr	r2, [pc, #80]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 8002944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	e013      	b.n	800297a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a0f      	ldr	r2, [pc, #60]	@ (8002994 <HAL_TIM_PWM_MspInit+0xc8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10e      	bne.n	800297a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 800295e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800296c:	4b07      	ldr	r3, [pc, #28]	@ (800298c <HAL_TIM_PWM_MspInit+0xc0>)
 800296e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	58024400 	.word	0x58024400
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800

08002998 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a1c <HAL_TIM_Base_MspInit+0x84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d117      	bne.n	80029da <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_TIM_Base_MspInit+0x88>)
 80029ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <HAL_TIM_Base_MspInit+0x88>)
 80029b2:	f043 0308 	orr.w	r3, r3, #8
 80029b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ba:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_TIM_Base_MspInit+0x88>)
 80029bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	2032      	movs	r0, #50	@ 0x32
 80029ce:	f000 fe80 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029d2:	2032      	movs	r0, #50	@ 0x32
 80029d4:	f000 fe97 	bl	8003706 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80029d8:	e01b      	b.n	8002a12 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a11      	ldr	r2, [pc, #68]	@ (8002a24 <HAL_TIM_Base_MspInit+0x8c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d116      	bne.n	8002a12 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <HAL_TIM_Base_MspInit+0x88>)
 80029e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <HAL_TIM_Base_MspInit+0x88>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_TIM_Base_MspInit+0x88>)
 80029f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	202d      	movs	r0, #45	@ 0x2d
 8002a08:	f000 fe63 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002a0c:	202d      	movs	r0, #45	@ 0x2d
 8002a0e:	f000 fe7a 	bl	8003706 <HAL_NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	58024400 	.word	0x58024400
 8002a24:	40002000 	.word	0x40002000

08002a28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	@ 0x30
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5d      	ldr	r2, [pc, #372]	@ (8002bbc <HAL_TIM_MspPostInit+0x194>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d120      	bne.n	8002a8c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a50:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a5a:	4b59      	ldr	r3, [pc, #356]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	484f      	ldr	r0, [pc, #316]	@ (8002bc4 <HAL_TIM_MspPostInit+0x19c>)
 8002a86:	f004 fcb7 	bl	80073f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002a8a:	e093      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a94:	d11f      	bne.n	8002ad6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9c:	4a48      	ldr	r2, [pc, #288]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aa6:	4b46      	ldr	r3, [pc, #280]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002ab4:	2307      	movs	r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	483e      	ldr	r0, [pc, #248]	@ (8002bc8 <HAL_TIM_MspPostInit+0x1a0>)
 8002ad0:	f004 fc92 	bl	80073f8 <HAL_GPIO_Init>
}
 8002ad4:	e06e      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3c      	ldr	r2, [pc, #240]	@ (8002bcc <HAL_TIM_MspPostInit+0x1a4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d11f      	bne.n	8002b20 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4b37      	ldr	r3, [pc, #220]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae6:	4a36      	ldr	r2, [pc, #216]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002afe:	2303      	movs	r3, #3
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	482d      	ldr	r0, [pc, #180]	@ (8002bd0 <HAL_TIM_MspPostInit+0x1a8>)
 8002b1a:	f004 fc6d 	bl	80073f8 <HAL_GPIO_Init>
}
 8002b1e:	e049      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM4)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd4 <HAL_TIM_MspPostInit+0x1ac>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d120      	bne.n	8002b6c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b30:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b3a:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	4619      	mov	r1, r3
 8002b64:	481a      	ldr	r0, [pc, #104]	@ (8002bd0 <HAL_TIM_MspPostInit+0x1a8>)
 8002b66:	f004 fc47 	bl	80073f8 <HAL_GPIO_Init>
}
 8002b6a:	e023      	b.n	8002bb4 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM14)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <HAL_TIM_MspPostInit+0x1b0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d11e      	bne.n	8002bb4 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b7c:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b86:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_TIM_MspPostInit+0x198>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002ba4:	2309      	movs	r3, #9
 8002ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4806      	ldr	r0, [pc, #24]	@ (8002bc8 <HAL_TIM_MspPostInit+0x1a0>)
 8002bb0:	f004 fc22 	bl	80073f8 <HAL_GPIO_Init>
}
 8002bb4:	bf00      	nop
 8002bb6:	3730      	adds	r7, #48	@ 0x30
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	58021000 	.word	0x58021000
 8002bc8:	58020000 	.word	0x58020000
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	58020400 	.word	0x58020400
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40002000 	.word	0x40002000

08002bdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0ba      	sub	sp, #232	@ 0xe8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	22c0      	movs	r2, #192	@ 0xc0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f016 fb10 	bl	8019222 <memset>
  if(huart->Instance==USART1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a43      	ldr	r2, [pc, #268]	@ (8002d14 <HAL_UART_MspInit+0x138>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d17e      	bne.n	8002d0a <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c0c:	f04f 0201 	mov.w	r2, #1
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1e:	f107 0310 	add.w	r3, r7, #16
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00b faa2 	bl	800e16c <HAL_RCCEx_PeriphCLKConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c2e:	f7ff fb41 	bl	80022b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c32:	4b39      	ldr	r3, [pc, #228]	@ (8002d18 <HAL_UART_MspInit+0x13c>)
 8002c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c38:	4a37      	ldr	r2, [pc, #220]	@ (8002d18 <HAL_UART_MspInit+0x13c>)
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
 8002c3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c42:	4b35      	ldr	r3, [pc, #212]	@ (8002d18 <HAL_UART_MspInit+0x13c>)
 8002c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c50:	4b31      	ldr	r3, [pc, #196]	@ (8002d18 <HAL_UART_MspInit+0x13c>)
 8002c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c56:	4a30      	ldr	r2, [pc, #192]	@ (8002d18 <HAL_UART_MspInit+0x13c>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c60:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <HAL_UART_MspInit+0x13c>)
 8002c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c6e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4821      	ldr	r0, [pc, #132]	@ (8002d1c <HAL_UART_MspInit+0x140>)
 8002c96:	f004 fbaf 	bl	80073f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002c9a:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002c9c:	4a21      	ldr	r2, [pc, #132]	@ (8002d24 <HAL_UART_MspInit+0x148>)
 8002c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002ca2:	2229      	movs	r2, #41	@ 0x29
 8002ca4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cb8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cba:	4b19      	ldr	r3, [pc, #100]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc0:	4b17      	ldr	r3, [pc, #92]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002cc6:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ccc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cce:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cd0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd6:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cdc:	4810      	ldr	r0, [pc, #64]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cde:	f001 f891 	bl	8003e04 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002ce8:	f7ff fae4 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <HAL_UART_MspInit+0x144>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2025      	movs	r0, #37	@ 0x25
 8002d00:	f000 fce7 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d04:	2025      	movs	r0, #37	@ 0x25
 8002d06:	f000 fcfe 	bl	8003706 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d0a:	bf00      	nop
 8002d0c:	37e8      	adds	r7, #232	@ 0xe8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40011000 	.word	0x40011000
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58020400 	.word	0x58020400
 8002d20:	24000830 	.word	0x24000830
 8002d24:	40020410 	.word	0x40020410

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <NMI_Handler+0x4>

08002d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <HardFault_Handler+0x4>

08002d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <MemManage_Handler+0x4>

08002d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <BusFault_Handler+0x4>

08002d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <UsageFault_Handler+0x4>

08002d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7e:	f000 fb7d 	bl	800347c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <DMA1_Stream0_IRQHandler+0x10>)
 8002d8e:	f002 fb63 	bl	8005458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	24000350 	.word	0x24000350

08002d9c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002da0:	4802      	ldr	r0, [pc, #8]	@ (8002dac <I2C2_EV_IRQHandler+0x10>)
 8002da2:	f004 ff9d 	bl	8007ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	240003c8 	.word	0x240003c8

08002db0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002db4:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <I2C2_ER_IRQHandler+0x10>)
 8002db6:	f004 ffad 	bl	8007d14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	240003c8 	.word	0x240003c8

08002dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <USART1_IRQHandler+0x10>)
 8002dca:	f00f fa71 	bl	80122b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2400079c 	.word	0x2400079c

08002dd8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002dde:	f00e f893 	bl	8010f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	24000750 	.word	0x24000750

08002dec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 8002df0:	f7fe fae2 	bl	80013b8 <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002df4:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <TIM5_IRQHandler+0x14>)
 8002df6:	f00e f887 	bl	8010f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	24000704 	.word	0x24000704

08002e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e08:	4802      	ldr	r0, [pc, #8]	@ (8002e14 <DMA2_Stream0_IRQHandler+0x10>)
 8002e0a:	f002 fb25 	bl	8005458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	24000830 	.word	0x24000830

08002e18 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <DCMI_IRQHandler+0x10>)
 8002e1e:	f000 fea1 	bl	8003b64 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	24000300 	.word	0x24000300

08002e2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <OTG_FS_IRQHandler+0x10>)
 8002e32:	f009 f80c 	bl	800be4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2402724c 	.word	0x2402724c

08002e40 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <JPEG_IRQHandler+0x10>)
 8002e46:	f006 fd28 	bl	800989a <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2400041c 	.word	0x2400041c

08002e54 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002e58:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <MDMA_IRQHandler+0x14>)
 8002e5a:	f008 fc5b 	bl	800b714 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002e5e:	4803      	ldr	r0, [pc, #12]	@ (8002e6c <MDMA_IRQHandler+0x18>)
 8002e60:	f008 fc58 	bl	800b714 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	24000474 	.word	0x24000474
 8002e6c:	240004e0 	.word	0x240004e0

08002e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return 1;
 8002e74:	2301      	movs	r3, #1
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_kill>:

int _kill(int pid, int sig)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e8a:	f016 fa2d 	bl	80192e8 <__errno>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2216      	movs	r2, #22
 8002e92:	601a      	str	r2, [r3, #0]
  return -1;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_exit>:

void _exit (int status)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ffe7 	bl	8002e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eb2:	bf00      	nop
 8002eb4:	e7fd      	b.n	8002eb2 <_exit+0x12>

08002eb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e00a      	b.n	8002ede <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ec8:	f3af 8000 	nop.w
 8002ecc:	4601      	mov	r1, r0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	60ba      	str	r2, [r7, #8]
 8002ed4:	b2ca      	uxtb	r2, r1
 8002ed6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	dbf0      	blt.n	8002ec8 <_read+0x12>
  }

  return len;
 8002ee6:	687b      	ldr	r3, [r7, #4]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e009      	b.n	8002f16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	60ba      	str	r2, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	dbf1      	blt.n	8002f02 <_write+0x12>
  }
  return len;
 8002f1e:	687b      	ldr	r3, [r7, #4]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_close>:

int _close(int file)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f50:	605a      	str	r2, [r3, #4]
  return 0;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_isatty>:

int _isatty(int file)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f98:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <_sbrk+0x5c>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <_sbrk+0x60>)
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <_sbrk+0x64>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <_sbrk+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d207      	bcs.n	8002fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc0:	f016 f992 	bl	80192e8 <__errno>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e009      	b.n	8002fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <_sbrk+0x64>)
 8002fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	24080000 	.word	0x24080000
 8002ff0:	00000400 	.word	0x00000400
 8002ff4:	24025d60 	.word	0x24025d60
 8002ff8:	24027aa0 	.word	0x24027aa0

08002ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003000:	4b43      	ldr	r3, [pc, #268]	@ (8003110 <SystemInit+0x114>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	4a42      	ldr	r2, [pc, #264]	@ (8003110 <SystemInit+0x114>)
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800300c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003010:	4b40      	ldr	r3, [pc, #256]	@ (8003114 <SystemInit+0x118>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	2b06      	cmp	r3, #6
 800301a:	d807      	bhi.n	800302c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800301c:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <SystemInit+0x118>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 030f 	bic.w	r3, r3, #15
 8003024:	4a3b      	ldr	r2, [pc, #236]	@ (8003114 <SystemInit+0x118>)
 8003026:	f043 0307 	orr.w	r3, r3, #7
 800302a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800302c:	4b3a      	ldr	r3, [pc, #232]	@ (8003118 <SystemInit+0x11c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a39      	ldr	r2, [pc, #228]	@ (8003118 <SystemInit+0x11c>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003038:	4b37      	ldr	r3, [pc, #220]	@ (8003118 <SystemInit+0x11c>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800303e:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <SystemInit+0x11c>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4935      	ldr	r1, [pc, #212]	@ (8003118 <SystemInit+0x11c>)
 8003044:	4b35      	ldr	r3, [pc, #212]	@ (800311c <SystemInit+0x120>)
 8003046:	4013      	ands	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800304a:	4b32      	ldr	r3, [pc, #200]	@ (8003114 <SystemInit+0x118>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003056:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <SystemInit+0x118>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 030f 	bic.w	r3, r3, #15
 800305e:	4a2d      	ldr	r2, [pc, #180]	@ (8003114 <SystemInit+0x118>)
 8003060:	f043 0307 	orr.w	r3, r3, #7
 8003064:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003066:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <SystemInit+0x11c>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800306c:	4b2a      	ldr	r3, [pc, #168]	@ (8003118 <SystemInit+0x11c>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003072:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <SystemInit+0x11c>)
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003078:	4b27      	ldr	r3, [pc, #156]	@ (8003118 <SystemInit+0x11c>)
 800307a:	4a29      	ldr	r2, [pc, #164]	@ (8003120 <SystemInit+0x124>)
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <SystemInit+0x11c>)
 8003080:	4a28      	ldr	r2, [pc, #160]	@ (8003124 <SystemInit+0x128>)
 8003082:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003084:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <SystemInit+0x11c>)
 8003086:	4a28      	ldr	r2, [pc, #160]	@ (8003128 <SystemInit+0x12c>)
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800308a:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <SystemInit+0x11c>)
 800308c:	2200      	movs	r2, #0
 800308e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003090:	4b21      	ldr	r3, [pc, #132]	@ (8003118 <SystemInit+0x11c>)
 8003092:	4a25      	ldr	r2, [pc, #148]	@ (8003128 <SystemInit+0x12c>)
 8003094:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003096:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <SystemInit+0x11c>)
 8003098:	2200      	movs	r2, #0
 800309a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800309c:	4b1e      	ldr	r3, [pc, #120]	@ (8003118 <SystemInit+0x11c>)
 800309e:	4a22      	ldr	r2, [pc, #136]	@ (8003128 <SystemInit+0x12c>)
 80030a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80030a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <SystemInit+0x11c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <SystemInit+0x11c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003118 <SystemInit+0x11c>)
 80030ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030b4:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <SystemInit+0x11c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80030ba:	4b1c      	ldr	r3, [pc, #112]	@ (800312c <SystemInit+0x130>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <SystemInit+0x134>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030c6:	d202      	bcs.n	80030ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003134 <SystemInit+0x138>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <SystemInit+0x11c>)
 80030d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d113      	bne.n	8003104 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80030dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <SystemInit+0x11c>)
 80030de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <SystemInit+0x11c>)
 80030e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <SystemInit+0x13c>)
 80030ee:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80030f2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <SystemInit+0x11c>)
 80030f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80030fa:	4a07      	ldr	r2, [pc, #28]	@ (8003118 <SystemInit+0x11c>)
 80030fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003100:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	52002000 	.word	0x52002000
 8003118:	58024400 	.word	0x58024400
 800311c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003120:	02020200 	.word	0x02020200
 8003124:	01ff0000 	.word	0x01ff0000
 8003128:	01010280 	.word	0x01010280
 800312c:	5c001000 	.word	0x5c001000
 8003130:	ffff0000 	.word	0xffff0000
 8003134:	51008108 	.word	0x51008108
 8003138:	52004000 	.word	0x52004000

0800313c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <ExitRun0Mode+0x2c>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <ExitRun0Mode+0x2c>)
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800314c:	bf00      	nop
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <ExitRun0Mode+0x2c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f9      	beq.n	800314e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	58024800 	.word	0x58024800

0800316c <Reset_Handler>:
 800316c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80031a8 <LoopFillZerobss+0xe>
 8003170:	f7ff ffe4 	bl	800313c <ExitRun0Mode>
 8003174:	f7ff ff42 	bl	8002ffc <SystemInit>
 8003178:	480c      	ldr	r0, [pc, #48]	@ (80031ac <LoopFillZerobss+0x12>)
 800317a:	490d      	ldr	r1, [pc, #52]	@ (80031b0 <LoopFillZerobss+0x16>)
 800317c:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <LoopFillZerobss+0x1a>)
 800317e:	2300      	movs	r3, #0
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:
 8003182:	58d4      	ldr	r4, [r2, r3]
 8003184:	50c4      	str	r4, [r0, r3]
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:
 8003188:	18c4      	adds	r4, r0, r3
 800318a:	428c      	cmp	r4, r1
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <LoopFillZerobss+0x1e>)
 8003190:	4c0a      	ldr	r4, [pc, #40]	@ (80031bc <LoopFillZerobss+0x22>)
 8003192:	2300      	movs	r3, #0
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:
 800319a:	42a2      	cmp	r2, r4
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>
 800319e:	f016 f8a9 	bl	80192f4 <__libc_init_array>
 80031a2:	f7fd faa1 	bl	80006e8 <main>
 80031a6:	4770      	bx	lr
 80031a8:	24080000 	.word	0x24080000
 80031ac:	24000000 	.word	0x24000000
 80031b0:	240002e4 	.word	0x240002e4
 80031b4:	0801ba7c 	.word	0x0801ba7c
 80031b8:	240002e4 	.word	0x240002e4
 80031bc:	24027a9c 	.word	0x24027a9c

080031c0 <ADC3_IRQHandler>:
 80031c0:	e7fe      	b.n	80031c0 <ADC3_IRQHandler>

080031c2 <INA229_ReadRegister>:
// ------------------------------------------------------------------------------------

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t INA229_ReadRegister(INA229_HandleTypeDef *ina229, uint8_t addr, uint8_t *pRead, uint8_t len) {
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	461a      	mov	r2, r3
 80031ce:	460b      	mov	r3, r1
 80031d0:	72fb      	strb	r3, [r7, #11]
 80031d2:	4613      	mov	r3, r2
 80031d4:	72bb      	strb	r3, [r7, #10]
	// A5 A4 A3 A2 A1 A0 XX RR
	uint8_t dataToWrite = (addr << 2) | 0b1;
 80031d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	75bb      	strb	r3, [r7, #22]
	uint8_t ret = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	75fb      	strb	r3, [r7, #23]

	// Assert the CS low
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_RESET);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6858      	ldr	r0, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	891b      	ldrh	r3, [r3, #8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	4619      	mov	r1, r3
 80031f8:	f004 faae 	bl	8007758 <HAL_GPIO_WritePin>

	ret = HAL_SPI_Transmit(ina229->spi_handle, &dataToWrite, 1, 100);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	f107 0116 	add.w	r1, r7, #22
 8003204:	2364      	movs	r3, #100	@ 0x64
 8003206:	2201      	movs	r2, #1
 8003208:	f00c ff00 	bl	801000c <HAL_SPI_Transmit>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <INA229_ReadRegister+0x68>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6858      	ldr	r0, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	891b      	ldrh	r3, [r3, #8]
 800321e:	2201      	movs	r2, #1
 8003220:	4619      	mov	r1, r3
 8003222:	f004 fa99 	bl	8007758 <HAL_GPIO_WritePin>
		return ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e01f      	b.n	800326a <INA229_ReadRegister+0xa8>
	}

	ret = HAL_SPI_Receive(ina229->spi_handle, pRead, len, 100);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	7abb      	ldrb	r3, [r7, #10]
 8003230:	b29a      	uxth	r2, r3
 8003232:	2364      	movs	r3, #100	@ 0x64
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	f00d f8d7 	bl	80103e8 <HAL_SPI_Receive>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]
	if (ret) {
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <INA229_ReadRegister+0x96>
		// Release the CS
		HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6858      	ldr	r0, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	891b      	ldrh	r3, [r3, #8]
 800324c:	2201      	movs	r2, #1
 800324e:	4619      	mov	r1, r3
 8003250:	f004 fa82 	bl	8007758 <HAL_GPIO_WritePin>
		return  ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e008      	b.n	800326a <INA229_ReadRegister+0xa8>
	}

	// Release the CS
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6858      	ldr	r0, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	891b      	ldrh	r3, [r3, #8]
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	f004 fa78 	bl	8007758 <HAL_GPIO_WritePin>

	return SUCCESS;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <INA229_Init>:
	HAL_GPIO_WritePin(ina229->cs_gpio_handle, ina229->cs_gpio_pin, GPIO_PIN_SET);

	return SUCCESS;
}

uint8_t INA229_Init(INA229_HandleTypeDef *ina229) {
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
	// SHUNT_CAL = 0x1000 at start, this is correct for R_shunt of 0.002 OHMs

	//uint8_t readVal[2];
	//INA229_ReadRegister(ina229, 0x01, readVal, 2);

	return SUCCESS;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <Register24_Int32>:

uint32_t Register24_Int32(uint8_t* pData) {
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	uint32_t out = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
	// Switch endianess from result
	out |= (uint32_t)(pData[2]);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3302      	adds	r3, #2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[1]) << 8;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3301      	adds	r3, #1
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
	out |= (uint32_t)(pData[0]) << 16;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

	return out;
 80032bc:	68fb      	ldr	r3, [r7, #12]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	0000      	movs	r0, r0
 80032cc:	0000      	movs	r0, r0
	...

080032d0 <INA229_Get>:

uint8_t INA229_Get(INA229_HandleTypeDef *ina229) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	// Get all the power variables
	uint8_t ret = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]

	// ----- VOLTAGE ----- //

	// Get the VBUS register value, 24 bit
	uint8_t vbus_reg[3];
	ret = INA229_ReadRegister(ina229, 0x05, vbus_reg, 3);
 80032dc:	f107 020c 	add.w	r2, r7, #12
 80032e0:	2303      	movs	r3, #3
 80032e2:	2105      	movs	r1, #5
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff6c 	bl	80031c2 <INA229_ReadRegister>
 80032ea:	4603      	mov	r3, r0
 80032ec:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t vbus_raw = Register24_Int32(vbus_reg);
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ffc8 	bl	8003288 <Register24_Int32>
 80032f8:	61b8      	str	r0, [r7, #24]
	vbus_raw >>= 4;	// Shift out the reserved bits
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	61bb      	str	r3, [r7, #24]

	// Conversion factor
	ina229->voltage = vbus_raw * 0.0001953125;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800330a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8003388 <INA229_Get+0xb8>
 800330e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	edc3 7a03 	vstr	s15, [r3, #12]

	// ----- CURRENT ----- //

	// Get the VBUS register value, 24 bit
	uint8_t cur_reg[3];
	ret = INA229_ReadRegister(ina229, 0x07, cur_reg, 3);
 800331c:	f107 0208 	add.w	r2, r7, #8
 8003320:	2303      	movs	r3, #3
 8003322:	2107      	movs	r1, #7
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff4c 	bl	80031c2 <INA229_ReadRegister>
 800332a:	4603      	mov	r3, r0
 800332c:	77fb      	strb	r3, [r7, #31]

	// Covnert register raw to uint
	uint32_t cur_raw = Register24_Int32(cur_reg);
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ffa8 	bl	8003288 <Register24_Int32>
 8003338:	6178      	str	r0, [r7, #20]

	int32_t cur_signed = (cur_raw << 8) | 0b111111111111;	// Pad LSBs with 1's for 2's compliment to be acurate
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	021a      	lsls	r2, r3, #8
 800333e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
	cur_signed /= 4096;										// Shift out the reserved bits while respecting negativity (equiv. >> 12)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	da01      	bge.n	8003350 <INA229_Get+0x80>
 800334c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003350:	131b      	asrs	r3, r3, #12
 8003352:	613b      	str	r3, [r7, #16]

	// Conversion factor
	ina229->current = cur_signed * 0.00015625;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800335e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8003390 <INA229_Get+0xc0>
 8003362:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003366:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	edc3 7a04 	vstr	s15, [r3, #16]

	if (ret) return ret;
 8003370:	7ffb      	ldrb	r3, [r7, #31]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <INA229_Get+0xaa>
 8003376:	7ffb      	ldrb	r3, [r7, #31]
 8003378:	e7ff      	b.n	800337a <INA229_Get+0xaa>
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	f3af 8000 	nop.w
 8003388:	9999999a 	.word	0x9999999a
 800338c:	3f299999 	.word	0x3f299999
 8003390:	47ae147b 	.word	0x47ae147b
 8003394:	3f247ae1 	.word	0x3f247ae1

08003398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339e:	2003      	movs	r0, #3
 80033a0:	f000 f98c 	bl	80036bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033a4:	f00a fd0c 	bl	800ddc0 <HAL_RCC_GetSysClockFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_Init+0x68>)
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	4913      	ldr	r1, [pc, #76]	@ (8003404 <HAL_Init+0x6c>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_Init+0x68>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003404 <HAL_Init+0x6c>)
 80033cc:	5cd3      	ldrb	r3, [r2, r3]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003408 <HAL_Init+0x70>)
 80033da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033dc:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <HAL_Init+0x74>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033e2:	200f      	movs	r0, #15
 80033e4:	f000 f814 	bl	8003410 <HAL_InitTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e002      	b.n	80033f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033f2:	f7fe ff65 	bl	80022c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	58024400 	.word	0x58024400
 8003404:	0801b400 	.word	0x0801b400
 8003408:	2400001c 	.word	0x2400001c
 800340c:	24000018 	.word	0x24000018

08003410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003418:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_InitTick+0x60>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e021      	b.n	8003468 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003424:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <HAL_InitTick+0x64>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b11      	ldr	r3, [pc, #68]	@ (8003470 <HAL_InitTick+0x60>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003432:	fbb3 f3f1 	udiv	r3, r3, r1
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f971 	bl	8003722 <HAL_SYSTICK_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e00e      	b.n	8003468 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b0f      	cmp	r3, #15
 800344e:	d80a      	bhi.n	8003466 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003450:	2200      	movs	r2, #0
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f000 f93b 	bl	80036d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800345c:	4a06      	ldr	r2, [pc, #24]	@ (8003478 <HAL_InitTick+0x68>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	24000024 	.word	0x24000024
 8003474:	24000018 	.word	0x24000018
 8003478:	24000020 	.word	0x24000020

0800347c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <HAL_IncTick+0x20>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <HAL_IncTick+0x24>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4413      	add	r3, r2
 800348c:	4a04      	ldr	r2, [pc, #16]	@ (80034a0 <HAL_IncTick+0x24>)
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	24000024 	.word	0x24000024
 80034a0:	24025d64 	.word	0x24025d64

080034a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return uwTick;
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_GetTick+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	24025d64 	.word	0x24025d64

080034bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c4:	f7ff ffee 	bl	80034a4 <HAL_GetTick>
 80034c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d005      	beq.n	80034e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <HAL_Delay+0x44>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034e2:	bf00      	nop
 80034e4:	f7ff ffde 	bl	80034a4 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d8f7      	bhi.n	80034e4 <HAL_Delay+0x28>
  {
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	24000024 	.word	0x24000024

08003504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <HAL_GetREVID+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0c1b      	lsrs	r3, r3, #16
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	5c001000 	.word	0x5c001000

0800351c <__NVIC_SetPriorityGrouping>:
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800352c:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <__NVIC_SetPriorityGrouping+0x40>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003538:	4013      	ands	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	4313      	orrs	r3, r2
 8003548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354a:	4a04      	ldr	r2, [pc, #16]	@ (800355c <__NVIC_SetPriorityGrouping+0x40>)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	60d3      	str	r3, [r2, #12]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00
 8003560:	05fa0000 	.word	0x05fa0000

08003564 <__NVIC_GetPriorityGrouping>:
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003568:	4b04      	ldr	r3, [pc, #16]	@ (800357c <__NVIC_GetPriorityGrouping+0x18>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	f003 0307 	and.w	r3, r3, #7
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_EnableIRQ>:
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800358a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800358e:	2b00      	cmp	r3, #0
 8003590:	db0b      	blt.n	80035aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	4907      	ldr	r1, [pc, #28]	@ (80035b8 <__NVIC_EnableIRQ+0x38>)
 800359a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2001      	movs	r0, #1
 80035a2:	fa00 f202 	lsl.w	r2, r0, r2
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000e100 	.word	0xe000e100

080035bc <__NVIC_SetPriority>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db0a      	blt.n	80035e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	490c      	ldr	r1, [pc, #48]	@ (8003608 <__NVIC_SetPriority+0x4c>)
 80035d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	440b      	add	r3, r1
 80035e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035e4:	e00a      	b.n	80035fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4908      	ldr	r1, [pc, #32]	@ (800360c <__NVIC_SetPriority+0x50>)
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	3b04      	subs	r3, #4
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	440b      	add	r3, r1
 80035fa:	761a      	strb	r2, [r3, #24]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000e100 	.word	0xe000e100
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <NVIC_EncodePriority>:
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	@ 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f1c3 0307 	rsb	r3, r3, #7
 800362a:	2b04      	cmp	r3, #4
 800362c:	bf28      	it	cs
 800362e:	2304      	movcs	r3, #4
 8003630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3304      	adds	r3, #4
 8003636:	2b06      	cmp	r3, #6
 8003638:	d902      	bls.n	8003640 <NVIC_EncodePriority+0x30>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3b03      	subs	r3, #3
 800363e:	e000      	b.n	8003642 <NVIC_EncodePriority+0x32>
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43da      	mvns	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	401a      	ands	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003658:	f04f 31ff 	mov.w	r1, #4294967295
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	43d9      	mvns	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	4313      	orrs	r3, r2
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	@ 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003688:	d301      	bcc.n	800368e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800368a:	2301      	movs	r3, #1
 800368c:	e00f      	b.n	80036ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800368e:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <SysTick_Config+0x40>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003696:	210f      	movs	r1, #15
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	f7ff ff8e 	bl	80035bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <SysTick_Config+0x40>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <SysTick_Config+0x40>)
 80036a8:	2207      	movs	r2, #7
 80036aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000e010 	.word	0xe000e010

080036bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff29 	bl	800351c <__NVIC_SetPriorityGrouping>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036e0:	f7ff ff40 	bl	8003564 <__NVIC_GetPriorityGrouping>
 80036e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7ff ff90 	bl	8003610 <NVIC_EncodePriority>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff5f 	bl	80035bc <__NVIC_SetPriority>
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff33 	bl	8003580 <__NVIC_EnableIRQ>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ffa4 	bl	8003678 <SysTick_Config>
 8003730:	4603      	mov	r3, r0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003740:	f3bf 8f5f 	dmb	sy
}
 8003744:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <HAL_MPU_Disable+0x28>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	4a06      	ldr	r2, [pc, #24]	@ (8003764 <HAL_MPU_Disable+0x28>)
 800374c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003750:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_MPU_Disable+0x2c>)
 8003754:	2200      	movs	r2, #0
 8003756:	605a      	str	r2, [r3, #4]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	e000ed90 	.word	0xe000ed90

0800376c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003774:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <HAL_MPU_Enable+0x38>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_MPU_Enable+0x3c>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <HAL_MPU_Enable+0x3c>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800378a:	f3bf 8f4f 	dsb	sy
}
 800378e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003790:	f3bf 8f6f 	isb	sy
}
 8003794:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed90 	.word	0xe000ed90
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	785a      	ldrb	r2, [r3, #1]
 80037b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <HAL_MPU_ConfigRegion+0x7c>)
 80037ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80037bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <HAL_MPU_ConfigRegion+0x7c>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_MPU_ConfigRegion+0x7c>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80037c8:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <HAL_MPU_ConfigRegion+0x7c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7b1b      	ldrb	r3, [r3, #12]
 80037d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7adb      	ldrb	r3, [r3, #11]
 80037da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7a9b      	ldrb	r3, [r3, #10]
 80037e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7b5b      	ldrb	r3, [r3, #13]
 80037ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7b9b      	ldrb	r3, [r3, #14]
 80037f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7bdb      	ldrb	r3, [r3, #15]
 80037fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80037fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7a5b      	ldrb	r3, [r3, #9]
 8003802:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003804:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7a1b      	ldrb	r3, [r3, #8]
 800380a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800380c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003816:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003818:	6113      	str	r3, [r2, #16]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed90 	.word	0xe000ed90

0800382c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e069      	b.n	8003912 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fe fd52 	bl	80022f4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b2a      	ldr	r3, [pc, #168]	@ (800391c <HAL_DCMI_Init+0xf0>)
 8003872:	400b      	ands	r3, r1
 8003874:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800388a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003896:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80038a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80038ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80038ba:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d112      	bne.n	80038f2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7f1b      	ldrb	r3, [r3, #28]
 80038d0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7f5b      	ldrb	r3, [r3, #29]
 80038d6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038d8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7f9b      	ldrb	r3, [r3, #30]
 80038de:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80038e0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7fdb      	ldrb	r3, [r3, #31]
 80038e8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80038ee:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80038f0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 021e 	orr.w	r2, r2, #30
 8003900:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	ffe0f007 	.word	0xffe0f007

08003920 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_DCMI_Start_DMA+0x1c>
 8003938:	2302      	movs	r3, #2
 800393a:	e0ab      	b.n	8003a94 <HAL_DCMI_Start_DMA+0x174>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800395a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0202 	bic.w	r2, r2, #2
 800396a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003980:	4a46      	ldr	r2, [pc, #280]	@ (8003a9c <HAL_DCMI_Start_DMA+0x17c>)
 8003982:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003988:	4a45      	ldr	r2, [pc, #276]	@ (8003aa0 <HAL_DCMI_Start_DMA+0x180>)
 800398a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003990:	2200      	movs	r2, #0
 8003992:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d219      	bcs.n	80039e8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3328      	adds	r3, #40	@ 0x28
 80039be:	4619      	mov	r1, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	f000 fd7a 	bl	80044bc <HAL_DMA_Start_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d055      	beq.n	8003a7a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2240      	movs	r2, #64	@ 0x40
 80039d2:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e055      	b.n	8003a94 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ec:	4a2b      	ldr	r2, [pc, #172]	@ (8003a9c <HAL_DCMI_Start_DMA+0x17c>)
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8003a02:	e009      	b.n	8003a18 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a08:	085a      	lsrs	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	005a      	lsls	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a20:	d2f0      	bcs.n	8003a04 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	1e9a      	subs	r2, r3, #2
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3328      	adds	r3, #40	@ 0x28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	f003 f81f 	bl	8006a98 <HAL_DMAEx_MultiBufferStart_IT>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00c      	b.n	8003a94 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	08003ca5 	.word	0x08003ca5
 8003aa0:	08003dcb 	.word	0x08003dcb

08003aa4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003aac:	4b2b      	ldr	r3, [pc, #172]	@ (8003b5c <HAL_DCMI_Stop+0xb8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b60 <HAL_DCMI_Stop+0xbc>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	0a5b      	lsrs	r3, r3, #9
 8003ab8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_DCMI_Stop+0x30>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e03f      	b.n	8003b54 <HAL_DCMI_Stop+0xb0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d108      	bne.n	8003b12 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8003b10:	e006      	b.n	8003b20 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e9      	bne.n	8003af4 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 ff2b 	bl	8004990 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	24000018 	.word	0x24000018
 8003b60:	10624dd3 	.word	0x10624dd3

08003b64 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2204      	movs	r2, #4
 8003b84:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8a:	f043 0202 	orr.w	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2204      	movs	r2, #4
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9e:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <HAL_DCMI_IRQHandler+0x100>)
 8003ba0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fa10 	bl	8004fcc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d016      	beq.n	8003be4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	4a23      	ldr	r2, [pc, #140]	@ (8003c64 <HAL_DCMI_IRQHandler+0x100>)
 8003bd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f9f4 	bl	8004fcc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2210      	movs	r2, #16
 8003bf4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f840 	bl	8003c7c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fe f88a 	bl	8001d28 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01d      	beq.n	8003c5a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d107      	bne.n	8003c3c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 021e 	bic.w	r2, r2, #30
 8003c3a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2201      	movs	r2, #1
 8003c52:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f81b 	bl	8003c90 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08003dcb 	.word	0x08003dcb

08003c68 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d043      	beq.n	8003d42 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cc6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d118      	bne.n	8003d06 <DCMI_DMAXferCplt+0x62>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	00da      	lsls	r2, r3, #3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f003 fa2d 	bl	8007154 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	1e5a      	subs	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d04:	e044      	b.n	8003d90 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13c      	bne.n	8003d90 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	00da      	lsls	r2, r3, #3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	2201      	movs	r2, #1
 8003d30:	4619      	mov	r1, r3
 8003d32:	f003 fa0f 	bl	8007154 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d40:	e026      	b.n	8003d90 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d006      	beq.n	8003d60 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	e017      	b.n	8003d90 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10f      	bne.n	8003d90 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d74:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	0099      	lsls	r1, r3, #2
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	440a      	add	r2, r1
 8003d86:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d112      	bne.n	8003dc2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d103      	bne.n	8003dc2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d009      	beq.n	8003df6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff ff36 	bl	8003c68 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff fb4a 	bl	80034a4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e316      	b.n	800444a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a66      	ldr	r2, [pc, #408]	@ (8003fbc <HAL_DMA_Init+0x1b8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d04a      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a65      	ldr	r2, [pc, #404]	@ (8003fc0 <HAL_DMA_Init+0x1bc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d045      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a63      	ldr	r2, [pc, #396]	@ (8003fc4 <HAL_DMA_Init+0x1c0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d040      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a62      	ldr	r2, [pc, #392]	@ (8003fc8 <HAL_DMA_Init+0x1c4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d03b      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a60      	ldr	r2, [pc, #384]	@ (8003fcc <HAL_DMA_Init+0x1c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d036      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a5f      	ldr	r2, [pc, #380]	@ (8003fd0 <HAL_DMA_Init+0x1cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d031      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd4 <HAL_DMA_Init+0x1d0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02c      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5c      	ldr	r2, [pc, #368]	@ (8003fd8 <HAL_DMA_Init+0x1d4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d027      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5a      	ldr	r2, [pc, #360]	@ (8003fdc <HAL_DMA_Init+0x1d8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d022      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a59      	ldr	r2, [pc, #356]	@ (8003fe0 <HAL_DMA_Init+0x1dc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d01d      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a57      	ldr	r2, [pc, #348]	@ (8003fe4 <HAL_DMA_Init+0x1e0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d018      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a56      	ldr	r2, [pc, #344]	@ (8003fe8 <HAL_DMA_Init+0x1e4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a54      	ldr	r2, [pc, #336]	@ (8003fec <HAL_DMA_Init+0x1e8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00e      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a53      	ldr	r2, [pc, #332]	@ (8003ff0 <HAL_DMA_Init+0x1ec>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d009      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a51      	ldr	r2, [pc, #324]	@ (8003ff4 <HAL_DMA_Init+0x1f0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_DMA_Init+0xb8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a50      	ldr	r2, [pc, #320]	@ (8003ff8 <HAL_DMA_Init+0x1f4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_DMA_Init+0xbc>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_DMA_Init+0xbe>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 813b 	beq.w	800413e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a37      	ldr	r2, [pc, #220]	@ (8003fbc <HAL_DMA_Init+0x1b8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d04a      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a36      	ldr	r2, [pc, #216]	@ (8003fc0 <HAL_DMA_Init+0x1bc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d045      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a34      	ldr	r2, [pc, #208]	@ (8003fc4 <HAL_DMA_Init+0x1c0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d040      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a33      	ldr	r2, [pc, #204]	@ (8003fc8 <HAL_DMA_Init+0x1c4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d03b      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a31      	ldr	r2, [pc, #196]	@ (8003fcc <HAL_DMA_Init+0x1c8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d036      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a30      	ldr	r2, [pc, #192]	@ (8003fd0 <HAL_DMA_Init+0x1cc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d031      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd4 <HAL_DMA_Init+0x1d0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02c      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd8 <HAL_DMA_Init+0x1d4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d027      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fdc <HAL_DMA_Init+0x1d8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe0 <HAL_DMA_Init+0x1dc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01d      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a28      	ldr	r2, [pc, #160]	@ (8003fe4 <HAL_DMA_Init+0x1e0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a27      	ldr	r2, [pc, #156]	@ (8003fe8 <HAL_DMA_Init+0x1e4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a25      	ldr	r2, [pc, #148]	@ (8003fec <HAL_DMA_Init+0x1e8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ff0 <HAL_DMA_Init+0x1ec>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	@ (8003ff4 <HAL_DMA_Init+0x1f0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_DMA_Init+0x174>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a21      	ldr	r2, [pc, #132]	@ (8003ff8 <HAL_DMA_Init+0x1f4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d108      	bne.n	8003f8a <HAL_DMA_Init+0x186>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e007      	b.n	8003f9a <HAL_DMA_Init+0x196>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f9a:	e02f      	b.n	8003ffc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f9c:	f7ff fa82 	bl	80034a4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d928      	bls.n	8003ffc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e246      	b.n	800444a <HAL_DMA_Init+0x646>
 8003fbc:	40020010 	.word	0x40020010
 8003fc0:	40020028 	.word	0x40020028
 8003fc4:	40020040 	.word	0x40020040
 8003fc8:	40020058 	.word	0x40020058
 8003fcc:	40020070 	.word	0x40020070
 8003fd0:	40020088 	.word	0x40020088
 8003fd4:	400200a0 	.word	0x400200a0
 8003fd8:	400200b8 	.word	0x400200b8
 8003fdc:	40020410 	.word	0x40020410
 8003fe0:	40020428 	.word	0x40020428
 8003fe4:	40020440 	.word	0x40020440
 8003fe8:	40020458 	.word	0x40020458
 8003fec:	40020470 	.word	0x40020470
 8003ff0:	40020488 	.word	0x40020488
 8003ff4:	400204a0 	.word	0x400204a0
 8003ff8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1c8      	bne.n	8003f9c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4b83      	ldr	r3, [pc, #524]	@ (8004224 <HAL_DMA_Init+0x420>)
 8004016:	4013      	ands	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004022:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	4313      	orrs	r3, r2
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004060:	4b71      	ldr	r3, [pc, #452]	@ (8004228 <HAL_DMA_Init+0x424>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b71      	ldr	r3, [pc, #452]	@ (800422c <HAL_DMA_Init+0x428>)
 8004066:	4013      	ands	r3, r2
 8004068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800406c:	d328      	bcc.n	80040c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b28      	cmp	r3, #40	@ 0x28
 8004074:	d903      	bls.n	800407e <HAL_DMA_Init+0x27a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b2e      	cmp	r3, #46	@ 0x2e
 800407c:	d917      	bls.n	80040ae <HAL_DMA_Init+0x2aa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b3e      	cmp	r3, #62	@ 0x3e
 8004084:	d903      	bls.n	800408e <HAL_DMA_Init+0x28a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b42      	cmp	r3, #66	@ 0x42
 800408c:	d90f      	bls.n	80040ae <HAL_DMA_Init+0x2aa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b46      	cmp	r3, #70	@ 0x46
 8004094:	d903      	bls.n	800409e <HAL_DMA_Init+0x29a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b48      	cmp	r3, #72	@ 0x48
 800409c:	d907      	bls.n	80040ae <HAL_DMA_Init+0x2aa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80040a4:	d905      	bls.n	80040b2 <HAL_DMA_Init+0x2ae>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b52      	cmp	r3, #82	@ 0x52
 80040ac:	d801      	bhi.n	80040b2 <HAL_DMA_Init+0x2ae>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_DMA_Init+0x2b0>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d117      	bne.n	800411a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f002 fb41 	bl	8006784 <DMA_CheckFifoParam>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2240      	movs	r2, #64	@ 0x40
 800410c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e197      	b.n	800444a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f002 fa7c 	bl	8006620 <DMA_CalcBaseAndBitshift>
 8004128:	4603      	mov	r3, r0
 800412a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	223f      	movs	r2, #63	@ 0x3f
 8004136:	409a      	lsls	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	e0cd      	b.n	80042da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3b      	ldr	r2, [pc, #236]	@ (8004230 <HAL_DMA_Init+0x42c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d022      	beq.n	800418e <HAL_DMA_Init+0x38a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a39      	ldr	r2, [pc, #228]	@ (8004234 <HAL_DMA_Init+0x430>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01d      	beq.n	800418e <HAL_DMA_Init+0x38a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a38      	ldr	r2, [pc, #224]	@ (8004238 <HAL_DMA_Init+0x434>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d018      	beq.n	800418e <HAL_DMA_Init+0x38a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a36      	ldr	r2, [pc, #216]	@ (800423c <HAL_DMA_Init+0x438>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <HAL_DMA_Init+0x38a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a35      	ldr	r2, [pc, #212]	@ (8004240 <HAL_DMA_Init+0x43c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00e      	beq.n	800418e <HAL_DMA_Init+0x38a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <HAL_DMA_Init+0x440>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_DMA_Init+0x38a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a32      	ldr	r2, [pc, #200]	@ (8004248 <HAL_DMA_Init+0x444>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <HAL_DMA_Init+0x38a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a30      	ldr	r2, [pc, #192]	@ (800424c <HAL_DMA_Init+0x448>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_DMA_Init+0x38e>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <HAL_DMA_Init+0x390>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8097 	beq.w	80042c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a24      	ldr	r2, [pc, #144]	@ (8004230 <HAL_DMA_Init+0x42c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d021      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <HAL_DMA_Init+0x430>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01c      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <HAL_DMA_Init+0x434>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d017      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1f      	ldr	r2, [pc, #124]	@ (800423c <HAL_DMA_Init+0x438>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d012      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_DMA_Init+0x43c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00d      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <HAL_DMA_Init+0x440>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d008      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <HAL_DMA_Init+0x444>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <HAL_DMA_Init+0x3e4>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a19      	ldr	r2, [pc, #100]	@ (800424c <HAL_DMA_Init+0x448>)
 80041e6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <HAL_DMA_Init+0x44c>)
 8004204:	4013      	ands	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d021      	beq.n	8004254 <HAL_DMA_Init+0x450>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b80      	cmp	r3, #128	@ 0x80
 8004216:	d102      	bne.n	800421e <HAL_DMA_Init+0x41a>
 8004218:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800421c:	e01b      	b.n	8004256 <HAL_DMA_Init+0x452>
 800421e:	2300      	movs	r3, #0
 8004220:	e019      	b.n	8004256 <HAL_DMA_Init+0x452>
 8004222:	bf00      	nop
 8004224:	fe10803f 	.word	0xfe10803f
 8004228:	5c001000 	.word	0x5c001000
 800422c:	ffff0000 	.word	0xffff0000
 8004230:	58025408 	.word	0x58025408
 8004234:	5802541c 	.word	0x5802541c
 8004238:	58025430 	.word	0x58025430
 800423c:	58025444 	.word	0x58025444
 8004240:	58025458 	.word	0x58025458
 8004244:	5802546c 	.word	0x5802546c
 8004248:	58025480 	.word	0x58025480
 800424c:	58025494 	.word	0x58025494
 8004250:	fffe000f 	.word	0xfffe000f
 8004254:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68d2      	ldr	r2, [r2, #12]
 800425a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800425c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004264:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800426c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004274:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800427c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004284:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4b6e      	ldr	r3, [pc, #440]	@ (8004454 <HAL_DMA_Init+0x650>)
 800429c:	4413      	add	r3, r2
 800429e:	4a6e      	ldr	r2, [pc, #440]	@ (8004458 <HAL_DMA_Init+0x654>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f002 f9b7 	bl	8006620 <DMA_CalcBaseAndBitshift>
 80042b2:	4603      	mov	r3, r0
 80042b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2201      	movs	r2, #1
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e008      	b.n	80042da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2240      	movs	r2, #64	@ 0x40
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2203      	movs	r2, #3
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0b7      	b.n	800444a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5f      	ldr	r2, [pc, #380]	@ (800445c <HAL_DMA_Init+0x658>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d072      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004460 <HAL_DMA_Init+0x65c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d06d      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004464 <HAL_DMA_Init+0x660>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d068      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004468 <HAL_DMA_Init+0x664>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d063      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a59      	ldr	r2, [pc, #356]	@ (800446c <HAL_DMA_Init+0x668>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d05e      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a57      	ldr	r2, [pc, #348]	@ (8004470 <HAL_DMA_Init+0x66c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d059      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a56      	ldr	r2, [pc, #344]	@ (8004474 <HAL_DMA_Init+0x670>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d054      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a54      	ldr	r2, [pc, #336]	@ (8004478 <HAL_DMA_Init+0x674>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d04f      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a53      	ldr	r2, [pc, #332]	@ (800447c <HAL_DMA_Init+0x678>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d04a      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a51      	ldr	r2, [pc, #324]	@ (8004480 <HAL_DMA_Init+0x67c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d045      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a50      	ldr	r2, [pc, #320]	@ (8004484 <HAL_DMA_Init+0x680>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d040      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a4e      	ldr	r2, [pc, #312]	@ (8004488 <HAL_DMA_Init+0x684>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a4d      	ldr	r2, [pc, #308]	@ (800448c <HAL_DMA_Init+0x688>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d036      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a4b      	ldr	r2, [pc, #300]	@ (8004490 <HAL_DMA_Init+0x68c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a4a      	ldr	r2, [pc, #296]	@ (8004494 <HAL_DMA_Init+0x690>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d02c      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a48      	ldr	r2, [pc, #288]	@ (8004498 <HAL_DMA_Init+0x694>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d027      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a47      	ldr	r2, [pc, #284]	@ (800449c <HAL_DMA_Init+0x698>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a45      	ldr	r2, [pc, #276]	@ (80044a0 <HAL_DMA_Init+0x69c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a44      	ldr	r2, [pc, #272]	@ (80044a4 <HAL_DMA_Init+0x6a0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a42      	ldr	r2, [pc, #264]	@ (80044a8 <HAL_DMA_Init+0x6a4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a41      	ldr	r2, [pc, #260]	@ (80044ac <HAL_DMA_Init+0x6a8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3f      	ldr	r2, [pc, #252]	@ (80044b0 <HAL_DMA_Init+0x6ac>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a3e      	ldr	r2, [pc, #248]	@ (80044b4 <HAL_DMA_Init+0x6b0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_Init+0x5c6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3c      	ldr	r2, [pc, #240]	@ (80044b8 <HAL_DMA_Init+0x6b4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_DMA_Init+0x5ca>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_DMA_Init+0x5cc>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d032      	beq.n	800443a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f002 fa51 	bl	800687c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b80      	cmp	r3, #128	@ 0x80
 80043e0:	d102      	bne.n	80043e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <HAL_DMA_Init+0x624>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b08      	cmp	r3, #8
 800440c:	d80c      	bhi.n	8004428 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f002 face 	bl	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e008      	b.n	800443a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	a7fdabf8 	.word	0xa7fdabf8
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	40020010 	.word	0x40020010
 8004460:	40020028 	.word	0x40020028
 8004464:	40020040 	.word	0x40020040
 8004468:	40020058 	.word	0x40020058
 800446c:	40020070 	.word	0x40020070
 8004470:	40020088 	.word	0x40020088
 8004474:	400200a0 	.word	0x400200a0
 8004478:	400200b8 	.word	0x400200b8
 800447c:	40020410 	.word	0x40020410
 8004480:	40020428 	.word	0x40020428
 8004484:	40020440 	.word	0x40020440
 8004488:	40020458 	.word	0x40020458
 800448c:	40020470 	.word	0x40020470
 8004490:	40020488 	.word	0x40020488
 8004494:	400204a0 	.word	0x400204a0
 8004498:	400204b8 	.word	0x400204b8
 800449c:	58025408 	.word	0x58025408
 80044a0:	5802541c 	.word	0x5802541c
 80044a4:	58025430 	.word	0x58025430
 80044a8:	58025444 	.word	0x58025444
 80044ac:	58025458 	.word	0x58025458
 80044b0:	5802546c 	.word	0x5802546c
 80044b4:	58025480 	.word	0x58025480
 80044b8:	58025494 	.word	0x58025494

080044bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e226      	b.n	8004926 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_DMA_Start_IT+0x2a>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e21f      	b.n	8004926 <HAL_DMA_Start_IT+0x46a>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	f040 820a 	bne.w	8004910 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a68      	ldr	r2, [pc, #416]	@ (80046b0 <HAL_DMA_Start_IT+0x1f4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d04a      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a66      	ldr	r2, [pc, #408]	@ (80046b4 <HAL_DMA_Start_IT+0x1f8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d045      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a65      	ldr	r2, [pc, #404]	@ (80046b8 <HAL_DMA_Start_IT+0x1fc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d040      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a63      	ldr	r2, [pc, #396]	@ (80046bc <HAL_DMA_Start_IT+0x200>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d03b      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a62      	ldr	r2, [pc, #392]	@ (80046c0 <HAL_DMA_Start_IT+0x204>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d036      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a60      	ldr	r2, [pc, #384]	@ (80046c4 <HAL_DMA_Start_IT+0x208>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d031      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5f      	ldr	r2, [pc, #380]	@ (80046c8 <HAL_DMA_Start_IT+0x20c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d02c      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a5d      	ldr	r2, [pc, #372]	@ (80046cc <HAL_DMA_Start_IT+0x210>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d027      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a5c      	ldr	r2, [pc, #368]	@ (80046d0 <HAL_DMA_Start_IT+0x214>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a5a      	ldr	r2, [pc, #360]	@ (80046d4 <HAL_DMA_Start_IT+0x218>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01d      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a59      	ldr	r2, [pc, #356]	@ (80046d8 <HAL_DMA_Start_IT+0x21c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d018      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a57      	ldr	r2, [pc, #348]	@ (80046dc <HAL_DMA_Start_IT+0x220>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a56      	ldr	r2, [pc, #344]	@ (80046e0 <HAL_DMA_Start_IT+0x224>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00e      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a54      	ldr	r2, [pc, #336]	@ (80046e4 <HAL_DMA_Start_IT+0x228>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a53      	ldr	r2, [pc, #332]	@ (80046e8 <HAL_DMA_Start_IT+0x22c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_Start_IT+0xee>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a51      	ldr	r2, [pc, #324]	@ (80046ec <HAL_DMA_Start_IT+0x230>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <HAL_DMA_Start_IT+0x100>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e007      	b.n	80045cc <HAL_DMA_Start_IT+0x110>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f001 fe78 	bl	80062c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a34      	ldr	r2, [pc, #208]	@ (80046b0 <HAL_DMA_Start_IT+0x1f4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d04a      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a33      	ldr	r2, [pc, #204]	@ (80046b4 <HAL_DMA_Start_IT+0x1f8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d045      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a31      	ldr	r2, [pc, #196]	@ (80046b8 <HAL_DMA_Start_IT+0x1fc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d040      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a30      	ldr	r2, [pc, #192]	@ (80046bc <HAL_DMA_Start_IT+0x200>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d03b      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2e      	ldr	r2, [pc, #184]	@ (80046c0 <HAL_DMA_Start_IT+0x204>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d036      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2d      	ldr	r2, [pc, #180]	@ (80046c4 <HAL_DMA_Start_IT+0x208>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d031      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <HAL_DMA_Start_IT+0x20c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d02c      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <HAL_DMA_Start_IT+0x210>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d027      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a28      	ldr	r2, [pc, #160]	@ (80046d0 <HAL_DMA_Start_IT+0x214>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d022      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a27      	ldr	r2, [pc, #156]	@ (80046d4 <HAL_DMA_Start_IT+0x218>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d01d      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a25      	ldr	r2, [pc, #148]	@ (80046d8 <HAL_DMA_Start_IT+0x21c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d018      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a24      	ldr	r2, [pc, #144]	@ (80046dc <HAL_DMA_Start_IT+0x220>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a22      	ldr	r2, [pc, #136]	@ (80046e0 <HAL_DMA_Start_IT+0x224>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00e      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a21      	ldr	r2, [pc, #132]	@ (80046e4 <HAL_DMA_Start_IT+0x228>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1f      	ldr	r2, [pc, #124]	@ (80046e8 <HAL_DMA_Start_IT+0x22c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d004      	beq.n	8004678 <HAL_DMA_Start_IT+0x1bc>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a1e      	ldr	r2, [pc, #120]	@ (80046ec <HAL_DMA_Start_IT+0x230>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d101      	bne.n	800467c <HAL_DMA_Start_IT+0x1c0>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_DMA_Start_IT+0x1c2>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d036      	beq.n	80046f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 021e 	bic.w	r2, r3, #30
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0216 	orr.w	r2, r2, #22
 8004694:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d03e      	beq.n	800471c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0208 	orr.w	r2, r2, #8
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e035      	b.n	800471c <HAL_DMA_Start_IT+0x260>
 80046b0:	40020010 	.word	0x40020010
 80046b4:	40020028 	.word	0x40020028
 80046b8:	40020040 	.word	0x40020040
 80046bc:	40020058 	.word	0x40020058
 80046c0:	40020070 	.word	0x40020070
 80046c4:	40020088 	.word	0x40020088
 80046c8:	400200a0 	.word	0x400200a0
 80046cc:	400200b8 	.word	0x400200b8
 80046d0:	40020410 	.word	0x40020410
 80046d4:	40020428 	.word	0x40020428
 80046d8:	40020440 	.word	0x40020440
 80046dc:	40020458 	.word	0x40020458
 80046e0:	40020470 	.word	0x40020470
 80046e4:	40020488 	.word	0x40020488
 80046e8:	400204a0 	.word	0x400204a0
 80046ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 020e 	bic.w	r2, r3, #14
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 020a 	orr.w	r2, r2, #10
 8004702:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0204 	orr.w	r2, r2, #4
 800471a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a83      	ldr	r2, [pc, #524]	@ (8004930 <HAL_DMA_Start_IT+0x474>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d072      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a82      	ldr	r2, [pc, #520]	@ (8004934 <HAL_DMA_Start_IT+0x478>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d06d      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a80      	ldr	r2, [pc, #512]	@ (8004938 <HAL_DMA_Start_IT+0x47c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d068      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7f      	ldr	r2, [pc, #508]	@ (800493c <HAL_DMA_Start_IT+0x480>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d063      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a7d      	ldr	r2, [pc, #500]	@ (8004940 <HAL_DMA_Start_IT+0x484>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d05e      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7c      	ldr	r2, [pc, #496]	@ (8004944 <HAL_DMA_Start_IT+0x488>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d059      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7a      	ldr	r2, [pc, #488]	@ (8004948 <HAL_DMA_Start_IT+0x48c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d054      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a79      	ldr	r2, [pc, #484]	@ (800494c <HAL_DMA_Start_IT+0x490>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d04f      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a77      	ldr	r2, [pc, #476]	@ (8004950 <HAL_DMA_Start_IT+0x494>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d04a      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a76      	ldr	r2, [pc, #472]	@ (8004954 <HAL_DMA_Start_IT+0x498>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d045      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a74      	ldr	r2, [pc, #464]	@ (8004958 <HAL_DMA_Start_IT+0x49c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d040      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a73      	ldr	r2, [pc, #460]	@ (800495c <HAL_DMA_Start_IT+0x4a0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d03b      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a71      	ldr	r2, [pc, #452]	@ (8004960 <HAL_DMA_Start_IT+0x4a4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d036      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a70      	ldr	r2, [pc, #448]	@ (8004964 <HAL_DMA_Start_IT+0x4a8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d031      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004968 <HAL_DMA_Start_IT+0x4ac>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02c      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a6d      	ldr	r2, [pc, #436]	@ (800496c <HAL_DMA_Start_IT+0x4b0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d027      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004970 <HAL_DMA_Start_IT+0x4b4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004974 <HAL_DMA_Start_IT+0x4b8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a68      	ldr	r2, [pc, #416]	@ (8004978 <HAL_DMA_Start_IT+0x4bc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a67      	ldr	r2, [pc, #412]	@ (800497c <HAL_DMA_Start_IT+0x4c0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a65      	ldr	r2, [pc, #404]	@ (8004980 <HAL_DMA_Start_IT+0x4c4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a64      	ldr	r2, [pc, #400]	@ (8004984 <HAL_DMA_Start_IT+0x4c8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a62      	ldr	r2, [pc, #392]	@ (8004988 <HAL_DMA_Start_IT+0x4cc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_DMA_Start_IT+0x350>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a61      	ldr	r2, [pc, #388]	@ (800498c <HAL_DMA_Start_IT+0x4d0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Start_IT+0x354>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_DMA_Start_IT+0x356>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004832:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800484a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a37      	ldr	r2, [pc, #220]	@ (8004930 <HAL_DMA_Start_IT+0x474>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d04a      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a36      	ldr	r2, [pc, #216]	@ (8004934 <HAL_DMA_Start_IT+0x478>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d045      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a34      	ldr	r2, [pc, #208]	@ (8004938 <HAL_DMA_Start_IT+0x47c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d040      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a33      	ldr	r2, [pc, #204]	@ (800493c <HAL_DMA_Start_IT+0x480>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d03b      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a31      	ldr	r2, [pc, #196]	@ (8004940 <HAL_DMA_Start_IT+0x484>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d036      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_DMA_Start_IT+0x488>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d031      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <HAL_DMA_Start_IT+0x48c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02c      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2d      	ldr	r2, [pc, #180]	@ (800494c <HAL_DMA_Start_IT+0x490>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d027      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004950 <HAL_DMA_Start_IT+0x494>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d022      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <HAL_DMA_Start_IT+0x498>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d01d      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a28      	ldr	r2, [pc, #160]	@ (8004958 <HAL_DMA_Start_IT+0x49c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d018      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a27      	ldr	r2, [pc, #156]	@ (800495c <HAL_DMA_Start_IT+0x4a0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a25      	ldr	r2, [pc, #148]	@ (8004960 <HAL_DMA_Start_IT+0x4a4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a24      	ldr	r2, [pc, #144]	@ (8004964 <HAL_DMA_Start_IT+0x4a8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a22      	ldr	r2, [pc, #136]	@ (8004968 <HAL_DMA_Start_IT+0x4ac>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_DMA_Start_IT+0x430>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a21      	ldr	r2, [pc, #132]	@ (800496c <HAL_DMA_Start_IT+0x4b0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <HAL_DMA_Start_IT+0x442>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e012      	b.n	8004924 <HAL_DMA_Start_IT+0x468>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e009      	b.n	8004924 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40020010 	.word	0x40020010
 8004934:	40020028 	.word	0x40020028
 8004938:	40020040 	.word	0x40020040
 800493c:	40020058 	.word	0x40020058
 8004940:	40020070 	.word	0x40020070
 8004944:	40020088 	.word	0x40020088
 8004948:	400200a0 	.word	0x400200a0
 800494c:	400200b8 	.word	0x400200b8
 8004950:	40020410 	.word	0x40020410
 8004954:	40020428 	.word	0x40020428
 8004958:	40020440 	.word	0x40020440
 800495c:	40020458 	.word	0x40020458
 8004960:	40020470 	.word	0x40020470
 8004964:	40020488 	.word	0x40020488
 8004968:	400204a0 	.word	0x400204a0
 800496c:	400204b8 	.word	0x400204b8
 8004970:	58025408 	.word	0x58025408
 8004974:	5802541c 	.word	0x5802541c
 8004978:	58025430 	.word	0x58025430
 800497c:	58025444 	.word	0x58025444
 8004980:	58025458 	.word	0x58025458
 8004984:	5802546c 	.word	0x5802546c
 8004988:	58025480 	.word	0x58025480
 800498c:	58025494 	.word	0x58025494

08004990 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004998:	f7fe fd84 	bl	80034a4 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e2dc      	b.n	8004f62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d008      	beq.n	80049c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2280      	movs	r2, #128	@ 0x80
 80049b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e2cd      	b.n	8004f62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a76      	ldr	r2, [pc, #472]	@ (8004ba4 <HAL_DMA_Abort+0x214>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d04a      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a74      	ldr	r2, [pc, #464]	@ (8004ba8 <HAL_DMA_Abort+0x218>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d045      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a73      	ldr	r2, [pc, #460]	@ (8004bac <HAL_DMA_Abort+0x21c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d040      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a71      	ldr	r2, [pc, #452]	@ (8004bb0 <HAL_DMA_Abort+0x220>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d03b      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a70      	ldr	r2, [pc, #448]	@ (8004bb4 <HAL_DMA_Abort+0x224>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d036      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6e      	ldr	r2, [pc, #440]	@ (8004bb8 <HAL_DMA_Abort+0x228>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d031      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6d      	ldr	r2, [pc, #436]	@ (8004bbc <HAL_DMA_Abort+0x22c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d02c      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a6b      	ldr	r2, [pc, #428]	@ (8004bc0 <HAL_DMA_Abort+0x230>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d027      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a6a      	ldr	r2, [pc, #424]	@ (8004bc4 <HAL_DMA_Abort+0x234>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a68      	ldr	r2, [pc, #416]	@ (8004bc8 <HAL_DMA_Abort+0x238>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a67      	ldr	r2, [pc, #412]	@ (8004bcc <HAL_DMA_Abort+0x23c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	@ (8004bd0 <HAL_DMA_Abort+0x240>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a64      	ldr	r2, [pc, #400]	@ (8004bd4 <HAL_DMA_Abort+0x244>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a62      	ldr	r2, [pc, #392]	@ (8004bd8 <HAL_DMA_Abort+0x248>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a61      	ldr	r2, [pc, #388]	@ (8004bdc <HAL_DMA_Abort+0x24c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_DMA_Abort+0xd6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5f      	ldr	r2, [pc, #380]	@ (8004be0 <HAL_DMA_Abort+0x250>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_DMA_Abort+0xda>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_DMA_Abort+0xdc>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 021e 	bic.w	r2, r2, #30
 8004a7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	e00a      	b.n	8004aae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020e 	bic.w	r2, r2, #14
 8004aa6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <HAL_DMA_Abort+0x214>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d072      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ba8 <HAL_DMA_Abort+0x218>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d06d      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a39      	ldr	r2, [pc, #228]	@ (8004bac <HAL_DMA_Abort+0x21c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d068      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a37      	ldr	r2, [pc, #220]	@ (8004bb0 <HAL_DMA_Abort+0x220>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d063      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <HAL_DMA_Abort+0x224>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d05e      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a34      	ldr	r2, [pc, #208]	@ (8004bb8 <HAL_DMA_Abort+0x228>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d059      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a33      	ldr	r2, [pc, #204]	@ (8004bbc <HAL_DMA_Abort+0x22c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d054      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a31      	ldr	r2, [pc, #196]	@ (8004bc0 <HAL_DMA_Abort+0x230>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04f      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a30      	ldr	r2, [pc, #192]	@ (8004bc4 <HAL_DMA_Abort+0x234>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d04a      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc8 <HAL_DMA_Abort+0x238>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d045      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2d      	ldr	r2, [pc, #180]	@ (8004bcc <HAL_DMA_Abort+0x23c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d040      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd0 <HAL_DMA_Abort+0x240>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d03b      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd4 <HAL_DMA_Abort+0x244>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d036      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a28      	ldr	r2, [pc, #160]	@ (8004bd8 <HAL_DMA_Abort+0x248>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d031      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a27      	ldr	r2, [pc, #156]	@ (8004bdc <HAL_DMA_Abort+0x24c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d02c      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a25      	ldr	r2, [pc, #148]	@ (8004be0 <HAL_DMA_Abort+0x250>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d027      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a24      	ldr	r2, [pc, #144]	@ (8004be4 <HAL_DMA_Abort+0x254>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d022      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	@ (8004be8 <HAL_DMA_Abort+0x258>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01d      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a21      	ldr	r2, [pc, #132]	@ (8004bec <HAL_DMA_Abort+0x25c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf0 <HAL_DMA_Abort+0x260>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf4 <HAL_DMA_Abort+0x264>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <HAL_DMA_Abort+0x268>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <HAL_DMA_Abort+0x26c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_DMA_Abort+0x20e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a19      	ldr	r2, [pc, #100]	@ (8004c00 <HAL_DMA_Abort+0x270>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d132      	bne.n	8004c04 <HAL_DMA_Abort+0x274>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e031      	b.n	8004c06 <HAL_DMA_Abort+0x276>
 8004ba2:	bf00      	nop
 8004ba4:	40020010 	.word	0x40020010
 8004ba8:	40020028 	.word	0x40020028
 8004bac:	40020040 	.word	0x40020040
 8004bb0:	40020058 	.word	0x40020058
 8004bb4:	40020070 	.word	0x40020070
 8004bb8:	40020088 	.word	0x40020088
 8004bbc:	400200a0 	.word	0x400200a0
 8004bc0:	400200b8 	.word	0x400200b8
 8004bc4:	40020410 	.word	0x40020410
 8004bc8:	40020428 	.word	0x40020428
 8004bcc:	40020440 	.word	0x40020440
 8004bd0:	40020458 	.word	0x40020458
 8004bd4:	40020470 	.word	0x40020470
 8004bd8:	40020488 	.word	0x40020488
 8004bdc:	400204a0 	.word	0x400204a0
 8004be0:	400204b8 	.word	0x400204b8
 8004be4:	58025408 	.word	0x58025408
 8004be8:	5802541c 	.word	0x5802541c
 8004bec:	58025430 	.word	0x58025430
 8004bf0:	58025444 	.word	0x58025444
 8004bf4:	58025458 	.word	0x58025458
 8004bf8:	5802546c 	.word	0x5802546c
 8004bfc:	58025480 	.word	0x58025480
 8004c00:	58025494 	.word	0x58025494
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd4 <HAL_DMA_Abort+0x444>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d04a      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a6b      	ldr	r2, [pc, #428]	@ (8004dd8 <HAL_DMA_Abort+0x448>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d045      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6a      	ldr	r2, [pc, #424]	@ (8004ddc <HAL_DMA_Abort+0x44c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d040      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a68      	ldr	r2, [pc, #416]	@ (8004de0 <HAL_DMA_Abort+0x450>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d03b      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a67      	ldr	r2, [pc, #412]	@ (8004de4 <HAL_DMA_Abort+0x454>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d036      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a65      	ldr	r2, [pc, #404]	@ (8004de8 <HAL_DMA_Abort+0x458>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d031      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a64      	ldr	r2, [pc, #400]	@ (8004dec <HAL_DMA_Abort+0x45c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d02c      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a62      	ldr	r2, [pc, #392]	@ (8004df0 <HAL_DMA_Abort+0x460>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d027      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a61      	ldr	r2, [pc, #388]	@ (8004df4 <HAL_DMA_Abort+0x464>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d022      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5f      	ldr	r2, [pc, #380]	@ (8004df8 <HAL_DMA_Abort+0x468>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01d      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5e      	ldr	r2, [pc, #376]	@ (8004dfc <HAL_DMA_Abort+0x46c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d018      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004e00 <HAL_DMA_Abort+0x470>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5b      	ldr	r2, [pc, #364]	@ (8004e04 <HAL_DMA_Abort+0x474>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00e      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a59      	ldr	r2, [pc, #356]	@ (8004e08 <HAL_DMA_Abort+0x478>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d009      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a58      	ldr	r2, [pc, #352]	@ (8004e0c <HAL_DMA_Abort+0x47c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d004      	beq.n	8004cba <HAL_DMA_Abort+0x32a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a56      	ldr	r2, [pc, #344]	@ (8004e10 <HAL_DMA_Abort+0x480>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <HAL_DMA_Abort+0x33c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e007      	b.n	8004cdc <HAL_DMA_Abort+0x34c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004cdc:	e013      	b.n	8004d06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cde:	f7fe fbe1 	bl	80034a4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b05      	cmp	r3, #5
 8004cea:	d90c      	bls.n	8004d06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e12d      	b.n	8004f62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e5      	bne.n	8004cde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd4 <HAL_DMA_Abort+0x444>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d04a      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd8 <HAL_DMA_Abort+0x448>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d045      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ddc <HAL_DMA_Abort+0x44c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d040      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2a      	ldr	r2, [pc, #168]	@ (8004de0 <HAL_DMA_Abort+0x450>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d03b      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a29      	ldr	r2, [pc, #164]	@ (8004de4 <HAL_DMA_Abort+0x454>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d036      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <HAL_DMA_Abort+0x458>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d031      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a26      	ldr	r2, [pc, #152]	@ (8004dec <HAL_DMA_Abort+0x45c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d02c      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a24      	ldr	r2, [pc, #144]	@ (8004df0 <HAL_DMA_Abort+0x460>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d027      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a23      	ldr	r2, [pc, #140]	@ (8004df4 <HAL_DMA_Abort+0x464>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a21      	ldr	r2, [pc, #132]	@ (8004df8 <HAL_DMA_Abort+0x468>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a20      	ldr	r2, [pc, #128]	@ (8004dfc <HAL_DMA_Abort+0x46c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1e      	ldr	r2, [pc, #120]	@ (8004e00 <HAL_DMA_Abort+0x470>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8004e04 <HAL_DMA_Abort+0x474>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <HAL_DMA_Abort+0x478>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <HAL_DMA_Abort+0x47c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_DMA_Abort+0x422>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <HAL_DMA_Abort+0x480>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <HAL_DMA_Abort+0x426>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_DMA_Abort+0x428>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02b      	beq.n	8004e14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	223f      	movs	r2, #63	@ 0x3f
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	609a      	str	r2, [r3, #8]
 8004dd2:	e02a      	b.n	8004e2a <HAL_DMA_Abort+0x49a>
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2201      	movs	r2, #1
 8004e24:	409a      	lsls	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8004f6c <HAL_DMA_Abort+0x5dc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d072      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a4d      	ldr	r2, [pc, #308]	@ (8004f70 <HAL_DMA_Abort+0x5e0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d06d      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4c      	ldr	r2, [pc, #304]	@ (8004f74 <HAL_DMA_Abort+0x5e4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d068      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f78 <HAL_DMA_Abort+0x5e8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d063      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a49      	ldr	r2, [pc, #292]	@ (8004f7c <HAL_DMA_Abort+0x5ec>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d05e      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a47      	ldr	r2, [pc, #284]	@ (8004f80 <HAL_DMA_Abort+0x5f0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d059      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a46      	ldr	r2, [pc, #280]	@ (8004f84 <HAL_DMA_Abort+0x5f4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d054      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a44      	ldr	r2, [pc, #272]	@ (8004f88 <HAL_DMA_Abort+0x5f8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d04f      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a43      	ldr	r2, [pc, #268]	@ (8004f8c <HAL_DMA_Abort+0x5fc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d04a      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a41      	ldr	r2, [pc, #260]	@ (8004f90 <HAL_DMA_Abort+0x600>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d045      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a40      	ldr	r2, [pc, #256]	@ (8004f94 <HAL_DMA_Abort+0x604>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d040      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f98 <HAL_DMA_Abort+0x608>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d03b      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a3d      	ldr	r2, [pc, #244]	@ (8004f9c <HAL_DMA_Abort+0x60c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d036      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa0 <HAL_DMA_Abort+0x610>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d031      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa4 <HAL_DMA_Abort+0x614>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d02c      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a38      	ldr	r2, [pc, #224]	@ (8004fa8 <HAL_DMA_Abort+0x618>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d027      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a37      	ldr	r2, [pc, #220]	@ (8004fac <HAL_DMA_Abort+0x61c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d022      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a35      	ldr	r2, [pc, #212]	@ (8004fb0 <HAL_DMA_Abort+0x620>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01d      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a34      	ldr	r2, [pc, #208]	@ (8004fb4 <HAL_DMA_Abort+0x624>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d018      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a32      	ldr	r2, [pc, #200]	@ (8004fb8 <HAL_DMA_Abort+0x628>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a31      	ldr	r2, [pc, #196]	@ (8004fbc <HAL_DMA_Abort+0x62c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00e      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc0 <HAL_DMA_Abort+0x630>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc4 <HAL_DMA_Abort+0x634>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_DMA_Abort+0x58a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc8 <HAL_DMA_Abort+0x638>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_DMA_Abort+0x58e>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_DMA_Abort+0x590>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d015      	beq.n	8004f50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40020010 	.word	0x40020010
 8004f70:	40020028 	.word	0x40020028
 8004f74:	40020040 	.word	0x40020040
 8004f78:	40020058 	.word	0x40020058
 8004f7c:	40020070 	.word	0x40020070
 8004f80:	40020088 	.word	0x40020088
 8004f84:	400200a0 	.word	0x400200a0
 8004f88:	400200b8 	.word	0x400200b8
 8004f8c:	40020410 	.word	0x40020410
 8004f90:	40020428 	.word	0x40020428
 8004f94:	40020440 	.word	0x40020440
 8004f98:	40020458 	.word	0x40020458
 8004f9c:	40020470 	.word	0x40020470
 8004fa0:	40020488 	.word	0x40020488
 8004fa4:	400204a0 	.word	0x400204a0
 8004fa8:	400204b8 	.word	0x400204b8
 8004fac:	58025408 	.word	0x58025408
 8004fb0:	5802541c 	.word	0x5802541c
 8004fb4:	58025430 	.word	0x58025430
 8004fb8:	58025444 	.word	0x58025444
 8004fbc:	58025458 	.word	0x58025458
 8004fc0:	5802546c 	.word	0x5802546c
 8004fc4:	58025480 	.word	0x58025480
 8004fc8:	58025494 	.word	0x58025494

08004fcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e237      	b.n	800544e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2280      	movs	r2, #128	@ 0x80
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e22c      	b.n	800544e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800516c <HAL_DMA_Abort_IT+0x1a0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d04a      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a5b      	ldr	r2, [pc, #364]	@ (8005170 <HAL_DMA_Abort_IT+0x1a4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d045      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a59      	ldr	r2, [pc, #356]	@ (8005174 <HAL_DMA_Abort_IT+0x1a8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d040      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a58      	ldr	r2, [pc, #352]	@ (8005178 <HAL_DMA_Abort_IT+0x1ac>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d03b      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a56      	ldr	r2, [pc, #344]	@ (800517c <HAL_DMA_Abort_IT+0x1b0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d036      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a55      	ldr	r2, [pc, #340]	@ (8005180 <HAL_DMA_Abort_IT+0x1b4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d031      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a53      	ldr	r2, [pc, #332]	@ (8005184 <HAL_DMA_Abort_IT+0x1b8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d02c      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a52      	ldr	r2, [pc, #328]	@ (8005188 <HAL_DMA_Abort_IT+0x1bc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d027      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a50      	ldr	r2, [pc, #320]	@ (800518c <HAL_DMA_Abort_IT+0x1c0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d022      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a4f      	ldr	r2, [pc, #316]	@ (8005190 <HAL_DMA_Abort_IT+0x1c4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d01d      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a4d      	ldr	r2, [pc, #308]	@ (8005194 <HAL_DMA_Abort_IT+0x1c8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d018      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a4c      	ldr	r2, [pc, #304]	@ (8005198 <HAL_DMA_Abort_IT+0x1cc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a4a      	ldr	r2, [pc, #296]	@ (800519c <HAL_DMA_Abort_IT+0x1d0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00e      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a49      	ldr	r2, [pc, #292]	@ (80051a0 <HAL_DMA_Abort_IT+0x1d4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a47      	ldr	r2, [pc, #284]	@ (80051a4 <HAL_DMA_Abort_IT+0x1d8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_DMA_Abort_IT+0xc8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a46      	ldr	r2, [pc, #280]	@ (80051a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <HAL_DMA_Abort_IT+0xcc>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_DMA_Abort_IT+0xce>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8086 	beq.w	80051ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2204      	movs	r2, #4
 80050a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2f      	ldr	r2, [pc, #188]	@ (800516c <HAL_DMA_Abort_IT+0x1a0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d04a      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005170 <HAL_DMA_Abort_IT+0x1a4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d045      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005174 <HAL_DMA_Abort_IT+0x1a8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d040      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005178 <HAL_DMA_Abort_IT+0x1ac>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d03b      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a29      	ldr	r2, [pc, #164]	@ (800517c <HAL_DMA_Abort_IT+0x1b0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d036      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a28      	ldr	r2, [pc, #160]	@ (8005180 <HAL_DMA_Abort_IT+0x1b4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d031      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a26      	ldr	r2, [pc, #152]	@ (8005184 <HAL_DMA_Abort_IT+0x1b8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02c      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a25      	ldr	r2, [pc, #148]	@ (8005188 <HAL_DMA_Abort_IT+0x1bc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d027      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a23      	ldr	r2, [pc, #140]	@ (800518c <HAL_DMA_Abort_IT+0x1c0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a22      	ldr	r2, [pc, #136]	@ (8005190 <HAL_DMA_Abort_IT+0x1c4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01d      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a20      	ldr	r2, [pc, #128]	@ (8005194 <HAL_DMA_Abort_IT+0x1c8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <HAL_DMA_Abort_IT+0x1cc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1d      	ldr	r2, [pc, #116]	@ (800519c <HAL_DMA_Abort_IT+0x1d0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <HAL_DMA_Abort_IT+0x1d4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1a      	ldr	r2, [pc, #104]	@ (80051a4 <HAL_DMA_Abort_IT+0x1d8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_DMA_Abort_IT+0x17c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <HAL_DMA_Abort_IT+0x18e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e178      	b.n	800544c <HAL_DMA_Abort_IT+0x480>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e16f      	b.n	800544c <HAL_DMA_Abort_IT+0x480>
 800516c:	40020010 	.word	0x40020010
 8005170:	40020028 	.word	0x40020028
 8005174:	40020040 	.word	0x40020040
 8005178:	40020058 	.word	0x40020058
 800517c:	40020070 	.word	0x40020070
 8005180:	40020088 	.word	0x40020088
 8005184:	400200a0 	.word	0x400200a0
 8005188:	400200b8 	.word	0x400200b8
 800518c:	40020410 	.word	0x40020410
 8005190:	40020428 	.word	0x40020428
 8005194:	40020440 	.word	0x40020440
 8005198:	40020458 	.word	0x40020458
 800519c:	40020470 	.word	0x40020470
 80051a0:	40020488 	.word	0x40020488
 80051a4:	400204a0 	.word	0x400204a0
 80051a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 020e 	bic.w	r2, r2, #14
 80051ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a6c      	ldr	r2, [pc, #432]	@ (8005374 <HAL_DMA_Abort_IT+0x3a8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005378 <HAL_DMA_Abort_IT+0x3ac>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a69      	ldr	r2, [pc, #420]	@ (800537c <HAL_DMA_Abort_IT+0x3b0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a68      	ldr	r2, [pc, #416]	@ (8005380 <HAL_DMA_Abort_IT+0x3b4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a66      	ldr	r2, [pc, #408]	@ (8005384 <HAL_DMA_Abort_IT+0x3b8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a65      	ldr	r2, [pc, #404]	@ (8005388 <HAL_DMA_Abort_IT+0x3bc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a63      	ldr	r2, [pc, #396]	@ (800538c <HAL_DMA_Abort_IT+0x3c0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a62      	ldr	r2, [pc, #392]	@ (8005390 <HAL_DMA_Abort_IT+0x3c4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a60      	ldr	r2, [pc, #384]	@ (8005394 <HAL_DMA_Abort_IT+0x3c8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a5f      	ldr	r2, [pc, #380]	@ (8005398 <HAL_DMA_Abort_IT+0x3cc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5d      	ldr	r2, [pc, #372]	@ (800539c <HAL_DMA_Abort_IT+0x3d0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5c      	ldr	r2, [pc, #368]	@ (80053a0 <HAL_DMA_Abort_IT+0x3d4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a5a      	ldr	r2, [pc, #360]	@ (80053a4 <HAL_DMA_Abort_IT+0x3d8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a59      	ldr	r2, [pc, #356]	@ (80053a8 <HAL_DMA_Abort_IT+0x3dc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a57      	ldr	r2, [pc, #348]	@ (80053ac <HAL_DMA_Abort_IT+0x3e0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_Abort_IT+0x290>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a56      	ldr	r2, [pc, #344]	@ (80053b0 <HAL_DMA_Abort_IT+0x3e4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <HAL_DMA_Abort_IT+0x2a2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e007      	b.n	800527e <HAL_DMA_Abort_IT+0x2b2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3c      	ldr	r2, [pc, #240]	@ (8005374 <HAL_DMA_Abort_IT+0x3a8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d072      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a3a      	ldr	r2, [pc, #232]	@ (8005378 <HAL_DMA_Abort_IT+0x3ac>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d06d      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a39      	ldr	r2, [pc, #228]	@ (800537c <HAL_DMA_Abort_IT+0x3b0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d068      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a37      	ldr	r2, [pc, #220]	@ (8005380 <HAL_DMA_Abort_IT+0x3b4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d063      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a36      	ldr	r2, [pc, #216]	@ (8005384 <HAL_DMA_Abort_IT+0x3b8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d05e      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a34      	ldr	r2, [pc, #208]	@ (8005388 <HAL_DMA_Abort_IT+0x3bc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d059      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a33      	ldr	r2, [pc, #204]	@ (800538c <HAL_DMA_Abort_IT+0x3c0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d054      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a31      	ldr	r2, [pc, #196]	@ (8005390 <HAL_DMA_Abort_IT+0x3c4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d04f      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a30      	ldr	r2, [pc, #192]	@ (8005394 <HAL_DMA_Abort_IT+0x3c8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005398 <HAL_DMA_Abort_IT+0x3cc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2d      	ldr	r2, [pc, #180]	@ (800539c <HAL_DMA_Abort_IT+0x3d0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2b      	ldr	r2, [pc, #172]	@ (80053a0 <HAL_DMA_Abort_IT+0x3d4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2a      	ldr	r2, [pc, #168]	@ (80053a4 <HAL_DMA_Abort_IT+0x3d8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a28      	ldr	r2, [pc, #160]	@ (80053a8 <HAL_DMA_Abort_IT+0x3dc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a27      	ldr	r2, [pc, #156]	@ (80053ac <HAL_DMA_Abort_IT+0x3e0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a25      	ldr	r2, [pc, #148]	@ (80053b0 <HAL_DMA_Abort_IT+0x3e4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a24      	ldr	r2, [pc, #144]	@ (80053b4 <HAL_DMA_Abort_IT+0x3e8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <HAL_DMA_Abort_IT+0x3ec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a21      	ldr	r2, [pc, #132]	@ (80053bc <HAL_DMA_Abort_IT+0x3f0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1f      	ldr	r2, [pc, #124]	@ (80053c0 <HAL_DMA_Abort_IT+0x3f4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1e      	ldr	r2, [pc, #120]	@ (80053c4 <HAL_DMA_Abort_IT+0x3f8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <HAL_DMA_Abort_IT+0x3fc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1b      	ldr	r2, [pc, #108]	@ (80053cc <HAL_DMA_Abort_IT+0x400>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_Abort_IT+0x3a2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a19      	ldr	r2, [pc, #100]	@ (80053d0 <HAL_DMA_Abort_IT+0x404>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d132      	bne.n	80053d4 <HAL_DMA_Abort_IT+0x408>
 800536e:	2301      	movs	r3, #1
 8005370:	e031      	b.n	80053d6 <HAL_DMA_Abort_IT+0x40a>
 8005372:	bf00      	nop
 8005374:	40020010 	.word	0x40020010
 8005378:	40020028 	.word	0x40020028
 800537c:	40020040 	.word	0x40020040
 8005380:	40020058 	.word	0x40020058
 8005384:	40020070 	.word	0x40020070
 8005388:	40020088 	.word	0x40020088
 800538c:	400200a0 	.word	0x400200a0
 8005390:	400200b8 	.word	0x400200b8
 8005394:	40020410 	.word	0x40020410
 8005398:	40020428 	.word	0x40020428
 800539c:	40020440 	.word	0x40020440
 80053a0:	40020458 	.word	0x40020458
 80053a4:	40020470 	.word	0x40020470
 80053a8:	40020488 	.word	0x40020488
 80053ac:	400204a0 	.word	0x400204a0
 80053b0:	400204b8 	.word	0x400204b8
 80053b4:	58025408 	.word	0x58025408
 80053b8:	5802541c 	.word	0x5802541c
 80053bc:	58025430 	.word	0x58025430
 80053c0:	58025444 	.word	0x58025444
 80053c4:	58025458 	.word	0x58025458
 80053c8:	5802546c 	.word	0x5802546c
 80053cc:	58025480 	.word	0x58025480
 80053d0:	58025494 	.word	0x58025494
 80053d4:	2300      	movs	r3, #0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d028      	beq.n	800542c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005408:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005420:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800542a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop

08005458 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	@ 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005464:	4b67      	ldr	r3, [pc, #412]	@ (8005604 <HAL_DMA_IRQHandler+0x1ac>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a67      	ldr	r2, [pc, #412]	@ (8005608 <HAL_DMA_IRQHandler+0x1b0>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0a9b      	lsrs	r3, r3, #10
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a5f      	ldr	r2, [pc, #380]	@ (800560c <HAL_DMA_IRQHandler+0x1b4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04a      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5d      	ldr	r2, [pc, #372]	@ (8005610 <HAL_DMA_IRQHandler+0x1b8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005614 <HAL_DMA_IRQHandler+0x1bc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005618 <HAL_DMA_IRQHandler+0x1c0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d03b      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a59      	ldr	r2, [pc, #356]	@ (800561c <HAL_DMA_IRQHandler+0x1c4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d036      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a57      	ldr	r2, [pc, #348]	@ (8005620 <HAL_DMA_IRQHandler+0x1c8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a56      	ldr	r2, [pc, #344]	@ (8005624 <HAL_DMA_IRQHandler+0x1cc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d02c      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a54      	ldr	r2, [pc, #336]	@ (8005628 <HAL_DMA_IRQHandler+0x1d0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d027      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a53      	ldr	r2, [pc, #332]	@ (800562c <HAL_DMA_IRQHandler+0x1d4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a51      	ldr	r2, [pc, #324]	@ (8005630 <HAL_DMA_IRQHandler+0x1d8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a50      	ldr	r2, [pc, #320]	@ (8005634 <HAL_DMA_IRQHandler+0x1dc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a4e      	ldr	r2, [pc, #312]	@ (8005638 <HAL_DMA_IRQHandler+0x1e0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a4d      	ldr	r2, [pc, #308]	@ (800563c <HAL_DMA_IRQHandler+0x1e4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a4b      	ldr	r2, [pc, #300]	@ (8005640 <HAL_DMA_IRQHandler+0x1e8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a4a      	ldr	r2, [pc, #296]	@ (8005644 <HAL_DMA_IRQHandler+0x1ec>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_DMA_IRQHandler+0xd2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a48      	ldr	r2, [pc, #288]	@ (8005648 <HAL_DMA_IRQHandler+0x1f0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d101      	bne.n	800552e <HAL_DMA_IRQHandler+0xd6>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <HAL_DMA_IRQHandler+0xd8>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 842b 	beq.w	8005d8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2208      	movs	r2, #8
 8005540:	409a      	lsls	r2, r3
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80a2 	beq.w	8005690 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2e      	ldr	r2, [pc, #184]	@ (800560c <HAL_DMA_IRQHandler+0x1b4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d04a      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2d      	ldr	r2, [pc, #180]	@ (8005610 <HAL_DMA_IRQHandler+0x1b8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d045      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <HAL_DMA_IRQHandler+0x1bc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d040      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <HAL_DMA_IRQHandler+0x1c0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d03b      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a28      	ldr	r2, [pc, #160]	@ (800561c <HAL_DMA_IRQHandler+0x1c4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d036      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a27      	ldr	r2, [pc, #156]	@ (8005620 <HAL_DMA_IRQHandler+0x1c8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d031      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a25      	ldr	r2, [pc, #148]	@ (8005624 <HAL_DMA_IRQHandler+0x1cc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02c      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <HAL_DMA_IRQHandler+0x1d0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d027      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_DMA_IRQHandler+0x1d4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d022      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a21      	ldr	r2, [pc, #132]	@ (8005630 <HAL_DMA_IRQHandler+0x1d8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d01d      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <HAL_DMA_IRQHandler+0x1dc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_DMA_IRQHandler+0x1e0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <HAL_DMA_IRQHandler+0x1e4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005640 <HAL_DMA_IRQHandler+0x1e8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	@ (8005644 <HAL_DMA_IRQHandler+0x1ec>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_DMA_IRQHandler+0x194>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a18      	ldr	r2, [pc, #96]	@ (8005648 <HAL_DMA_IRQHandler+0x1f0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d12f      	bne.n	800564c <HAL_DMA_IRQHandler+0x1f4>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	e02e      	b.n	8005660 <HAL_DMA_IRQHandler+0x208>
 8005602:	bf00      	nop
 8005604:	24000018 	.word	0x24000018
 8005608:	1b4e81b5 	.word	0x1b4e81b5
 800560c:	40020010 	.word	0x40020010
 8005610:	40020028 	.word	0x40020028
 8005614:	40020040 	.word	0x40020040
 8005618:	40020058 	.word	0x40020058
 800561c:	40020070 	.word	0x40020070
 8005620:	40020088 	.word	0x40020088
 8005624:	400200a0 	.word	0x400200a0
 8005628:	400200b8 	.word	0x400200b8
 800562c:	40020410 	.word	0x40020410
 8005630:	40020428 	.word	0x40020428
 8005634:	40020440 	.word	0x40020440
 8005638:	40020458 	.word	0x40020458
 800563c:	40020470 	.word	0x40020470
 8005640:	40020488 	.word	0x40020488
 8005644:	400204a0 	.word	0x400204a0
 8005648:	400204b8 	.word	0x400204b8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf14      	ite	ne
 800565a:	2301      	movne	r3, #1
 800565c:	2300      	moveq	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0204 	bic.w	r2, r2, #4
 8005672:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2208      	movs	r2, #8
 800567e:	409a      	lsls	r2, r3
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d06e      	beq.n	8005784 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a69      	ldr	r2, [pc, #420]	@ (8005850 <HAL_DMA_IRQHandler+0x3f8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04a      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a67      	ldr	r2, [pc, #412]	@ (8005854 <HAL_DMA_IRQHandler+0x3fc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d045      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a66      	ldr	r2, [pc, #408]	@ (8005858 <HAL_DMA_IRQHandler+0x400>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d040      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a64      	ldr	r2, [pc, #400]	@ (800585c <HAL_DMA_IRQHandler+0x404>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d03b      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a63      	ldr	r2, [pc, #396]	@ (8005860 <HAL_DMA_IRQHandler+0x408>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d036      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a61      	ldr	r2, [pc, #388]	@ (8005864 <HAL_DMA_IRQHandler+0x40c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d031      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a60      	ldr	r2, [pc, #384]	@ (8005868 <HAL_DMA_IRQHandler+0x410>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d02c      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5e      	ldr	r2, [pc, #376]	@ (800586c <HAL_DMA_IRQHandler+0x414>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d027      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a5d      	ldr	r2, [pc, #372]	@ (8005870 <HAL_DMA_IRQHandler+0x418>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5b      	ldr	r2, [pc, #364]	@ (8005874 <HAL_DMA_IRQHandler+0x41c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01d      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5a      	ldr	r2, [pc, #360]	@ (8005878 <HAL_DMA_IRQHandler+0x420>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a58      	ldr	r2, [pc, #352]	@ (800587c <HAL_DMA_IRQHandler+0x424>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a57      	ldr	r2, [pc, #348]	@ (8005880 <HAL_DMA_IRQHandler+0x428>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a55      	ldr	r2, [pc, #340]	@ (8005884 <HAL_DMA_IRQHandler+0x42c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a54      	ldr	r2, [pc, #336]	@ (8005888 <HAL_DMA_IRQHandler+0x430>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_DMA_IRQHandler+0x2ee>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a52      	ldr	r2, [pc, #328]	@ (800588c <HAL_DMA_IRQHandler+0x434>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10a      	bne.n	800575c <HAL_DMA_IRQHandler+0x304>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e003      	b.n	8005764 <HAL_DMA_IRQHandler+0x30c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00d      	beq.n	8005784 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2201      	movs	r2, #1
 8005772:	409a      	lsls	r2, r3
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2204      	movs	r2, #4
 800578e:	409a      	lsls	r2, r3
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 808f 	beq.w	80058b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2c      	ldr	r2, [pc, #176]	@ (8005850 <HAL_DMA_IRQHandler+0x3f8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d04a      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005854 <HAL_DMA_IRQHandler+0x3fc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d045      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a29      	ldr	r2, [pc, #164]	@ (8005858 <HAL_DMA_IRQHandler+0x400>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d040      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a27      	ldr	r2, [pc, #156]	@ (800585c <HAL_DMA_IRQHandler+0x404>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d03b      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a26      	ldr	r2, [pc, #152]	@ (8005860 <HAL_DMA_IRQHandler+0x408>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d036      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a24      	ldr	r2, [pc, #144]	@ (8005864 <HAL_DMA_IRQHandler+0x40c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d031      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a23      	ldr	r2, [pc, #140]	@ (8005868 <HAL_DMA_IRQHandler+0x410>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d02c      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a21      	ldr	r2, [pc, #132]	@ (800586c <HAL_DMA_IRQHandler+0x414>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d027      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a20      	ldr	r2, [pc, #128]	@ (8005870 <HAL_DMA_IRQHandler+0x418>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005874 <HAL_DMA_IRQHandler+0x41c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01d      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1d      	ldr	r2, [pc, #116]	@ (8005878 <HAL_DMA_IRQHandler+0x420>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_DMA_IRQHandler+0x424>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_DMA_IRQHandler+0x428>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a18      	ldr	r2, [pc, #96]	@ (8005884 <HAL_DMA_IRQHandler+0x42c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <HAL_DMA_IRQHandler+0x430>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_DMA_IRQHandler+0x3e2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a15      	ldr	r2, [pc, #84]	@ (800588c <HAL_DMA_IRQHandler+0x434>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d12a      	bne.n	8005890 <HAL_DMA_IRQHandler+0x438>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	bf14      	ite	ne
 8005848:	2301      	movne	r3, #1
 800584a:	2300      	moveq	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	e023      	b.n	8005898 <HAL_DMA_IRQHandler+0x440>
 8005850:	40020010 	.word	0x40020010
 8005854:	40020028 	.word	0x40020028
 8005858:	40020040 	.word	0x40020040
 800585c:	40020058 	.word	0x40020058
 8005860:	40020070 	.word	0x40020070
 8005864:	40020088 	.word	0x40020088
 8005868:	400200a0 	.word	0x400200a0
 800586c:	400200b8 	.word	0x400200b8
 8005870:	40020410 	.word	0x40020410
 8005874:	40020428 	.word	0x40020428
 8005878:	40020440 	.word	0x40020440
 800587c:	40020458 	.word	0x40020458
 8005880:	40020470 	.word	0x40020470
 8005884:	40020488 	.word	0x40020488
 8005888:	400204a0 	.word	0x400204a0
 800588c:	400204b8 	.word	0x400204b8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2300      	movs	r3, #0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2204      	movs	r2, #4
 80058a6:	409a      	lsls	r2, r3
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b0:	f043 0204 	orr.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	2210      	movs	r2, #16
 80058c2:	409a      	lsls	r2, r3
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a6 	beq.w	8005a1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a85      	ldr	r2, [pc, #532]	@ (8005ae8 <HAL_DMA_IRQHandler+0x690>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d04a      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a83      	ldr	r2, [pc, #524]	@ (8005aec <HAL_DMA_IRQHandler+0x694>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d045      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a82      	ldr	r2, [pc, #520]	@ (8005af0 <HAL_DMA_IRQHandler+0x698>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d040      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a80      	ldr	r2, [pc, #512]	@ (8005af4 <HAL_DMA_IRQHandler+0x69c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d03b      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a7f      	ldr	r2, [pc, #508]	@ (8005af8 <HAL_DMA_IRQHandler+0x6a0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d036      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a7d      	ldr	r2, [pc, #500]	@ (8005afc <HAL_DMA_IRQHandler+0x6a4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d031      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b00 <HAL_DMA_IRQHandler+0x6a8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d02c      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a7a      	ldr	r2, [pc, #488]	@ (8005b04 <HAL_DMA_IRQHandler+0x6ac>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d027      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a79      	ldr	r2, [pc, #484]	@ (8005b08 <HAL_DMA_IRQHandler+0x6b0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d022      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a77      	ldr	r2, [pc, #476]	@ (8005b0c <HAL_DMA_IRQHandler+0x6b4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01d      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a76      	ldr	r2, [pc, #472]	@ (8005b10 <HAL_DMA_IRQHandler+0x6b8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d018      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a74      	ldr	r2, [pc, #464]	@ (8005b14 <HAL_DMA_IRQHandler+0x6bc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a73      	ldr	r2, [pc, #460]	@ (8005b18 <HAL_DMA_IRQHandler+0x6c0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00e      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a71      	ldr	r2, [pc, #452]	@ (8005b1c <HAL_DMA_IRQHandler+0x6c4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d009      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a70      	ldr	r2, [pc, #448]	@ (8005b20 <HAL_DMA_IRQHandler+0x6c8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d004      	beq.n	800596e <HAL_DMA_IRQHandler+0x516>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a6e      	ldr	r2, [pc, #440]	@ (8005b24 <HAL_DMA_IRQHandler+0x6cc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10a      	bne.n	8005984 <HAL_DMA_IRQHandler+0x52c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e009      	b.n	8005998 <HAL_DMA_IRQHandler+0x540>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d03e      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2210      	movs	r2, #16
 80059a6:	409a      	lsls	r2, r3
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d024      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	4798      	blx	r3
 80059d8:	e01f      	b.n	8005a1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01b      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
 80059ea:	e016      	b.n	8005a1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0208 	bic.w	r2, r2, #8
 8005a08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2220      	movs	r2, #32
 8005a24:	409a      	lsls	r2, r3
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8110 	beq.w	8005c50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae8 <HAL_DMA_IRQHandler+0x690>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d04a      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005aec <HAL_DMA_IRQHandler+0x694>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d045      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <HAL_DMA_IRQHandler+0x698>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d040      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a28      	ldr	r2, [pc, #160]	@ (8005af4 <HAL_DMA_IRQHandler+0x69c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d03b      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a26      	ldr	r2, [pc, #152]	@ (8005af8 <HAL_DMA_IRQHandler+0x6a0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d036      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a25      	ldr	r2, [pc, #148]	@ (8005afc <HAL_DMA_IRQHandler+0x6a4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d031      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a23      	ldr	r2, [pc, #140]	@ (8005b00 <HAL_DMA_IRQHandler+0x6a8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d02c      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	@ (8005b04 <HAL_DMA_IRQHandler+0x6ac>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d027      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a20      	ldr	r2, [pc, #128]	@ (8005b08 <HAL_DMA_IRQHandler+0x6b0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d022      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <HAL_DMA_IRQHandler+0x6b4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d01d      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <HAL_DMA_IRQHandler+0x6b8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d018      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b14 <HAL_DMA_IRQHandler+0x6bc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d013      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <HAL_DMA_IRQHandler+0x6c0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <HAL_DMA_IRQHandler+0x6c4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d009      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	@ (8005b20 <HAL_DMA_IRQHandler+0x6c8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d004      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x678>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a16      	ldr	r2, [pc, #88]	@ (8005b24 <HAL_DMA_IRQHandler+0x6cc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d12b      	bne.n	8005b28 <HAL_DMA_IRQHandler+0x6d0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0310 	and.w	r3, r3, #16
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e02a      	b.n	8005b3c <HAL_DMA_IRQHandler+0x6e4>
 8005ae6:	bf00      	nop
 8005ae8:	40020010 	.word	0x40020010
 8005aec:	40020028 	.word	0x40020028
 8005af0:	40020040 	.word	0x40020040
 8005af4:	40020058 	.word	0x40020058
 8005af8:	40020070 	.word	0x40020070
 8005afc:	40020088 	.word	0x40020088
 8005b00:	400200a0 	.word	0x400200a0
 8005b04:	400200b8 	.word	0x400200b8
 8005b08:	40020410 	.word	0x40020410
 8005b0c:	40020428 	.word	0x40020428
 8005b10:	40020440 	.word	0x40020440
 8005b14:	40020458 	.word	0x40020458
 8005b18:	40020470 	.word	0x40020470
 8005b1c:	40020488 	.word	0x40020488
 8005b20:	400204a0 	.word	0x400204a0
 8005b24:	400204b8 	.word	0x400204b8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf14      	ite	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	2300      	moveq	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 8087 	beq.w	8005c50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d139      	bne.n	8005bd2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0216 	bic.w	r2, r2, #22
 8005b6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <HAL_DMA_IRQHandler+0x736>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0208 	bic.w	r2, r2, #8
 8005b9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	223f      	movs	r2, #63	@ 0x3f
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 834a 	beq.w	800625c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
          }
          return;
 8005bd0:	e344      	b.n	800625c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d018      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d02c      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
 8005bfe:	e027      	b.n	8005c50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d023      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	4798      	blx	r3
 8005c10:	e01e      	b.n	8005c50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10f      	bne.n	8005c40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0210 	bic.w	r2, r2, #16
 8005c2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8306 	beq.w	8006266 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8088 	beq.w	8005d78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7a      	ldr	r2, [pc, #488]	@ (8005e60 <HAL_DMA_IRQHandler+0xa08>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d04a      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a79      	ldr	r2, [pc, #484]	@ (8005e64 <HAL_DMA_IRQHandler+0xa0c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d045      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a77      	ldr	r2, [pc, #476]	@ (8005e68 <HAL_DMA_IRQHandler+0xa10>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d040      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a76      	ldr	r2, [pc, #472]	@ (8005e6c <HAL_DMA_IRQHandler+0xa14>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d03b      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a74      	ldr	r2, [pc, #464]	@ (8005e70 <HAL_DMA_IRQHandler+0xa18>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d036      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a73      	ldr	r2, [pc, #460]	@ (8005e74 <HAL_DMA_IRQHandler+0xa1c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d031      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a71      	ldr	r2, [pc, #452]	@ (8005e78 <HAL_DMA_IRQHandler+0xa20>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02c      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a70      	ldr	r2, [pc, #448]	@ (8005e7c <HAL_DMA_IRQHandler+0xa24>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d027      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8005e80 <HAL_DMA_IRQHandler+0xa28>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d022      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6d      	ldr	r2, [pc, #436]	@ (8005e84 <HAL_DMA_IRQHandler+0xa2c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d01d      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8005e88 <HAL_DMA_IRQHandler+0xa30>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d018      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6a      	ldr	r2, [pc, #424]	@ (8005e8c <HAL_DMA_IRQHandler+0xa34>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a68      	ldr	r2, [pc, #416]	@ (8005e90 <HAL_DMA_IRQHandler+0xa38>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00e      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a67      	ldr	r2, [pc, #412]	@ (8005e94 <HAL_DMA_IRQHandler+0xa3c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d009      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a65      	ldr	r2, [pc, #404]	@ (8005e98 <HAL_DMA_IRQHandler+0xa40>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <HAL_DMA_IRQHandler+0x8b8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a64      	ldr	r2, [pc, #400]	@ (8005e9c <HAL_DMA_IRQHandler+0xa44>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d108      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x8ca>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e007      	b.n	8005d32 <HAL_DMA_IRQHandler+0x8da>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d307      	bcc.n	8005d4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f2      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x8da>
 8005d4c:	e000      	b.n	8005d50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d66:	e003      	b.n	8005d70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 8272 	beq.w	8006266 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
 8005d8a:	e26c      	b.n	8006266 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a43      	ldr	r2, [pc, #268]	@ (8005ea0 <HAL_DMA_IRQHandler+0xa48>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a42      	ldr	r2, [pc, #264]	@ (8005ea4 <HAL_DMA_IRQHandler+0xa4c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a40      	ldr	r2, [pc, #256]	@ (8005ea8 <HAL_DMA_IRQHandler+0xa50>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3f      	ldr	r2, [pc, #252]	@ (8005eac <HAL_DMA_IRQHandler+0xa54>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3d      	ldr	r2, [pc, #244]	@ (8005eb0 <HAL_DMA_IRQHandler+0xa58>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a3c      	ldr	r2, [pc, #240]	@ (8005eb4 <HAL_DMA_IRQHandler+0xa5c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3a      	ldr	r2, [pc, #232]	@ (8005eb8 <HAL_DMA_IRQHandler+0xa60>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x984>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a39      	ldr	r2, [pc, #228]	@ (8005ebc <HAL_DMA_IRQHandler+0xa64>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_DMA_IRQHandler+0x988>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_DMA_IRQHandler+0x98a>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 823f 	beq.w	8006266 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	2204      	movs	r2, #4
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80cd 	beq.w	8005fa0 <HAL_DMA_IRQHandler+0xb48>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80c7 	beq.w	8005fa0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d049      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8210 	beq.w	8006260 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e48:	e20a      	b.n	8006260 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8206 	beq.w	8006260 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e5c:	e200      	b.n	8006260 <HAL_DMA_IRQHandler+0xe08>
 8005e5e:	bf00      	nop
 8005e60:	40020010 	.word	0x40020010
 8005e64:	40020028 	.word	0x40020028
 8005e68:	40020040 	.word	0x40020040
 8005e6c:	40020058 	.word	0x40020058
 8005e70:	40020070 	.word	0x40020070
 8005e74:	40020088 	.word	0x40020088
 8005e78:	400200a0 	.word	0x400200a0
 8005e7c:	400200b8 	.word	0x400200b8
 8005e80:	40020410 	.word	0x40020410
 8005e84:	40020428 	.word	0x40020428
 8005e88:	40020440 	.word	0x40020440
 8005e8c:	40020458 	.word	0x40020458
 8005e90:	40020470 	.word	0x40020470
 8005e94:	40020488 	.word	0x40020488
 8005e98:	400204a0 	.word	0x400204a0
 8005e9c:	400204b8 	.word	0x400204b8
 8005ea0:	58025408 	.word	0x58025408
 8005ea4:	5802541c 	.word	0x5802541c
 8005ea8:	58025430 	.word	0x58025430
 8005eac:	58025444 	.word	0x58025444
 8005eb0:	58025458 	.word	0x58025458
 8005eb4:	5802546c 	.word	0x5802546c
 8005eb8:	58025480 	.word	0x58025480
 8005ebc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d160      	bne.n	8005f8c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a7f      	ldr	r2, [pc, #508]	@ (80060cc <HAL_DMA_IRQHandler+0xc74>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d04a      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a7d      	ldr	r2, [pc, #500]	@ (80060d0 <HAL_DMA_IRQHandler+0xc78>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d045      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80060d4 <HAL_DMA_IRQHandler+0xc7c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d040      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a7a      	ldr	r2, [pc, #488]	@ (80060d8 <HAL_DMA_IRQHandler+0xc80>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d03b      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a79      	ldr	r2, [pc, #484]	@ (80060dc <HAL_DMA_IRQHandler+0xc84>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d036      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a77      	ldr	r2, [pc, #476]	@ (80060e0 <HAL_DMA_IRQHandler+0xc88>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d031      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a76      	ldr	r2, [pc, #472]	@ (80060e4 <HAL_DMA_IRQHandler+0xc8c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d02c      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a74      	ldr	r2, [pc, #464]	@ (80060e8 <HAL_DMA_IRQHandler+0xc90>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d027      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a73      	ldr	r2, [pc, #460]	@ (80060ec <HAL_DMA_IRQHandler+0xc94>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d022      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a71      	ldr	r2, [pc, #452]	@ (80060f0 <HAL_DMA_IRQHandler+0xc98>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01d      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a70      	ldr	r2, [pc, #448]	@ (80060f4 <HAL_DMA_IRQHandler+0xc9c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a6e      	ldr	r2, [pc, #440]	@ (80060f8 <HAL_DMA_IRQHandler+0xca0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6d      	ldr	r2, [pc, #436]	@ (80060fc <HAL_DMA_IRQHandler+0xca4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a6b      	ldr	r2, [pc, #428]	@ (8006100 <HAL_DMA_IRQHandler+0xca8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8006104 <HAL_DMA_IRQHandler+0xcac>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xb12>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a68      	ldr	r2, [pc, #416]	@ (8006108 <HAL_DMA_IRQHandler+0xcb0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d108      	bne.n	8005f7c <HAL_DMA_IRQHandler+0xb24>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0208 	bic.w	r2, r2, #8
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e007      	b.n	8005f8c <HAL_DMA_IRQHandler+0xb34>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8165 	beq.w	8006260 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f9e:	e15f      	b.n	8006260 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	2202      	movs	r2, #2
 8005faa:	409a      	lsls	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80c5 	beq.w	8006140 <HAL_DMA_IRQHandler+0xce8>
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80bf 	beq.w	8006140 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2202      	movs	r2, #2
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d018      	beq.n	800600e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 813a 	beq.w	8006264 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ff8:	e134      	b.n	8006264 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 8130 	beq.w	8006264 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800600c:	e12a      	b.n	8006264 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8089 	bne.w	800612c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2b      	ldr	r2, [pc, #172]	@ (80060cc <HAL_DMA_IRQHandler+0xc74>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d04a      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a29      	ldr	r2, [pc, #164]	@ (80060d0 <HAL_DMA_IRQHandler+0xc78>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d045      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a28      	ldr	r2, [pc, #160]	@ (80060d4 <HAL_DMA_IRQHandler+0xc7c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d040      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a26      	ldr	r2, [pc, #152]	@ (80060d8 <HAL_DMA_IRQHandler+0xc80>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d03b      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a25      	ldr	r2, [pc, #148]	@ (80060dc <HAL_DMA_IRQHandler+0xc84>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d036      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a23      	ldr	r2, [pc, #140]	@ (80060e0 <HAL_DMA_IRQHandler+0xc88>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d031      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a22      	ldr	r2, [pc, #136]	@ (80060e4 <HAL_DMA_IRQHandler+0xc8c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d02c      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a20      	ldr	r2, [pc, #128]	@ (80060e8 <HAL_DMA_IRQHandler+0xc90>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d027      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1f      	ldr	r2, [pc, #124]	@ (80060ec <HAL_DMA_IRQHandler+0xc94>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d022      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1d      	ldr	r2, [pc, #116]	@ (80060f0 <HAL_DMA_IRQHandler+0xc98>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01d      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1c      	ldr	r2, [pc, #112]	@ (80060f4 <HAL_DMA_IRQHandler+0xc9c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d018      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <HAL_DMA_IRQHandler+0xca0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <HAL_DMA_IRQHandler+0xca4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00e      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a17      	ldr	r2, [pc, #92]	@ (8006100 <HAL_DMA_IRQHandler+0xca8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d009      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <HAL_DMA_IRQHandler+0xcac>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_DMA_IRQHandler+0xc62>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a14      	ldr	r2, [pc, #80]	@ (8006108 <HAL_DMA_IRQHandler+0xcb0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d128      	bne.n	800610c <HAL_DMA_IRQHandler+0xcb4>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0214 	bic.w	r2, r2, #20
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e027      	b.n	800611c <HAL_DMA_IRQHandler+0xcc4>
 80060cc:	40020010 	.word	0x40020010
 80060d0:	40020028 	.word	0x40020028
 80060d4:	40020040 	.word	0x40020040
 80060d8:	40020058 	.word	0x40020058
 80060dc:	40020070 	.word	0x40020070
 80060e0:	40020088 	.word	0x40020088
 80060e4:	400200a0 	.word	0x400200a0
 80060e8:	400200b8 	.word	0x400200b8
 80060ec:	40020410 	.word	0x40020410
 80060f0:	40020428 	.word	0x40020428
 80060f4:	40020440 	.word	0x40020440
 80060f8:	40020458 	.word	0x40020458
 80060fc:	40020470 	.word	0x40020470
 8006100:	40020488 	.word	0x40020488
 8006104:	400204a0 	.word	0x400204a0
 8006108:	400204b8 	.word	0x400204b8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 020a 	bic.w	r2, r2, #10
 800611a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8097 	beq.w	8006264 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800613e:	e091      	b.n	8006264 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2208      	movs	r2, #8
 800614a:	409a      	lsls	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8088 	beq.w	8006266 <HAL_DMA_IRQHandler+0xe0e>
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8082 	beq.w	8006266 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a41      	ldr	r2, [pc, #260]	@ (800626c <HAL_DMA_IRQHandler+0xe14>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d04a      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a3f      	ldr	r2, [pc, #252]	@ (8006270 <HAL_DMA_IRQHandler+0xe18>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d045      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a3e      	ldr	r2, [pc, #248]	@ (8006274 <HAL_DMA_IRQHandler+0xe1c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d040      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a3c      	ldr	r2, [pc, #240]	@ (8006278 <HAL_DMA_IRQHandler+0xe20>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d03b      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3b      	ldr	r2, [pc, #236]	@ (800627c <HAL_DMA_IRQHandler+0xe24>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d036      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a39      	ldr	r2, [pc, #228]	@ (8006280 <HAL_DMA_IRQHandler+0xe28>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d031      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a38      	ldr	r2, [pc, #224]	@ (8006284 <HAL_DMA_IRQHandler+0xe2c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d02c      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a36      	ldr	r2, [pc, #216]	@ (8006288 <HAL_DMA_IRQHandler+0xe30>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d027      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a35      	ldr	r2, [pc, #212]	@ (800628c <HAL_DMA_IRQHandler+0xe34>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d022      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a33      	ldr	r2, [pc, #204]	@ (8006290 <HAL_DMA_IRQHandler+0xe38>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01d      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a32      	ldr	r2, [pc, #200]	@ (8006294 <HAL_DMA_IRQHandler+0xe3c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a30      	ldr	r2, [pc, #192]	@ (8006298 <HAL_DMA_IRQHandler+0xe40>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a2f      	ldr	r2, [pc, #188]	@ (800629c <HAL_DMA_IRQHandler+0xe44>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2d      	ldr	r2, [pc, #180]	@ (80062a0 <HAL_DMA_IRQHandler+0xe48>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2c      	ldr	r2, [pc, #176]	@ (80062a4 <HAL_DMA_IRQHandler+0xe4c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_DMA_IRQHandler+0xdaa>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2a      	ldr	r2, [pc, #168]	@ (80062a8 <HAL_DMA_IRQHandler+0xe50>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <HAL_DMA_IRQHandler+0xdbc>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 021c 	bic.w	r2, r2, #28
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e007      	b.n	8006224 <HAL_DMA_IRQHandler+0xdcc>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 020e 	bic.w	r2, r2, #14
 8006222:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	2201      	movs	r2, #1
 800622e:	409a      	lsls	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d009      	beq.n	8006266 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
 800625a:	e004      	b.n	8006266 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800625c:	bf00      	nop
 800625e:	e002      	b.n	8006266 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006264:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006266:	3728      	adds	r7, #40	@ 0x28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40020010 	.word	0x40020010
 8006270:	40020028 	.word	0x40020028
 8006274:	40020040 	.word	0x40020040
 8006278:	40020058 	.word	0x40020058
 800627c:	40020070 	.word	0x40020070
 8006280:	40020088 	.word	0x40020088
 8006284:	400200a0 	.word	0x400200a0
 8006288:	400200b8 	.word	0x400200b8
 800628c:	40020410 	.word	0x40020410
 8006290:	40020428 	.word	0x40020428
 8006294:	40020440 	.word	0x40020440
 8006298:	40020458 	.word	0x40020458
 800629c:	40020470 	.word	0x40020470
 80062a0:	40020488 	.word	0x40020488
 80062a4:	400204a0 	.word	0x400204a0
 80062a8:	400204b8 	.word	0x400204b8

080062ac <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062ba:	b2db      	uxtb	r3, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a7f      	ldr	r2, [pc, #508]	@ (80064e4 <DMA_SetConfig+0x21c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d072      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a7d      	ldr	r2, [pc, #500]	@ (80064e8 <DMA_SetConfig+0x220>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d06d      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a7c      	ldr	r2, [pc, #496]	@ (80064ec <DMA_SetConfig+0x224>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d068      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a7a      	ldr	r2, [pc, #488]	@ (80064f0 <DMA_SetConfig+0x228>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d063      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a79      	ldr	r2, [pc, #484]	@ (80064f4 <DMA_SetConfig+0x22c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d05e      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a77      	ldr	r2, [pc, #476]	@ (80064f8 <DMA_SetConfig+0x230>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d059      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a76      	ldr	r2, [pc, #472]	@ (80064fc <DMA_SetConfig+0x234>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d054      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a74      	ldr	r2, [pc, #464]	@ (8006500 <DMA_SetConfig+0x238>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d04f      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a73      	ldr	r2, [pc, #460]	@ (8006504 <DMA_SetConfig+0x23c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d04a      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a71      	ldr	r2, [pc, #452]	@ (8006508 <DMA_SetConfig+0x240>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d045      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a70      	ldr	r2, [pc, #448]	@ (800650c <DMA_SetConfig+0x244>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d040      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6e      	ldr	r2, [pc, #440]	@ (8006510 <DMA_SetConfig+0x248>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d03b      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a6d      	ldr	r2, [pc, #436]	@ (8006514 <DMA_SetConfig+0x24c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d036      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a6b      	ldr	r2, [pc, #428]	@ (8006518 <DMA_SetConfig+0x250>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d031      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a6a      	ldr	r2, [pc, #424]	@ (800651c <DMA_SetConfig+0x254>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d02c      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a68      	ldr	r2, [pc, #416]	@ (8006520 <DMA_SetConfig+0x258>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d027      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a67      	ldr	r2, [pc, #412]	@ (8006524 <DMA_SetConfig+0x25c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d022      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a65      	ldr	r2, [pc, #404]	@ (8006528 <DMA_SetConfig+0x260>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a64      	ldr	r2, [pc, #400]	@ (800652c <DMA_SetConfig+0x264>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a62      	ldr	r2, [pc, #392]	@ (8006530 <DMA_SetConfig+0x268>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a61      	ldr	r2, [pc, #388]	@ (8006534 <DMA_SetConfig+0x26c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a5f      	ldr	r2, [pc, #380]	@ (8006538 <DMA_SetConfig+0x270>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5e      	ldr	r2, [pc, #376]	@ (800653c <DMA_SetConfig+0x274>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <DMA_SetConfig+0x10a>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006540 <DMA_SetConfig+0x278>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d101      	bne.n	80063d6 <DMA_SetConfig+0x10e>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <DMA_SetConfig+0x110>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00d      	beq.n	80063f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80063e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a39      	ldr	r2, [pc, #228]	@ (80064e4 <DMA_SetConfig+0x21c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d04a      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a38      	ldr	r2, [pc, #224]	@ (80064e8 <DMA_SetConfig+0x220>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d045      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a36      	ldr	r2, [pc, #216]	@ (80064ec <DMA_SetConfig+0x224>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d040      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a35      	ldr	r2, [pc, #212]	@ (80064f0 <DMA_SetConfig+0x228>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d03b      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <DMA_SetConfig+0x22c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d036      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a32      	ldr	r2, [pc, #200]	@ (80064f8 <DMA_SetConfig+0x230>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d031      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a30      	ldr	r2, [pc, #192]	@ (80064fc <DMA_SetConfig+0x234>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02c      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2f      	ldr	r2, [pc, #188]	@ (8006500 <DMA_SetConfig+0x238>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d027      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2d      	ldr	r2, [pc, #180]	@ (8006504 <DMA_SetConfig+0x23c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d022      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2c      	ldr	r2, [pc, #176]	@ (8006508 <DMA_SetConfig+0x240>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d01d      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2a      	ldr	r2, [pc, #168]	@ (800650c <DMA_SetConfig+0x244>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d018      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a29      	ldr	r2, [pc, #164]	@ (8006510 <DMA_SetConfig+0x248>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a27      	ldr	r2, [pc, #156]	@ (8006514 <DMA_SetConfig+0x24c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a26      	ldr	r2, [pc, #152]	@ (8006518 <DMA_SetConfig+0x250>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a24      	ldr	r2, [pc, #144]	@ (800651c <DMA_SetConfig+0x254>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <DMA_SetConfig+0x1d0>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a23      	ldr	r2, [pc, #140]	@ (8006520 <DMA_SetConfig+0x258>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <DMA_SetConfig+0x1d4>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <DMA_SetConfig+0x1d6>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d059      	beq.n	8006556 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	223f      	movs	r2, #63	@ 0x3f
 80064ac:	409a      	lsls	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b40      	cmp	r3, #64	@ 0x40
 80064d0:	d138      	bne.n	8006544 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064e2:	e086      	b.n	80065f2 <DMA_SetConfig+0x32a>
 80064e4:	40020010 	.word	0x40020010
 80064e8:	40020028 	.word	0x40020028
 80064ec:	40020040 	.word	0x40020040
 80064f0:	40020058 	.word	0x40020058
 80064f4:	40020070 	.word	0x40020070
 80064f8:	40020088 	.word	0x40020088
 80064fc:	400200a0 	.word	0x400200a0
 8006500:	400200b8 	.word	0x400200b8
 8006504:	40020410 	.word	0x40020410
 8006508:	40020428 	.word	0x40020428
 800650c:	40020440 	.word	0x40020440
 8006510:	40020458 	.word	0x40020458
 8006514:	40020470 	.word	0x40020470
 8006518:	40020488 	.word	0x40020488
 800651c:	400204a0 	.word	0x400204a0
 8006520:	400204b8 	.word	0x400204b8
 8006524:	58025408 	.word	0x58025408
 8006528:	5802541c 	.word	0x5802541c
 800652c:	58025430 	.word	0x58025430
 8006530:	58025444 	.word	0x58025444
 8006534:	58025458 	.word	0x58025458
 8006538:	5802546c 	.word	0x5802546c
 800653c:	58025480 	.word	0x58025480
 8006540:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	60da      	str	r2, [r3, #12]
}
 8006554:	e04d      	b.n	80065f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a29      	ldr	r2, [pc, #164]	@ (8006600 <DMA_SetConfig+0x338>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d022      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a27      	ldr	r2, [pc, #156]	@ (8006604 <DMA_SetConfig+0x33c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01d      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a26      	ldr	r2, [pc, #152]	@ (8006608 <DMA_SetConfig+0x340>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d018      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a24      	ldr	r2, [pc, #144]	@ (800660c <DMA_SetConfig+0x344>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a23      	ldr	r2, [pc, #140]	@ (8006610 <DMA_SetConfig+0x348>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <DMA_SetConfig+0x34c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a20      	ldr	r2, [pc, #128]	@ (8006618 <DMA_SetConfig+0x350>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <DMA_SetConfig+0x2de>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1e      	ldr	r2, [pc, #120]	@ (800661c <DMA_SetConfig+0x354>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <DMA_SetConfig+0x2e2>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <DMA_SetConfig+0x2e4>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d020      	beq.n	80065f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2201      	movs	r2, #1
 80065ba:	409a      	lsls	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b40      	cmp	r3, #64	@ 0x40
 80065ce:	d108      	bne.n	80065e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	60da      	str	r2, [r3, #12]
}
 80065e0:	e007      	b.n	80065f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	58025408 	.word	0x58025408
 8006604:	5802541c 	.word	0x5802541c
 8006608:	58025430 	.word	0x58025430
 800660c:	58025444 	.word	0x58025444
 8006610:	58025458 	.word	0x58025458
 8006614:	5802546c 	.word	0x5802546c
 8006618:	58025480 	.word	0x58025480
 800661c:	58025494 	.word	0x58025494

08006620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a42      	ldr	r2, [pc, #264]	@ (8006738 <DMA_CalcBaseAndBitshift+0x118>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d04a      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a41      	ldr	r2, [pc, #260]	@ (800673c <DMA_CalcBaseAndBitshift+0x11c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d045      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a3f      	ldr	r2, [pc, #252]	@ (8006740 <DMA_CalcBaseAndBitshift+0x120>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d040      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a3e      	ldr	r2, [pc, #248]	@ (8006744 <DMA_CalcBaseAndBitshift+0x124>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d03b      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3c      	ldr	r2, [pc, #240]	@ (8006748 <DMA_CalcBaseAndBitshift+0x128>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d036      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a3b      	ldr	r2, [pc, #236]	@ (800674c <DMA_CalcBaseAndBitshift+0x12c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d031      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a39      	ldr	r2, [pc, #228]	@ (8006750 <DMA_CalcBaseAndBitshift+0x130>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d02c      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a38      	ldr	r2, [pc, #224]	@ (8006754 <DMA_CalcBaseAndBitshift+0x134>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d027      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a36      	ldr	r2, [pc, #216]	@ (8006758 <DMA_CalcBaseAndBitshift+0x138>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a35      	ldr	r2, [pc, #212]	@ (800675c <DMA_CalcBaseAndBitshift+0x13c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d01d      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a33      	ldr	r2, [pc, #204]	@ (8006760 <DMA_CalcBaseAndBitshift+0x140>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a32      	ldr	r2, [pc, #200]	@ (8006764 <DMA_CalcBaseAndBitshift+0x144>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a30      	ldr	r2, [pc, #192]	@ (8006768 <DMA_CalcBaseAndBitshift+0x148>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a2f      	ldr	r2, [pc, #188]	@ (800676c <DMA_CalcBaseAndBitshift+0x14c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006770 <DMA_CalcBaseAndBitshift+0x150>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <DMA_CalcBaseAndBitshift+0xa8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006774 <DMA_CalcBaseAndBitshift+0x154>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d101      	bne.n	80066cc <DMA_CalcBaseAndBitshift+0xac>
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <DMA_CalcBaseAndBitshift+0xae>
 80066cc:	2300      	movs	r3, #0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d024      	beq.n	800671c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	3b10      	subs	r3, #16
 80066da:	4a27      	ldr	r2, [pc, #156]	@ (8006778 <DMA_CalcBaseAndBitshift+0x158>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	4a24      	ldr	r2, [pc, #144]	@ (800677c <DMA_CalcBaseAndBitshift+0x15c>)
 80066ec:	5cd3      	ldrb	r3, [r2, r3]
 80066ee:	461a      	mov	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d908      	bls.n	800670c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	4b1f      	ldr	r3, [pc, #124]	@ (8006780 <DMA_CalcBaseAndBitshift+0x160>)
 8006702:	4013      	ands	r3, r2
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	659a      	str	r2, [r3, #88]	@ 0x58
 800670a:	e00d      	b.n	8006728 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	4b1b      	ldr	r3, [pc, #108]	@ (8006780 <DMA_CalcBaseAndBitshift+0x160>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6593      	str	r3, [r2, #88]	@ 0x58
 800671a:	e005      	b.n	8006728 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40020010 	.word	0x40020010
 800673c:	40020028 	.word	0x40020028
 8006740:	40020040 	.word	0x40020040
 8006744:	40020058 	.word	0x40020058
 8006748:	40020070 	.word	0x40020070
 800674c:	40020088 	.word	0x40020088
 8006750:	400200a0 	.word	0x400200a0
 8006754:	400200b8 	.word	0x400200b8
 8006758:	40020410 	.word	0x40020410
 800675c:	40020428 	.word	0x40020428
 8006760:	40020440 	.word	0x40020440
 8006764:	40020458 	.word	0x40020458
 8006768:	40020470 	.word	0x40020470
 800676c:	40020488 	.word	0x40020488
 8006770:	400204a0 	.word	0x400204a0
 8006774:	400204b8 	.word	0x400204b8
 8006778:	aaaaaaab 	.word	0xaaaaaaab
 800677c:	0801b410 	.word	0x0801b410
 8006780:	fffffc00 	.word	0xfffffc00

08006784 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d120      	bne.n	80067da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	2b03      	cmp	r3, #3
 800679e:	d858      	bhi.n	8006852 <DMA_CheckFifoParam+0xce>
 80067a0:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <DMA_CheckFifoParam+0x24>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067b9 	.word	0x080067b9
 80067ac:	080067cb 	.word	0x080067cb
 80067b0:	080067b9 	.word	0x080067b9
 80067b4:	08006853 	.word	0x08006853
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d048      	beq.n	8006856 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067c8:	e045      	b.n	8006856 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067d2:	d142      	bne.n	800685a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067d8:	e03f      	b.n	800685a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067e2:	d123      	bne.n	800682c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d838      	bhi.n	800685e <DMA_CheckFifoParam+0xda>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <DMA_CheckFifoParam+0x70>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006805 	.word	0x08006805
 80067f8:	0800680b 	.word	0x0800680b
 80067fc:	08006805 	.word	0x08006805
 8006800:	0800681d 	.word	0x0800681d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
        break;
 8006808:	e030      	b.n	800686c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d025      	beq.n	8006862 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800681a:	e022      	b.n	8006862 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006820:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006824:	d11f      	bne.n	8006866 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800682a:	e01c      	b.n	8006866 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006830:	2b02      	cmp	r3, #2
 8006832:	d902      	bls.n	800683a <DMA_CheckFifoParam+0xb6>
 8006834:	2b03      	cmp	r3, #3
 8006836:	d003      	beq.n	8006840 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006838:	e018      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
        break;
 800683e:	e015      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00e      	beq.n	800686a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
    break;
 8006850:	e00b      	b.n	800686a <DMA_CheckFifoParam+0xe6>
        break;
 8006852:	bf00      	nop
 8006854:	e00a      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        break;
 8006856:	bf00      	nop
 8006858:	e008      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        break;
 800685a:	bf00      	nop
 800685c:	e006      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        break;
 800685e:	bf00      	nop
 8006860:	e004      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        break;
 8006862:	bf00      	nop
 8006864:	e002      	b.n	800686c <DMA_CheckFifoParam+0xe8>
        break;
 8006866:	bf00      	nop
 8006868:	e000      	b.n	800686c <DMA_CheckFifoParam+0xe8>
    break;
 800686a:	bf00      	nop
    }
  }

  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop

0800687c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a38      	ldr	r2, [pc, #224]	@ (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a36      	ldr	r2, [pc, #216]	@ (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a35      	ldr	r2, [pc, #212]	@ (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a33      	ldr	r2, [pc, #204]	@ (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a32      	ldr	r2, [pc, #200]	@ (8006980 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a30      	ldr	r2, [pc, #192]	@ (8006984 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006988 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2d      	ldr	r2, [pc, #180]	@ (800698c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01a      	beq.n	800691a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	3b08      	subs	r3, #8
 80068ec:	4a28      	ldr	r2, [pc, #160]	@ (8006990 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4b26      	ldr	r3, [pc, #152]	@ (8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a24      	ldr	r2, [pc, #144]	@ (8006998 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006908:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2201      	movs	r2, #1
 8006912:	409a      	lsls	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006918:	e024      	b.n	8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	3b10      	subs	r3, #16
 8006922:	4a1e      	ldr	r2, [pc, #120]	@ (800699c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4a1c      	ldr	r2, [pc, #112]	@ (80069a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d806      	bhi.n	8006942 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4a1b      	ldr	r2, [pc, #108]	@ (80069a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d902      	bls.n	8006942 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3308      	adds	r3, #8
 8006940:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4b18      	ldr	r3, [pc, #96]	@ (80069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006954:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	2201      	movs	r2, #1
 800695e:	409a      	lsls	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	58025408 	.word	0x58025408
 8006974:	5802541c 	.word	0x5802541c
 8006978:	58025430 	.word	0x58025430
 800697c:	58025444 	.word	0x58025444
 8006980:	58025458 	.word	0x58025458
 8006984:	5802546c 	.word	0x5802546c
 8006988:	58025480 	.word	0x58025480
 800698c:	58025494 	.word	0x58025494
 8006990:	cccccccd 	.word	0xcccccccd
 8006994:	16009600 	.word	0x16009600
 8006998:	58025880 	.word	0x58025880
 800699c:	aaaaaaab 	.word	0xaaaaaaab
 80069a0:	400204b8 	.word	0x400204b8
 80069a4:	4002040f 	.word	0x4002040f
 80069a8:	10008200 	.word	0x10008200
 80069ac:	40020880 	.word	0x40020880

080069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d04a      	beq.n	8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d847      	bhi.n	8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a25      	ldr	r2, [pc, #148]	@ (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a24      	ldr	r2, [pc, #144]	@ (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d01d      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	@ (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	@ (8006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1e      	ldr	r2, [pc, #120]	@ (8006a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1b      	ldr	r2, [pc, #108]	@ (8006a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d101      	bne.n	8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4b17      	ldr	r3, [pc, #92]	@ (8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a15      	ldr	r2, [pc, #84]	@ (8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a38:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a3a:	e009      	b.n	8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b14      	ldr	r3, [pc, #80]	@ (8006a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a11      	ldr	r2, [pc, #68]	@ (8006a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a4e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	2201      	movs	r2, #1
 8006a56:	409a      	lsls	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	58025408 	.word	0x58025408
 8006a6c:	5802541c 	.word	0x5802541c
 8006a70:	58025430 	.word	0x58025430
 8006a74:	58025444 	.word	0x58025444
 8006a78:	58025458 	.word	0x58025458
 8006a7c:	5802546c 	.word	0x5802546c
 8006a80:	58025480 	.word	0x58025480
 8006a84:	58025494 	.word	0x58025494
 8006a88:	1600963f 	.word	0x1600963f
 8006a8c:	58025940 	.word	0x58025940
 8006a90:	1000823f 	.word	0x1000823f
 8006a94:	40020940 	.word	0x40020940

08006a98 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d105      	bne.n	8006abe <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e315      	b.n	80070ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e30e      	b.n	80070ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	f040 82fd 	bne.w	80070dc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a82      	ldr	r2, [pc, #520]	@ (8006d00 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d04a      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a81      	ldr	r2, [pc, #516]	@ (8006d04 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d045      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a7f      	ldr	r2, [pc, #508]	@ (8006d08 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d040      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a7e      	ldr	r2, [pc, #504]	@ (8006d0c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d03b      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8006d10 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d036      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a7b      	ldr	r2, [pc, #492]	@ (8006d14 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d031      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a79      	ldr	r2, [pc, #484]	@ (8006d18 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d02c      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a78      	ldr	r2, [pc, #480]	@ (8006d1c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d027      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a76      	ldr	r2, [pc, #472]	@ (8006d20 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a75      	ldr	r2, [pc, #468]	@ (8006d24 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d01d      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a73      	ldr	r2, [pc, #460]	@ (8006d28 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a72      	ldr	r2, [pc, #456]	@ (8006d2c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a70      	ldr	r2, [pc, #448]	@ (8006d30 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a6f      	ldr	r2, [pc, #444]	@ (8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a6d      	ldr	r2, [pc, #436]	@ (8006d38 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a6c      	ldr	r2, [pc, #432]	@ (8006d3c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d101      	bne.n	8006b94 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d018      	beq.n	8006bcc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	223f      	movs	r2, #63	@ 0x3f
 8006bc4:	409a      	lsls	r2, r3
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	e018      	b.n	8006bfe <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	f248 0320 	movw	r3, #32800	@ 0x8020
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bea:	3304      	adds	r3, #4
 8006bec:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fb41 	bl	800728c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a3c      	ldr	r2, [pc, #240]	@ (8006d00 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d072      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a3a      	ldr	r2, [pc, #232]	@ (8006d04 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d06d      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a39      	ldr	r2, [pc, #228]	@ (8006d08 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d068      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a37      	ldr	r2, [pc, #220]	@ (8006d0c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d063      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a36      	ldr	r2, [pc, #216]	@ (8006d10 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d05e      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a34      	ldr	r2, [pc, #208]	@ (8006d14 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d059      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a33      	ldr	r2, [pc, #204]	@ (8006d18 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d054      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a31      	ldr	r2, [pc, #196]	@ (8006d1c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d04f      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a30      	ldr	r2, [pc, #192]	@ (8006d20 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d04a      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a2e      	ldr	r2, [pc, #184]	@ (8006d24 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d045      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2d      	ldr	r2, [pc, #180]	@ (8006d28 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d040      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d2c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d03b      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2a      	ldr	r2, [pc, #168]	@ (8006d30 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d036      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a28      	ldr	r2, [pc, #160]	@ (8006d34 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d031      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a27      	ldr	r2, [pc, #156]	@ (8006d38 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d02c      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	@ (8006d3c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d027      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a24      	ldr	r2, [pc, #144]	@ (8006d40 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d022      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a22      	ldr	r2, [pc, #136]	@ (8006d44 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01d      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a21      	ldr	r2, [pc, #132]	@ (8006d48 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d018      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d4c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d50 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00e      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	@ (8006d5c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d132      	bne.n	8006d60 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e031      	b.n	8006d62 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8006cfe:	bf00      	nop
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
 8006d40:	58025408 	.word	0x58025408
 8006d44:	5802541c 	.word	0x5802541c
 8006d48:	58025430 	.word	0x58025430
 8006d4c:	58025444 	.word	0x58025444
 8006d50:	58025458 	.word	0x58025458
 8006d54:	5802546c 	.word	0x5802546c
 8006d58:	58025480 	.word	0x58025480
 8006d5c:	58025494 	.word	0x58025494
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006d6e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006d80:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	@ (8006e74 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a39      	ldr	r2, [pc, #228]	@ (8006e78 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a38      	ldr	r2, [pc, #224]	@ (8006e7c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a36      	ldr	r2, [pc, #216]	@ (8006e80 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a35      	ldr	r2, [pc, #212]	@ (8006e84 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a33      	ldr	r2, [pc, #204]	@ (8006e88 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a32      	ldr	r2, [pc, #200]	@ (8006e8c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a30      	ldr	r2, [pc, #192]	@ (8006e90 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8006e94 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e98 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a2c      	ldr	r2, [pc, #176]	@ (8006e9c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a29      	ldr	r2, [pc, #164]	@ (8006ea4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a27      	ldr	r2, [pc, #156]	@ (8006ea8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a26      	ldr	r2, [pc, #152]	@ (8006eac <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a24      	ldr	r2, [pc, #144]	@ (8006eb0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d101      	bne.n	8006e26 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d043      	beq.n	8006eb4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 021e 	bic.w	r2, r3, #30
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0216 	orr.w	r2, r2, #22
 8006e3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695a      	ldr	r2, [r3, #20]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e4e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d103      	bne.n	8006e60 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d043      	beq.n	8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0208 	orr.w	r2, r2, #8
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e03a      	b.n	8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006e72:	bf00      	nop
 8006e74:	40020010 	.word	0x40020010
 8006e78:	40020028 	.word	0x40020028
 8006e7c:	40020040 	.word	0x40020040
 8006e80:	40020058 	.word	0x40020058
 8006e84:	40020070 	.word	0x40020070
 8006e88:	40020088 	.word	0x40020088
 8006e8c:	400200a0 	.word	0x400200a0
 8006e90:	400200b8 	.word	0x400200b8
 8006e94:	40020410 	.word	0x40020410
 8006e98:	40020428 	.word	0x40020428
 8006e9c:	40020440 	.word	0x40020440
 8006ea0:	40020458 	.word	0x40020458
 8006ea4:	40020470 	.word	0x40020470
 8006ea8:	40020488 	.word	0x40020488
 8006eac:	400204a0 	.word	0x400204a0
 8006eb0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f023 020e 	bic.w	r2, r3, #14
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 020a 	orr.w	r2, r2, #10
 8006ec6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0204 	orr.w	r2, r2, #4
 8006ee6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a81      	ldr	r2, [pc, #516]	@ (80070f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d072      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a80      	ldr	r2, [pc, #512]	@ (80070f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d06d      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a7e      	ldr	r2, [pc, #504]	@ (80070fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d068      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8007100 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d063      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a7b      	ldr	r2, [pc, #492]	@ (8007104 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d05e      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a7a      	ldr	r2, [pc, #488]	@ (8007108 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d059      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a78      	ldr	r2, [pc, #480]	@ (800710c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d054      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a77      	ldr	r2, [pc, #476]	@ (8007110 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d04f      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a75      	ldr	r2, [pc, #468]	@ (8007114 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d04a      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a74      	ldr	r2, [pc, #464]	@ (8007118 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d045      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a72      	ldr	r2, [pc, #456]	@ (800711c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d040      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a71      	ldr	r2, [pc, #452]	@ (8007120 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d03b      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a6f      	ldr	r2, [pc, #444]	@ (8007124 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d036      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8007128 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d031      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6c      	ldr	r2, [pc, #432]	@ (800712c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d02c      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6b      	ldr	r2, [pc, #428]	@ (8007130 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d027      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a69      	ldr	r2, [pc, #420]	@ (8007134 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d022      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a68      	ldr	r2, [pc, #416]	@ (8007138 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d01d      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a66      	ldr	r2, [pc, #408]	@ (800713c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d018      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a65      	ldr	r2, [pc, #404]	@ (8007140 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d013      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a63      	ldr	r2, [pc, #396]	@ (8007144 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00e      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a62      	ldr	r2, [pc, #392]	@ (8007148 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d009      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a60      	ldr	r2, [pc, #384]	@ (800714c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d004      	beq.n	8006fd8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8007150 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d101      	bne.n	8006fdc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01a      	beq.n	8007018 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d007      	beq.n	8007000 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ffe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007012:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007016:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a35      	ldr	r2, [pc, #212]	@ (80070f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d04a      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a34      	ldr	r2, [pc, #208]	@ (80070f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d045      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a32      	ldr	r2, [pc, #200]	@ (80070fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d040      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a31      	ldr	r2, [pc, #196]	@ (8007100 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d03b      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2f      	ldr	r2, [pc, #188]	@ (8007104 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d036      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2e      	ldr	r2, [pc, #184]	@ (8007108 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d031      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2c      	ldr	r2, [pc, #176]	@ (800710c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d02c      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2b      	ldr	r2, [pc, #172]	@ (8007110 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d027      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a29      	ldr	r2, [pc, #164]	@ (8007114 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d022      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a28      	ldr	r2, [pc, #160]	@ (8007118 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d01d      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a26      	ldr	r2, [pc, #152]	@ (800711c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d018      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a25      	ldr	r2, [pc, #148]	@ (8007120 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d013      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a23      	ldr	r2, [pc, #140]	@ (8007124 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00e      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a22      	ldr	r2, [pc, #136]	@ (8007128 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d009      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a20      	ldr	r2, [pc, #128]	@ (800712c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d004      	beq.n	80070b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007130 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d108      	bne.n	80070ca <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e00e      	b.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0201 	orr.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e005      	b.n	80070e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40020010 	.word	0x40020010
 80070f8:	40020028 	.word	0x40020028
 80070fc:	40020040 	.word	0x40020040
 8007100:	40020058 	.word	0x40020058
 8007104:	40020070 	.word	0x40020070
 8007108:	40020088 	.word	0x40020088
 800710c:	400200a0 	.word	0x400200a0
 8007110:	400200b8 	.word	0x400200b8
 8007114:	40020410 	.word	0x40020410
 8007118:	40020428 	.word	0x40020428
 800711c:	40020440 	.word	0x40020440
 8007120:	40020458 	.word	0x40020458
 8007124:	40020470 	.word	0x40020470
 8007128:	40020488 	.word	0x40020488
 800712c:	400204a0 	.word	0x400204a0
 8007130:	400204b8 	.word	0x400204b8
 8007134:	58025408 	.word	0x58025408
 8007138:	5802541c 	.word	0x5802541c
 800713c:	58025430 	.word	0x58025430
 8007140:	58025444 	.word	0x58025444
 8007144:	58025458 	.word	0x58025458
 8007148:	5802546c 	.word	0x5802546c
 800714c:	58025480 	.word	0x58025480
 8007150:	58025494 	.word	0x58025494

08007154 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a39      	ldr	r2, [pc, #228]	@ (800724c <HAL_DMAEx_ChangeMemory+0xf8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d04a      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a37      	ldr	r2, [pc, #220]	@ (8007250 <HAL_DMAEx_ChangeMemory+0xfc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d045      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a36      	ldr	r2, [pc, #216]	@ (8007254 <HAL_DMAEx_ChangeMemory+0x100>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d040      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a34      	ldr	r2, [pc, #208]	@ (8007258 <HAL_DMAEx_ChangeMemory+0x104>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d03b      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a33      	ldr	r2, [pc, #204]	@ (800725c <HAL_DMAEx_ChangeMemory+0x108>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d036      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a31      	ldr	r2, [pc, #196]	@ (8007260 <HAL_DMAEx_ChangeMemory+0x10c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d031      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a30      	ldr	r2, [pc, #192]	@ (8007264 <HAL_DMAEx_ChangeMemory+0x110>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d02c      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007268 <HAL_DMAEx_ChangeMemory+0x114>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d027      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a2d      	ldr	r2, [pc, #180]	@ (800726c <HAL_DMAEx_ChangeMemory+0x118>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007270 <HAL_DMAEx_ChangeMemory+0x11c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01d      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007274 <HAL_DMAEx_ChangeMemory+0x120>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a28      	ldr	r2, [pc, #160]	@ (8007278 <HAL_DMAEx_ChangeMemory+0x124>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a27      	ldr	r2, [pc, #156]	@ (800727c <HAL_DMAEx_ChangeMemory+0x128>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a25      	ldr	r2, [pc, #148]	@ (8007280 <HAL_DMAEx_ChangeMemory+0x12c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a24      	ldr	r2, [pc, #144]	@ (8007284 <HAL_DMAEx_ChangeMemory+0x130>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_DMAEx_ChangeMemory+0xae>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a22      	ldr	r2, [pc, #136]	@ (8007288 <HAL_DMAEx_ChangeMemory+0x134>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d101      	bne.n	8007206 <HAL_DMAEx_ChangeMemory+0xb2>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <HAL_DMAEx_ChangeMemory+0xb4>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	e010      	b.n	800723e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	611a      	str	r2, [r3, #16]
 8007224:	e00b      	b.n	800723e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	60da      	str	r2, [r3, #12]
 8007234:	e003      	b.n	800723e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	40020010 	.word	0x40020010
 8007250:	40020028 	.word	0x40020028
 8007254:	40020040 	.word	0x40020040
 8007258:	40020058 	.word	0x40020058
 800725c:	40020070 	.word	0x40020070
 8007260:	40020088 	.word	0x40020088
 8007264:	400200a0 	.word	0x400200a0
 8007268:	400200b8 	.word	0x400200b8
 800726c:	40020410 	.word	0x40020410
 8007270:	40020428 	.word	0x40020428
 8007274:	40020440 	.word	0x40020440
 8007278:	40020458 	.word	0x40020458
 800727c:	40020470 	.word	0x40020470
 8007280:	40020488 	.word	0x40020488
 8007284:	400204a0 	.word	0x400204a0
 8007288:	400204b8 	.word	0x400204b8

0800728c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a46      	ldr	r2, [pc, #280]	@ (80073b8 <DMA_MultiBufferSetConfig+0x12c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d04a      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a44      	ldr	r2, [pc, #272]	@ (80073bc <DMA_MultiBufferSetConfig+0x130>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d045      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a43      	ldr	r2, [pc, #268]	@ (80073c0 <DMA_MultiBufferSetConfig+0x134>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d040      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a41      	ldr	r2, [pc, #260]	@ (80073c4 <DMA_MultiBufferSetConfig+0x138>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d03b      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a40      	ldr	r2, [pc, #256]	@ (80073c8 <DMA_MultiBufferSetConfig+0x13c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d036      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a3e      	ldr	r2, [pc, #248]	@ (80073cc <DMA_MultiBufferSetConfig+0x140>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d031      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a3d      	ldr	r2, [pc, #244]	@ (80073d0 <DMA_MultiBufferSetConfig+0x144>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d02c      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a3b      	ldr	r2, [pc, #236]	@ (80073d4 <DMA_MultiBufferSetConfig+0x148>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d027      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a3a      	ldr	r2, [pc, #232]	@ (80073d8 <DMA_MultiBufferSetConfig+0x14c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a38      	ldr	r2, [pc, #224]	@ (80073dc <DMA_MultiBufferSetConfig+0x150>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01d      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a37      	ldr	r2, [pc, #220]	@ (80073e0 <DMA_MultiBufferSetConfig+0x154>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a35      	ldr	r2, [pc, #212]	@ (80073e4 <DMA_MultiBufferSetConfig+0x158>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a34      	ldr	r2, [pc, #208]	@ (80073e8 <DMA_MultiBufferSetConfig+0x15c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a32      	ldr	r2, [pc, #200]	@ (80073ec <DMA_MultiBufferSetConfig+0x160>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a31      	ldr	r2, [pc, #196]	@ (80073f0 <DMA_MultiBufferSetConfig+0x164>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <DMA_MultiBufferSetConfig+0xae>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2f      	ldr	r2, [pc, #188]	@ (80073f4 <DMA_MultiBufferSetConfig+0x168>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <DMA_MultiBufferSetConfig+0xb2>
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <DMA_MultiBufferSetConfig+0xb4>
 800733e:	2300      	movs	r3, #0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d019      	beq.n	8007378 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b40      	cmp	r3, #64	@ 0x40
 8007352:	d108      	bne.n	8007366 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007364:	e021      	b.n	80073aa <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]
}
 8007376:	e018      	b.n	80073aa <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	d108      	bne.n	800739a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	60da      	str	r2, [r3, #12]
}
 8007398:	e007      	b.n	80073aa <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40020010 	.word	0x40020010
 80073bc:	40020028 	.word	0x40020028
 80073c0:	40020040 	.word	0x40020040
 80073c4:	40020058 	.word	0x40020058
 80073c8:	40020070 	.word	0x40020070
 80073cc:	40020088 	.word	0x40020088
 80073d0:	400200a0 	.word	0x400200a0
 80073d4:	400200b8 	.word	0x400200b8
 80073d8:	40020410 	.word	0x40020410
 80073dc:	40020428 	.word	0x40020428
 80073e0:	40020440 	.word	0x40020440
 80073e4:	40020458 	.word	0x40020458
 80073e8:	40020470 	.word	0x40020470
 80073ec:	40020488 	.word	0x40020488
 80073f0:	400204a0 	.word	0x400204a0
 80073f4:	400204b8 	.word	0x400204b8

080073f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b089      	sub	sp, #36	@ 0x24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007406:	4b89      	ldr	r3, [pc, #548]	@ (800762c <HAL_GPIO_Init+0x234>)
 8007408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800740a:	e194      	b.n	8007736 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	2101      	movs	r1, #1
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	fa01 f303 	lsl.w	r3, r1, r3
 8007418:	4013      	ands	r3, r2
 800741a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 8186 	beq.w	8007730 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d005      	beq.n	800743c <HAL_GPIO_Init+0x44>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d130      	bne.n	800749e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	2203      	movs	r2, #3
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	43db      	mvns	r3, r3
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	4013      	ands	r3, r2
 8007452:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	4313      	orrs	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007472:	2201      	movs	r2, #1
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4013      	ands	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f003 0201 	and.w	r2, r3, #1
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	fa02 f303 	lsl.w	r3, r2, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4313      	orrs	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d017      	beq.n	80074da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	2203      	movs	r2, #3
 80074b6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ba:	43db      	mvns	r3, r3
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d123      	bne.n	800752e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	08da      	lsrs	r2, r3, #3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3208      	adds	r2, #8
 80074ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	220f      	movs	r2, #15
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	4013      	ands	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	08da      	lsrs	r2, r3, #3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3208      	adds	r2, #8
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	2203      	movs	r2, #3
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f003 0203 	and.w	r2, r3, #3
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	4313      	orrs	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80e0 	beq.w	8007730 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007570:	4b2f      	ldr	r3, [pc, #188]	@ (8007630 <HAL_GPIO_Init+0x238>)
 8007572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007576:	4a2e      	ldr	r2, [pc, #184]	@ (8007630 <HAL_GPIO_Init+0x238>)
 8007578:	f043 0302 	orr.w	r3, r3, #2
 800757c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007580:	4b2b      	ldr	r3, [pc, #172]	@ (8007630 <HAL_GPIO_Init+0x238>)
 8007582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800758e:	4a29      	ldr	r2, [pc, #164]	@ (8007634 <HAL_GPIO_Init+0x23c>)
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	3302      	adds	r3, #2
 8007596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800759a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	220f      	movs	r2, #15
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	43db      	mvns	r3, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4013      	ands	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a20      	ldr	r2, [pc, #128]	@ (8007638 <HAL_GPIO_Init+0x240>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d052      	beq.n	8007660 <HAL_GPIO_Init+0x268>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1f      	ldr	r2, [pc, #124]	@ (800763c <HAL_GPIO_Init+0x244>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d031      	beq.n	8007626 <HAL_GPIO_Init+0x22e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007640 <HAL_GPIO_Init+0x248>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02b      	beq.n	8007622 <HAL_GPIO_Init+0x22a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007644 <HAL_GPIO_Init+0x24c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d025      	beq.n	800761e <HAL_GPIO_Init+0x226>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007648 <HAL_GPIO_Init+0x250>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01f      	beq.n	800761a <HAL_GPIO_Init+0x222>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a1b      	ldr	r2, [pc, #108]	@ (800764c <HAL_GPIO_Init+0x254>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d019      	beq.n	8007616 <HAL_GPIO_Init+0x21e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007650 <HAL_GPIO_Init+0x258>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <HAL_GPIO_Init+0x21a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <HAL_GPIO_Init+0x25c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00d      	beq.n	800760e <HAL_GPIO_Init+0x216>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <HAL_GPIO_Init+0x260>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <HAL_GPIO_Init+0x212>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a17      	ldr	r2, [pc, #92]	@ (800765c <HAL_GPIO_Init+0x264>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <HAL_GPIO_Init+0x20e>
 8007602:	2309      	movs	r3, #9
 8007604:	e02d      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 8007606:	230a      	movs	r3, #10
 8007608:	e02b      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 800760a:	2308      	movs	r3, #8
 800760c:	e029      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 800760e:	2307      	movs	r3, #7
 8007610:	e027      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 8007612:	2306      	movs	r3, #6
 8007614:	e025      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 8007616:	2305      	movs	r3, #5
 8007618:	e023      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 800761a:	2304      	movs	r3, #4
 800761c:	e021      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 800761e:	2303      	movs	r3, #3
 8007620:	e01f      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 8007622:	2302      	movs	r3, #2
 8007624:	e01d      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 8007626:	2301      	movs	r3, #1
 8007628:	e01b      	b.n	8007662 <HAL_GPIO_Init+0x26a>
 800762a:	bf00      	nop
 800762c:	58000080 	.word	0x58000080
 8007630:	58024400 	.word	0x58024400
 8007634:	58000400 	.word	0x58000400
 8007638:	58020000 	.word	0x58020000
 800763c:	58020400 	.word	0x58020400
 8007640:	58020800 	.word	0x58020800
 8007644:	58020c00 	.word	0x58020c00
 8007648:	58021000 	.word	0x58021000
 800764c:	58021400 	.word	0x58021400
 8007650:	58021800 	.word	0x58021800
 8007654:	58021c00 	.word	0x58021c00
 8007658:	58022000 	.word	0x58022000
 800765c:	58022400 	.word	0x58022400
 8007660:	2300      	movs	r3, #0
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	f002 0203 	and.w	r2, r2, #3
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	4093      	lsls	r3, r2
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	4313      	orrs	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007672:	4938      	ldr	r1, [pc, #224]	@ (8007754 <HAL_GPIO_Init+0x35c>)
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	3302      	adds	r3, #2
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	43db      	mvns	r3, r3
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	4013      	ands	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	43db      	mvns	r3, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4013      	ands	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	43db      	mvns	r3, r3
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	4013      	ands	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	43db      	mvns	r3, r3
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	4013      	ands	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f ae63 	bne.w	800740c <HAL_GPIO_Init+0x14>
  }
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	3724      	adds	r7, #36	@ 0x24
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	58000400 	.word	0x58000400

08007758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	807b      	strh	r3, [r7, #2]
 8007764:	4613      	mov	r3, r2
 8007766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007768:	787b      	ldrb	r3, [r7, #1]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800776e:	887a      	ldrh	r2, [r7, #2]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007774:	e003      	b.n	800777e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007776:	887b      	ldrh	r3, [r7, #2]
 8007778:	041a      	lsls	r2, r3, #16
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	619a      	str	r2, [r3, #24]
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
	...

0800778c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e08b      	b.n	80078b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fa feb2 	bl	800251c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2224      	movs	r2, #36	@ 0x24
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80077dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d107      	bne.n	8007806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007802:	609a      	str	r2, [r3, #8]
 8007804:	e006      	b.n	8007814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d108      	bne.n	800782e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782a:	605a      	str	r2, [r3, #4]
 800782c:	e007      	b.n	800783e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800783c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6859      	ldr	r1, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4b1d      	ldr	r3, [pc, #116]	@ (80078c0 <HAL_I2C_Init+0x134>)
 800784a:	430b      	orrs	r3, r1
 800784c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800785c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69d9      	ldr	r1, [r3, #28]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1a      	ldr	r2, [r3, #32]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	02008000 	.word	0x02008000

080078c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	817b      	strh	r3, [r7, #10]
 80078d4:	4613      	mov	r3, r2
 80078d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	f040 80fd 	bne.w	8007ae0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_I2C_Master_Transmit+0x30>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e0f6      	b.n	8007ae2 <HAL_I2C_Master_Transmit+0x21e>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80078fc:	f7fb fdd2 	bl	80034a4 <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	2319      	movs	r3, #25
 8007908:	2201      	movs	r2, #1
 800790a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f001 f891 	bl	8008a36 <I2C_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e0e1      	b.n	8007ae2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2221      	movs	r2, #33	@ 0x21
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2210      	movs	r2, #16
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	893a      	ldrh	r2, [r7, #8]
 800793e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2bff      	cmp	r3, #255	@ 0xff
 800794e:	d906      	bls.n	800795e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	22ff      	movs	r2, #255	@ 0xff
 8007954:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007956:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e007      	b.n	800796e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007968:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800796c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d024      	beq.n	80079c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	1c5a      	adds	r2, r3, #1
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007990:	b29b      	uxth	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	3301      	adds	r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	8979      	ldrh	r1, [r7, #10]
 80079b2:	4b4e      	ldr	r3, [pc, #312]	@ (8007aec <HAL_I2C_Master_Transmit+0x228>)
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f001 fa8b 	bl	8008ed4 <I2C_TransferConfig>
 80079be:	e066      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	8979      	ldrh	r1, [r7, #10]
 80079c8:	4b48      	ldr	r3, [pc, #288]	@ (8007aec <HAL_I2C_Master_Transmit+0x228>)
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f001 fa80 	bl	8008ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80079d4:	e05b      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	6a39      	ldr	r1, [r7, #32]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f001 f884 	bl	8008ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e07b      	b.n	8007ae2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d034      	beq.n	8007a8e <HAL_I2C_Master_Transmit+0x1ca>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d130      	bne.n	8007a8e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2180      	movs	r1, #128	@ 0x80
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fffd 	bl	8008a36 <I2C_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e04d      	b.n	8007ae2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2bff      	cmp	r3, #255	@ 0xff
 8007a4e:	d90e      	bls.n	8007a6e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	22ff      	movs	r2, #255	@ 0xff
 8007a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	8979      	ldrh	r1, [r7, #10]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f001 fa34 	bl	8008ed4 <I2C_TransferConfig>
 8007a6c:	e00f      	b.n	8007a8e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	8979      	ldrh	r1, [r7, #10]
 8007a80:	2300      	movs	r3, #0
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 fa23 	bl	8008ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d19e      	bne.n	80079d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	6a39      	ldr	r1, [r7, #32]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 f86a 	bl	8008b76 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e01a      	b.n	8007ae2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <HAL_I2C_Master_Transmit+0x22c>)
 8007ac0:	400b      	ands	r3, r1
 8007ac2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e000      	b.n	8007ae2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007ae0:	2302      	movs	r3, #2
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	80002000 	.word	0x80002000
 8007af0:	fe00e800 	.word	0xfe00e800

08007af4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	607a      	str	r2, [r7, #4]
 8007afe:	461a      	mov	r2, r3
 8007b00:	460b      	mov	r3, r1
 8007b02:	817b      	strh	r3, [r7, #10]
 8007b04:	4613      	mov	r3, r2
 8007b06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	f040 80db 	bne.w	8007ccc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_I2C_Master_Receive+0x30>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e0d4      	b.n	8007cce <HAL_I2C_Master_Receive+0x1da>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b2c:	f7fb fcba 	bl	80034a4 <HAL_GetTick>
 8007b30:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2319      	movs	r3, #25
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 ff79 	bl	8008a36 <I2C_WaitOnFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0bf      	b.n	8007cce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2222      	movs	r2, #34	@ 0x22
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2210      	movs	r2, #16
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	893a      	ldrh	r2, [r7, #8]
 8007b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2bff      	cmp	r3, #255	@ 0xff
 8007b7e:	d90e      	bls.n	8007b9e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	22ff      	movs	r2, #255	@ 0xff
 8007b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	8979      	ldrh	r1, [r7, #10]
 8007b8e:	4b52      	ldr	r3, [pc, #328]	@ (8007cd8 <HAL_I2C_Master_Receive+0x1e4>)
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f001 f99c 	bl	8008ed4 <I2C_TransferConfig>
 8007b9c:	e06d      	b.n	8007c7a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	8979      	ldrh	r1, [r7, #10]
 8007bb0:	4b49      	ldr	r3, [pc, #292]	@ (8007cd8 <HAL_I2C_Master_Receive+0x1e4>)
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f001 f98b 	bl	8008ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007bbe:	e05c      	b.n	8007c7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	6a39      	ldr	r1, [r7, #32]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f001 f819 	bl	8008bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e07c      	b.n	8007cce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d034      	beq.n	8007c7a <HAL_I2C_Master_Receive+0x186>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d130      	bne.n	8007c7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2180      	movs	r1, #128	@ 0x80
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 ff07 	bl	8008a36 <I2C_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e04d      	b.n	8007cce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2bff      	cmp	r3, #255	@ 0xff
 8007c3a:	d90e      	bls.n	8007c5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	22ff      	movs	r2, #255	@ 0xff
 8007c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	8979      	ldrh	r1, [r7, #10]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f001 f93e 	bl	8008ed4 <I2C_TransferConfig>
 8007c58:	e00f      	b.n	8007c7a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	8979      	ldrh	r1, [r7, #10]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f001 f92d 	bl	8008ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d19d      	bne.n	8007bc0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	6a39      	ldr	r1, [r7, #32]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 ff74 	bl	8008b76 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e01a      	b.n	8007cce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6859      	ldr	r1, [r3, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <HAL_I2C_Master_Receive+0x1e8>)
 8007cac:	400b      	ands	r3, r1
 8007cae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e000      	b.n	8007cce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007ccc:	2302      	movs	r3, #2
  }
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	80002400 	.word	0x80002400
 8007cdc:	fe00e800 	.word	0xfe00e800

08007ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	0a1b      	lsrs	r3, r3, #8
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d010      	beq.n	8007d5a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	09db      	lsrs	r3, r3, #7
 8007d3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d48:	f043 0201 	orr.w	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d58:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	0a9b      	lsrs	r3, r3, #10
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	09db      	lsrs	r3, r3, #7
 8007d6a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d76:	f043 0208 	orr.w	r2, r3, #8
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d86:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	0a5b      	lsrs	r3, r3, #9
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d010      	beq.n	8007db6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	09db      	lsrs	r3, r3, #7
 8007d98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da4:	f043 0202 	orr.w	r2, r3, #2
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007db4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 030b 	and.w	r3, r3, #11
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fcdb 	bl	8008784 <I2C_ITError>
  }
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <I2C_Slave_ISR_IT+0x24>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e0ed      	b.n	8008056 <I2C_Slave_ISR_IT+0x200>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e9a:	6939      	ldr	r1, [r7, #16]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 f9c1 	bl	8008224 <I2C_ITSlaveCplt>
 8007ea2:	e0d3      	b.n	800804c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	091b      	lsrs	r3, r3, #4
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d04d      	beq.n	8007f4c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d047      	beq.n	8007f4c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d128      	bne.n	8007f18 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b28      	cmp	r3, #40	@ 0x28
 8007ed0:	d108      	bne.n	8007ee4 <I2C_Slave_ISR_IT+0x8e>
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ed8:	d104      	bne.n	8007ee4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007eda:	6939      	ldr	r1, [r7, #16]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fbfb 	bl	80086d8 <I2C_ITListenCplt>
 8007ee2:	e032      	b.n	8007f4a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b29      	cmp	r3, #41	@ 0x29
 8007eee:	d10e      	bne.n	8007f0e <I2C_Slave_ISR_IT+0xb8>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ef6:	d00a      	beq.n	8007f0e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2210      	movs	r2, #16
 8007efe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fd56 	bl	80089b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f92d 	bl	8008166 <I2C_ITSlaveSeqCplt>
 8007f0c:	e01d      	b.n	8007f4a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2210      	movs	r2, #16
 8007f14:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007f16:	e096      	b.n	8008046 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f24:	f043 0204 	orr.w	r2, r3, #4
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <I2C_Slave_ISR_IT+0xe6>
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f38:	f040 8085 	bne.w	8008046 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f40:	4619      	mov	r1, r3
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fc1e 	bl	8008784 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007f48:	e07d      	b.n	8008046 <I2C_Slave_ISR_IT+0x1f0>
 8007f4a:	e07c      	b.n	8008046 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	089b      	lsrs	r3, r3, #2
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d030      	beq.n	8007fba <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	089b      	lsrs	r3, r3, #2
 8007f5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02a      	beq.n	8007fba <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d018      	beq.n	8007fa0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f78:	b2d2      	uxtb	r2, r2
 8007f7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d14f      	bne.n	800804a <I2C_Slave_ISR_IT+0x1f4>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fb0:	d04b      	beq.n	800804a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f8d7 	bl	8008166 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007fb8:	e047      	b.n	800804a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	08db      	lsrs	r3, r3, #3
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	08db      	lsrs	r3, r3, #3
 8007fca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007fd2:	6939      	ldr	r1, [r7, #16]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f842 	bl	800805e <I2C_ITAddrCplt>
 8007fda:	e037      	b.n	800804c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d031      	beq.n	800804c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d02b      	beq.n	800804c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d018      	beq.n	8008030 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800802e:	e00d      	b.n	800804c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008036:	d002      	beq.n	800803e <I2C_Slave_ISR_IT+0x1e8>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d106      	bne.n	800804c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f891 	bl	8008166 <I2C_ITSlaveSeqCplt>
 8008044:	e002      	b.n	800804c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008046:	bf00      	nop
 8008048:	e000      	b.n	800804c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800804a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008074:	2b28      	cmp	r3, #40	@ 0x28
 8008076:	d16a      	bne.n	800814e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	0c1b      	lsrs	r3, r3, #16
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	0c1b      	lsrs	r3, r3, #16
 8008090:	b29b      	uxth	r3, r3
 8008092:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008096:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080a4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80080b2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d138      	bne.n	800812e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80080bc:	897b      	ldrh	r3, [r7, #10]
 80080be:	09db      	lsrs	r3, r3, #7
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	89bb      	ldrh	r3, [r7, #12]
 80080c4:	4053      	eors	r3, r2
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f003 0306 	and.w	r3, r3, #6
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d11c      	bne.n	800810a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80080d0:	897b      	ldrh	r3, [r7, #10]
 80080d2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d13b      	bne.n	800815e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80080fc:	89ba      	ldrh	r2, [r7, #12]
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff fe7b 	bl	8007dfe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008108:	e029      	b.n	800815e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800810a:	893b      	ldrh	r3, [r7, #8]
 800810c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800810e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 ff10 	bl	8008f38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008120:	89ba      	ldrh	r2, [r7, #12]
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fe69 	bl	8007dfe <HAL_I2C_AddrCallback>
}
 800812c:	e017      	b.n	800815e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800812e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 ff00 	bl	8008f38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008140:	89ba      	ldrh	r2, [r7, #12]
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fe59 	bl	8007dfe <HAL_I2C_AddrCallback>
}
 800814c:	e007      	b.n	800815e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2208      	movs	r2, #8
 8008154:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	0b9b      	lsrs	r3, r3, #14
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d008      	beq.n	800819c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e00d      	b.n	80081b8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	0bdb      	lsrs	r3, r3, #15
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081b6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b29      	cmp	r3, #41	@ 0x29
 80081c2:	d112      	bne.n	80081ea <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2228      	movs	r2, #40	@ 0x28
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2221      	movs	r2, #33	@ 0x21
 80081d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081d2:	2101      	movs	r1, #1
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 feaf 	bl	8008f38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fdf7 	bl	8007dd6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081e8:	e017      	b.n	800821a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f4:	d111      	bne.n	800821a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2228      	movs	r2, #40	@ 0x28
 80081fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2222      	movs	r2, #34	@ 0x22
 8008202:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008204:	2102      	movs	r1, #2
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fe96 	bl	8008f38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff fde8 	bl	8007dea <HAL_I2C_SlaveRxCpltCallback>
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008246:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2220      	movs	r2, #32
 800824e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	2b21      	cmp	r3, #33	@ 0x21
 8008254:	d002      	beq.n	800825c <I2C_ITSlaveCplt+0x38>
 8008256:	7afb      	ldrb	r3, [r7, #11]
 8008258:	2b29      	cmp	r3, #41	@ 0x29
 800825a:	d108      	bne.n	800826e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800825c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fe69 	bl	8008f38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2221      	movs	r2, #33	@ 0x21
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30
 800826c:	e019      	b.n	80082a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b22      	cmp	r3, #34	@ 0x22
 8008272:	d002      	beq.n	800827a <I2C_ITSlaveCplt+0x56>
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	2b2a      	cmp	r3, #42	@ 0x2a
 8008278:	d108      	bne.n	800828c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800827a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fe5a 	bl	8008f38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2222      	movs	r2, #34	@ 0x22
 8008288:	631a      	str	r2, [r3, #48]	@ 0x30
 800828a:	e00a      	b.n	80082a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	2b28      	cmp	r3, #40	@ 0x28
 8008290:	d107      	bne.n	80082a2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008292:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fe4e 	bl	8008f38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082b0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6859      	ldr	r1, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	4b80      	ldr	r3, [pc, #512]	@ (80084c0 <I2C_ITSlaveCplt+0x29c>)
 80082be:	400b      	ands	r3, r1
 80082c0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fb75 	bl	80089b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	0b9b      	lsrs	r3, r3, #14
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d07a      	beq.n	80083ca <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8112 	beq.w	8008512 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a73      	ldr	r2, [pc, #460]	@ (80084c4 <I2C_ITSlaveCplt+0x2a0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d059      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a71      	ldr	r2, [pc, #452]	@ (80084c8 <I2C_ITSlaveCplt+0x2a4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d053      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a6f      	ldr	r2, [pc, #444]	@ (80084cc <I2C_ITSlaveCplt+0x2a8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d04d      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a6d      	ldr	r2, [pc, #436]	@ (80084d0 <I2C_ITSlaveCplt+0x2ac>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d047      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a6b      	ldr	r2, [pc, #428]	@ (80084d4 <I2C_ITSlaveCplt+0x2b0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d041      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a69      	ldr	r2, [pc, #420]	@ (80084d8 <I2C_ITSlaveCplt+0x2b4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d03b      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a67      	ldr	r2, [pc, #412]	@ (80084dc <I2C_ITSlaveCplt+0x2b8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d035      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a65      	ldr	r2, [pc, #404]	@ (80084e0 <I2C_ITSlaveCplt+0x2bc>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d02f      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a63      	ldr	r2, [pc, #396]	@ (80084e4 <I2C_ITSlaveCplt+0x2c0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d029      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a61      	ldr	r2, [pc, #388]	@ (80084e8 <I2C_ITSlaveCplt+0x2c4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d023      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a5f      	ldr	r2, [pc, #380]	@ (80084ec <I2C_ITSlaveCplt+0x2c8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01d      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a5d      	ldr	r2, [pc, #372]	@ (80084f0 <I2C_ITSlaveCplt+0x2cc>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d017      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a5b      	ldr	r2, [pc, #364]	@ (80084f4 <I2C_ITSlaveCplt+0x2d0>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d011      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a59      	ldr	r2, [pc, #356]	@ (80084f8 <I2C_ITSlaveCplt+0x2d4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00b      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a57      	ldr	r2, [pc, #348]	@ (80084fc <I2C_ITSlaveCplt+0x2d8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d005      	beq.n	80083ae <I2C_ITSlaveCplt+0x18a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a55      	ldr	r2, [pc, #340]	@ (8008500 <I2C_ITSlaveCplt+0x2dc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d105      	bne.n	80083ba <I2C_ITSlaveCplt+0x196>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	e004      	b.n	80083c4 <I2C_ITSlaveCplt+0x1a0>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80083c8:	e0a3      	b.n	8008512 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	0bdb      	lsrs	r3, r3, #15
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 809d 	beq.w	8008512 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8090 	beq.w	8008512 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a32      	ldr	r2, [pc, #200]	@ (80084c4 <I2C_ITSlaveCplt+0x2a0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d059      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a30      	ldr	r2, [pc, #192]	@ (80084c8 <I2C_ITSlaveCplt+0x2a4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d053      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a2e      	ldr	r2, [pc, #184]	@ (80084cc <I2C_ITSlaveCplt+0x2a8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d04d      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2c      	ldr	r2, [pc, #176]	@ (80084d0 <I2C_ITSlaveCplt+0x2ac>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d047      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a2a      	ldr	r2, [pc, #168]	@ (80084d4 <I2C_ITSlaveCplt+0x2b0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d041      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a28      	ldr	r2, [pc, #160]	@ (80084d8 <I2C_ITSlaveCplt+0x2b4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d03b      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a26      	ldr	r2, [pc, #152]	@ (80084dc <I2C_ITSlaveCplt+0x2b8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d035      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a24      	ldr	r2, [pc, #144]	@ (80084e0 <I2C_ITSlaveCplt+0x2bc>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d02f      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a22      	ldr	r2, [pc, #136]	@ (80084e4 <I2C_ITSlaveCplt+0x2c0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d029      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a20      	ldr	r2, [pc, #128]	@ (80084e8 <I2C_ITSlaveCplt+0x2c4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d023      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1e      	ldr	r2, [pc, #120]	@ (80084ec <I2C_ITSlaveCplt+0x2c8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01d      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1c      	ldr	r2, [pc, #112]	@ (80084f0 <I2C_ITSlaveCplt+0x2cc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d017      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a1a      	ldr	r2, [pc, #104]	@ (80084f4 <I2C_ITSlaveCplt+0x2d0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d011      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a18      	ldr	r2, [pc, #96]	@ (80084f8 <I2C_ITSlaveCplt+0x2d4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00b      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a16      	ldr	r2, [pc, #88]	@ (80084fc <I2C_ITSlaveCplt+0x2d8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d005      	beq.n	80084b2 <I2C_ITSlaveCplt+0x28e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a14      	ldr	r2, [pc, #80]	@ (8008500 <I2C_ITSlaveCplt+0x2dc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d128      	bne.n	8008504 <I2C_ITSlaveCplt+0x2e0>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	e027      	b.n	800850e <I2C_ITSlaveCplt+0x2ea>
 80084be:	bf00      	nop
 80084c0:	fe00e800 	.word	0xfe00e800
 80084c4:	40020010 	.word	0x40020010
 80084c8:	40020028 	.word	0x40020028
 80084cc:	40020040 	.word	0x40020040
 80084d0:	40020058 	.word	0x40020058
 80084d4:	40020070 	.word	0x40020070
 80084d8:	40020088 	.word	0x40020088
 80084dc:	400200a0 	.word	0x400200a0
 80084e0:	400200b8 	.word	0x400200b8
 80084e4:	40020410 	.word	0x40020410
 80084e8:	40020428 	.word	0x40020428
 80084ec:	40020440 	.word	0x40020440
 80084f0:	40020458 	.word	0x40020458
 80084f4:	40020470 	.word	0x40020470
 80084f8:	40020488 	.word	0x40020488
 80084fc:	400204a0 	.word	0x400204a0
 8008500:	400204b8 	.word	0x400204b8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	b29b      	uxth	r3, r3
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	089b      	lsrs	r3, r3, #2
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d020      	beq.n	8008560 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f023 0304 	bic.w	r3, r3, #4
 8008524:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008530:	b2d2      	uxtb	r2, r2
 8008532:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800854a:	3b01      	subs	r3, #1
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008556:	b29b      	uxth	r3, r3
 8008558:	3b01      	subs	r3, #1
 800855a:	b29a      	uxth	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856e:	f043 0204 	orr.w	r2, r3, #4
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	091b      	lsrs	r3, r3, #4
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04a      	beq.n	8008618 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800858a:	2b00      	cmp	r3, #0
 800858c:	d044      	beq.n	8008618 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008592:	b29b      	uxth	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d128      	bne.n	80085ea <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b28      	cmp	r3, #40	@ 0x28
 80085a2:	d108      	bne.n	80085b6 <I2C_ITSlaveCplt+0x392>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085aa:	d104      	bne.n	80085b6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80085ac:	6979      	ldr	r1, [r7, #20]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f892 	bl	80086d8 <I2C_ITListenCplt>
 80085b4:	e030      	b.n	8008618 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b29      	cmp	r3, #41	@ 0x29
 80085c0:	d10e      	bne.n	80085e0 <I2C_ITSlaveCplt+0x3bc>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085c8:	d00a      	beq.n	80085e0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2210      	movs	r2, #16
 80085d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9ed 	bl	80089b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7ff fdc4 	bl	8008166 <I2C_ITSlaveSeqCplt>
 80085de:	e01b      	b.n	8008618 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2210      	movs	r2, #16
 80085e6:	61da      	str	r2, [r3, #28]
 80085e8:	e016      	b.n	8008618 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f6:	f043 0204 	orr.w	r2, r3, #4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <I2C_ITSlaveCplt+0x3e8>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800860a:	d105      	bne.n	8008618 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f8b6 	bl	8008784 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f8a5 	bl	8008784 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b28      	cmp	r3, #40	@ 0x28
 8008644:	d141      	bne.n	80086ca <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008646:	6979      	ldr	r1, [r7, #20]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f845 	bl	80086d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800864e:	e03c      	b.n	80086ca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008658:	d014      	beq.n	8008684 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fd83 	bl	8008166 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a1c      	ldr	r2, [pc, #112]	@ (80086d4 <I2C_ITSlaveCplt+0x4b0>)
 8008664:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff fbcc 	bl	8007e1a <HAL_I2C_ListenCpltCallback>
}
 8008682:	e022      	b.n	80086ca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b22      	cmp	r3, #34	@ 0x22
 800868e:	d10e      	bne.n	80086ae <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fb9f 	bl	8007dea <HAL_I2C_SlaveRxCpltCallback>
}
 80086ac:	e00d      	b.n	80086ca <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff fb86 	bl	8007dd6 <HAL_I2C_SlaveTxCpltCallback>
}
 80086ca:	bf00      	nop
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	ffff0000 	.word	0xffff0000

080086d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a26      	ldr	r2, [pc, #152]	@ (8008780 <I2C_ITListenCplt+0xa8>)
 80086e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	089b      	lsrs	r3, r3, #2
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d022      	beq.n	8008756 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800872c:	2b00      	cmp	r3, #0
 800872e:	d012      	beq.n	8008756 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800874e:	f043 0204 	orr.w	r2, r3, #4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008756:	f248 0103 	movw	r1, #32771	@ 0x8003
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fbec 	bl	8008f38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2210      	movs	r2, #16
 8008766:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff fb52 	bl	8007e1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	ffff0000 	.word	0xffff0000

08008784 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008794:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a6d      	ldr	r2, [pc, #436]	@ (8008958 <I2C_ITError+0x1d4>)
 80087a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	2b28      	cmp	r3, #40	@ 0x28
 80087ba:	d005      	beq.n	80087c8 <I2C_ITError+0x44>
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b29      	cmp	r3, #41	@ 0x29
 80087c0:	d002      	beq.n	80087c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c6:	d10b      	bne.n	80087e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087c8:	2103      	movs	r1, #3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fbb4 	bl	8008f38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2228      	movs	r2, #40	@ 0x28
 80087d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a60      	ldr	r2, [pc, #384]	@ (800895c <I2C_ITError+0x1d8>)
 80087dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80087de:	e030      	b.n	8008842 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fba7 	bl	8008f38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8e1 	bl	80089b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b60      	cmp	r3, #96	@ 0x60
 80087fa:	d01f      	beq.n	800883c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b20      	cmp	r3, #32
 8008810:	d114      	bne.n	800883c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b10      	cmp	r3, #16
 800881e:	d109      	bne.n	8008834 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2210      	movs	r2, #16
 8008826:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882c:	f043 0204 	orr.w	r2, r3, #4
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2220      	movs	r2, #32
 800883a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008846:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884c:	2b00      	cmp	r3, #0
 800884e:	d039      	beq.n	80088c4 <I2C_ITError+0x140>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b11      	cmp	r3, #17
 8008854:	d002      	beq.n	800885c <I2C_ITError+0xd8>
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b21      	cmp	r3, #33	@ 0x21
 800885a:	d133      	bne.n	80088c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800886a:	d107      	bne.n	800887c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800887a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd fd13 	bl	80062ac <HAL_DMA_GetState>
 8008886:	4603      	mov	r3, r0
 8008888:	2b01      	cmp	r3, #1
 800888a:	d017      	beq.n	80088bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008890:	4a33      	ldr	r2, [pc, #204]	@ (8008960 <I2C_ITError+0x1dc>)
 8008892:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fc fb93 	bl	8004fcc <HAL_DMA_Abort_IT>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d04d      	beq.n	8008948 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80088b6:	4610      	mov	r0, r2
 80088b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088ba:	e045      	b.n	8008948 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f851 	bl	8008964 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088c2:	e041      	b.n	8008948 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d039      	beq.n	8008940 <I2C_ITError+0x1bc>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b12      	cmp	r3, #18
 80088d0:	d002      	beq.n	80088d8 <I2C_ITError+0x154>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b22      	cmp	r3, #34	@ 0x22
 80088d6:	d133      	bne.n	8008940 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e6:	d107      	bne.n	80088f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fd fcd5 	bl	80062ac <HAL_DMA_GetState>
 8008902:	4603      	mov	r3, r0
 8008904:	2b01      	cmp	r3, #1
 8008906:	d017      	beq.n	8008938 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890c:	4a14      	ldr	r2, [pc, #80]	@ (8008960 <I2C_ITError+0x1dc>)
 800890e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891c:	4618      	mov	r0, r3
 800891e:	f7fc fb55 	bl	8004fcc <HAL_DMA_Abort_IT>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d011      	beq.n	800894c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008932:	4610      	mov	r0, r2
 8008934:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008936:	e009      	b.n	800894c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f813 	bl	8008964 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800893e:	e005      	b.n	800894c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f80f 	bl	8008964 <I2C_TreatErrorCallback>
  }
}
 8008946:	e002      	b.n	800894e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008948:	bf00      	nop
 800894a:	e000      	b.n	800894e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800894c:	bf00      	nop
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	ffff0000 	.word	0xffff0000
 800895c:	08007e57 	.word	0x08007e57
 8008960:	080089fb 	.word	0x080089fb

08008964 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b60      	cmp	r3, #96	@ 0x60
 8008976:	d10e      	bne.n	8008996 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fa57 	bl	8007e42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008994:	e009      	b.n	80089aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fa42 	bl	8007e2e <HAL_I2C_ErrorCallback>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d103      	bne.n	80089d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2200      	movs	r2, #0
 80089ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d007      	beq.n	80089ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0201 	orr.w	r2, r2, #1
 80089ec:	619a      	str	r2, [r3, #24]
  }
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	2200      	movs	r2, #0
 8008a16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a24:	2200      	movs	r2, #0
 8008a26:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff ff9b 	bl	8008964 <I2C_TreatErrorCallback>
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	603b      	str	r3, [r7, #0]
 8008a42:	4613      	mov	r3, r2
 8008a44:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a46:	e03b      	b.n	8008ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f961 	bl	8008d14 <I2C_IsErrorOccurred>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e041      	b.n	8008ae0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d02d      	beq.n	8008ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a64:	f7fa fd1e 	bl	80034a4 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d302      	bcc.n	8008a7a <I2C_WaitOnFlagUntilTimeout+0x44>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d122      	bne.n	8008ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	699a      	ldr	r2, [r3, #24]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4013      	ands	r3, r2
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	bf0c      	ite	eq
 8008a8a:	2301      	moveq	r3, #1
 8008a8c:	2300      	movne	r3, #0
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d113      	bne.n	8008ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a9c:	f043 0220 	orr.w	r2, r3, #32
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e00f      	b.n	8008ae0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	bf0c      	ite	eq
 8008ad0:	2301      	moveq	r3, #1
 8008ad2:	2300      	movne	r3, #0
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	79fb      	ldrb	r3, [r7, #7]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d0b4      	beq.n	8008a48 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008af4:	e033      	b.n	8008b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f90a 	bl	8008d14 <I2C_IsErrorOccurred>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e031      	b.n	8008b6e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d025      	beq.n	8008b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b12:	f7fa fcc7 	bl	80034a4 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d302      	bcc.n	8008b28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d11a      	bne.n	8008b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d013      	beq.n	8008b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b3a:	f043 0220 	orr.w	r2, r3, #32
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e007      	b.n	8008b6e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d1c4      	bne.n	8008af6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60f8      	str	r0, [r7, #12]
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b82:	e02f      	b.n	8008be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f8c3 	bl	8008d14 <I2C_IsErrorOccurred>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e02d      	b.n	8008bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b98:	f7fa fc84 	bl	80034a4 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d302      	bcc.n	8008bae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d11a      	bne.n	8008be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b20      	cmp	r3, #32
 8008bba:	d013      	beq.n	8008be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc0:	f043 0220 	orr.w	r2, r3, #32
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e007      	b.n	8008bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	d1c8      	bne.n	8008b84 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008c0c:	e071      	b.n	8008cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f87e 	bl	8008d14 <I2C_IsErrorOccurred>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d13b      	bne.n	8008ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d138      	bne.n	8008ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d105      	bne.n	8008c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f003 0310 	and.w	r3, r3, #16
 8008c5a:	2b10      	cmp	r3, #16
 8008c5c:	d121      	bne.n	8008ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2210      	movs	r2, #16
 8008c64:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2220      	movs	r2, #32
 8008c72:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6859      	ldr	r1, [r3, #4]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	4b24      	ldr	r3, [pc, #144]	@ (8008d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008c80:	400b      	ands	r3, r1
 8008c82:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
 8008ca0:	e002      	b.n	8008ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008ca8:	f7fa fbfc 	bl	80034a4 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d302      	bcc.n	8008cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d119      	bne.n	8008cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d116      	bne.n	8008cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d00f      	beq.n	8008cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd6:	f043 0220 	orr.w	r2, r3, #32
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d002      	beq.n	8008d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d083      	beq.n	8008c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	fe00e800 	.word	0xfe00e800

08008d14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	@ 0x28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d068      	beq.n	8008e12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2210      	movs	r2, #16
 8008d46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d48:	e049      	b.n	8008dde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d045      	beq.n	8008dde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d52:	f7fa fba7 	bl	80034a4 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d302      	bcc.n	8008d68 <I2C_IsErrorOccurred+0x54>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d13a      	bne.n	8008dde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d8a:	d121      	bne.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d92:	d01d      	beq.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d94:	7cfb      	ldrb	r3, [r7, #19]
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d01a      	beq.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008da8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008daa:	f7fa fb7b 	bl	80034a4 <HAL_GetTick>
 8008dae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008db0:	e00e      	b.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008db2:	f7fa fb77 	bl	80034a4 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b19      	cmp	r3, #25
 8008dbe:	d907      	bls.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	f043 0320 	orr.w	r3, r3, #32
 8008dc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008dce:	e006      	b.n	8008dde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d1e9      	bne.n	8008db2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d003      	beq.n	8008df4 <I2C_IsErrorOccurred+0xe0>
 8008dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0aa      	beq.n	8008d4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2220      	movs	r2, #32
 8008e02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	f043 0304 	orr.w	r3, r3, #4
 8008e0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	f043 0308 	orr.w	r3, r3, #8
 8008e4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	f043 0302 	orr.w	r3, r3, #2
 8008e6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01c      	beq.n	8008ec2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fd92 	bl	80089b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6859      	ldr	r1, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed0 <I2C_IsErrorOccurred+0x1bc>)
 8008e9a:	400b      	ands	r3, r1
 8008e9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3728      	adds	r7, #40	@ 0x28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	fe00e800 	.word	0xfe00e800

08008ed4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	817b      	strh	r3, [r7, #10]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ee6:	897b      	ldrh	r3, [r7, #10]
 8008ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eec:	7a7b      	ldrb	r3, [r7, #9]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ef4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f02:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	0d5b      	lsrs	r3, r3, #21
 8008f0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008f12:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <I2C_TransferConfig+0x60>)
 8008f14:	430b      	orrs	r3, r1
 8008f16:	43db      	mvns	r3, r3
 8008f18:	ea02 0103 	and.w	r1, r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	03ff63ff 	.word	0x03ff63ff

08008f38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f48:	887b      	ldrh	r3, [r7, #2]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00f      	beq.n	8008f72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008f58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f66:	2b28      	cmp	r3, #40	@ 0x28
 8008f68:	d003      	beq.n	8008f72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008f70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008f72:	887b      	ldrh	r3, [r7, #2]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00f      	beq.n	8008f9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008f82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008f90:	2b28      	cmp	r3, #40	@ 0x28
 8008f92:	d003      	beq.n	8008f9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008f9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008f9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	da03      	bge.n	8008fac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008faa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fac:	887b      	ldrh	r3, [r7, #2]
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d103      	bne.n	8008fba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008fb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fba:	887b      	ldrh	r3, [r7, #2]
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d103      	bne.n	8008fc8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f043 0320 	orr.w	r3, r3, #32
 8008fc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fc8:	887b      	ldrh	r3, [r7, #2]
 8008fca:	2b40      	cmp	r3, #64	@ 0x40
 8008fcc:	d103      	bne.n	8008fd6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6819      	ldr	r1, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	43da      	mvns	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	400a      	ands	r2, r1
 8008fe6:	601a      	str	r2, [r3, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b20      	cmp	r3, #32
 8009008:	d138      	bne.n	800907c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009014:	2302      	movs	r3, #2
 8009016:	e032      	b.n	800907e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2224      	movs	r2, #36	@ 0x24
 8009024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0201 	bic.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	e000      	b.n	800907e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800907c:	2302      	movs	r3, #2
  }
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b20      	cmp	r3, #32
 800909e:	d139      	bne.n	8009114 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e033      	b.n	8009116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2224      	movs	r2, #36	@ 0x24
 80090ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0201 	bic.w	r2, r2, #1
 80090cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80090dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0201 	orr.w	r2, r2, #1
 80090fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	e000      	b.n	8009116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009114:	2302      	movs	r3, #2
  }
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
	...

08009124 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e070      	b.n	8009218 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7f9 fa72 	bl	8002634 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0201 	bic.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009186:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80091b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a19      	ldr	r2, [pc, #100]	@ (8009220 <HAL_JPEG_Init+0xfc>)
 80091bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a18      	ldr	r2, [pc, #96]	@ (8009224 <HAL_JPEG_Init+0x100>)
 80091c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fe97 	bl	8009f04 <JPEG_Set_HuffEnc_Mem>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e018      	b.n	8009218 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091f4:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	0801b5f8 	.word	0x0801b5f8
 8009224:	0801b638 	.word	0x0801b638

08009228 <HAL_JPEG_ConfigEncoding>:
  * @param  pConf pointer to a JPEG_ConfTypeDef structure that contains
  *         the encoding configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_ConfigEncoding(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pConf)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t vfactor;
  uint32_t hMCU;
  uint32_t vMCU;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pConf == NULL))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <HAL_JPEG_ConfigEncoding+0x16>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_JPEG_ConfigEncoding+0x1a>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e191      	b.n	8009566 <HAL_JPEG_ConfigEncoding+0x33e>
    assert_param(IS_JPEG_COLORSPACE(pConf->ColorSpace));
    assert_param(IS_JPEG_CHROMASUBSAMPLING(pConf->ChromaSubsampling));
    assert_param(IS_JPEG_IMAGE_QUALITY(pConf->ImageQuality));

    /* Process Locked */
    __HAL_LOCK(hjpeg);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_JPEG_ConfigEncoding+0x28>
 800924c:	2302      	movs	r3, #2
 800924e:	e18a      	b.n	8009566 <HAL_JPEG_ConfigEncoding+0x33e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b01      	cmp	r3, #1
 8009262:	f040 817b 	bne.w	800955c <HAL_JPEG_ConfigEncoding+0x334>
    {
      hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      hjpeg->Conf.ColorSpace          =  pConf->ColorSpace;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]
      hjpeg->Conf.ChromaSubsampling   =  pConf->ChromaSubsampling;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	609a      	str	r2, [r3, #8]
      hjpeg->Conf.ImageHeight         =  pConf->ImageHeight;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60da      	str	r2, [r3, #12]
      hjpeg->Conf.ImageWidth          =  pConf->ImageWidth;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	611a      	str	r2, [r3, #16]
      hjpeg->Conf.ImageQuality        =  pConf->ImageQuality;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	615a      	str	r2, [r3, #20]

      /* Reset the Color Space : by default only one quantization table is used*/
      hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_COLORSPACE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80092a4:	605a      	str	r2, [r3, #4]

      /* Set Number of color components*/
      if (hjpeg->Conf.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <HAL_JPEG_ConfigEncoding+0xa8>
      {
        /*Gray Scale is only one component 8x8 blocks i.e 4:4:4*/
        hjpeg->Conf.ChromaSubsampling = JPEG_444_SUBSAMPLING;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	609a      	str	r2, [r3, #8]

        JPEG_SetColorGrayScale(hjpeg);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f991 	bl	800a5dc <JPEG_SetColorGrayScale>
        /* Set quantization table 0*/
        error = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3350      	adds	r3, #80	@ 0x50
 80092c4:	461a      	mov	r2, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 f89e 	bl	800a408 <JPEG_Set_Quantization_Mem>
 80092cc:	61f8      	str	r0, [r7, #28]
 80092ce:	e0c5      	b.n	800945c <HAL_JPEG_ConfigEncoding+0x234>
      }
      else if (hjpeg->Conf.ColorSpace == JPEG_YCBCR_COLORSPACE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b10      	cmp	r3, #16
 80092d6:	d166      	bne.n	80093a6 <HAL_JPEG_ConfigEncoding+0x17e>
      {
        /*
           Set the Color Space for YCbCr : 2 quantization tables are used
           one for Luminance(Y) and one for both Chrominances (Cb & Cr)
          */
        hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_0;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0210 	orr.w	r2, r2, #16
 80092e6:	605a      	str	r2, [r3, #4]

        JPEG_SetColorYCBCR(hjpeg);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f8ff 	bl	800a4ec <JPEG_SetColorYCBCR>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3350      	adds	r3, #80	@ 0x50
 80092f8:	461a      	mov	r2, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f884 	bl	800a408 <JPEG_Set_Quantization_Mem>
 8009300:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for component 0 and quantization table 1 for both components 1 and 2*/
        error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3390      	adds	r3, #144	@ 0x90
 800930c:	461a      	mov	r2, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f87a 	bl	800a408 <JPEG_Set_Quantization_Mem>
 8009314:	4602      	mov	r2, r0
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4313      	orrs	r3, r2
 800931a:	61fb      	str	r3, [r7, #28]

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8099 	beq.w	800945c <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 3 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 &= (~JPEG_CONFR1_COLORSPACE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8009338:	605a      	str	r2, [r3, #4]
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE_1;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f042 0220 	orr.w	r2, r2, #32
 8009348:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	33d0      	adds	r3, #208	@ 0xd0
 8009354:	461a      	mov	r2, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f001 f856 	bl	800a408 <JPEG_Set_Quantization_Mem>
 800935c:	4602      	mov	r2, r0
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	4313      	orrs	r3, r2
 8009362:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 &= (~JPEG_CONFR5_QT);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695a      	ldr	r2, [r3, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 020c 	bic.w	r2, r2, #12
 8009372:	615a      	str	r2, [r3, #20]
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0204 	orr.w	r2, r2, #4
 8009382:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 &= (~JPEG_CONFR6_QT);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 020c 	bic.w	r2, r2, #12
 8009392:	619a      	str	r2, [r3, #24]
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0208 	orr.w	r2, r2, #8
 80093a2:	619a      	str	r2, [r3, #24]
 80093a4:	e05a      	b.n	800945c <HAL_JPEG_ConfigEncoding+0x234>
        }
      }
      else /* ColorSpace == JPEG_CMYK_COLORSPACE */
      {
        JPEG_SetColorCMYK(hjpeg);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 f936 	bl	800a618 <JPEG_SetColorCMYK>

        /* Set quantization table 0*/
        error  = JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable0, (hjpeg->Instance->QMEM0));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3350      	adds	r3, #80	@ 0x50
 80093b6:	461a      	mov	r2, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f825 	bl	800a408 <JPEG_Set_Quantization_Mem>
 80093be:	61f8      	str	r0, [r7, #28]
        /*By default quantization table 0 for All components*/

        if ((hjpeg->Context & JPEG_CONTEXT_CUSTOM_TABLES) != 0UL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d047      	beq.n	800945c <HAL_JPEG_ConfigEncoding+0x234>
        {
          /*Use user customized quantization tables , 1 table per component*/
          /* use 4 quantization tables , one for each component*/
          hjpeg->Instance->CONFR1 |= JPEG_CONFR1_COLORSPACE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80093da:	605a      	str	r2, [r3, #4]

          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable1, (hjpeg->Instance->QMEM1));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3390      	adds	r3, #144	@ 0x90
 80093e6:	461a      	mov	r2, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f80d 	bl	800a408 <JPEG_Set_Quantization_Mem>
 80093ee:	4602      	mov	r2, r0
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable2, (hjpeg->Instance->QMEM2));
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	33d0      	adds	r3, #208	@ 0xd0
 8009400:	461a      	mov	r2, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 f800 	bl	800a408 <JPEG_Set_Quantization_Mem>
 8009408:	4602      	mov	r2, r0
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4313      	orrs	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]
          error |= JPEG_Set_Quantization_Mem(hjpeg, hjpeg->QuantTable3, (hjpeg->Instance->QMEM3));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800941c:	461a      	mov	r2, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fff2 	bl	800a408 <JPEG_Set_Quantization_Mem>
 8009424:	4602      	mov	r2, r0
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	4313      	orrs	r3, r2
 800942a:	61fb      	str	r3, [r7, #28]

          /*Use Quantization 1 table for component 1*/
          hjpeg->Instance->CONFR5 |=  JPEG_CONFR5_QT_0;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695a      	ldr	r2, [r3, #20]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f042 0204 	orr.w	r2, r2, #4
 800943a:	615a      	str	r2, [r3, #20]

          /*Use Quantization 2 table for component 2*/
          hjpeg->Instance->CONFR6 |=  JPEG_CONFR6_QT_1;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	699a      	ldr	r2, [r3, #24]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0208 	orr.w	r2, r2, #8
 800944a:	619a      	str	r2, [r3, #24]

          /*Use Quantization 3 table for component 3*/
          hjpeg->Instance->CONFR7 |=  JPEG_CONFR7_QT;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69da      	ldr	r2, [r3, #28]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 020c 	orr.w	r2, r2, #12
 800945a:	61da      	str	r2, [r3, #28]
        }
      }

      if (error != 0UL)
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00c      	beq.n	800947c <HAL_JPEG_ConfigEncoding+0x254>
      {
        hjpeg->ErrorCode = HAL_JPEG_ERROR_QUANT_TABLE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Set the JPEG State to ready */
        hjpeg->State = HAL_JPEG_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        return  HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e074      	b.n	8009566 <HAL_JPEG_ConfigEncoding+0x33e>
      }
      /* Set the image size*/
      /* set the number of lines*/
      MODIFY_REG(hjpeg->Instance->CONFR1, JPEG_CONFR1_YSIZE, ((hjpeg->Conf.ImageHeight & 0x0000FFFFUL) << 16));
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	b299      	uxth	r1, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	041a      	lsls	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
      /* set the number of pixels per line*/
      MODIFY_REG(hjpeg->Instance->CONFR3, JPEG_CONFR3_XSIZE, ((hjpeg->Conf.ImageWidth & 0x0000FFFFUL) << 16));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	b299      	uxth	r1, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	041a      	lsls	r2, r3, #16
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	60da      	str	r2, [r3, #12]


      if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING) /* 4:2:0*/
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d104      	bne.n	80094ba <HAL_JPEG_ConfigEncoding+0x292>
      {
        hfactor = 16;
 80094b0:	2310      	movs	r3, #16
 80094b2:	61bb      	str	r3, [r7, #24]
        vfactor = 16;
 80094b4:	2310      	movs	r3, #16
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e00c      	b.n	80094d4 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING) /* 4:2:2*/
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d104      	bne.n	80094cc <HAL_JPEG_ConfigEncoding+0x2a4>
      {
        hfactor = 16;
 80094c2:	2310      	movs	r3, #16
 80094c4:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80094c6:	2308      	movs	r3, #8
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e003      	b.n	80094d4 <HAL_JPEG_ConfigEncoding+0x2ac>
      }
      else /* Default is 8x8 MCU,  4:4:4*/
      {
        hfactor = 8;
 80094cc:	2308      	movs	r3, #8
 80094ce:	61bb      	str	r3, [r7, #24]
        vfactor = 8;
 80094d0:	2308      	movs	r3, #8
 80094d2:	617b      	str	r3, [r7, #20]
      }

      hMCU = (hjpeg->Conf.ImageWidth / hfactor);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	691a      	ldr	r2, [r3, #16]
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	fbb2 f3f3 	udiv	r3, r2, r3
 80094de:	613b      	str	r3, [r7, #16]
      if ((hjpeg->Conf.ImageWidth % hfactor) != 0UL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094ea:	69b9      	ldr	r1, [r7, #24]
 80094ec:	fb01 f202 	mul.w	r2, r1, r2
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_JPEG_ConfigEncoding+0x2d4>
      {
        hMCU++; /*+1 for horizontal incomplete MCU */
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3301      	adds	r3, #1
 80094fa:	613b      	str	r3, [r7, #16]
      }

      vMCU = (hjpeg->Conf.ImageHeight / vfactor);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	fbb2 f3f3 	udiv	r3, r2, r3
 8009506:	60fb      	str	r3, [r7, #12]
      if ((hjpeg->Conf.ImageHeight % vfactor) != 0UL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009512:	6979      	ldr	r1, [r7, #20]
 8009514:	fb01 f202 	mul.w	r2, r1, r2
 8009518:	1a9b      	subs	r3, r3, r2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <HAL_JPEG_ConfigEncoding+0x2fc>
      {
        vMCU++; /*+1 for vertical incomplete MCU */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
      }

      numberMCU = (hMCU * vMCU) - 1UL; /* Bit Field JPEG_CONFR2_NMCU shall be set to NB_MCU - 1*/
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	fb02 f303 	mul.w	r3, r2, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	60bb      	str	r3, [r7, #8]
      /* Set the number of MCU*/
      hjpeg->Instance->CONFR2 = (numberMCU & JPEG_CONFR2_NMCU);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800953a:	609a      	str	r2, [r3, #8]

      hjpeg->Context |= JPEG_CONTEXT_CONF_ENCODING;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Set the JPEG State to ready */
      hjpeg->State = HAL_JPEG_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Return function status */
      return HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	e004      	b.n	8009566 <HAL_JPEG_ConfigEncoding+0x33e>
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Return function status */
      return HAL_BUSY;
 8009564:	2302      	movs	r3, #2
    }
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <HAL_JPEG_GetInfo+0x16>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e083      	b.n	8009690 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	2b02      	cmp	r3, #2
 8009594:	d103      	bne.n	800959e <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2210      	movs	r2, #16
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e017      	b.n	80095ce <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e00c      	b.n	80095ce <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	f003 0303 	and.w	r3, r3, #3
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d103      	bne.n	80095ca <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2230      	movs	r2, #48	@ 0x30
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	e001      	b.n	80095ce <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e060      	b.n	8009690 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	0c1b      	lsrs	r3, r3, #16
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b10      	cmp	r3, #16
 80095f0:	d003      	beq.n	80095fa <HAL_JPEG_GetInfo+0x8c>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b30      	cmp	r3, #48	@ 0x30
 80095f8:	d140      	bne.n	800967c <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	091b      	lsrs	r3, r3, #4
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	091b      	lsrs	r3, r3, #4
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d109      	bne.n	800963e <HAL_JPEG_GetInfo+0xd0>
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <HAL_JPEG_GetInfo+0xd0>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d103      	bne.n	800963e <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2202      	movs	r2, #2
 800963a:	605a      	str	r2, [r3, #4]
 800963c:	e01d      	b.n	800967a <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d109      	bne.n	8009658 <HAL_JPEG_GetInfo+0xea>
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <HAL_JPEG_GetInfo+0xea>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d103      	bne.n	8009658 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	e010      	b.n	800967a <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d109      	bne.n	8009672 <HAL_JPEG_GetInfo+0x104>
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <HAL_JPEG_GetInfo+0x104>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d103      	bne.n	8009672 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2201      	movs	r2, #1
 800966e:	605a      	str	r2, [r3, #4]
 8009670:	e003      	b.n	800967a <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009678:	e003      	b.n	8009682 <HAL_JPEG_GetInfo+0x114>
 800967a:	e002      	b.n	8009682 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2200      	movs	r2, #0
 8009680:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 fea2 	bl	800b3cc <JPEG_GetQuality>
 8009688:	4602      	mov	r2, r0
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_JPEG_Encode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Encode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataInMCU, uint32_t InDataLength,
                                       uint8_t *pDataOut, uint32_t OutDataLength)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataInMCU == NULL) || (pDataOut == NULL))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_JPEG_Encode_DMA+0x20>
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_JPEG_Encode_DMA+0x20>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <HAL_JPEG_Encode_DMA+0x24>
  {
    return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e059      	b.n	8009770 <HAL_JPEG_Encode_DMA+0xd8>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_JPEG_Encode_DMA+0x32>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e052      	b.n	8009770 <HAL_JPEG_Encode_DMA+0xd8>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State != HAL_JPEG_STATE_READY)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d005      	beq.n	80096ea <HAL_JPEG_Encode_DMA+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 80096e6:	2302      	movs	r3, #2
 80096e8:	e042      	b.n	8009770 <HAL_JPEG_Encode_DMA+0xd8>
  }
  else
  {
    if ((hjpeg->Context & JPEG_CONTEXT_CONF_ENCODING) == JPEG_CONTEXT_CONF_ENCODING)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f6:	d134      	bne.n	8009762 <HAL_JPEG_Encode_DMA+0xca>
    {
      /*Change JPEG state*/
      hjpeg->State = HAL_JPEG_STATE_BUSY_ENCODING;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2203      	movs	r2, #3
 80096fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /*Set the Context to Encode with DMA*/
      hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009704:	f023 020f 	bic.w	r2, r3, #15
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	655a      	str	r2, [r3, #84]	@ 0x54
      hjpeg->Context |= (JPEG_CONTEXT_ENCODE | JPEG_CONTEXT_DMA);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009710:	f043 020d 	orr.w	r2, r3, #13
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	655a      	str	r2, [r3, #84]	@ 0x54

      /*Store In/out buffers pointers and size*/
      hjpeg->pJpegInBuffPtr = pDataInMCU;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	619a      	str	r2, [r3, #24]
      hjpeg->pJpegOutBuffPtr = pDataOut;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	61da      	str	r2, [r3, #28]
      hjpeg->InDataLength = InDataLength;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	629a      	str	r2, [r3, #40]	@ 0x28
      hjpeg->OutDataLength = OutDataLength;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	69ba      	ldr	r2, [r7, #24]
 800972e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /*Reset In/out data counter */
      hjpeg->JpegInCount = 0;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	621a      	str	r2, [r3, #32]
      hjpeg->JpegOutCount = 0;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Init decoding process*/
      JPEG_Init_Process(hjpeg);
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 ffd5 	bl	800a6ec <JPEG_Init_Process>

      /* JPEG encoding process using DMA */
      if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f001 faf6 	bl	800ad34 <JPEG_DMA_StartProcess>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00f      	beq.n	800976e <HAL_JPEG_Encode_DMA+0xd6>
      {
        /* Update State */
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2206      	movs	r2, #6
 8009752:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        /* Process Unlocked */
        __HAL_UNLOCK(hjpeg);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e006      	b.n	8009770 <HAL_JPEG_Encode_DMA+0xd8>

    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <HAL_JPEG_Encode_DMA+0xd8>
    }
  }
  /* Return function status */
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978a:	f003 030c 	and.w	r3, r3, #12
 800978e:	2b0c      	cmp	r3, #12
 8009790:	d116      	bne.n	80097c0 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d033      	beq.n	800981a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097b6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80097be:	e02c      	b.n	800981a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097c4:	f003 030c 	and.w	r3, r3, #12
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d126      	bne.n	800981a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f043 0306 	orr.w	r3, r3, #6
 80097e8:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d009      	beq.n	8009808 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009806:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	43da      	mvns	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	400a      	ands	r2, r1
 8009818:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009864:	bf00      	nop
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800987a:	bf00      	nop
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	3b03      	subs	r3, #3
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d813      	bhi.n	80098d8 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b4:	f003 030c 	and.w	r3, r3, #12
 80098b8:	2b08      	cmp	r3, #8
 80098ba:	d103      	bne.n	80098c4 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 ff89 	bl	800a7d4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80098c2:	e00b      	b.n	80098dc <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c8:	f003 030c 	and.w	r3, r3, #12
 80098cc:	2b0c      	cmp	r3, #12
 80098ce:	d105      	bne.n	80098dc <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 fac9 	bl	800ae68 <JPEG_DMA_ContinueProcess>
      break;
 80098d6:	e001      	b.n	80098dc <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <HAL_JPEG_IRQHandler+0x44>
      break;
 80098dc:	bf00      	nop
  }
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b08b      	sub	sp, #44	@ 0x2c
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
 80098f2:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80098f8:	2300      	movs	r3, #0
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	e020      	b.n	8009940 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	4413      	add	r3, r2
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009908:	6a3a      	ldr	r2, [r7, #32]
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	4413      	add	r3, r2
 800990e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009912:	d90f      	bls.n	8009934 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e055      	b.n	80099c4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	b2da      	uxtb	r2, r3
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	440b      	add	r3, r1
 8009922:	3201      	adds	r2, #1
 8009924:	b2d2      	uxtb	r2, r2
 8009926:	701a      	strb	r2, [r3, #0]
      p++;
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	3301      	adds	r3, #1
 800992c:	623b      	str	r3, [r7, #32]
      i--;
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	3b01      	subs	r3, #1
 8009932:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1ee      	bne.n	8009918 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	3301      	adds	r3, #1
 800993e:	61fb      	str	r3, [r7, #28]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b0f      	cmp	r3, #15
 8009944:	d9db      	bls.n	80098fe <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	4413      	add	r3, r2
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	6a3a      	ldr	r2, [r7, #32]
 8009954:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	617b      	str	r3, [r7, #20]
  p = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009964:	e027      	b.n	80099b6 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	4413      	add	r3, r2
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	601a      	str	r2, [r3, #0]
      p++;
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	3301      	adds	r3, #1
 8009976:	623b      	str	r3, [r7, #32]
      code++;
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	3301      	adds	r3, #1
 800997c:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	4413      	add	r3, r2
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	4293      	cmp	r3, r2
 800998c:	d0eb      	beq.n	8009966 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b1f      	cmp	r3, #31
 8009992:	d901      	bls.n	8009998 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e015      	b.n	80099c4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009998:	2201      	movs	r2, #1
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	fa02 f303 	lsl.w	r3, r2, r3
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d301      	bcc.n	80099aa <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e00c      	b.n	80099c4 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	61bb      	str	r3, [r7, #24]
    si++;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	3301      	adds	r3, #1
 80099b4:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	4413      	add	r3, r2
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1dd      	bne.n	800997e <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	372c      	adds	r7, #44	@ 0x2c
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80099dc:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80099e0:	6018      	str	r0, [r3, #0]
 80099e2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80099e6:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80099ea:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80099ec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80099f0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	f107 0308 	add.w	r3, r7, #8
 80099fa:	f107 020c 	add.w	r2, r7, #12
 80099fe:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009a02:	f7ff ff70 	bl	80098e6 <JPEG_Bits_To_SizeCodes>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009a0c:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009a14:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a18:	e075      	b.n	8009b06 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009a20:	e067      	b.n	8009af2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009a22:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a26:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a30:	4413      	add	r3, r2
 8009a32:	3310      	adds	r3, #16
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009a3a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009a42:	23a0      	movs	r3, #160	@ 0xa0
 8009a44:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a48:	e021      	b.n	8009a8e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009a4a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a4e:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a50:	d103      	bne.n	8009a5a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009a52:	23a1      	movs	r3, #161	@ 0xa1
 8009a54:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a58:	e019      	b.n	8009a8e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009a5a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	f003 030f 	and.w	r3, r3, #15
 8009a64:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009a68:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a6c:	f003 030f 	and.w	r3, r3, #15
 8009a70:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009a74:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	461a      	mov	r2, r3
 8009a82:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009a86:	4413      	add	r3, r2
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009a8e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a92:	2ba1      	cmp	r3, #161	@ 0xa1
 8009a94:	d901      	bls.n	8009a9a <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009a96:	2301      	movs	r3, #1
 8009a98:	e035      	b.n	8009b06 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009a9a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a9e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009aa2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aaa:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009aae:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ab8:	3328      	adds	r3, #40	@ 0x28
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	440b      	add	r3, r1
 8009abe:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009ac0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ac4:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009ac8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009acc:	4413      	add	r3, r2
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b2d9      	uxtb	r1, r3
 8009ad4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ad8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ae2:	4413      	add	r3, r2
 8009ae4:	460a      	mov	r2, r1
 8009ae6:	701a      	strb	r2, [r3, #0]
      k++;
 8009ae8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009aec:	3301      	adds	r3, #1
 8009aee:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009af2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009af6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d38e      	bcc.n	8009a22 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b1c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b20:	6018      	str	r0, [r3, #0]
 8009b22:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b26:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b2a:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009b2c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b30:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009b3a:	f107 0208 	add.w	r2, r7, #8
 8009b3e:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009b42:	f7ff fed0 	bl	80098e6 <JPEG_Bits_To_SizeCodes>
 8009b46:	4603      	mov	r3, r0
 8009b48:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009b4c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009b54:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b58:	e048      	b.n	8009bec <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009b60:	e03d      	b.n	8009bde <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009b62:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b66:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009b70:	4413      	add	r3, r2
 8009b72:	3310      	adds	r3, #16
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009b7a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009b7e:	2b0b      	cmp	r3, #11
 8009b80:	d901      	bls.n	8009b86 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009b82:	2301      	movs	r3, #1
 8009b84:	e032      	b.n	8009bec <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009b86:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b8a:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009b8e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b96:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b9a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b9e:	6819      	ldr	r1, [r3, #0]
 8009ba0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009bac:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bb0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009bb4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009bb8:	4413      	add	r3, r2
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	b2d9      	uxtb	r1, r3
 8009bc0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bc4:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bce:	4413      	add	r3, r2
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	701a      	strb	r2, [r3, #0]
      k++;
 8009bd4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009bd8:	3301      	adds	r3, #1
 8009bda:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009bde:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009be2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d3bb      	bcc.n	8009b62 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b09a      	sub	sp, #104	@ 0x68
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d106      	bne.n	8009c1e <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c18:	3318      	adds	r3, #24
 8009c1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c1c:	e00f      	b.n	8009c3e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d106      	bne.n	8009c3a <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c34:	3318      	adds	r3, #24
 8009c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c38:	e001      	b.n	8009c3e <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e059      	b.n	8009cf2 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d055      	beq.n	8009cf0 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009c44:	f107 0314 	add.w	r3, r7, #20
 8009c48:	4619      	mov	r1, r3
 8009c4a:	68b8      	ldr	r0, [r7, #8]
 8009c4c:	f7ff ff60 	bl	8009b10 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009c56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c62:	e046      	b.n	8009cf2 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c66:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c6a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009c6e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c72:	3304      	adds	r3, #4
 8009c74:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c78:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009c7c:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009c7e:	230c      	movs	r3, #12
 8009c80:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009c82:	e032      	b.n	8009cea <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c86:	3b01      	subs	r3, #1
 8009c88:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009c90:	f107 0214 	add.w	r2, r7, #20
 8009c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c96:	4413      	add	r3, r2
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	3368      	adds	r3, #104	@ 0x68
 8009ca8:	443b      	add	r3, r7
 8009caa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009cba:	f107 0214 	add.w	r2, r7, #20
 8009cbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ccc:	3302      	adds	r3, #2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	3368      	adds	r3, #104	@ 0x68
 8009cd2:	443b      	add	r3, r7
 8009cd4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ce0:	041a      	lsls	r2, r3, #16
 8009ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce8:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d8c9      	bhi.n	8009c84 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3768      	adds	r7, #104	@ 0x68
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d08:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d0c:	6018      	str	r0, [r3, #0]
 8009d0e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d12:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d16:	6019      	str	r1, [r3, #0]
 8009d18:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d1c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009d20:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009d22:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d26:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d32:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d36:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d10c      	bne.n	8009d5a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d40:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d44:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d50:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d54:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d58:	e01d      	b.n	8009d96 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009d5a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d5e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009d6a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d6e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d10c      	bne.n	8009d92 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d78:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d7c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009d88:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d8c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d90:	e001      	b.n	8009d96 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e0a8      	b.n	8009ee8 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009d96:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d9a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 80a0 	beq.w	8009ee6 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009da6:	f107 0214 	add.w	r2, r7, #20
 8009daa:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dae:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009db2:	4611      	mov	r1, r2
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	f7ff fe0b 	bl	80099d0 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009dc0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009dc8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009dcc:	e08c      	b.n	8009ee8 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009dce:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009dd2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009ddc:	e00e      	b.n	8009dfc <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009dde:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009de2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009de6:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009de8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009dec:	3304      	adds	r3, #4
 8009dee:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009df2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009df6:	3301      	adds	r3, #1
 8009df8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009dfc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d9ec      	bls.n	8009dde <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009e04:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e08:	4a3a      	ldr	r2, [pc, #232]	@ (8009ef4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009e0a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e0c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e10:	3304      	adds	r3, #4
 8009e12:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009e16:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e1a:	4a37      	ldr	r2, [pc, #220]	@ (8009ef8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009e1c:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e1e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e22:	3304      	adds	r3, #4
 8009e24:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009e28:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e2c:	4a33      	ldr	r2, [pc, #204]	@ (8009efc <JPEG_Set_HuffAC_Mem+0x200>)
 8009e2e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e30:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e34:	3304      	adds	r3, #4
 8009e36:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009e3a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e3e:	4a30      	ldr	r2, [pc, #192]	@ (8009f00 <JPEG_Set_HuffAC_Mem+0x204>)
 8009e40:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009e42:	23a2      	movs	r3, #162	@ 0xa2
 8009e44:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009e48:	e049      	b.n	8009ede <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009e4a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009e54:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e58:	3b04      	subs	r3, #4
 8009e5a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e5e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e62:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009e66:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e6a:	4413      	add	r3, r2
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009e74:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e78:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009e7c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e80:	3328      	adds	r3, #40	@ 0x28
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009e90:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e94:	3b01      	subs	r3, #1
 8009e96:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e9a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e9e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009ea2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ea6:	4413      	add	r3, r2
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	021b      	lsls	r3, r3, #8
 8009eac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009eb0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009eb4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009eb8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ebc:	3328      	adds	r3, #40	@ 0x28
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009ecc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009ed0:	041a      	lsls	r2, r3, #16
 8009ed2:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009edc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009ede:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d8b1      	bhi.n	8009e4a <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0fd10fd0 	.word	0x0fd10fd0
 8009ef8:	0fd30fd2 	.word	0x0fd30fd2
 8009efc:	0fd50fd4 	.word	0x0fd50fd4
 8009f00:	0fd70fd6 	.word	0x0fd70fd6

08009f04 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f84d 	bl	8009fac <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	491f      	ldr	r1, [pc, #124]	@ (8009f9c <JPEG_Set_HuffEnc_Mem+0x98>)
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff feec 	bl	8009cfc <JPEG_Set_HuffAC_Mem>
 8009f24:	4603      	mov	r3, r0
 8009f26:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	e030      	b.n	8009f94 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	4918      	ldr	r1, [pc, #96]	@ (8009fa0 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fedc 	bl	8009cfc <JPEG_Set_HuffAC_Mem>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	e020      	b.n	8009f94 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4911      	ldr	r1, [pc, #68]	@ (8009fa4 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fe49 	bl	8009bf6 <JPEG_Set_HuffDC_Mem>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	e010      	b.n	8009f94 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	490a      	ldr	r1, [pc, #40]	@ (8009fa8 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff fe39 	bl	8009bf6 <JPEG_Set_HuffDC_Mem>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
 8009f90:	e000      	b.n	8009f94 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	0801b450 	.word	0x0801b450
 8009fa0:	0801b504 	.word	0x0801b504
 8009fa4:	0801b418 	.word	0x0801b418
 8009fa8:	0801b434 	.word	0x0801b434

08009fac <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b08b      	sub	sp, #44	@ 0x2c
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009fb4:	4b80      	ldr	r3, [pc, #512]	@ (800a1b8 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009fb6:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009fb8:	4b80      	ldr	r3, [pc, #512]	@ (800a1bc <JPEG_Set_Huff_DHTMem+0x210>)
 8009fba:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009fbc:	4b80      	ldr	r3, [pc, #512]	@ (800a1c0 <JPEG_Set_Huff_DHTMem+0x214>)
 8009fbe:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009fc0:	4b80      	ldr	r3, [pc, #512]	@ (800a1c4 <JPEG_Set_Huff_DHTMem+0x218>)
 8009fc2:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009fcc:	330c      	adds	r3, #12
 8009fce:	623b      	str	r3, [r7, #32]
  index = 16;
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009fd4:	e01d      	b.n	800a012 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	5cd3      	ldrb	r3, [r2, r3]
 8009fde:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	6979      	ldr	r1, [r7, #20]
 8009fe6:	5ccb      	ldrb	r3, [r1, r3]
 8009fe8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009fea:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fee:	3b03      	subs	r3, #3
 8009ff0:	6979      	ldr	r1, [r7, #20]
 8009ff2:	5ccb      	ldrb	r3, [r1, r3]
 8009ff4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009ff6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ffa:	3a04      	subs	r2, #4
 8009ffc:	6979      	ldr	r1, [r7, #20]
 8009ffe:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a000:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	601a      	str	r2, [r3, #0]
    address--;
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	3b04      	subs	r3, #4
 800a00a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00e:	3b04      	subs	r3, #4
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	2b03      	cmp	r3, #3
 800a016:	d8de      	bhi.n	8009fd6 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a020:	3318      	adds	r3, #24
 800a022:	623b      	str	r3, [r7, #32]
  index = 12;
 800a024:	230c      	movs	r3, #12
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a028:	e021      	b.n	800a06e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	3b01      	subs	r3, #1
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	4413      	add	r3, r2
 800a032:	7c1b      	ldrb	r3, [r3, #16]
 800a034:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	3b02      	subs	r3, #2
 800a03a:	6979      	ldr	r1, [r7, #20]
 800a03c:	440b      	add	r3, r1
 800a03e:	7c1b      	ldrb	r3, [r3, #16]
 800a040:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a042:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a046:	3b03      	subs	r3, #3
 800a048:	6979      	ldr	r1, [r7, #20]
 800a04a:	440b      	add	r3, r1
 800a04c:	7c1b      	ldrb	r3, [r3, #16]
 800a04e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a050:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a054:	3a04      	subs	r2, #4
 800a056:	6979      	ldr	r1, [r7, #20]
 800a058:	440a      	add	r2, r1
 800a05a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a05c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	601a      	str	r2, [r3, #0]
    address--;
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	3b04      	subs	r3, #4
 800a066:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	3b04      	subs	r3, #4
 800a06c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a070:	2b03      	cmp	r3, #3
 800a072:	d8da      	bhi.n	800a02a <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a07c:	3328      	adds	r3, #40	@ 0x28
 800a07e:	623b      	str	r3, [r7, #32]
  index = 16;
 800a080:	2310      	movs	r3, #16
 800a082:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a084:	e01d      	b.n	800a0c2 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	3b01      	subs	r3, #1
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	5cd3      	ldrb	r3, [r2, r3]
 800a08e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	3b02      	subs	r3, #2
 800a094:	69f9      	ldr	r1, [r7, #28]
 800a096:	5ccb      	ldrb	r3, [r1, r3]
 800a098:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a09a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	3b03      	subs	r3, #3
 800a0a0:	69f9      	ldr	r1, [r7, #28]
 800a0a2:	5ccb      	ldrb	r3, [r1, r3]
 800a0a4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0a6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a0a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0aa:	3a04      	subs	r2, #4
 800a0ac:	69f9      	ldr	r1, [r7, #28]
 800a0ae:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0b0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	601a      	str	r2, [r3, #0]
    address--;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	3b04      	subs	r3, #4
 800a0ba:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	3b04      	subs	r3, #4
 800a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d8de      	bhi.n	800a086 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0d0:	33cc      	adds	r3, #204	@ 0xcc
 800a0d2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a1c8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a0e4:	021a      	lsls	r2, r3, #8
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	3b04      	subs	r3, #4
 800a0fe:	623b      	str	r3, [r7, #32]
  index = 160;
 800a100:	23a0      	movs	r3, #160	@ 0xa0
 800a102:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a104:	e021      	b.n	800a14a <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	3b01      	subs	r3, #1
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	4413      	add	r3, r2
 800a10e:	7c1b      	ldrb	r3, [r3, #16]
 800a110:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	3b02      	subs	r3, #2
 800a116:	69f9      	ldr	r1, [r7, #28]
 800a118:	440b      	add	r3, r1
 800a11a:	7c1b      	ldrb	r3, [r3, #16]
 800a11c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a11e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	3b03      	subs	r3, #3
 800a124:	69f9      	ldr	r1, [r7, #28]
 800a126:	440b      	add	r3, r1
 800a128:	7c1b      	ldrb	r3, [r3, #16]
 800a12a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a12c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a130:	3a04      	subs	r2, #4
 800a132:	69f9      	ldr	r1, [r7, #28]
 800a134:	440a      	add	r2, r1
 800a136:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a138:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	601a      	str	r2, [r3, #0]
    address--;
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	3b04      	subs	r3, #4
 800a142:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	3b04      	subs	r3, #4
 800a148:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d8da      	bhi.n	800a106 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a158:	33cc      	adds	r3, #204	@ 0xcc
 800a15a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	b29b      	uxth	r3, r3
 800a162:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	061a      	lsls	r2, r3, #24
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	431a      	orrs	r2, r3
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	041b      	lsls	r3, r3, #16
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a186:	33dc      	adds	r3, #220	@ 0xdc
 800a188:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c8 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a190:	4013      	ands	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	7bdb      	ldrb	r3, [r3, #15]
 800a198:	021a      	lsls	r2, r3, #8
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	7b92      	ldrb	r2, [r2, #14]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	3b04      	subs	r3, #4
 800a1b0:	623b      	str	r3, [r7, #32]
  index = 12;
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1b6:	e027      	b.n	800a208 <JPEG_Set_Huff_DHTMem+0x25c>
 800a1b8:	0801b450 	.word	0x0801b450
 800a1bc:	0801b504 	.word	0x0801b504
 800a1c0:	0801b418 	.word	0x0801b418
 800a1c4:	0801b434 	.word	0x0801b434
 800a1c8:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	5cd3      	ldrb	r3, [r2, r3]
 800a1d4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a1d6:	6939      	ldr	r1, [r7, #16]
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	440b      	add	r3, r1
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1e0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	6939      	ldr	r1, [r7, #16]
 800a1e8:	5ccb      	ldrb	r3, [r1, r3]
 800a1ea:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a1ec:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a1ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f0:	3a02      	subs	r2, #2
 800a1f2:	6939      	ldr	r1, [r7, #16]
 800a1f4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a1f6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	601a      	str	r2, [r3, #0]
    address--;
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	3b04      	subs	r3, #4
 800a200:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	3b04      	subs	r3, #4
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d8de      	bhi.n	800a1cc <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a216:	33dc      	adds	r3, #220	@ 0xdc
 800a218:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	7c5b      	ldrb	r3, [r3, #17]
 800a226:	061a      	lsls	r2, r3, #24
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	7c1b      	ldrb	r3, [r3, #16]
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	4313      	orrs	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a244:	33e8      	adds	r3, #232	@ 0xe8
 800a246:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	4b6d      	ldr	r3, [pc, #436]	@ (800a404 <JPEG_Set_Huff_DHTMem+0x458>)
 800a24e:	4013      	ands	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	7edb      	ldrb	r3, [r3, #27]
 800a256:	021a      	lsls	r2, r3, #8
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	7e92      	ldrb	r2, [r2, #26]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	3b04      	subs	r3, #4
 800a26e:	623b      	str	r3, [r7, #32]
  index = 8;
 800a270:	2308      	movs	r3, #8
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a274:	e021      	b.n	800a2ba <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a278:	3301      	adds	r3, #1
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	4413      	add	r3, r2
 800a27e:	7c1b      	ldrb	r3, [r3, #16]
 800a280:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a282:	6939      	ldr	r1, [r7, #16]
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	440b      	add	r3, r1
 800a288:	3310      	adds	r3, #16
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a28e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	3b01      	subs	r3, #1
 800a294:	6939      	ldr	r1, [r7, #16]
 800a296:	440b      	add	r3, r1
 800a298:	7c1b      	ldrb	r3, [r3, #16]
 800a29a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a29c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a29e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2a0:	3a02      	subs	r2, #2
 800a2a2:	6939      	ldr	r1, [r7, #16]
 800a2a4:	440a      	add	r2, r1
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2a8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	601a      	str	r2, [r3, #0]
    address--;
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	3b04      	subs	r3, #4
 800a2b2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	3b04      	subs	r3, #4
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d8da      	bhi.n	800a276 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2c8:	33e8      	adds	r3, #232	@ 0xe8
 800a2ca:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	785b      	ldrb	r3, [r3, #1]
 800a2d8:	061a      	lsls	r2, r3, #24
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	041b      	lsls	r3, r3, #16
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2f6:	33f8      	adds	r3, #248	@ 0xf8
 800a2f8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b41      	ldr	r3, [pc, #260]	@ (800a404 <JPEG_Set_Huff_DHTMem+0x458>)
 800a300:	4013      	ands	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	7bdb      	ldrb	r3, [r3, #15]
 800a308:	021a      	lsls	r2, r3, #8
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	7b92      	ldrb	r2, [r2, #14]
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a316:	6a3b      	ldr	r3, [r7, #32]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	3b04      	subs	r3, #4
 800a320:	623b      	str	r3, [r7, #32]
  index = 12;
 800a322:	230c      	movs	r3, #12
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a326:	e01d      	b.n	800a364 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32a:	3301      	adds	r3, #1
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	5cd3      	ldrb	r3, [r2, r3]
 800a330:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a332:	69b9      	ldr	r1, [r7, #24]
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	440b      	add	r3, r1
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a33c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	3b01      	subs	r3, #1
 800a342:	69b9      	ldr	r1, [r7, #24]
 800a344:	5ccb      	ldrb	r3, [r1, r3]
 800a346:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a348:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a34a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a34c:	3a02      	subs	r2, #2
 800a34e:	69b9      	ldr	r1, [r7, #24]
 800a350:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a352:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	601a      	str	r2, [r3, #0]
    address--;
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	3b04      	subs	r3, #4
 800a35c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	3b04      	subs	r3, #4
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a366:	2b03      	cmp	r3, #3
 800a368:	d8de      	bhi.n	800a328 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a372:	33f8      	adds	r3, #248	@ 0xf8
 800a374:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	7c5b      	ldrb	r3, [r3, #17]
 800a382:	061a      	lsls	r2, r3, #24
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	431a      	orrs	r2, r3
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	7c1b      	ldrb	r3, [r3, #16]
 800a38c:	041b      	lsls	r3, r3, #16
 800a38e:	4313      	orrs	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3a0:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a3a4:	623b      	str	r3, [r7, #32]
  index = 160;
 800a3a6:	23a0      	movs	r3, #160	@ 0xa0
 800a3a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3aa:	e021      	b.n	800a3f0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	7c1b      	ldrb	r3, [r3, #16]
 800a3b6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3b8:	69b9      	ldr	r1, [r7, #24]
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3bc:	440b      	add	r3, r1
 800a3be:	3310      	adds	r3, #16
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3c4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	69b9      	ldr	r1, [r7, #24]
 800a3cc:	440b      	add	r3, r1
 800a3ce:	7c1b      	ldrb	r3, [r3, #16]
 800a3d0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3d2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a3d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d6:	3a02      	subs	r2, #2
 800a3d8:	69b9      	ldr	r1, [r7, #24]
 800a3da:	440a      	add	r2, r1
 800a3dc:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3de:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	601a      	str	r2, [r3, #0]
    address--;
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	3b04      	subs	r3, #4
 800a3e8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	3b04      	subs	r3, #4
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d8da      	bhi.n	800a3ac <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a3f6:	bf00      	nop
 800a3f8:	bf00      	nop
 800a3fa:	372c      	adds	r7, #44	@ 0x2c
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	ffff0000 	.word	0xffff0000

0800a408 <JPEG_Set_Quantization_Mem>:
  *         it could be QMEM0, QMEM1, QMEM2 or QMEM3
  * @retval 0 if no error, 1 if error
  */
static uint32_t JPEG_Set_Quantization_Mem(JPEG_HandleTypeDef *hjpeg, uint8_t *QTable,
                                                    __IO uint32_t *QTableAddress)
{
 800a408:	b480      	push	{r7}
 800a40a:	b08b      	sub	sp, #44	@ 0x2c
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t quantRow;
  uint32_t quantVal;
  uint32_t ScaleFactor;
  __IO uint32_t *tableAddress;

  tableAddress = QTableAddress;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	613b      	str	r3, [r7, #16]

  if ((hjpeg->Conf.ImageQuality >= 50UL) && (hjpeg->Conf.ImageQuality <= 100UL))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	2b31      	cmp	r3, #49	@ 0x31
 800a41e:	d90a      	bls.n	800a436 <JPEG_Set_Quantization_Mem+0x2e>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	2b64      	cmp	r3, #100	@ 0x64
 800a426:	d806      	bhi.n	800a436 <JPEG_Set_Quantization_Mem+0x2e>
  {
    ScaleFactor = 200UL - (hjpeg->Conf.ImageQuality * 2UL);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800a430:	005b      	lsls	r3, r3, #1
 800a432:	617b      	str	r3, [r7, #20]
 800a434:	e00d      	b.n	800a452 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else if (hjpeg->Conf.ImageQuality > 0UL)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	695b      	ldr	r3, [r3, #20]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d007      	beq.n	800a44e <JPEG_Set_Quantization_Mem+0x46>
  {
    ScaleFactor = ((uint32_t) 5000) / ((uint32_t) hjpeg->Conf.ImageQuality);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a446:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44a:	617b      	str	r3, [r7, #20]
 800a44c:	e001      	b.n	800a452 <JPEG_Set_Quantization_Mem+0x4a>
  }
  else
  {
    return 1UL;
 800a44e:	2301      	movs	r3, #1
 800a450:	e041      	b.n	800a4d6 <JPEG_Set_Quantization_Mem+0xce>
  }

  /*Quantization_table = (Standard_quanization_table * ScaleFactor + 50) / 100*/
  i = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a456:	e03a      	b.n	800a4ce <JPEG_Set_Quantization_Mem+0xc6>
  {
    quantRow = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a45c:	2300      	movs	r3, #0
 800a45e:	623b      	str	r3, [r7, #32]
 800a460:	e029      	b.n	800a4b6 <JPEG_Set_Quantization_Mem+0xae>
    {
      /* Note that the quantization coefficients must be specified in the table in zigzag order */
      quantVal = ((((uint32_t) QTable[JPEG_ZIGZAG_ORDER[i + j]]) * ScaleFactor) + 50UL) / 100UL;
 800a462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	4413      	add	r3, r2
 800a468:	4a1e      	ldr	r2, [pc, #120]	@ (800a4e4 <JPEG_Set_Quantization_Mem+0xdc>)
 800a46a:	5cd3      	ldrb	r3, [r2, r3]
 800a46c:	461a      	mov	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4413      	add	r3, r2
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	fb02 f303 	mul.w	r3, r2, r3
 800a47c:	3332      	adds	r3, #50	@ 0x32
 800a47e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e8 <JPEG_Set_Quantization_Mem+0xe0>)
 800a480:	fba2 2303 	umull	r2, r3, r2, r3
 800a484:	095b      	lsrs	r3, r3, #5
 800a486:	61bb      	str	r3, [r7, #24]

      if (quantVal == 0UL)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <JPEG_Set_Quantization_Mem+0x8c>
      {
        quantVal = 1UL;
 800a48e:	2301      	movs	r3, #1
 800a490:	61bb      	str	r3, [r7, #24]
 800a492:	e004      	b.n	800a49e <JPEG_Set_Quantization_Mem+0x96>
      }
      else if (quantVal > 255UL)
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	2bff      	cmp	r3, #255	@ 0xff
 800a498:	d901      	bls.n	800a49e <JPEG_Set_Quantization_Mem+0x96>
      {
        quantVal = 255UL;
 800a49a:	23ff      	movs	r3, #255	@ 0xff
 800a49c:	61bb      	str	r3, [r7, #24]
      else
      {
        /* Nothing to do, keep same value of quantVal */
      }

      quantRow |= ((quantVal & 0xFFUL) << (8UL * j));
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < 4UL; j++)
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	623b      	str	r3, [r7, #32]
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d9d2      	bls.n	800a462 <JPEG_Set_Quantization_Mem+0x5a>
    }

    i += 4UL;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	3304      	adds	r3, #4
 800a4c0:	627b      	str	r3, [r7, #36]	@ 0x24
    *tableAddress = quantRow;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	69fa      	ldr	r2, [r7, #28]
 800a4c6:	601a      	str	r2, [r3, #0]
    tableAddress ++;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	613b      	str	r3, [r7, #16]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d0:	2b3c      	cmp	r3, #60	@ 0x3c
 800a4d2:	d9c1      	bls.n	800a458 <JPEG_Set_Quantization_Mem+0x50>
  }

  /* Return function status */
  return 0UL;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	372c      	adds	r7, #44	@ 0x2c
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	0801b5b8 	.word	0x0801b5b8
 800a4e8:	51eb851f 	.word	0x51eb851f

0800a4ec <JPEG_SetColorYCBCR>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorYCBCR(JPEG_HandleTypeDef *hjpeg)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 3*/
  hjpeg->Instance->CONFR1 &=  ~JPEG_CONFR1_NF;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0203 	bic.w	r2, r2, #3
 800a502:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |=  JPEG_CONFR1_NF_1;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0202 	orr.w	r2, r2, #2
 800a512:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d108      	bne.n	800a52e <JPEG_SetColorYCBCR+0x42>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a51c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a520:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a526:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a528:	2330      	movs	r3, #48	@ 0x30
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	e014      	b.n	800a558 <JPEG_SetColorYCBCR+0x6c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d108      	bne.n	800a548 <JPEG_SetColorYCBCR+0x5c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a53a:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a53c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a540:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a542:	2310      	movs	r3, #16
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e007      	b.n	800a558 <JPEG_SetColorYCBCR+0x6c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a54c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a54e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a552:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
  }

  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a566:	605a      	str	r2, [r3, #4]
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF_1 | JPEG_CONFR1_NS_1);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0282 	orr.w	r2, r2, #130	@ 0x82
 800a576:	605a      	str	r2, [r3, #4]

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2200      	movs	r2, #0
 800a57e:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6919      	ldr	r1, [r3, #16]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	431a      	orrs	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a592:	431a      	orrs	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0 | JPEG_CONFR5_QT_0 | JPEG_CONFR5_HA | JPEG_CONFR5_HD);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6959      	ldr	r1, [r3, #20]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	6153      	str	r3, [r2, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor and number of blocks for component 2*/
  /* In YCBCR , by default, both chrominance components (component 1 and component 2) use the same Quantization table (table 1) */
  /* In YCBCR , both chrominance components (component 1 and component 2) use the same Huffman tables (table 1) */
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0 | JPEG_CONFR6_QT_0 | JPEG_CONFR6_HA | JPEG_CONFR6_HD);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6999      	ldr	r1, [r3, #24]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	f241 1307 	movw	r3, #4359	@ 0x1107
 800a5cc:	430b      	orrs	r3, r1
 800a5ce:	6193      	str	r3, [r2, #24]

}
 800a5d0:	bf00      	nop
 800a5d2:	371c      	adds	r7, #28
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <JPEG_SetColorGrayScale>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorGrayScale(JPEG_HandleTypeDef *hjpeg)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /*Set Number of color components to 1*/
  hjpeg->Instance->CONFR1 &= ~(JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 02c3 	bic.w	r2, r2, #195	@ 0xc3
 800a5f2:	605a      	str	r2, [r3, #4]

  /*in GrayScale use 1 single Quantization table (Table 0)*/
  /*in GrayScale use only one couple of AC/DC huffman table (table 0)*/

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |=  JPEG_CONFR4_HSF_0 | JPEG_CONFR4_VSF_0 ;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691a      	ldr	r2, [r3, #16]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a60a:	611a      	str	r2, [r3, #16]
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <JPEG_SetColorCMYK>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_SetColorCMYK(JPEG_HandleTypeDef *hjpeg)
{
 800a618:	b480      	push	{r7}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t ySamplingH;
  uint32_t ySamplingV;
  uint32_t yblockNb;

  /*Set Number of color components to 4*/
  hjpeg->Instance->CONFR1 |= (JPEG_CONFR1_NF | JPEG_CONFR1_NS);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f042 02c3 	orr.w	r2, r2, #195	@ 0xc3
 800a62e:	605a      	str	r2, [r3, #4]

  /* compute MCU block size and Y, Cb ,Cr sampling factors*/
  if (hjpeg->Conf.ChromaSubsampling == JPEG_420_SUBSAMPLING)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d108      	bne.n	800a64a <JPEG_SetColorCMYK+0x32>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a63c:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_1;   /* Vs = 2*/
 800a63e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a642:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x30; /* 4 blocks of 8x8*/
 800a644:	2330      	movs	r3, #48	@ 0x30
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	e014      	b.n	800a674 <JPEG_SetColorCMYK+0x5c>
  }
  else if (hjpeg->Conf.ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	2b02      	cmp	r3, #2
 800a650:	d108      	bne.n	800a664 <JPEG_SetColorCMYK+0x4c>
  {
    ySamplingH  = JPEG_CONFR4_HSF_1;   /* Hs = 2*/
 800a652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a656:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a65c:	613b      	str	r3, [r7, #16]

    yblockNb  = 0x10; /* 2 blocks of 8x8*/
 800a65e:	2310      	movs	r3, #16
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	e007      	b.n	800a674 <JPEG_SetColorCMYK+0x5c>
  }
  else /*JPEG_444_SUBSAMPLING and default*/
  {
    ySamplingH  = JPEG_CONFR4_HSF_0;   /* Hs = 1*/
 800a664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a668:	617b      	str	r3, [r7, #20]
    ySamplingV  = JPEG_CONFR4_VSF_0;   /* Vs = 1*/
 800a66a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a66e:	613b      	str	r3, [r7, #16]

    yblockNb  = 0; /* 1 block of 8x8*/
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]
  }

  /*Reset CONFR4 register*/
  hjpeg->Instance->CONFR4 =  0;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2200      	movs	r2, #0
 800a67a:	611a      	str	r2, [r3, #16]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 0*/
  hjpeg->Instance->CONFR4 |= (ySamplingH | ySamplingV | (yblockNb & JPEG_CONFR4_NB));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6919      	ldr	r1, [r3, #16]
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	431a      	orrs	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a68e:	431a      	orrs	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	611a      	str	r2, [r3, #16]

  /*Reset CONFR5 register*/
  hjpeg->Instance->CONFR5 =  0;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2200      	movs	r2, #0
 800a69e:	615a      	str	r2, [r3, #20]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 1*/
  hjpeg->Instance->CONFR5 |= (JPEG_CONFR5_HSF_0 | JPEG_CONFR5_VSF_0);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695a      	ldr	r2, [r3, #20]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6ae:	615a      	str	r2, [r3, #20]

  /*Reset CONFR6 register*/
  hjpeg->Instance->CONFR6 =  0;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	619a      	str	r2, [r3, #24]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 2*/
  hjpeg->Instance->CONFR6 |= (JPEG_CONFR6_HSF_0 | JPEG_CONFR6_VSF_0);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699a      	ldr	r2, [r3, #24]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6c6:	619a      	str	r2, [r3, #24]

  /*Reset CONFR7 register*/
  hjpeg->Instance->CONFR7 =  0;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	61da      	str	r2, [r3, #28]
  /*Set Horizental and Vertical  sampling factor , number of blocks , Quantization table and Huffman AC/DC tables for component 3*/
  hjpeg->Instance->CONFR7 |= (JPEG_CONFR7_HSF_0 | JPEG_CONFR7_VSF_0);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69da      	ldr	r2, [r3, #28]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 800a6de:	61da      	str	r2, [r3, #28]
}
 800a6e0:	bf00      	nop
 800a6e2:	371c      	adds	r7, #28
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d108      	bne.n	800a71e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f042 0208 	orr.w	r2, r2, #8
 800a71a:	605a      	str	r2, [r3, #4]
 800a71c:	e007      	b.n	800a72e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0208 	bic.w	r2, r2, #8
 800a72c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0201 	bic.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a74c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a75c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a76c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a77c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 0201 	orr.w	r2, r2, #1
 800a78c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a792:	f003 030c 	and.w	r3, r3, #12
 800a796:	2b08      	cmp	r3, #8
 800a798:	d108      	bne.n	800a7ac <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800a7a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800a7aa:	e00d      	b.n	800a7c8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7b0:	f003 030c 	and.w	r3, r3, #12
 800a7b4:	2b0c      	cmp	r3, #12
 800a7b6:	d107      	bne.n	800a7c8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a7c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d125      	bne.n	800a834 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d01e      	beq.n	800a834 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7fe feb6 	bl	800956e <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3304      	adds	r3, #4
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff f82e 	bl	8009870 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a822:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a832:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d116      	bne.n	800a86e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d004      	beq.n	800a858 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a84e:	2108      	movs	r1, #8
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f988 	bl	800ab66 <JPEG_ReadInputData>
 800a856:	e00a      	b.n	800a86e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a866:	2101      	movs	r1, #1
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f97c 	bl	800ab66 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d116      	bne.n	800a8a8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a880:	f003 0308 	and.w	r3, r3, #8
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a888:	2108      	movs	r1, #8
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f864 	bl	800a958 <JPEG_StoreOutputData>
 800a890:	e00a      	b.n	800a8a8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a898:	f003 0310 	and.w	r3, r3, #16
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f858 	bl	800a958 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d14b      	bne.n	800a94e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f022 0201 	bic.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ca:	f003 030c 	and.w	r3, r3, #12
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d107      	bne.n	800a8e2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a8e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a8f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69d9      	ldr	r1, [r3, #28]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a902:	461a      	mov	r2, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7f7 fa73 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a914:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d103      	bne.n	800a944 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7fe ffa2 	bl	8009886 <HAL_JPEG_DecodeCpltCallback>
 800a942:	e002      	b.n	800a94a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7f7 fa6f 	bl	8001e28 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	440b      	add	r3, r1
 800a970:	429a      	cmp	r2, r3
 800a972:	d34b      	bcc.n	800aa0c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a974:	2300      	movs	r3, #0
 800a976:	617b      	str	r3, [r7, #20]
 800a978:	e031      	b.n	800a9de <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a980:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69da      	ldr	r2, [r3, #28]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98a:	4413      	add	r3, r2
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	0a19      	lsrs	r1, r3, #8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69da      	ldr	r2, [r3, #28]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	3301      	adds	r3, #1
 800a9a0:	4413      	add	r3, r2
 800a9a2:	b2ca      	uxtb	r2, r1
 800a9a4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	0c19      	lsrs	r1, r3, #16
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69da      	ldr	r2, [r3, #28]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b2ca      	uxtb	r2, r1
 800a9b8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	0e19      	lsrs	r1, r3, #24
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	69da      	ldr	r2, [r3, #28]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c6:	3303      	adds	r3, #3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b2ca      	uxtb	r2, r1
 800a9cc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d2:	1d1a      	adds	r2, r3, #4
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d3c9      	bcc.n	800a97a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	f040 80b5 	bne.w	800ab5e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	69d9      	ldr	r1, [r3, #28]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7f7 f9f6 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800aa0a:	e0a8      	b.n	800ab5e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa14:	429a      	cmp	r2, r3
 800aa16:	f240 80a2 	bls.w	800ab5e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	089b      	lsrs	r3, r3, #2
 800aa26:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	617b      	str	r3, [r7, #20]
 800aa2c:	e031      	b.n	800aa92 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa34:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	69da      	ldr	r2, [r3, #28]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3e:	4413      	add	r3, r2
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	b2d2      	uxtb	r2, r2
 800aa44:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	0a19      	lsrs	r1, r3, #8
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	69da      	ldr	r2, [r3, #28]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	3301      	adds	r3, #1
 800aa54:	4413      	add	r3, r2
 800aa56:	b2ca      	uxtb	r2, r1
 800aa58:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	0c19      	lsrs	r1, r3, #16
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	69da      	ldr	r2, [r3, #28]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa66:	3302      	adds	r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	b2ca      	uxtb	r2, r1
 800aa6c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	0e19      	lsrs	r1, r3, #24
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	69da      	ldr	r2, [r3, #28]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7a:	3303      	adds	r3, #3
 800aa7c:	4413      	add	r3, r2
 800aa7e:	b2ca      	uxtb	r2, r1
 800aa80:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa86:	1d1a      	adds	r2, r3, #4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	617b      	str	r3, [r7, #20]
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d3c9      	bcc.n	800aa2e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d10b      	bne.n	800aabe <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69d9      	ldr	r1, [r3, #28]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaae:	461a      	mov	r2, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7f7 f99d 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800aabc:	e04f      	b.n	800ab5e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800aad2:	2300      	movs	r3, #0
 800aad4:	617b      	str	r3, [r7, #20]
 800aad6:	e015      	b.n	800ab04 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	fa22 f103 	lsr.w	r1, r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69da      	ldr	r2, [r3, #28]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaee:	4413      	add	r3, r2
 800aaf0:	b2ca      	uxtb	r2, r1
 800aaf2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	3301      	adds	r3, #1
 800ab02:	617b      	str	r3, [r7, #20]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d3e5      	bcc.n	800aad8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	69d9      	ldr	r1, [r3, #28]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab14:	461a      	mov	r2, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7f7 f96a 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f1c3 0304 	rsb	r3, r3, #4
 800ab28:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	e013      	b.n	800ab58 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	fa22 f103 	lsr.w	r1, r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	69da      	ldr	r2, [r3, #28]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab42:	4413      	add	r3, r2
 800ab44:	b2ca      	uxtb	r2, r1
 800ab46:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	3301      	adds	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d9e8      	bls.n	800ab30 <JPEG_StoreOutputData+0x1d8>
}
 800ab5e:	bf00      	nop
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b088      	sub	sp, #32
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <JPEG_ReadInputData+0x1c>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d104      	bne.n	800ab8c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800ab82:	2101      	movs	r1, #1
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7fe fdf7 	bl	8009778 <HAL_JPEG_Pause>
 800ab8a:	e028      	b.n	800abde <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d906      	bls.n	800aba6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e01b      	b.n	800abde <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d115      	bne.n	800abde <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7f7 f8e7 	bl	8001d8c <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d905      	bls.n	800abd2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abca:	f023 0203 	bic.w	r2, r3, #3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f040 809f 	bne.w	800ad2a <JPEG_ReadInputData+0x1c4>
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 809b 	beq.w	800ad2a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	089b      	lsrs	r3, r3, #2
 800abf8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d335      	bcc.n	800ac6e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800ac02:	2300      	movs	r3, #0
 800ac04:	61bb      	str	r3, [r7, #24]
 800ac06:	e02d      	b.n	800ac64 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	699a      	ldr	r2, [r3, #24]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4413      	add	r3, r2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699a      	ldr	r2, [r3, #24]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3301      	adds	r3, #1
 800ac22:	4413      	add	r3, r2
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac28:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6999      	ldr	r1, [r3, #24]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3302      	adds	r3, #2
 800ac34:	440b      	add	r3, r1
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac3a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3303      	adds	r3, #3
 800ac46:	4413      	add	r3, r2
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac50:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac52:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	3301      	adds	r3, #1
 800ac62:	61bb      	str	r3, [r7, #24]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d3cd      	bcc.n	800ac08 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800ac6c:	e05d      	b.n	800ad2a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d035      	beq.n	800ace0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800ac74:	2300      	movs	r3, #0
 800ac76:	61bb      	str	r3, [r7, #24]
 800ac78:	e02d      	b.n	800acd6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	699a      	ldr	r2, [r3, #24]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4413      	add	r3, r2
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	4413      	add	r3, r2
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800ac9a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6999      	ldr	r1, [r3, #24]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3302      	adds	r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800acac:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	699a      	ldr	r2, [r3, #24]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3303      	adds	r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800acc2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800acc4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a1b      	ldr	r3, [r3, #32]
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	3301      	adds	r3, #1
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d3cd      	bcc.n	800ac7a <JPEG_ReadInputData+0x114>
}
 800acde:	e024      	b.n	800ad2a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800ace4:	2300      	movs	r3, #0
 800ace6:	61bb      	str	r3, [r7, #24]
 800ace8:	e017      	b.n	800ad1a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699a      	ldr	r2, [r3, #24]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	4413      	add	r3, r2
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	fa02 f303 	lsl.w	r3, r2, r3
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	3301      	adds	r3, #1
 800ad18:	61bb      	str	r3, [r7, #24]
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d3e3      	bcc.n	800acea <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ad2a:	bf00      	nop
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ad34:	b590      	push	{r4, r7, lr}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af02      	add	r7, sp, #8
 800ad3a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad42:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d804      	bhi.n	800ad60 <JPEG_DMA_StartProcess+0x2c>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d901      	bls.n	800ad64 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e074      	b.n	800ae4e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad68:	4a3b      	ldr	r2, [pc, #236]	@ (800ae58 <JPEG_DMA_StartProcess+0x124>)
 800ad6a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad70:	4a3a      	ldr	r2, [pc, #232]	@ (800ae5c <JPEG_DMA_StartProcess+0x128>)
 800ad72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad78:	4a39      	ldr	r2, [pc, #228]	@ (800ae60 <JPEG_DMA_StartProcess+0x12c>)
 800ad7a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad80:	4a36      	ldr	r2, [pc, #216]	@ (800ae5c <JPEG_DMA_StartProcess+0x128>)
 800ad82:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad88:	4a36      	ldr	r2, [pc, #216]	@ (800ae64 <JPEG_DMA_StartProcess+0x130>)
 800ad8a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <JPEG_DMA_StartProcess+0x64>
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d107      	bne.n	800ada8 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad9c:	f043 0204 	orr.w	r2, r3, #4
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e052      	b.n	800ae4e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb0:	68f9      	ldr	r1, [r7, #12]
 800adb2:	fbb3 f1f1 	udiv	r1, r3, r1
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	fb00 f101 	mul.w	r1, r0, r1
 800adbc:	1a5b      	subs	r3, r3, r1
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adcc:	68b9      	ldr	r1, [r7, #8]
 800adce:	fbb3 f1f1 	udiv	r1, r3, r1
 800add2:	68b8      	ldr	r0, [r7, #8]
 800add4:	fb00 f101 	mul.w	r1, r0, r1
 800add8:	1a5b      	subs	r3, r3, r1
 800adda:	1ad2      	subs	r2, r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3344      	adds	r3, #68	@ 0x44
 800adea:	4619      	mov	r1, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	461c      	mov	r4, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf6:	2201      	movs	r2, #1
 800adf8:	9200      	str	r2, [sp, #0]
 800adfa:	4622      	mov	r2, r4
 800adfc:	f000 fbe2 	bl	800b5c4 <HAL_MDMA_Start_IT>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae0a:	f043 0204 	orr.w	r2, r3, #4
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e01b      	b.n	800ae4e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3340      	adds	r3, #64	@ 0x40
 800ae26:	461c      	mov	r4, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	9200      	str	r2, [sp, #0]
 800ae30:	4622      	mov	r2, r4
 800ae32:	f000 fbc7 	bl	800b5c4 <HAL_MDMA_Start_IT>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae40:	f043 0204 	orr.w	r2, r3, #4
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e000      	b.n	800ae4e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd90      	pop	{r4, r7, pc}
 800ae56:	bf00      	nop
 800ae58:	0800b167 	.word	0x0800b167
 800ae5c:	0800b355 	.word	0x0800b355
 800ae60:	0800b293 	.word	0x0800b293
 800ae64:	0800b3a5 	.word	0x0800b3a5

0800ae68 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d125      	bne.n	800aec8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d01e      	beq.n	800aec8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	4619      	mov	r1, r3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7fe fb6c 	bl	800956e <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fe fce4 	bl	8009870 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aeb6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aec6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d039      	beq.n	800af4a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeda:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 0201 	bic.w	r2, r2, #1
 800aef0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800af00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af10:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d104      	bne.n	800af2a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af24:	4618      	mov	r0, r3
 800af26:	f000 fbce 	bl	800b6c6 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b02      	cmp	r3, #2
 800af36:	d105      	bne.n	800af44 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fbc2 	bl	800b6c6 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800af42:	e002      	b.n	800af4a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f804 	bl	800af52 <JPEG_DMA_EndProcess>
}
 800af4a:	bf00      	nop
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af78:	429a      	cmp	r2, r3
 800af7a:	d10a      	bne.n	800af92 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	69d9      	ldr	r1, [r3, #28]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af84:	461a      	mov	r2, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7f6 ff32 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af98:	f003 0310 	and.w	r3, r3, #16
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d134      	bne.n	800b00a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00a      	beq.n	800afbe <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	69d9      	ldr	r1, [r3, #28]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb0:	461a      	mov	r2, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7f6 ff1c 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0201 	bic.w	r2, r2, #1
 800afcc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f003 0303 	and.w	r3, r3, #3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d103      	bne.n	800b002 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7fe fc43 	bl	8009886 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b000:	e00c      	b.n	800b01c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f6 ff10 	bl	8001e28 <HAL_JPEG_EncodeCpltCallback>
}
 800b008:	e008      	b.n	800b01c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b00e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f804 	bl	800b024 <JPEG_DMA_PollResidualData>
}
 800b01c:	bf00      	nop
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b02c:	2310      	movs	r3, #16
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	e04f      	b.n	800b0d2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d146      	bne.n	800b0cc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d03f      	beq.n	800b0cc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b052:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	69da      	ldr	r2, [r3, #28]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05c:	4413      	add	r3, r2
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	b2d2      	uxtb	r2, r2
 800b062:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	0a19      	lsrs	r1, r3, #8
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	69da      	ldr	r2, [r3, #28]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	3301      	adds	r3, #1
 800b072:	4413      	add	r3, r2
 800b074:	b2ca      	uxtb	r2, r1
 800b076:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	0c19      	lsrs	r1, r3, #16
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69da      	ldr	r2, [r3, #28]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b084:	3302      	adds	r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	b2ca      	uxtb	r2, r1
 800b08a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	0e19      	lsrs	r1, r3, #24
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	69da      	ldr	r2, [r3, #28]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b098:	3303      	adds	r3, #3
 800b09a:	4413      	add	r3, r2
 800b09c:	b2ca      	uxtb	r2, r1
 800b09e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a4:	1d1a      	adds	r2, r3, #4
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d10a      	bne.n	800b0cc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	69d9      	ldr	r1, [r3, #28]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0be:	461a      	mov	r2, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7f6 fe95 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1ac      	bne.n	800b032 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0dc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <JPEG_DMA_PollResidualData+0xd2>
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d133      	bne.n	800b15e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f022 0201 	bic.w	r2, r2, #1
 800b104:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00a      	beq.n	800b124 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	69d9      	ldr	r1, [r3, #28]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b116:	461a      	mov	r2, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7f6 fe69 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b128:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b12e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d103      	bne.n	800b158 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7fe fb98 	bl	8009886 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b156:	e002      	b.n	800b15e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7f6 fe65 	bl	8001e28 <HAL_JPEG_EncodeCpltCallback>
}
 800b15e:	bf00      	nop
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b166:	b590      	push	{r4, r7, lr}
 800b168:	b087      	sub	sp, #28
 800b16a:	af02      	add	r7, sp, #8
 800b16c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b172:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b182:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b188:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b18c:	4013      	ands	r3, r2
 800b18e:	2b0c      	cmp	r3, #12
 800b190:	d17c      	bne.n	800b28c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b198:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b1a8:	1ad2      	subs	r2, r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f7f6 fde9 	bl	8001d8c <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d81f      	bhi.n	800b204 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10d      	bne.n	800b1e6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1ce:	f043 0204 	orr.w	r2, r3, #4
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2206      	movs	r2, #6
 800b1da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7f6 fe36 	bl	8001e50 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b1e4:	e052      	b.n	800b28c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ee:	68b9      	ldr	r1, [r7, #8]
 800b1f0:	fbb3 f1f1 	udiv	r1, r3, r1
 800b1f4:	68b8      	ldr	r0, [r7, #8]
 800b1f6:	fb00 f101 	mul.w	r1, r0, r1
 800b1fa:	1a5b      	subs	r3, r3, r1
 800b1fc:	1ad2      	subs	r2, r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	629a      	str	r2, [r3, #40]	@ 0x28
 800b202:	e010      	b.n	800b226 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00c      	beq.n	800b226 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b210:	f003 0303 	and.w	r3, r3, #3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d006      	beq.n	800b226 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21c:	089b      	lsrs	r3, r3, #2
 800b21e:	3301      	adds	r3, #1
 800b220:	009a      	lsls	r2, r3, #2
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b22a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d124      	bne.n	800b27c <JPEG_MDMAInCpltCallback+0x116>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b236:	2b00      	cmp	r3, #0
 800b238:	d020      	beq.n	800b27c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	4619      	mov	r1, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3340      	adds	r3, #64	@ 0x40
 800b24a:	461c      	mov	r4, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b250:	2201      	movs	r2, #1
 800b252:	9200      	str	r2, [sp, #0]
 800b254:	4622      	mov	r2, r4
 800b256:	f000 f9b5 	bl	800b5c4 <HAL_MDMA_Start_IT>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00d      	beq.n	800b27c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b264:	f043 0204 	orr.w	r2, r3, #4
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2206      	movs	r2, #6
 800b270:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f7f6 fdeb 	bl	8001e50 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b27a:	e007      	b.n	800b28c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b28a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd90      	pop	{r4, r7, pc}

0800b292 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b292:	b590      	push	{r4, r7, lr}
 800b294:	b087      	sub	sp, #28
 800b296:	af02      	add	r7, sp, #8
 800b298:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b29e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b2ae:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2b4:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b0c      	cmp	r3, #12
 800b2bc:	d147      	bne.n	800b34e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c4:	f003 0320 	and.w	r3, r3, #32
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d138      	bne.n	800b33e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	69d9      	ldr	r1, [r3, #28]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7f6 fd80 	bl	8001df0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d120      	bne.n	800b33e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3344      	adds	r3, #68	@ 0x44
 800b306:	4619      	mov	r1, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	461c      	mov	r4, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b312:	2201      	movs	r2, #1
 800b314:	9200      	str	r2, [sp, #0]
 800b316:	4622      	mov	r2, r4
 800b318:	f000 f954 	bl	800b5c4 <HAL_MDMA_Start_IT>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00d      	beq.n	800b33e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b326:	f043 0204 	orr.w	r2, r3, #4
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2206      	movs	r2, #6
 800b332:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7f6 fd8a 	bl	8001e50 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800b33c:	e007      	b.n	800b34e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b34c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	bd90      	pop	{r4, r7, pc}

0800b354 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b360:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f022 0201 	bic.w	r2, r2, #1
 800b370:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b380:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b38e:	f043 0204 	orr.w	r2, r3, #4
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7f6 fd5a 	bl	8001e50 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800b39c:	bf00      	nop
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b0:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fdc7 	bl	800af52 <JPEG_DMA_EndProcess>
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b08b      	sub	sp, #44	@ 0x2c
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	3350      	adds	r3, #80	@ 0x50
 800b3de:	61bb      	str	r3, [r7, #24]

  i = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b3e4:	e042      	b.n	800b46c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	61fb      	str	r3, [r7, #28]
 800b3f0:	e033      	b.n	800b45a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d103      	bne.n	800b40e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	3364      	adds	r3, #100	@ 0x64
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b40c:	e022      	b.n	800b454 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2264      	movs	r2, #100	@ 0x64
 800b412:	fb02 f303 	mul.w	r3, r2, r3
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b41a:	6a38      	ldr	r0, [r7, #32]
 800b41c:	69f9      	ldr	r1, [r7, #28]
 800b41e:	4401      	add	r1, r0
 800b420:	4818      	ldr	r0, [pc, #96]	@ (800b484 <JPEG_GetQuality+0xb8>)
 800b422:	5c41      	ldrb	r1, [r0, r1]
 800b424:	440a      	add	r2, r1
 800b426:	7812      	ldrb	r2, [r2, #0]
 800b428:	fbb3 f3f2 	udiv	r3, r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b64      	cmp	r3, #100	@ 0x64
 800b432:	d807      	bhi.n	800b444 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800b43a:	085b      	lsrs	r3, r3, #1
 800b43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b43e:	4413      	add	r3, r2
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
 800b442:	e007      	b.n	800b454 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800b444:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b44e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b450:	4413      	add	r3, r2
 800b452:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	3301      	adds	r3, #1
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d9c8      	bls.n	800b3f2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	3304      	adds	r3, #4
 800b464:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	3304      	adds	r3, #4
 800b46a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b470:	d9b9      	bls.n	800b3e6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b474:	099b      	lsrs	r3, r3, #6
}
 800b476:	4618      	mov	r0, r3
 800b478:	372c      	adds	r7, #44	@ 0x2c
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	0801b5b8 	.word	0x0801b5b8

0800b488 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b490:	f7f8 f808 	bl	80034a4 <HAL_GetTick>
 800b494:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e03b      	b.n	800b518 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 0201 	bic.w	r2, r2, #1
 800b4be:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b4c0:	e00f      	b.n	800b4e2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800b4c2:	f7f7 ffef 	bl	80034a4 <HAL_GetTick>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	2b05      	cmp	r3, #5
 800b4ce:	d908      	bls.n	800b4e2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2240      	movs	r2, #64	@ 0x40
 800b4d4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2203      	movs	r2, #3
 800b4da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e01a      	b.n	800b518 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1e8      	bne.n	800b4c2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fad3 	bl	800ba9c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e03e      	b.n	800b5b8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b540:	2b01      	cmp	r3, #1
 800b542:	d101      	bne.n	800b548 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800b544:	2302      	movs	r3, #2
 800b546:	e037      	b.n	800b5b8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d126      	bne.n	800b5aa <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d11c      	bne.n	800b5a4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d108      	bne.n	800b592 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	691a      	ldr	r2, [r3, #16]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b58e:	611a      	str	r2, [r3, #16]
 800b590:	e00d      	b.n	800b5ae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b5a0:	611a      	str	r2, [r3, #16]
 800b5a2:	e004      	b.n	800b5ae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	75fb      	strb	r3, [r7, #23]
 800b5a8:	e001      	b.n	800b5ae <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	371c      	adds	r7, #28
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e070      	b.n	800b6be <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d101      	bne.n	800b5ea <HAL_MDMA_Start_IT+0x26>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e069      	b.n	800b6be <HAL_MDMA_Start_IT+0xfa>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d158      	bne.n	800b6b0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2202      	movs	r2, #2
 800b602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f9c8 	bl	800b9bc <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f042 0206 	orr.w	r2, r2, #6
 800b63a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d007      	beq.n	800b654 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68da      	ldr	r2, [r3, #12]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f042 0210 	orr.w	r2, r2, #16
 800b652:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0208 	orr.w	r2, r2, #8
 800b66a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b670:	2b00      	cmp	r3, #0
 800b672:	d007      	beq.n	800b684 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0220 	orr.w	r2, r2, #32
 800b682:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68da      	ldr	r2, [r3, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f042 0201 	orr.w	r2, r2, #1
 800b692:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b69c:	d10e      	bne.n	800b6bc <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b6ac:	60da      	str	r2, [r3, #12]
 800b6ae:	e005      	b.n	800b6bc <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e000      	b.n	800b6be <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e017      	b.n	800b708 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d004      	beq.n	800b6ee <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2280      	movs	r2, #128	@ 0x80
 800b6e8:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e00c      	b.n	800b708 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2204      	movs	r2, #4
 800b6f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 0201 	bic.w	r2, r2, #1
 800b704:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b720:	4b91      	ldr	r3, [pc, #580]	@ (800b968 <HAL_MDMA_IRQHandler+0x254>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a91      	ldr	r2, [pc, #580]	@ (800b96c <HAL_MDMA_IRQHandler+0x258>)
 800b726:	fba2 2303 	umull	r2, r3, r2, r3
 800b72a:	0a9b      	lsrs	r3, r3, #10
 800b72c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	4b8e      	ldr	r3, [pc, #568]	@ (800b970 <HAL_MDMA_IRQHandler+0x25c>)
 800b736:	4413      	add	r3, r2
 800b738:	099b      	lsrs	r3, r3, #6
 800b73a:	f003 031f 	and.w	r3, r3, #31
 800b73e:	2201      	movs	r2, #1
 800b740:	fa02 f303 	lsl.w	r3, r2, r3
 800b744:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800b746:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	4013      	ands	r3, r2
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 812d 	beq.w	800b9b0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d054      	beq.n	800b80e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f003 0302 	and.w	r3, r3, #2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d04d      	beq.n	800b80e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f022 0202 	bic.w	r2, r2, #2
 800b780:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b790:	2b00      	cmp	r3, #0
 800b792:	d106      	bne.n	800b7a2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b798:	f043 0201 	orr.w	r2, r3, #1
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	669a      	str	r2, [r3, #104]	@ 0x68
 800b7a0:	e005      	b.n	800b7ae <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7a6:	f043 0202 	orr.w	r2, r3, #2
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d005      	beq.n	800b7c4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7bc:	f043 0204 	orr.w	r2, r3, #4
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d005      	beq.n	800b7da <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7d2:	f043 0208 	orr.w	r2, r3, #8
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7e8:	f043 0210 	orr.w	r2, r3, #16
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7fe:	f043 0220 	orr.w	r2, r3, #32
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2201      	movs	r2, #1
 800b80c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0310 	and.w	r3, r3, #16
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d012      	beq.n	800b842 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f003 0320 	and.w	r3, r3, #32
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2210      	movs	r2, #16
 800b830:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d012      	beq.n	800b876 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	f003 0310 	and.w	r3, r3, #16
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2208      	movs	r2, #8
 800b864:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	d012      	beq.n	800b8aa <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f003 0308 	and.w	r3, r3, #8
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00b      	beq.n	800b8aa <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2204      	movs	r2, #4
 800b898:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d039      	beq.n	800b92c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	f003 0304 	and.w	r3, r3, #4
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d032      	beq.n	800b92c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68da      	ldr	r2, [r3, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b8d4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d110      	bne.n	800b904 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d05c      	beq.n	800b9b4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	4798      	blx	r3
        }
        return;
 800b902:	e057      	b.n	800b9b4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2202      	movs	r2, #2
 800b90a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b930:	2b00      	cmp	r3, #0
 800b932:	d040      	beq.n	800b9b6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2204      	movs	r2, #4
 800b938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0201 	bic.w	r2, r2, #1
 800b94a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	3301      	adds	r3, #1
 800b950:	60bb      	str	r3, [r7, #8]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	429a      	cmp	r2, r3
 800b956:	d30d      	bcc.n	800b974 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1f2      	bne.n	800b94c <HAL_MDMA_IRQHandler+0x238>
 800b966:	e006      	b.n	800b976 <HAL_MDMA_IRQHandler+0x262>
 800b968:	24000018 	.word	0x24000018
 800b96c:	1b4e81b5 	.word	0x1b4e81b5
 800b970:	adffffc0 	.word	0xadffffc0
        break;
 800b974:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2203      	movs	r2, #3
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b994:	e003      	b.n	800b99e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d007      	beq.n	800b9b6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
 800b9ae:	e002      	b.n	800b9b6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b9b0:	bf00      	nop
 800b9b2:	e000      	b.n	800b9b6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b9b4:	bf00      	nop
    }
  }
}
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	695a      	ldr	r2, [r3, #20]
 800b9d0:	4b31      	ldr	r3, [pc, #196]	@ (800ba98 <MDMA_SetConfig+0xdc>)
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	6812      	ldr	r2, [r2, #0]
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	051a      	lsls	r2, r3, #20
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	221f      	movs	r2, #31
 800ba00:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ba18:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba20:	d002      	beq.n	800ba28 <MDMA_SetConfig+0x6c>
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d108      	bne.n	800ba3a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ba36:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba38:	e007      	b.n	800ba4a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ba48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ba50:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba58:	d002      	beq.n	800ba60 <MDMA_SetConfig+0xa4>
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d108      	bne.n	800ba72 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ba6e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba70:	e007      	b.n	800ba82 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ba80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ba8c:	bf00      	nop
 800ba8e:	371c      	adds	r7, #28
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	fffe0000 	.word	0xfffe0000

0800ba9c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68d9      	ldr	r1, [r3, #12]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	691a      	ldr	r2, [r3, #16]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	695a      	ldr	r2, [r3, #20]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bac2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bace:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bada:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae0:	3b01      	subs	r3, #1
 800bae2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800bae4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800baf0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800baf2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bafc:	d107      	bne.n	800bb0e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	691a      	ldr	r2, [r3, #16]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800bb0c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2200      	movs	r2, #0
 800bb14:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da11      	bge.n	800bb42 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	695a      	ldr	r2, [r3, #20]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bb2c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb32:	425b      	negs	r3, r3
 800bb34:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	b292      	uxth	r2, r2
 800bb3e:	621a      	str	r2, [r3, #32]
 800bb40:	e006      	b.n	800bb50 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	b292      	uxth	r2, r2
 800bb4e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	da15      	bge.n	800bb84 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	695a      	ldr	r2, [r3, #20]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800bb66:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb6c:	425b      	negs	r3, r3
 800bb6e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6a19      	ldr	r1, [r3, #32]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	041a      	lsls	r2, r3, #16
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	621a      	str	r2, [r3, #32]
 800bb82:	e009      	b.n	800bb98 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6a19      	ldr	r1, [r3, #32]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8e:	041a      	lsls	r2, r3, #16
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	430a      	orrs	r2, r1
 800bb96:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bba0:	d006      	beq.n	800bbb0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbae:	e003      	b.n	800bbb8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bbc0:	bf00      	nop
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e0fe      	b.n	800bddc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f00c f98c 	bl	8017f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f008 fb3c 	bl	8014282 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7c1a      	ldrb	r2, [r3, #16]
 800bc12:	f88d 2000 	strb.w	r2, [sp]
 800bc16:	3304      	adds	r3, #4
 800bc18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc1a:	f008 fa0d 	bl	8014038 <USB_CoreInit>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d005      	beq.n	800bc30 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e0d5      	b.n	800bddc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2100      	movs	r1, #0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f008 fb34 	bl	80142a4 <USB_SetCurrentMode>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d005      	beq.n	800bc4e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2202      	movs	r2, #2
 800bc46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e0c6      	b.n	800bddc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc4e:	2300      	movs	r3, #0
 800bc50:	73fb      	strb	r3, [r7, #15]
 800bc52:	e04a      	b.n	800bcea <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bc54:	7bfa      	ldrb	r2, [r7, #15]
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	4413      	add	r3, r2
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	440b      	add	r3, r1
 800bc62:	3315      	adds	r3, #21
 800bc64:	2201      	movs	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	3314      	adds	r3, #20
 800bc78:	7bfa      	ldrb	r2, [r7, #15]
 800bc7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bc7c:	7bfa      	ldrb	r2, [r7, #15]
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
 800bc80:	b298      	uxth	r0, r3
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	4613      	mov	r3, r2
 800bc86:	00db      	lsls	r3, r3, #3
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	332e      	adds	r3, #46	@ 0x2e
 800bc90:	4602      	mov	r2, r0
 800bc92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bc94:	7bfa      	ldrb	r2, [r7, #15]
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	4413      	add	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	440b      	add	r3, r1
 800bca2:	3318      	adds	r3, #24
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bca8:	7bfa      	ldrb	r2, [r7, #15]
 800bcaa:	6879      	ldr	r1, [r7, #4]
 800bcac:	4613      	mov	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	440b      	add	r3, r1
 800bcb6:	331c      	adds	r3, #28
 800bcb8:	2200      	movs	r2, #0
 800bcba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bcbc:	7bfa      	ldrb	r2, [r7, #15]
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	00db      	lsls	r3, r3, #3
 800bcc4:	4413      	add	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	440b      	add	r3, r1
 800bcca:	3320      	adds	r3, #32
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bcd0:	7bfa      	ldrb	r2, [r7, #15]
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	4413      	add	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	440b      	add	r3, r1
 800bcde:	3324      	adds	r3, #36	@ 0x24
 800bce0:	2200      	movs	r2, #0
 800bce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	3301      	adds	r3, #1
 800bce8:	73fb      	strb	r3, [r7, #15]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	791b      	ldrb	r3, [r3, #4]
 800bcee:	7bfa      	ldrb	r2, [r7, #15]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d3af      	bcc.n	800bc54 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]
 800bcf8:	e044      	b.n	800bd84 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bcfa:	7bfa      	ldrb	r2, [r7, #15]
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bd10:	7bfa      	ldrb	r2, [r7, #15]
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	4613      	mov	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bd22:	7bfa      	ldrb	r2, [r7, #15]
 800bd24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bd26:	7bfa      	ldrb	r2, [r7, #15]
 800bd28:	6879      	ldr	r1, [r7, #4]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	00db      	lsls	r3, r3, #3
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	440b      	add	r3, r1
 800bd34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bd3c:	7bfa      	ldrb	r2, [r7, #15]
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	4613      	mov	r3, r2
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	440b      	add	r3, r1
 800bd4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800bd4e:	2200      	movs	r2, #0
 800bd50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bd52:	7bfa      	ldrb	r2, [r7, #15]
 800bd54:	6879      	ldr	r1, [r7, #4]
 800bd56:	4613      	mov	r3, r2
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	440b      	add	r3, r1
 800bd60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bd68:	7bfa      	ldrb	r2, [r7, #15]
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	3301      	adds	r3, #1
 800bd82:	73fb      	strb	r3, [r7, #15]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	791b      	ldrb	r3, [r3, #4]
 800bd88:	7bfa      	ldrb	r2, [r7, #15]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d3b5      	bcc.n	800bcfa <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7c1a      	ldrb	r2, [r3, #16]
 800bd96:	f88d 2000 	strb.w	r2, [sp]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd9e:	f008 facd 	bl	801433c <USB_DevInit>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d005      	beq.n	800bdb4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e013      	b.n	800bddc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7b1b      	ldrb	r3, [r3, #12]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d102      	bne.n	800bdd0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f001 f96e 	bl	800d0ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f009 fb10 	bl	80153fa <USB_DevDisconnect>

  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d101      	bne.n	800be00 <HAL_PCD_Start+0x1c>
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	e022      	b.n	800be46 <HAL_PCD_Start+0x62>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d009      	beq.n	800be28 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d105      	bne.n	800be28 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f008 fa17 	bl	8014260 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4618      	mov	r0, r3
 800be38:	f009 fabe 	bl	80153b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800be4e:	b590      	push	{r4, r7, lr}
 800be50:	b08d      	sub	sp, #52	@ 0x34
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4618      	mov	r0, r3
 800be66:	f009 fb7c 	bl	8015562 <USB_GetMode>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f040 84b9 	bne.w	800c7e4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f009 fae0 	bl	801543c <USB_ReadInterrupts>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 84af 	beq.w	800c7e2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	0a1b      	lsrs	r3, r3, #8
 800be8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f009 facd 	bl	801543c <USB_ReadInterrupts>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f003 0302 	and.w	r3, r3, #2
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d107      	bne.n	800bebc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	695a      	ldr	r2, [r3, #20]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f002 0202 	and.w	r2, r2, #2
 800beba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f009 fabb 	bl	801543c <USB_ReadInterrupts>
 800bec6:	4603      	mov	r3, r0
 800bec8:	f003 0310 	and.w	r3, r3, #16
 800becc:	2b10      	cmp	r3, #16
 800bece:	d161      	bne.n	800bf94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	699a      	ldr	r2, [r3, #24]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 0210 	bic.w	r2, r2, #16
 800bede:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	f003 020f 	and.w	r2, r3, #15
 800beec:	4613      	mov	r3, r2
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	4413      	add	r3, r2
 800befc:	3304      	adds	r3, #4
 800befe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bf06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf0a:	d124      	bne.n	800bf56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bf12:	4013      	ands	r3, r2
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d035      	beq.n	800bf84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	091b      	lsrs	r3, r3, #4
 800bf20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bf22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6a38      	ldr	r0, [r7, #32]
 800bf2c:	f009 f8f2 	bl	8015114 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	68da      	ldr	r2, [r3, #12]
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	091b      	lsrs	r3, r3, #4
 800bf38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf3c:	441a      	add	r2, r3
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	695a      	ldr	r2, [r3, #20]
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	091b      	lsrs	r3, r3, #4
 800bf4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf4e:	441a      	add	r2, r3
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	615a      	str	r2, [r3, #20]
 800bf54:	e016      	b.n	800bf84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bf5c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bf60:	d110      	bne.n	800bf84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf68:	2208      	movs	r2, #8
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6a38      	ldr	r0, [r7, #32]
 800bf6e:	f009 f8d1 	bl	8015114 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	695a      	ldr	r2, [r3, #20]
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	091b      	lsrs	r3, r3, #4
 800bf7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf7e:	441a      	add	r2, r3
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699a      	ldr	r2, [r3, #24]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0210 	orr.w	r2, r2, #16
 800bf92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f009 fa4f 	bl	801543c <USB_ReadInterrupts>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bfa4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bfa8:	f040 80a7 	bne.w	800c0fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bfac:	2300      	movs	r3, #0
 800bfae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f009 fa54 	bl	8015462 <USB_ReadDevAllOutEpInterrupt>
 800bfba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800bfbc:	e099      	b.n	800c0f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bfbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc0:	f003 0301 	and.w	r3, r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 808e 	beq.w	800c0e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd0:	b2d2      	uxtb	r2, r2
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f009 fa78 	bl	80154ca <USB_ReadDevOutEPInterrupt>
 800bfda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00c      	beq.n	800c000 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bff2:	461a      	mov	r2, r3
 800bff4:	2301      	movs	r3, #1
 800bff6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fed0 	bl	800cda0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f003 0308 	and.w	r3, r3, #8
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00c      	beq.n	800c024 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c016:	461a      	mov	r2, r3
 800c018:	2308      	movs	r3, #8
 800c01a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c01c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 ffa6 	bl	800cf70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f003 0310 	and.w	r3, r3, #16
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d008      	beq.n	800c040 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	4413      	add	r3, r2
 800c036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c03a:	461a      	mov	r2, r3
 800c03c:	2310      	movs	r3, #16
 800c03e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	2b00      	cmp	r3, #0
 800c048:	d030      	beq.n	800c0ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c052:	2b80      	cmp	r3, #128	@ 0x80
 800c054:	d109      	bne.n	800c06a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	69fa      	ldr	r2, [r7, #28]
 800c060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c064:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c068:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c06a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c06c:	4613      	mov	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	3304      	adds	r3, #4
 800c07e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	78db      	ldrb	r3, [r3, #3]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d108      	bne.n	800c09a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	2200      	movs	r2, #0
 800c08c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c090:	b2db      	uxtb	r3, r3
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f00c f861 	bl	801815c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	015a      	lsls	r2, r3, #5
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f003 0320 	and.w	r3, r3, #32
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c0e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ee:	085b      	lsrs	r3, r3, #1
 800c0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f47f af62 	bne.w	800bfbe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f009 f99c 	bl	801543c <USB_ReadInterrupts>
 800c104:	4603      	mov	r3, r0
 800c106:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c10a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c10e:	f040 80db 	bne.w	800c2c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4618      	mov	r0, r3
 800c118:	f009 f9bd 	bl	8015496 <USB_ReadDevAllInEpInterrupt>
 800c11c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c122:	e0cd      	b.n	800c2c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f000 80c2 	beq.w	800c2b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f009 f9e3 	bl	8015506 <USB_ReadDevInEPInterrupt>
 800c140:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f003 0301 	and.w	r3, r3, #1
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d057      	beq.n	800c1fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	f003 030f 	and.w	r3, r3, #15
 800c152:	2201      	movs	r2, #1
 800c154:	fa02 f303 	lsl.w	r3, r2, r3
 800c158:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	43db      	mvns	r3, r3
 800c166:	69f9      	ldr	r1, [r7, #28]
 800c168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c16c:	4013      	ands	r3, r2
 800c16e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c17c:	461a      	mov	r2, r3
 800c17e:	2301      	movs	r3, #1
 800c180:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	799b      	ldrb	r3, [r3, #6]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d132      	bne.n	800c1f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c18e:	4613      	mov	r3, r2
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	3320      	adds	r3, #32
 800c19a:	6819      	ldr	r1, [r3, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	00db      	lsls	r3, r3, #3
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4403      	add	r3, r0
 800c1aa:	331c      	adds	r3, #28
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4419      	add	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	4413      	add	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4403      	add	r3, r0
 800c1be:	3320      	adds	r3, #32
 800c1c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d113      	bne.n	800c1f0 <HAL_PCD_IRQHandler+0x3a2>
 800c1c8:	6879      	ldr	r1, [r7, #4]
 800c1ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	440b      	add	r3, r1
 800c1d6:	3324      	adds	r3, #36	@ 0x24
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d108      	bne.n	800c1f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6818      	ldr	r0, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	f009 f9ec 	bl	80155c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f00b ff2b 	bl	8018052 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f003 0308 	and.w	r3, r3, #8
 800c202:	2b00      	cmp	r3, #0
 800c204:	d008      	beq.n	800c218 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c208:	015a      	lsls	r2, r3, #5
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	4413      	add	r3, r2
 800c20e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c212:	461a      	mov	r2, r3
 800c214:	2308      	movs	r3, #8
 800c216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	f003 0310 	and.w	r3, r3, #16
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d008      	beq.n	800c234 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c22e:	461a      	mov	r2, r3
 800c230:	2310      	movs	r3, #16
 800c232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d008      	beq.n	800c250 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	015a      	lsls	r2, r3, #5
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	4413      	add	r3, r2
 800c246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c24a:	461a      	mov	r2, r3
 800c24c:	2340      	movs	r3, #64	@ 0x40
 800c24e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d023      	beq.n	800c2a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c25a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c25c:	6a38      	ldr	r0, [r7, #32]
 800c25e:	f008 f9cb 	bl	80145f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c264:	4613      	mov	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	4413      	add	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	3310      	adds	r3, #16
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	4413      	add	r3, r2
 800c272:	3304      	adds	r3, #4
 800c274:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	78db      	ldrb	r3, [r3, #3]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d108      	bne.n	800c290 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2200      	movs	r2, #0
 800c282:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c286:	b2db      	uxtb	r3, r3
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f00b ff78 	bl	8018180 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	015a      	lsls	r2, r3, #5
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	4413      	add	r3, r2
 800c298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c29c:	461a      	mov	r2, r3
 800c29e:	2302      	movs	r3, #2
 800c2a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c2ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fcea 	bl	800cc88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2bc:	085b      	lsrs	r3, r3, #1
 800c2be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f47f af2e 	bne.w	800c124 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f009 f8b5 	bl	801543c <USB_ReadInterrupts>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2dc:	d122      	bne.n	800c324 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	69fa      	ldr	r2, [r7, #28]
 800c2e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2ec:	f023 0301 	bic.w	r3, r3, #1
 800c2f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d108      	bne.n	800c30e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c304:	2100      	movs	r1, #0
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fef4 	bl	800d0f4 <HAL_PCDEx_LPM_Callback>
 800c30c:	e002      	b.n	800c314 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f00b ff16 	bl	8018140 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	695a      	ldr	r2, [r3, #20]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4618      	mov	r0, r3
 800c32a:	f009 f887 	bl	801543c <USB_ReadInterrupts>
 800c32e:	4603      	mov	r3, r0
 800c330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c334:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c338:	d112      	bne.n	800c360 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	2b01      	cmp	r3, #1
 800c348:	d102      	bne.n	800c350 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f00b fed2 	bl	80180f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	695a      	ldr	r2, [r3, #20]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c35e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4618      	mov	r0, r3
 800c366:	f009 f869 	bl	801543c <USB_ReadInterrupts>
 800c36a:	4603      	mov	r3, r0
 800c36c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c374:	d121      	bne.n	800c3ba <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	695a      	ldr	r2, [r3, #20]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c384:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d111      	bne.n	800c3b4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c39e:	089b      	lsrs	r3, r3, #2
 800c3a0:	f003 020f 	and.w	r2, r3, #15
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fea1 	bl	800d0f4 <HAL_PCDEx_LPM_Callback>
 800c3b2:	e002      	b.n	800c3ba <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f00b fe9d 	bl	80180f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f009 f83c 	bl	801543c <USB_ReadInterrupts>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3ce:	f040 80b7 	bne.w	800c540 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	69fa      	ldr	r2, [r7, #28]
 800c3dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c3e0:	f023 0301 	bic.w	r3, r3, #1
 800c3e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2110      	movs	r1, #16
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f008 f903 	bl	80145f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3f6:	e046      	b.n	800c486 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c404:	461a      	mov	r2, r3
 800c406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c40a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	69fa      	ldr	r2, [r7, #28]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c42a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c438:	461a      	mov	r2, r3
 800c43a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c43e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c442:	015a      	lsls	r2, r3, #5
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	4413      	add	r3, r2
 800c448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c450:	0151      	lsls	r1, r2, #5
 800c452:	69fa      	ldr	r2, [r7, #28]
 800c454:	440a      	add	r2, r1
 800c456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c45a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c45e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c470:	0151      	lsls	r1, r2, #5
 800c472:	69fa      	ldr	r2, [r7, #28]
 800c474:	440a      	add	r2, r1
 800c476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c47a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c47e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c482:	3301      	adds	r3, #1
 800c484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	791b      	ldrb	r3, [r3, #4]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48e:	4293      	cmp	r3, r2
 800c490:	d3b2      	bcc.n	800c3f8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	69fa      	ldr	r2, [r7, #28]
 800c49c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4a0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c4a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7bdb      	ldrb	r3, [r3, #15]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d016      	beq.n	800c4dc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4b8:	69fa      	ldr	r2, [r7, #28]
 800c4ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4be:	f043 030b 	orr.w	r3, r3, #11
 800c4c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ce:	69fa      	ldr	r2, [r7, #28]
 800c4d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c4d4:	f043 030b 	orr.w	r3, r3, #11
 800c4d8:	6453      	str	r3, [r2, #68]	@ 0x44
 800c4da:	e015      	b.n	800c508 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4e2:	695a      	ldr	r2, [r3, #20]
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c502:	f043 030b 	orr.w	r3, r3, #11
 800c506:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69fa      	ldr	r2, [r7, #28]
 800c512:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c516:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c51a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6818      	ldr	r0, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c52a:	461a      	mov	r2, r3
 800c52c:	f009 f84c 	bl	80155c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	695a      	ldr	r2, [r3, #20]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c53e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4618      	mov	r0, r3
 800c546:	f008 ff79 	bl	801543c <USB_ReadInterrupts>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c554:	d123      	bne.n	800c59e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f009 f810 	bl	8015580 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4618      	mov	r0, r3
 800c566:	f008 f8c0 	bl	80146ea <USB_GetDevSpeed>
 800c56a:	4603      	mov	r3, r0
 800c56c:	461a      	mov	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681c      	ldr	r4, [r3, #0]
 800c576:	f001 fd9d 	bl	800e0b4 <HAL_RCC_GetHCLKFreq>
 800c57a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c580:	461a      	mov	r2, r3
 800c582:	4620      	mov	r0, r4
 800c584:	f007 fdca 	bl	801411c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f00b fd8a 	bl	80180a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	695a      	ldr	r2, [r3, #20]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c59c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f008 ff4a 	bl	801543c <USB_ReadInterrupts>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f003 0308 	and.w	r3, r3, #8
 800c5ae:	2b08      	cmp	r3, #8
 800c5b0:	d10a      	bne.n	800c5c8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f00b fd67 	bl	8018086 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	695a      	ldr	r2, [r3, #20]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f002 0208 	and.w	r2, r2, #8
 800c5c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f008 ff35 	bl	801543c <USB_ReadInterrupts>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5d8:	2b80      	cmp	r3, #128	@ 0x80
 800c5da:	d123      	bne.n	800c624 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	699b      	ldr	r3, [r3, #24]
 800c5e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5ec:	e014      	b.n	800c618 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	00db      	lsls	r3, r3, #3
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d105      	bne.n	800c612 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fb0a 	bl	800cc26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c614:	3301      	adds	r3, #1
 800c616:	627b      	str	r3, [r7, #36]	@ 0x24
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	791b      	ldrb	r3, [r3, #4]
 800c61c:	461a      	mov	r2, r3
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	4293      	cmp	r3, r2
 800c622:	d3e4      	bcc.n	800c5ee <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4618      	mov	r0, r3
 800c62a:	f008 ff07 	bl	801543c <USB_ReadInterrupts>
 800c62e:	4603      	mov	r3, r0
 800c630:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c638:	d13c      	bne.n	800c6b4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c63a:	2301      	movs	r3, #1
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c63e:	e02b      	b.n	800c698 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	4413      	add	r3, r2
 800c648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c650:	6879      	ldr	r1, [r7, #4]
 800c652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c654:	4613      	mov	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	3318      	adds	r3, #24
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d115      	bne.n	800c692 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c666:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c668:	2b00      	cmp	r3, #0
 800c66a:	da12      	bge.n	800c692 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c66c:	6879      	ldr	r1, [r7, #4]
 800c66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c670:	4613      	mov	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	440b      	add	r3, r1
 800c67a:	3317      	adds	r3, #23
 800c67c:	2201      	movs	r2, #1
 800c67e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	b2db      	uxtb	r3, r3
 800c684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 faca 	bl	800cc26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	3301      	adds	r3, #1
 800c696:	627b      	str	r3, [r7, #36]	@ 0x24
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	791b      	ldrb	r3, [r3, #4]
 800c69c:	461a      	mov	r2, r3
 800c69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d3cd      	bcc.n	800c640 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	695a      	ldr	r2, [r3, #20]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c6b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f008 febf 	bl	801543c <USB_ReadInterrupts>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c6c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6c8:	d156      	bne.n	800c778 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6ce:	e045      	b.n	800c75c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d2:	015a      	lsls	r2, r3, #5
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	4413      	add	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	440b      	add	r3, r1
 800c6ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d12e      	bne.n	800c756 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c6f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da2b      	bge.n	800c756 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	0c1a      	lsrs	r2, r3, #16
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c708:	4053      	eors	r3, r2
 800c70a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d121      	bne.n	800c756 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c716:	4613      	mov	r3, r2
 800c718:	00db      	lsls	r3, r3, #3
 800c71a:	4413      	add	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	440b      	add	r3, r1
 800c720:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c724:	2201      	movs	r2, #1
 800c726:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c734:	6a3b      	ldr	r3, [r7, #32]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10a      	bne.n	800c756 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	69fa      	ldr	r2, [r7, #28]
 800c74a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c74e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c752:	6053      	str	r3, [r2, #4]
            break;
 800c754:	e008      	b.n	800c768 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	3301      	adds	r3, #1
 800c75a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	791b      	ldrb	r3, [r3, #4]
 800c760:	461a      	mov	r2, r3
 800c762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c764:	4293      	cmp	r3, r2
 800c766:	d3b3      	bcc.n	800c6d0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	695a      	ldr	r2, [r3, #20]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f008 fe5d 	bl	801543c <USB_ReadInterrupts>
 800c782:	4603      	mov	r3, r0
 800c784:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c78c:	d10a      	bne.n	800c7a4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f00b fd08 	bl	80181a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	695a      	ldr	r2, [r3, #20]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c7a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f008 fe47 	bl	801543c <USB_ReadInterrupts>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d115      	bne.n	800c7e4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	f003 0304 	and.w	r3, r3, #4
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f00b fcf8 	bl	80181c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6859      	ldr	r1, [r3, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	69ba      	ldr	r2, [r7, #24]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	605a      	str	r2, [r3, #4]
 800c7e0:	e000      	b.n	800c7e4 <HAL_PCD_IRQHandler+0x996>
      return;
 800c7e2:	bf00      	nop
    }
  }
}
 800c7e4:	3734      	adds	r7, #52	@ 0x34
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}

0800c7ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d101      	bne.n	800c804 <HAL_PCD_SetAddress+0x1a>
 800c800:	2302      	movs	r3, #2
 800c802:	e012      	b.n	800c82a <HAL_PCD_SetAddress+0x40>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	78fa      	ldrb	r2, [r7, #3]
 800c810:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	78fa      	ldrb	r2, [r7, #3]
 800c818:	4611      	mov	r1, r2
 800c81a:	4618      	mov	r0, r3
 800c81c:	f008 fda6 	bl	801536c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	4608      	mov	r0, r1
 800c83c:	4611      	mov	r1, r2
 800c83e:	461a      	mov	r2, r3
 800c840:	4603      	mov	r3, r0
 800c842:	70fb      	strb	r3, [r7, #3]
 800c844:	460b      	mov	r3, r1
 800c846:	803b      	strh	r3, [r7, #0]
 800c848:	4613      	mov	r3, r2
 800c84a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c854:	2b00      	cmp	r3, #0
 800c856:	da0f      	bge.n	800c878 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	f003 020f 	and.w	r2, r3, #15
 800c85e:	4613      	mov	r3, r2
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	4413      	add	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	3310      	adds	r3, #16
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	3304      	adds	r3, #4
 800c86e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2201      	movs	r2, #1
 800c874:	705a      	strb	r2, [r3, #1]
 800c876:	e00f      	b.n	800c898 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	f003 020f 	and.w	r2, r3, #15
 800c87e:	4613      	mov	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	4413      	add	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	4413      	add	r3, r2
 800c88e:	3304      	adds	r3, #4
 800c890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c898:	78fb      	ldrb	r3, [r7, #3]
 800c89a:	f003 030f 	and.w	r3, r3, #15
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c8a4:	883b      	ldrh	r3, [r7, #0]
 800c8a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	78ba      	ldrb	r2, [r7, #2]
 800c8b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	785b      	ldrb	r3, [r3, #1]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d004      	beq.n	800c8c6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c8c6:	78bb      	ldrb	r3, [r7, #2]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d102      	bne.n	800c8d2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d101      	bne.n	800c8e0 <HAL_PCD_EP_Open+0xae>
 800c8dc:	2302      	movs	r3, #2
 800c8de:	e00e      	b.n	800c8fe <HAL_PCD_EP_Open+0xcc>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68f9      	ldr	r1, [r7, #12]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f007 ff20 	bl	8014734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c8fc:	7afb      	ldrb	r3, [r7, #11]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c916:	2b00      	cmp	r3, #0
 800c918:	da0f      	bge.n	800c93a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	f003 020f 	and.w	r2, r3, #15
 800c920:	4613      	mov	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	3310      	adds	r3, #16
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	3304      	adds	r3, #4
 800c930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2201      	movs	r2, #1
 800c936:	705a      	strb	r2, [r3, #1]
 800c938:	e00f      	b.n	800c95a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c93a:	78fb      	ldrb	r3, [r7, #3]
 800c93c:	f003 020f 	and.w	r2, r3, #15
 800c940:	4613      	mov	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	4413      	add	r3, r2
 800c950:	3304      	adds	r3, #4
 800c952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c95a:	78fb      	ldrb	r3, [r7, #3]
 800c95c:	f003 030f 	and.w	r3, r3, #15
 800c960:	b2da      	uxtb	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_PCD_EP_Close+0x6e>
 800c970:	2302      	movs	r3, #2
 800c972:	e00e      	b.n	800c992 <HAL_PCD_EP_Close+0x8c>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68f9      	ldr	r1, [r7, #12]
 800c982:	4618      	mov	r0, r3
 800c984:	f007 ff5e 	bl	8014844 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b086      	sub	sp, #24
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9aa:	7afb      	ldrb	r3, [r7, #11]
 800c9ac:	f003 020f 	and.w	r2, r3, #15
 800c9b0:	4613      	mov	r3, r2
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	4413      	add	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9dc:	7afb      	ldrb	r3, [r7, #11]
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	b2da      	uxtb	r2, r3
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	799b      	ldrb	r3, [r3, #6]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d102      	bne.n	800c9f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6818      	ldr	r0, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	799b      	ldrb	r3, [r3, #6]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	6979      	ldr	r1, [r7, #20]
 800ca02:	f007 fffb 	bl	80149fc <USB_EPStartXfer>

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	f003 020f 	and.w	r2, r3, #15
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	4613      	mov	r3, r2
 800ca26:	00db      	lsls	r3, r3, #3
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	440b      	add	r3, r1
 800ca2e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ca32:	681b      	ldr	r3, [r3, #0]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	607a      	str	r2, [r7, #4]
 800ca4a:	603b      	str	r3, [r7, #0]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca50:	7afb      	ldrb	r3, [r7, #11]
 800ca52:	f003 020f 	and.w	r2, r3, #15
 800ca56:	4613      	mov	r3, r2
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	4413      	add	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	3310      	adds	r3, #16
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	4413      	add	r3, r2
 800ca64:	3304      	adds	r3, #4
 800ca66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	2200      	movs	r2, #0
 800ca78:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca80:	7afb      	ldrb	r3, [r7, #11]
 800ca82:	f003 030f 	and.w	r3, r3, #15
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	799b      	ldrb	r3, [r3, #6]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d102      	bne.n	800ca9a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	799b      	ldrb	r3, [r3, #6]
 800caa2:	461a      	mov	r2, r3
 800caa4:	6979      	ldr	r1, [r7, #20]
 800caa6:	f007 ffa9 	bl	80149fc <USB_EPStartXfer>

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	460b      	mov	r3, r1
 800cabe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	f003 030f 	and.w	r3, r3, #15
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	7912      	ldrb	r2, [r2, #4]
 800caca:	4293      	cmp	r3, r2
 800cacc:	d901      	bls.n	800cad2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e04f      	b.n	800cb72 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	da0f      	bge.n	800cafa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cada:	78fb      	ldrb	r3, [r7, #3]
 800cadc:	f003 020f 	and.w	r2, r3, #15
 800cae0:	4613      	mov	r3, r2
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	4413      	add	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	3310      	adds	r3, #16
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	3304      	adds	r3, #4
 800caf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2201      	movs	r2, #1
 800caf6:	705a      	strb	r2, [r3, #1]
 800caf8:	e00d      	b.n	800cb16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cafa:	78fa      	ldrb	r2, [r7, #3]
 800cafc:	4613      	mov	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	b2da      	uxtb	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d101      	bne.n	800cb36 <HAL_PCD_EP_SetStall+0x82>
 800cb32:	2302      	movs	r3, #2
 800cb34:	e01d      	b.n	800cb72 <HAL_PCD_EP_SetStall+0xbe>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68f9      	ldr	r1, [r7, #12]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f008 fb3d 	bl	80151c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb4a:	78fb      	ldrb	r3, [r7, #3]
 800cb4c:	f003 030f 	and.w	r3, r3, #15
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d109      	bne.n	800cb68 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6818      	ldr	r0, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7999      	ldrb	r1, [r3, #6]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb62:	461a      	mov	r2, r3
 800cb64:	f008 fd30 	bl	80155c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b084      	sub	sp, #16
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	460b      	mov	r3, r1
 800cb84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb86:	78fb      	ldrb	r3, [r7, #3]
 800cb88:	f003 030f 	and.w	r3, r3, #15
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	7912      	ldrb	r2, [r2, #4]
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d901      	bls.n	800cb98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e042      	b.n	800cc1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da0f      	bge.n	800cbc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	f003 020f 	and.w	r2, r3, #15
 800cba6:	4613      	mov	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	4413      	add	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	3310      	adds	r3, #16
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	3304      	adds	r3, #4
 800cbb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	705a      	strb	r2, [r3, #1]
 800cbbe:	e00f      	b.n	800cbe0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	f003 020f 	and.w	r2, r3, #15
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbe6:	78fb      	ldrb	r3, [r7, #3]
 800cbe8:	f003 030f 	and.w	r3, r3, #15
 800cbec:	b2da      	uxtb	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d101      	bne.n	800cc00 <HAL_PCD_EP_ClrStall+0x86>
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	e00e      	b.n	800cc1e <HAL_PCD_EP_ClrStall+0xa4>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68f9      	ldr	r1, [r7, #12]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f008 fb46 	bl	80152a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cc32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da0c      	bge.n	800cc54 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc3a:	78fb      	ldrb	r3, [r7, #3]
 800cc3c:	f003 020f 	and.w	r2, r3, #15
 800cc40:	4613      	mov	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	3310      	adds	r3, #16
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	3304      	adds	r3, #4
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	e00c      	b.n	800cc6e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	f003 020f 	and.w	r2, r3, #15
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	4413      	add	r3, r2
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68f9      	ldr	r1, [r7, #12]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f008 f965 	bl	8014f44 <USB_EPStopXfer>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cc7e:	7afb      	ldrb	r3, [r7, #11]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	@ 0x28
 800cc8c:	af02      	add	r7, sp, #8
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	4413      	add	r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	3310      	adds	r3, #16
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	4413      	add	r3, r2
 800ccac:	3304      	adds	r3, #4
 800ccae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	695a      	ldr	r2, [r3, #20]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d901      	bls.n	800ccc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e06b      	b.n	800cd98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	691a      	ldr	r2, [r3, #16]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	69fa      	ldr	r2, [r7, #28]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d902      	bls.n	800ccdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	3303      	adds	r3, #3
 800cce0:	089b      	lsrs	r3, r3, #2
 800cce2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cce4:	e02a      	b.n	800cd3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	691a      	ldr	r2, [r3, #16]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d902      	bls.n	800cd02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	3303      	adds	r3, #3
 800cd06:	089b      	lsrs	r3, r3, #2
 800cd08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68d9      	ldr	r1, [r3, #12]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	6978      	ldr	r0, [r7, #20]
 800cd20:	f008 f9ba 	bl	8015098 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	68da      	ldr	r2, [r3, #12]
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	441a      	add	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	695a      	ldr	r2, [r3, #20]
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	441a      	add	r2, r3
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d809      	bhi.n	800cd66 <PCD_WriteEmptyTxFifo+0xde>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	695a      	ldr	r2, [r3, #20]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d203      	bcs.n	800cd66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1bf      	bne.n	800cce6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	691a      	ldr	r2, [r3, #16]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	695b      	ldr	r3, [r3, #20]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d811      	bhi.n	800cd96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	2201      	movs	r2, #1
 800cd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	43db      	mvns	r3, r3
 800cd8c:	6939      	ldr	r1, [r7, #16]
 800cd8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cd92:	4013      	ands	r3, r2
 800cd94:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	333c      	adds	r3, #60	@ 0x3c
 800cdb8:	3304      	adds	r3, #4
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	799b      	ldrb	r3, [r3, #6]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d17b      	bne.n	800cece <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f003 0308 	and.w	r3, r3, #8
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d015      	beq.n	800ce0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	4a61      	ldr	r2, [pc, #388]	@ (800cf68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	f240 80b9 	bls.w	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 80b3 	beq.w	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	015a      	lsls	r2, r3, #5
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce02:	461a      	mov	r2, r3
 800ce04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce08:	6093      	str	r3, [r2, #8]
 800ce0a:	e0a7      	b.n	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f003 0320 	and.w	r3, r3, #32
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d009      	beq.n	800ce2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	015a      	lsls	r2, r3, #5
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce22:	461a      	mov	r2, r3
 800ce24:	2320      	movs	r3, #32
 800ce26:	6093      	str	r3, [r2, #8]
 800ce28:	e098      	b.n	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f040 8093 	bne.w	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	4a4b      	ldr	r2, [pc, #300]	@ (800cf68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d90f      	bls.n	800ce5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00a      	beq.n	800ce5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce54:	461a      	mov	r2, r3
 800ce56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce5a:	6093      	str	r3, [r2, #8]
 800ce5c:	e07e      	b.n	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4613      	mov	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	4413      	add	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	4413      	add	r3, r2
 800ce70:	3304      	adds	r3, #4
 800ce72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a1a      	ldr	r2, [r3, #32]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	0159      	lsls	r1, r3, #5
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	440b      	add	r3, r1
 800ce80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce8a:	1ad2      	subs	r2, r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d114      	bne.n	800cec0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d109      	bne.n	800ceb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6818      	ldr	r0, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cea8:	461a      	mov	r2, r3
 800ceaa:	2101      	movs	r1, #1
 800ceac:	f008 fb8c 	bl	80155c8 <USB_EP0_OutStart>
 800ceb0:	e006      	b.n	800cec0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	68da      	ldr	r2, [r3, #12]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	695b      	ldr	r3, [r3, #20]
 800ceba:	441a      	add	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f00b f8a8 	bl	801801c <HAL_PCD_DataOutStageCallback>
 800cecc:	e046      	b.n	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	4a26      	ldr	r2, [pc, #152]	@ (800cf6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d124      	bne.n	800cf20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	015a      	lsls	r2, r3, #5
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	4413      	add	r3, r2
 800cee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ceec:	461a      	mov	r2, r3
 800ceee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cef2:	6093      	str	r3, [r2, #8]
 800cef4:	e032      	b.n	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d008      	beq.n	800cf12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	015a      	lsls	r2, r3, #5
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	4413      	add	r3, r2
 800cf08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	2320      	movs	r3, #32
 800cf10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f00b f87f 	bl	801801c <HAL_PCD_DataOutStageCallback>
 800cf1e:	e01d      	b.n	800cf5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d114      	bne.n	800cf50 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	440b      	add	r3, r1
 800cf34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d108      	bne.n	800cf50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6818      	ldr	r0, [r3, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf48:	461a      	mov	r2, r3
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	f008 fb3c 	bl	80155c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f00b f860 	bl	801801c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3720      	adds	r7, #32
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	4f54300a 	.word	0x4f54300a
 800cf6c:	4f54310a 	.word	0x4f54310a

0800cf70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	333c      	adds	r3, #60	@ 0x3c
 800cf88:	3304      	adds	r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	015a      	lsls	r2, r3, #5
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	4413      	add	r3, r2
 800cf96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	4a15      	ldr	r2, [pc, #84]	@ (800cff8 <PCD_EP_OutSetupPacket_int+0x88>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d90e      	bls.n	800cfc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d009      	beq.n	800cfc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f00b f817 	bl	8017ff8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	4a0a      	ldr	r2, [pc, #40]	@ (800cff8 <PCD_EP_OutSetupPacket_int+0x88>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d90c      	bls.n	800cfec <PCD_EP_OutSetupPacket_int+0x7c>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	799b      	ldrb	r3, [r3, #6]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d108      	bne.n	800cfec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	f008 faee 	bl	80155c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	4f54300a 	.word	0x4f54300a

0800cffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
 800d008:	4613      	mov	r3, r2
 800d00a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d014:	78fb      	ldrb	r3, [r7, #3]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d107      	bne.n	800d02a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d01a:	883b      	ldrh	r3, [r7, #0]
 800d01c:	0419      	lsls	r1, r3, #16
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	430a      	orrs	r2, r1
 800d026:	629a      	str	r2, [r3, #40]	@ 0x28
 800d028:	e028      	b.n	800d07c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d030:	0c1b      	lsrs	r3, r3, #16
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	4413      	add	r3, r2
 800d036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d038:	2300      	movs	r3, #0
 800d03a:	73fb      	strb	r3, [r7, #15]
 800d03c:	e00d      	b.n	800d05a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	3340      	adds	r3, #64	@ 0x40
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	0c1b      	lsrs	r3, r3, #16
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	4413      	add	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	3301      	adds	r3, #1
 800d058:	73fb      	strb	r3, [r7, #15]
 800d05a:	7bfa      	ldrb	r2, [r7, #15]
 800d05c:	78fb      	ldrb	r3, [r7, #3]
 800d05e:	3b01      	subs	r3, #1
 800d060:	429a      	cmp	r2, r3
 800d062:	d3ec      	bcc.n	800d03e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d064:	883b      	ldrh	r3, [r7, #0]
 800d066:	0418      	lsls	r0, r3, #16
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6819      	ldr	r1, [r3, #0]
 800d06c:	78fb      	ldrb	r3, [r7, #3]
 800d06e:	3b01      	subs	r3, #1
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	4302      	orrs	r2, r0
 800d074:	3340      	adds	r3, #64	@ 0x40
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	440b      	add	r3, r1
 800d07a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	460b      	mov	r3, r1
 800d094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	887a      	ldrh	r2, [r7, #2]
 800d09c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d0da:	4b05      	ldr	r3, [pc, #20]	@ (800d0f0 <HAL_PCDEx_ActivateLPM+0x44>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	10000003 	.word	0x10000003

0800d0f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d114:	4b19      	ldr	r3, [pc, #100]	@ (800d17c <HAL_PWREx_ConfigSupply+0x70>)
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	d00a      	beq.n	800d136 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d120:	4b16      	ldr	r3, [pc, #88]	@ (800d17c <HAL_PWREx_ConfigSupply+0x70>)
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	f003 0307 	and.w	r3, r3, #7
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d001      	beq.n	800d132 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e01f      	b.n	800d172 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	e01d      	b.n	800d172 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d136:	4b11      	ldr	r3, [pc, #68]	@ (800d17c <HAL_PWREx_ConfigSupply+0x70>)
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	f023 0207 	bic.w	r2, r3, #7
 800d13e:	490f      	ldr	r1, [pc, #60]	@ (800d17c <HAL_PWREx_ConfigSupply+0x70>)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4313      	orrs	r3, r2
 800d144:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d146:	f7f6 f9ad 	bl	80034a4 <HAL_GetTick>
 800d14a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d14c:	e009      	b.n	800d162 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d14e:	f7f6 f9a9 	bl	80034a4 <HAL_GetTick>
 800d152:	4602      	mov	r2, r0
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d15c:	d901      	bls.n	800d162 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e007      	b.n	800d172 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d162:	4b06      	ldr	r3, [pc, #24]	@ (800d17c <HAL_PWREx_ConfigSupply+0x70>)
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d16a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d16e:	d1ee      	bne.n	800d14e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	58024800 	.word	0x58024800

0800d180 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d180:	b480      	push	{r7}
 800d182:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d184:	4b05      	ldr	r3, [pc, #20]	@ (800d19c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	4a04      	ldr	r2, [pc, #16]	@ (800d19c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d18a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d18e:	60d3      	str	r3, [r2, #12]
}
 800d190:	bf00      	nop
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	58024800 	.word	0x58024800

0800d1a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08c      	sub	sp, #48	@ 0x30
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	f000 bc48 	b.w	800da44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f000 8088 	beq.w	800d2d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1c2:	4b99      	ldr	r3, [pc, #612]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1cc:	4b96      	ldr	r3, [pc, #600]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d4:	2b10      	cmp	r3, #16
 800d1d6:	d007      	beq.n	800d1e8 <HAL_RCC_OscConfig+0x48>
 800d1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1da:	2b18      	cmp	r3, #24
 800d1dc:	d111      	bne.n	800d202 <HAL_RCC_OscConfig+0x62>
 800d1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e0:	f003 0303 	and.w	r3, r3, #3
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d10c      	bne.n	800d202 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1e8:	4b8f      	ldr	r3, [pc, #572]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d06d      	beq.n	800d2d0 <HAL_RCC_OscConfig+0x130>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d169      	bne.n	800d2d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	f000 bc21 	b.w	800da44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d20a:	d106      	bne.n	800d21a <HAL_RCC_OscConfig+0x7a>
 800d20c:	4b86      	ldr	r3, [pc, #536]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a85      	ldr	r2, [pc, #532]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	e02e      	b.n	800d278 <HAL_RCC_OscConfig+0xd8>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10c      	bne.n	800d23c <HAL_RCC_OscConfig+0x9c>
 800d222:	4b81      	ldr	r3, [pc, #516]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a80      	ldr	r2, [pc, #512]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	4b7e      	ldr	r3, [pc, #504]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a7d      	ldr	r2, [pc, #500]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d238:	6013      	str	r3, [r2, #0]
 800d23a:	e01d      	b.n	800d278 <HAL_RCC_OscConfig+0xd8>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d244:	d10c      	bne.n	800d260 <HAL_RCC_OscConfig+0xc0>
 800d246:	4b78      	ldr	r3, [pc, #480]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a77      	ldr	r2, [pc, #476]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d24c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d250:	6013      	str	r3, [r2, #0]
 800d252:	4b75      	ldr	r3, [pc, #468]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a74      	ldr	r2, [pc, #464]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	e00b      	b.n	800d278 <HAL_RCC_OscConfig+0xd8>
 800d260:	4b71      	ldr	r3, [pc, #452]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a70      	ldr	r2, [pc, #448]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d26a:	6013      	str	r3, [r2, #0]
 800d26c:	4b6e      	ldr	r3, [pc, #440]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a6d      	ldr	r2, [pc, #436]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d013      	beq.n	800d2a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d280:	f7f6 f910 	bl	80034a4 <HAL_GetTick>
 800d284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d286:	e008      	b.n	800d29a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d288:	f7f6 f90c 	bl	80034a4 <HAL_GetTick>
 800d28c:	4602      	mov	r2, r0
 800d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	2b64      	cmp	r3, #100	@ 0x64
 800d294:	d901      	bls.n	800d29a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d296:	2303      	movs	r3, #3
 800d298:	e3d4      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d29a:	4b63      	ldr	r3, [pc, #396]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0f0      	beq.n	800d288 <HAL_RCC_OscConfig+0xe8>
 800d2a6:	e014      	b.n	800d2d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2a8:	f7f6 f8fc 	bl	80034a4 <HAL_GetTick>
 800d2ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d2ae:	e008      	b.n	800d2c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2b0:	f7f6 f8f8 	bl	80034a4 <HAL_GetTick>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	2b64      	cmp	r3, #100	@ 0x64
 800d2bc:	d901      	bls.n	800d2c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e3c0      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d2c2:	4b59      	ldr	r3, [pc, #356]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1f0      	bne.n	800d2b0 <HAL_RCC_OscConfig+0x110>
 800d2ce:	e000      	b.n	800d2d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f003 0302 	and.w	r3, r3, #2
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 80ca 	beq.w	800d474 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2e0:	4b51      	ldr	r3, [pc, #324]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d2ea:	4b4f      	ldr	r3, [pc, #316]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d007      	beq.n	800d306 <HAL_RCC_OscConfig+0x166>
 800d2f6:	6a3b      	ldr	r3, [r7, #32]
 800d2f8:	2b18      	cmp	r3, #24
 800d2fa:	d156      	bne.n	800d3aa <HAL_RCC_OscConfig+0x20a>
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	2b00      	cmp	r3, #0
 800d304:	d151      	bne.n	800d3aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d306:	4b48      	ldr	r3, [pc, #288]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f003 0304 	and.w	r3, r3, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d005      	beq.n	800d31e <HAL_RCC_OscConfig+0x17e>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d101      	bne.n	800d31e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e392      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d31e:	4b42      	ldr	r3, [pc, #264]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f023 0219 	bic.w	r2, r3, #25
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	493f      	ldr	r1, [pc, #252]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d32c:	4313      	orrs	r3, r2
 800d32e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d330:	f7f6 f8b8 	bl	80034a4 <HAL_GetTick>
 800d334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d336:	e008      	b.n	800d34a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d338:	f7f6 f8b4 	bl	80034a4 <HAL_GetTick>
 800d33c:	4602      	mov	r2, r0
 800d33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	2b02      	cmp	r3, #2
 800d344:	d901      	bls.n	800d34a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d346:	2303      	movs	r3, #3
 800d348:	e37c      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d34a:	4b37      	ldr	r3, [pc, #220]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0304 	and.w	r3, r3, #4
 800d352:	2b00      	cmp	r3, #0
 800d354:	d0f0      	beq.n	800d338 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d356:	f7f6 f8d5 	bl	8003504 <HAL_GetREVID>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d360:	4293      	cmp	r3, r2
 800d362:	d817      	bhi.n	800d394 <HAL_RCC_OscConfig+0x1f4>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b40      	cmp	r3, #64	@ 0x40
 800d36a:	d108      	bne.n	800d37e <HAL_RCC_OscConfig+0x1de>
 800d36c:	4b2e      	ldr	r3, [pc, #184]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d374:	4a2c      	ldr	r2, [pc, #176]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d37a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d37c:	e07a      	b.n	800d474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d37e:	4b2a      	ldr	r3, [pc, #168]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	031b      	lsls	r3, r3, #12
 800d38c:	4926      	ldr	r1, [pc, #152]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d38e:	4313      	orrs	r3, r2
 800d390:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d392:	e06f      	b.n	800d474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d394:	4b24      	ldr	r3, [pc, #144]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	061b      	lsls	r3, r3, #24
 800d3a2:	4921      	ldr	r1, [pc, #132]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3a8:	e064      	b.n	800d474 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d047      	beq.n	800d442 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3b2:	4b1d      	ldr	r3, [pc, #116]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f023 0219 	bic.w	r2, r3, #25
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	491a      	ldr	r1, [pc, #104]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3c4:	f7f6 f86e 	bl	80034a4 <HAL_GetTick>
 800d3c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3ca:	e008      	b.n	800d3de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3cc:	f7f6 f86a 	bl	80034a4 <HAL_GetTick>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d901      	bls.n	800d3de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e332      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3de:	4b12      	ldr	r3, [pc, #72]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f003 0304 	and.w	r3, r3, #4
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d0f0      	beq.n	800d3cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3ea:	f7f6 f88b 	bl	8003504 <HAL_GetREVID>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d819      	bhi.n	800d42c <HAL_RCC_OscConfig+0x28c>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	2b40      	cmp	r3, #64	@ 0x40
 800d3fe:	d108      	bne.n	800d412 <HAL_RCC_OscConfig+0x272>
 800d400:	4b09      	ldr	r3, [pc, #36]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800d408:	4a07      	ldr	r2, [pc, #28]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d40a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d40e:	6053      	str	r3, [r2, #4]
 800d410:	e030      	b.n	800d474 <HAL_RCC_OscConfig+0x2d4>
 800d412:	4b05      	ldr	r3, [pc, #20]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	031b      	lsls	r3, r3, #12
 800d420:	4901      	ldr	r1, [pc, #4]	@ (800d428 <HAL_RCC_OscConfig+0x288>)
 800d422:	4313      	orrs	r3, r2
 800d424:	604b      	str	r3, [r1, #4]
 800d426:	e025      	b.n	800d474 <HAL_RCC_OscConfig+0x2d4>
 800d428:	58024400 	.word	0x58024400
 800d42c:	4b9a      	ldr	r3, [pc, #616]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	061b      	lsls	r3, r3, #24
 800d43a:	4997      	ldr	r1, [pc, #604]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d43c:	4313      	orrs	r3, r2
 800d43e:	604b      	str	r3, [r1, #4]
 800d440:	e018      	b.n	800d474 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d442:	4b95      	ldr	r3, [pc, #596]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a94      	ldr	r2, [pc, #592]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d448:	f023 0301 	bic.w	r3, r3, #1
 800d44c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d44e:	f7f6 f829 	bl	80034a4 <HAL_GetTick>
 800d452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d454:	e008      	b.n	800d468 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d456:	f7f6 f825 	bl	80034a4 <HAL_GetTick>
 800d45a:	4602      	mov	r2, r0
 800d45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	2b02      	cmp	r3, #2
 800d462:	d901      	bls.n	800d468 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e2ed      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d468:	4b8b      	ldr	r3, [pc, #556]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0304 	and.w	r3, r3, #4
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1f0      	bne.n	800d456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f003 0310 	and.w	r3, r3, #16
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 80a9 	beq.w	800d5d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d482:	4b85      	ldr	r3, [pc, #532]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d48a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d48c:	4b82      	ldr	r3, [pc, #520]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d490:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	2b08      	cmp	r3, #8
 800d496:	d007      	beq.n	800d4a8 <HAL_RCC_OscConfig+0x308>
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	2b18      	cmp	r3, #24
 800d49c:	d13a      	bne.n	800d514 <HAL_RCC_OscConfig+0x374>
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	f003 0303 	and.w	r3, r3, #3
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d135      	bne.n	800d514 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4a8:	4b7b      	ldr	r3, [pc, #492]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d005      	beq.n	800d4c0 <HAL_RCC_OscConfig+0x320>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	69db      	ldr	r3, [r3, #28]
 800d4b8:	2b80      	cmp	r3, #128	@ 0x80
 800d4ba:	d001      	beq.n	800d4c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e2c1      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4c0:	f7f6 f820 	bl	8003504 <HAL_GetREVID>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d817      	bhi.n	800d4fe <HAL_RCC_OscConfig+0x35e>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a1b      	ldr	r3, [r3, #32]
 800d4d2:	2b20      	cmp	r3, #32
 800d4d4:	d108      	bne.n	800d4e8 <HAL_RCC_OscConfig+0x348>
 800d4d6:	4b70      	ldr	r3, [pc, #448]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d4de:	4a6e      	ldr	r2, [pc, #440]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d4e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d4e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4e6:	e075      	b.n	800d5d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4e8:	4b6b      	ldr	r3, [pc, #428]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	069b      	lsls	r3, r3, #26
 800d4f6:	4968      	ldr	r1, [pc, #416]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4fc:	e06a      	b.n	800d5d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4fe:	4b66      	ldr	r3, [pc, #408]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	061b      	lsls	r3, r3, #24
 800d50c:	4962      	ldr	r1, [pc, #392]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d50e:	4313      	orrs	r3, r2
 800d510:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d512:	e05f      	b.n	800d5d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d042      	beq.n	800d5a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d51c:	4b5e      	ldr	r3, [pc, #376]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a5d      	ldr	r2, [pc, #372]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d528:	f7f5 ffbc 	bl	80034a4 <HAL_GetTick>
 800d52c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d52e:	e008      	b.n	800d542 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d530:	f7f5 ffb8 	bl	80034a4 <HAL_GetTick>
 800d534:	4602      	mov	r2, r0
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d901      	bls.n	800d542 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800d53e:	2303      	movs	r3, #3
 800d540:	e280      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d542:	4b55      	ldr	r3, [pc, #340]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d0f0      	beq.n	800d530 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d54e:	f7f5 ffd9 	bl	8003504 <HAL_GetREVID>
 800d552:	4603      	mov	r3, r0
 800d554:	f241 0203 	movw	r2, #4099	@ 0x1003
 800d558:	4293      	cmp	r3, r2
 800d55a:	d817      	bhi.n	800d58c <HAL_RCC_OscConfig+0x3ec>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	2b20      	cmp	r3, #32
 800d562:	d108      	bne.n	800d576 <HAL_RCC_OscConfig+0x3d6>
 800d564:	4b4c      	ldr	r3, [pc, #304]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800d56c:	4a4a      	ldr	r2, [pc, #296]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d56e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d572:	6053      	str	r3, [r2, #4]
 800d574:	e02e      	b.n	800d5d4 <HAL_RCC_OscConfig+0x434>
 800d576:	4b48      	ldr	r3, [pc, #288]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a1b      	ldr	r3, [r3, #32]
 800d582:	069b      	lsls	r3, r3, #26
 800d584:	4944      	ldr	r1, [pc, #272]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d586:	4313      	orrs	r3, r2
 800d588:	604b      	str	r3, [r1, #4]
 800d58a:	e023      	b.n	800d5d4 <HAL_RCC_OscConfig+0x434>
 800d58c:	4b42      	ldr	r3, [pc, #264]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6a1b      	ldr	r3, [r3, #32]
 800d598:	061b      	lsls	r3, r3, #24
 800d59a:	493f      	ldr	r1, [pc, #252]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d59c:	4313      	orrs	r3, r2
 800d59e:	60cb      	str	r3, [r1, #12]
 800d5a0:	e018      	b.n	800d5d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d5a2:	4b3d      	ldr	r3, [pc, #244]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a3c      	ldr	r2, [pc, #240]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d5a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5ae:	f7f5 ff79 	bl	80034a4 <HAL_GetTick>
 800d5b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d5b4:	e008      	b.n	800d5c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d5b6:	f7f5 ff75 	bl	80034a4 <HAL_GetTick>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d901      	bls.n	800d5c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e23d      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d5c8:	4b33      	ldr	r3, [pc, #204]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1f0      	bne.n	800d5b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f003 0308 	and.w	r3, r3, #8
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d036      	beq.n	800d64e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	695b      	ldr	r3, [r3, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d019      	beq.n	800d61c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d5ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5ec:	4a2a      	ldr	r2, [pc, #168]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d5ee:	f043 0301 	orr.w	r3, r3, #1
 800d5f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5f4:	f7f5 ff56 	bl	80034a4 <HAL_GetTick>
 800d5f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5fa:	e008      	b.n	800d60e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5fc:	f7f5 ff52 	bl	80034a4 <HAL_GetTick>
 800d600:	4602      	mov	r2, r0
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	2b02      	cmp	r3, #2
 800d608:	d901      	bls.n	800d60e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d60a:	2303      	movs	r3, #3
 800d60c:	e21a      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d60e:	4b22      	ldr	r3, [pc, #136]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d612:	f003 0302 	and.w	r3, r3, #2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0f0      	beq.n	800d5fc <HAL_RCC_OscConfig+0x45c>
 800d61a:	e018      	b.n	800d64e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d61c:	4b1e      	ldr	r3, [pc, #120]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d61e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d620:	4a1d      	ldr	r2, [pc, #116]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d622:	f023 0301 	bic.w	r3, r3, #1
 800d626:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d628:	f7f5 ff3c 	bl	80034a4 <HAL_GetTick>
 800d62c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d62e:	e008      	b.n	800d642 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d630:	f7f5 ff38 	bl	80034a4 <HAL_GetTick>
 800d634:	4602      	mov	r2, r0
 800d636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d901      	bls.n	800d642 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d63e:	2303      	movs	r3, #3
 800d640:	e200      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d642:	4b15      	ldr	r3, [pc, #84]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d646:	f003 0302 	and.w	r3, r3, #2
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1f0      	bne.n	800d630 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 0320 	and.w	r3, r3, #32
 800d656:	2b00      	cmp	r3, #0
 800d658:	d039      	beq.n	800d6ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d01c      	beq.n	800d69c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d662:	4b0d      	ldr	r3, [pc, #52]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a0c      	ldr	r2, [pc, #48]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d66c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d66e:	f7f5 ff19 	bl	80034a4 <HAL_GetTick>
 800d672:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d674:	e008      	b.n	800d688 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d676:	f7f5 ff15 	bl	80034a4 <HAL_GetTick>
 800d67a:	4602      	mov	r2, r0
 800d67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	2b02      	cmp	r3, #2
 800d682:	d901      	bls.n	800d688 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d684:	2303      	movs	r3, #3
 800d686:	e1dd      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d688:	4b03      	ldr	r3, [pc, #12]	@ (800d698 <HAL_RCC_OscConfig+0x4f8>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d690:	2b00      	cmp	r3, #0
 800d692:	d0f0      	beq.n	800d676 <HAL_RCC_OscConfig+0x4d6>
 800d694:	e01b      	b.n	800d6ce <HAL_RCC_OscConfig+0x52e>
 800d696:	bf00      	nop
 800d698:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d69c:	4b9b      	ldr	r3, [pc, #620]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a9a      	ldr	r2, [pc, #616]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d6a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d6a8:	f7f5 fefc 	bl	80034a4 <HAL_GetTick>
 800d6ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d6ae:	e008      	b.n	800d6c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d6b0:	f7f5 fef8 	bl	80034a4 <HAL_GetTick>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d901      	bls.n	800d6c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d6be:	2303      	movs	r3, #3
 800d6c0:	e1c0      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d6c2:	4b92      	ldr	r3, [pc, #584]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1f0      	bne.n	800d6b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f003 0304 	and.w	r3, r3, #4
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 8081 	beq.w	800d7de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d6dc:	4b8c      	ldr	r3, [pc, #560]	@ (800d910 <HAL_RCC_OscConfig+0x770>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a8b      	ldr	r2, [pc, #556]	@ (800d910 <HAL_RCC_OscConfig+0x770>)
 800d6e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d6e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d6e8:	f7f5 fedc 	bl	80034a4 <HAL_GetTick>
 800d6ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6ee:	e008      	b.n	800d702 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6f0:	f7f5 fed8 	bl	80034a4 <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	2b64      	cmp	r3, #100	@ 0x64
 800d6fc:	d901      	bls.n	800d702 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d6fe:	2303      	movs	r3, #3
 800d700:	e1a0      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d702:	4b83      	ldr	r3, [pc, #524]	@ (800d910 <HAL_RCC_OscConfig+0x770>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0f0      	beq.n	800d6f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d106      	bne.n	800d724 <HAL_RCC_OscConfig+0x584>
 800d716:	4b7d      	ldr	r3, [pc, #500]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d71a:	4a7c      	ldr	r2, [pc, #496]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d71c:	f043 0301 	orr.w	r3, r3, #1
 800d720:	6713      	str	r3, [r2, #112]	@ 0x70
 800d722:	e02d      	b.n	800d780 <HAL_RCC_OscConfig+0x5e0>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10c      	bne.n	800d746 <HAL_RCC_OscConfig+0x5a6>
 800d72c:	4b77      	ldr	r3, [pc, #476]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d72e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d730:	4a76      	ldr	r2, [pc, #472]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d732:	f023 0301 	bic.w	r3, r3, #1
 800d736:	6713      	str	r3, [r2, #112]	@ 0x70
 800d738:	4b74      	ldr	r3, [pc, #464]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d73c:	4a73      	ldr	r2, [pc, #460]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d73e:	f023 0304 	bic.w	r3, r3, #4
 800d742:	6713      	str	r3, [r2, #112]	@ 0x70
 800d744:	e01c      	b.n	800d780 <HAL_RCC_OscConfig+0x5e0>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	2b05      	cmp	r3, #5
 800d74c:	d10c      	bne.n	800d768 <HAL_RCC_OscConfig+0x5c8>
 800d74e:	4b6f      	ldr	r3, [pc, #444]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d752:	4a6e      	ldr	r2, [pc, #440]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d754:	f043 0304 	orr.w	r3, r3, #4
 800d758:	6713      	str	r3, [r2, #112]	@ 0x70
 800d75a:	4b6c      	ldr	r3, [pc, #432]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d75c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d75e:	4a6b      	ldr	r2, [pc, #428]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d760:	f043 0301 	orr.w	r3, r3, #1
 800d764:	6713      	str	r3, [r2, #112]	@ 0x70
 800d766:	e00b      	b.n	800d780 <HAL_RCC_OscConfig+0x5e0>
 800d768:	4b68      	ldr	r3, [pc, #416]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d76a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d76c:	4a67      	ldr	r2, [pc, #412]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d76e:	f023 0301 	bic.w	r3, r3, #1
 800d772:	6713      	str	r3, [r2, #112]	@ 0x70
 800d774:	4b65      	ldr	r3, [pc, #404]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d778:	4a64      	ldr	r2, [pc, #400]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d77a:	f023 0304 	bic.w	r3, r3, #4
 800d77e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d015      	beq.n	800d7b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d788:	f7f5 fe8c 	bl	80034a4 <HAL_GetTick>
 800d78c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d78e:	e00a      	b.n	800d7a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d790:	f7f5 fe88 	bl	80034a4 <HAL_GetTick>
 800d794:	4602      	mov	r2, r0
 800d796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d901      	bls.n	800d7a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d7a2:	2303      	movs	r3, #3
 800d7a4:	e14e      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d7a6:	4b59      	ldr	r3, [pc, #356]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d7a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7aa:	f003 0302 	and.w	r3, r3, #2
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d0ee      	beq.n	800d790 <HAL_RCC_OscConfig+0x5f0>
 800d7b2:	e014      	b.n	800d7de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7b4:	f7f5 fe76 	bl	80034a4 <HAL_GetTick>
 800d7b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d7ba:	e00a      	b.n	800d7d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7bc:	f7f5 fe72 	bl	80034a4 <HAL_GetTick>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c4:	1ad3      	subs	r3, r2, r3
 800d7c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d901      	bls.n	800d7d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e138      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d7d2:	4b4e      	ldr	r3, [pc, #312]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d7d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7d6:	f003 0302 	and.w	r3, r3, #2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1ee      	bne.n	800d7bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 812d 	beq.w	800da42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d7e8:	4b48      	ldr	r3, [pc, #288]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d7ea:	691b      	ldr	r3, [r3, #16]
 800d7ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7f0:	2b18      	cmp	r3, #24
 800d7f2:	f000 80bd 	beq.w	800d970 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	f040 809e 	bne.w	800d93c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d800:	4b42      	ldr	r3, [pc, #264]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a41      	ldr	r2, [pc, #260]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d80a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d80c:	f7f5 fe4a 	bl	80034a4 <HAL_GetTick>
 800d810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d812:	e008      	b.n	800d826 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d814:	f7f5 fe46 	bl	80034a4 <HAL_GetTick>
 800d818:	4602      	mov	r2, r0
 800d81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	2b02      	cmp	r3, #2
 800d820:	d901      	bls.n	800d826 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d822:	2303      	movs	r3, #3
 800d824:	e10e      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d826:	4b39      	ldr	r3, [pc, #228]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1f0      	bne.n	800d814 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d832:	4b36      	ldr	r3, [pc, #216]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d836:	4b37      	ldr	r3, [pc, #220]	@ (800d914 <HAL_RCC_OscConfig+0x774>)
 800d838:	4013      	ands	r3, r2
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d842:	0112      	lsls	r2, r2, #4
 800d844:	430a      	orrs	r2, r1
 800d846:	4931      	ldr	r1, [pc, #196]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d848:	4313      	orrs	r3, r2
 800d84a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d850:	3b01      	subs	r3, #1
 800d852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d85a:	3b01      	subs	r3, #1
 800d85c:	025b      	lsls	r3, r3, #9
 800d85e:	b29b      	uxth	r3, r3
 800d860:	431a      	orrs	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d866:	3b01      	subs	r3, #1
 800d868:	041b      	lsls	r3, r3, #16
 800d86a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d86e:	431a      	orrs	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d874:	3b01      	subs	r3, #1
 800d876:	061b      	lsls	r3, r3, #24
 800d878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d87c:	4923      	ldr	r1, [pc, #140]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d87e:	4313      	orrs	r3, r2
 800d880:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d882:	4b22      	ldr	r3, [pc, #136]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d886:	4a21      	ldr	r2, [pc, #132]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d888:	f023 0301 	bic.w	r3, r3, #1
 800d88c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d88e:	4b1f      	ldr	r3, [pc, #124]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d892:	4b21      	ldr	r3, [pc, #132]	@ (800d918 <HAL_RCC_OscConfig+0x778>)
 800d894:	4013      	ands	r3, r2
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d89a:	00d2      	lsls	r2, r2, #3
 800d89c:	491b      	ldr	r1, [pc, #108]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d8a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a6:	f023 020c 	bic.w	r2, r3, #12
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ae:	4917      	ldr	r1, [pc, #92]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d8b4:	4b15      	ldr	r3, [pc, #84]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b8:	f023 0202 	bic.w	r2, r3, #2
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8c0:	4912      	ldr	r1, [pc, #72]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d8c6:	4b11      	ldr	r3, [pc, #68]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ca:	4a10      	ldr	r2, [pc, #64]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d8d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d6:	4a0d      	ldr	r2, [pc, #52]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d8de:	4b0b      	ldr	r3, [pc, #44]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e2:	4a0a      	ldr	r2, [pc, #40]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d8e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d8ea:	4b08      	ldr	r3, [pc, #32]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ee:	4a07      	ldr	r2, [pc, #28]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8f0:	f043 0301 	orr.w	r3, r3, #1
 800d8f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d8f6:	4b05      	ldr	r3, [pc, #20]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a04      	ldr	r2, [pc, #16]	@ (800d90c <HAL_RCC_OscConfig+0x76c>)
 800d8fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d902:	f7f5 fdcf 	bl	80034a4 <HAL_GetTick>
 800d906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d908:	e011      	b.n	800d92e <HAL_RCC_OscConfig+0x78e>
 800d90a:	bf00      	nop
 800d90c:	58024400 	.word	0x58024400
 800d910:	58024800 	.word	0x58024800
 800d914:	fffffc0c 	.word	0xfffffc0c
 800d918:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d91c:	f7f5 fdc2 	bl	80034a4 <HAL_GetTick>
 800d920:	4602      	mov	r2, r0
 800d922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	2b02      	cmp	r3, #2
 800d928:	d901      	bls.n	800d92e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d92a:	2303      	movs	r3, #3
 800d92c:	e08a      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d92e:	4b47      	ldr	r3, [pc, #284]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0f0      	beq.n	800d91c <HAL_RCC_OscConfig+0x77c>
 800d93a:	e082      	b.n	800da42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d93c:	4b43      	ldr	r3, [pc, #268]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a42      	ldr	r2, [pc, #264]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d948:	f7f5 fdac 	bl	80034a4 <HAL_GetTick>
 800d94c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d94e:	e008      	b.n	800d962 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d950:	f7f5 fda8 	bl	80034a4 <HAL_GetTick>
 800d954:	4602      	mov	r2, r0
 800d956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d901      	bls.n	800d962 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d95e:	2303      	movs	r3, #3
 800d960:	e070      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d962:	4b3a      	ldr	r3, [pc, #232]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1f0      	bne.n	800d950 <HAL_RCC_OscConfig+0x7b0>
 800d96e:	e068      	b.n	800da42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d970:	4b36      	ldr	r3, [pc, #216]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d974:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d976:	4b35      	ldr	r3, [pc, #212]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d97a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d980:	2b01      	cmp	r3, #1
 800d982:	d031      	beq.n	800d9e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	f003 0203 	and.w	r2, r3, #3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d98e:	429a      	cmp	r2, r3
 800d990:	d12a      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	091b      	lsrs	r3, r3, #4
 800d996:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d122      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d11a      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	0a5b      	lsrs	r3, r3, #9
 800d9b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d111      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	0c1b      	lsrs	r3, r3, #16
 800d9c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d108      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	0e1b      	lsrs	r3, r3, #24
 800d9da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d001      	beq.n	800d9ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e02b      	b.n	800da44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d9ec:	4b17      	ldr	r3, [pc, #92]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f0:	08db      	lsrs	r3, r3, #3
 800d9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d01f      	beq.n	800da42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800da02:	4b12      	ldr	r3, [pc, #72]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800da04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da06:	4a11      	ldr	r2, [pc, #68]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800da08:	f023 0301 	bic.w	r3, r3, #1
 800da0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800da0e:	f7f5 fd49 	bl	80034a4 <HAL_GetTick>
 800da12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800da14:	bf00      	nop
 800da16:	f7f5 fd45 	bl	80034a4 <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1e:	4293      	cmp	r3, r2
 800da20:	d0f9      	beq.n	800da16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800da22:	4b0a      	ldr	r3, [pc, #40]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800da24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da26:	4b0a      	ldr	r3, [pc, #40]	@ (800da50 <HAL_RCC_OscConfig+0x8b0>)
 800da28:	4013      	ands	r3, r2
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800da2e:	00d2      	lsls	r2, r2, #3
 800da30:	4906      	ldr	r1, [pc, #24]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800da32:	4313      	orrs	r3, r2
 800da34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800da36:	4b05      	ldr	r3, [pc, #20]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	4a04      	ldr	r2, [pc, #16]	@ (800da4c <HAL_RCC_OscConfig+0x8ac>)
 800da3c:	f043 0301 	orr.w	r3, r3, #1
 800da40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3730      	adds	r7, #48	@ 0x30
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	58024400 	.word	0x58024400
 800da50:	ffff0007 	.word	0xffff0007

0800da54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e19c      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da68:	4b8a      	ldr	r3, [pc, #552]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d910      	bls.n	800da98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da76:	4b87      	ldr	r3, [pc, #540]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f023 020f 	bic.w	r2, r3, #15
 800da7e:	4985      	ldr	r1, [pc, #532]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	4313      	orrs	r3, r2
 800da84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da86:	4b83      	ldr	r3, [pc, #524]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 030f 	and.w	r3, r3, #15
 800da8e:	683a      	ldr	r2, [r7, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d001      	beq.n	800da98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e184      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d010      	beq.n	800dac6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	691a      	ldr	r2, [r3, #16]
 800daa8:	4b7b      	ldr	r3, [pc, #492]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d908      	bls.n	800dac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dab4:	4b78      	ldr	r3, [pc, #480]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	4975      	ldr	r1, [pc, #468]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dac2:	4313      	orrs	r3, r2
 800dac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0308 	and.w	r3, r3, #8
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d010      	beq.n	800daf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	695a      	ldr	r2, [r3, #20]
 800dad6:	4b70      	ldr	r3, [pc, #448]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dad8:	69db      	ldr	r3, [r3, #28]
 800dada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dade:	429a      	cmp	r2, r3
 800dae0:	d908      	bls.n	800daf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dae2:	4b6d      	ldr	r3, [pc, #436]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dae4:	69db      	ldr	r3, [r3, #28]
 800dae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	496a      	ldr	r1, [pc, #424]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800daf0:	4313      	orrs	r3, r2
 800daf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 0310 	and.w	r3, r3, #16
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d010      	beq.n	800db22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	699a      	ldr	r2, [r3, #24]
 800db04:	4b64      	ldr	r3, [pc, #400]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db06:	69db      	ldr	r3, [r3, #28]
 800db08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d908      	bls.n	800db22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800db10:	4b61      	ldr	r3, [pc, #388]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db12:	69db      	ldr	r3, [r3, #28]
 800db14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	699b      	ldr	r3, [r3, #24]
 800db1c:	495e      	ldr	r1, [pc, #376]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db1e:	4313      	orrs	r3, r2
 800db20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f003 0320 	and.w	r3, r3, #32
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d010      	beq.n	800db50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	69da      	ldr	r2, [r3, #28]
 800db32:	4b59      	ldr	r3, [pc, #356]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db34:	6a1b      	ldr	r3, [r3, #32]
 800db36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d908      	bls.n	800db50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800db3e:	4b56      	ldr	r3, [pc, #344]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	69db      	ldr	r3, [r3, #28]
 800db4a:	4953      	ldr	r1, [pc, #332]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db4c:	4313      	orrs	r3, r2
 800db4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f003 0302 	and.w	r3, r3, #2
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d010      	beq.n	800db7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	68da      	ldr	r2, [r3, #12]
 800db60:	4b4d      	ldr	r3, [pc, #308]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	f003 030f 	and.w	r3, r3, #15
 800db68:	429a      	cmp	r2, r3
 800db6a:	d908      	bls.n	800db7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db6c:	4b4a      	ldr	r3, [pc, #296]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	f023 020f 	bic.w	r2, r3, #15
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	4947      	ldr	r1, [pc, #284]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db7a:	4313      	orrs	r3, r2
 800db7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	2b00      	cmp	r3, #0
 800db88:	d055      	beq.n	800dc36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800db8a:	4b43      	ldr	r3, [pc, #268]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db8c:	699b      	ldr	r3, [r3, #24]
 800db8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	4940      	ldr	r1, [pc, #256]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800db98:	4313      	orrs	r3, r2
 800db9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d107      	bne.n	800dbb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dba4:	4b3c      	ldr	r3, [pc, #240]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d121      	bne.n	800dbf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e0f6      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	d107      	bne.n	800dbcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dbbc:	4b36      	ldr	r3, [pc, #216]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d115      	bne.n	800dbf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	e0ea      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d107      	bne.n	800dbe4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dbd4:	4b30      	ldr	r3, [pc, #192]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d109      	bne.n	800dbf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e0de      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dbe4:	4b2c      	ldr	r3, [pc, #176]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f003 0304 	and.w	r3, r3, #4
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d101      	bne.n	800dbf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e0d6      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dbf4:	4b28      	ldr	r3, [pc, #160]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	f023 0207 	bic.w	r2, r3, #7
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	4925      	ldr	r1, [pc, #148]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc02:	4313      	orrs	r3, r2
 800dc04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc06:	f7f5 fc4d 	bl	80034a4 <HAL_GetTick>
 800dc0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc0c:	e00a      	b.n	800dc24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc0e:	f7f5 fc49 	bl	80034a4 <HAL_GetTick>
 800dc12:	4602      	mov	r2, r0
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d901      	bls.n	800dc24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800dc20:	2303      	movs	r3, #3
 800dc22:	e0be      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc24:	4b1c      	ldr	r3, [pc, #112]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d1eb      	bne.n	800dc0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d010      	beq.n	800dc64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68da      	ldr	r2, [r3, #12]
 800dc46:	4b14      	ldr	r3, [pc, #80]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	f003 030f 	and.w	r3, r3, #15
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d208      	bcs.n	800dc64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc52:	4b11      	ldr	r3, [pc, #68]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc54:	699b      	ldr	r3, [r3, #24]
 800dc56:	f023 020f 	bic.w	r2, r3, #15
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	490e      	ldr	r1, [pc, #56]	@ (800dc98 <HAL_RCC_ClockConfig+0x244>)
 800dc60:	4313      	orrs	r3, r2
 800dc62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dc64:	4b0b      	ldr	r3, [pc, #44]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f003 030f 	and.w	r3, r3, #15
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d214      	bcs.n	800dc9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc72:	4b08      	ldr	r3, [pc, #32]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f023 020f 	bic.w	r2, r3, #15
 800dc7a:	4906      	ldr	r1, [pc, #24]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc82:	4b04      	ldr	r3, [pc, #16]	@ (800dc94 <HAL_RCC_ClockConfig+0x240>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f003 030f 	and.w	r3, r3, #15
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d005      	beq.n	800dc9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	e086      	b.n	800dda2 <HAL_RCC_ClockConfig+0x34e>
 800dc94:	52002000 	.word	0x52002000
 800dc98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0304 	and.w	r3, r3, #4
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d010      	beq.n	800dcca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	691a      	ldr	r2, [r3, #16]
 800dcac:	4b3f      	ldr	r3, [pc, #252]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d208      	bcs.n	800dcca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dcb8:	4b3c      	ldr	r3, [pc, #240]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	4939      	ldr	r1, [pc, #228]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f003 0308 	and.w	r3, r3, #8
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d010      	beq.n	800dcf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	695a      	ldr	r2, [r3, #20]
 800dcda:	4b34      	ldr	r3, [pc, #208]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dcdc:	69db      	ldr	r3, [r3, #28]
 800dcde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d208      	bcs.n	800dcf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dce6:	4b31      	ldr	r3, [pc, #196]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dce8:	69db      	ldr	r3, [r3, #28]
 800dcea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	492e      	ldr	r1, [pc, #184]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 0310 	and.w	r3, r3, #16
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d010      	beq.n	800dd26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	699a      	ldr	r2, [r3, #24]
 800dd08:	4b28      	ldr	r3, [pc, #160]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd0a:	69db      	ldr	r3, [r3, #28]
 800dd0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d208      	bcs.n	800dd26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dd14:	4b25      	ldr	r3, [pc, #148]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd16:	69db      	ldr	r3, [r3, #28]
 800dd18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	699b      	ldr	r3, [r3, #24]
 800dd20:	4922      	ldr	r1, [pc, #136]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd22:	4313      	orrs	r3, r2
 800dd24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f003 0320 	and.w	r3, r3, #32
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d010      	beq.n	800dd54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	69da      	ldr	r2, [r3, #28]
 800dd36:	4b1d      	ldr	r3, [pc, #116]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd38:	6a1b      	ldr	r3, [r3, #32]
 800dd3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d208      	bcs.n	800dd54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dd42:	4b1a      	ldr	r3, [pc, #104]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	69db      	ldr	r3, [r3, #28]
 800dd4e:	4917      	ldr	r1, [pc, #92]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd50:	4313      	orrs	r3, r2
 800dd52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dd54:	f000 f834 	bl	800ddc0 <HAL_RCC_GetSysClockFreq>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	4b14      	ldr	r3, [pc, #80]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd5c:	699b      	ldr	r3, [r3, #24]
 800dd5e:	0a1b      	lsrs	r3, r3, #8
 800dd60:	f003 030f 	and.w	r3, r3, #15
 800dd64:	4912      	ldr	r1, [pc, #72]	@ (800ddb0 <HAL_RCC_ClockConfig+0x35c>)
 800dd66:	5ccb      	ldrb	r3, [r1, r3]
 800dd68:	f003 031f 	and.w	r3, r3, #31
 800dd6c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dd72:	4b0e      	ldr	r3, [pc, #56]	@ (800ddac <HAL_RCC_ClockConfig+0x358>)
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	f003 030f 	and.w	r3, r3, #15
 800dd7a:	4a0d      	ldr	r2, [pc, #52]	@ (800ddb0 <HAL_RCC_ClockConfig+0x35c>)
 800dd7c:	5cd3      	ldrb	r3, [r2, r3]
 800dd7e:	f003 031f 	and.w	r3, r3, #31
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	fa22 f303 	lsr.w	r3, r2, r3
 800dd88:	4a0a      	ldr	r2, [pc, #40]	@ (800ddb4 <HAL_RCC_ClockConfig+0x360>)
 800dd8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dd8c:	4a0a      	ldr	r2, [pc, #40]	@ (800ddb8 <HAL_RCC_ClockConfig+0x364>)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dd92:	4b0a      	ldr	r3, [pc, #40]	@ (800ddbc <HAL_RCC_ClockConfig+0x368>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7f5 fb3a 	bl	8003410 <HAL_InitTick>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	58024400 	.word	0x58024400
 800ddb0:	0801b400 	.word	0x0801b400
 800ddb4:	2400001c 	.word	0x2400001c
 800ddb8:	24000018 	.word	0x24000018
 800ddbc:	24000020 	.word	0x24000020

0800ddc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b089      	sub	sp, #36	@ 0x24
 800ddc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ddc6:	4bb3      	ldr	r3, [pc, #716]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddce:	2b18      	cmp	r3, #24
 800ddd0:	f200 8155 	bhi.w	800e07e <HAL_RCC_GetSysClockFreq+0x2be>
 800ddd4:	a201      	add	r2, pc, #4	@ (adr r2, 800dddc <HAL_RCC_GetSysClockFreq+0x1c>)
 800ddd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddda:	bf00      	nop
 800dddc:	0800de41 	.word	0x0800de41
 800dde0:	0800e07f 	.word	0x0800e07f
 800dde4:	0800e07f 	.word	0x0800e07f
 800dde8:	0800e07f 	.word	0x0800e07f
 800ddec:	0800e07f 	.word	0x0800e07f
 800ddf0:	0800e07f 	.word	0x0800e07f
 800ddf4:	0800e07f 	.word	0x0800e07f
 800ddf8:	0800e07f 	.word	0x0800e07f
 800ddfc:	0800de67 	.word	0x0800de67
 800de00:	0800e07f 	.word	0x0800e07f
 800de04:	0800e07f 	.word	0x0800e07f
 800de08:	0800e07f 	.word	0x0800e07f
 800de0c:	0800e07f 	.word	0x0800e07f
 800de10:	0800e07f 	.word	0x0800e07f
 800de14:	0800e07f 	.word	0x0800e07f
 800de18:	0800e07f 	.word	0x0800e07f
 800de1c:	0800de6d 	.word	0x0800de6d
 800de20:	0800e07f 	.word	0x0800e07f
 800de24:	0800e07f 	.word	0x0800e07f
 800de28:	0800e07f 	.word	0x0800e07f
 800de2c:	0800e07f 	.word	0x0800e07f
 800de30:	0800e07f 	.word	0x0800e07f
 800de34:	0800e07f 	.word	0x0800e07f
 800de38:	0800e07f 	.word	0x0800e07f
 800de3c:	0800de73 	.word	0x0800de73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de40:	4b94      	ldr	r3, [pc, #592]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f003 0320 	and.w	r3, r3, #32
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d009      	beq.n	800de60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de4c:	4b91      	ldr	r3, [pc, #580]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	08db      	lsrs	r3, r3, #3
 800de52:	f003 0303 	and.w	r3, r3, #3
 800de56:	4a90      	ldr	r2, [pc, #576]	@ (800e098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de58:	fa22 f303 	lsr.w	r3, r2, r3
 800de5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800de5e:	e111      	b.n	800e084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800de60:	4b8d      	ldr	r3, [pc, #564]	@ (800e098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de62:	61bb      	str	r3, [r7, #24]
      break;
 800de64:	e10e      	b.n	800e084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800de66:	4b8d      	ldr	r3, [pc, #564]	@ (800e09c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800de68:	61bb      	str	r3, [r7, #24]
      break;
 800de6a:	e10b      	b.n	800e084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800de6c:	4b8c      	ldr	r3, [pc, #560]	@ (800e0a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800de6e:	61bb      	str	r3, [r7, #24]
      break;
 800de70:	e108      	b.n	800e084 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de72:	4b88      	ldr	r3, [pc, #544]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de76:	f003 0303 	and.w	r3, r3, #3
 800de7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800de7c:	4b85      	ldr	r3, [pc, #532]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de80:	091b      	lsrs	r3, r3, #4
 800de82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de88:	4b82      	ldr	r3, [pc, #520]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de92:	4b80      	ldr	r3, [pc, #512]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de96:	08db      	lsrs	r3, r3, #3
 800de98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	fb02 f303 	mul.w	r3, r2, r3
 800dea2:	ee07 3a90 	vmov	s15, r3
 800dea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 80e1 	beq.w	800e078 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b02      	cmp	r3, #2
 800deba:	f000 8083 	beq.w	800dfc4 <HAL_RCC_GetSysClockFreq+0x204>
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	f200 80a1 	bhi.w	800e008 <HAL_RCC_GetSysClockFreq+0x248>
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <HAL_RCC_GetSysClockFreq+0x114>
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2b01      	cmp	r3, #1
 800ded0:	d056      	beq.n	800df80 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ded2:	e099      	b.n	800e008 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ded4:	4b6f      	ldr	r3, [pc, #444]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f003 0320 	and.w	r3, r3, #32
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d02d      	beq.n	800df3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dee0:	4b6c      	ldr	r3, [pc, #432]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	08db      	lsrs	r3, r3, #3
 800dee6:	f003 0303 	and.w	r3, r3, #3
 800deea:	4a6b      	ldr	r2, [pc, #428]	@ (800e098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800deec:	fa22 f303 	lsr.w	r3, r2, r3
 800def0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	ee07 3a90 	vmov	s15, r3
 800def8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	ee07 3a90 	vmov	s15, r3
 800df02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df0a:	4b62      	ldr	r3, [pc, #392]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df12:	ee07 3a90 	vmov	s15, r3
 800df16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800df3a:	e087      	b.n	800e04c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	ee07 3a90 	vmov	s15, r3
 800df42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e0a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800df4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df4e:	4b51      	ldr	r3, [pc, #324]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df56:	ee07 3a90 	vmov	s15, r3
 800df5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800df62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df7e:	e065      	b.n	800e04c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	ee07 3a90 	vmov	s15, r3
 800df86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e0ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800df8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df92:	4b40      	ldr	r3, [pc, #256]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df9a:	ee07 3a90 	vmov	s15, r3
 800df9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfa2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfa6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfc2:	e043      	b.n	800e04c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	ee07 3a90 	vmov	s15, r3
 800dfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e0b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800dfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfd6:	4b2f      	ldr	r3, [pc, #188]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfde:	ee07 3a90 	vmov	s15, r3
 800dfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfe6:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e006:	e021      	b.n	800e04c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	ee07 3a90 	vmov	s15, r3
 800e00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e012:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e0ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800e016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e01a:	4b1e      	ldr	r3, [pc, #120]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e022:	ee07 3a90 	vmov	s15, r3
 800e026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e02a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e02e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e03a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e04a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e04c:	4b11      	ldr	r3, [pc, #68]	@ (800e094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e050:	0a5b      	lsrs	r3, r3, #9
 800e052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e056:	3301      	adds	r3, #1
 800e058:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	ee07 3a90 	vmov	s15, r3
 800e060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e064:	edd7 6a07 	vldr	s13, [r7, #28]
 800e068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e070:	ee17 3a90 	vmov	r3, s15
 800e074:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e076:	e005      	b.n	800e084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e078:	2300      	movs	r3, #0
 800e07a:	61bb      	str	r3, [r7, #24]
      break;
 800e07c:	e002      	b.n	800e084 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e07e:	4b07      	ldr	r3, [pc, #28]	@ (800e09c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e080:	61bb      	str	r3, [r7, #24]
      break;
 800e082:	bf00      	nop
  }

  return sysclockfreq;
 800e084:	69bb      	ldr	r3, [r7, #24]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3724      	adds	r7, #36	@ 0x24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	58024400 	.word	0x58024400
 800e098:	03d09000 	.word	0x03d09000
 800e09c:	003d0900 	.word	0x003d0900
 800e0a0:	017d7840 	.word	0x017d7840
 800e0a4:	46000000 	.word	0x46000000
 800e0a8:	4c742400 	.word	0x4c742400
 800e0ac:	4a742400 	.word	0x4a742400
 800e0b0:	4bbebc20 	.word	0x4bbebc20

0800e0b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e0ba:	f7ff fe81 	bl	800ddc0 <HAL_RCC_GetSysClockFreq>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	4b10      	ldr	r3, [pc, #64]	@ (800e104 <HAL_RCC_GetHCLKFreq+0x50>)
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	0a1b      	lsrs	r3, r3, #8
 800e0c6:	f003 030f 	and.w	r3, r3, #15
 800e0ca:	490f      	ldr	r1, [pc, #60]	@ (800e108 <HAL_RCC_GetHCLKFreq+0x54>)
 800e0cc:	5ccb      	ldrb	r3, [r1, r3]
 800e0ce:	f003 031f 	and.w	r3, r3, #31
 800e0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e0d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <HAL_RCC_GetHCLKFreq+0x50>)
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	f003 030f 	and.w	r3, r3, #15
 800e0e0:	4a09      	ldr	r2, [pc, #36]	@ (800e108 <HAL_RCC_GetHCLKFreq+0x54>)
 800e0e2:	5cd3      	ldrb	r3, [r2, r3]
 800e0e4:	f003 031f 	and.w	r3, r3, #31
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ee:	4a07      	ldr	r2, [pc, #28]	@ (800e10c <HAL_RCC_GetHCLKFreq+0x58>)
 800e0f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e0f2:	4a07      	ldr	r2, [pc, #28]	@ (800e110 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e0f8:	4b04      	ldr	r3, [pc, #16]	@ (800e10c <HAL_RCC_GetHCLKFreq+0x58>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	58024400 	.word	0x58024400
 800e108:	0801b400 	.word	0x0801b400
 800e10c:	2400001c 	.word	0x2400001c
 800e110:	24000018 	.word	0x24000018

0800e114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e118:	f7ff ffcc 	bl	800e0b4 <HAL_RCC_GetHCLKFreq>
 800e11c:	4602      	mov	r2, r0
 800e11e:	4b06      	ldr	r3, [pc, #24]	@ (800e138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e120:	69db      	ldr	r3, [r3, #28]
 800e122:	091b      	lsrs	r3, r3, #4
 800e124:	f003 0307 	and.w	r3, r3, #7
 800e128:	4904      	ldr	r1, [pc, #16]	@ (800e13c <HAL_RCC_GetPCLK1Freq+0x28>)
 800e12a:	5ccb      	ldrb	r3, [r1, r3]
 800e12c:	f003 031f 	and.w	r3, r3, #31
 800e130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e134:	4618      	mov	r0, r3
 800e136:	bd80      	pop	{r7, pc}
 800e138:	58024400 	.word	0x58024400
 800e13c:	0801b400 	.word	0x0801b400

0800e140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e144:	f7ff ffb6 	bl	800e0b4 <HAL_RCC_GetHCLKFreq>
 800e148:	4602      	mov	r2, r0
 800e14a:	4b06      	ldr	r3, [pc, #24]	@ (800e164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	0a1b      	lsrs	r3, r3, #8
 800e150:	f003 0307 	and.w	r3, r3, #7
 800e154:	4904      	ldr	r1, [pc, #16]	@ (800e168 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e156:	5ccb      	ldrb	r3, [r1, r3]
 800e158:	f003 031f 	and.w	r3, r3, #31
 800e15c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e160:	4618      	mov	r0, r3
 800e162:	bd80      	pop	{r7, pc}
 800e164:	58024400 	.word	0x58024400
 800e168:	0801b400 	.word	0x0801b400

0800e16c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e16c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e170:	b0ca      	sub	sp, #296	@ 0x128
 800e172:	af00      	add	r7, sp, #0
 800e174:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e178:	2300      	movs	r3, #0
 800e17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e17e:	2300      	movs	r3, #0
 800e180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e190:	2500      	movs	r5, #0
 800e192:	ea54 0305 	orrs.w	r3, r4, r5
 800e196:	d049      	beq.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e19c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e19e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e1a2:	d02f      	beq.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e1a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e1a8:	d828      	bhi.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e1aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1ae:	d01a      	beq.n	800e1e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e1b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1b4:	d822      	bhi.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d003      	beq.n	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1be:	d007      	beq.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e1c0:	e01c      	b.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1c2:	4bb8      	ldr	r3, [pc, #736]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c6:	4ab7      	ldr	r2, [pc, #732]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e1c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1ce:	e01a      	b.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1d4:	3308      	adds	r3, #8
 800e1d6:	2102      	movs	r1, #2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f001 fc8f 	bl	800fafc <RCCEx_PLL2_Config>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1e4:	e00f      	b.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ea:	3328      	adds	r3, #40	@ 0x28
 800e1ec:	2102      	movs	r1, #2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f001 fd36 	bl	800fc60 <RCCEx_PLL3_Config>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1fa:	e004      	b.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e202:	e000      	b.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e204:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d10a      	bne.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e20e:	4ba5      	ldr	r3, [pc, #660]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e212:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e21a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e21c:	4aa1      	ldr	r2, [pc, #644]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e21e:	430b      	orrs	r3, r1
 800e220:	6513      	str	r3, [r2, #80]	@ 0x50
 800e222:	e003      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e228:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e238:	f04f 0900 	mov.w	r9, #0
 800e23c:	ea58 0309 	orrs.w	r3, r8, r9
 800e240:	d047      	beq.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e248:	2b04      	cmp	r3, #4
 800e24a:	d82a      	bhi.n	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e24c:	a201      	add	r2, pc, #4	@ (adr r2, 800e254 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e252:	bf00      	nop
 800e254:	0800e269 	.word	0x0800e269
 800e258:	0800e277 	.word	0x0800e277
 800e25c:	0800e28d 	.word	0x0800e28d
 800e260:	0800e2ab 	.word	0x0800e2ab
 800e264:	0800e2ab 	.word	0x0800e2ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e268:	4b8e      	ldr	r3, [pc, #568]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e26c:	4a8d      	ldr	r2, [pc, #564]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e26e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e274:	e01a      	b.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e27a:	3308      	adds	r3, #8
 800e27c:	2100      	movs	r1, #0
 800e27e:	4618      	mov	r0, r3
 800e280:	f001 fc3c 	bl	800fafc <RCCEx_PLL2_Config>
 800e284:	4603      	mov	r3, r0
 800e286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e28a:	e00f      	b.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e290:	3328      	adds	r3, #40	@ 0x28
 800e292:	2100      	movs	r1, #0
 800e294:	4618      	mov	r0, r3
 800e296:	f001 fce3 	bl	800fc60 <RCCEx_PLL3_Config>
 800e29a:	4603      	mov	r3, r0
 800e29c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2a0:	e004      	b.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e2a8:	e000      	b.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10a      	bne.n	800e2ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e2b4:	4b7b      	ldr	r3, [pc, #492]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b8:	f023 0107 	bic.w	r1, r3, #7
 800e2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2c2:	4a78      	ldr	r2, [pc, #480]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e2c4:	430b      	orrs	r3, r1
 800e2c6:	6513      	str	r3, [r2, #80]	@ 0x50
 800e2c8:	e003      	b.n	800e2d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800e2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800e2de:	f04f 0b00 	mov.w	fp, #0
 800e2e2:	ea5a 030b 	orrs.w	r3, sl, fp
 800e2e6:	d04c      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800e2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e2ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2f2:	d030      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800e2f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2f8:	d829      	bhi.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e2fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800e2fc:	d02d      	beq.n	800e35a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800e2fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800e300:	d825      	bhi.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e302:	2b80      	cmp	r3, #128	@ 0x80
 800e304:	d018      	beq.n	800e338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800e306:	2b80      	cmp	r3, #128	@ 0x80
 800e308:	d821      	bhi.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800e30e:	2b40      	cmp	r3, #64	@ 0x40
 800e310:	d007      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800e312:	e01c      	b.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e314:	4b63      	ldr	r3, [pc, #396]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e318:	4a62      	ldr	r2, [pc, #392]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e31a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e31e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e320:	e01c      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e326:	3308      	adds	r3, #8
 800e328:	2100      	movs	r1, #0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f001 fbe6 	bl	800fafc <RCCEx_PLL2_Config>
 800e330:	4603      	mov	r3, r0
 800e332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e336:	e011      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e33c:	3328      	adds	r3, #40	@ 0x28
 800e33e:	2100      	movs	r1, #0
 800e340:	4618      	mov	r0, r3
 800e342:	f001 fc8d 	bl	800fc60 <RCCEx_PLL3_Config>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800e34c:	e006      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e354:	e002      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e356:	bf00      	nop
 800e358:	e000      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800e35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e35c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10a      	bne.n	800e37a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e364:	4b4f      	ldr	r3, [pc, #316]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e368:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800e36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e372:	4a4c      	ldr	r2, [pc, #304]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e374:	430b      	orrs	r3, r1
 800e376:	6513      	str	r3, [r2, #80]	@ 0x50
 800e378:	e003      	b.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e37a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e37e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800e38e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800e392:	2300      	movs	r3, #0
 800e394:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800e398:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800e39c:	460b      	mov	r3, r1
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	d053      	beq.n	800e44a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e3ae:	d035      	beq.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800e3b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e3b4:	d82e      	bhi.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e3ba:	d031      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800e3bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e3c0:	d828      	bhi.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3c6:	d01a      	beq.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e3c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3cc:	d822      	bhi.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800e3d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e3d6:	d007      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800e3d8:	e01c      	b.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3da:	4b32      	ldr	r3, [pc, #200]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3de:	4a31      	ldr	r2, [pc, #196]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e3e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e3e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e3e6:	e01c      	b.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3ec:	3308      	adds	r3, #8
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f001 fb83 	bl	800fafc <RCCEx_PLL2_Config>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e3fc:	e011      	b.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e402:	3328      	adds	r3, #40	@ 0x28
 800e404:	2100      	movs	r1, #0
 800e406:	4618      	mov	r0, r3
 800e408:	f001 fc2a 	bl	800fc60 <RCCEx_PLL3_Config>
 800e40c:	4603      	mov	r3, r0
 800e40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e412:	e006      	b.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e414:	2301      	movs	r3, #1
 800e416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e41a:	e002      	b.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e41c:	bf00      	nop
 800e41e:	e000      	b.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800e420:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e426:	2b00      	cmp	r3, #0
 800e428:	d10b      	bne.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e42a:	4b1e      	ldr	r3, [pc, #120]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e42c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e42e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e43a:	4a1a      	ldr	r2, [pc, #104]	@ (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e43c:	430b      	orrs	r3, r1
 800e43e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e440:	e003      	b.n	800e44a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e456:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e45a:	2300      	movs	r3, #0
 800e45c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e460:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800e464:	460b      	mov	r3, r1
 800e466:	4313      	orrs	r3, r2
 800e468:	d056      	beq.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e46e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e476:	d038      	beq.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e47c:	d831      	bhi.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e47e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e482:	d034      	beq.n	800e4ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 800e484:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e488:	d82b      	bhi.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e48a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e48e:	d01d      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800e490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e494:	d825      	bhi.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e496:	2b00      	cmp	r3, #0
 800e498:	d006      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e49a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e49e:	d00a      	beq.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e4a0:	e01f      	b.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e4a2:	bf00      	nop
 800e4a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4a8:	4ba2      	ldr	r3, [pc, #648]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ac:	4aa1      	ldr	r2, [pc, #644]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e4b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e4b4:	e01c      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	2100      	movs	r1, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f001 fb1c 	bl	800fafc <RCCEx_PLL2_Config>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e4ca:	e011      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4d0:	3328      	adds	r3, #40	@ 0x28
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f001 fbc3 	bl	800fc60 <RCCEx_PLL3_Config>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e4e0:	e006      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e4e8:	e002      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e4ea:	bf00      	nop
 800e4ec:	e000      	b.n	800e4f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800e4ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10b      	bne.n	800e510 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e4f8:	4b8e      	ldr	r3, [pc, #568]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e4fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e504:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e508:	4a8a      	ldr	r2, [pc, #552]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e50a:	430b      	orrs	r3, r1
 800e50c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e50e:	e003      	b.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e528:	2300      	movs	r3, #0
 800e52a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e52e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e532:	460b      	mov	r3, r1
 800e534:	4313      	orrs	r3, r2
 800e536:	d03a      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800e538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e53e:	2b30      	cmp	r3, #48	@ 0x30
 800e540:	d01f      	beq.n	800e582 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e542:	2b30      	cmp	r3, #48	@ 0x30
 800e544:	d819      	bhi.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e546:	2b20      	cmp	r3, #32
 800e548:	d00c      	beq.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800e54a:	2b20      	cmp	r3, #32
 800e54c:	d815      	bhi.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d019      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800e552:	2b10      	cmp	r3, #16
 800e554:	d111      	bne.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e556:	4b77      	ldr	r3, [pc, #476]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e55a:	4a76      	ldr	r2, [pc, #472]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e55c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e562:	e011      	b.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e568:	3308      	adds	r3, #8
 800e56a:	2102      	movs	r1, #2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f001 fac5 	bl	800fafc <RCCEx_PLL2_Config>
 800e572:	4603      	mov	r3, r0
 800e574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800e578:	e006      	b.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e580:	e002      	b.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e582:	bf00      	nop
 800e584:	e000      	b.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800e586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e590:	4b68      	ldr	r3, [pc, #416]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e594:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e59c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e59e:	4a65      	ldr	r2, [pc, #404]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e5a0:	430b      	orrs	r3, r1
 800e5a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e5a4:	e003      	b.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e5ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e5c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	d051      	beq.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5d8:	d035      	beq.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800e5da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5de:	d82e      	bhi.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e5e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e5e4:	d031      	beq.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e5e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e5ea:	d828      	bhi.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e5ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5f0:	d01a      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800e5f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5f6:	d822      	bhi.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d003      	beq.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800e5fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e600:	d007      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800e602:	e01c      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e604:	4b4b      	ldr	r3, [pc, #300]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e608:	4a4a      	ldr	r2, [pc, #296]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e60a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e60e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e610:	e01c      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e616:	3308      	adds	r3, #8
 800e618:	2100      	movs	r1, #0
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 fa6e 	bl	800fafc <RCCEx_PLL2_Config>
 800e620:	4603      	mov	r3, r0
 800e622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e626:	e011      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e62c:	3328      	adds	r3, #40	@ 0x28
 800e62e:	2100      	movs	r1, #0
 800e630:	4618      	mov	r0, r3
 800e632:	f001 fb15 	bl	800fc60 <RCCEx_PLL3_Config>
 800e636:	4603      	mov	r3, r0
 800e638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e63c:	e006      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e644:	e002      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e646:	bf00      	nop
 800e648:	e000      	b.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e64a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e64c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e654:	4b37      	ldr	r3, [pc, #220]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e658:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e662:	4a34      	ldr	r2, [pc, #208]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e664:	430b      	orrs	r3, r1
 800e666:	6513      	str	r3, [r2, #80]	@ 0x50
 800e668:	e003      	b.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e66e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e67e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e682:	2300      	movs	r3, #0
 800e684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e68c:	460b      	mov	r3, r1
 800e68e:	4313      	orrs	r3, r2
 800e690:	d056      	beq.n	800e740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e69c:	d033      	beq.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e69e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6a2:	d82c      	bhi.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6a8:	d02f      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e6aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6ae:	d826      	bhi.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6b4:	d02b      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e6b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6ba:	d820      	bhi.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6c0:	d012      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e6c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6c6:	d81a      	bhi.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d022      	beq.n	800e712 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e6cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6d0:	d115      	bne.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	2101      	movs	r1, #1
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f001 fa0e 	bl	800fafc <RCCEx_PLL2_Config>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e6e6:	e015      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6ec:	3328      	adds	r3, #40	@ 0x28
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f001 fab5 	bl	800fc60 <RCCEx_PLL3_Config>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e6fc:	e00a      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6fe:	2301      	movs	r3, #1
 800e700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e704:	e006      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e706:	bf00      	nop
 800e708:	e004      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e70a:	bf00      	nop
 800e70c:	e002      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e70e:	bf00      	nop
 800e710:	e000      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e712:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d10d      	bne.n	800e738 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e71c:	4b05      	ldr	r3, [pc, #20]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e71e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e720:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e72a:	4a02      	ldr	r2, [pc, #8]	@ (800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e72c:	430b      	orrs	r3, r1
 800e72e:	6513      	str	r3, [r2, #80]	@ 0x50
 800e730:	e006      	b.n	800e740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e732:	bf00      	nop
 800e734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e73c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e74c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e750:	2300      	movs	r3, #0
 800e752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e756:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e75a:	460b      	mov	r3, r1
 800e75c:	4313      	orrs	r3, r2
 800e75e:	d055      	beq.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e76c:	d033      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e76e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e772:	d82c      	bhi.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e778:	d02f      	beq.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e77a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e77e:	d826      	bhi.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e780:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e784:	d02b      	beq.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e786:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e78a:	d820      	bhi.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e78c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e790:	d012      	beq.n	800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e796:	d81a      	bhi.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d022      	beq.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e79c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7a0:	d115      	bne.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	2101      	movs	r1, #1
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f001 f9a6 	bl	800fafc <RCCEx_PLL2_Config>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e7b6:	e015      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7bc:	3328      	adds	r3, #40	@ 0x28
 800e7be:	2101      	movs	r1, #1
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f001 fa4d 	bl	800fc60 <RCCEx_PLL3_Config>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e7cc:	e00a      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7d4:	e006      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7d6:	bf00      	nop
 800e7d8:	e004      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7da:	bf00      	nop
 800e7dc:	e002      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7de:	bf00      	nop
 800e7e0:	e000      	b.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10b      	bne.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e7ec:	4ba3      	ldr	r3, [pc, #652]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e7fc:	4a9f      	ldr	r2, [pc, #636]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e7fe:	430b      	orrs	r3, r1
 800e800:	6593      	str	r3, [r2, #88]	@ 0x58
 800e802:	e003      	b.n	800e80c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e81c:	2300      	movs	r3, #0
 800e81e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e826:	460b      	mov	r3, r1
 800e828:	4313      	orrs	r3, r2
 800e82a:	d037      	beq.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e836:	d00e      	beq.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e83c:	d816      	bhi.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d018      	beq.n	800e874 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e846:	d111      	bne.n	800e86c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e848:	4b8c      	ldr	r3, [pc, #560]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e84c:	4a8b      	ldr	r2, [pc, #556]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e84e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e854:	e00f      	b.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e85a:	3308      	adds	r3, #8
 800e85c:	2101      	movs	r1, #1
 800e85e:	4618      	mov	r0, r3
 800e860:	f001 f94c 	bl	800fafc <RCCEx_PLL2_Config>
 800e864:	4603      	mov	r3, r0
 800e866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e86a:	e004      	b.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e86c:	2301      	movs	r3, #1
 800e86e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e872:	e000      	b.n	800e876 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e874:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d10a      	bne.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e87e:	4b7f      	ldr	r3, [pc, #508]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e882:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e88a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e88c:	4a7b      	ldr	r2, [pc, #492]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e88e:	430b      	orrs	r3, r1
 800e890:	6513      	str	r3, [r2, #80]	@ 0x50
 800e892:	e003      	b.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e8a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e8b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	d039      	beq.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d81c      	bhi.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e8cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e909 	.word	0x0800e909
 800e8d0:	0800e8dd 	.word	0x0800e8dd
 800e8d4:	0800e8eb 	.word	0x0800e8eb
 800e8d8:	0800e909 	.word	0x0800e909
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8dc:	4b67      	ldr	r3, [pc, #412]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e0:	4a66      	ldr	r2, [pc, #408]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e8e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e8e8:	e00f      	b.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	2102      	movs	r1, #2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f001 f902 	bl	800fafc <RCCEx_PLL2_Config>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e8fe:	e004      	b.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e906:	e000      	b.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10a      	bne.n	800e928 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e912:	4b5a      	ldr	r3, [pc, #360]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e916:	f023 0103 	bic.w	r1, r3, #3
 800e91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e91e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e920:	4a56      	ldr	r2, [pc, #344]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e922:	430b      	orrs	r3, r1
 800e924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e926:	e003      	b.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e92c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e93c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e940:	2300      	movs	r3, #0
 800e942:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e946:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e94a:	460b      	mov	r3, r1
 800e94c:	4313      	orrs	r3, r2
 800e94e:	f000 809f 	beq.w	800ea90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e952:	4b4b      	ldr	r3, [pc, #300]	@ (800ea80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a4a      	ldr	r2, [pc, #296]	@ (800ea80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e95c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e95e:	f7f4 fda1 	bl	80034a4 <HAL_GetTick>
 800e962:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e966:	e00b      	b.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e968:	f7f4 fd9c 	bl	80034a4 <HAL_GetTick>
 800e96c:	4602      	mov	r2, r0
 800e96e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	2b64      	cmp	r3, #100	@ 0x64
 800e976:	d903      	bls.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e978:	2303      	movs	r3, #3
 800e97a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e97e:	e005      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e980:	4b3f      	ldr	r3, [pc, #252]	@ (800ea80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d0ed      	beq.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e98c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e990:	2b00      	cmp	r3, #0
 800e992:	d179      	bne.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e994:	4b39      	ldr	r3, [pc, #228]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e996:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e99c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9a0:	4053      	eors	r3, r2
 800e9a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d015      	beq.n	800e9d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e9aa:	4b34      	ldr	r3, [pc, #208]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e9b6:	4b31      	ldr	r3, [pc, #196]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9ba:	4a30      	ldr	r2, [pc, #192]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e9c2:	4b2e      	ldr	r3, [pc, #184]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9c6:	4a2d      	ldr	r2, [pc, #180]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e9ce:	4a2b      	ldr	r2, [pc, #172]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e9d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e9d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e9de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9e2:	d118      	bne.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9e4:	f7f4 fd5e 	bl	80034a4 <HAL_GetTick>
 800e9e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e9ec:	e00d      	b.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e9ee:	f7f4 fd59 	bl	80034a4 <HAL_GetTick>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e9f8:	1ad2      	subs	r2, r2, r3
 800e9fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d903      	bls.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800ea02:	2303      	movs	r3, #3
 800ea04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800ea08:	e005      	b.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea0e:	f003 0302 	and.w	r3, r3, #2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d0eb      	beq.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800ea16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d129      	bne.n	800ea72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea2e:	d10e      	bne.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ea30:	4b12      	ldr	r3, [pc, #72]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ea38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea40:	091a      	lsrs	r2, r3, #4
 800ea42:	4b10      	ldr	r3, [pc, #64]	@ (800ea84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ea44:	4013      	ands	r3, r2
 800ea46:	4a0d      	ldr	r2, [pc, #52]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	6113      	str	r3, [r2, #16]
 800ea4c:	e005      	b.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	4a0a      	ldr	r2, [pc, #40]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ea58:	6113      	str	r3, [r2, #16]
 800ea5a:	4b08      	ldr	r3, [pc, #32]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ea5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ea66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea6a:	4a04      	ldr	r2, [pc, #16]	@ (800ea7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ea6c:	430b      	orrs	r3, r1
 800ea6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ea70:	e00e      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ea72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ea7a:	e009      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ea7c:	58024400 	.word	0x58024400
 800ea80:	58024800 	.word	0x58024800
 800ea84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ea90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f002 0301 	and.w	r3, r2, #1
 800ea9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eaa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4313      	orrs	r3, r2
 800eaae:	f000 8089 	beq.w	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800eab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eab8:	2b28      	cmp	r3, #40	@ 0x28
 800eaba:	d86b      	bhi.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800eabc:	a201      	add	r2, pc, #4	@ (adr r2, 800eac4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800eabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac2:	bf00      	nop
 800eac4:	0800eb9d 	.word	0x0800eb9d
 800eac8:	0800eb95 	.word	0x0800eb95
 800eacc:	0800eb95 	.word	0x0800eb95
 800ead0:	0800eb95 	.word	0x0800eb95
 800ead4:	0800eb95 	.word	0x0800eb95
 800ead8:	0800eb95 	.word	0x0800eb95
 800eadc:	0800eb95 	.word	0x0800eb95
 800eae0:	0800eb95 	.word	0x0800eb95
 800eae4:	0800eb69 	.word	0x0800eb69
 800eae8:	0800eb95 	.word	0x0800eb95
 800eaec:	0800eb95 	.word	0x0800eb95
 800eaf0:	0800eb95 	.word	0x0800eb95
 800eaf4:	0800eb95 	.word	0x0800eb95
 800eaf8:	0800eb95 	.word	0x0800eb95
 800eafc:	0800eb95 	.word	0x0800eb95
 800eb00:	0800eb95 	.word	0x0800eb95
 800eb04:	0800eb7f 	.word	0x0800eb7f
 800eb08:	0800eb95 	.word	0x0800eb95
 800eb0c:	0800eb95 	.word	0x0800eb95
 800eb10:	0800eb95 	.word	0x0800eb95
 800eb14:	0800eb95 	.word	0x0800eb95
 800eb18:	0800eb95 	.word	0x0800eb95
 800eb1c:	0800eb95 	.word	0x0800eb95
 800eb20:	0800eb95 	.word	0x0800eb95
 800eb24:	0800eb9d 	.word	0x0800eb9d
 800eb28:	0800eb95 	.word	0x0800eb95
 800eb2c:	0800eb95 	.word	0x0800eb95
 800eb30:	0800eb95 	.word	0x0800eb95
 800eb34:	0800eb95 	.word	0x0800eb95
 800eb38:	0800eb95 	.word	0x0800eb95
 800eb3c:	0800eb95 	.word	0x0800eb95
 800eb40:	0800eb95 	.word	0x0800eb95
 800eb44:	0800eb9d 	.word	0x0800eb9d
 800eb48:	0800eb95 	.word	0x0800eb95
 800eb4c:	0800eb95 	.word	0x0800eb95
 800eb50:	0800eb95 	.word	0x0800eb95
 800eb54:	0800eb95 	.word	0x0800eb95
 800eb58:	0800eb95 	.word	0x0800eb95
 800eb5c:	0800eb95 	.word	0x0800eb95
 800eb60:	0800eb95 	.word	0x0800eb95
 800eb64:	0800eb9d 	.word	0x0800eb9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb6c:	3308      	adds	r3, #8
 800eb6e:	2101      	movs	r1, #1
 800eb70:	4618      	mov	r0, r3
 800eb72:	f000 ffc3 	bl	800fafc <RCCEx_PLL2_Config>
 800eb76:	4603      	mov	r3, r0
 800eb78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eb7c:	e00f      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb82:	3328      	adds	r3, #40	@ 0x28
 800eb84:	2101      	movs	r1, #1
 800eb86:	4618      	mov	r0, r3
 800eb88:	f001 f86a 	bl	800fc60 <RCCEx_PLL3_Config>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eb92:	e004      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb9a:	e000      	b.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800eb9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d10a      	bne.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800eba6:	4bbf      	ldr	r3, [pc, #764]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800eba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebaa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ebae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebb4:	4abb      	ldr	r2, [pc, #748]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ebb6:	430b      	orrs	r3, r1
 800ebb8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ebba:	e003      	b.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ebc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	f002 0302 	and.w	r3, r2, #2
 800ebd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ebda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ebde:	460b      	mov	r3, r1
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	d041      	beq.n	800ec68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ebe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ebea:	2b05      	cmp	r3, #5
 800ebec:	d824      	bhi.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ebee:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec41 	.word	0x0800ec41
 800ebf8:	0800ec0d 	.word	0x0800ec0d
 800ebfc:	0800ec23 	.word	0x0800ec23
 800ec00:	0800ec41 	.word	0x0800ec41
 800ec04:	0800ec41 	.word	0x0800ec41
 800ec08:	0800ec41 	.word	0x0800ec41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ec0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec10:	3308      	adds	r3, #8
 800ec12:	2101      	movs	r1, #1
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 ff71 	bl	800fafc <RCCEx_PLL2_Config>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ec20:	e00f      	b.n	800ec42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec26:	3328      	adds	r3, #40	@ 0x28
 800ec28:	2101      	movs	r1, #1
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f001 f818 	bl	800fc60 <RCCEx_PLL3_Config>
 800ec30:	4603      	mov	r3, r0
 800ec32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ec36:	e004      	b.n	800ec42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec3e:	e000      	b.n	800ec42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ec40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10a      	bne.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ec4a:	4b96      	ldr	r3, [pc, #600]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec4e:	f023 0107 	bic.w	r1, r3, #7
 800ec52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec58:	4a92      	ldr	r2, [pc, #584]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ec5a:	430b      	orrs	r3, r1
 800ec5c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ec5e:	e003      	b.n	800ec68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ec68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	f002 0304 	and.w	r3, r2, #4
 800ec74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec78:	2300      	movs	r3, #0
 800ec7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ec82:	460b      	mov	r3, r1
 800ec84:	4313      	orrs	r3, r2
 800ec86:	d044      	beq.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ec88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec90:	2b05      	cmp	r3, #5
 800ec92:	d825      	bhi.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ec94:	a201      	add	r2, pc, #4	@ (adr r2, 800ec9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ec96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec9a:	bf00      	nop
 800ec9c:	0800ece9 	.word	0x0800ece9
 800eca0:	0800ecb5 	.word	0x0800ecb5
 800eca4:	0800eccb 	.word	0x0800eccb
 800eca8:	0800ece9 	.word	0x0800ece9
 800ecac:	0800ece9 	.word	0x0800ece9
 800ecb0:	0800ece9 	.word	0x0800ece9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ecb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecb8:	3308      	adds	r3, #8
 800ecba:	2101      	movs	r1, #1
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f000 ff1d 	bl	800fafc <RCCEx_PLL2_Config>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ecc8:	e00f      	b.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ecca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecce:	3328      	adds	r3, #40	@ 0x28
 800ecd0:	2101      	movs	r1, #1
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f000 ffc4 	bl	800fc60 <RCCEx_PLL3_Config>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ecde:	e004      	b.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ece6:	e000      	b.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800ece8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10b      	bne.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ecf2:	4b6c      	ldr	r3, [pc, #432]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ecf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecf6:	f023 0107 	bic.w	r1, r3, #7
 800ecfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ed02:	4a68      	ldr	r2, [pc, #416]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ed04:	430b      	orrs	r3, r1
 800ed06:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed08:	e003      	b.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ed12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1a:	f002 0320 	and.w	r3, r2, #32
 800ed1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ed22:	2300      	movs	r3, #0
 800ed24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ed28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	d055      	beq.n	800edde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed3e:	d033      	beq.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800ed40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed44:	d82c      	bhi.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed4a:	d02f      	beq.n	800edac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ed4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed50:	d826      	bhi.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed56:	d02b      	beq.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800ed58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed5c:	d820      	bhi.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed62:	d012      	beq.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ed64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed68:	d81a      	bhi.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d022      	beq.n	800edb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800ed6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed72:	d115      	bne.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed78:	3308      	adds	r3, #8
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 febd 	bl	800fafc <RCCEx_PLL2_Config>
 800ed82:	4603      	mov	r3, r0
 800ed84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ed88:	e015      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed8e:	3328      	adds	r3, #40	@ 0x28
 800ed90:	2102      	movs	r1, #2
 800ed92:	4618      	mov	r0, r3
 800ed94:	f000 ff64 	bl	800fc60 <RCCEx_PLL3_Config>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ed9e:	e00a      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eda6:	e006      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800eda8:	bf00      	nop
 800edaa:	e004      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800edac:	bf00      	nop
 800edae:	e002      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800edb0:	bf00      	nop
 800edb2:	e000      	b.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800edb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d10b      	bne.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800edbe:	4b39      	ldr	r3, [pc, #228]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800edc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800edc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edce:	4a35      	ldr	r2, [pc, #212]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800edd0:	430b      	orrs	r3, r1
 800edd2:	6553      	str	r3, [r2, #84]	@ 0x54
 800edd4:	e003      	b.n	800edde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800edde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800edea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800edee:	2300      	movs	r3, #0
 800edf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800edf4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4313      	orrs	r3, r2
 800edfc:	d058      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800edfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ee0a:	d033      	beq.n	800ee74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ee0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ee10:	d82c      	bhi.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee16:	d02f      	beq.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800ee18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee1c:	d826      	bhi.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee22:	d02b      	beq.n	800ee7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800ee24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee28:	d820      	bhi.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee2e:	d012      	beq.n	800ee56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800ee30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee34:	d81a      	bhi.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d022      	beq.n	800ee80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ee3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee3e:	d115      	bne.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee44:	3308      	adds	r3, #8
 800ee46:	2100      	movs	r1, #0
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f000 fe57 	bl	800fafc <RCCEx_PLL2_Config>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ee54:	e015      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee5a:	3328      	adds	r3, #40	@ 0x28
 800ee5c:	2102      	movs	r1, #2
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f000 fefe 	bl	800fc60 <RCCEx_PLL3_Config>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ee6a:	e00a      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ee72:	e006      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee74:	bf00      	nop
 800ee76:	e004      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee78:	bf00      	nop
 800ee7a:	e002      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee7c:	bf00      	nop
 800ee7e:	e000      	b.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ee80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10e      	bne.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ee8a:	4b06      	ldr	r3, [pc, #24]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ee92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee9a:	4a02      	ldr	r2, [pc, #8]	@ (800eea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800eea0:	e006      	b.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800eea2:	bf00      	nop
 800eea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eeac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eeb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800eebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eec0:	2300      	movs	r3, #0
 800eec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eec6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800eeca:	460b      	mov	r3, r1
 800eecc:	4313      	orrs	r3, r2
 800eece:	d055      	beq.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800eed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eed4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eed8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800eedc:	d033      	beq.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800eede:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800eee2:	d82c      	bhi.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eee8:	d02f      	beq.n	800ef4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800eeea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eeee:	d826      	bhi.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eef0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800eef4:	d02b      	beq.n	800ef4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800eef6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800eefa:	d820      	bhi.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800eefc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef00:	d012      	beq.n	800ef28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ef02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ef06:	d81a      	bhi.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d022      	beq.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ef0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ef10:	d115      	bne.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef16:	3308      	adds	r3, #8
 800ef18:	2100      	movs	r1, #0
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fdee 	bl	800fafc <RCCEx_PLL2_Config>
 800ef20:	4603      	mov	r3, r0
 800ef22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ef26:	e015      	b.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef2c:	3328      	adds	r3, #40	@ 0x28
 800ef2e:	2102      	movs	r1, #2
 800ef30:	4618      	mov	r0, r3
 800ef32:	f000 fe95 	bl	800fc60 <RCCEx_PLL3_Config>
 800ef36:	4603      	mov	r3, r0
 800ef38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ef3c:	e00a      	b.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef44:	e006      	b.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef46:	bf00      	nop
 800ef48:	e004      	b.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef4a:	bf00      	nop
 800ef4c:	e002      	b.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef4e:	bf00      	nop
 800ef50:	e000      	b.n	800ef54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ef52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10b      	bne.n	800ef74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ef5c:	4ba1      	ldr	r3, [pc, #644]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ef64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef6c:	4a9d      	ldr	r2, [pc, #628]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ef6e:	430b      	orrs	r3, r1
 800ef70:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef72:	e003      	b.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ef7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	f002 0308 	and.w	r3, r2, #8
 800ef88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ef96:	460b      	mov	r3, r1
 800ef98:	4313      	orrs	r3, r2
 800ef9a:	d01e      	beq.n	800efda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ef9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800efa8:	d10c      	bne.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800efaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efae:	3328      	adds	r3, #40	@ 0x28
 800efb0:	2102      	movs	r1, #2
 800efb2:	4618      	mov	r0, r3
 800efb4:	f000 fe54 	bl	800fc60 <RCCEx_PLL3_Config>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d002      	beq.n	800efc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800efc4:	4b87      	ldr	r3, [pc, #540]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efc8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800efcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efd4:	4a83      	ldr	r2, [pc, #524]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800efd6:	430b      	orrs	r3, r1
 800efd8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800efda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe2:	f002 0310 	and.w	r3, r2, #16
 800efe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800efea:	2300      	movs	r3, #0
 800efec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eff0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800eff4:	460b      	mov	r3, r1
 800eff6:	4313      	orrs	r3, r2
 800eff8:	d01e      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800effa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800effe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f006:	d10c      	bne.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f00c:	3328      	adds	r3, #40	@ 0x28
 800f00e:	2102      	movs	r1, #2
 800f010:	4618      	mov	r0, r3
 800f012:	f000 fe25 	bl	800fc60 <RCCEx_PLL3_Config>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f022:	4b70      	ldr	r3, [pc, #448]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f026:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f02e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f032:	4a6c      	ldr	r2, [pc, #432]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f034:	430b      	orrs	r3, r1
 800f036:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f048:	2300      	movs	r3, #0
 800f04a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f04e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f052:	460b      	mov	r3, r1
 800f054:	4313      	orrs	r3, r2
 800f056:	d03e      	beq.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f05c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f064:	d022      	beq.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f06a:	d81b      	bhi.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f074:	d00b      	beq.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f076:	e015      	b.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f07c:	3308      	adds	r3, #8
 800f07e:	2100      	movs	r1, #0
 800f080:	4618      	mov	r0, r3
 800f082:	f000 fd3b 	bl	800fafc <RCCEx_PLL2_Config>
 800f086:	4603      	mov	r3, r0
 800f088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f08c:	e00f      	b.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f092:	3328      	adds	r3, #40	@ 0x28
 800f094:	2102      	movs	r1, #2
 800f096:	4618      	mov	r0, r3
 800f098:	f000 fde2 	bl	800fc60 <RCCEx_PLL3_Config>
 800f09c:	4603      	mov	r3, r0
 800f09e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f0a2:	e004      	b.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f0aa:	e000      	b.n	800f0ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d10b      	bne.n	800f0ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f0b6:	4b4b      	ldr	r3, [pc, #300]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f0c6:	4a47      	ldr	r2, [pc, #284]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f0c8:	430b      	orrs	r3, r1
 800f0ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800f0cc:	e003      	b.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f0e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	d03b      	beq.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f0fe:	d01f      	beq.n	800f140 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f100:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f104:	d818      	bhi.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f10a:	d003      	beq.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f10c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f110:	d007      	beq.n	800f122 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f112:	e011      	b.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f114:	4b33      	ldr	r3, [pc, #204]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f118:	4a32      	ldr	r2, [pc, #200]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f11a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f11e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f120:	e00f      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f126:	3328      	adds	r3, #40	@ 0x28
 800f128:	2101      	movs	r1, #1
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 fd98 	bl	800fc60 <RCCEx_PLL3_Config>
 800f130:	4603      	mov	r3, r0
 800f132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f136:	e004      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f138:	2301      	movs	r3, #1
 800f13a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f13e:	e000      	b.n	800f142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10b      	bne.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f14a:	4b26      	ldr	r3, [pc, #152]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f14e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f15a:	4a22      	ldr	r2, [pc, #136]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f15c:	430b      	orrs	r3, r1
 800f15e:	6553      	str	r3, [r2, #84]	@ 0x54
 800f160:	e003      	b.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f172:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f176:	673b      	str	r3, [r7, #112]	@ 0x70
 800f178:	2300      	movs	r3, #0
 800f17a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f17c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f180:	460b      	mov	r3, r1
 800f182:	4313      	orrs	r3, r2
 800f184:	d034      	beq.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f18a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f194:	d007      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f196:	e011      	b.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f198:	4b12      	ldr	r3, [pc, #72]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f19c:	4a11      	ldr	r2, [pc, #68]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f19e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f1a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f1a4:	e00e      	b.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	2102      	movs	r1, #2
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 fca4 	bl	800fafc <RCCEx_PLL2_Config>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f1ba:	e003      	b.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10d      	bne.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f1cc:	4b05      	ldr	r3, [pc, #20]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1da:	4a02      	ldr	r2, [pc, #8]	@ (800f1e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f1dc:	430b      	orrs	r3, r1
 800f1de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f1e0:	e006      	b.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f1e2:	bf00      	nop
 800f1e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f1fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f1fe:	2300      	movs	r3, #0
 800f200:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f202:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f206:	460b      	mov	r3, r1
 800f208:	4313      	orrs	r3, r2
 800f20a:	d00c      	beq.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f210:	3328      	adds	r3, #40	@ 0x28
 800f212:	2102      	movs	r1, #2
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fd23 	bl	800fc60 <RCCEx_PLL3_Config>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d002      	beq.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f220:	2301      	movs	r3, #1
 800f222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f232:	663b      	str	r3, [r7, #96]	@ 0x60
 800f234:	2300      	movs	r3, #0
 800f236:	667b      	str	r3, [r7, #100]	@ 0x64
 800f238:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f23c:	460b      	mov	r3, r1
 800f23e:	4313      	orrs	r3, r2
 800f240:	d038      	beq.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f24a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f24e:	d018      	beq.n	800f282 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f254:	d811      	bhi.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f25a:	d014      	beq.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f260:	d80b      	bhi.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d011      	beq.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f26a:	d106      	bne.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f26c:	4bc3      	ldr	r3, [pc, #780]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f270:	4ac2      	ldr	r2, [pc, #776]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f278:	e008      	b.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f280:	e004      	b.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f282:	bf00      	nop
 800f284:	e002      	b.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f286:	bf00      	nop
 800f288:	e000      	b.n	800f28c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800f28a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f28c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10b      	bne.n	800f2ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f294:	4bb9      	ldr	r3, [pc, #740]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f298:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2a4:	4ab5      	ldr	r2, [pc, #724]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2a6:	430b      	orrs	r3, r1
 800f2a8:	6553      	str	r3, [r2, #84]	@ 0x54
 800f2aa:	e003      	b.n	800f2b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f2b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f2c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f2c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	d009      	beq.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f2d0:	4baa      	ldr	r3, [pc, #680]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2de:	4aa7      	ldr	r2, [pc, #668]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f2e0:	430b      	orrs	r3, r1
 800f2e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800f2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800f2f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f2f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	d00a      	beq.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800f300:	4b9e      	ldr	r3, [pc, #632]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800f308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f30c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f310:	4a9a      	ldr	r2, [pc, #616]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f312:	430b      	orrs	r3, r1
 800f314:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f31e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f322:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f324:	2300      	movs	r3, #0
 800f326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f328:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f32c:	460b      	mov	r3, r1
 800f32e:	4313      	orrs	r3, r2
 800f330:	d009      	beq.n	800f346 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f332:	4b92      	ldr	r3, [pc, #584]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f336:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f340:	4a8e      	ldr	r2, [pc, #568]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f342:	430b      	orrs	r3, r1
 800f344:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f352:	643b      	str	r3, [r7, #64]	@ 0x40
 800f354:	2300      	movs	r3, #0
 800f356:	647b      	str	r3, [r7, #68]	@ 0x44
 800f358:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f35c:	460b      	mov	r3, r1
 800f35e:	4313      	orrs	r3, r2
 800f360:	d00e      	beq.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f362:	4b86      	ldr	r3, [pc, #536]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f364:	691b      	ldr	r3, [r3, #16]
 800f366:	4a85      	ldr	r2, [pc, #532]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f368:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f36c:	6113      	str	r3, [r2, #16]
 800f36e:	4b83      	ldr	r3, [pc, #524]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f370:	6919      	ldr	r1, [r3, #16]
 800f372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f376:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f37a:	4a80      	ldr	r2, [pc, #512]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f37c:	430b      	orrs	r3, r1
 800f37e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f38c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f38e:	2300      	movs	r3, #0
 800f390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f392:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f396:	460b      	mov	r3, r1
 800f398:	4313      	orrs	r3, r2
 800f39a:	d009      	beq.n	800f3b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f39c:	4b77      	ldr	r3, [pc, #476]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f39e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f3a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3aa:	4a74      	ldr	r2, [pc, #464]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3ac:	430b      	orrs	r3, r1
 800f3ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f3bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f3be:	2300      	movs	r3, #0
 800f3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	d00a      	beq.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f3cc:	4b6b      	ldr	r3, [pc, #428]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f3dc:	4a67      	ldr	r2, [pc, #412]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	d011      	beq.n	800f422 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f402:	3308      	adds	r3, #8
 800f404:	2100      	movs	r1, #0
 800f406:	4618      	mov	r0, r3
 800f408:	f000 fb78 	bl	800fafc <RCCEx_PLL2_Config>
 800f40c:	4603      	mov	r3, r0
 800f40e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f41e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42a:	2100      	movs	r1, #0
 800f42c:	6239      	str	r1, [r7, #32]
 800f42e:	f003 0302 	and.w	r3, r3, #2
 800f432:	627b      	str	r3, [r7, #36]	@ 0x24
 800f434:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f438:	460b      	mov	r3, r1
 800f43a:	4313      	orrs	r3, r2
 800f43c:	d011      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f442:	3308      	adds	r3, #8
 800f444:	2101      	movs	r1, #1
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fb58 	bl	800fafc <RCCEx_PLL2_Config>
 800f44c:	4603      	mov	r3, r0
 800f44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f456:	2b00      	cmp	r3, #0
 800f458:	d003      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f45a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f45e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46a:	2100      	movs	r1, #0
 800f46c:	61b9      	str	r1, [r7, #24]
 800f46e:	f003 0304 	and.w	r3, r3, #4
 800f472:	61fb      	str	r3, [r7, #28]
 800f474:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f478:	460b      	mov	r3, r1
 800f47a:	4313      	orrs	r3, r2
 800f47c:	d011      	beq.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f482:	3308      	adds	r3, #8
 800f484:	2102      	movs	r1, #2
 800f486:	4618      	mov	r0, r3
 800f488:	f000 fb38 	bl	800fafc <RCCEx_PLL2_Config>
 800f48c:	4603      	mov	r3, r0
 800f48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f49e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	6139      	str	r1, [r7, #16]
 800f4ae:	f003 0308 	and.w	r3, r3, #8
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	d011      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4c2:	3328      	adds	r3, #40	@ 0x28
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 fbca 	bl	800fc60 <RCCEx_PLL3_Config>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800f4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d003      	beq.n	800f4e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	f003 0310 	and.w	r3, r3, #16
 800f4f2:	60fb      	str	r3, [r7, #12]
 800f4f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	d011      	beq.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f502:	3328      	adds	r3, #40	@ 0x28
 800f504:	2101      	movs	r1, #1
 800f506:	4618      	mov	r0, r3
 800f508:	f000 fbaa 	bl	800fc60 <RCCEx_PLL3_Config>
 800f50c:	4603      	mov	r3, r0
 800f50e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f516:	2b00      	cmp	r3, #0
 800f518:	d003      	beq.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52a:	2100      	movs	r1, #0
 800f52c:	6039      	str	r1, [r7, #0]
 800f52e:	f003 0320 	and.w	r3, r3, #32
 800f532:	607b      	str	r3, [r7, #4]
 800f534:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f538:	460b      	mov	r3, r1
 800f53a:	4313      	orrs	r3, r2
 800f53c:	d011      	beq.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f542:	3328      	adds	r3, #40	@ 0x28
 800f544:	2102      	movs	r1, #2
 800f546:	4618      	mov	r0, r3
 800f548:	f000 fb8a 	bl	800fc60 <RCCEx_PLL3_Config>
 800f54c:	4603      	mov	r3, r0
 800f54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800f552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f556:	2b00      	cmp	r3, #0
 800f558:	d003      	beq.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f55e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800f562:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800f566:	2b00      	cmp	r3, #0
 800f568:	d101      	bne.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e000      	b.n	800f570 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800f56e:	2301      	movs	r3, #1
}
 800f570:	4618      	mov	r0, r3
 800f572:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800f576:	46bd      	mov	sp, r7
 800f578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f57c:	58024400 	.word	0x58024400

0800f580 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f584:	f7fe fd96 	bl	800e0b4 <HAL_RCC_GetHCLKFreq>
 800f588:	4602      	mov	r2, r0
 800f58a:	4b06      	ldr	r3, [pc, #24]	@ (800f5a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	091b      	lsrs	r3, r3, #4
 800f590:	f003 0307 	and.w	r3, r3, #7
 800f594:	4904      	ldr	r1, [pc, #16]	@ (800f5a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f596:	5ccb      	ldrb	r3, [r1, r3]
 800f598:	f003 031f 	and.w	r3, r3, #31
 800f59c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	58024400 	.word	0x58024400
 800f5a8:	0801b400 	.word	0x0801b400

0800f5ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b089      	sub	sp, #36	@ 0x24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5b4:	4ba1      	ldr	r3, [pc, #644]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5b8:	f003 0303 	and.w	r3, r3, #3
 800f5bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f5be:	4b9f      	ldr	r3, [pc, #636]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c2:	0b1b      	lsrs	r3, r3, #12
 800f5c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f5ca:	4b9c      	ldr	r3, [pc, #624]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ce:	091b      	lsrs	r3, r3, #4
 800f5d0:	f003 0301 	and.w	r3, r3, #1
 800f5d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f5d6:	4b99      	ldr	r3, [pc, #612]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5da:	08db      	lsrs	r3, r3, #3
 800f5dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5e0:	693a      	ldr	r2, [r7, #16]
 800f5e2:	fb02 f303 	mul.w	r3, r2, r3
 800f5e6:	ee07 3a90 	vmov	s15, r3
 800f5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 8111 	beq.w	800f81c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	2b02      	cmp	r3, #2
 800f5fe:	f000 8083 	beq.w	800f708 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	2b02      	cmp	r3, #2
 800f606:	f200 80a1 	bhi.w	800f74c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d003      	beq.n	800f618 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f610:	69bb      	ldr	r3, [r7, #24]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d056      	beq.n	800f6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f616:	e099      	b.n	800f74c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f618:	4b88      	ldr	r3, [pc, #544]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f003 0320 	and.w	r3, r3, #32
 800f620:	2b00      	cmp	r3, #0
 800f622:	d02d      	beq.n	800f680 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f624:	4b85      	ldr	r3, [pc, #532]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	08db      	lsrs	r3, r3, #3
 800f62a:	f003 0303 	and.w	r3, r3, #3
 800f62e:	4a84      	ldr	r2, [pc, #528]	@ (800f840 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f630:	fa22 f303 	lsr.w	r3, r2, r3
 800f634:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	ee07 3a90 	vmov	s15, r3
 800f63c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	ee07 3a90 	vmov	s15, r3
 800f646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f64e:	4b7b      	ldr	r3, [pc, #492]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f656:	ee07 3a90 	vmov	s15, r3
 800f65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f662:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f66e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f67a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f67e:	e087      	b.n	800f790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	ee07 3a90 	vmov	s15, r3
 800f686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f68a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f848 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f692:	4b6a      	ldr	r3, [pc, #424]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f69a:	ee07 3a90 	vmov	s15, r3
 800f69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6c2:	e065      	b.n	800f790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	ee07 3a90 	vmov	s15, r3
 800f6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6d6:	4b59      	ldr	r3, [pc, #356]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6de:	ee07 3a90 	vmov	s15, r3
 800f6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f706:	e043      	b.n	800f790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	ee07 3a90 	vmov	s15, r3
 800f70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f712:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f71a:	4b48      	ldr	r3, [pc, #288]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f71e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f722:	ee07 3a90 	vmov	s15, r3
 800f726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f72a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f72e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f73a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f742:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f74a:	e021      	b.n	800f790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	ee07 3a90 	vmov	s15, r3
 800f752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f756:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f84c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f75a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f75e:	4b37      	ldr	r3, [pc, #220]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f766:	ee07 3a90 	vmov	s15, r3
 800f76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f76e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f772:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f77a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f77e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f78a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f78e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f790:	4b2a      	ldr	r3, [pc, #168]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f794:	0a5b      	lsrs	r3, r3, #9
 800f796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f79a:	ee07 3a90 	vmov	s15, r3
 800f79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7b6:	ee17 2a90 	vmov	r2, s15
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f7be:	4b1f      	ldr	r3, [pc, #124]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c2:	0c1b      	lsrs	r3, r3, #16
 800f7c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7c8:	ee07 3a90 	vmov	s15, r3
 800f7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7e4:	ee17 2a90 	vmov	r2, s15
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f7ec:	4b13      	ldr	r3, [pc, #76]	@ (800f83c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f0:	0e1b      	lsrs	r3, r3, #24
 800f7f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7f6:	ee07 3a90 	vmov	s15, r3
 800f7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f802:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f806:	edd7 6a07 	vldr	s13, [r7, #28]
 800f80a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f80e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f812:	ee17 2a90 	vmov	r2, s15
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f81a:	e008      	b.n	800f82e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	609a      	str	r2, [r3, #8]
}
 800f82e:	bf00      	nop
 800f830:	3724      	adds	r7, #36	@ 0x24
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	58024400 	.word	0x58024400
 800f840:	03d09000 	.word	0x03d09000
 800f844:	46000000 	.word	0x46000000
 800f848:	4c742400 	.word	0x4c742400
 800f84c:	4a742400 	.word	0x4a742400
 800f850:	4bbebc20 	.word	0x4bbebc20

0800f854 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f854:	b480      	push	{r7}
 800f856:	b089      	sub	sp, #36	@ 0x24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f85c:	4ba1      	ldr	r3, [pc, #644]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f860:	f003 0303 	and.w	r3, r3, #3
 800f864:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f866:	4b9f      	ldr	r3, [pc, #636]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f86a:	0d1b      	lsrs	r3, r3, #20
 800f86c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f870:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f872:	4b9c      	ldr	r3, [pc, #624]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f876:	0a1b      	lsrs	r3, r3, #8
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f87e:	4b99      	ldr	r3, [pc, #612]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f882:	08db      	lsrs	r3, r3, #3
 800f884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f888:	693a      	ldr	r2, [r7, #16]
 800f88a:	fb02 f303 	mul.w	r3, r2, r3
 800f88e:	ee07 3a90 	vmov	s15, r3
 800f892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f896:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f000 8111 	beq.w	800fac4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	2b02      	cmp	r3, #2
 800f8a6:	f000 8083 	beq.w	800f9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	f200 80a1 	bhi.w	800f9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d003      	beq.n	800f8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d056      	beq.n	800f96c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f8be:	e099      	b.n	800f9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8c0:	4b88      	ldr	r3, [pc, #544]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f003 0320 	and.w	r3, r3, #32
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d02d      	beq.n	800f928 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8cc:	4b85      	ldr	r3, [pc, #532]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	08db      	lsrs	r3, r3, #3
 800f8d2:	f003 0303 	and.w	r3, r3, #3
 800f8d6:	4a84      	ldr	r2, [pc, #528]	@ (800fae8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f8d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f8dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	ee07 3a90 	vmov	s15, r3
 800f8e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	ee07 3a90 	vmov	s15, r3
 800f8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8f6:	4b7b      	ldr	r3, [pc, #492]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8fe:	ee07 3a90 	vmov	s15, r3
 800f902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f906:	ed97 6a03 	vldr	s12, [r7, #12]
 800f90a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800faec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f922:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f926:	e087      	b.n	800fa38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	ee07 3a90 	vmov	s15, r3
 800f92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f932:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800faf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f93a:	4b6a      	ldr	r3, [pc, #424]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f942:	ee07 3a90 	vmov	s15, r3
 800f946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f94e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800faec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f95a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f96a:	e065      	b.n	800fa38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	ee07 3a90 	vmov	s15, r3
 800f972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f976:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800faf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f97e:	4b59      	ldr	r3, [pc, #356]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f986:	ee07 3a90 	vmov	s15, r3
 800f98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f992:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800faec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f99e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9ae:	e043      	b.n	800fa38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	ee07 3a90 	vmov	s15, r3
 800f9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800faf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9c2:	4b48      	ldr	r3, [pc, #288]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ca:	ee07 3a90 	vmov	s15, r3
 800f9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800faec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9f2:	e021      	b.n	800fa38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	ee07 3a90 	vmov	s15, r3
 800f9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800faf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa06:	4b37      	ldr	r3, [pc, #220]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa0e:	ee07 3a90 	vmov	s15, r3
 800fa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa16:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800faec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fa38:	4b2a      	ldr	r3, [pc, #168]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa3c:	0a5b      	lsrs	r3, r3, #9
 800fa3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa42:	ee07 3a90 	vmov	s15, r3
 800fa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa52:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa5e:	ee17 2a90 	vmov	r2, s15
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fa66:	4b1f      	ldr	r3, [pc, #124]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa6a:	0c1b      	lsrs	r3, r3, #16
 800fa6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa70:	ee07 3a90 	vmov	s15, r3
 800fa74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fa7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa80:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa8c:	ee17 2a90 	vmov	r2, s15
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fa94:	4b13      	ldr	r3, [pc, #76]	@ (800fae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa98:	0e1b      	lsrs	r3, r3, #24
 800fa9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa9e:	ee07 3a90 	vmov	s15, r3
 800faa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800faaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800faae:	edd7 6a07 	vldr	s13, [r7, #28]
 800fab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800faba:	ee17 2a90 	vmov	r2, s15
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fac2:	e008      	b.n	800fad6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	609a      	str	r2, [r3, #8]
}
 800fad6:	bf00      	nop
 800fad8:	3724      	adds	r7, #36	@ 0x24
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	58024400 	.word	0x58024400
 800fae8:	03d09000 	.word	0x03d09000
 800faec:	46000000 	.word	0x46000000
 800faf0:	4c742400 	.word	0x4c742400
 800faf4:	4a742400 	.word	0x4a742400
 800faf8:	4bbebc20 	.word	0x4bbebc20

0800fafc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fb0a:	4b53      	ldr	r3, [pc, #332]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb0e:	f003 0303 	and.w	r3, r3, #3
 800fb12:	2b03      	cmp	r3, #3
 800fb14:	d101      	bne.n	800fb1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fb16:	2301      	movs	r3, #1
 800fb18:	e099      	b.n	800fc4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fb1a:	4b4f      	ldr	r3, [pc, #316]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4a4e      	ldr	r2, [pc, #312]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fb24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb26:	f7f3 fcbd 	bl	80034a4 <HAL_GetTick>
 800fb2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb2c:	e008      	b.n	800fb40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fb2e:	f7f3 fcb9 	bl	80034a4 <HAL_GetTick>
 800fb32:	4602      	mov	r2, r0
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d901      	bls.n	800fb40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	e086      	b.n	800fc4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb40:	4b45      	ldr	r3, [pc, #276]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1f0      	bne.n	800fb2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fb4c:	4b42      	ldr	r3, [pc, #264]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	031b      	lsls	r3, r3, #12
 800fb5a:	493f      	ldr	r1, [pc, #252]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	628b      	str	r3, [r1, #40]	@ 0x28
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	025b      	lsls	r3, r3, #9
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	431a      	orrs	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	041b      	lsls	r3, r3, #16
 800fb7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fb82:	431a      	orrs	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	061b      	lsls	r3, r3, #24
 800fb8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fb90:	4931      	ldr	r1, [pc, #196]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb92:	4313      	orrs	r3, r2
 800fb94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fb96:	4b30      	ldr	r3, [pc, #192]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	492d      	ldr	r1, [pc, #180]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fba4:	4313      	orrs	r3, r2
 800fba6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fba8:	4b2b      	ldr	r3, [pc, #172]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbac:	f023 0220 	bic.w	r2, r3, #32
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	699b      	ldr	r3, [r3, #24]
 800fbb4:	4928      	ldr	r1, [pc, #160]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fbba:	4b27      	ldr	r3, [pc, #156]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbe:	4a26      	ldr	r2, [pc, #152]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbc0:	f023 0310 	bic.w	r3, r3, #16
 800fbc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fbc6:	4b24      	ldr	r3, [pc, #144]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fbca:	4b24      	ldr	r3, [pc, #144]	@ (800fc5c <RCCEx_PLL2_Config+0x160>)
 800fbcc:	4013      	ands	r3, r2
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	69d2      	ldr	r2, [r2, #28]
 800fbd2:	00d2      	lsls	r2, r2, #3
 800fbd4:	4920      	ldr	r1, [pc, #128]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fbda:	4b1f      	ldr	r3, [pc, #124]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbde:	4a1e      	ldr	r2, [pc, #120]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbe0:	f043 0310 	orr.w	r3, r3, #16
 800fbe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d106      	bne.n	800fbfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fbec:	4b1a      	ldr	r3, [pc, #104]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf0:	4a19      	ldr	r2, [pc, #100]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fbf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fbf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fbf8:	e00f      	b.n	800fc1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d106      	bne.n	800fc0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fc00:	4b15      	ldr	r3, [pc, #84]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc04:	4a14      	ldr	r2, [pc, #80]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fc0c:	e005      	b.n	800fc1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fc0e:	4b12      	ldr	r3, [pc, #72]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc12:	4a11      	ldr	r2, [pc, #68]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fc18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fc1a:	4b0f      	ldr	r3, [pc, #60]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a0e      	ldr	r2, [pc, #56]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc26:	f7f3 fc3d 	bl	80034a4 <HAL_GetTick>
 800fc2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc2c:	e008      	b.n	800fc40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fc2e:	f7f3 fc39 	bl	80034a4 <HAL_GetTick>
 800fc32:	4602      	mov	r2, r0
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	2b02      	cmp	r3, #2
 800fc3a:	d901      	bls.n	800fc40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	e006      	b.n	800fc4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc40:	4b05      	ldr	r3, [pc, #20]	@ (800fc58 <RCCEx_PLL2_Config+0x15c>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d0f0      	beq.n	800fc2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fc4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3710      	adds	r7, #16
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	58024400 	.word	0x58024400
 800fc5c:	ffff0007 	.word	0xffff0007

0800fc60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc6e:	4b53      	ldr	r3, [pc, #332]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fc70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc72:	f003 0303 	and.w	r3, r3, #3
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d101      	bne.n	800fc7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e099      	b.n	800fdb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fc7e:	4b4f      	ldr	r3, [pc, #316]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a4e      	ldr	r2, [pc, #312]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fc84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fc88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc8a:	f7f3 fc0b 	bl	80034a4 <HAL_GetTick>
 800fc8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc90:	e008      	b.n	800fca4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fc92:	f7f3 fc07 	bl	80034a4 <HAL_GetTick>
 800fc96:	4602      	mov	r2, r0
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	d901      	bls.n	800fca4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fca0:	2303      	movs	r3, #3
 800fca2:	e086      	b.n	800fdb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fca4:	4b45      	ldr	r3, [pc, #276]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1f0      	bne.n	800fc92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fcb0:	4b42      	ldr	r3, [pc, #264]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fcb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	051b      	lsls	r3, r3, #20
 800fcbe:	493f      	ldr	r1, [pc, #252]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	628b      	str	r3, [r1, #40]	@ 0x28
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	025b      	lsls	r3, r3, #9
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	431a      	orrs	r2, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	3b01      	subs	r3, #1
 800fce0:	041b      	lsls	r3, r3, #16
 800fce2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fce6:	431a      	orrs	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	3b01      	subs	r3, #1
 800fcee:	061b      	lsls	r3, r3, #24
 800fcf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fcf4:	4931      	ldr	r1, [pc, #196]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fcfa:	4b30      	ldr	r3, [pc, #192]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	695b      	ldr	r3, [r3, #20]
 800fd06:	492d      	ldr	r1, [pc, #180]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fd0c:	4b2b      	ldr	r3, [pc, #172]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	699b      	ldr	r3, [r3, #24]
 800fd18:	4928      	ldr	r1, [pc, #160]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fd1e:	4b27      	ldr	r3, [pc, #156]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd22:	4a26      	ldr	r2, [pc, #152]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fd28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fd2a:	4b24      	ldr	r3, [pc, #144]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd2e:	4b24      	ldr	r3, [pc, #144]	@ (800fdc0 <RCCEx_PLL3_Config+0x160>)
 800fd30:	4013      	ands	r3, r2
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	69d2      	ldr	r2, [r2, #28]
 800fd36:	00d2      	lsls	r2, r2, #3
 800fd38:	4920      	ldr	r1, [pc, #128]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fd3e:	4b1f      	ldr	r3, [pc, #124]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd42:	4a1e      	ldr	r2, [pc, #120]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d106      	bne.n	800fd5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fd50:	4b1a      	ldr	r3, [pc, #104]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd54:	4a19      	ldr	r2, [pc, #100]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fd5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd5c:	e00f      	b.n	800fd7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d106      	bne.n	800fd72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fd64:	4b15      	ldr	r3, [pc, #84]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd68:	4a14      	ldr	r2, [pc, #80]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fd6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd70:	e005      	b.n	800fd7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fd72:	4b12      	ldr	r3, [pc, #72]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd76:	4a11      	ldr	r2, [pc, #68]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fd7e:	4b0f      	ldr	r3, [pc, #60]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4a0e      	ldr	r2, [pc, #56]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fd84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fd88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd8a:	f7f3 fb8b 	bl	80034a4 <HAL_GetTick>
 800fd8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd90:	e008      	b.n	800fda4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fd92:	f7f3 fb87 	bl	80034a4 <HAL_GetTick>
 800fd96:	4602      	mov	r2, r0
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	1ad3      	subs	r3, r2, r3
 800fd9c:	2b02      	cmp	r3, #2
 800fd9e:	d901      	bls.n	800fda4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fda0:	2303      	movs	r3, #3
 800fda2:	e006      	b.n	800fdb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fda4:	4b05      	ldr	r3, [pc, #20]	@ (800fdbc <RCCEx_PLL3_Config+0x15c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d0f0      	beq.n	800fd92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	58024400 	.word	0x58024400
 800fdc0:	ffff0007 	.word	0xffff0007

0800fdc4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d101      	bne.n	800fdd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e10f      	b.n	800fff6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4a87      	ldr	r2, [pc, #540]	@ (8010000 <HAL_SPI_Init+0x23c>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d00f      	beq.n	800fe06 <HAL_SPI_Init+0x42>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4a86      	ldr	r2, [pc, #536]	@ (8010004 <HAL_SPI_Init+0x240>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d00a      	beq.n	800fe06 <HAL_SPI_Init+0x42>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a84      	ldr	r2, [pc, #528]	@ (8010008 <HAL_SPI_Init+0x244>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d005      	beq.n	800fe06 <HAL_SPI_Init+0x42>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	2b0f      	cmp	r3, #15
 800fe00:	d901      	bls.n	800fe06 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e0f7      	b.n	800fff6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 fe2e 	bl	8010a68 <SPI_GetPacketSize>
 800fe0c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4a7b      	ldr	r2, [pc, #492]	@ (8010000 <HAL_SPI_Init+0x23c>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d00c      	beq.n	800fe32 <HAL_SPI_Init+0x6e>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a79      	ldr	r2, [pc, #484]	@ (8010004 <HAL_SPI_Init+0x240>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d007      	beq.n	800fe32 <HAL_SPI_Init+0x6e>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4a78      	ldr	r2, [pc, #480]	@ (8010008 <HAL_SPI_Init+0x244>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d002      	beq.n	800fe32 <HAL_SPI_Init+0x6e>
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2b08      	cmp	r3, #8
 800fe30:	d811      	bhi.n	800fe56 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fe36:	4a72      	ldr	r2, [pc, #456]	@ (8010000 <HAL_SPI_Init+0x23c>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d009      	beq.n	800fe50 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a70      	ldr	r2, [pc, #448]	@ (8010004 <HAL_SPI_Init+0x240>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d004      	beq.n	800fe50 <HAL_SPI_Init+0x8c>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	4a6f      	ldr	r2, [pc, #444]	@ (8010008 <HAL_SPI_Init+0x244>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d104      	bne.n	800fe5a <HAL_SPI_Init+0x96>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b10      	cmp	r3, #16
 800fe54:	d901      	bls.n	800fe5a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	e0cd      	b.n	800fff6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7f2 fc9e 	bl	80027b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2202      	movs	r2, #2
 800fe78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f022 0201 	bic.w	r2, r2, #1
 800fe8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fe96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fea0:	d119      	bne.n	800fed6 <HAL_SPI_Init+0x112>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800feaa:	d103      	bne.n	800feb4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d008      	beq.n	800fec6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d10c      	bne.n	800fed6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fec4:	d107      	bne.n	800fed6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fed4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00f      	beq.n	800ff02 <HAL_SPI_Init+0x13e>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	2b06      	cmp	r3, #6
 800fee8:	d90b      	bls.n	800ff02 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	430a      	orrs	r2, r1
 800fefe:	601a      	str	r2, [r3, #0]
 800ff00:	e007      	b.n	800ff12 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ff10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	69da      	ldr	r2, [r3, #28]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	431a      	orrs	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff24:	ea42 0103 	orr.w	r1, r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68da      	ldr	r2, [r3, #12]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	430a      	orrs	r2, r1
 800ff32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff3c:	431a      	orrs	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff42:	431a      	orrs	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	431a      	orrs	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	431a      	orrs	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	695b      	ldr	r3, [r3, #20]
 800ff54:	431a      	orrs	r2, r3
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6a1b      	ldr	r3, [r3, #32]
 800ff5a:	431a      	orrs	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	431a      	orrs	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff66:	431a      	orrs	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	689b      	ldr	r3, [r3, #8]
 800ff6c:	431a      	orrs	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ff72:	ea42 0103 	orr.w	r1, r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d113      	bne.n	800ffb2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	689b      	ldr	r3, [r3, #8]
 800ff90:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ff9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ffb0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f022 0201 	bic.w	r2, r2, #1
 800ffc0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00a      	beq.n	800ffe4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	430a      	orrs	r2, r1
 800ffe2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	40013000 	.word	0x40013000
 8010004:	40003800 	.word	0x40003800
 8010008:	40003c00 	.word	0x40003c00

0801000c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b088      	sub	sp, #32
 8010010:	af02      	add	r7, sp, #8
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	603b      	str	r3, [r7, #0]
 8010018:	4613      	mov	r3, r2
 801001a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3320      	adds	r3, #32
 8010022:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010024:	f7f3 fa3e 	bl	80034a4 <HAL_GetTick>
 8010028:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010030:	b2db      	uxtb	r3, r3
 8010032:	2b01      	cmp	r3, #1
 8010034:	d001      	beq.n	801003a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010036:	2302      	movs	r3, #2
 8010038:	e1d1      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d002      	beq.n	8010046 <HAL_SPI_Transmit+0x3a>
 8010040:	88fb      	ldrh	r3, [r7, #6]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d101      	bne.n	801004a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010046:	2301      	movs	r3, #1
 8010048:	e1c9      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010050:	2b01      	cmp	r3, #1
 8010052:	d101      	bne.n	8010058 <HAL_SPI_Transmit+0x4c>
 8010054:	2302      	movs	r3, #2
 8010056:	e1c2      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2201      	movs	r2, #1
 801005c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2203      	movs	r2, #3
 8010064:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	68ba      	ldr	r2, [r7, #8]
 8010074:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	88fa      	ldrh	r2, [r7, #6]
 801007a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	88fa      	ldrh	r2, [r7, #6]
 8010082:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	2200      	movs	r2, #0
 801008a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2200      	movs	r2, #0
 8010090:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2200      	movs	r2, #0
 8010098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2200      	movs	r2, #0
 80100a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2200      	movs	r2, #0
 80100a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	689b      	ldr	r3, [r3, #8]
 80100ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80100b0:	d108      	bne.n	80100c4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	e009      	b.n	80100d8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	68db      	ldr	r3, [r3, #12]
 80100ca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80100d6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685a      	ldr	r2, [r3, #4]
 80100de:	4b96      	ldr	r3, [pc, #600]	@ (8010338 <HAL_SPI_Transmit+0x32c>)
 80100e0:	4013      	ands	r3, r2
 80100e2:	88f9      	ldrh	r1, [r7, #6]
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	6812      	ldr	r2, [r2, #0]
 80100e8:	430b      	orrs	r3, r1
 80100ea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f042 0201 	orr.w	r2, r2, #1
 80100fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010104:	d107      	bne.n	8010116 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	2b0f      	cmp	r3, #15
 801011c:	d947      	bls.n	80101ae <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801011e:	e03f      	b.n	80101a0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	f003 0302 	and.w	r3, r3, #2
 801012a:	2b02      	cmp	r3, #2
 801012c:	d114      	bne.n	8010158 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	6812      	ldr	r2, [r2, #0]
 8010138:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801013e:	1d1a      	adds	r2, r3, #4
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801014a:	b29b      	uxth	r3, r3
 801014c:	3b01      	subs	r3, #1
 801014e:	b29a      	uxth	r2, r3
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010156:	e023      	b.n	80101a0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010158:	f7f3 f9a4 	bl	80034a4 <HAL_GetTick>
 801015c:	4602      	mov	r2, r0
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	d803      	bhi.n	8010170 <HAL_SPI_Transmit+0x164>
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016e:	d102      	bne.n	8010176 <HAL_SPI_Transmit+0x16a>
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d114      	bne.n	80101a0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f000 fba8 	bl	80108cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010182:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2201      	movs	r2, #1
 8010190:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2200      	movs	r2, #0
 8010198:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801019c:	2303      	movs	r3, #3
 801019e:	e11e      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1b9      	bne.n	8010120 <HAL_SPI_Transmit+0x114>
 80101ac:	e0f1      	b.n	8010392 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	2b07      	cmp	r3, #7
 80101b4:	f240 80e6 	bls.w	8010384 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80101b8:	e05d      	b.n	8010276 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	695b      	ldr	r3, [r3, #20]
 80101c0:	f003 0302 	and.w	r3, r3, #2
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d132      	bne.n	801022e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d918      	bls.n	8010206 <HAL_SPI_Transmit+0x1fa>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d014      	beq.n	8010206 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	6812      	ldr	r2, [r2, #0]
 80101e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101ec:	1d1a      	adds	r2, r3, #4
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	3b02      	subs	r3, #2
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010204:	e037      	b.n	8010276 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801020a:	881a      	ldrh	r2, [r3, #0]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010214:	1c9a      	adds	r2, r3, #2
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010220:	b29b      	uxth	r3, r3
 8010222:	3b01      	subs	r3, #1
 8010224:	b29a      	uxth	r2, r3
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801022c:	e023      	b.n	8010276 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801022e:	f7f3 f939 	bl	80034a4 <HAL_GetTick>
 8010232:	4602      	mov	r2, r0
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	429a      	cmp	r2, r3
 801023c:	d803      	bhi.n	8010246 <HAL_SPI_Transmit+0x23a>
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010244:	d102      	bne.n	801024c <HAL_SPI_Transmit+0x240>
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d114      	bne.n	8010276 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f000 fb3d 	bl	80108cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010258:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2201      	movs	r2, #1
 8010266:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2200      	movs	r2, #0
 801026e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010272:	2303      	movs	r3, #3
 8010274:	e0b3      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801027c:	b29b      	uxth	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d19b      	bne.n	80101ba <HAL_SPI_Transmit+0x1ae>
 8010282:	e086      	b.n	8010392 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	695b      	ldr	r3, [r3, #20]
 801028a:	f003 0302 	and.w	r3, r3, #2
 801028e:	2b02      	cmp	r3, #2
 8010290:	d154      	bne.n	801033c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010298:	b29b      	uxth	r3, r3
 801029a:	2b03      	cmp	r3, #3
 801029c:	d918      	bls.n	80102d0 <HAL_SPI_Transmit+0x2c4>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102a2:	2b40      	cmp	r3, #64	@ 0x40
 80102a4:	d914      	bls.n	80102d0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	6812      	ldr	r2, [r2, #0]
 80102b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102b6:	1d1a      	adds	r2, r3, #4
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	3b04      	subs	r3, #4
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80102ce:	e059      	b.n	8010384 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d917      	bls.n	801030c <HAL_SPI_Transmit+0x300>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d013      	beq.n	801030c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102e8:	881a      	ldrh	r2, [r3, #0]
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102f2:	1c9a      	adds	r2, r3, #2
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102fe:	b29b      	uxth	r3, r3
 8010300:	3b02      	subs	r3, #2
 8010302:	b29a      	uxth	r2, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801030a:	e03b      	b.n	8010384 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	3320      	adds	r3, #32
 8010316:	7812      	ldrb	r2, [r2, #0]
 8010318:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801031e:	1c5a      	adds	r2, r3, #1
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801032a:	b29b      	uxth	r3, r3
 801032c:	3b01      	subs	r3, #1
 801032e:	b29a      	uxth	r2, r3
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010336:	e025      	b.n	8010384 <HAL_SPI_Transmit+0x378>
 8010338:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801033c:	f7f3 f8b2 	bl	80034a4 <HAL_GetTick>
 8010340:	4602      	mov	r2, r0
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	1ad3      	subs	r3, r2, r3
 8010346:	683a      	ldr	r2, [r7, #0]
 8010348:	429a      	cmp	r2, r3
 801034a:	d803      	bhi.n	8010354 <HAL_SPI_Transmit+0x348>
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010352:	d102      	bne.n	801035a <HAL_SPI_Transmit+0x34e>
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d114      	bne.n	8010384 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	f000 fab6 	bl	80108cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010366:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2200      	movs	r2, #0
 801037c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e02c      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801038a:	b29b      	uxth	r3, r3
 801038c:	2b00      	cmp	r3, #0
 801038e:	f47f af79 	bne.w	8010284 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	2200      	movs	r2, #0
 801039a:	2108      	movs	r1, #8
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f000 fb35 	bl	8010a0c <SPI_WaitOnFlagUntilTimeout>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d007      	beq.n	80103b8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103ae:	f043 0220 	orr.w	r2, r3, #32
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80103b8:	68f8      	ldr	r0, [r7, #12]
 80103ba:	f000 fa87 	bl	80108cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2201      	movs	r2, #1
 80103c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2200      	movs	r2, #0
 80103ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80103d8:	2301      	movs	r3, #1
 80103da:	e000      	b.n	80103de <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80103dc:	2300      	movs	r3, #0
  }
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3718      	adds	r7, #24
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop

080103e8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b088      	sub	sp, #32
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	603b      	str	r3, [r7, #0]
 80103f4:	4613      	mov	r3, r2
 80103f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103fc:	095b      	lsrs	r3, r3, #5
 80103fe:	b29b      	uxth	r3, r3
 8010400:	3301      	adds	r3, #1
 8010402:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	3330      	adds	r3, #48	@ 0x30
 801040a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801040c:	f7f3 f84a 	bl	80034a4 <HAL_GetTick>
 8010410:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010418:	b2db      	uxtb	r3, r3
 801041a:	2b01      	cmp	r3, #1
 801041c:	d001      	beq.n	8010422 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 801041e:	2302      	movs	r3, #2
 8010420:	e250      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d002      	beq.n	801042e <HAL_SPI_Receive+0x46>
 8010428:	88fb      	ldrh	r3, [r7, #6]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d101      	bne.n	8010432 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	e248      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010438:	2b01      	cmp	r3, #1
 801043a:	d101      	bne.n	8010440 <HAL_SPI_Receive+0x58>
 801043c:	2302      	movs	r3, #2
 801043e:	e241      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2201      	movs	r2, #1
 8010444:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2204      	movs	r2, #4
 801044c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	2200      	movs	r2, #0
 8010454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	88fa      	ldrh	r2, [r7, #6]
 8010462:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	88fa      	ldrh	r2, [r7, #6]
 801046a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2200      	movs	r2, #0
 8010472:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2200      	movs	r2, #0
 8010478:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2200      	movs	r2, #0
 8010480:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2200      	movs	r2, #0
 8010488:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010498:	d108      	bne.n	80104ac <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	e009      	b.n	80104c0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68db      	ldr	r3, [r3, #12]
 80104b2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80104be:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	4b95      	ldr	r3, [pc, #596]	@ (801071c <HAL_SPI_Receive+0x334>)
 80104c8:	4013      	ands	r3, r2
 80104ca:	88f9      	ldrh	r1, [r7, #6]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	6812      	ldr	r2, [r2, #0]
 80104d0:	430b      	orrs	r3, r1
 80104d2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f042 0201 	orr.w	r2, r2, #1
 80104e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80104ec:	d107      	bne.n	80104fe <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	2b0f      	cmp	r3, #15
 8010504:	d96c      	bls.n	80105e0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010506:	e064      	b.n	80105d2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	f003 0301 	and.w	r3, r3, #1
 801051a:	2b01      	cmp	r3, #1
 801051c:	d114      	bne.n	8010548 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010526:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010528:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801052e:	1d1a      	adds	r2, r3, #4
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801053a:	b29b      	uxth	r3, r3
 801053c:	3b01      	subs	r3, #1
 801053e:	b29a      	uxth	r2, r3
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010546:	e044      	b.n	80105d2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801054e:	b29b      	uxth	r3, r3
 8010550:	8bfa      	ldrh	r2, [r7, #30]
 8010552:	429a      	cmp	r2, r3
 8010554:	d919      	bls.n	801058a <HAL_SPI_Receive+0x1a2>
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d014      	beq.n	801058a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010568:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801056a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010570:	1d1a      	adds	r2, r3, #4
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801057c:	b29b      	uxth	r3, r3
 801057e:	3b01      	subs	r3, #1
 8010580:	b29a      	uxth	r2, r3
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010588:	e023      	b.n	80105d2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801058a:	f7f2 ff8b 	bl	80034a4 <HAL_GetTick>
 801058e:	4602      	mov	r2, r0
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	683a      	ldr	r2, [r7, #0]
 8010596:	429a      	cmp	r2, r3
 8010598:	d803      	bhi.n	80105a2 <HAL_SPI_Receive+0x1ba>
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a0:	d102      	bne.n	80105a8 <HAL_SPI_Receive+0x1c0>
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d114      	bne.n	80105d2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f000 f98f 	bl	80108cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2201      	movs	r2, #1
 80105c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80105ce:	2303      	movs	r3, #3
 80105d0:	e178      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105d8:	b29b      	uxth	r3, r3
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d194      	bne.n	8010508 <HAL_SPI_Receive+0x120>
 80105de:	e15e      	b.n	801089e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	2b07      	cmp	r3, #7
 80105e6:	f240 8153 	bls.w	8010890 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80105ea:	e08f      	b.n	801070c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	695b      	ldr	r3, [r3, #20]
 80105f2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	695b      	ldr	r3, [r3, #20]
 80105fa:	f003 0301 	and.w	r3, r3, #1
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d114      	bne.n	801062c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010606:	69ba      	ldr	r2, [r7, #24]
 8010608:	8812      	ldrh	r2, [r2, #0]
 801060a:	b292      	uxth	r2, r2
 801060c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010612:	1c9a      	adds	r2, r3, #2
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801061e:	b29b      	uxth	r3, r3
 8010620:	3b01      	subs	r3, #1
 8010622:	b29a      	uxth	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801062a:	e06f      	b.n	801070c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010632:	b29b      	uxth	r3, r3
 8010634:	8bfa      	ldrh	r2, [r7, #30]
 8010636:	429a      	cmp	r2, r3
 8010638:	d924      	bls.n	8010684 <HAL_SPI_Receive+0x29c>
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d01f      	beq.n	8010684 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010648:	69ba      	ldr	r2, [r7, #24]
 801064a:	8812      	ldrh	r2, [r2, #0]
 801064c:	b292      	uxth	r2, r2
 801064e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010654:	1c9a      	adds	r2, r3, #2
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801065e:	69ba      	ldr	r2, [r7, #24]
 8010660:	8812      	ldrh	r2, [r2, #0]
 8010662:	b292      	uxth	r2, r2
 8010664:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801066a:	1c9a      	adds	r2, r3, #2
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010676:	b29b      	uxth	r3, r3
 8010678:	3b02      	subs	r3, #2
 801067a:	b29a      	uxth	r2, r3
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010682:	e043      	b.n	801070c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801068a:	b29b      	uxth	r3, r3
 801068c:	2b01      	cmp	r3, #1
 801068e:	d119      	bne.n	80106c4 <HAL_SPI_Receive+0x2dc>
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010696:	2b00      	cmp	r3, #0
 8010698:	d014      	beq.n	80106c4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801069e:	69ba      	ldr	r2, [r7, #24]
 80106a0:	8812      	ldrh	r2, [r2, #0]
 80106a2:	b292      	uxth	r2, r2
 80106a4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106aa:	1c9a      	adds	r2, r3, #2
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	3b01      	subs	r3, #1
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106c2:	e023      	b.n	801070c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106c4:	f7f2 feee 	bl	80034a4 <HAL_GetTick>
 80106c8:	4602      	mov	r2, r0
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	1ad3      	subs	r3, r2, r3
 80106ce:	683a      	ldr	r2, [r7, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d803      	bhi.n	80106dc <HAL_SPI_Receive+0x2f4>
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106da:	d102      	bne.n	80106e2 <HAL_SPI_Receive+0x2fa>
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d114      	bne.n	801070c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f000 f8f2 	bl	80108cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2201      	movs	r2, #1
 80106fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2200      	movs	r2, #0
 8010704:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010708:	2303      	movs	r3, #3
 801070a:	e0db      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010712:	b29b      	uxth	r3, r3
 8010714:	2b00      	cmp	r3, #0
 8010716:	f47f af69 	bne.w	80105ec <HAL_SPI_Receive+0x204>
 801071a:	e0c0      	b.n	801089e <HAL_SPI_Receive+0x4b6>
 801071c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	695b      	ldr	r3, [r3, #20]
 8010726:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	695b      	ldr	r3, [r3, #20]
 801072e:	f003 0301 	and.w	r3, r3, #1
 8010732:	2b01      	cmp	r3, #1
 8010734:	d117      	bne.n	8010766 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010742:	7812      	ldrb	r2, [r2, #0]
 8010744:	b2d2      	uxtb	r2, r2
 8010746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801074c:	1c5a      	adds	r2, r3, #1
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010758:	b29b      	uxth	r3, r3
 801075a:	3b01      	subs	r3, #1
 801075c:	b29a      	uxth	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010764:	e094      	b.n	8010890 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801076c:	b29b      	uxth	r3, r3
 801076e:	8bfa      	ldrh	r2, [r7, #30]
 8010770:	429a      	cmp	r2, r3
 8010772:	d946      	bls.n	8010802 <HAL_SPI_Receive+0x41a>
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801077a:	2b00      	cmp	r3, #0
 801077c:	d041      	beq.n	8010802 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801078a:	7812      	ldrb	r2, [r2, #0]
 801078c:	b2d2      	uxtb	r2, r2
 801078e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010794:	1c5a      	adds	r2, r3, #1
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107a6:	7812      	ldrb	r2, [r2, #0]
 80107a8:	b2d2      	uxtb	r2, r2
 80107aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107b0:	1c5a      	adds	r2, r3, #1
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107c2:	7812      	ldrb	r2, [r2, #0]
 80107c4:	b2d2      	uxtb	r2, r2
 80107c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107cc:	1c5a      	adds	r2, r3, #1
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107de:	7812      	ldrb	r2, [r2, #0]
 80107e0:	b2d2      	uxtb	r2, r2
 80107e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80107e8:	1c5a      	adds	r2, r3, #1
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	3b04      	subs	r3, #4
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010800:	e046      	b.n	8010890 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010808:	b29b      	uxth	r3, r3
 801080a:	2b03      	cmp	r3, #3
 801080c:	d81c      	bhi.n	8010848 <HAL_SPI_Receive+0x460>
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010814:	2b00      	cmp	r3, #0
 8010816:	d017      	beq.n	8010848 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010824:	7812      	ldrb	r2, [r2, #0]
 8010826:	b2d2      	uxtb	r2, r2
 8010828:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801083a:	b29b      	uxth	r3, r3
 801083c:	3b01      	subs	r3, #1
 801083e:	b29a      	uxth	r2, r3
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010846:	e023      	b.n	8010890 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010848:	f7f2 fe2c 	bl	80034a4 <HAL_GetTick>
 801084c:	4602      	mov	r2, r0
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	429a      	cmp	r2, r3
 8010856:	d803      	bhi.n	8010860 <HAL_SPI_Receive+0x478>
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085e:	d102      	bne.n	8010866 <HAL_SPI_Receive+0x47e>
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d114      	bne.n	8010890 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f000 f830 	bl	80108cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010872:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2201      	movs	r2, #1
 8010880:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2200      	movs	r2, #0
 8010888:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801088c:	2303      	movs	r3, #3
 801088e:	e019      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010896:	b29b      	uxth	r3, r3
 8010898:	2b00      	cmp	r3, #0
 801089a:	f47f af41 	bne.w	8010720 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f000 f814 	bl	80108cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2201      	movs	r2, #1
 80108a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2200      	movs	r2, #0
 80108b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d001      	beq.n	80108c2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80108be:	2301      	movs	r3, #1
 80108c0:	e000      	b.n	80108c4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80108c2:	2300      	movs	r3, #0
  }
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3720      	adds	r7, #32
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	695b      	ldr	r3, [r3, #20]
 80108da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	699a      	ldr	r2, [r3, #24]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f042 0208 	orr.w	r2, r2, #8
 80108ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	699a      	ldr	r2, [r3, #24]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f042 0210 	orr.w	r2, r2, #16
 80108fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f022 0201 	bic.w	r2, r2, #1
 801090a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	6919      	ldr	r1, [r3, #16]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	4b3c      	ldr	r3, [pc, #240]	@ (8010a08 <SPI_CloseTransfer+0x13c>)
 8010918:	400b      	ands	r3, r1
 801091a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	689a      	ldr	r2, [r3, #8]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801092a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b04      	cmp	r3, #4
 8010936:	d014      	beq.n	8010962 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	f003 0320 	and.w	r3, r3, #32
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00f      	beq.n	8010962 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010948:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	699a      	ldr	r2, [r3, #24]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f042 0220 	orr.w	r2, r2, #32
 8010960:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010968:	b2db      	uxtb	r3, r3
 801096a:	2b03      	cmp	r3, #3
 801096c:	d014      	beq.n	8010998 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00f      	beq.n	8010998 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801097e:	f043 0204 	orr.w	r2, r3, #4
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	699a      	ldr	r2, [r3, #24]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010996:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d00f      	beq.n	80109c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109a8:	f043 0201 	orr.w	r2, r3, #1
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	699a      	ldr	r2, [r3, #24]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80109c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00f      	beq.n	80109ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109d2:	f043 0208 	orr.w	r2, r3, #8
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	699a      	ldr	r2, [r3, #24]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80109ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80109fc:	bf00      	nop
 80109fe:	3714      	adds	r7, #20
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr
 8010a08:	fffffc90 	.word	0xfffffc90

08010a0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	603b      	str	r3, [r7, #0]
 8010a18:	4613      	mov	r3, r2
 8010a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010a1c:	e010      	b.n	8010a40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a1e:	f7f2 fd41 	bl	80034a4 <HAL_GetTick>
 8010a22:	4602      	mov	r2, r0
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	1ad3      	subs	r3, r2, r3
 8010a28:	683a      	ldr	r2, [r7, #0]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d803      	bhi.n	8010a36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a34:	d102      	bne.n	8010a3c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d101      	bne.n	8010a40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010a3c:	2303      	movs	r3, #3
 8010a3e:	e00f      	b.n	8010a60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	695a      	ldr	r2, [r3, #20]
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	4013      	ands	r3, r2
 8010a4a:	68ba      	ldr	r2, [r7, #8]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	bf0c      	ite	eq
 8010a50:	2301      	moveq	r3, #1
 8010a52:	2300      	movne	r3, #0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	461a      	mov	r2, r3
 8010a58:	79fb      	ldrb	r3, [r7, #7]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d0df      	beq.n	8010a1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a74:	095b      	lsrs	r3, r3, #5
 8010a76:	3301      	adds	r3, #1
 8010a78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	3307      	adds	r3, #7
 8010a86:	08db      	lsrs	r3, r3, #3
 8010a88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b082      	sub	sp, #8
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d101      	bne.n	8010ab0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010aac:	2301      	movs	r3, #1
 8010aae:	e049      	b.n	8010b44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d106      	bne.n	8010aca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f7f1 ff67 	bl	8002998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2202      	movs	r2, #2
 8010ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	3304      	adds	r3, #4
 8010ada:	4619      	mov	r1, r3
 8010adc:	4610      	mov	r0, r2
 8010ade:	f000 fd59 	bl	8011594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2201      	movs	r2, #1
 8010afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2201      	movs	r2, #1
 8010b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2201      	movs	r2, #1
 8010b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2201      	movs	r2, #1
 8010b36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3708      	adds	r7, #8
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d001      	beq.n	8010b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b60:	2301      	movs	r3, #1
 8010b62:	e054      	b.n	8010c0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2202      	movs	r2, #2
 8010b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	68da      	ldr	r2, [r3, #12]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f042 0201 	orr.w	r2, r2, #1
 8010b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a26      	ldr	r2, [pc, #152]	@ (8010c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d022      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b8e:	d01d      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4a22      	ldr	r2, [pc, #136]	@ (8010c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d018      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4a21      	ldr	r2, [pc, #132]	@ (8010c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d013      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8010c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d00e      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8010c2c <HAL_TIM_Base_Start_IT+0xe0>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d009      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8010c30 <HAL_TIM_Base_Start_IT+0xe4>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d004      	beq.n	8010bcc <HAL_TIM_Base_Start_IT+0x80>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8010c34 <HAL_TIM_Base_Start_IT+0xe8>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d115      	bne.n	8010bf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	689a      	ldr	r2, [r3, #8]
 8010bd2:	4b19      	ldr	r3, [pc, #100]	@ (8010c38 <HAL_TIM_Base_Start_IT+0xec>)
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2b06      	cmp	r3, #6
 8010bdc:	d015      	beq.n	8010c0a <HAL_TIM_Base_Start_IT+0xbe>
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010be4:	d011      	beq.n	8010c0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f042 0201 	orr.w	r2, r2, #1
 8010bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bf6:	e008      	b.n	8010c0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f042 0201 	orr.w	r2, r2, #1
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	e000      	b.n	8010c0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3714      	adds	r7, #20
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	40010000 	.word	0x40010000
 8010c20:	40000400 	.word	0x40000400
 8010c24:	40000800 	.word	0x40000800
 8010c28:	40000c00 	.word	0x40000c00
 8010c2c:	40010400 	.word	0x40010400
 8010c30:	40001800 	.word	0x40001800
 8010c34:	40014000 	.word	0x40014000
 8010c38:	00010007 	.word	0x00010007

08010c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d101      	bne.n	8010c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	e049      	b.n	8010ce2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c62:	6878      	ldr	r0, [r7, #4]
 8010c64:	f7f1 fe32 	bl	80028cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2202      	movs	r2, #2
 8010c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	3304      	adds	r3, #4
 8010c78:	4619      	mov	r1, r3
 8010c7a:	4610      	mov	r0, r2
 8010c7c:	f000 fc8a 	bl	8011594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2201      	movs	r2, #1
 8010c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2201      	movs	r2, #1
 8010cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010ce0:	2300      	movs	r3, #0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
	...

08010cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d109      	bne.n	8010d10 <HAL_TIM_PWM_Start+0x24>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	bf14      	ite	ne
 8010d08:	2301      	movne	r3, #1
 8010d0a:	2300      	moveq	r3, #0
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	e03c      	b.n	8010d8a <HAL_TIM_PWM_Start+0x9e>
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2b04      	cmp	r3, #4
 8010d14:	d109      	bne.n	8010d2a <HAL_TIM_PWM_Start+0x3e>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	bf14      	ite	ne
 8010d22:	2301      	movne	r3, #1
 8010d24:	2300      	moveq	r3, #0
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	e02f      	b.n	8010d8a <HAL_TIM_PWM_Start+0x9e>
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	2b08      	cmp	r3, #8
 8010d2e:	d109      	bne.n	8010d44 <HAL_TIM_PWM_Start+0x58>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	bf14      	ite	ne
 8010d3c:	2301      	movne	r3, #1
 8010d3e:	2300      	moveq	r3, #0
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	e022      	b.n	8010d8a <HAL_TIM_PWM_Start+0x9e>
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b0c      	cmp	r3, #12
 8010d48:	d109      	bne.n	8010d5e <HAL_TIM_PWM_Start+0x72>
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	bf14      	ite	ne
 8010d56:	2301      	movne	r3, #1
 8010d58:	2300      	moveq	r3, #0
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	e015      	b.n	8010d8a <HAL_TIM_PWM_Start+0x9e>
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	2b10      	cmp	r3, #16
 8010d62:	d109      	bne.n	8010d78 <HAL_TIM_PWM_Start+0x8c>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	bf14      	ite	ne
 8010d70:	2301      	movne	r3, #1
 8010d72:	2300      	moveq	r3, #0
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	e008      	b.n	8010d8a <HAL_TIM_PWM_Start+0x9e>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	bf14      	ite	ne
 8010d84:	2301      	movne	r3, #1
 8010d86:	2300      	moveq	r3, #0
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d001      	beq.n	8010d92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e0a1      	b.n	8010ed6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d104      	bne.n	8010da2 <HAL_TIM_PWM_Start+0xb6>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2202      	movs	r2, #2
 8010d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010da0:	e023      	b.n	8010dea <HAL_TIM_PWM_Start+0xfe>
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	2b04      	cmp	r3, #4
 8010da6:	d104      	bne.n	8010db2 <HAL_TIM_PWM_Start+0xc6>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010db0:	e01b      	b.n	8010dea <HAL_TIM_PWM_Start+0xfe>
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	2b08      	cmp	r3, #8
 8010db6:	d104      	bne.n	8010dc2 <HAL_TIM_PWM_Start+0xd6>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2202      	movs	r2, #2
 8010dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010dc0:	e013      	b.n	8010dea <HAL_TIM_PWM_Start+0xfe>
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	2b0c      	cmp	r3, #12
 8010dc6:	d104      	bne.n	8010dd2 <HAL_TIM_PWM_Start+0xe6>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2202      	movs	r2, #2
 8010dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010dd0:	e00b      	b.n	8010dea <HAL_TIM_PWM_Start+0xfe>
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	2b10      	cmp	r3, #16
 8010dd6:	d104      	bne.n	8010de2 <HAL_TIM_PWM_Start+0xf6>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2202      	movs	r2, #2
 8010ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010de0:	e003      	b.n	8010dea <HAL_TIM_PWM_Start+0xfe>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2202      	movs	r2, #2
 8010de6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2201      	movs	r2, #1
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	4618      	mov	r0, r3
 8010df4:	f000 ffe2 	bl	8011dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a38      	ldr	r2, [pc, #224]	@ (8010ee0 <HAL_TIM_PWM_Start+0x1f4>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d013      	beq.n	8010e2a <HAL_TIM_PWM_Start+0x13e>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a37      	ldr	r2, [pc, #220]	@ (8010ee4 <HAL_TIM_PWM_Start+0x1f8>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d00e      	beq.n	8010e2a <HAL_TIM_PWM_Start+0x13e>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4a35      	ldr	r2, [pc, #212]	@ (8010ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d009      	beq.n	8010e2a <HAL_TIM_PWM_Start+0x13e>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4a34      	ldr	r2, [pc, #208]	@ (8010eec <HAL_TIM_PWM_Start+0x200>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d004      	beq.n	8010e2a <HAL_TIM_PWM_Start+0x13e>
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	4a32      	ldr	r2, [pc, #200]	@ (8010ef0 <HAL_TIM_PWM_Start+0x204>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d101      	bne.n	8010e2e <HAL_TIM_PWM_Start+0x142>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e000      	b.n	8010e30 <HAL_TIM_PWM_Start+0x144>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d007      	beq.n	8010e44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010e42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a25      	ldr	r2, [pc, #148]	@ (8010ee0 <HAL_TIM_PWM_Start+0x1f4>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d022      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e56:	d01d      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a25      	ldr	r2, [pc, #148]	@ (8010ef4 <HAL_TIM_PWM_Start+0x208>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d018      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4a24      	ldr	r2, [pc, #144]	@ (8010ef8 <HAL_TIM_PWM_Start+0x20c>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d013      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a22      	ldr	r2, [pc, #136]	@ (8010efc <HAL_TIM_PWM_Start+0x210>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d00e      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8010ee4 <HAL_TIM_PWM_Start+0x1f8>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d009      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	4a1e      	ldr	r2, [pc, #120]	@ (8010f00 <HAL_TIM_PWM_Start+0x214>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d004      	beq.n	8010e94 <HAL_TIM_PWM_Start+0x1a8>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	4a16      	ldr	r2, [pc, #88]	@ (8010ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d115      	bne.n	8010ec0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	689a      	ldr	r2, [r3, #8]
 8010e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8010f04 <HAL_TIM_PWM_Start+0x218>)
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2b06      	cmp	r3, #6
 8010ea4:	d015      	beq.n	8010ed2 <HAL_TIM_PWM_Start+0x1e6>
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010eac:	d011      	beq.n	8010ed2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f042 0201 	orr.w	r2, r2, #1
 8010ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ebe:	e008      	b.n	8010ed2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f042 0201 	orr.w	r2, r2, #1
 8010ece:	601a      	str	r2, [r3, #0]
 8010ed0:	e000      	b.n	8010ed4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ed4:	2300      	movs	r3, #0
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	40010000 	.word	0x40010000
 8010ee4:	40010400 	.word	0x40010400
 8010ee8:	40014000 	.word	0x40014000
 8010eec:	40014400 	.word	0x40014400
 8010ef0:	40014800 	.word	0x40014800
 8010ef4:	40000400 	.word	0x40000400
 8010ef8:	40000800 	.word	0x40000800
 8010efc:	40000c00 	.word	0x40000c00
 8010f00:	40001800 	.word	0x40001800
 8010f04:	00010007 	.word	0x00010007

08010f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	691b      	ldr	r3, [r3, #16]
 8010f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	f003 0302 	and.w	r3, r3, #2
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d020      	beq.n	8010f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	f003 0302 	and.w	r3, r3, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d01b      	beq.n	8010f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f06f 0202 	mvn.w	r2, #2
 8010f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2201      	movs	r2, #1
 8010f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	699b      	ldr	r3, [r3, #24]
 8010f4a:	f003 0303 	and.w	r3, r3, #3
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d003      	beq.n	8010f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 fb00 	bl	8011558 <HAL_TIM_IC_CaptureCallback>
 8010f58:	e005      	b.n	8010f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f000 faf2 	bl	8011544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 fb03 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	f003 0304 	and.w	r3, r3, #4
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d020      	beq.n	8010fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f003 0304 	and.w	r3, r3, #4
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d01b      	beq.n	8010fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f06f 0204 	mvn.w	r2, #4
 8010f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2202      	movs	r2, #2
 8010f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	699b      	ldr	r3, [r3, #24]
 8010f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d003      	beq.n	8010fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f000 fada 	bl	8011558 <HAL_TIM_IC_CaptureCallback>
 8010fa4:	e005      	b.n	8010fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 facc 	bl	8011544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fadd 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	f003 0308 	and.w	r3, r3, #8
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d020      	beq.n	8011004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f003 0308 	and.w	r3, r3, #8
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01b      	beq.n	8011004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f06f 0208 	mvn.w	r2, #8
 8010fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2204      	movs	r2, #4
 8010fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	69db      	ldr	r3, [r3, #28]
 8010fe2:	f003 0303 	and.w	r3, r3, #3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d003      	beq.n	8010ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 fab4 	bl	8011558 <HAL_TIM_IC_CaptureCallback>
 8010ff0:	e005      	b.n	8010ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 faa6 	bl	8011544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 fab7 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	f003 0310 	and.w	r3, r3, #16
 801100a:	2b00      	cmp	r3, #0
 801100c:	d020      	beq.n	8011050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f003 0310 	and.w	r3, r3, #16
 8011014:	2b00      	cmp	r3, #0
 8011016:	d01b      	beq.n	8011050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	f06f 0210 	mvn.w	r2, #16
 8011020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2208      	movs	r2, #8
 8011026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	69db      	ldr	r3, [r3, #28]
 801102e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011032:	2b00      	cmp	r3, #0
 8011034:	d003      	beq.n	801103e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 fa8e 	bl	8011558 <HAL_TIM_IC_CaptureCallback>
 801103c:	e005      	b.n	801104a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fa80 	bl	8011544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fa91 	bl	801156c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f003 0301 	and.w	r3, r3, #1
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00c      	beq.n	8011074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f003 0301 	and.w	r3, r3, #1
 8011060:	2b00      	cmp	r3, #0
 8011062:	d007      	beq.n	8011074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	f06f 0201 	mvn.w	r2, #1
 801106c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 fa5e 	bl	8011530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801107a:	2b00      	cmp	r3, #0
 801107c:	d104      	bne.n	8011088 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00c      	beq.n	80110a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801108e:	2b00      	cmp	r3, #0
 8011090:	d007      	beq.n	80110a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801109a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 ffc9 	bl	8012034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d00c      	beq.n	80110c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d007      	beq.n	80110c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80110be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f000 ffc1 	bl	8012048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00c      	beq.n	80110ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d007      	beq.n	80110ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80110e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 fa4b 	bl	8011580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	f003 0320 	and.w	r3, r3, #32
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d00c      	beq.n	801110e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f003 0320 	and.w	r3, r3, #32
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d007      	beq.n	801110e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f06f 0220 	mvn.w	r2, #32
 8011106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f000 ff89 	bl	8012020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801110e:	bf00      	nop
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
	...

08011118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b086      	sub	sp, #24
 801111c:	af00      	add	r7, sp, #0
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011124:	2300      	movs	r3, #0
 8011126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801112e:	2b01      	cmp	r3, #1
 8011130:	d101      	bne.n	8011136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011132:	2302      	movs	r3, #2
 8011134:	e0ff      	b.n	8011336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2201      	movs	r2, #1
 801113a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b14      	cmp	r3, #20
 8011142:	f200 80f0 	bhi.w	8011326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011146:	a201      	add	r2, pc, #4	@ (adr r2, 801114c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801114c:	080111a1 	.word	0x080111a1
 8011150:	08011327 	.word	0x08011327
 8011154:	08011327 	.word	0x08011327
 8011158:	08011327 	.word	0x08011327
 801115c:	080111e1 	.word	0x080111e1
 8011160:	08011327 	.word	0x08011327
 8011164:	08011327 	.word	0x08011327
 8011168:	08011327 	.word	0x08011327
 801116c:	08011223 	.word	0x08011223
 8011170:	08011327 	.word	0x08011327
 8011174:	08011327 	.word	0x08011327
 8011178:	08011327 	.word	0x08011327
 801117c:	08011263 	.word	0x08011263
 8011180:	08011327 	.word	0x08011327
 8011184:	08011327 	.word	0x08011327
 8011188:	08011327 	.word	0x08011327
 801118c:	080112a5 	.word	0x080112a5
 8011190:	08011327 	.word	0x08011327
 8011194:	08011327 	.word	0x08011327
 8011198:	08011327 	.word	0x08011327
 801119c:	080112e5 	.word	0x080112e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	68b9      	ldr	r1, [r7, #8]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 fa94 	bl	80116d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	699a      	ldr	r2, [r3, #24]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f042 0208 	orr.w	r2, r2, #8
 80111ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	699a      	ldr	r2, [r3, #24]
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	f022 0204 	bic.w	r2, r2, #4
 80111ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	6999      	ldr	r1, [r3, #24]
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	691a      	ldr	r2, [r3, #16]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	430a      	orrs	r2, r1
 80111dc:	619a      	str	r2, [r3, #24]
      break;
 80111de:	e0a5      	b.n	801132c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	68b9      	ldr	r1, [r7, #8]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f000 fb04 	bl	80117f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	699a      	ldr	r2, [r3, #24]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80111fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	699a      	ldr	r2, [r3, #24]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801120a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	6999      	ldr	r1, [r3, #24]
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	691b      	ldr	r3, [r3, #16]
 8011216:	021a      	lsls	r2, r3, #8
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	430a      	orrs	r2, r1
 801121e:	619a      	str	r2, [r3, #24]
      break;
 8011220:	e084      	b.n	801132c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	68b9      	ldr	r1, [r7, #8]
 8011228:	4618      	mov	r0, r3
 801122a:	f000 fb6d 	bl	8011908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	69da      	ldr	r2, [r3, #28]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	f042 0208 	orr.w	r2, r2, #8
 801123c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	69da      	ldr	r2, [r3, #28]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f022 0204 	bic.w	r2, r2, #4
 801124c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	69d9      	ldr	r1, [r3, #28]
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	691a      	ldr	r2, [r3, #16]
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	430a      	orrs	r2, r1
 801125e:	61da      	str	r2, [r3, #28]
      break;
 8011260:	e064      	b.n	801132c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	68b9      	ldr	r1, [r7, #8]
 8011268:	4618      	mov	r0, r3
 801126a:	f000 fbd5 	bl	8011a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	69da      	ldr	r2, [r3, #28]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801127c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	69da      	ldr	r2, [r3, #28]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801128c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	69d9      	ldr	r1, [r3, #28]
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	691b      	ldr	r3, [r3, #16]
 8011298:	021a      	lsls	r2, r3, #8
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	61da      	str	r2, [r3, #28]
      break;
 80112a2:	e043      	b.n	801132c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	68b9      	ldr	r1, [r7, #8]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 fc1e 	bl	8011aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f042 0208 	orr.w	r2, r2, #8
 80112be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f022 0204 	bic.w	r2, r2, #4
 80112ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	691a      	ldr	r2, [r3, #16]
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	430a      	orrs	r2, r1
 80112e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80112e2:	e023      	b.n	801132c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	68b9      	ldr	r1, [r7, #8]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f000 fc62 	bl	8011bb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80112fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801130e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	691b      	ldr	r3, [r3, #16]
 801131a:	021a      	lsls	r2, r3, #8
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	430a      	orrs	r2, r1
 8011322:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011324:	e002      	b.n	801132c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011326:	2301      	movs	r3, #1
 8011328:	75fb      	strb	r3, [r7, #23]
      break;
 801132a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2200      	movs	r2, #0
 8011330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011334:	7dfb      	ldrb	r3, [r7, #23]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3718      	adds	r7, #24
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop

08011340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801134a:	2300      	movs	r3, #0
 801134c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011354:	2b01      	cmp	r3, #1
 8011356:	d101      	bne.n	801135c <HAL_TIM_ConfigClockSource+0x1c>
 8011358:	2302      	movs	r3, #2
 801135a:	e0dc      	b.n	8011516 <HAL_TIM_ConfigClockSource+0x1d6>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2201      	movs	r2, #1
 8011360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2202      	movs	r2, #2
 8011368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011374:	68ba      	ldr	r2, [r7, #8]
 8011376:	4b6a      	ldr	r3, [pc, #424]	@ (8011520 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011378:	4013      	ands	r3, r2
 801137a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	68ba      	ldr	r2, [r7, #8]
 801138a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4a64      	ldr	r2, [pc, #400]	@ (8011524 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011392:	4293      	cmp	r3, r2
 8011394:	f000 80a9 	beq.w	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 8011398:	4a62      	ldr	r2, [pc, #392]	@ (8011524 <HAL_TIM_ConfigClockSource+0x1e4>)
 801139a:	4293      	cmp	r3, r2
 801139c:	f200 80ae 	bhi.w	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113a0:	4a61      	ldr	r2, [pc, #388]	@ (8011528 <HAL_TIM_ConfigClockSource+0x1e8>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	f000 80a1 	beq.w	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 80113a8:	4a5f      	ldr	r2, [pc, #380]	@ (8011528 <HAL_TIM_ConfigClockSource+0x1e8>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	f200 80a6 	bhi.w	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113b0:	4a5e      	ldr	r2, [pc, #376]	@ (801152c <HAL_TIM_ConfigClockSource+0x1ec>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	f000 8099 	beq.w	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 80113b8:	4a5c      	ldr	r2, [pc, #368]	@ (801152c <HAL_TIM_ConfigClockSource+0x1ec>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	f200 809e 	bhi.w	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80113c4:	f000 8091 	beq.w	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 80113c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80113cc:	f200 8096 	bhi.w	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113d4:	f000 8089 	beq.w	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 80113d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113dc:	f200 808e 	bhi.w	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113e4:	d03e      	beq.n	8011464 <HAL_TIM_ConfigClockSource+0x124>
 80113e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80113ea:	f200 8087 	bhi.w	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113f2:	f000 8086 	beq.w	8011502 <HAL_TIM_ConfigClockSource+0x1c2>
 80113f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113fa:	d87f      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 80113fc:	2b70      	cmp	r3, #112	@ 0x70
 80113fe:	d01a      	beq.n	8011436 <HAL_TIM_ConfigClockSource+0xf6>
 8011400:	2b70      	cmp	r3, #112	@ 0x70
 8011402:	d87b      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 8011404:	2b60      	cmp	r3, #96	@ 0x60
 8011406:	d050      	beq.n	80114aa <HAL_TIM_ConfigClockSource+0x16a>
 8011408:	2b60      	cmp	r3, #96	@ 0x60
 801140a:	d877      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 801140c:	2b50      	cmp	r3, #80	@ 0x50
 801140e:	d03c      	beq.n	801148a <HAL_TIM_ConfigClockSource+0x14a>
 8011410:	2b50      	cmp	r3, #80	@ 0x50
 8011412:	d873      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 8011414:	2b40      	cmp	r3, #64	@ 0x40
 8011416:	d058      	beq.n	80114ca <HAL_TIM_ConfigClockSource+0x18a>
 8011418:	2b40      	cmp	r3, #64	@ 0x40
 801141a:	d86f      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 801141c:	2b30      	cmp	r3, #48	@ 0x30
 801141e:	d064      	beq.n	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 8011420:	2b30      	cmp	r3, #48	@ 0x30
 8011422:	d86b      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 8011424:	2b20      	cmp	r3, #32
 8011426:	d060      	beq.n	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 8011428:	2b20      	cmp	r3, #32
 801142a:	d867      	bhi.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
 801142c:	2b00      	cmp	r3, #0
 801142e:	d05c      	beq.n	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 8011430:	2b10      	cmp	r3, #16
 8011432:	d05a      	beq.n	80114ea <HAL_TIM_ConfigClockSource+0x1aa>
 8011434:	e062      	b.n	80114fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011446:	f000 fc99 	bl	8011d7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	68ba      	ldr	r2, [r7, #8]
 8011460:	609a      	str	r2, [r3, #8]
      break;
 8011462:	e04f      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011474:	f000 fc82 	bl	8011d7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	689a      	ldr	r2, [r3, #8]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011486:	609a      	str	r2, [r3, #8]
      break;
 8011488:	e03c      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011496:	461a      	mov	r2, r3
 8011498:	f000 fbf2 	bl	8011c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2150      	movs	r1, #80	@ 0x50
 80114a2:	4618      	mov	r0, r3
 80114a4:	f000 fc4c 	bl	8011d40 <TIM_ITRx_SetConfig>
      break;
 80114a8:	e02c      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80114b6:	461a      	mov	r2, r3
 80114b8:	f000 fc11 	bl	8011cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2160      	movs	r1, #96	@ 0x60
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 fc3c 	bl	8011d40 <TIM_ITRx_SetConfig>
      break;
 80114c8:	e01c      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80114d6:	461a      	mov	r2, r3
 80114d8:	f000 fbd2 	bl	8011c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2140      	movs	r1, #64	@ 0x40
 80114e2:	4618      	mov	r0, r3
 80114e4:	f000 fc2c 	bl	8011d40 <TIM_ITRx_SetConfig>
      break;
 80114e8:	e00c      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4619      	mov	r1, r3
 80114f4:	4610      	mov	r0, r2
 80114f6:	f000 fc23 	bl	8011d40 <TIM_ITRx_SetConfig>
      break;
 80114fa:	e003      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80114fc:	2301      	movs	r3, #1
 80114fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011500:	e000      	b.n	8011504 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2201      	movs	r2, #1
 8011508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011514:	7bfb      	ldrb	r3, [r7, #15]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	ffceff88 	.word	0xffceff88
 8011524:	00100040 	.word	0x00100040
 8011528:	00100030 	.word	0x00100030
 801152c:	00100020 	.word	0x00100020

08011530 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011530:	b480      	push	{r7}
 8011532:	b083      	sub	sp, #12
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011538:	bf00      	nop
 801153a:	370c      	adds	r7, #12
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr

08011544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801154c:	bf00      	nop
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011560:	bf00      	nop
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011574:	bf00      	nop
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011588:	bf00      	nop
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011594:	b480      	push	{r7}
 8011596:	b085      	sub	sp, #20
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4a43      	ldr	r2, [pc, #268]	@ (80116b4 <TIM_Base_SetConfig+0x120>)
 80115a8:	4293      	cmp	r3, r2
 80115aa:	d013      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115b2:	d00f      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4a40      	ldr	r2, [pc, #256]	@ (80116b8 <TIM_Base_SetConfig+0x124>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d00b      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	4a3f      	ldr	r2, [pc, #252]	@ (80116bc <TIM_Base_SetConfig+0x128>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d007      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4a3e      	ldr	r2, [pc, #248]	@ (80116c0 <TIM_Base_SetConfig+0x12c>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d003      	beq.n	80115d4 <TIM_Base_SetConfig+0x40>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4a3d      	ldr	r2, [pc, #244]	@ (80116c4 <TIM_Base_SetConfig+0x130>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d108      	bne.n	80115e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	4313      	orrs	r3, r2
 80115e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4a32      	ldr	r2, [pc, #200]	@ (80116b4 <TIM_Base_SetConfig+0x120>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d01f      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80115f4:	d01b      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4a2f      	ldr	r2, [pc, #188]	@ (80116b8 <TIM_Base_SetConfig+0x124>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d017      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a2e      	ldr	r2, [pc, #184]	@ (80116bc <TIM_Base_SetConfig+0x128>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d013      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4a2d      	ldr	r2, [pc, #180]	@ (80116c0 <TIM_Base_SetConfig+0x12c>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d00f      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4a2c      	ldr	r2, [pc, #176]	@ (80116c4 <TIM_Base_SetConfig+0x130>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d00b      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	4a2b      	ldr	r2, [pc, #172]	@ (80116c8 <TIM_Base_SetConfig+0x134>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d007      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	4a2a      	ldr	r2, [pc, #168]	@ (80116cc <TIM_Base_SetConfig+0x138>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d003      	beq.n	801162e <TIM_Base_SetConfig+0x9a>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4a29      	ldr	r2, [pc, #164]	@ (80116d0 <TIM_Base_SetConfig+0x13c>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d108      	bne.n	8011640 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	4313      	orrs	r3, r2
 801163e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	695b      	ldr	r3, [r3, #20]
 801164a:	4313      	orrs	r3, r2
 801164c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	689a      	ldr	r2, [r3, #8]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4a14      	ldr	r2, [pc, #80]	@ (80116b4 <TIM_Base_SetConfig+0x120>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d00f      	beq.n	8011686 <TIM_Base_SetConfig+0xf2>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4a16      	ldr	r2, [pc, #88]	@ (80116c4 <TIM_Base_SetConfig+0x130>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d00b      	beq.n	8011686 <TIM_Base_SetConfig+0xf2>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4a15      	ldr	r2, [pc, #84]	@ (80116c8 <TIM_Base_SetConfig+0x134>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d007      	beq.n	8011686 <TIM_Base_SetConfig+0xf2>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4a14      	ldr	r2, [pc, #80]	@ (80116cc <TIM_Base_SetConfig+0x138>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d003      	beq.n	8011686 <TIM_Base_SetConfig+0xf2>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4a13      	ldr	r2, [pc, #76]	@ (80116d0 <TIM_Base_SetConfig+0x13c>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d103      	bne.n	801168e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	691a      	ldr	r2, [r3, #16]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	f043 0204 	orr.w	r2, r3, #4
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2201      	movs	r2, #1
 801169e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	601a      	str	r2, [r3, #0]
}
 80116a6:	bf00      	nop
 80116a8:	3714      	adds	r7, #20
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	40010000 	.word	0x40010000
 80116b8:	40000400 	.word	0x40000400
 80116bc:	40000800 	.word	0x40000800
 80116c0:	40000c00 	.word	0x40000c00
 80116c4:	40010400 	.word	0x40010400
 80116c8:	40014000 	.word	0x40014000
 80116cc:	40014400 	.word	0x40014400
 80116d0:	40014800 	.word	0x40014800

080116d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b087      	sub	sp, #28
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6a1b      	ldr	r3, [r3, #32]
 80116e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6a1b      	ldr	r3, [r3, #32]
 80116e8:	f023 0201 	bic.w	r2, r3, #1
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	699b      	ldr	r3, [r3, #24]
 80116fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	4b37      	ldr	r3, [pc, #220]	@ (80117dc <TIM_OC1_SetConfig+0x108>)
 8011700:	4013      	ands	r3, r2
 8011702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f023 0303 	bic.w	r3, r3, #3
 801170a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	4313      	orrs	r3, r2
 8011714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	f023 0302 	bic.w	r3, r3, #2
 801171c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	4313      	orrs	r3, r2
 8011726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	4a2d      	ldr	r2, [pc, #180]	@ (80117e0 <TIM_OC1_SetConfig+0x10c>)
 801172c:	4293      	cmp	r3, r2
 801172e:	d00f      	beq.n	8011750 <TIM_OC1_SetConfig+0x7c>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4a2c      	ldr	r2, [pc, #176]	@ (80117e4 <TIM_OC1_SetConfig+0x110>)
 8011734:	4293      	cmp	r3, r2
 8011736:	d00b      	beq.n	8011750 <TIM_OC1_SetConfig+0x7c>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	4a2b      	ldr	r2, [pc, #172]	@ (80117e8 <TIM_OC1_SetConfig+0x114>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d007      	beq.n	8011750 <TIM_OC1_SetConfig+0x7c>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4a2a      	ldr	r2, [pc, #168]	@ (80117ec <TIM_OC1_SetConfig+0x118>)
 8011744:	4293      	cmp	r3, r2
 8011746:	d003      	beq.n	8011750 <TIM_OC1_SetConfig+0x7c>
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	4a29      	ldr	r2, [pc, #164]	@ (80117f0 <TIM_OC1_SetConfig+0x11c>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d10c      	bne.n	801176a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	f023 0308 	bic.w	r3, r3, #8
 8011756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	697a      	ldr	r2, [r7, #20]
 801175e:	4313      	orrs	r3, r2
 8011760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	f023 0304 	bic.w	r3, r3, #4
 8011768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4a1c      	ldr	r2, [pc, #112]	@ (80117e0 <TIM_OC1_SetConfig+0x10c>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d00f      	beq.n	8011792 <TIM_OC1_SetConfig+0xbe>
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4a1b      	ldr	r2, [pc, #108]	@ (80117e4 <TIM_OC1_SetConfig+0x110>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d00b      	beq.n	8011792 <TIM_OC1_SetConfig+0xbe>
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4a1a      	ldr	r2, [pc, #104]	@ (80117e8 <TIM_OC1_SetConfig+0x114>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d007      	beq.n	8011792 <TIM_OC1_SetConfig+0xbe>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4a19      	ldr	r2, [pc, #100]	@ (80117ec <TIM_OC1_SetConfig+0x118>)
 8011786:	4293      	cmp	r3, r2
 8011788:	d003      	beq.n	8011792 <TIM_OC1_SetConfig+0xbe>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4a18      	ldr	r2, [pc, #96]	@ (80117f0 <TIM_OC1_SetConfig+0x11c>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d111      	bne.n	80117b6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80117a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	695b      	ldr	r3, [r3, #20]
 80117a6:	693a      	ldr	r2, [r7, #16]
 80117a8:	4313      	orrs	r3, r2
 80117aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	699b      	ldr	r3, [r3, #24]
 80117b0:	693a      	ldr	r2, [r7, #16]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	693a      	ldr	r2, [r7, #16]
 80117ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	685a      	ldr	r2, [r3, #4]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	697a      	ldr	r2, [r7, #20]
 80117ce:	621a      	str	r2, [r3, #32]
}
 80117d0:	bf00      	nop
 80117d2:	371c      	adds	r7, #28
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	fffeff8f 	.word	0xfffeff8f
 80117e0:	40010000 	.word	0x40010000
 80117e4:	40010400 	.word	0x40010400
 80117e8:	40014000 	.word	0x40014000
 80117ec:	40014400 	.word	0x40014400
 80117f0:	40014800 	.word	0x40014800

080117f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b087      	sub	sp, #28
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6a1b      	ldr	r3, [r3, #32]
 8011802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a1b      	ldr	r3, [r3, #32]
 8011808:	f023 0210 	bic.w	r2, r3, #16
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	699b      	ldr	r3, [r3, #24]
 801181a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	4b34      	ldr	r3, [pc, #208]	@ (80118f0 <TIM_OC2_SetConfig+0xfc>)
 8011820:	4013      	ands	r3, r2
 8011822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801182a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	021b      	lsls	r3, r3, #8
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	4313      	orrs	r3, r2
 8011836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	f023 0320 	bic.w	r3, r3, #32
 801183e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	011b      	lsls	r3, r3, #4
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	4313      	orrs	r3, r2
 801184a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	4a29      	ldr	r2, [pc, #164]	@ (80118f4 <TIM_OC2_SetConfig+0x100>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d003      	beq.n	801185c <TIM_OC2_SetConfig+0x68>
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	4a28      	ldr	r2, [pc, #160]	@ (80118f8 <TIM_OC2_SetConfig+0x104>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d10d      	bne.n	8011878 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	011b      	lsls	r3, r3, #4
 801186a:	697a      	ldr	r2, [r7, #20]
 801186c:	4313      	orrs	r3, r2
 801186e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	4a1e      	ldr	r2, [pc, #120]	@ (80118f4 <TIM_OC2_SetConfig+0x100>)
 801187c:	4293      	cmp	r3, r2
 801187e:	d00f      	beq.n	80118a0 <TIM_OC2_SetConfig+0xac>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4a1d      	ldr	r2, [pc, #116]	@ (80118f8 <TIM_OC2_SetConfig+0x104>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d00b      	beq.n	80118a0 <TIM_OC2_SetConfig+0xac>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4a1c      	ldr	r2, [pc, #112]	@ (80118fc <TIM_OC2_SetConfig+0x108>)
 801188c:	4293      	cmp	r3, r2
 801188e:	d007      	beq.n	80118a0 <TIM_OC2_SetConfig+0xac>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	4a1b      	ldr	r2, [pc, #108]	@ (8011900 <TIM_OC2_SetConfig+0x10c>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d003      	beq.n	80118a0 <TIM_OC2_SetConfig+0xac>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	4a1a      	ldr	r2, [pc, #104]	@ (8011904 <TIM_OC2_SetConfig+0x110>)
 801189c:	4293      	cmp	r3, r2
 801189e:	d113      	bne.n	80118c8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80118a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80118ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	695b      	ldr	r3, [r3, #20]
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	693a      	ldr	r2, [r7, #16]
 80118b8:	4313      	orrs	r3, r2
 80118ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	699b      	ldr	r3, [r3, #24]
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	693a      	ldr	r2, [r7, #16]
 80118c4:	4313      	orrs	r3, r2
 80118c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	693a      	ldr	r2, [r7, #16]
 80118cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	685a      	ldr	r2, [r3, #4]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	697a      	ldr	r2, [r7, #20]
 80118e0:	621a      	str	r2, [r3, #32]
}
 80118e2:	bf00      	nop
 80118e4:	371c      	adds	r7, #28
 80118e6:	46bd      	mov	sp, r7
 80118e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ec:	4770      	bx	lr
 80118ee:	bf00      	nop
 80118f0:	feff8fff 	.word	0xfeff8fff
 80118f4:	40010000 	.word	0x40010000
 80118f8:	40010400 	.word	0x40010400
 80118fc:	40014000 	.word	0x40014000
 8011900:	40014400 	.word	0x40014400
 8011904:	40014800 	.word	0x40014800

08011908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011908:	b480      	push	{r7}
 801190a:	b087      	sub	sp, #28
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6a1b      	ldr	r3, [r3, #32]
 8011916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a1b      	ldr	r3, [r3, #32]
 801191c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	69db      	ldr	r3, [r3, #28]
 801192e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	4b33      	ldr	r3, [pc, #204]	@ (8011a00 <TIM_OC3_SetConfig+0xf8>)
 8011934:	4013      	ands	r3, r2
 8011936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f023 0303 	bic.w	r3, r3, #3
 801193e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	4313      	orrs	r3, r2
 8011948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	021b      	lsls	r3, r3, #8
 8011958:	697a      	ldr	r2, [r7, #20]
 801195a:	4313      	orrs	r3, r2
 801195c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	4a28      	ldr	r2, [pc, #160]	@ (8011a04 <TIM_OC3_SetConfig+0xfc>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d003      	beq.n	801196e <TIM_OC3_SetConfig+0x66>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	4a27      	ldr	r2, [pc, #156]	@ (8011a08 <TIM_OC3_SetConfig+0x100>)
 801196a:	4293      	cmp	r3, r2
 801196c:	d10d      	bne.n	801198a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	021b      	lsls	r3, r3, #8
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	4313      	orrs	r3, r2
 8011980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8011988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4a1d      	ldr	r2, [pc, #116]	@ (8011a04 <TIM_OC3_SetConfig+0xfc>)
 801198e:	4293      	cmp	r3, r2
 8011990:	d00f      	beq.n	80119b2 <TIM_OC3_SetConfig+0xaa>
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4a1c      	ldr	r2, [pc, #112]	@ (8011a08 <TIM_OC3_SetConfig+0x100>)
 8011996:	4293      	cmp	r3, r2
 8011998:	d00b      	beq.n	80119b2 <TIM_OC3_SetConfig+0xaa>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4a1b      	ldr	r2, [pc, #108]	@ (8011a0c <TIM_OC3_SetConfig+0x104>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d007      	beq.n	80119b2 <TIM_OC3_SetConfig+0xaa>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4a1a      	ldr	r2, [pc, #104]	@ (8011a10 <TIM_OC3_SetConfig+0x108>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d003      	beq.n	80119b2 <TIM_OC3_SetConfig+0xaa>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4a19      	ldr	r2, [pc, #100]	@ (8011a14 <TIM_OC3_SetConfig+0x10c>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d113      	bne.n	80119da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80119c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	695b      	ldr	r3, [r3, #20]
 80119c6:	011b      	lsls	r3, r3, #4
 80119c8:	693a      	ldr	r2, [r7, #16]
 80119ca:	4313      	orrs	r3, r2
 80119cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	699b      	ldr	r3, [r3, #24]
 80119d2:	011b      	lsls	r3, r3, #4
 80119d4:	693a      	ldr	r2, [r7, #16]
 80119d6:	4313      	orrs	r3, r2
 80119d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	693a      	ldr	r2, [r7, #16]
 80119de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	685a      	ldr	r2, [r3, #4]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	697a      	ldr	r2, [r7, #20]
 80119f2:	621a      	str	r2, [r3, #32]
}
 80119f4:	bf00      	nop
 80119f6:	371c      	adds	r7, #28
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	fffeff8f 	.word	0xfffeff8f
 8011a04:	40010000 	.word	0x40010000
 8011a08:	40010400 	.word	0x40010400
 8011a0c:	40014000 	.word	0x40014000
 8011a10:	40014400 	.word	0x40014400
 8011a14:	40014800 	.word	0x40014800

08011a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b087      	sub	sp, #28
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6a1b      	ldr	r3, [r3, #32]
 8011a26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6a1b      	ldr	r3, [r3, #32]
 8011a2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	69db      	ldr	r3, [r3, #28]
 8011a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011a40:	68fa      	ldr	r2, [r7, #12]
 8011a42:	4b24      	ldr	r3, [pc, #144]	@ (8011ad4 <TIM_OC4_SetConfig+0xbc>)
 8011a44:	4013      	ands	r3, r2
 8011a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	021b      	lsls	r3, r3, #8
 8011a56:	68fa      	ldr	r2, [r7, #12]
 8011a58:	4313      	orrs	r3, r2
 8011a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	031b      	lsls	r3, r3, #12
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	4a19      	ldr	r2, [pc, #100]	@ (8011ad8 <TIM_OC4_SetConfig+0xc0>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d00f      	beq.n	8011a98 <TIM_OC4_SetConfig+0x80>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	4a18      	ldr	r2, [pc, #96]	@ (8011adc <TIM_OC4_SetConfig+0xc4>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d00b      	beq.n	8011a98 <TIM_OC4_SetConfig+0x80>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4a17      	ldr	r2, [pc, #92]	@ (8011ae0 <TIM_OC4_SetConfig+0xc8>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d007      	beq.n	8011a98 <TIM_OC4_SetConfig+0x80>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4a16      	ldr	r2, [pc, #88]	@ (8011ae4 <TIM_OC4_SetConfig+0xcc>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d003      	beq.n	8011a98 <TIM_OC4_SetConfig+0x80>
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	4a15      	ldr	r2, [pc, #84]	@ (8011ae8 <TIM_OC4_SetConfig+0xd0>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d109      	bne.n	8011aac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	695b      	ldr	r3, [r3, #20]
 8011aa4:	019b      	lsls	r3, r3, #6
 8011aa6:	697a      	ldr	r2, [r7, #20]
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	68fa      	ldr	r2, [r7, #12]
 8011ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	685a      	ldr	r2, [r3, #4]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	693a      	ldr	r2, [r7, #16]
 8011ac4:	621a      	str	r2, [r3, #32]
}
 8011ac6:	bf00      	nop
 8011ac8:	371c      	adds	r7, #28
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	feff8fff 	.word	0xfeff8fff
 8011ad8:	40010000 	.word	0x40010000
 8011adc:	40010400 	.word	0x40010400
 8011ae0:	40014000 	.word	0x40014000
 8011ae4:	40014400 	.word	0x40014400
 8011ae8:	40014800 	.word	0x40014800

08011aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b087      	sub	sp, #28
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6a1b      	ldr	r3, [r3, #32]
 8011afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6a1b      	ldr	r3, [r3, #32]
 8011b00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	4b21      	ldr	r3, [pc, #132]	@ (8011b9c <TIM_OC5_SetConfig+0xb0>)
 8011b18:	4013      	ands	r3, r2
 8011b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	4313      	orrs	r3, r2
 8011b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	041b      	lsls	r3, r3, #16
 8011b34:	693a      	ldr	r2, [r7, #16]
 8011b36:	4313      	orrs	r3, r2
 8011b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a18      	ldr	r2, [pc, #96]	@ (8011ba0 <TIM_OC5_SetConfig+0xb4>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d00f      	beq.n	8011b62 <TIM_OC5_SetConfig+0x76>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4a17      	ldr	r2, [pc, #92]	@ (8011ba4 <TIM_OC5_SetConfig+0xb8>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d00b      	beq.n	8011b62 <TIM_OC5_SetConfig+0x76>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a16      	ldr	r2, [pc, #88]	@ (8011ba8 <TIM_OC5_SetConfig+0xbc>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d007      	beq.n	8011b62 <TIM_OC5_SetConfig+0x76>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4a15      	ldr	r2, [pc, #84]	@ (8011bac <TIM_OC5_SetConfig+0xc0>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d003      	beq.n	8011b62 <TIM_OC5_SetConfig+0x76>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4a14      	ldr	r2, [pc, #80]	@ (8011bb0 <TIM_OC5_SetConfig+0xc4>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d109      	bne.n	8011b76 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011b68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	021b      	lsls	r3, r3, #8
 8011b70:	697a      	ldr	r2, [r7, #20]
 8011b72:	4313      	orrs	r3, r2
 8011b74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	697a      	ldr	r2, [r7, #20]
 8011b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	685a      	ldr	r2, [r3, #4]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	621a      	str	r2, [r3, #32]
}
 8011b90:	bf00      	nop
 8011b92:	371c      	adds	r7, #28
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	fffeff8f 	.word	0xfffeff8f
 8011ba0:	40010000 	.word	0x40010000
 8011ba4:	40010400 	.word	0x40010400
 8011ba8:	40014000 	.word	0x40014000
 8011bac:	40014400 	.word	0x40014400
 8011bb0:	40014800 	.word	0x40014800

08011bb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b087      	sub	sp, #28
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6a1b      	ldr	r3, [r3, #32]
 8011bc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011bdc:	68fa      	ldr	r2, [r7, #12]
 8011bde:	4b22      	ldr	r3, [pc, #136]	@ (8011c68 <TIM_OC6_SetConfig+0xb4>)
 8011be0:	4013      	ands	r3, r2
 8011be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	021b      	lsls	r3, r3, #8
 8011bea:	68fa      	ldr	r2, [r7, #12]
 8011bec:	4313      	orrs	r3, r2
 8011bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	689b      	ldr	r3, [r3, #8]
 8011bfc:	051b      	lsls	r3, r3, #20
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	4313      	orrs	r3, r2
 8011c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	4a19      	ldr	r2, [pc, #100]	@ (8011c6c <TIM_OC6_SetConfig+0xb8>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d00f      	beq.n	8011c2c <TIM_OC6_SetConfig+0x78>
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4a18      	ldr	r2, [pc, #96]	@ (8011c70 <TIM_OC6_SetConfig+0xbc>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d00b      	beq.n	8011c2c <TIM_OC6_SetConfig+0x78>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4a17      	ldr	r2, [pc, #92]	@ (8011c74 <TIM_OC6_SetConfig+0xc0>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d007      	beq.n	8011c2c <TIM_OC6_SetConfig+0x78>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	4a16      	ldr	r2, [pc, #88]	@ (8011c78 <TIM_OC6_SetConfig+0xc4>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d003      	beq.n	8011c2c <TIM_OC6_SetConfig+0x78>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	4a15      	ldr	r2, [pc, #84]	@ (8011c7c <TIM_OC6_SetConfig+0xc8>)
 8011c28:	4293      	cmp	r3, r2
 8011c2a:	d109      	bne.n	8011c40 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011c32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	695b      	ldr	r3, [r3, #20]
 8011c38:	029b      	lsls	r3, r3, #10
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	697a      	ldr	r2, [r7, #20]
 8011c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	685a      	ldr	r2, [r3, #4]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	693a      	ldr	r2, [r7, #16]
 8011c58:	621a      	str	r2, [r3, #32]
}
 8011c5a:	bf00      	nop
 8011c5c:	371c      	adds	r7, #28
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	feff8fff 	.word	0xfeff8fff
 8011c6c:	40010000 	.word	0x40010000
 8011c70:	40010400 	.word	0x40010400
 8011c74:	40014000 	.word	0x40014000
 8011c78:	40014400 	.word	0x40014400
 8011c7c:	40014800 	.word	0x40014800

08011c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b087      	sub	sp, #28
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6a1b      	ldr	r3, [r3, #32]
 8011c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	6a1b      	ldr	r3, [r3, #32]
 8011c96:	f023 0201 	bic.w	r2, r3, #1
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	011b      	lsls	r3, r3, #4
 8011cb0:	693a      	ldr	r2, [r7, #16]
 8011cb2:	4313      	orrs	r3, r2
 8011cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	f023 030a 	bic.w	r3, r3, #10
 8011cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011cbe:	697a      	ldr	r2, [r7, #20]
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	693a      	ldr	r2, [r7, #16]
 8011cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	697a      	ldr	r2, [r7, #20]
 8011cd0:	621a      	str	r2, [r3, #32]
}
 8011cd2:	bf00      	nop
 8011cd4:	371c      	adds	r7, #28
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011cde:	b480      	push	{r7}
 8011ce0:	b087      	sub	sp, #28
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	60b9      	str	r1, [r7, #8]
 8011ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	6a1b      	ldr	r3, [r3, #32]
 8011cee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	6a1b      	ldr	r3, [r3, #32]
 8011cf4:	f023 0210 	bic.w	r2, r3, #16
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	699b      	ldr	r3, [r3, #24]
 8011d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	031b      	lsls	r3, r3, #12
 8011d0e:	693a      	ldr	r2, [r7, #16]
 8011d10:	4313      	orrs	r3, r2
 8011d12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011d1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	011b      	lsls	r3, r3, #4
 8011d20:	697a      	ldr	r2, [r7, #20]
 8011d22:	4313      	orrs	r3, r2
 8011d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	693a      	ldr	r2, [r7, #16]
 8011d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	621a      	str	r2, [r3, #32]
}
 8011d32:	bf00      	nop
 8011d34:	371c      	adds	r7, #28
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
	...

08011d40 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b085      	sub	sp, #20
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011d50:	68fa      	ldr	r2, [r7, #12]
 8011d52:	4b09      	ldr	r3, [pc, #36]	@ (8011d78 <TIM_ITRx_SetConfig+0x38>)
 8011d54:	4013      	ands	r3, r2
 8011d56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	f043 0307 	orr.w	r3, r3, #7
 8011d62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	609a      	str	r2, [r3, #8]
}
 8011d6a:	bf00      	nop
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	ffcfff8f 	.word	0xffcfff8f

08011d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011d7c:	b480      	push	{r7}
 8011d7e:	b087      	sub	sp, #28
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
 8011d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	689b      	ldr	r3, [r3, #8]
 8011d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	021a      	lsls	r2, r3, #8
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	431a      	orrs	r2, r3
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	4313      	orrs	r3, r2
 8011da4:	697a      	ldr	r2, [r7, #20]
 8011da6:	4313      	orrs	r3, r2
 8011da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	697a      	ldr	r2, [r7, #20]
 8011dae:	609a      	str	r2, [r3, #8]
}
 8011db0:	bf00      	nop
 8011db2:	371c      	adds	r7, #28
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr

08011dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b087      	sub	sp, #28
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	f003 031f 	and.w	r3, r3, #31
 8011dce:	2201      	movs	r2, #1
 8011dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8011dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	6a1a      	ldr	r2, [r3, #32]
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	43db      	mvns	r3, r3
 8011dde:	401a      	ands	r2, r3
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	6a1a      	ldr	r2, [r3, #32]
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	f003 031f 	and.w	r3, r3, #31
 8011dee:	6879      	ldr	r1, [r7, #4]
 8011df0:	fa01 f303 	lsl.w	r3, r1, r3
 8011df4:	431a      	orrs	r2, r3
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	621a      	str	r2, [r3, #32]
}
 8011dfa:	bf00      	nop
 8011dfc:	371c      	adds	r7, #28
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr
	...

08011e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d101      	bne.n	8011e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011e1c:	2302      	movs	r3, #2
 8011e1e:	e06d      	b.n	8011efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2201      	movs	r2, #1
 8011e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2202      	movs	r2, #2
 8011e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	689b      	ldr	r3, [r3, #8]
 8011e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	4a30      	ldr	r2, [pc, #192]	@ (8011f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d004      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8011f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e50:	4293      	cmp	r3, r2
 8011e52:	d108      	bne.n	8011e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	4313      	orrs	r3, r2
 8011e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	68fa      	ldr	r2, [r7, #12]
 8011e74:	4313      	orrs	r3, r2
 8011e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4a20      	ldr	r2, [pc, #128]	@ (8011f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e86:	4293      	cmp	r3, r2
 8011e88:	d022      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e92:	d01d      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4a1d      	ldr	r2, [pc, #116]	@ (8011f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	d018      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8011f14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d013      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4a1a      	ldr	r2, [pc, #104]	@ (8011f18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	d00e      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4a15      	ldr	r2, [pc, #84]	@ (8011f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011eb8:	4293      	cmp	r3, r2
 8011eba:	d009      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4a16      	ldr	r2, [pc, #88]	@ (8011f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d004      	beq.n	8011ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	4a15      	ldr	r2, [pc, #84]	@ (8011f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	d10c      	bne.n	8011eea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	4313      	orrs	r3, r2
 8011ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	68ba      	ldr	r2, [r7, #8]
 8011ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2201      	movs	r2, #1
 8011eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3714      	adds	r7, #20
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr
 8011f08:	40010000 	.word	0x40010000
 8011f0c:	40010400 	.word	0x40010400
 8011f10:	40000400 	.word	0x40000400
 8011f14:	40000800 	.word	0x40000800
 8011f18:	40000c00 	.word	0x40000c00
 8011f1c:	40001800 	.word	0x40001800
 8011f20:	40014000 	.word	0x40014000

08011f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d101      	bne.n	8011f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011f3c:	2302      	movs	r3, #2
 8011f3e:	e065      	b.n	801200c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2201      	movs	r2, #1
 8011f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	4313      	orrs	r3, r2
 8011f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	691b      	ldr	r3, [r3, #16]
 8011f8a:	4313      	orrs	r3, r2
 8011f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	695b      	ldr	r3, [r3, #20]
 8011f98:	4313      	orrs	r3, r2
 8011f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	699b      	ldr	r3, [r3, #24]
 8011fb4:	041b      	lsls	r3, r3, #16
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4a16      	ldr	r2, [pc, #88]	@ (8012018 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d004      	beq.n	8011fce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4a14      	ldr	r2, [pc, #80]	@ (801201c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d115      	bne.n	8011ffa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd8:	051b      	lsls	r3, r3, #20
 8011fda:	4313      	orrs	r3, r2
 8011fdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	69db      	ldr	r3, [r3, #28]
 8011fe8:	4313      	orrs	r3, r2
 8011fea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	6a1b      	ldr	r3, [r3, #32]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2200      	movs	r2, #0
 8012006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801200a:	2300      	movs	r3, #0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3714      	adds	r7, #20
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr
 8012018:	40010000 	.word	0x40010000
 801201c:	40010400 	.word	0x40010400

08012020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012028:	bf00      	nop
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801203c:	bf00      	nop
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012050:	bf00      	nop
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr

0801205c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d101      	bne.n	801206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801206a:	2301      	movs	r3, #1
 801206c:	e042      	b.n	80120f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012074:	2b00      	cmp	r3, #0
 8012076:	d106      	bne.n	8012086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7f0 fdab 	bl	8002bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2224      	movs	r2, #36	@ 0x24
 801208a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f022 0201 	bic.w	r2, r2, #1
 801209c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d002      	beq.n	80120ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f001 fa6a 	bl	8013580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 fcff 	bl	8012ab0 <UART_SetConfig>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d101      	bne.n	80120bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80120b8:	2301      	movs	r3, #1
 80120ba:	e01b      	b.n	80120f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	685a      	ldr	r2, [r3, #4]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80120ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	689a      	ldr	r2, [r3, #8]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80120da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f042 0201 	orr.w	r2, r2, #1
 80120ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f001 fae9 	bl	80136c4 <UART_CheckIdleState>
 80120f2:	4603      	mov	r3, r0
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b08a      	sub	sp, #40	@ 0x28
 8012100:	af02      	add	r7, sp, #8
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	603b      	str	r3, [r7, #0]
 8012108:	4613      	mov	r3, r2
 801210a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012112:	2b20      	cmp	r3, #32
 8012114:	d17b      	bne.n	801220e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d002      	beq.n	8012122 <HAL_UART_Transmit+0x26>
 801211c:	88fb      	ldrh	r3, [r7, #6]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d101      	bne.n	8012126 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012122:	2301      	movs	r3, #1
 8012124:	e074      	b.n	8012210 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2221      	movs	r2, #33	@ 0x21
 8012132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012136:	f7f1 f9b5 	bl	80034a4 <HAL_GetTick>
 801213a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	88fa      	ldrh	r2, [r7, #6]
 8012140:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	88fa      	ldrh	r2, [r7, #6]
 8012148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012154:	d108      	bne.n	8012168 <HAL_UART_Transmit+0x6c>
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	691b      	ldr	r3, [r3, #16]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d104      	bne.n	8012168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	61bb      	str	r3, [r7, #24]
 8012166:	e003      	b.n	8012170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801216c:	2300      	movs	r3, #0
 801216e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012170:	e030      	b.n	80121d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	2200      	movs	r2, #0
 801217a:	2180      	movs	r1, #128	@ 0x80
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f001 fb4b 	bl	8013818 <UART_WaitOnFlagUntilTimeout>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d005      	beq.n	8012194 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2220      	movs	r2, #32
 801218c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012190:	2303      	movs	r3, #3
 8012192:	e03d      	b.n	8012210 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d10b      	bne.n	80121b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	881b      	ldrh	r3, [r3, #0]
 801219e:	461a      	mov	r2, r3
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80121a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80121aa:	69bb      	ldr	r3, [r7, #24]
 80121ac:	3302      	adds	r3, #2
 80121ae:	61bb      	str	r3, [r7, #24]
 80121b0:	e007      	b.n	80121c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	781a      	ldrb	r2, [r3, #0]
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	3301      	adds	r3, #1
 80121c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	3b01      	subs	r3, #1
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80121da:	b29b      	uxth	r3, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d1c8      	bne.n	8012172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	2200      	movs	r2, #0
 80121e8:	2140      	movs	r1, #64	@ 0x40
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f001 fb14 	bl	8013818 <UART_WaitOnFlagUntilTimeout>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d005      	beq.n	8012202 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2220      	movs	r2, #32
 80121fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80121fe:	2303      	movs	r3, #3
 8012200:	e006      	b.n	8012210 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2220      	movs	r2, #32
 8012206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	e000      	b.n	8012210 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801220e:	2302      	movs	r3, #2
  }
}
 8012210:	4618      	mov	r0, r3
 8012212:	3720      	adds	r7, #32
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b08a      	sub	sp, #40	@ 0x28
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	4613      	mov	r3, r2
 8012224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801222c:	2b20      	cmp	r3, #32
 801222e:	d137      	bne.n	80122a0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d002      	beq.n	801223c <HAL_UART_Receive_DMA+0x24>
 8012236:	88fb      	ldrh	r3, [r7, #6]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d101      	bne.n	8012240 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801223c:	2301      	movs	r3, #1
 801223e:	e030      	b.n	80122a2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2200      	movs	r2, #0
 8012244:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4a18      	ldr	r2, [pc, #96]	@ (80122ac <HAL_UART_Receive_DMA+0x94>)
 801224c:	4293      	cmp	r3, r2
 801224e:	d01f      	beq.n	8012290 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801225a:	2b00      	cmp	r3, #0
 801225c:	d018      	beq.n	8012290 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	e853 3f00 	ldrex	r3, [r3]
 801226a:	613b      	str	r3, [r7, #16]
   return(result);
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012272:	627b      	str	r3, [r7, #36]	@ 0x24
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	461a      	mov	r2, r3
 801227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227c:	623b      	str	r3, [r7, #32]
 801227e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012280:	69f9      	ldr	r1, [r7, #28]
 8012282:	6a3a      	ldr	r2, [r7, #32]
 8012284:	e841 2300 	strex	r3, r2, [r1]
 8012288:	61bb      	str	r3, [r7, #24]
   return(result);
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d1e6      	bne.n	801225e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012290:	88fb      	ldrh	r3, [r7, #6]
 8012292:	461a      	mov	r2, r3
 8012294:	68b9      	ldr	r1, [r7, #8]
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f001 fb2c 	bl	80138f4 <UART_Start_Receive_DMA>
 801229c:	4603      	mov	r3, r0
 801229e:	e000      	b.n	80122a2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80122a0:	2302      	movs	r3, #2
  }
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3728      	adds	r7, #40	@ 0x28
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	58000c00 	.word	0x58000c00

080122b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b0ba      	sub	sp, #232	@ 0xe8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	69db      	ldr	r3, [r3, #28]
 80122be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	689b      	ldr	r3, [r3, #8]
 80122d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80122d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80122da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80122de:	4013      	ands	r3, r2
 80122e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80122e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d11b      	bne.n	8012324 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80122ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122f0:	f003 0320 	and.w	r3, r3, #32
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d015      	beq.n	8012324 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80122f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80122fc:	f003 0320 	and.w	r3, r3, #32
 8012300:	2b00      	cmp	r3, #0
 8012302:	d105      	bne.n	8012310 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801230c:	2b00      	cmp	r3, #0
 801230e:	d009      	beq.n	8012324 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012314:	2b00      	cmp	r3, #0
 8012316:	f000 8393 	beq.w	8012a40 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	4798      	blx	r3
      }
      return;
 8012322:	e38d      	b.n	8012a40 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012328:	2b00      	cmp	r3, #0
 801232a:	f000 8123 	beq.w	8012574 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801232e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012332:	4b8d      	ldr	r3, [pc, #564]	@ (8012568 <HAL_UART_IRQHandler+0x2b8>)
 8012334:	4013      	ands	r3, r2
 8012336:	2b00      	cmp	r3, #0
 8012338:	d106      	bne.n	8012348 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801233a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801233e:	4b8b      	ldr	r3, [pc, #556]	@ (801256c <HAL_UART_IRQHandler+0x2bc>)
 8012340:	4013      	ands	r3, r2
 8012342:	2b00      	cmp	r3, #0
 8012344:	f000 8116 	beq.w	8012574 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801234c:	f003 0301 	and.w	r3, r3, #1
 8012350:	2b00      	cmp	r3, #0
 8012352:	d011      	beq.n	8012378 <HAL_UART_IRQHandler+0xc8>
 8012354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00b      	beq.n	8012378 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2201      	movs	r2, #1
 8012366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801236e:	f043 0201 	orr.w	r2, r3, #1
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801237c:	f003 0302 	and.w	r3, r3, #2
 8012380:	2b00      	cmp	r3, #0
 8012382:	d011      	beq.n	80123a8 <HAL_UART_IRQHandler+0xf8>
 8012384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012388:	f003 0301 	and.w	r3, r3, #1
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00b      	beq.n	80123a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2202      	movs	r2, #2
 8012396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801239e:	f043 0204 	orr.w	r2, r3, #4
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80123a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123ac:	f003 0304 	and.w	r3, r3, #4
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d011      	beq.n	80123d8 <HAL_UART_IRQHandler+0x128>
 80123b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80123b8:	f003 0301 	and.w	r3, r3, #1
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00b      	beq.n	80123d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2204      	movs	r2, #4
 80123c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80123ce:	f043 0202 	orr.w	r2, r3, #2
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80123d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80123dc:	f003 0308 	and.w	r3, r3, #8
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d017      	beq.n	8012414 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80123e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80123e8:	f003 0320 	and.w	r3, r3, #32
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d105      	bne.n	80123fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80123f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80123f4:	4b5c      	ldr	r3, [pc, #368]	@ (8012568 <HAL_UART_IRQHandler+0x2b8>)
 80123f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00b      	beq.n	8012414 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2208      	movs	r2, #8
 8012402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801240a:	f043 0208 	orr.w	r2, r3, #8
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801241c:	2b00      	cmp	r3, #0
 801241e:	d012      	beq.n	8012446 <HAL_UART_IRQHandler+0x196>
 8012420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00c      	beq.n	8012446 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801243c:	f043 0220 	orr.w	r2, r3, #32
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801244c:	2b00      	cmp	r3, #0
 801244e:	f000 82f9 	beq.w	8012a44 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012456:	f003 0320 	and.w	r3, r3, #32
 801245a:	2b00      	cmp	r3, #0
 801245c:	d013      	beq.n	8012486 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801245e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012462:	f003 0320 	and.w	r3, r3, #32
 8012466:	2b00      	cmp	r3, #0
 8012468:	d105      	bne.n	8012476 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801246a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012472:	2b00      	cmp	r3, #0
 8012474:	d007      	beq.n	8012486 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801247a:	2b00      	cmp	r3, #0
 801247c:	d003      	beq.n	8012486 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801248c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	689b      	ldr	r3, [r3, #8]
 8012496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801249a:	2b40      	cmp	r3, #64	@ 0x40
 801249c:	d005      	beq.n	80124aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801249e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80124a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d054      	beq.n	8012554 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f001 fb0a 	bl	8013ac4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	689b      	ldr	r3, [r3, #8]
 80124b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ba:	2b40      	cmp	r3, #64	@ 0x40
 80124bc:	d146      	bne.n	801254c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3308      	adds	r3, #8
 80124c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80124cc:	e853 3f00 	ldrex	r3, [r3]
 80124d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80124d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80124d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80124dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	3308      	adds	r3, #8
 80124e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80124ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80124ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80124f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80124fa:	e841 2300 	strex	r3, r2, [r1]
 80124fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1d9      	bne.n	80124be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012510:	2b00      	cmp	r3, #0
 8012512:	d017      	beq.n	8012544 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801251a:	4a15      	ldr	r2, [pc, #84]	@ (8012570 <HAL_UART_IRQHandler+0x2c0>)
 801251c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012524:	4618      	mov	r0, r3
 8012526:	f7f2 fd51 	bl	8004fcc <HAL_DMA_Abort_IT>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d019      	beq.n	8012564 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801253e:	4610      	mov	r0, r2
 8012540:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012542:	e00f      	b.n	8012564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f000 fa9d 	bl	8012a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801254a:	e00b      	b.n	8012564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fa99 	bl	8012a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012552:	e007      	b.n	8012564 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f000 fa95 	bl	8012a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2200      	movs	r2, #0
 801255e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012562:	e26f      	b.n	8012a44 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012564:	bf00      	nop
    return;
 8012566:	e26d      	b.n	8012a44 <HAL_UART_IRQHandler+0x794>
 8012568:	10000001 	.word	0x10000001
 801256c:	04000120 	.word	0x04000120
 8012570:	08013d77 	.word	0x08013d77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012578:	2b01      	cmp	r3, #1
 801257a:	f040 8203 	bne.w	8012984 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801257e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012582:	f003 0310 	and.w	r3, r3, #16
 8012586:	2b00      	cmp	r3, #0
 8012588:	f000 81fc 	beq.w	8012984 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801258c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012590:	f003 0310 	and.w	r3, r3, #16
 8012594:	2b00      	cmp	r3, #0
 8012596:	f000 81f5 	beq.w	8012984 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	2210      	movs	r2, #16
 80125a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125ac:	2b40      	cmp	r3, #64	@ 0x40
 80125ae:	f040 816d 	bne.w	801288c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4aa4      	ldr	r2, [pc, #656]	@ (801284c <HAL_UART_IRQHandler+0x59c>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d068      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4aa1      	ldr	r2, [pc, #644]	@ (8012850 <HAL_UART_IRQHandler+0x5a0>)
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d061      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	4a9f      	ldr	r2, [pc, #636]	@ (8012854 <HAL_UART_IRQHandler+0x5a4>)
 80125d8:	4293      	cmp	r3, r2
 80125da:	d05a      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4a9c      	ldr	r2, [pc, #624]	@ (8012858 <HAL_UART_IRQHandler+0x5a8>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d053      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4a9a      	ldr	r2, [pc, #616]	@ (801285c <HAL_UART_IRQHandler+0x5ac>)
 80125f4:	4293      	cmp	r3, r2
 80125f6:	d04c      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a97      	ldr	r2, [pc, #604]	@ (8012860 <HAL_UART_IRQHandler+0x5b0>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d045      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	4a95      	ldr	r2, [pc, #596]	@ (8012864 <HAL_UART_IRQHandler+0x5b4>)
 8012610:	4293      	cmp	r3, r2
 8012612:	d03e      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a92      	ldr	r2, [pc, #584]	@ (8012868 <HAL_UART_IRQHandler+0x5b8>)
 801261e:	4293      	cmp	r3, r2
 8012620:	d037      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a90      	ldr	r2, [pc, #576]	@ (801286c <HAL_UART_IRQHandler+0x5bc>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d030      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	4a8d      	ldr	r2, [pc, #564]	@ (8012870 <HAL_UART_IRQHandler+0x5c0>)
 801263a:	4293      	cmp	r3, r2
 801263c:	d029      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4a8b      	ldr	r2, [pc, #556]	@ (8012874 <HAL_UART_IRQHandler+0x5c4>)
 8012648:	4293      	cmp	r3, r2
 801264a:	d022      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4a88      	ldr	r2, [pc, #544]	@ (8012878 <HAL_UART_IRQHandler+0x5c8>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d01b      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4a86      	ldr	r2, [pc, #536]	@ (801287c <HAL_UART_IRQHandler+0x5cc>)
 8012664:	4293      	cmp	r3, r2
 8012666:	d014      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4a83      	ldr	r2, [pc, #524]	@ (8012880 <HAL_UART_IRQHandler+0x5d0>)
 8012672:	4293      	cmp	r3, r2
 8012674:	d00d      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4a81      	ldr	r2, [pc, #516]	@ (8012884 <HAL_UART_IRQHandler+0x5d4>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d006      	beq.n	8012692 <HAL_UART_IRQHandler+0x3e2>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	4a7e      	ldr	r2, [pc, #504]	@ (8012888 <HAL_UART_IRQHandler+0x5d8>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d106      	bne.n	80126a0 <HAL_UART_IRQHandler+0x3f0>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	b29b      	uxth	r3, r3
 801269e:	e005      	b.n	80126ac <HAL_UART_IRQHandler+0x3fc>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	b29b      	uxth	r3, r3
 80126ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80126b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f000 80ad 	beq.w	8012814 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80126c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80126c4:	429a      	cmp	r2, r3
 80126c6:	f080 80a5 	bcs.w	8012814 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80126d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126da:	69db      	ldr	r3, [r3, #28]
 80126dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80126e0:	f000 8087 	beq.w	80127f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80126f0:	e853 3f00 	ldrex	r3, [r3]
 80126f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80126f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80126fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	461a      	mov	r2, r3
 801270a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801270e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012712:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012716:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801271a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801271e:	e841 2300 	strex	r3, r2, [r1]
 8012722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012726:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1da      	bne.n	80126e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	3308      	adds	r3, #8
 8012734:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012738:	e853 3f00 	ldrex	r3, [r3]
 801273c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801273e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012740:	f023 0301 	bic.w	r3, r3, #1
 8012744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	3308      	adds	r3, #8
 801274e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012752:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012756:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012758:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801275a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801275e:	e841 2300 	strex	r3, r2, [r1]
 8012762:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012766:	2b00      	cmp	r3, #0
 8012768:	d1e1      	bne.n	801272e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	3308      	adds	r3, #8
 8012770:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012774:	e853 3f00 	ldrex	r3, [r3]
 8012778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801277a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801277c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	3308      	adds	r3, #8
 801278a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801278e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012790:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012792:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012794:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012796:	e841 2300 	strex	r3, r2, [r1]
 801279a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801279c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1e3      	bne.n	801276a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2220      	movs	r2, #32
 80127a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2200      	movs	r2, #0
 80127ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127b8:	e853 3f00 	ldrex	r3, [r3]
 80127bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80127be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127c0:	f023 0310 	bic.w	r3, r3, #16
 80127c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	461a      	mov	r2, r3
 80127ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80127d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80127d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127da:	e841 2300 	strex	r3, r2, [r1]
 80127de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80127e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1e4      	bne.n	80127b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f2 f8cf 	bl	8004990 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2202      	movs	r2, #2
 80127f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012804:	b29b      	uxth	r3, r3
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	b29b      	uxth	r3, r3
 801280a:	4619      	mov	r1, r3
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 f943 	bl	8012a98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012812:	e119      	b.n	8012a48 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801281a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801281e:	429a      	cmp	r2, r3
 8012820:	f040 8112 	bne.w	8012a48 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801282a:	69db      	ldr	r3, [r3, #28]
 801282c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012830:	f040 810a 	bne.w	8012a48 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2202      	movs	r2, #2
 8012838:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012840:	4619      	mov	r1, r3
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 f928 	bl	8012a98 <HAL_UARTEx_RxEventCallback>
      return;
 8012848:	e0fe      	b.n	8012a48 <HAL_UART_IRQHandler+0x798>
 801284a:	bf00      	nop
 801284c:	40020010 	.word	0x40020010
 8012850:	40020028 	.word	0x40020028
 8012854:	40020040 	.word	0x40020040
 8012858:	40020058 	.word	0x40020058
 801285c:	40020070 	.word	0x40020070
 8012860:	40020088 	.word	0x40020088
 8012864:	400200a0 	.word	0x400200a0
 8012868:	400200b8 	.word	0x400200b8
 801286c:	40020410 	.word	0x40020410
 8012870:	40020428 	.word	0x40020428
 8012874:	40020440 	.word	0x40020440
 8012878:	40020458 	.word	0x40020458
 801287c:	40020470 	.word	0x40020470
 8012880:	40020488 	.word	0x40020488
 8012884:	400204a0 	.word	0x400204a0
 8012888:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012898:	b29b      	uxth	r3, r3
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f000 80cf 	beq.w	8012a4c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80128ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 80ca 	beq.w	8012a4c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c0:	e853 3f00 	ldrex	r3, [r3]
 80128c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80128c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80128cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	461a      	mov	r2, r3
 80128d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80128da:	647b      	str	r3, [r7, #68]	@ 0x44
 80128dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80128e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80128e2:	e841 2300 	strex	r3, r2, [r1]
 80128e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80128e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d1e4      	bne.n	80128b8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3308      	adds	r3, #8
 80128f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f8:	e853 3f00 	ldrex	r3, [r3]
 80128fc:	623b      	str	r3, [r7, #32]
   return(result);
 80128fe:	6a3a      	ldr	r2, [r7, #32]
 8012900:	4b55      	ldr	r3, [pc, #340]	@ (8012a58 <HAL_UART_IRQHandler+0x7a8>)
 8012902:	4013      	ands	r3, r2
 8012904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	3308      	adds	r3, #8
 801290e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012912:	633a      	str	r2, [r7, #48]	@ 0x30
 8012914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801291a:	e841 2300 	strex	r3, r2, [r1]
 801291e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1e3      	bne.n	80128ee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2220      	movs	r2, #32
 801292a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2200      	movs	r2, #0
 8012932:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2200      	movs	r2, #0
 8012938:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	e853 3f00 	ldrex	r3, [r3]
 8012946:	60fb      	str	r3, [r7, #12]
   return(result);
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	f023 0310 	bic.w	r3, r3, #16
 801294e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	461a      	mov	r2, r3
 8012958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801295c:	61fb      	str	r3, [r7, #28]
 801295e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012960:	69b9      	ldr	r1, [r7, #24]
 8012962:	69fa      	ldr	r2, [r7, #28]
 8012964:	e841 2300 	strex	r3, r2, [r1]
 8012968:	617b      	str	r3, [r7, #20]
   return(result);
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d1e4      	bne.n	801293a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2202      	movs	r2, #2
 8012974:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801297a:	4619      	mov	r1, r3
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 f88b 	bl	8012a98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012982:	e063      	b.n	8012a4c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801298c:	2b00      	cmp	r3, #0
 801298e:	d00e      	beq.n	80129ae <HAL_UART_IRQHandler+0x6fe>
 8012990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012998:	2b00      	cmp	r3, #0
 801299a:	d008      	beq.n	80129ae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80129a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f001 fa22 	bl	8013df0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80129ac:	e051      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80129ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d014      	beq.n	80129e4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80129ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d105      	bne.n	80129d2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80129c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80129ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d008      	beq.n	80129e4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d03a      	beq.n	8012a50 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	4798      	blx	r3
    }
    return;
 80129e2:	e035      	b.n	8012a50 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80129e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d009      	beq.n	8012a04 <HAL_UART_IRQHandler+0x754>
 80129f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80129f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d003      	beq.n	8012a04 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f001 f9cc 	bl	8013d9a <UART_EndTransmit_IT>
    return;
 8012a02:	e026      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d009      	beq.n	8012a24 <HAL_UART_IRQHandler+0x774>
 8012a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d003      	beq.n	8012a24 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f001 f9fb 	bl	8013e18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a22:	e016      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d010      	beq.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
 8012a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	da0c      	bge.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f001 f9e3 	bl	8013e04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012a3e:	e008      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a40:	bf00      	nop
 8012a42:	e006      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012a44:	bf00      	nop
 8012a46:	e004      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a48:	bf00      	nop
 8012a4a:	e002      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012a4c:	bf00      	nop
 8012a4e:	e000      	b.n	8012a52 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012a50:	bf00      	nop
  }
}
 8012a52:	37e8      	adds	r7, #232	@ 0xe8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	effffffe 	.word	0xeffffffe

08012a5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012a64:	bf00      	nop
 8012a66:	370c      	adds	r7, #12
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr

08012a70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012a70:	b480      	push	{r7}
 8012a72:	b083      	sub	sp, #12
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012a78:	bf00      	nop
 8012a7a:	370c      	adds	r7, #12
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr

08012a84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b083      	sub	sp, #12
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012a8c:	bf00      	nop
 8012a8e:	370c      	adds	r7, #12
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr

08012a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b083      	sub	sp, #12
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	460b      	mov	r3, r1
 8012aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012aa4:	bf00      	nop
 8012aa6:	370c      	adds	r7, #12
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr

08012ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ab4:	b092      	sub	sp, #72	@ 0x48
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012aba:	2300      	movs	r3, #0
 8012abc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	689a      	ldr	r2, [r3, #8]
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	431a      	orrs	r2, r3
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	695b      	ldr	r3, [r3, #20]
 8012ace:	431a      	orrs	r2, r3
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	69db      	ldr	r3, [r3, #28]
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	4bbe      	ldr	r3, [pc, #760]	@ (8012dd8 <UART_SetConfig+0x328>)
 8012ae0:	4013      	ands	r3, r2
 8012ae2:	697a      	ldr	r2, [r7, #20]
 8012ae4:	6812      	ldr	r2, [r2, #0]
 8012ae6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012ae8:	430b      	orrs	r3, r1
 8012aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	68da      	ldr	r2, [r3, #12]
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	430a      	orrs	r2, r1
 8012b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	699b      	ldr	r3, [r3, #24]
 8012b06:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4ab3      	ldr	r2, [pc, #716]	@ (8012ddc <UART_SetConfig+0x32c>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d004      	beq.n	8012b1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	6a1b      	ldr	r3, [r3, #32]
 8012b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	689a      	ldr	r2, [r3, #8]
 8012b22:	4baf      	ldr	r3, [pc, #700]	@ (8012de0 <UART_SetConfig+0x330>)
 8012b24:	4013      	ands	r3, r2
 8012b26:	697a      	ldr	r2, [r7, #20]
 8012b28:	6812      	ldr	r2, [r2, #0]
 8012b2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012b2c:	430b      	orrs	r3, r1
 8012b2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b36:	f023 010f 	bic.w	r1, r3, #15
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	430a      	orrs	r2, r1
 8012b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	4aa6      	ldr	r2, [pc, #664]	@ (8012de4 <UART_SetConfig+0x334>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d177      	bne.n	8012c40 <UART_SetConfig+0x190>
 8012b50:	4ba5      	ldr	r3, [pc, #660]	@ (8012de8 <UART_SetConfig+0x338>)
 8012b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012b58:	2b28      	cmp	r3, #40	@ 0x28
 8012b5a:	d86d      	bhi.n	8012c38 <UART_SetConfig+0x188>
 8012b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8012b64 <UART_SetConfig+0xb4>)
 8012b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b62:	bf00      	nop
 8012b64:	08012c09 	.word	0x08012c09
 8012b68:	08012c39 	.word	0x08012c39
 8012b6c:	08012c39 	.word	0x08012c39
 8012b70:	08012c39 	.word	0x08012c39
 8012b74:	08012c39 	.word	0x08012c39
 8012b78:	08012c39 	.word	0x08012c39
 8012b7c:	08012c39 	.word	0x08012c39
 8012b80:	08012c39 	.word	0x08012c39
 8012b84:	08012c11 	.word	0x08012c11
 8012b88:	08012c39 	.word	0x08012c39
 8012b8c:	08012c39 	.word	0x08012c39
 8012b90:	08012c39 	.word	0x08012c39
 8012b94:	08012c39 	.word	0x08012c39
 8012b98:	08012c39 	.word	0x08012c39
 8012b9c:	08012c39 	.word	0x08012c39
 8012ba0:	08012c39 	.word	0x08012c39
 8012ba4:	08012c19 	.word	0x08012c19
 8012ba8:	08012c39 	.word	0x08012c39
 8012bac:	08012c39 	.word	0x08012c39
 8012bb0:	08012c39 	.word	0x08012c39
 8012bb4:	08012c39 	.word	0x08012c39
 8012bb8:	08012c39 	.word	0x08012c39
 8012bbc:	08012c39 	.word	0x08012c39
 8012bc0:	08012c39 	.word	0x08012c39
 8012bc4:	08012c21 	.word	0x08012c21
 8012bc8:	08012c39 	.word	0x08012c39
 8012bcc:	08012c39 	.word	0x08012c39
 8012bd0:	08012c39 	.word	0x08012c39
 8012bd4:	08012c39 	.word	0x08012c39
 8012bd8:	08012c39 	.word	0x08012c39
 8012bdc:	08012c39 	.word	0x08012c39
 8012be0:	08012c39 	.word	0x08012c39
 8012be4:	08012c29 	.word	0x08012c29
 8012be8:	08012c39 	.word	0x08012c39
 8012bec:	08012c39 	.word	0x08012c39
 8012bf0:	08012c39 	.word	0x08012c39
 8012bf4:	08012c39 	.word	0x08012c39
 8012bf8:	08012c39 	.word	0x08012c39
 8012bfc:	08012c39 	.word	0x08012c39
 8012c00:	08012c39 	.word	0x08012c39
 8012c04:	08012c31 	.word	0x08012c31
 8012c08:	2301      	movs	r3, #1
 8012c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c0e:	e222      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c10:	2304      	movs	r3, #4
 8012c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c16:	e21e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c18:	2308      	movs	r3, #8
 8012c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c1e:	e21a      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c20:	2310      	movs	r3, #16
 8012c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c26:	e216      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c28:	2320      	movs	r3, #32
 8012c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c2e:	e212      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c30:	2340      	movs	r3, #64	@ 0x40
 8012c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c36:	e20e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c38:	2380      	movs	r3, #128	@ 0x80
 8012c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c3e:	e20a      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a69      	ldr	r2, [pc, #420]	@ (8012dec <UART_SetConfig+0x33c>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d130      	bne.n	8012cac <UART_SetConfig+0x1fc>
 8012c4a:	4b67      	ldr	r3, [pc, #412]	@ (8012de8 <UART_SetConfig+0x338>)
 8012c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c4e:	f003 0307 	and.w	r3, r3, #7
 8012c52:	2b05      	cmp	r3, #5
 8012c54:	d826      	bhi.n	8012ca4 <UART_SetConfig+0x1f4>
 8012c56:	a201      	add	r2, pc, #4	@ (adr r2, 8012c5c <UART_SetConfig+0x1ac>)
 8012c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c5c:	08012c75 	.word	0x08012c75
 8012c60:	08012c7d 	.word	0x08012c7d
 8012c64:	08012c85 	.word	0x08012c85
 8012c68:	08012c8d 	.word	0x08012c8d
 8012c6c:	08012c95 	.word	0x08012c95
 8012c70:	08012c9d 	.word	0x08012c9d
 8012c74:	2300      	movs	r3, #0
 8012c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c7a:	e1ec      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c7c:	2304      	movs	r3, #4
 8012c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c82:	e1e8      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c84:	2308      	movs	r3, #8
 8012c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c8a:	e1e4      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c8c:	2310      	movs	r3, #16
 8012c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c92:	e1e0      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c94:	2320      	movs	r3, #32
 8012c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012c9a:	e1dc      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012c9c:	2340      	movs	r3, #64	@ 0x40
 8012c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ca2:	e1d8      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012ca4:	2380      	movs	r3, #128	@ 0x80
 8012ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012caa:	e1d4      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8012df0 <UART_SetConfig+0x340>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d130      	bne.n	8012d18 <UART_SetConfig+0x268>
 8012cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8012de8 <UART_SetConfig+0x338>)
 8012cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cba:	f003 0307 	and.w	r3, r3, #7
 8012cbe:	2b05      	cmp	r3, #5
 8012cc0:	d826      	bhi.n	8012d10 <UART_SetConfig+0x260>
 8012cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8012cc8 <UART_SetConfig+0x218>)
 8012cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc8:	08012ce1 	.word	0x08012ce1
 8012ccc:	08012ce9 	.word	0x08012ce9
 8012cd0:	08012cf1 	.word	0x08012cf1
 8012cd4:	08012cf9 	.word	0x08012cf9
 8012cd8:	08012d01 	.word	0x08012d01
 8012cdc:	08012d09 	.word	0x08012d09
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ce6:	e1b6      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012ce8:	2304      	movs	r3, #4
 8012cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cee:	e1b2      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012cf0:	2308      	movs	r3, #8
 8012cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cf6:	e1ae      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012cf8:	2310      	movs	r3, #16
 8012cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cfe:	e1aa      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d00:	2320      	movs	r3, #32
 8012d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d06:	e1a6      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d08:	2340      	movs	r3, #64	@ 0x40
 8012d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d0e:	e1a2      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d10:	2380      	movs	r3, #128	@ 0x80
 8012d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d16:	e19e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4a35      	ldr	r2, [pc, #212]	@ (8012df4 <UART_SetConfig+0x344>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d130      	bne.n	8012d84 <UART_SetConfig+0x2d4>
 8012d22:	4b31      	ldr	r3, [pc, #196]	@ (8012de8 <UART_SetConfig+0x338>)
 8012d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d26:	f003 0307 	and.w	r3, r3, #7
 8012d2a:	2b05      	cmp	r3, #5
 8012d2c:	d826      	bhi.n	8012d7c <UART_SetConfig+0x2cc>
 8012d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8012d34 <UART_SetConfig+0x284>)
 8012d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d34:	08012d4d 	.word	0x08012d4d
 8012d38:	08012d55 	.word	0x08012d55
 8012d3c:	08012d5d 	.word	0x08012d5d
 8012d40:	08012d65 	.word	0x08012d65
 8012d44:	08012d6d 	.word	0x08012d6d
 8012d48:	08012d75 	.word	0x08012d75
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d52:	e180      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d54:	2304      	movs	r3, #4
 8012d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d5a:	e17c      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d5c:	2308      	movs	r3, #8
 8012d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d62:	e178      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d64:	2310      	movs	r3, #16
 8012d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d6a:	e174      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d6c:	2320      	movs	r3, #32
 8012d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d72:	e170      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d74:	2340      	movs	r3, #64	@ 0x40
 8012d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d7a:	e16c      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d7c:	2380      	movs	r3, #128	@ 0x80
 8012d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012d82:	e168      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a1b      	ldr	r2, [pc, #108]	@ (8012df8 <UART_SetConfig+0x348>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d142      	bne.n	8012e14 <UART_SetConfig+0x364>
 8012d8e:	4b16      	ldr	r3, [pc, #88]	@ (8012de8 <UART_SetConfig+0x338>)
 8012d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d92:	f003 0307 	and.w	r3, r3, #7
 8012d96:	2b05      	cmp	r3, #5
 8012d98:	d838      	bhi.n	8012e0c <UART_SetConfig+0x35c>
 8012d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8012da0 <UART_SetConfig+0x2f0>)
 8012d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012da0:	08012db9 	.word	0x08012db9
 8012da4:	08012dc1 	.word	0x08012dc1
 8012da8:	08012dc9 	.word	0x08012dc9
 8012dac:	08012dd1 	.word	0x08012dd1
 8012db0:	08012dfd 	.word	0x08012dfd
 8012db4:	08012e05 	.word	0x08012e05
 8012db8:	2300      	movs	r3, #0
 8012dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dbe:	e14a      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012dc0:	2304      	movs	r3, #4
 8012dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dc6:	e146      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012dc8:	2308      	movs	r3, #8
 8012dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dce:	e142      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012dd0:	2310      	movs	r3, #16
 8012dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dd6:	e13e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012dd8:	cfff69f3 	.word	0xcfff69f3
 8012ddc:	58000c00 	.word	0x58000c00
 8012de0:	11fff4ff 	.word	0x11fff4ff
 8012de4:	40011000 	.word	0x40011000
 8012de8:	58024400 	.word	0x58024400
 8012dec:	40004400 	.word	0x40004400
 8012df0:	40004800 	.word	0x40004800
 8012df4:	40004c00 	.word	0x40004c00
 8012df8:	40005000 	.word	0x40005000
 8012dfc:	2320      	movs	r3, #32
 8012dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e02:	e128      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012e04:	2340      	movs	r3, #64	@ 0x40
 8012e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e0a:	e124      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012e0c:	2380      	movs	r3, #128	@ 0x80
 8012e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e12:	e120      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4acb      	ldr	r2, [pc, #812]	@ (8013148 <UART_SetConfig+0x698>)
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d176      	bne.n	8012f0c <UART_SetConfig+0x45c>
 8012e1e:	4bcb      	ldr	r3, [pc, #812]	@ (801314c <UART_SetConfig+0x69c>)
 8012e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012e26:	2b28      	cmp	r3, #40	@ 0x28
 8012e28:	d86c      	bhi.n	8012f04 <UART_SetConfig+0x454>
 8012e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8012e30 <UART_SetConfig+0x380>)
 8012e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e30:	08012ed5 	.word	0x08012ed5
 8012e34:	08012f05 	.word	0x08012f05
 8012e38:	08012f05 	.word	0x08012f05
 8012e3c:	08012f05 	.word	0x08012f05
 8012e40:	08012f05 	.word	0x08012f05
 8012e44:	08012f05 	.word	0x08012f05
 8012e48:	08012f05 	.word	0x08012f05
 8012e4c:	08012f05 	.word	0x08012f05
 8012e50:	08012edd 	.word	0x08012edd
 8012e54:	08012f05 	.word	0x08012f05
 8012e58:	08012f05 	.word	0x08012f05
 8012e5c:	08012f05 	.word	0x08012f05
 8012e60:	08012f05 	.word	0x08012f05
 8012e64:	08012f05 	.word	0x08012f05
 8012e68:	08012f05 	.word	0x08012f05
 8012e6c:	08012f05 	.word	0x08012f05
 8012e70:	08012ee5 	.word	0x08012ee5
 8012e74:	08012f05 	.word	0x08012f05
 8012e78:	08012f05 	.word	0x08012f05
 8012e7c:	08012f05 	.word	0x08012f05
 8012e80:	08012f05 	.word	0x08012f05
 8012e84:	08012f05 	.word	0x08012f05
 8012e88:	08012f05 	.word	0x08012f05
 8012e8c:	08012f05 	.word	0x08012f05
 8012e90:	08012eed 	.word	0x08012eed
 8012e94:	08012f05 	.word	0x08012f05
 8012e98:	08012f05 	.word	0x08012f05
 8012e9c:	08012f05 	.word	0x08012f05
 8012ea0:	08012f05 	.word	0x08012f05
 8012ea4:	08012f05 	.word	0x08012f05
 8012ea8:	08012f05 	.word	0x08012f05
 8012eac:	08012f05 	.word	0x08012f05
 8012eb0:	08012ef5 	.word	0x08012ef5
 8012eb4:	08012f05 	.word	0x08012f05
 8012eb8:	08012f05 	.word	0x08012f05
 8012ebc:	08012f05 	.word	0x08012f05
 8012ec0:	08012f05 	.word	0x08012f05
 8012ec4:	08012f05 	.word	0x08012f05
 8012ec8:	08012f05 	.word	0x08012f05
 8012ecc:	08012f05 	.word	0x08012f05
 8012ed0:	08012efd 	.word	0x08012efd
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eda:	e0bc      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012edc:	2304      	movs	r3, #4
 8012ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ee2:	e0b8      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012ee4:	2308      	movs	r3, #8
 8012ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eea:	e0b4      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012eec:	2310      	movs	r3, #16
 8012eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ef2:	e0b0      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012ef4:	2320      	movs	r3, #32
 8012ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012efa:	e0ac      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012efc:	2340      	movs	r3, #64	@ 0x40
 8012efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f02:	e0a8      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f04:	2380      	movs	r3, #128	@ 0x80
 8012f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f0a:	e0a4      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	4a8f      	ldr	r2, [pc, #572]	@ (8013150 <UART_SetConfig+0x6a0>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d130      	bne.n	8012f78 <UART_SetConfig+0x4c8>
 8012f16:	4b8d      	ldr	r3, [pc, #564]	@ (801314c <UART_SetConfig+0x69c>)
 8012f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f1a:	f003 0307 	and.w	r3, r3, #7
 8012f1e:	2b05      	cmp	r3, #5
 8012f20:	d826      	bhi.n	8012f70 <UART_SetConfig+0x4c0>
 8012f22:	a201      	add	r2, pc, #4	@ (adr r2, 8012f28 <UART_SetConfig+0x478>)
 8012f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f28:	08012f41 	.word	0x08012f41
 8012f2c:	08012f49 	.word	0x08012f49
 8012f30:	08012f51 	.word	0x08012f51
 8012f34:	08012f59 	.word	0x08012f59
 8012f38:	08012f61 	.word	0x08012f61
 8012f3c:	08012f69 	.word	0x08012f69
 8012f40:	2300      	movs	r3, #0
 8012f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f46:	e086      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f48:	2304      	movs	r3, #4
 8012f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f4e:	e082      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f50:	2308      	movs	r3, #8
 8012f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f56:	e07e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f58:	2310      	movs	r3, #16
 8012f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f5e:	e07a      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f60:	2320      	movs	r3, #32
 8012f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f66:	e076      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f68:	2340      	movs	r3, #64	@ 0x40
 8012f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6e:	e072      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f70:	2380      	movs	r3, #128	@ 0x80
 8012f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f76:	e06e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4a75      	ldr	r2, [pc, #468]	@ (8013154 <UART_SetConfig+0x6a4>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d130      	bne.n	8012fe4 <UART_SetConfig+0x534>
 8012f82:	4b72      	ldr	r3, [pc, #456]	@ (801314c <UART_SetConfig+0x69c>)
 8012f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f86:	f003 0307 	and.w	r3, r3, #7
 8012f8a:	2b05      	cmp	r3, #5
 8012f8c:	d826      	bhi.n	8012fdc <UART_SetConfig+0x52c>
 8012f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f94 <UART_SetConfig+0x4e4>)
 8012f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f94:	08012fad 	.word	0x08012fad
 8012f98:	08012fb5 	.word	0x08012fb5
 8012f9c:	08012fbd 	.word	0x08012fbd
 8012fa0:	08012fc5 	.word	0x08012fc5
 8012fa4:	08012fcd 	.word	0x08012fcd
 8012fa8:	08012fd5 	.word	0x08012fd5
 8012fac:	2300      	movs	r3, #0
 8012fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb2:	e050      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fb4:	2304      	movs	r3, #4
 8012fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fba:	e04c      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fbc:	2308      	movs	r3, #8
 8012fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fc2:	e048      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fc4:	2310      	movs	r3, #16
 8012fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fca:	e044      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fcc:	2320      	movs	r3, #32
 8012fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fd2:	e040      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fd4:	2340      	movs	r3, #64	@ 0x40
 8012fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fda:	e03c      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fdc:	2380      	movs	r3, #128	@ 0x80
 8012fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fe2:	e038      	b.n	8013056 <UART_SetConfig+0x5a6>
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8013158 <UART_SetConfig+0x6a8>)
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d130      	bne.n	8013050 <UART_SetConfig+0x5a0>
 8012fee:	4b57      	ldr	r3, [pc, #348]	@ (801314c <UART_SetConfig+0x69c>)
 8012ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ff2:	f003 0307 	and.w	r3, r3, #7
 8012ff6:	2b05      	cmp	r3, #5
 8012ff8:	d826      	bhi.n	8013048 <UART_SetConfig+0x598>
 8012ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8013000 <UART_SetConfig+0x550>)
 8012ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013000:	08013019 	.word	0x08013019
 8013004:	08013021 	.word	0x08013021
 8013008:	08013029 	.word	0x08013029
 801300c:	08013031 	.word	0x08013031
 8013010:	08013039 	.word	0x08013039
 8013014:	08013041 	.word	0x08013041
 8013018:	2302      	movs	r3, #2
 801301a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801301e:	e01a      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013020:	2304      	movs	r3, #4
 8013022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013026:	e016      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013028:	2308      	movs	r3, #8
 801302a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801302e:	e012      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013030:	2310      	movs	r3, #16
 8013032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013036:	e00e      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013038:	2320      	movs	r3, #32
 801303a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801303e:	e00a      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013040:	2340      	movs	r3, #64	@ 0x40
 8013042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013046:	e006      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013048:	2380      	movs	r3, #128	@ 0x80
 801304a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801304e:	e002      	b.n	8013056 <UART_SetConfig+0x5a6>
 8013050:	2380      	movs	r3, #128	@ 0x80
 8013052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4a3f      	ldr	r2, [pc, #252]	@ (8013158 <UART_SetConfig+0x6a8>)
 801305c:	4293      	cmp	r3, r2
 801305e:	f040 80f8 	bne.w	8013252 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013062:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013066:	2b20      	cmp	r3, #32
 8013068:	dc46      	bgt.n	80130f8 <UART_SetConfig+0x648>
 801306a:	2b02      	cmp	r3, #2
 801306c:	f2c0 8082 	blt.w	8013174 <UART_SetConfig+0x6c4>
 8013070:	3b02      	subs	r3, #2
 8013072:	2b1e      	cmp	r3, #30
 8013074:	d87e      	bhi.n	8013174 <UART_SetConfig+0x6c4>
 8013076:	a201      	add	r2, pc, #4	@ (adr r2, 801307c <UART_SetConfig+0x5cc>)
 8013078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801307c:	080130ff 	.word	0x080130ff
 8013080:	08013175 	.word	0x08013175
 8013084:	08013107 	.word	0x08013107
 8013088:	08013175 	.word	0x08013175
 801308c:	08013175 	.word	0x08013175
 8013090:	08013175 	.word	0x08013175
 8013094:	08013117 	.word	0x08013117
 8013098:	08013175 	.word	0x08013175
 801309c:	08013175 	.word	0x08013175
 80130a0:	08013175 	.word	0x08013175
 80130a4:	08013175 	.word	0x08013175
 80130a8:	08013175 	.word	0x08013175
 80130ac:	08013175 	.word	0x08013175
 80130b0:	08013175 	.word	0x08013175
 80130b4:	08013127 	.word	0x08013127
 80130b8:	08013175 	.word	0x08013175
 80130bc:	08013175 	.word	0x08013175
 80130c0:	08013175 	.word	0x08013175
 80130c4:	08013175 	.word	0x08013175
 80130c8:	08013175 	.word	0x08013175
 80130cc:	08013175 	.word	0x08013175
 80130d0:	08013175 	.word	0x08013175
 80130d4:	08013175 	.word	0x08013175
 80130d8:	08013175 	.word	0x08013175
 80130dc:	08013175 	.word	0x08013175
 80130e0:	08013175 	.word	0x08013175
 80130e4:	08013175 	.word	0x08013175
 80130e8:	08013175 	.word	0x08013175
 80130ec:	08013175 	.word	0x08013175
 80130f0:	08013175 	.word	0x08013175
 80130f4:	08013167 	.word	0x08013167
 80130f8:	2b40      	cmp	r3, #64	@ 0x40
 80130fa:	d037      	beq.n	801316c <UART_SetConfig+0x6bc>
 80130fc:	e03a      	b.n	8013174 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80130fe:	f7fc fa3f 	bl	800f580 <HAL_RCCEx_GetD3PCLK1Freq>
 8013102:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013104:	e03c      	b.n	8013180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801310a:	4618      	mov	r0, r3
 801310c:	f7fc fa4e 	bl	800f5ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013114:	e034      	b.n	8013180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013116:	f107 0318 	add.w	r3, r7, #24
 801311a:	4618      	mov	r0, r3
 801311c:	f7fc fb9a 	bl	800f854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013124:	e02c      	b.n	8013180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013126:	4b09      	ldr	r3, [pc, #36]	@ (801314c <UART_SetConfig+0x69c>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f003 0320 	and.w	r3, r3, #32
 801312e:	2b00      	cmp	r3, #0
 8013130:	d016      	beq.n	8013160 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013132:	4b06      	ldr	r3, [pc, #24]	@ (801314c <UART_SetConfig+0x69c>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	08db      	lsrs	r3, r3, #3
 8013138:	f003 0303 	and.w	r3, r3, #3
 801313c:	4a07      	ldr	r2, [pc, #28]	@ (801315c <UART_SetConfig+0x6ac>)
 801313e:	fa22 f303 	lsr.w	r3, r2, r3
 8013142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013144:	e01c      	b.n	8013180 <UART_SetConfig+0x6d0>
 8013146:	bf00      	nop
 8013148:	40011400 	.word	0x40011400
 801314c:	58024400 	.word	0x58024400
 8013150:	40007800 	.word	0x40007800
 8013154:	40007c00 	.word	0x40007c00
 8013158:	58000c00 	.word	0x58000c00
 801315c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013160:	4b9d      	ldr	r3, [pc, #628]	@ (80133d8 <UART_SetConfig+0x928>)
 8013162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013164:	e00c      	b.n	8013180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013166:	4b9d      	ldr	r3, [pc, #628]	@ (80133dc <UART_SetConfig+0x92c>)
 8013168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801316a:	e009      	b.n	8013180 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801316c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013172:	e005      	b.n	8013180 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013174:	2300      	movs	r3, #0
 8013176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013178:	2301      	movs	r3, #1
 801317a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801317e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 81de 	beq.w	8013544 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801318c:	4a94      	ldr	r2, [pc, #592]	@ (80133e0 <UART_SetConfig+0x930>)
 801318e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013192:	461a      	mov	r2, r3
 8013194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013196:	fbb3 f3f2 	udiv	r3, r3, r2
 801319a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	685a      	ldr	r2, [r3, #4]
 80131a0:	4613      	mov	r3, r2
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	4413      	add	r3, r2
 80131a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d305      	bcc.n	80131b8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80131b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d903      	bls.n	80131c0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80131b8:	2301      	movs	r3, #1
 80131ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80131be:	e1c1      	b.n	8013544 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131c2:	2200      	movs	r2, #0
 80131c4:	60bb      	str	r3, [r7, #8]
 80131c6:	60fa      	str	r2, [r7, #12]
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131cc:	4a84      	ldr	r2, [pc, #528]	@ (80133e0 <UART_SetConfig+0x930>)
 80131ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	2200      	movs	r2, #0
 80131d6:	603b      	str	r3, [r7, #0]
 80131d8:	607a      	str	r2, [r7, #4]
 80131da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80131e2:	f7ed f8d5 	bl	8000390 <__aeabi_uldivmod>
 80131e6:	4602      	mov	r2, r0
 80131e8:	460b      	mov	r3, r1
 80131ea:	4610      	mov	r0, r2
 80131ec:	4619      	mov	r1, r3
 80131ee:	f04f 0200 	mov.w	r2, #0
 80131f2:	f04f 0300 	mov.w	r3, #0
 80131f6:	020b      	lsls	r3, r1, #8
 80131f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80131fc:	0202      	lsls	r2, r0, #8
 80131fe:	6979      	ldr	r1, [r7, #20]
 8013200:	6849      	ldr	r1, [r1, #4]
 8013202:	0849      	lsrs	r1, r1, #1
 8013204:	2000      	movs	r0, #0
 8013206:	460c      	mov	r4, r1
 8013208:	4605      	mov	r5, r0
 801320a:	eb12 0804 	adds.w	r8, r2, r4
 801320e:	eb43 0905 	adc.w	r9, r3, r5
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	469a      	mov	sl, r3
 801321a:	4693      	mov	fp, r2
 801321c:	4652      	mov	r2, sl
 801321e:	465b      	mov	r3, fp
 8013220:	4640      	mov	r0, r8
 8013222:	4649      	mov	r1, r9
 8013224:	f7ed f8b4 	bl	8000390 <__aeabi_uldivmod>
 8013228:	4602      	mov	r2, r0
 801322a:	460b      	mov	r3, r1
 801322c:	4613      	mov	r3, r2
 801322e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013236:	d308      	bcc.n	801324a <UART_SetConfig+0x79a>
 8013238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801323e:	d204      	bcs.n	801324a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013246:	60da      	str	r2, [r3, #12]
 8013248:	e17c      	b.n	8013544 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801324a:	2301      	movs	r3, #1
 801324c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013250:	e178      	b.n	8013544 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	69db      	ldr	r3, [r3, #28]
 8013256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801325a:	f040 80c5 	bne.w	80133e8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801325e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013262:	2b20      	cmp	r3, #32
 8013264:	dc48      	bgt.n	80132f8 <UART_SetConfig+0x848>
 8013266:	2b00      	cmp	r3, #0
 8013268:	db7b      	blt.n	8013362 <UART_SetConfig+0x8b2>
 801326a:	2b20      	cmp	r3, #32
 801326c:	d879      	bhi.n	8013362 <UART_SetConfig+0x8b2>
 801326e:	a201      	add	r2, pc, #4	@ (adr r2, 8013274 <UART_SetConfig+0x7c4>)
 8013270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013274:	080132ff 	.word	0x080132ff
 8013278:	08013307 	.word	0x08013307
 801327c:	08013363 	.word	0x08013363
 8013280:	08013363 	.word	0x08013363
 8013284:	0801330f 	.word	0x0801330f
 8013288:	08013363 	.word	0x08013363
 801328c:	08013363 	.word	0x08013363
 8013290:	08013363 	.word	0x08013363
 8013294:	0801331f 	.word	0x0801331f
 8013298:	08013363 	.word	0x08013363
 801329c:	08013363 	.word	0x08013363
 80132a0:	08013363 	.word	0x08013363
 80132a4:	08013363 	.word	0x08013363
 80132a8:	08013363 	.word	0x08013363
 80132ac:	08013363 	.word	0x08013363
 80132b0:	08013363 	.word	0x08013363
 80132b4:	0801332f 	.word	0x0801332f
 80132b8:	08013363 	.word	0x08013363
 80132bc:	08013363 	.word	0x08013363
 80132c0:	08013363 	.word	0x08013363
 80132c4:	08013363 	.word	0x08013363
 80132c8:	08013363 	.word	0x08013363
 80132cc:	08013363 	.word	0x08013363
 80132d0:	08013363 	.word	0x08013363
 80132d4:	08013363 	.word	0x08013363
 80132d8:	08013363 	.word	0x08013363
 80132dc:	08013363 	.word	0x08013363
 80132e0:	08013363 	.word	0x08013363
 80132e4:	08013363 	.word	0x08013363
 80132e8:	08013363 	.word	0x08013363
 80132ec:	08013363 	.word	0x08013363
 80132f0:	08013363 	.word	0x08013363
 80132f4:	08013355 	.word	0x08013355
 80132f8:	2b40      	cmp	r3, #64	@ 0x40
 80132fa:	d02e      	beq.n	801335a <UART_SetConfig+0x8aa>
 80132fc:	e031      	b.n	8013362 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80132fe:	f7fa ff09 	bl	800e114 <HAL_RCC_GetPCLK1Freq>
 8013302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013304:	e033      	b.n	801336e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013306:	f7fa ff1b 	bl	800e140 <HAL_RCC_GetPCLK2Freq>
 801330a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801330c:	e02f      	b.n	801336e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801330e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013312:	4618      	mov	r0, r3
 8013314:	f7fc f94a 	bl	800f5ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801331c:	e027      	b.n	801336e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801331e:	f107 0318 	add.w	r3, r7, #24
 8013322:	4618      	mov	r0, r3
 8013324:	f7fc fa96 	bl	800f854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801332c:	e01f      	b.n	801336e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801332e:	4b2d      	ldr	r3, [pc, #180]	@ (80133e4 <UART_SetConfig+0x934>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f003 0320 	and.w	r3, r3, #32
 8013336:	2b00      	cmp	r3, #0
 8013338:	d009      	beq.n	801334e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801333a:	4b2a      	ldr	r3, [pc, #168]	@ (80133e4 <UART_SetConfig+0x934>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	08db      	lsrs	r3, r3, #3
 8013340:	f003 0303 	and.w	r3, r3, #3
 8013344:	4a24      	ldr	r2, [pc, #144]	@ (80133d8 <UART_SetConfig+0x928>)
 8013346:	fa22 f303 	lsr.w	r3, r2, r3
 801334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801334c:	e00f      	b.n	801336e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801334e:	4b22      	ldr	r3, [pc, #136]	@ (80133d8 <UART_SetConfig+0x928>)
 8013350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013352:	e00c      	b.n	801336e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013354:	4b21      	ldr	r3, [pc, #132]	@ (80133dc <UART_SetConfig+0x92c>)
 8013356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013358:	e009      	b.n	801336e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801335a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013360:	e005      	b.n	801336e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013362:	2300      	movs	r3, #0
 8013364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013366:	2301      	movs	r3, #1
 8013368:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801336c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013370:	2b00      	cmp	r3, #0
 8013372:	f000 80e7 	beq.w	8013544 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801337a:	4a19      	ldr	r2, [pc, #100]	@ (80133e0 <UART_SetConfig+0x930>)
 801337c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013380:	461a      	mov	r2, r3
 8013382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013384:	fbb3 f3f2 	udiv	r3, r3, r2
 8013388:	005a      	lsls	r2, r3, #1
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	085b      	lsrs	r3, r3, #1
 8013390:	441a      	add	r2, r3
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	685b      	ldr	r3, [r3, #4]
 8013396:	fbb2 f3f3 	udiv	r3, r2, r3
 801339a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339e:	2b0f      	cmp	r3, #15
 80133a0:	d916      	bls.n	80133d0 <UART_SetConfig+0x920>
 80133a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133a8:	d212      	bcs.n	80133d0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80133aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	f023 030f 	bic.w	r3, r3, #15
 80133b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80133b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b6:	085b      	lsrs	r3, r3, #1
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	f003 0307 	and.w	r3, r3, #7
 80133be:	b29a      	uxth	r2, r3
 80133c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80133c2:	4313      	orrs	r3, r2
 80133c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80133cc:	60da      	str	r2, [r3, #12]
 80133ce:	e0b9      	b.n	8013544 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80133d0:	2301      	movs	r3, #1
 80133d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80133d6:	e0b5      	b.n	8013544 <UART_SetConfig+0xa94>
 80133d8:	03d09000 	.word	0x03d09000
 80133dc:	003d0900 	.word	0x003d0900
 80133e0:	0801b678 	.word	0x0801b678
 80133e4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80133e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80133ec:	2b20      	cmp	r3, #32
 80133ee:	dc49      	bgt.n	8013484 <UART_SetConfig+0x9d4>
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	db7c      	blt.n	80134ee <UART_SetConfig+0xa3e>
 80133f4:	2b20      	cmp	r3, #32
 80133f6:	d87a      	bhi.n	80134ee <UART_SetConfig+0xa3e>
 80133f8:	a201      	add	r2, pc, #4	@ (adr r2, 8013400 <UART_SetConfig+0x950>)
 80133fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133fe:	bf00      	nop
 8013400:	0801348b 	.word	0x0801348b
 8013404:	08013493 	.word	0x08013493
 8013408:	080134ef 	.word	0x080134ef
 801340c:	080134ef 	.word	0x080134ef
 8013410:	0801349b 	.word	0x0801349b
 8013414:	080134ef 	.word	0x080134ef
 8013418:	080134ef 	.word	0x080134ef
 801341c:	080134ef 	.word	0x080134ef
 8013420:	080134ab 	.word	0x080134ab
 8013424:	080134ef 	.word	0x080134ef
 8013428:	080134ef 	.word	0x080134ef
 801342c:	080134ef 	.word	0x080134ef
 8013430:	080134ef 	.word	0x080134ef
 8013434:	080134ef 	.word	0x080134ef
 8013438:	080134ef 	.word	0x080134ef
 801343c:	080134ef 	.word	0x080134ef
 8013440:	080134bb 	.word	0x080134bb
 8013444:	080134ef 	.word	0x080134ef
 8013448:	080134ef 	.word	0x080134ef
 801344c:	080134ef 	.word	0x080134ef
 8013450:	080134ef 	.word	0x080134ef
 8013454:	080134ef 	.word	0x080134ef
 8013458:	080134ef 	.word	0x080134ef
 801345c:	080134ef 	.word	0x080134ef
 8013460:	080134ef 	.word	0x080134ef
 8013464:	080134ef 	.word	0x080134ef
 8013468:	080134ef 	.word	0x080134ef
 801346c:	080134ef 	.word	0x080134ef
 8013470:	080134ef 	.word	0x080134ef
 8013474:	080134ef 	.word	0x080134ef
 8013478:	080134ef 	.word	0x080134ef
 801347c:	080134ef 	.word	0x080134ef
 8013480:	080134e1 	.word	0x080134e1
 8013484:	2b40      	cmp	r3, #64	@ 0x40
 8013486:	d02e      	beq.n	80134e6 <UART_SetConfig+0xa36>
 8013488:	e031      	b.n	80134ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801348a:	f7fa fe43 	bl	800e114 <HAL_RCC_GetPCLK1Freq>
 801348e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013490:	e033      	b.n	80134fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013492:	f7fa fe55 	bl	800e140 <HAL_RCC_GetPCLK2Freq>
 8013496:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013498:	e02f      	b.n	80134fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801349a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fc f884 	bl	800f5ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80134a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134a8:	e027      	b.n	80134fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134aa:	f107 0318 	add.w	r3, r7, #24
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fc f9d0 	bl	800f854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80134b4:	69fb      	ldr	r3, [r7, #28]
 80134b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134b8:	e01f      	b.n	80134fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80134ba:	4b2d      	ldr	r3, [pc, #180]	@ (8013570 <UART_SetConfig+0xac0>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f003 0320 	and.w	r3, r3, #32
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d009      	beq.n	80134da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80134c6:	4b2a      	ldr	r3, [pc, #168]	@ (8013570 <UART_SetConfig+0xac0>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	08db      	lsrs	r3, r3, #3
 80134cc:	f003 0303 	and.w	r3, r3, #3
 80134d0:	4a28      	ldr	r2, [pc, #160]	@ (8013574 <UART_SetConfig+0xac4>)
 80134d2:	fa22 f303 	lsr.w	r3, r2, r3
 80134d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80134d8:	e00f      	b.n	80134fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80134da:	4b26      	ldr	r3, [pc, #152]	@ (8013574 <UART_SetConfig+0xac4>)
 80134dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134de:	e00c      	b.n	80134fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80134e0:	4b25      	ldr	r3, [pc, #148]	@ (8013578 <UART_SetConfig+0xac8>)
 80134e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134e4:	e009      	b.n	80134fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80134e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80134ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134ec:	e005      	b.n	80134fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80134ee:	2300      	movs	r3, #0
 80134f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80134f2:	2301      	movs	r3, #1
 80134f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80134f8:	bf00      	nop
    }

    if (pclk != 0U)
 80134fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d021      	beq.n	8013544 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013504:	4a1d      	ldr	r2, [pc, #116]	@ (801357c <UART_SetConfig+0xacc>)
 8013506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801350a:	461a      	mov	r2, r3
 801350c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801350e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	085b      	lsrs	r3, r3, #1
 8013518:	441a      	add	r2, r3
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013522:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013526:	2b0f      	cmp	r3, #15
 8013528:	d909      	bls.n	801353e <UART_SetConfig+0xa8e>
 801352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801352c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013530:	d205      	bcs.n	801353e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013534:	b29a      	uxth	r2, r3
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	60da      	str	r2, [r3, #12]
 801353c:	e002      	b.n	8013544 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801353e:	2301      	movs	r3, #1
 8013540:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	2201      	movs	r2, #1
 8013548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	2201      	movs	r2, #1
 8013550:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	2200      	movs	r2, #0
 8013558:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	2200      	movs	r2, #0
 801355e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013560:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013564:	4618      	mov	r0, r3
 8013566:	3748      	adds	r7, #72	@ 0x48
 8013568:	46bd      	mov	sp, r7
 801356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801356e:	bf00      	nop
 8013570:	58024400 	.word	0x58024400
 8013574:	03d09000 	.word	0x03d09000
 8013578:	003d0900 	.word	0x003d0900
 801357c:	0801b678 	.word	0x0801b678

08013580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013580:	b480      	push	{r7}
 8013582:	b083      	sub	sp, #12
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801358c:	f003 0308 	and.w	r3, r3, #8
 8013590:	2b00      	cmp	r3, #0
 8013592:	d00a      	beq.n	80135aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	430a      	orrs	r2, r1
 80135a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135ae:	f003 0301 	and.w	r3, r3, #1
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d00a      	beq.n	80135cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	430a      	orrs	r2, r1
 80135ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135d0:	f003 0302 	and.w	r3, r3, #2
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d00a      	beq.n	80135ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	430a      	orrs	r2, r1
 80135ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135f2:	f003 0304 	and.w	r3, r3, #4
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00a      	beq.n	8013610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	430a      	orrs	r2, r1
 801360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013614:	f003 0310 	and.w	r3, r3, #16
 8013618:	2b00      	cmp	r3, #0
 801361a:	d00a      	beq.n	8013632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	430a      	orrs	r2, r1
 8013630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013636:	f003 0320 	and.w	r3, r3, #32
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00a      	beq.n	8013654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	689b      	ldr	r3, [r3, #8]
 8013644:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	430a      	orrs	r2, r1
 8013652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801365c:	2b00      	cmp	r3, #0
 801365e:	d01a      	beq.n	8013696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	430a      	orrs	r2, r1
 8013674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801367a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801367e:	d10a      	bne.n	8013696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	430a      	orrs	r2, r1
 8013694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d00a      	beq.n	80136b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	430a      	orrs	r2, r1
 80136b6:	605a      	str	r2, [r3, #4]
  }
}
 80136b8:	bf00      	nop
 80136ba:	370c      	adds	r7, #12
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b098      	sub	sp, #96	@ 0x60
 80136c8:	af02      	add	r7, sp, #8
 80136ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2200      	movs	r2, #0
 80136d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80136d4:	f7ef fee6 	bl	80034a4 <HAL_GetTick>
 80136d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f003 0308 	and.w	r3, r3, #8
 80136e4:	2b08      	cmp	r3, #8
 80136e6:	d12f      	bne.n	8013748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80136e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136f0:	2200      	movs	r2, #0
 80136f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f88e 	bl	8013818 <UART_WaitOnFlagUntilTimeout>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d022      	beq.n	8013748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801370a:	e853 3f00 	ldrex	r3, [r3]
 801370e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013716:	653b      	str	r3, [r7, #80]	@ 0x50
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	461a      	mov	r2, r3
 801371e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013720:	647b      	str	r3, [r7, #68]	@ 0x44
 8013722:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013728:	e841 2300 	strex	r3, r2, [r1]
 801372c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801372e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013730:	2b00      	cmp	r3, #0
 8013732:	d1e6      	bne.n	8013702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2220      	movs	r2, #32
 8013738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2200      	movs	r2, #0
 8013740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013744:	2303      	movs	r3, #3
 8013746:	e063      	b.n	8013810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f003 0304 	and.w	r3, r3, #4
 8013752:	2b04      	cmp	r3, #4
 8013754:	d149      	bne.n	80137ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013756:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801375e:	2200      	movs	r2, #0
 8013760:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f000 f857 	bl	8013818 <UART_WaitOnFlagUntilTimeout>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d03c      	beq.n	80137ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013778:	e853 3f00 	ldrex	r3, [r3]
 801377c:	623b      	str	r3, [r7, #32]
   return(result);
 801377e:	6a3b      	ldr	r3, [r7, #32]
 8013780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	461a      	mov	r2, r3
 801378c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801378e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013790:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013796:	e841 2300 	strex	r3, r2, [r1]
 801379a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d1e6      	bne.n	8013770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	3308      	adds	r3, #8
 80137a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	e853 3f00 	ldrex	r3, [r3]
 80137b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	f023 0301 	bic.w	r3, r3, #1
 80137b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	3308      	adds	r3, #8
 80137c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137c2:	61fa      	str	r2, [r7, #28]
 80137c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137c6:	69b9      	ldr	r1, [r7, #24]
 80137c8:	69fa      	ldr	r2, [r7, #28]
 80137ca:	e841 2300 	strex	r3, r2, [r1]
 80137ce:	617b      	str	r3, [r7, #20]
   return(result);
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1e5      	bne.n	80137a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2220      	movs	r2, #32
 80137da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2200      	movs	r2, #0
 80137e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80137e6:	2303      	movs	r3, #3
 80137e8:	e012      	b.n	8013810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2220      	movs	r2, #32
 80137ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2220      	movs	r2, #32
 80137f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2200      	movs	r2, #0
 80137fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2200      	movs	r2, #0
 8013804:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	2200      	movs	r2, #0
 801380a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801380e:	2300      	movs	r3, #0
}
 8013810:	4618      	mov	r0, r3
 8013812:	3758      	adds	r7, #88	@ 0x58
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b084      	sub	sp, #16
 801381c:	af00      	add	r7, sp, #0
 801381e:	60f8      	str	r0, [r7, #12]
 8013820:	60b9      	str	r1, [r7, #8]
 8013822:	603b      	str	r3, [r7, #0]
 8013824:	4613      	mov	r3, r2
 8013826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013828:	e04f      	b.n	80138ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013830:	d04b      	beq.n	80138ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013832:	f7ef fe37 	bl	80034a4 <HAL_GetTick>
 8013836:	4602      	mov	r2, r0
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	1ad3      	subs	r3, r2, r3
 801383c:	69ba      	ldr	r2, [r7, #24]
 801383e:	429a      	cmp	r2, r3
 8013840:	d302      	bcc.n	8013848 <UART_WaitOnFlagUntilTimeout+0x30>
 8013842:	69bb      	ldr	r3, [r7, #24]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d101      	bne.n	801384c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013848:	2303      	movs	r3, #3
 801384a:	e04e      	b.n	80138ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f003 0304 	and.w	r3, r3, #4
 8013856:	2b00      	cmp	r3, #0
 8013858:	d037      	beq.n	80138ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	2b80      	cmp	r3, #128	@ 0x80
 801385e:	d034      	beq.n	80138ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	2b40      	cmp	r3, #64	@ 0x40
 8013864:	d031      	beq.n	80138ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	69db      	ldr	r3, [r3, #28]
 801386c:	f003 0308 	and.w	r3, r3, #8
 8013870:	2b08      	cmp	r3, #8
 8013872:	d110      	bne.n	8013896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2208      	movs	r2, #8
 801387a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f000 f921 	bl	8013ac4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	2208      	movs	r2, #8
 8013886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2200      	movs	r2, #0
 801388e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013892:	2301      	movs	r3, #1
 8013894:	e029      	b.n	80138ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	69db      	ldr	r3, [r3, #28]
 801389c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80138a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80138a4:	d111      	bne.n	80138ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80138ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80138b0:	68f8      	ldr	r0, [r7, #12]
 80138b2:	f000 f907 	bl	8013ac4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	2220      	movs	r2, #32
 80138ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80138c6:	2303      	movs	r3, #3
 80138c8:	e00f      	b.n	80138ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	69da      	ldr	r2, [r3, #28]
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	4013      	ands	r3, r2
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	bf0c      	ite	eq
 80138da:	2301      	moveq	r3, #1
 80138dc:	2300      	movne	r3, #0
 80138de:	b2db      	uxtb	r3, r3
 80138e0:	461a      	mov	r2, r3
 80138e2:	79fb      	ldrb	r3, [r7, #7]
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d0a0      	beq.n	801382a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3710      	adds	r7, #16
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
	...

080138f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b096      	sub	sp, #88	@ 0x58
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	4613      	mov	r3, r2
 8013900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	68ba      	ldr	r2, [r7, #8]
 8013906:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	88fa      	ldrh	r2, [r7, #6]
 801390c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2200      	movs	r2, #0
 8013914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2222      	movs	r2, #34	@ 0x22
 801391c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013926:	2b00      	cmp	r3, #0
 8013928:	d02d      	beq.n	8013986 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013930:	4a40      	ldr	r2, [pc, #256]	@ (8013a34 <UART_Start_Receive_DMA+0x140>)
 8013932:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801393a:	4a3f      	ldr	r2, [pc, #252]	@ (8013a38 <UART_Start_Receive_DMA+0x144>)
 801393c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013944:	4a3d      	ldr	r2, [pc, #244]	@ (8013a3c <UART_Start_Receive_DMA+0x148>)
 8013946:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801394e:	2200      	movs	r2, #0
 8013950:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	3324      	adds	r3, #36	@ 0x24
 801395e:	4619      	mov	r1, r3
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013964:	461a      	mov	r2, r3
 8013966:	88fb      	ldrh	r3, [r7, #6]
 8013968:	f7f0 fda8 	bl	80044bc <HAL_DMA_Start_IT>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d009      	beq.n	8013986 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	2210      	movs	r2, #16
 8013976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2220      	movs	r2, #32
 801397e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8013982:	2301      	movs	r3, #1
 8013984:	e051      	b.n	8013a2a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	691b      	ldr	r3, [r3, #16]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d018      	beq.n	80139c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013996:	e853 3f00 	ldrex	r3, [r3]
 801399a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80139a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	461a      	mov	r2, r3
 80139aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80139b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139b4:	e841 2300 	strex	r3, r2, [r1]
 80139b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80139ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d1e6      	bne.n	801398e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	3308      	adds	r3, #8
 80139c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ca:	e853 3f00 	ldrex	r3, [r3]
 80139ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80139d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d2:	f043 0301 	orr.w	r3, r3, #1
 80139d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	3308      	adds	r3, #8
 80139de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80139e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80139e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80139e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139e8:	e841 2300 	strex	r3, r2, [r1]
 80139ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80139ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d1e5      	bne.n	80139c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	3308      	adds	r3, #8
 80139fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	e853 3f00 	ldrex	r3, [r3]
 8013a02:	613b      	str	r3, [r7, #16]
   return(result);
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	3308      	adds	r3, #8
 8013a12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a14:	623a      	str	r2, [r7, #32]
 8013a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a18:	69f9      	ldr	r1, [r7, #28]
 8013a1a:	6a3a      	ldr	r2, [r7, #32]
 8013a1c:	e841 2300 	strex	r3, r2, [r1]
 8013a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8013a22:	69bb      	ldr	r3, [r7, #24]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1e5      	bne.n	80139f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3758      	adds	r7, #88	@ 0x58
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	08013b91 	.word	0x08013b91
 8013a38:	08013cb9 	.word	0x08013cb9
 8013a3c:	08013cf7 	.word	0x08013cf7

08013a40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b08f      	sub	sp, #60	@ 0x3c
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a4e:	6a3b      	ldr	r3, [r7, #32]
 8013a50:	e853 3f00 	ldrex	r3, [r3]
 8013a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	461a      	mov	r2, r3
 8013a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a6e:	e841 2300 	strex	r3, r2, [r1]
 8013a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d1e6      	bne.n	8013a48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	3308      	adds	r3, #8
 8013a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	e853 3f00 	ldrex	r3, [r3]
 8013a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	3308      	adds	r3, #8
 8013a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a9a:	61ba      	str	r2, [r7, #24]
 8013a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a9e:	6979      	ldr	r1, [r7, #20]
 8013aa0:	69ba      	ldr	r2, [r7, #24]
 8013aa2:	e841 2300 	strex	r3, r2, [r1]
 8013aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d1e5      	bne.n	8013a7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2220      	movs	r2, #32
 8013ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013ab6:	bf00      	nop
 8013ab8:	373c      	adds	r7, #60	@ 0x3c
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr
	...

08013ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b095      	sub	sp, #84	@ 0x54
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ad4:	e853 3f00 	ldrex	r3, [r3]
 8013ad8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013aea:	643b      	str	r3, [r7, #64]	@ 0x40
 8013aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013af0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013af2:	e841 2300 	strex	r3, r2, [r1]
 8013af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1e6      	bne.n	8013acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	3308      	adds	r3, #8
 8013b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	e853 3f00 	ldrex	r3, [r3]
 8013b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013b0e:	69fa      	ldr	r2, [r7, #28]
 8013b10:	4b1e      	ldr	r3, [pc, #120]	@ (8013b8c <UART_EndRxTransfer+0xc8>)
 8013b12:	4013      	ands	r3, r2
 8013b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	3308      	adds	r3, #8
 8013b1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b26:	e841 2300 	strex	r3, r2, [r1]
 8013b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d1e5      	bne.n	8013afe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b36:	2b01      	cmp	r3, #1
 8013b38:	d118      	bne.n	8013b6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	e853 3f00 	ldrex	r3, [r3]
 8013b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	f023 0310 	bic.w	r3, r3, #16
 8013b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	461a      	mov	r2, r3
 8013b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b58:	61bb      	str	r3, [r7, #24]
 8013b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b5c:	6979      	ldr	r1, [r7, #20]
 8013b5e:	69ba      	ldr	r2, [r7, #24]
 8013b60:	e841 2300 	strex	r3, r2, [r1]
 8013b64:	613b      	str	r3, [r7, #16]
   return(result);
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d1e6      	bne.n	8013b3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2220      	movs	r2, #32
 8013b70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013b80:	bf00      	nop
 8013b82:	3754      	adds	r7, #84	@ 0x54
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr
 8013b8c:	effffffe 	.word	0xeffffffe

08013b90 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b09c      	sub	sp, #112	@ 0x70
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	69db      	ldr	r3, [r3, #28]
 8013ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ba6:	d071      	beq.n	8013c8c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013baa:	2200      	movs	r2, #0
 8013bac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bb8:	e853 3f00 	ldrex	r3, [r3]
 8013bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	461a      	mov	r2, r3
 8013bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013bce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013bd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013bd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013bd6:	e841 2300 	strex	r3, r2, [r1]
 8013bda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d1e6      	bne.n	8013bb0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	3308      	adds	r3, #8
 8013be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bec:	e853 3f00 	ldrex	r3, [r3]
 8013bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bf4:	f023 0301 	bic.w	r3, r3, #1
 8013bf8:	667b      	str	r3, [r7, #100]	@ 0x64
 8013bfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	3308      	adds	r3, #8
 8013c00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013c02:	647a      	str	r2, [r7, #68]	@ 0x44
 8013c04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c0a:	e841 2300 	strex	r3, r2, [r1]
 8013c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d1e5      	bne.n	8013be2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	3308      	adds	r3, #8
 8013c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c20:	e853 3f00 	ldrex	r3, [r3]
 8013c24:	623b      	str	r3, [r7, #32]
   return(result);
 8013c26:	6a3b      	ldr	r3, [r7, #32]
 8013c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	3308      	adds	r3, #8
 8013c34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8013c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c3e:	e841 2300 	strex	r3, r2, [r1]
 8013c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1e5      	bne.n	8013c16 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c4c:	2220      	movs	r2, #32
 8013c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c56:	2b01      	cmp	r3, #1
 8013c58:	d118      	bne.n	8013c8c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	e853 3f00 	ldrex	r3, [r3]
 8013c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	f023 0310 	bic.w	r3, r3, #16
 8013c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	461a      	mov	r2, r3
 8013c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c78:	61fb      	str	r3, [r7, #28]
 8013c7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7c:	69b9      	ldr	r1, [r7, #24]
 8013c7e:	69fa      	ldr	r2, [r7, #28]
 8013c80:	e841 2300 	strex	r3, r2, [r1]
 8013c84:	617b      	str	r3, [r7, #20]
   return(result);
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d1e6      	bne.n	8013c5a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c8e:	2200      	movs	r2, #0
 8013c90:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c96:	2b01      	cmp	r3, #1
 8013c98:	d107      	bne.n	8013caa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013ca4:	f7fe fef8 	bl	8012a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013ca8:	e002      	b.n	8013cb0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013caa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013cac:	f7ee f860 	bl	8001d70 <HAL_UART_RxCpltCallback>
}
 8013cb0:	bf00      	nop
 8013cb2:	3770      	adds	r7, #112	@ 0x70
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b084      	sub	sp, #16
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cc4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cd0:	2b01      	cmp	r3, #1
 8013cd2:	d109      	bne.n	8013ce8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013cda:	085b      	lsrs	r3, r3, #1
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	4619      	mov	r1, r3
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f7fe fed9 	bl	8012a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013ce6:	e002      	b.n	8013cee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	f7fe fec1 	bl	8012a70 <HAL_UART_RxHalfCpltCallback>
}
 8013cee:	bf00      	nop
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b086      	sub	sp, #24
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013d0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013d12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013d1e:	2b80      	cmp	r3, #128	@ 0x80
 8013d20:	d109      	bne.n	8013d36 <UART_DMAError+0x40>
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	2b21      	cmp	r3, #33	@ 0x21
 8013d26:	d106      	bne.n	8013d36 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013d30:	6978      	ldr	r0, [r7, #20]
 8013d32:	f7ff fe85 	bl	8013a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	689b      	ldr	r3, [r3, #8]
 8013d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d40:	2b40      	cmp	r3, #64	@ 0x40
 8013d42:	d109      	bne.n	8013d58 <UART_DMAError+0x62>
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2b22      	cmp	r3, #34	@ 0x22
 8013d48:	d106      	bne.n	8013d58 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013d52:	6978      	ldr	r0, [r7, #20]
 8013d54:	f7ff feb6 	bl	8013ac4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d5e:	f043 0210 	orr.w	r2, r3, #16
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d68:	6978      	ldr	r0, [r7, #20]
 8013d6a:	f7fe fe8b 	bl	8012a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d6e:	bf00      	nop
 8013d70:	3718      	adds	r7, #24
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}

08013d76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b084      	sub	sp, #16
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2200      	movs	r2, #0
 8013d88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7fe fe79 	bl	8012a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d92:	bf00      	nop
 8013d94:	3710      	adds	r7, #16
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}

08013d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b088      	sub	sp, #32
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	e853 3f00 	ldrex	r3, [r3]
 8013dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013db6:	61fb      	str	r3, [r7, #28]
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	61bb      	str	r3, [r7, #24]
 8013dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dc4:	6979      	ldr	r1, [r7, #20]
 8013dc6:	69ba      	ldr	r2, [r7, #24]
 8013dc8:	e841 2300 	strex	r3, r2, [r1]
 8013dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d1e6      	bne.n	8013da2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2220      	movs	r2, #32
 8013dd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7fe fe3a 	bl	8012a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013de8:	bf00      	nop
 8013dea:	3720      	adds	r7, #32
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013df0:	b480      	push	{r7}
 8013df2:	b083      	sub	sp, #12
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013df8:	bf00      	nop
 8013dfa:	370c      	adds	r7, #12
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013e0c:	bf00      	nop
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013e20:	bf00      	nop
 8013e22:	370c      	adds	r7, #12
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr

08013e2c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d101      	bne.n	8013e42 <HAL_UARTEx_EnableFifoMode+0x16>
 8013e3e:	2302      	movs	r3, #2
 8013e40:	e02b      	b.n	8013e9a <HAL_UARTEx_EnableFifoMode+0x6e>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2201      	movs	r2, #1
 8013e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2224      	movs	r2, #36	@ 0x24
 8013e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f022 0201 	bic.w	r2, r2, #1
 8013e68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013e70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8013e78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	68fa      	ldr	r2, [r7, #12]
 8013e80:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 f88a 	bl	8013f9c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2220      	movs	r2, #32
 8013e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e98:	2300      	movs	r3, #0
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3710      	adds	r7, #16
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b084      	sub	sp, #16
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
 8013eaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d101      	bne.n	8013eba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013eb6:	2302      	movs	r3, #2
 8013eb8:	e02d      	b.n	8013f16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2224      	movs	r2, #36	@ 0x24
 8013ec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f022 0201 	bic.w	r2, r2, #1
 8013ee0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	683a      	ldr	r2, [r7, #0]
 8013ef2:	430a      	orrs	r2, r1
 8013ef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 f850 	bl	8013f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2220      	movs	r2, #32
 8013f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f14:	2300      	movs	r3, #0
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}

08013f1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b084      	sub	sp, #16
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
 8013f26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f2e:	2b01      	cmp	r3, #1
 8013f30:	d101      	bne.n	8013f36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013f32:	2302      	movs	r3, #2
 8013f34:	e02d      	b.n	8013f92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2224      	movs	r2, #36	@ 0x24
 8013f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f022 0201 	bic.w	r2, r2, #1
 8013f5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	683a      	ldr	r2, [r7, #0]
 8013f6e:	430a      	orrs	r2, r1
 8013f70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 f812 	bl	8013f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	68fa      	ldr	r2, [r7, #12]
 8013f7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2220      	movs	r2, #32
 8013f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f90:	2300      	movs	r3, #0
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
	...

08013f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	b085      	sub	sp, #20
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d108      	bne.n	8013fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2201      	movs	r2, #1
 8013fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013fbc:	e031      	b.n	8014022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013fbe:	2310      	movs	r3, #16
 8013fc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013fc2:	2310      	movs	r3, #16
 8013fc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	689b      	ldr	r3, [r3, #8]
 8013fcc:	0e5b      	lsrs	r3, r3, #25
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	f003 0307 	and.w	r3, r3, #7
 8013fd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	689b      	ldr	r3, [r3, #8]
 8013fdc:	0f5b      	lsrs	r3, r3, #29
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	f003 0307 	and.w	r3, r3, #7
 8013fe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013fe6:	7bbb      	ldrb	r3, [r7, #14]
 8013fe8:	7b3a      	ldrb	r2, [r7, #12]
 8013fea:	4911      	ldr	r1, [pc, #68]	@ (8014030 <UARTEx_SetNbDataToProcess+0x94>)
 8013fec:	5c8a      	ldrb	r2, [r1, r2]
 8013fee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013ff2:	7b3a      	ldrb	r2, [r7, #12]
 8013ff4:	490f      	ldr	r1, [pc, #60]	@ (8014034 <UARTEx_SetNbDataToProcess+0x98>)
 8013ff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014004:	7bfb      	ldrb	r3, [r7, #15]
 8014006:	7b7a      	ldrb	r2, [r7, #13]
 8014008:	4909      	ldr	r1, [pc, #36]	@ (8014030 <UARTEx_SetNbDataToProcess+0x94>)
 801400a:	5c8a      	ldrb	r2, [r1, r2]
 801400c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014010:	7b7a      	ldrb	r2, [r7, #13]
 8014012:	4908      	ldr	r1, [pc, #32]	@ (8014034 <UARTEx_SetNbDataToProcess+0x98>)
 8014014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014016:	fb93 f3f2 	sdiv	r3, r3, r2
 801401a:	b29a      	uxth	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014022:	bf00      	nop
 8014024:	3714      	adds	r7, #20
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	0801b690 	.word	0x0801b690
 8014034:	0801b698 	.word	0x0801b698

08014038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014038:	b084      	sub	sp, #16
 801403a:	b580      	push	{r7, lr}
 801403c:	b084      	sub	sp, #16
 801403e:	af00      	add	r7, sp, #0
 8014040:	6078      	str	r0, [r7, #4]
 8014042:	f107 001c 	add.w	r0, r7, #28
 8014046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801404a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801404e:	2b01      	cmp	r3, #1
 8014050:	d121      	bne.n	8014096 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014056:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	68da      	ldr	r2, [r3, #12]
 8014062:	4b2c      	ldr	r3, [pc, #176]	@ (8014114 <USB_CoreInit+0xdc>)
 8014064:	4013      	ands	r3, r2
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801407a:	2b01      	cmp	r3, #1
 801407c:	d105      	bne.n	801408a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f001 fafa 	bl	8015684 <USB_CoreReset>
 8014090:	4603      	mov	r3, r0
 8014092:	73fb      	strb	r3, [r7, #15]
 8014094:	e01b      	b.n	80140ce <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f001 faee 	bl	8015684 <USB_CoreReset>
 80140a8:	4603      	mov	r3, r0
 80140aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80140ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d106      	bne.n	80140c2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	639a      	str	r2, [r3, #56]	@ 0x38
 80140c0:	e005      	b.n	80140ce <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80140c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80140ce:	7fbb      	ldrb	r3, [r7, #30]
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d116      	bne.n	8014102 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80140d8:	b29a      	uxth	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80140e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014118 <USB_CoreInit+0xe0>)
 80140e4:	4313      	orrs	r3, r2
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	689b      	ldr	r3, [r3, #8]
 80140ee:	f043 0206 	orr.w	r2, r3, #6
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	689b      	ldr	r3, [r3, #8]
 80140fa:	f043 0220 	orr.w	r2, r3, #32
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014102:	7bfb      	ldrb	r3, [r7, #15]
}
 8014104:	4618      	mov	r0, r3
 8014106:	3710      	adds	r7, #16
 8014108:	46bd      	mov	sp, r7
 801410a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801410e:	b004      	add	sp, #16
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	ffbdffbf 	.word	0xffbdffbf
 8014118:	03ee0000 	.word	0x03ee0000

0801411c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801411c:	b480      	push	{r7}
 801411e:	b087      	sub	sp, #28
 8014120:	af00      	add	r7, sp, #0
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	4613      	mov	r3, r2
 8014128:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801412a:	79fb      	ldrb	r3, [r7, #7]
 801412c:	2b02      	cmp	r3, #2
 801412e:	d165      	bne.n	80141fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	4a41      	ldr	r2, [pc, #260]	@ (8014238 <USB_SetTurnaroundTime+0x11c>)
 8014134:	4293      	cmp	r3, r2
 8014136:	d906      	bls.n	8014146 <USB_SetTurnaroundTime+0x2a>
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	4a40      	ldr	r2, [pc, #256]	@ (801423c <USB_SetTurnaroundTime+0x120>)
 801413c:	4293      	cmp	r3, r2
 801413e:	d202      	bcs.n	8014146 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014140:	230f      	movs	r3, #15
 8014142:	617b      	str	r3, [r7, #20]
 8014144:	e062      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	4a3c      	ldr	r2, [pc, #240]	@ (801423c <USB_SetTurnaroundTime+0x120>)
 801414a:	4293      	cmp	r3, r2
 801414c:	d306      	bcc.n	801415c <USB_SetTurnaroundTime+0x40>
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	4a3b      	ldr	r2, [pc, #236]	@ (8014240 <USB_SetTurnaroundTime+0x124>)
 8014152:	4293      	cmp	r3, r2
 8014154:	d202      	bcs.n	801415c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014156:	230e      	movs	r3, #14
 8014158:	617b      	str	r3, [r7, #20]
 801415a:	e057      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	4a38      	ldr	r2, [pc, #224]	@ (8014240 <USB_SetTurnaroundTime+0x124>)
 8014160:	4293      	cmp	r3, r2
 8014162:	d306      	bcc.n	8014172 <USB_SetTurnaroundTime+0x56>
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	4a37      	ldr	r2, [pc, #220]	@ (8014244 <USB_SetTurnaroundTime+0x128>)
 8014168:	4293      	cmp	r3, r2
 801416a:	d202      	bcs.n	8014172 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801416c:	230d      	movs	r3, #13
 801416e:	617b      	str	r3, [r7, #20]
 8014170:	e04c      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	4a33      	ldr	r2, [pc, #204]	@ (8014244 <USB_SetTurnaroundTime+0x128>)
 8014176:	4293      	cmp	r3, r2
 8014178:	d306      	bcc.n	8014188 <USB_SetTurnaroundTime+0x6c>
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	4a32      	ldr	r2, [pc, #200]	@ (8014248 <USB_SetTurnaroundTime+0x12c>)
 801417e:	4293      	cmp	r3, r2
 8014180:	d802      	bhi.n	8014188 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014182:	230c      	movs	r3, #12
 8014184:	617b      	str	r3, [r7, #20]
 8014186:	e041      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	4a2f      	ldr	r2, [pc, #188]	@ (8014248 <USB_SetTurnaroundTime+0x12c>)
 801418c:	4293      	cmp	r3, r2
 801418e:	d906      	bls.n	801419e <USB_SetTurnaroundTime+0x82>
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	4a2e      	ldr	r2, [pc, #184]	@ (801424c <USB_SetTurnaroundTime+0x130>)
 8014194:	4293      	cmp	r3, r2
 8014196:	d802      	bhi.n	801419e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014198:	230b      	movs	r3, #11
 801419a:	617b      	str	r3, [r7, #20]
 801419c:	e036      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	4a2a      	ldr	r2, [pc, #168]	@ (801424c <USB_SetTurnaroundTime+0x130>)
 80141a2:	4293      	cmp	r3, r2
 80141a4:	d906      	bls.n	80141b4 <USB_SetTurnaroundTime+0x98>
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	4a29      	ldr	r2, [pc, #164]	@ (8014250 <USB_SetTurnaroundTime+0x134>)
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d802      	bhi.n	80141b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80141ae:	230a      	movs	r3, #10
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	e02b      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	4a26      	ldr	r2, [pc, #152]	@ (8014250 <USB_SetTurnaroundTime+0x134>)
 80141b8:	4293      	cmp	r3, r2
 80141ba:	d906      	bls.n	80141ca <USB_SetTurnaroundTime+0xae>
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	4a25      	ldr	r2, [pc, #148]	@ (8014254 <USB_SetTurnaroundTime+0x138>)
 80141c0:	4293      	cmp	r3, r2
 80141c2:	d202      	bcs.n	80141ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80141c4:	2309      	movs	r3, #9
 80141c6:	617b      	str	r3, [r7, #20]
 80141c8:	e020      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	4a21      	ldr	r2, [pc, #132]	@ (8014254 <USB_SetTurnaroundTime+0x138>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d306      	bcc.n	80141e0 <USB_SetTurnaroundTime+0xc4>
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	4a20      	ldr	r2, [pc, #128]	@ (8014258 <USB_SetTurnaroundTime+0x13c>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d802      	bhi.n	80141e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80141da:	2308      	movs	r3, #8
 80141dc:	617b      	str	r3, [r7, #20]
 80141de:	e015      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	4a1d      	ldr	r2, [pc, #116]	@ (8014258 <USB_SetTurnaroundTime+0x13c>)
 80141e4:	4293      	cmp	r3, r2
 80141e6:	d906      	bls.n	80141f6 <USB_SetTurnaroundTime+0xda>
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	4a1c      	ldr	r2, [pc, #112]	@ (801425c <USB_SetTurnaroundTime+0x140>)
 80141ec:	4293      	cmp	r3, r2
 80141ee:	d202      	bcs.n	80141f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80141f0:	2307      	movs	r3, #7
 80141f2:	617b      	str	r3, [r7, #20]
 80141f4:	e00a      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80141f6:	2306      	movs	r3, #6
 80141f8:	617b      	str	r3, [r7, #20]
 80141fa:	e007      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80141fc:	79fb      	ldrb	r3, [r7, #7]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d102      	bne.n	8014208 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014202:	2309      	movs	r3, #9
 8014204:	617b      	str	r3, [r7, #20]
 8014206:	e001      	b.n	801420c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014208:	2309      	movs	r3, #9
 801420a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	68da      	ldr	r2, [r3, #12]
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	029b      	lsls	r3, r3, #10
 8014220:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014224:	431a      	orrs	r2, r3
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801422a:	2300      	movs	r3, #0
}
 801422c:	4618      	mov	r0, r3
 801422e:	371c      	adds	r7, #28
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr
 8014238:	00d8acbf 	.word	0x00d8acbf
 801423c:	00e4e1c0 	.word	0x00e4e1c0
 8014240:	00f42400 	.word	0x00f42400
 8014244:	01067380 	.word	0x01067380
 8014248:	011a499f 	.word	0x011a499f
 801424c:	01312cff 	.word	0x01312cff
 8014250:	014ca43f 	.word	0x014ca43f
 8014254:	016e3600 	.word	0x016e3600
 8014258:	01a6ab1f 	.word	0x01a6ab1f
 801425c:	01e84800 	.word	0x01e84800

08014260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	689b      	ldr	r3, [r3, #8]
 801426c:	f043 0201 	orr.w	r2, r3, #1
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014274:	2300      	movs	r3, #0
}
 8014276:	4618      	mov	r0, r3
 8014278:	370c      	adds	r7, #12
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr

08014282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014282:	b480      	push	{r7}
 8014284:	b083      	sub	sp, #12
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	689b      	ldr	r3, [r3, #8]
 801428e:	f023 0201 	bic.w	r2, r3, #1
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014296:	2300      	movs	r3, #0
}
 8014298:	4618      	mov	r0, r3
 801429a:	370c      	adds	r7, #12
 801429c:	46bd      	mov	sp, r7
 801429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a2:	4770      	bx	lr

080142a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	460b      	mov	r3, r1
 80142ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80142b0:	2300      	movs	r3, #0
 80142b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	68db      	ldr	r3, [r3, #12]
 80142b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80142c0:	78fb      	ldrb	r3, [r7, #3]
 80142c2:	2b01      	cmp	r3, #1
 80142c4:	d115      	bne.n	80142f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	68db      	ldr	r3, [r3, #12]
 80142ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80142d2:	200a      	movs	r0, #10
 80142d4:	f7ef f8f2 	bl	80034bc <HAL_Delay>
      ms += 10U;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	330a      	adds	r3, #10
 80142dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f001 f93f 	bl	8015562 <USB_GetMode>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b01      	cmp	r3, #1
 80142e8:	d01e      	beq.n	8014328 <USB_SetCurrentMode+0x84>
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80142ee:	d9f0      	bls.n	80142d2 <USB_SetCurrentMode+0x2e>
 80142f0:	e01a      	b.n	8014328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80142f2:	78fb      	ldrb	r3, [r7, #3]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d115      	bne.n	8014324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014304:	200a      	movs	r0, #10
 8014306:	f7ef f8d9 	bl	80034bc <HAL_Delay>
      ms += 10U;
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	330a      	adds	r3, #10
 801430e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f001 f926 	bl	8015562 <USB_GetMode>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	d005      	beq.n	8014328 <USB_SetCurrentMode+0x84>
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014320:	d9f0      	bls.n	8014304 <USB_SetCurrentMode+0x60>
 8014322:	e001      	b.n	8014328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014324:	2301      	movs	r3, #1
 8014326:	e005      	b.n	8014334 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	2bc8      	cmp	r3, #200	@ 0xc8
 801432c:	d101      	bne.n	8014332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801432e:	2301      	movs	r3, #1
 8014330:	e000      	b.n	8014334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3710      	adds	r7, #16
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}

0801433c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801433c:	b084      	sub	sp, #16
 801433e:	b580      	push	{r7, lr}
 8014340:	b086      	sub	sp, #24
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
 8014346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801434a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801434e:	2300      	movs	r3, #0
 8014350:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014356:	2300      	movs	r3, #0
 8014358:	613b      	str	r3, [r7, #16]
 801435a:	e009      	b.n	8014370 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801435c:	687a      	ldr	r2, [r7, #4]
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	3340      	adds	r3, #64	@ 0x40
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	4413      	add	r3, r2
 8014366:	2200      	movs	r2, #0
 8014368:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	3301      	adds	r3, #1
 801436e:	613b      	str	r3, [r7, #16]
 8014370:	693b      	ldr	r3, [r7, #16]
 8014372:	2b0e      	cmp	r3, #14
 8014374:	d9f2      	bls.n	801435c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014376:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801437a:	2b00      	cmp	r3, #0
 801437c:	d11c      	bne.n	80143b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	68fa      	ldr	r2, [r7, #12]
 8014388:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801438c:	f043 0302 	orr.w	r3, r3, #2
 8014390:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014396:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	601a      	str	r2, [r3, #0]
 80143b6:	e005      	b.n	80143c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80143ca:	461a      	mov	r2, r3
 80143cc:	2300      	movs	r3, #0
 80143ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80143d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80143d4:	2b01      	cmp	r3, #1
 80143d6:	d10d      	bne.n	80143f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80143d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d104      	bne.n	80143ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80143e0:	2100      	movs	r1, #0
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f000 f968 	bl	80146b8 <USB_SetDevSpeed>
 80143e8:	e008      	b.n	80143fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80143ea:	2101      	movs	r1, #1
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f000 f963 	bl	80146b8 <USB_SetDevSpeed>
 80143f2:	e003      	b.n	80143fc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80143f4:	2103      	movs	r1, #3
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 f95e 	bl	80146b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80143fc:	2110      	movs	r1, #16
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f000 f8fa 	bl	80145f8 <USB_FlushTxFifo>
 8014404:	4603      	mov	r3, r0
 8014406:	2b00      	cmp	r3, #0
 8014408:	d001      	beq.n	801440e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801440a:	2301      	movs	r3, #1
 801440c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 f924 	bl	801465c <USB_FlushRxFifo>
 8014414:	4603      	mov	r3, r0
 8014416:	2b00      	cmp	r3, #0
 8014418:	d001      	beq.n	801441e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801441a:	2301      	movs	r3, #1
 801441c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014424:	461a      	mov	r2, r3
 8014426:	2300      	movs	r3, #0
 8014428:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014430:	461a      	mov	r2, r3
 8014432:	2300      	movs	r3, #0
 8014434:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801443c:	461a      	mov	r2, r3
 801443e:	2300      	movs	r3, #0
 8014440:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014442:	2300      	movs	r3, #0
 8014444:	613b      	str	r3, [r7, #16]
 8014446:	e043      	b.n	80144d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	015a      	lsls	r2, r3, #5
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	4413      	add	r3, r2
 8014450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801445a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801445e:	d118      	bne.n	8014492 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d10a      	bne.n	801447c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	015a      	lsls	r2, r3, #5
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	4413      	add	r3, r2
 801446e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014472:	461a      	mov	r2, r3
 8014474:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014478:	6013      	str	r3, [r2, #0]
 801447a:	e013      	b.n	80144a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801447c:	693b      	ldr	r3, [r7, #16]
 801447e:	015a      	lsls	r2, r3, #5
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	4413      	add	r3, r2
 8014484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014488:	461a      	mov	r2, r3
 801448a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801448e:	6013      	str	r3, [r2, #0]
 8014490:	e008      	b.n	80144a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	015a      	lsls	r2, r3, #5
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	4413      	add	r3, r2
 801449a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801449e:	461a      	mov	r2, r3
 80144a0:	2300      	movs	r3, #0
 80144a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	015a      	lsls	r2, r3, #5
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	4413      	add	r3, r2
 80144ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144b0:	461a      	mov	r2, r3
 80144b2:	2300      	movs	r3, #0
 80144b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	015a      	lsls	r2, r3, #5
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	4413      	add	r3, r2
 80144be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80144c2:	461a      	mov	r2, r3
 80144c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80144c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	3301      	adds	r3, #1
 80144ce:	613b      	str	r3, [r7, #16]
 80144d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80144d4:	461a      	mov	r2, r3
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	4293      	cmp	r3, r2
 80144da:	d3b5      	bcc.n	8014448 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80144dc:	2300      	movs	r3, #0
 80144de:	613b      	str	r3, [r7, #16]
 80144e0:	e043      	b.n	801456a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	015a      	lsls	r2, r3, #5
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	4413      	add	r3, r2
 80144ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80144f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80144f8:	d118      	bne.n	801452c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d10a      	bne.n	8014516 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	015a      	lsls	r2, r3, #5
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	4413      	add	r3, r2
 8014508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801450c:	461a      	mov	r2, r3
 801450e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014512:	6013      	str	r3, [r2, #0]
 8014514:	e013      	b.n	801453e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	015a      	lsls	r2, r3, #5
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	4413      	add	r3, r2
 801451e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014522:	461a      	mov	r2, r3
 8014524:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014528:	6013      	str	r3, [r2, #0]
 801452a:	e008      	b.n	801453e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801452c:	693b      	ldr	r3, [r7, #16]
 801452e:	015a      	lsls	r2, r3, #5
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	4413      	add	r3, r2
 8014534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014538:	461a      	mov	r2, r3
 801453a:	2300      	movs	r3, #0
 801453c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	015a      	lsls	r2, r3, #5
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	4413      	add	r3, r2
 8014546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801454a:	461a      	mov	r2, r3
 801454c:	2300      	movs	r3, #0
 801454e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	015a      	lsls	r2, r3, #5
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	4413      	add	r3, r2
 8014558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801455c:	461a      	mov	r2, r3
 801455e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014562:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	3301      	adds	r3, #1
 8014568:	613b      	str	r3, [r7, #16]
 801456a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801456e:	461a      	mov	r2, r3
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	4293      	cmp	r3, r2
 8014574:	d3b5      	bcc.n	80144e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	68fa      	ldr	r2, [r7, #12]
 8014580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014588:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2200      	movs	r2, #0
 801458e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014596:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014598:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801459c:	2b00      	cmp	r3, #0
 801459e:	d105      	bne.n	80145ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	699b      	ldr	r3, [r3, #24]
 80145a4:	f043 0210 	orr.w	r2, r3, #16
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	699a      	ldr	r2, [r3, #24]
 80145b0:	4b0f      	ldr	r3, [pc, #60]	@ (80145f0 <USB_DevInit+0x2b4>)
 80145b2:	4313      	orrs	r3, r2
 80145b4:	687a      	ldr	r2, [r7, #4]
 80145b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80145b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d005      	beq.n	80145cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	699b      	ldr	r3, [r3, #24]
 80145c4:	f043 0208 	orr.w	r2, r3, #8
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80145cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d105      	bne.n	80145e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	699a      	ldr	r2, [r3, #24]
 80145d8:	4b06      	ldr	r3, [pc, #24]	@ (80145f4 <USB_DevInit+0x2b8>)
 80145da:	4313      	orrs	r3, r2
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80145e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3718      	adds	r7, #24
 80145e6:	46bd      	mov	sp, r7
 80145e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80145ec:	b004      	add	sp, #16
 80145ee:	4770      	bx	lr
 80145f0:	803c3800 	.word	0x803c3800
 80145f4:	40000004 	.word	0x40000004

080145f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b085      	sub	sp, #20
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
 8014600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014602:	2300      	movs	r3, #0
 8014604:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	3301      	adds	r3, #1
 801460a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014612:	d901      	bls.n	8014618 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014614:	2303      	movs	r3, #3
 8014616:	e01b      	b.n	8014650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	691b      	ldr	r3, [r3, #16]
 801461c:	2b00      	cmp	r3, #0
 801461e:	daf2      	bge.n	8014606 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014620:	2300      	movs	r3, #0
 8014622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	019b      	lsls	r3, r3, #6
 8014628:	f043 0220 	orr.w	r2, r3, #32
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	3301      	adds	r3, #1
 8014634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801463c:	d901      	bls.n	8014642 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801463e:	2303      	movs	r3, #3
 8014640:	e006      	b.n	8014650 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	691b      	ldr	r3, [r3, #16]
 8014646:	f003 0320 	and.w	r3, r3, #32
 801464a:	2b20      	cmp	r3, #32
 801464c:	d0f0      	beq.n	8014630 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801464e:	2300      	movs	r3, #0
}
 8014650:	4618      	mov	r0, r3
 8014652:	3714      	adds	r7, #20
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801465c:	b480      	push	{r7}
 801465e:	b085      	sub	sp, #20
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014664:	2300      	movs	r3, #0
 8014666:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	3301      	adds	r3, #1
 801466c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014674:	d901      	bls.n	801467a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014676:	2303      	movs	r3, #3
 8014678:	e018      	b.n	80146ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	691b      	ldr	r3, [r3, #16]
 801467e:	2b00      	cmp	r3, #0
 8014680:	daf2      	bge.n	8014668 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014682:	2300      	movs	r3, #0
 8014684:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2210      	movs	r2, #16
 801468a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3301      	adds	r3, #1
 8014690:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014698:	d901      	bls.n	801469e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801469a:	2303      	movs	r3, #3
 801469c:	e006      	b.n	80146ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	691b      	ldr	r3, [r3, #16]
 80146a2:	f003 0310 	and.w	r3, r3, #16
 80146a6:	2b10      	cmp	r3, #16
 80146a8:	d0f0      	beq.n	801468c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80146aa:	2300      	movs	r3, #0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3714      	adds	r7, #20
 80146b0:	46bd      	mov	sp, r7
 80146b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b6:	4770      	bx	lr

080146b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b085      	sub	sp, #20
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	460b      	mov	r3, r1
 80146c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146ce:	681a      	ldr	r2, [r3, #0]
 80146d0:	78fb      	ldrb	r3, [r7, #3]
 80146d2:	68f9      	ldr	r1, [r7, #12]
 80146d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80146d8:	4313      	orrs	r3, r2
 80146da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80146dc:	2300      	movs	r3, #0
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3714      	adds	r7, #20
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80146ea:	b480      	push	{r7}
 80146ec:	b087      	sub	sp, #28
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80146fc:	689b      	ldr	r3, [r3, #8]
 80146fe:	f003 0306 	and.w	r3, r3, #6
 8014702:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d102      	bne.n	8014710 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801470a:	2300      	movs	r3, #0
 801470c:	75fb      	strb	r3, [r7, #23]
 801470e:	e00a      	b.n	8014726 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	2b02      	cmp	r3, #2
 8014714:	d002      	beq.n	801471c <USB_GetDevSpeed+0x32>
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2b06      	cmp	r3, #6
 801471a:	d102      	bne.n	8014722 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801471c:	2302      	movs	r3, #2
 801471e:	75fb      	strb	r3, [r7, #23]
 8014720:	e001      	b.n	8014726 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014722:	230f      	movs	r3, #15
 8014724:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014726:	7dfb      	ldrb	r3, [r7, #23]
}
 8014728:	4618      	mov	r0, r3
 801472a:	371c      	adds	r7, #28
 801472c:	46bd      	mov	sp, r7
 801472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014732:	4770      	bx	lr

08014734 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014734:	b480      	push	{r7}
 8014736:	b085      	sub	sp, #20
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	785b      	ldrb	r3, [r3, #1]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d139      	bne.n	80147c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014756:	69da      	ldr	r2, [r3, #28]
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	f003 030f 	and.w	r3, r3, #15
 8014760:	2101      	movs	r1, #1
 8014762:	fa01 f303 	lsl.w	r3, r1, r3
 8014766:	b29b      	uxth	r3, r3
 8014768:	68f9      	ldr	r1, [r7, #12]
 801476a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801476e:	4313      	orrs	r3, r2
 8014770:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	015a      	lsls	r2, r3, #5
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	4413      	add	r3, r2
 801477a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014784:	2b00      	cmp	r3, #0
 8014786:	d153      	bne.n	8014830 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	015a      	lsls	r2, r3, #5
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	4413      	add	r3, r2
 8014790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	689b      	ldr	r3, [r3, #8]
 801479a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	791b      	ldrb	r3, [r3, #4]
 80147a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	059b      	lsls	r3, r3, #22
 80147aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80147ac:	431a      	orrs	r2, r3
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	0159      	lsls	r1, r3, #5
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	440b      	add	r3, r1
 80147b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ba:	4619      	mov	r1, r3
 80147bc:	4b20      	ldr	r3, [pc, #128]	@ (8014840 <USB_ActivateEndpoint+0x10c>)
 80147be:	4313      	orrs	r3, r2
 80147c0:	600b      	str	r3, [r1, #0]
 80147c2:	e035      	b.n	8014830 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147ca:	69da      	ldr	r2, [r3, #28]
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	f003 030f 	and.w	r3, r3, #15
 80147d4:	2101      	movs	r1, #1
 80147d6:	fa01 f303 	lsl.w	r3, r1, r3
 80147da:	041b      	lsls	r3, r3, #16
 80147dc:	68f9      	ldr	r1, [r7, #12]
 80147de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147e2:	4313      	orrs	r3, r2
 80147e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	015a      	lsls	r2, r3, #5
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	4413      	add	r3, r2
 80147ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d119      	bne.n	8014830 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	015a      	lsls	r2, r3, #5
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	4413      	add	r3, r2
 8014804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014808:	681a      	ldr	r2, [r3, #0]
 801480a:	683b      	ldr	r3, [r7, #0]
 801480c:	689b      	ldr	r3, [r3, #8]
 801480e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	791b      	ldrb	r3, [r3, #4]
 8014816:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014818:	430b      	orrs	r3, r1
 801481a:	431a      	orrs	r2, r3
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	0159      	lsls	r1, r3, #5
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	440b      	add	r3, r1
 8014824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014828:	4619      	mov	r1, r3
 801482a:	4b05      	ldr	r3, [pc, #20]	@ (8014840 <USB_ActivateEndpoint+0x10c>)
 801482c:	4313      	orrs	r3, r2
 801482e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3714      	adds	r7, #20
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop
 8014840:	10008000 	.word	0x10008000

08014844 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014844:	b480      	push	{r7}
 8014846:	b085      	sub	sp, #20
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	785b      	ldrb	r3, [r3, #1]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d161      	bne.n	8014924 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	015a      	lsls	r2, r3, #5
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	4413      	add	r3, r2
 8014868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014876:	d11f      	bne.n	80148b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	015a      	lsls	r2, r3, #5
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	4413      	add	r3, r2
 8014880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	68ba      	ldr	r2, [r7, #8]
 8014888:	0151      	lsls	r1, r2, #5
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	440a      	add	r2, r1
 801488e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014892:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014896:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	015a      	lsls	r2, r3, #5
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	4413      	add	r3, r2
 80148a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	68ba      	ldr	r2, [r7, #8]
 80148a8:	0151      	lsls	r1, r2, #5
 80148aa:	68fa      	ldr	r2, [r7, #12]
 80148ac:	440a      	add	r2, r1
 80148ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80148b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	f003 030f 	and.w	r3, r3, #15
 80148c8:	2101      	movs	r1, #1
 80148ca:	fa01 f303 	lsl.w	r3, r1, r3
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	43db      	mvns	r3, r3
 80148d2:	68f9      	ldr	r1, [r7, #12]
 80148d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148d8:	4013      	ands	r3, r2
 80148da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148e2:	69da      	ldr	r2, [r3, #28]
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	f003 030f 	and.w	r3, r3, #15
 80148ec:	2101      	movs	r1, #1
 80148ee:	fa01 f303 	lsl.w	r3, r1, r3
 80148f2:	b29b      	uxth	r3, r3
 80148f4:	43db      	mvns	r3, r3
 80148f6:	68f9      	ldr	r1, [r7, #12]
 80148f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148fc:	4013      	ands	r3, r2
 80148fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	015a      	lsls	r2, r3, #5
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	4413      	add	r3, r2
 8014908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801490c:	681a      	ldr	r2, [r3, #0]
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	0159      	lsls	r1, r3, #5
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	440b      	add	r3, r1
 8014916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801491a:	4619      	mov	r1, r3
 801491c:	4b35      	ldr	r3, [pc, #212]	@ (80149f4 <USB_DeactivateEndpoint+0x1b0>)
 801491e:	4013      	ands	r3, r2
 8014920:	600b      	str	r3, [r1, #0]
 8014922:	e060      	b.n	80149e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	015a      	lsls	r2, r3, #5
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	4413      	add	r3, r2
 801492c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801493a:	d11f      	bne.n	801497c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	015a      	lsls	r2, r3, #5
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	4413      	add	r3, r2
 8014944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	68ba      	ldr	r2, [r7, #8]
 801494c:	0151      	lsls	r1, r2, #5
 801494e:	68fa      	ldr	r2, [r7, #12]
 8014950:	440a      	add	r2, r1
 8014952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014956:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801495a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	015a      	lsls	r2, r3, #5
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	4413      	add	r3, r2
 8014964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	68ba      	ldr	r2, [r7, #8]
 801496c:	0151      	lsls	r1, r2, #5
 801496e:	68fa      	ldr	r2, [r7, #12]
 8014970:	440a      	add	r2, r1
 8014972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014976:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801497a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	f003 030f 	and.w	r3, r3, #15
 801498c:	2101      	movs	r1, #1
 801498e:	fa01 f303 	lsl.w	r3, r1, r3
 8014992:	041b      	lsls	r3, r3, #16
 8014994:	43db      	mvns	r3, r3
 8014996:	68f9      	ldr	r1, [r7, #12]
 8014998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801499c:	4013      	ands	r3, r2
 801499e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149a6:	69da      	ldr	r2, [r3, #28]
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	f003 030f 	and.w	r3, r3, #15
 80149b0:	2101      	movs	r1, #1
 80149b2:	fa01 f303 	lsl.w	r3, r1, r3
 80149b6:	041b      	lsls	r3, r3, #16
 80149b8:	43db      	mvns	r3, r3
 80149ba:	68f9      	ldr	r1, [r7, #12]
 80149bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149c0:	4013      	ands	r3, r2
 80149c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	015a      	lsls	r2, r3, #5
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	4413      	add	r3, r2
 80149cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	0159      	lsls	r1, r3, #5
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	440b      	add	r3, r1
 80149da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149de:	4619      	mov	r1, r3
 80149e0:	4b05      	ldr	r3, [pc, #20]	@ (80149f8 <USB_DeactivateEndpoint+0x1b4>)
 80149e2:	4013      	ands	r3, r2
 80149e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3714      	adds	r7, #20
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr
 80149f4:	ec337800 	.word	0xec337800
 80149f8:	eff37800 	.word	0xeff37800

080149fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08a      	sub	sp, #40	@ 0x28
 8014a00:	af02      	add	r7, sp, #8
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	4613      	mov	r3, r2
 8014a08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	785b      	ldrb	r3, [r3, #1]
 8014a18:	2b01      	cmp	r3, #1
 8014a1a:	f040 8185 	bne.w	8014d28 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	691b      	ldr	r3, [r3, #16]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d132      	bne.n	8014a8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	015a      	lsls	r2, r3, #5
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a32:	691a      	ldr	r2, [r3, #16]
 8014a34:	69bb      	ldr	r3, [r7, #24]
 8014a36:	0159      	lsls	r1, r3, #5
 8014a38:	69fb      	ldr	r3, [r7, #28]
 8014a3a:	440b      	add	r3, r1
 8014a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a40:	4619      	mov	r1, r3
 8014a42:	4ba7      	ldr	r3, [pc, #668]	@ (8014ce0 <USB_EPStartXfer+0x2e4>)
 8014a44:	4013      	ands	r3, r2
 8014a46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	015a      	lsls	r2, r3, #5
 8014a4c:	69fb      	ldr	r3, [r7, #28]
 8014a4e:	4413      	add	r3, r2
 8014a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a54:	691b      	ldr	r3, [r3, #16]
 8014a56:	69ba      	ldr	r2, [r7, #24]
 8014a58:	0151      	lsls	r1, r2, #5
 8014a5a:	69fa      	ldr	r2, [r7, #28]
 8014a5c:	440a      	add	r2, r1
 8014a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a68:	69bb      	ldr	r3, [r7, #24]
 8014a6a:	015a      	lsls	r2, r3, #5
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	4413      	add	r3, r2
 8014a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a74:	691a      	ldr	r2, [r3, #16]
 8014a76:	69bb      	ldr	r3, [r7, #24]
 8014a78:	0159      	lsls	r1, r3, #5
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	440b      	add	r3, r1
 8014a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a82:	4619      	mov	r1, r3
 8014a84:	4b97      	ldr	r3, [pc, #604]	@ (8014ce4 <USB_EPStartXfer+0x2e8>)
 8014a86:	4013      	ands	r3, r2
 8014a88:	610b      	str	r3, [r1, #16]
 8014a8a:	e097      	b.n	8014bbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	015a      	lsls	r2, r3, #5
 8014a90:	69fb      	ldr	r3, [r7, #28]
 8014a92:	4413      	add	r3, r2
 8014a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a98:	691a      	ldr	r2, [r3, #16]
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	0159      	lsls	r1, r3, #5
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	440b      	add	r3, r1
 8014aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	4b8e      	ldr	r3, [pc, #568]	@ (8014ce4 <USB_EPStartXfer+0x2e8>)
 8014aaa:	4013      	ands	r3, r2
 8014aac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014aae:	69bb      	ldr	r3, [r7, #24]
 8014ab0:	015a      	lsls	r2, r3, #5
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	4413      	add	r3, r2
 8014ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014aba:	691a      	ldr	r2, [r3, #16]
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	0159      	lsls	r1, r3, #5
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	440b      	add	r3, r1
 8014ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ac8:	4619      	mov	r1, r3
 8014aca:	4b85      	ldr	r3, [pc, #532]	@ (8014ce0 <USB_EPStartXfer+0x2e4>)
 8014acc:	4013      	ands	r3, r2
 8014ace:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d11a      	bne.n	8014b0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	691a      	ldr	r2, [r3, #16]
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	689b      	ldr	r3, [r3, #8]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d903      	bls.n	8014aea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	689a      	ldr	r2, [r3, #8]
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014aea:	69bb      	ldr	r3, [r7, #24]
 8014aec:	015a      	lsls	r2, r3, #5
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	4413      	add	r3, r2
 8014af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014af6:	691b      	ldr	r3, [r3, #16]
 8014af8:	69ba      	ldr	r2, [r7, #24]
 8014afa:	0151      	lsls	r1, r2, #5
 8014afc:	69fa      	ldr	r2, [r7, #28]
 8014afe:	440a      	add	r2, r1
 8014b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b08:	6113      	str	r3, [r2, #16]
 8014b0a:	e044      	b.n	8014b96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	691a      	ldr	r2, [r3, #16]
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	689b      	ldr	r3, [r3, #8]
 8014b14:	4413      	add	r3, r2
 8014b16:	1e5a      	subs	r2, r3, #1
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	689b      	ldr	r3, [r3, #8]
 8014b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014b22:	69bb      	ldr	r3, [r7, #24]
 8014b24:	015a      	lsls	r2, r3, #5
 8014b26:	69fb      	ldr	r3, [r7, #28]
 8014b28:	4413      	add	r3, r2
 8014b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b2e:	691a      	ldr	r2, [r3, #16]
 8014b30:	8afb      	ldrh	r3, [r7, #22]
 8014b32:	04d9      	lsls	r1, r3, #19
 8014b34:	4b6c      	ldr	r3, [pc, #432]	@ (8014ce8 <USB_EPStartXfer+0x2ec>)
 8014b36:	400b      	ands	r3, r1
 8014b38:	69b9      	ldr	r1, [r7, #24]
 8014b3a:	0148      	lsls	r0, r1, #5
 8014b3c:	69f9      	ldr	r1, [r7, #28]
 8014b3e:	4401      	add	r1, r0
 8014b40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b44:	4313      	orrs	r3, r2
 8014b46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	791b      	ldrb	r3, [r3, #4]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d122      	bne.n	8014b96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014b50:	69bb      	ldr	r3, [r7, #24]
 8014b52:	015a      	lsls	r2, r3, #5
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	4413      	add	r3, r2
 8014b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b5c:	691b      	ldr	r3, [r3, #16]
 8014b5e:	69ba      	ldr	r2, [r7, #24]
 8014b60:	0151      	lsls	r1, r2, #5
 8014b62:	69fa      	ldr	r2, [r7, #28]
 8014b64:	440a      	add	r2, r1
 8014b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014b6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014b70:	69bb      	ldr	r3, [r7, #24]
 8014b72:	015a      	lsls	r2, r3, #5
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	4413      	add	r3, r2
 8014b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b7c:	691a      	ldr	r2, [r3, #16]
 8014b7e:	8afb      	ldrh	r3, [r7, #22]
 8014b80:	075b      	lsls	r3, r3, #29
 8014b82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014b86:	69b9      	ldr	r1, [r7, #24]
 8014b88:	0148      	lsls	r0, r1, #5
 8014b8a:	69f9      	ldr	r1, [r7, #28]
 8014b8c:	4401      	add	r1, r0
 8014b8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014b92:	4313      	orrs	r3, r2
 8014b94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	015a      	lsls	r2, r3, #5
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	4413      	add	r3, r2
 8014b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ba2:	691a      	ldr	r2, [r3, #16]
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	691b      	ldr	r3, [r3, #16]
 8014ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014bac:	69b9      	ldr	r1, [r7, #24]
 8014bae:	0148      	lsls	r0, r1, #5
 8014bb0:	69f9      	ldr	r1, [r7, #28]
 8014bb2:	4401      	add	r1, r0
 8014bb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014bbc:	79fb      	ldrb	r3, [r7, #7]
 8014bbe:	2b01      	cmp	r3, #1
 8014bc0:	d14b      	bne.n	8014c5a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	69db      	ldr	r3, [r3, #28]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d009      	beq.n	8014bde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	015a      	lsls	r2, r3, #5
 8014bce:	69fb      	ldr	r3, [r7, #28]
 8014bd0:	4413      	add	r3, r2
 8014bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bd6:	461a      	mov	r2, r3
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	69db      	ldr	r3, [r3, #28]
 8014bdc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	791b      	ldrb	r3, [r3, #4]
 8014be2:	2b01      	cmp	r3, #1
 8014be4:	d128      	bne.n	8014c38 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bec:	689b      	ldr	r3, [r3, #8]
 8014bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d110      	bne.n	8014c18 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014bf6:	69bb      	ldr	r3, [r7, #24]
 8014bf8:	015a      	lsls	r2, r3, #5
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	69ba      	ldr	r2, [r7, #24]
 8014c06:	0151      	lsls	r1, r2, #5
 8014c08:	69fa      	ldr	r2, [r7, #28]
 8014c0a:	440a      	add	r2, r1
 8014c0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014c14:	6013      	str	r3, [r2, #0]
 8014c16:	e00f      	b.n	8014c38 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014c18:	69bb      	ldr	r3, [r7, #24]
 8014c1a:	015a      	lsls	r2, r3, #5
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	4413      	add	r3, r2
 8014c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	69ba      	ldr	r2, [r7, #24]
 8014c28:	0151      	lsls	r1, r2, #5
 8014c2a:	69fa      	ldr	r2, [r7, #28]
 8014c2c:	440a      	add	r2, r1
 8014c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014c36:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c38:	69bb      	ldr	r3, [r7, #24]
 8014c3a:	015a      	lsls	r2, r3, #5
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	4413      	add	r3, r2
 8014c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	69ba      	ldr	r2, [r7, #24]
 8014c48:	0151      	lsls	r1, r2, #5
 8014c4a:	69fa      	ldr	r2, [r7, #28]
 8014c4c:	440a      	add	r2, r1
 8014c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c56:	6013      	str	r3, [r2, #0]
 8014c58:	e169      	b.n	8014f2e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	015a      	lsls	r2, r3, #5
 8014c5e:	69fb      	ldr	r3, [r7, #28]
 8014c60:	4413      	add	r3, r2
 8014c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	69ba      	ldr	r2, [r7, #24]
 8014c6a:	0151      	lsls	r1, r2, #5
 8014c6c:	69fa      	ldr	r2, [r7, #28]
 8014c6e:	440a      	add	r2, r1
 8014c70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014c78:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	791b      	ldrb	r3, [r3, #4]
 8014c7e:	2b01      	cmp	r3, #1
 8014c80:	d015      	beq.n	8014cae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	f000 8151 	beq.w	8014f2e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	f003 030f 	and.w	r3, r3, #15
 8014c9c:	2101      	movs	r1, #1
 8014c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8014ca2:	69f9      	ldr	r1, [r7, #28]
 8014ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	634b      	str	r3, [r1, #52]	@ 0x34
 8014cac:	e13f      	b.n	8014f2e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cb4:	689b      	ldr	r3, [r3, #8]
 8014cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d116      	bne.n	8014cec <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	015a      	lsls	r2, r3, #5
 8014cc2:	69fb      	ldr	r3, [r7, #28]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	69ba      	ldr	r2, [r7, #24]
 8014cce:	0151      	lsls	r1, r2, #5
 8014cd0:	69fa      	ldr	r2, [r7, #28]
 8014cd2:	440a      	add	r2, r1
 8014cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014cdc:	6013      	str	r3, [r2, #0]
 8014cde:	e015      	b.n	8014d0c <USB_EPStartXfer+0x310>
 8014ce0:	e007ffff 	.word	0xe007ffff
 8014ce4:	fff80000 	.word	0xfff80000
 8014ce8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	015a      	lsls	r2, r3, #5
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	69ba      	ldr	r2, [r7, #24]
 8014cfc:	0151      	lsls	r1, r2, #5
 8014cfe:	69fa      	ldr	r2, [r7, #28]
 8014d00:	440a      	add	r2, r1
 8014d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	68d9      	ldr	r1, [r3, #12]
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	781a      	ldrb	r2, [r3, #0]
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	691b      	ldr	r3, [r3, #16]
 8014d18:	b298      	uxth	r0, r3
 8014d1a:	79fb      	ldrb	r3, [r7, #7]
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	4603      	mov	r3, r0
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f000 f9b9 	bl	8015098 <USB_WritePacket>
 8014d26:	e102      	b.n	8014f2e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	015a      	lsls	r2, r3, #5
 8014d2c:	69fb      	ldr	r3, [r7, #28]
 8014d2e:	4413      	add	r3, r2
 8014d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d34:	691a      	ldr	r2, [r3, #16]
 8014d36:	69bb      	ldr	r3, [r7, #24]
 8014d38:	0159      	lsls	r1, r3, #5
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	440b      	add	r3, r1
 8014d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d42:	4619      	mov	r1, r3
 8014d44:	4b7c      	ldr	r3, [pc, #496]	@ (8014f38 <USB_EPStartXfer+0x53c>)
 8014d46:	4013      	ands	r3, r2
 8014d48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	015a      	lsls	r2, r3, #5
 8014d4e:	69fb      	ldr	r3, [r7, #28]
 8014d50:	4413      	add	r3, r2
 8014d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d56:	691a      	ldr	r2, [r3, #16]
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	0159      	lsls	r1, r3, #5
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	440b      	add	r3, r1
 8014d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d64:	4619      	mov	r1, r3
 8014d66:	4b75      	ldr	r3, [pc, #468]	@ (8014f3c <USB_EPStartXfer+0x540>)
 8014d68:	4013      	ands	r3, r2
 8014d6a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014d6c:	69bb      	ldr	r3, [r7, #24]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d12f      	bne.n	8014dd2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	691b      	ldr	r3, [r3, #16]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d003      	beq.n	8014d82 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	689a      	ldr	r2, [r3, #8]
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	689a      	ldr	r2, [r3, #8]
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	015a      	lsls	r2, r3, #5
 8014d8e:	69fb      	ldr	r3, [r7, #28]
 8014d90:	4413      	add	r3, r2
 8014d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d96:	691a      	ldr	r2, [r3, #16]
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	6a1b      	ldr	r3, [r3, #32]
 8014d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014da0:	69b9      	ldr	r1, [r7, #24]
 8014da2:	0148      	lsls	r0, r1, #5
 8014da4:	69f9      	ldr	r1, [r7, #28]
 8014da6:	4401      	add	r1, r0
 8014da8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dac:	4313      	orrs	r3, r2
 8014dae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	015a      	lsls	r2, r3, #5
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	4413      	add	r3, r2
 8014db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dbc:	691b      	ldr	r3, [r3, #16]
 8014dbe:	69ba      	ldr	r2, [r7, #24]
 8014dc0:	0151      	lsls	r1, r2, #5
 8014dc2:	69fa      	ldr	r2, [r7, #28]
 8014dc4:	440a      	add	r2, r1
 8014dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014dca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014dce:	6113      	str	r3, [r2, #16]
 8014dd0:	e05f      	b.n	8014e92 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	691b      	ldr	r3, [r3, #16]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d123      	bne.n	8014e22 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	015a      	lsls	r2, r3, #5
 8014dde:	69fb      	ldr	r3, [r7, #28]
 8014de0:	4413      	add	r3, r2
 8014de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014de6:	691a      	ldr	r2, [r3, #16]
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	689b      	ldr	r3, [r3, #8]
 8014dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014df0:	69b9      	ldr	r1, [r7, #24]
 8014df2:	0148      	lsls	r0, r1, #5
 8014df4:	69f9      	ldr	r1, [r7, #28]
 8014df6:	4401      	add	r1, r0
 8014df8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014dfc:	4313      	orrs	r3, r2
 8014dfe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	015a      	lsls	r2, r3, #5
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	4413      	add	r3, r2
 8014e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e0c:	691b      	ldr	r3, [r3, #16]
 8014e0e:	69ba      	ldr	r2, [r7, #24]
 8014e10:	0151      	lsls	r1, r2, #5
 8014e12:	69fa      	ldr	r2, [r7, #28]
 8014e14:	440a      	add	r2, r1
 8014e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014e1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014e1e:	6113      	str	r3, [r2, #16]
 8014e20:	e037      	b.n	8014e92 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	691a      	ldr	r2, [r3, #16]
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	689b      	ldr	r3, [r3, #8]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	1e5a      	subs	r2, r3, #1
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	689b      	ldr	r3, [r3, #8]
 8014e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8014e36:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	8afa      	ldrh	r2, [r7, #22]
 8014e3e:	fb03 f202 	mul.w	r2, r3, r2
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014e46:	69bb      	ldr	r3, [r7, #24]
 8014e48:	015a      	lsls	r2, r3, #5
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e52:	691a      	ldr	r2, [r3, #16]
 8014e54:	8afb      	ldrh	r3, [r7, #22]
 8014e56:	04d9      	lsls	r1, r3, #19
 8014e58:	4b39      	ldr	r3, [pc, #228]	@ (8014f40 <USB_EPStartXfer+0x544>)
 8014e5a:	400b      	ands	r3, r1
 8014e5c:	69b9      	ldr	r1, [r7, #24]
 8014e5e:	0148      	lsls	r0, r1, #5
 8014e60:	69f9      	ldr	r1, [r7, #28]
 8014e62:	4401      	add	r1, r0
 8014e64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e68:	4313      	orrs	r3, r2
 8014e6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014e6c:	69bb      	ldr	r3, [r7, #24]
 8014e6e:	015a      	lsls	r2, r3, #5
 8014e70:	69fb      	ldr	r3, [r7, #28]
 8014e72:	4413      	add	r3, r2
 8014e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e78:	691a      	ldr	r2, [r3, #16]
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	6a1b      	ldr	r3, [r3, #32]
 8014e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e82:	69b9      	ldr	r1, [r7, #24]
 8014e84:	0148      	lsls	r0, r1, #5
 8014e86:	69f9      	ldr	r1, [r7, #28]
 8014e88:	4401      	add	r1, r0
 8014e8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e8e:	4313      	orrs	r3, r2
 8014e90:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014e92:	79fb      	ldrb	r3, [r7, #7]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d10d      	bne.n	8014eb4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d009      	beq.n	8014eb4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	68d9      	ldr	r1, [r3, #12]
 8014ea4:	69bb      	ldr	r3, [r7, #24]
 8014ea6:	015a      	lsls	r2, r3, #5
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	4413      	add	r3, r2
 8014eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eb0:	460a      	mov	r2, r1
 8014eb2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	791b      	ldrb	r3, [r3, #4]
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d128      	bne.n	8014f0e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014ebc:	69fb      	ldr	r3, [r7, #28]
 8014ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ec2:	689b      	ldr	r3, [r3, #8]
 8014ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d110      	bne.n	8014eee <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	015a      	lsls	r2, r3, #5
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	69ba      	ldr	r2, [r7, #24]
 8014edc:	0151      	lsls	r1, r2, #5
 8014ede:	69fa      	ldr	r2, [r7, #28]
 8014ee0:	440a      	add	r2, r1
 8014ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ee6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014eea:	6013      	str	r3, [r2, #0]
 8014eec:	e00f      	b.n	8014f0e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014eee:	69bb      	ldr	r3, [r7, #24]
 8014ef0:	015a      	lsls	r2, r3, #5
 8014ef2:	69fb      	ldr	r3, [r7, #28]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	69ba      	ldr	r2, [r7, #24]
 8014efe:	0151      	lsls	r1, r2, #5
 8014f00:	69fa      	ldr	r2, [r7, #28]
 8014f02:	440a      	add	r2, r1
 8014f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014f0c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014f0e:	69bb      	ldr	r3, [r7, #24]
 8014f10:	015a      	lsls	r2, r3, #5
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	4413      	add	r3, r2
 8014f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	69ba      	ldr	r2, [r7, #24]
 8014f1e:	0151      	lsls	r1, r2, #5
 8014f20:	69fa      	ldr	r2, [r7, #28]
 8014f22:	440a      	add	r2, r1
 8014f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014f2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f2e:	2300      	movs	r3, #0
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3720      	adds	r7, #32
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	fff80000 	.word	0xfff80000
 8014f3c:	e007ffff 	.word	0xe007ffff
 8014f40:	1ff80000 	.word	0x1ff80000

08014f44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f44:	b480      	push	{r7}
 8014f46:	b087      	sub	sp, #28
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014f52:	2300      	movs	r3, #0
 8014f54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	785b      	ldrb	r3, [r3, #1]
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d14a      	bne.n	8014ff8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	015a      	lsls	r2, r3, #5
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	4413      	add	r3, r2
 8014f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f7a:	f040 8086 	bne.w	801508a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	015a      	lsls	r2, r3, #5
 8014f84:	693b      	ldr	r3, [r7, #16]
 8014f86:	4413      	add	r3, r2
 8014f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	683a      	ldr	r2, [r7, #0]
 8014f90:	7812      	ldrb	r2, [r2, #0]
 8014f92:	0151      	lsls	r1, r2, #5
 8014f94:	693a      	ldr	r2, [r7, #16]
 8014f96:	440a      	add	r2, r1
 8014f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014fa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	015a      	lsls	r2, r3, #5
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	4413      	add	r3, r2
 8014fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	683a      	ldr	r2, [r7, #0]
 8014fb4:	7812      	ldrb	r2, [r2, #0]
 8014fb6:	0151      	lsls	r1, r2, #5
 8014fb8:	693a      	ldr	r2, [r7, #16]
 8014fba:	440a      	add	r2, r1
 8014fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014fc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014fc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	3301      	adds	r3, #1
 8014fca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	d902      	bls.n	8014fdc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8014fda:	e056      	b.n	801508a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	015a      	lsls	r2, r3, #5
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ff4:	d0e7      	beq.n	8014fc6 <USB_EPStopXfer+0x82>
 8014ff6:	e048      	b.n	801508a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	015a      	lsls	r2, r3, #5
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	4413      	add	r3, r2
 8015002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801500c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015010:	d13b      	bne.n	801508a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	015a      	lsls	r2, r3, #5
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	4413      	add	r3, r2
 801501c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	683a      	ldr	r2, [r7, #0]
 8015024:	7812      	ldrb	r2, [r2, #0]
 8015026:	0151      	lsls	r1, r2, #5
 8015028:	693a      	ldr	r2, [r7, #16]
 801502a:	440a      	add	r2, r1
 801502c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015030:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015034:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	781b      	ldrb	r3, [r3, #0]
 801503a:	015a      	lsls	r2, r3, #5
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	4413      	add	r3, r2
 8015040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	683a      	ldr	r2, [r7, #0]
 8015048:	7812      	ldrb	r2, [r2, #0]
 801504a:	0151      	lsls	r1, r2, #5
 801504c:	693a      	ldr	r2, [r7, #16]
 801504e:	440a      	add	r2, r1
 8015050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015054:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015058:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	3301      	adds	r3, #1
 801505e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015066:	4293      	cmp	r3, r2
 8015068:	d902      	bls.n	8015070 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801506a:	2301      	movs	r3, #1
 801506c:	75fb      	strb	r3, [r7, #23]
          break;
 801506e:	e00c      	b.n	801508a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	015a      	lsls	r2, r3, #5
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	4413      	add	r3, r2
 801507a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015088:	d0e7      	beq.n	801505a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801508a:	7dfb      	ldrb	r3, [r7, #23]
}
 801508c:	4618      	mov	r0, r3
 801508e:	371c      	adds	r7, #28
 8015090:	46bd      	mov	sp, r7
 8015092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015096:	4770      	bx	lr

08015098 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015098:	b480      	push	{r7}
 801509a:	b089      	sub	sp, #36	@ 0x24
 801509c:	af00      	add	r7, sp, #0
 801509e:	60f8      	str	r0, [r7, #12]
 80150a0:	60b9      	str	r1, [r7, #8]
 80150a2:	4611      	mov	r1, r2
 80150a4:	461a      	mov	r2, r3
 80150a6:	460b      	mov	r3, r1
 80150a8:	71fb      	strb	r3, [r7, #7]
 80150aa:	4613      	mov	r3, r2
 80150ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80150b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d123      	bne.n	8015106 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80150be:	88bb      	ldrh	r3, [r7, #4]
 80150c0:	3303      	adds	r3, #3
 80150c2:	089b      	lsrs	r3, r3, #2
 80150c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80150c6:	2300      	movs	r3, #0
 80150c8:	61bb      	str	r3, [r7, #24]
 80150ca:	e018      	b.n	80150fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80150cc:	79fb      	ldrb	r3, [r7, #7]
 80150ce:	031a      	lsls	r2, r3, #12
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	4413      	add	r3, r2
 80150d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80150d8:	461a      	mov	r2, r3
 80150da:	69fb      	ldr	r3, [r7, #28]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80150e0:	69fb      	ldr	r3, [r7, #28]
 80150e2:	3301      	adds	r3, #1
 80150e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	3301      	adds	r3, #1
 80150ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	3301      	adds	r3, #1
 80150f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80150f2:	69fb      	ldr	r3, [r7, #28]
 80150f4:	3301      	adds	r3, #1
 80150f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	3301      	adds	r3, #1
 80150fc:	61bb      	str	r3, [r7, #24]
 80150fe:	69ba      	ldr	r2, [r7, #24]
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	429a      	cmp	r2, r3
 8015104:	d3e2      	bcc.n	80150cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015106:	2300      	movs	r3, #0
}
 8015108:	4618      	mov	r0, r3
 801510a:	3724      	adds	r7, #36	@ 0x24
 801510c:	46bd      	mov	sp, r7
 801510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015112:	4770      	bx	lr

08015114 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015114:	b480      	push	{r7}
 8015116:	b08b      	sub	sp, #44	@ 0x2c
 8015118:	af00      	add	r7, sp, #0
 801511a:	60f8      	str	r0, [r7, #12]
 801511c:	60b9      	str	r1, [r7, #8]
 801511e:	4613      	mov	r3, r2
 8015120:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801512a:	88fb      	ldrh	r3, [r7, #6]
 801512c:	089b      	lsrs	r3, r3, #2
 801512e:	b29b      	uxth	r3, r3
 8015130:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015132:	88fb      	ldrh	r3, [r7, #6]
 8015134:	f003 0303 	and.w	r3, r3, #3
 8015138:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801513a:	2300      	movs	r3, #0
 801513c:	623b      	str	r3, [r7, #32]
 801513e:	e014      	b.n	801516a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514a:	601a      	str	r2, [r3, #0]
    pDest++;
 801514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514e:	3301      	adds	r3, #1
 8015150:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015154:	3301      	adds	r3, #1
 8015156:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801515a:	3301      	adds	r3, #1
 801515c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015160:	3301      	adds	r3, #1
 8015162:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015164:	6a3b      	ldr	r3, [r7, #32]
 8015166:	3301      	adds	r3, #1
 8015168:	623b      	str	r3, [r7, #32]
 801516a:	6a3a      	ldr	r2, [r7, #32]
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	429a      	cmp	r2, r3
 8015170:	d3e6      	bcc.n	8015140 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015172:	8bfb      	ldrh	r3, [r7, #30]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d01e      	beq.n	80151b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015178:	2300      	movs	r3, #0
 801517a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015182:	461a      	mov	r2, r3
 8015184:	f107 0310 	add.w	r3, r7, #16
 8015188:	6812      	ldr	r2, [r2, #0]
 801518a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801518c:	693a      	ldr	r2, [r7, #16]
 801518e:	6a3b      	ldr	r3, [r7, #32]
 8015190:	b2db      	uxtb	r3, r3
 8015192:	00db      	lsls	r3, r3, #3
 8015194:	fa22 f303 	lsr.w	r3, r2, r3
 8015198:	b2da      	uxtb	r2, r3
 801519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801519c:	701a      	strb	r2, [r3, #0]
      i++;
 801519e:	6a3b      	ldr	r3, [r7, #32]
 80151a0:	3301      	adds	r3, #1
 80151a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80151a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a6:	3301      	adds	r3, #1
 80151a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80151aa:	8bfb      	ldrh	r3, [r7, #30]
 80151ac:	3b01      	subs	r3, #1
 80151ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80151b0:	8bfb      	ldrh	r3, [r7, #30]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d1ea      	bne.n	801518c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80151b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	372c      	adds	r7, #44	@ 0x2c
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80151c4:	b480      	push	{r7}
 80151c6:	b085      	sub	sp, #20
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	785b      	ldrb	r3, [r3, #1]
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d12c      	bne.n	801523a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	015a      	lsls	r2, r3, #5
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	4413      	add	r3, r2
 80151e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	db12      	blt.n	8015218 <USB_EPSetStall+0x54>
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d00f      	beq.n	8015218 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	015a      	lsls	r2, r3, #5
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	4413      	add	r3, r2
 8015200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	68ba      	ldr	r2, [r7, #8]
 8015208:	0151      	lsls	r1, r2, #5
 801520a:	68fa      	ldr	r2, [r7, #12]
 801520c:	440a      	add	r2, r1
 801520e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015212:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015216:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	015a      	lsls	r2, r3, #5
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	4413      	add	r3, r2
 8015220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	68ba      	ldr	r2, [r7, #8]
 8015228:	0151      	lsls	r1, r2, #5
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	440a      	add	r2, r1
 801522e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015232:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015236:	6013      	str	r3, [r2, #0]
 8015238:	e02b      	b.n	8015292 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	015a      	lsls	r2, r3, #5
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	4413      	add	r3, r2
 8015242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	2b00      	cmp	r3, #0
 801524a:	db12      	blt.n	8015272 <USB_EPSetStall+0xae>
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d00f      	beq.n	8015272 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	015a      	lsls	r2, r3, #5
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	4413      	add	r3, r2
 801525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	68ba      	ldr	r2, [r7, #8]
 8015262:	0151      	lsls	r1, r2, #5
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	440a      	add	r2, r1
 8015268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801526c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015270:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	015a      	lsls	r2, r3, #5
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	4413      	add	r3, r2
 801527a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	68ba      	ldr	r2, [r7, #8]
 8015282:	0151      	lsls	r1, r2, #5
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	440a      	add	r2, r1
 8015288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801528c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015290:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b085      	sub	sp, #20
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	781b      	ldrb	r3, [r3, #0]
 80152b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	785b      	ldrb	r3, [r3, #1]
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d128      	bne.n	801530e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	015a      	lsls	r2, r3, #5
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	4413      	add	r3, r2
 80152c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	0151      	lsls	r1, r2, #5
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	440a      	add	r2, r1
 80152d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80152da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	791b      	ldrb	r3, [r3, #4]
 80152e0:	2b03      	cmp	r3, #3
 80152e2:	d003      	beq.n	80152ec <USB_EPClearStall+0x4c>
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	791b      	ldrb	r3, [r3, #4]
 80152e8:	2b02      	cmp	r3, #2
 80152ea:	d138      	bne.n	801535e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	015a      	lsls	r2, r3, #5
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	4413      	add	r3, r2
 80152f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	68ba      	ldr	r2, [r7, #8]
 80152fc:	0151      	lsls	r1, r2, #5
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	440a      	add	r2, r1
 8015302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801530a:	6013      	str	r3, [r2, #0]
 801530c:	e027      	b.n	801535e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	015a      	lsls	r2, r3, #5
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	4413      	add	r3, r2
 8015316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	68ba      	ldr	r2, [r7, #8]
 801531e:	0151      	lsls	r1, r2, #5
 8015320:	68fa      	ldr	r2, [r7, #12]
 8015322:	440a      	add	r2, r1
 8015324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015328:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801532c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	791b      	ldrb	r3, [r3, #4]
 8015332:	2b03      	cmp	r3, #3
 8015334:	d003      	beq.n	801533e <USB_EPClearStall+0x9e>
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	791b      	ldrb	r3, [r3, #4]
 801533a:	2b02      	cmp	r3, #2
 801533c:	d10f      	bne.n	801535e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	015a      	lsls	r2, r3, #5
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	4413      	add	r3, r2
 8015346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	68ba      	ldr	r2, [r7, #8]
 801534e:	0151      	lsls	r1, r2, #5
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	440a      	add	r2, r1
 8015354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801535c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801535e:	2300      	movs	r3, #0
}
 8015360:	4618      	mov	r0, r3
 8015362:	3714      	adds	r7, #20
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr

0801536c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801536c:	b480      	push	{r7}
 801536e:	b085      	sub	sp, #20
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	460b      	mov	r3, r1
 8015376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	68fa      	ldr	r2, [r7, #12]
 8015386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801538a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801538e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	78fb      	ldrb	r3, [r7, #3]
 801539a:	011b      	lsls	r3, r3, #4
 801539c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80153a0:	68f9      	ldr	r1, [r7, #12]
 80153a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80153a6:	4313      	orrs	r3, r2
 80153a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80153aa:	2300      	movs	r3, #0
}
 80153ac:	4618      	mov	r0, r3
 80153ae:	3714      	adds	r7, #20
 80153b0:	46bd      	mov	sp, r7
 80153b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b6:	4770      	bx	lr

080153b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b085      	sub	sp, #20
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	68fa      	ldr	r2, [r7, #12]
 80153ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80153d2:	f023 0303 	bic.w	r3, r3, #3
 80153d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	68fa      	ldr	r2, [r7, #12]
 80153e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80153e6:	f023 0302 	bic.w	r3, r3, #2
 80153ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80153ec:	2300      	movs	r3, #0
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3714      	adds	r7, #20
 80153f2:	46bd      	mov	sp, r7
 80153f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f8:	4770      	bx	lr

080153fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80153fa:	b480      	push	{r7}
 80153fc:	b085      	sub	sp, #20
 80153fe:	af00      	add	r7, sp, #0
 8015400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	68fa      	ldr	r2, [r7, #12]
 8015410:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015414:	f023 0303 	bic.w	r3, r3, #3
 8015418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	68fa      	ldr	r2, [r7, #12]
 8015424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015428:	f043 0302 	orr.w	r3, r3, #2
 801542c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801542e:	2300      	movs	r3, #0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3714      	adds	r7, #20
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801543c:	b480      	push	{r7}
 801543e:	b085      	sub	sp, #20
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	695b      	ldr	r3, [r3, #20]
 8015448:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	699b      	ldr	r3, [r3, #24]
 801544e:	68fa      	ldr	r2, [r7, #12]
 8015450:	4013      	ands	r3, r2
 8015452:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015454:	68fb      	ldr	r3, [r7, #12]
}
 8015456:	4618      	mov	r0, r3
 8015458:	3714      	adds	r7, #20
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr

08015462 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015462:	b480      	push	{r7}
 8015464:	b085      	sub	sp, #20
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015474:	699b      	ldr	r3, [r3, #24]
 8015476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801547e:	69db      	ldr	r3, [r3, #28]
 8015480:	68ba      	ldr	r2, [r7, #8]
 8015482:	4013      	ands	r3, r2
 8015484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	0c1b      	lsrs	r3, r3, #16
}
 801548a:	4618      	mov	r0, r3
 801548c:	3714      	adds	r7, #20
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr

08015496 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015496:	b480      	push	{r7}
 8015498:	b085      	sub	sp, #20
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154a8:	699b      	ldr	r3, [r3, #24]
 80154aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154b2:	69db      	ldr	r3, [r3, #28]
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	4013      	ands	r3, r2
 80154b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	b29b      	uxth	r3, r3
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3714      	adds	r7, #20
 80154c2:	46bd      	mov	sp, r7
 80154c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c8:	4770      	bx	lr

080154ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80154ca:	b480      	push	{r7}
 80154cc:	b085      	sub	sp, #20
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	6078      	str	r0, [r7, #4]
 80154d2:	460b      	mov	r3, r1
 80154d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80154da:	78fb      	ldrb	r3, [r7, #3]
 80154dc:	015a      	lsls	r2, r3, #5
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	4413      	add	r3, r2
 80154e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154e6:	689b      	ldr	r3, [r3, #8]
 80154e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154f0:	695b      	ldr	r3, [r3, #20]
 80154f2:	68ba      	ldr	r2, [r7, #8]
 80154f4:	4013      	ands	r3, r2
 80154f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80154f8:	68bb      	ldr	r3, [r7, #8]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3714      	adds	r7, #20
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr

08015506 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015506:	b480      	push	{r7}
 8015508:	b087      	sub	sp, #28
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
 801550e:	460b      	mov	r3, r1
 8015510:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801551c:	691b      	ldr	r3, [r3, #16]
 801551e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015528:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801552a:	78fb      	ldrb	r3, [r7, #3]
 801552c:	f003 030f 	and.w	r3, r3, #15
 8015530:	68fa      	ldr	r2, [r7, #12]
 8015532:	fa22 f303 	lsr.w	r3, r2, r3
 8015536:	01db      	lsls	r3, r3, #7
 8015538:	b2db      	uxtb	r3, r3
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	4313      	orrs	r3, r2
 801553e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015540:	78fb      	ldrb	r3, [r7, #3]
 8015542:	015a      	lsls	r2, r3, #5
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	4413      	add	r3, r2
 8015548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801554c:	689b      	ldr	r3, [r3, #8]
 801554e:	693a      	ldr	r2, [r7, #16]
 8015550:	4013      	ands	r3, r2
 8015552:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015554:	68bb      	ldr	r3, [r7, #8]
}
 8015556:	4618      	mov	r0, r3
 8015558:	371c      	adds	r7, #28
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015562:	b480      	push	{r7}
 8015564:	b083      	sub	sp, #12
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	695b      	ldr	r3, [r3, #20]
 801556e:	f003 0301 	and.w	r3, r3, #1
}
 8015572:	4618      	mov	r0, r3
 8015574:	370c      	adds	r7, #12
 8015576:	46bd      	mov	sp, r7
 8015578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557c:	4770      	bx	lr
	...

08015580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015580:	b480      	push	{r7}
 8015582:	b085      	sub	sp, #20
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801559a:	4619      	mov	r1, r3
 801559c:	4b09      	ldr	r3, [pc, #36]	@ (80155c4 <USB_ActivateSetup+0x44>)
 801559e:	4013      	ands	r3, r2
 80155a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3714      	adds	r7, #20
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr
 80155c4:	fffff800 	.word	0xfffff800

080155c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b087      	sub	sp, #28
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	460b      	mov	r3, r1
 80155d2:	607a      	str	r2, [r7, #4]
 80155d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	333c      	adds	r3, #60	@ 0x3c
 80155de:	3304      	adds	r3, #4
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	4a26      	ldr	r2, [pc, #152]	@ (8015680 <USB_EP0_OutStart+0xb8>)
 80155e8:	4293      	cmp	r3, r2
 80155ea:	d90a      	bls.n	8015602 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80155f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80155fc:	d101      	bne.n	8015602 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80155fe:	2300      	movs	r3, #0
 8015600:	e037      	b.n	8015672 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015608:	461a      	mov	r2, r3
 801560a:	2300      	movs	r3, #0
 801560c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015614:	691b      	ldr	r3, [r3, #16]
 8015616:	697a      	ldr	r2, [r7, #20]
 8015618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801561c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015628:	691b      	ldr	r3, [r3, #16]
 801562a:	697a      	ldr	r2, [r7, #20]
 801562c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015630:	f043 0318 	orr.w	r3, r3, #24
 8015634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801563c:	691b      	ldr	r3, [r3, #16]
 801563e:	697a      	ldr	r2, [r7, #20]
 8015640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015644:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015648:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801564a:	7afb      	ldrb	r3, [r7, #11]
 801564c:	2b01      	cmp	r3, #1
 801564e:	d10f      	bne.n	8015670 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015656:	461a      	mov	r2, r3
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	697a      	ldr	r2, [r7, #20]
 8015666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801566a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801566e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015670:	2300      	movs	r3, #0
}
 8015672:	4618      	mov	r0, r3
 8015674:	371c      	adds	r7, #28
 8015676:	46bd      	mov	sp, r7
 8015678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567c:	4770      	bx	lr
 801567e:	bf00      	nop
 8015680:	4f54300a 	.word	0x4f54300a

08015684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015684:	b480      	push	{r7}
 8015686:	b085      	sub	sp, #20
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801568c:	2300      	movs	r3, #0
 801568e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	3301      	adds	r3, #1
 8015694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801569c:	d901      	bls.n	80156a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801569e:	2303      	movs	r3, #3
 80156a0:	e01b      	b.n	80156da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	daf2      	bge.n	8015690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80156aa:	2300      	movs	r3, #0
 80156ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	691b      	ldr	r3, [r3, #16]
 80156b2:	f043 0201 	orr.w	r2, r3, #1
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	3301      	adds	r3, #1
 80156be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80156c6:	d901      	bls.n	80156cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80156c8:	2303      	movs	r3, #3
 80156ca:	e006      	b.n	80156da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	691b      	ldr	r3, [r3, #16]
 80156d0:	f003 0301 	and.w	r3, r3, #1
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	d0f0      	beq.n	80156ba <USB_CoreReset+0x36>

  return HAL_OK;
 80156d8:	2300      	movs	r3, #0
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3714      	adds	r7, #20
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr

080156e6 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b082      	sub	sp, #8
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2200      	movs	r2, #0
 80156fe:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2200      	movs	r2, #0
 8015704:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2200      	movs	r2, #0
 801570a:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2200      	movs	r2, #0
 8015710:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2200      	movs	r2, #0
 8015718:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801571c:	2044      	movs	r0, #68	@ 0x44
 801571e:	f002 ff2f 	bl	8018580 <malloc>
 8015722:	4603      	mov	r3, r0
 8015724:	461a      	mov	r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801572a:	2044      	movs	r0, #68	@ 0x44
 801572c:	f002 ff28 	bl	8018580 <malloc>
 8015730:	4603      	mov	r3, r0
 8015732:	461a      	mov	r2, r3
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	7e1b      	ldrb	r3, [r3, #24]
 801573c:	461a      	mov	r2, r3
 801573e:	4613      	mov	r3, r2
 8015740:	011b      	lsls	r3, r3, #4
 8015742:	4413      	add	r3, r2
 8015744:	009b      	lsls	r3, r3, #2
 8015746:	4618      	mov	r0, r3
 8015748:	f002 ff1a 	bl	8018580 <malloc>
 801574c:	4603      	mov	r3, r0
 801574e:	461a      	mov	r2, r3
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f893 3020 	ldrb.w	r3, [r3, #32]
 801575a:	461a      	mov	r2, r3
 801575c:	4613      	mov	r3, r2
 801575e:	011b      	lsls	r3, r3, #4
 8015760:	4413      	add	r3, r2
 8015762:	009b      	lsls	r3, r3, #2
 8015764:	4618      	mov	r0, r3
 8015766:	f002 ff0b 	bl	8018580 <malloc>
 801576a:	4603      	mov	r3, r0
 801576c:	461a      	mov	r2, r3
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6818      	ldr	r0, [r3, #0]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	2244      	movs	r2, #68	@ 0x44
 801577c:	4619      	mov	r1, r3
 801577e:	f7fc fd4b 	bl	8012218 <HAL_UART_Receive_DMA>
 8015782:	4603      	mov	r3, r0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 801578c:	b480      	push	{r7}
 801578e:	b087      	sub	sp, #28
 8015790:	af00      	add	r7, sp, #0
 8015792:	60f8      	str	r0, [r7, #12]
 8015794:	60b9      	str	r1, [r7, #8]
 8015796:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	7e9a      	ldrb	r2, [r3, #26]
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	7e5b      	ldrb	r3, [r3, #25]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d101      	bne.n	80157a8 <XBEE_RXPacket+0x1c>
 80157a4:	2301      	movs	r3, #1
 80157a6:	e05b      	b.n	8015860 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	695a      	ldr	r2, [r3, #20]
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	7e9b      	ldrb	r3, [r3, #26]
 80157b0:	4619      	mov	r1, r3
 80157b2:	460b      	mov	r3, r1
 80157b4:	011b      	lsls	r3, r3, #4
 80157b6:	440b      	add	r3, r1
 80157b8:	009b      	lsls	r3, r3, #2
 80157ba:	4413      	add	r3, r2
 80157bc:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	7e9b      	ldrb	r3, [r3, #26]
 80157c2:	3301      	adds	r3, #1
 80157c4:	b2da      	uxtb	r2, r3
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	7e9b      	ldrb	r3, [r3, #26]
 80157ce:	68fa      	ldr	r2, [r7, #12]
 80157d0:	7e12      	ldrb	r2, [r2, #24]
 80157d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80157d6:	fb01 f202 	mul.w	r2, r1, r2
 80157da:	1a9b      	subs	r3, r3, r2
 80157dc:	b2da      	uxtb	r2, r3
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 80157e2:	2300      	movs	r3, #0
 80157e4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80157e6:	2300      	movs	r3, #0
 80157e8:	75bb      	strb	r3, [r7, #22]
 80157ea:	e00e      	b.n	801580a <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 80157ec:	7dbb      	ldrb	r3, [r7, #22]
 80157ee:	2b03      	cmp	r3, #3
 80157f0:	d007      	beq.n	8015802 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 80157f2:	7dbb      	ldrb	r3, [r7, #22]
 80157f4:	693a      	ldr	r2, [r7, #16]
 80157f6:	4413      	add	r3, r2
 80157f8:	781a      	ldrb	r2, [r3, #0]
 80157fa:	7dfb      	ldrb	r3, [r7, #23]
 80157fc:	4053      	eors	r3, r2
 80157fe:	75fb      	strb	r3, [r7, #23]
 8015800:	e000      	b.n	8015804 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 8015802:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8015804:	7dbb      	ldrb	r3, [r7, #22]
 8015806:	3301      	adds	r3, #1
 8015808:	75bb      	strb	r3, [r7, #22]
 801580a:	7dbb      	ldrb	r3, [r7, #22]
 801580c:	2b43      	cmp	r3, #67	@ 0x43
 801580e:	d9ed      	bls.n	80157ec <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8015810:	693b      	ldr	r3, [r7, #16]
 8015812:	3303      	adds	r3, #3
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	7dfa      	ldrb	r2, [r7, #23]
 8015818:	429a      	cmp	r2, r3
 801581a:	d001      	beq.n	8015820 <XBEE_RXPacket+0x94>
 801581c:	2301      	movs	r3, #1
 801581e:	e01f      	b.n	8015860 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	2200      	movs	r2, #0
 8015824:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	881b      	ldrh	r3, [r3, #0]
 801582a:	693a      	ldr	r2, [r7, #16]
 801582c:	3201      	adds	r2, #1
 801582e:	7812      	ldrb	r2, [r2, #0]
 8015830:	4413      	add	r3, r2
 8015832:	b29a      	uxth	r2, r3
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	881b      	ldrh	r3, [r3, #0]
 801583c:	021b      	lsls	r3, r3, #8
 801583e:	b29a      	uxth	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	881b      	ldrh	r3, [r3, #0]
 8015848:	693a      	ldr	r2, [r7, #16]
 801584a:	3202      	adds	r2, #2
 801584c:	7812      	ldrb	r2, [r2, #0]
 801584e:	4413      	add	r3, r2
 8015850:	b29a      	uxth	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	1d1a      	adds	r2, r3, #4
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	601a      	str	r2, [r3, #0]

	return 0;
 801585e:	2300      	movs	r3, #0
}
 8015860:	4618      	mov	r0, r3
 8015862:	371c      	adds	r7, #28
 8015864:	46bd      	mov	sp, r7
 8015866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586a:	4770      	bx	lr

0801586c <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	4613      	mov	r3, r2
 8015878:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8015880:	3301      	adds	r3, #1
 8015882:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f893 2020 	ldrb.w	r2, [r3, #32]
 801588a:	7dbb      	ldrb	r3, [r7, #22]
 801588c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015890:	fb01 f202 	mul.w	r2, r1, r2
 8015894:	1a9b      	subs	r3, r3, r2
 8015896:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801589e:	7dba      	ldrb	r2, [r7, #22]
 80158a0:	429a      	cmp	r2, r3
 80158a2:	d101      	bne.n	80158a8 <XBEE_TXPacket+0x3c>
 80158a4:	2301      	movs	r3, #1
 80158a6:	e047      	b.n	8015938 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	69da      	ldr	r2, [r3, #28]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80158b2:	4619      	mov	r1, r3
 80158b4:	460b      	mov	r3, r1
 80158b6:	011b      	lsls	r3, r3, #4
 80158b8:	440b      	add	r3, r1
 80158ba:	009b      	lsls	r3, r3, #2
 80158bc:	4413      	add	r3, r2
 80158be:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	22aa      	movs	r2, #170	@ 0xaa
 80158c4:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 80158c6:	88fb      	ldrh	r3, [r7, #6]
 80158c8:	0a1b      	lsrs	r3, r3, #8
 80158ca:	b29a      	uxth	r2, r3
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	3301      	adds	r3, #1
 80158d0:	b2d2      	uxtb	r2, r2
 80158d2:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 80158d4:	693b      	ldr	r3, [r7, #16]
 80158d6:	3302      	adds	r3, #2
 80158d8:	88fa      	ldrh	r2, [r7, #6]
 80158da:	b2d2      	uxtb	r2, r2
 80158dc:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	3304      	adds	r3, #4
 80158e2:	2240      	movs	r2, #64	@ 0x40
 80158e4:	68b9      	ldr	r1, [r7, #8]
 80158e6:	4618      	mov	r0, r3
 80158e8:	f003 fd2b 	bl	8019342 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	3303      	adds	r3, #3
 80158f0:	2200      	movs	r2, #0
 80158f2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80158f4:	2300      	movs	r3, #0
 80158f6:	75fb      	strb	r3, [r7, #23]
 80158f8:	e013      	b.n	8015922 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 80158fa:	7dfb      	ldrb	r3, [r7, #23]
 80158fc:	2b03      	cmp	r3, #3
 80158fe:	d00c      	beq.n	801591a <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	3303      	adds	r3, #3
 8015904:	7819      	ldrb	r1, [r3, #0]
 8015906:	7dfb      	ldrb	r3, [r7, #23]
 8015908:	693a      	ldr	r2, [r7, #16]
 801590a:	4413      	add	r3, r2
 801590c:	781a      	ldrb	r2, [r3, #0]
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	3303      	adds	r3, #3
 8015912:	404a      	eors	r2, r1
 8015914:	b2d2      	uxtb	r2, r2
 8015916:	701a      	strb	r2, [r3, #0]
 8015918:	e000      	b.n	801591c <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 801591a:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 801591c:	7dfb      	ldrb	r3, [r7, #23]
 801591e:	3301      	adds	r3, #1
 8015920:	75fb      	strb	r3, [r7, #23]
 8015922:	7dfb      	ldrb	r3, [r7, #23]
 8015924:	2b43      	cmp	r3, #67	@ 0x43
 8015926:	d9e8      	bls.n	80158fa <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	6818      	ldr	r0, [r3, #0]
 801592c:	231e      	movs	r3, #30
 801592e:	2244      	movs	r2, #68	@ 0x44
 8015930:	6939      	ldr	r1, [r7, #16]
 8015932:	f7fc fbe3 	bl	80120fc <HAL_UART_Transmit>
 8015936:	4603      	mov	r3, r0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3718      	adds	r7, #24
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8015940:	b580      	push	{r7, lr}
 8015942:	b096      	sub	sp, #88	@ 0x58
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	7e5b      	ldrb	r3, [r3, #25]
 801594c:	3301      	adds	r3, #1
 801594e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	7e1a      	ldrb	r2, [r3, #24]
 8015956:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801595a:	fbb3 f1f2 	udiv	r1, r3, r2
 801595e:	fb01 f202 	mul.w	r2, r1, r2
 8015962:	1a9b      	subs	r3, r3, r2
 8015964:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	7e9b      	ldrb	r3, [r3, #26]
 801596c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015970:	429a      	cmp	r2, r3
 8015972:	d101      	bne.n	8015978 <XBEE_RX_DMACallback+0x38>
 8015974:	2301      	movs	r3, #1
 8015976:	e097      	b.n	8015aa8 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	7c1b      	ldrb	r3, [r3, #16]
 801597c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8015980:	2300      	movs	r3, #0
 8015982:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015986:	2300      	movs	r3, #0
 8015988:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 801598c:	e027      	b.n	80159de <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 801598e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	7c12      	ldrb	r2, [r2, #16]
 8015996:	441a      	add	r2, r3
 8015998:	4b45      	ldr	r3, [pc, #276]	@ (8015ab0 <XBEE_RX_DMACallback+0x170>)
 801599a:	fb83 1302 	smull	r1, r3, r3, r2
 801599e:	1159      	asrs	r1, r3, #5
 80159a0:	17d3      	asrs	r3, r2, #31
 80159a2:	1ac9      	subs	r1, r1, r3
 80159a4:	460b      	mov	r3, r1
 80159a6:	011b      	lsls	r3, r3, #4
 80159a8:	440b      	add	r3, r1
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	1ad1      	subs	r1, r2, r3
 80159ae:	460b      	mov	r3, r1
 80159b0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	689a      	ldr	r2, [r3, #8]
 80159b8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80159bc:	4413      	add	r3, r2
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	2baa      	cmp	r3, #170	@ 0xaa
 80159c2:	d107      	bne.n	80159d4 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 80159c4:	2301      	movs	r3, #1
 80159c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80159d0:	741a      	strb	r2, [r3, #16]
			break;
 80159d2:	e008      	b.n	80159e6 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80159d4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80159d8:	3301      	adds	r3, #1
 80159da:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80159de:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80159e2:	2b43      	cmp	r3, #67	@ 0x43
 80159e4:	d9d3      	bls.n	801598e <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 80159e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d101      	bne.n	80159f2 <XBEE_RX_DMACallback+0xb2>
 80159ee:	2302      	movs	r3, #2
 80159f0:	e05a      	b.n	8015aa8 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	68da      	ldr	r2, [r3, #12]
 80159f6:	f107 030c 	add.w	r3, r7, #12
 80159fa:	4611      	mov	r1, r2
 80159fc:	2244      	movs	r2, #68	@ 0x44
 80159fe:	4618      	mov	r0, r3
 8015a00:	f003 fc9f 	bl	8019342 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	68d8      	ldr	r0, [r3, #12]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	7c12      	ldrb	r2, [r2, #16]
 8015a10:	1899      	adds	r1, r3, r2
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	7c1b      	ldrb	r3, [r3, #16]
 8015a16:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	f003 fc91 	bl	8019342 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	7c1b      	ldrb	r3, [r3, #16]
 8015a24:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d201      	bcs.n	8015a30 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8015a2c:	2302      	movs	r3, #2
 8015a2e:	e03b      	b.n	8015aa8 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8015a30:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a34:	b29b      	uxth	r3, r3
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	7c12      	ldrb	r2, [r2, #16]
 8015a3a:	1a9b      	subs	r3, r3, r2
 8015a3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8015a40:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a44:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015a48:	461a      	mov	r2, r3
 8015a4a:	f107 030c 	add.w	r3, r7, #12
 8015a4e:	4413      	add	r3, r2
 8015a50:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015a54:	2100      	movs	r1, #0
 8015a56:	4618      	mov	r0, r3
 8015a58:	f003 fbe3 	bl	8019222 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8015a5c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015a60:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015a64:	1ad3      	subs	r3, r2, r3
 8015a66:	3344      	adds	r3, #68	@ 0x44
 8015a68:	f107 020c 	add.w	r2, r7, #12
 8015a6c:	18d0      	adds	r0, r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6899      	ldr	r1, [r3, #8]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	7c1b      	ldrb	r3, [r3, #16]
 8015a76:	461a      	mov	r2, r3
 8015a78:	f003 fc63 	bl	8019342 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015a82:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	695a      	ldr	r2, [r3, #20]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	7e5b      	ldrb	r3, [r3, #25]
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	460b      	mov	r3, r1
 8015a90:	011b      	lsls	r3, r3, #4
 8015a92:	440b      	add	r3, r1
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	4413      	add	r3, r2
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f107 030c 	add.w	r3, r7, #12
 8015a9e:	2244      	movs	r2, #68	@ 0x44
 8015aa0:	4619      	mov	r1, r3
 8015aa2:	f003 fc4e 	bl	8019342 <memcpy>

	return 0;
 8015aa6:	2300      	movs	r3, #0
}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3758      	adds	r7, #88	@ 0x58
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	78787879 	.word	0x78787879

08015ab4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b084      	sub	sp, #16
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	460b      	mov	r3, r1
 8015abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015ac0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015ac4:	f002 fd18 	bl	80184f8 <USBD_static_malloc>
 8015ac8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d109      	bne.n	8015ae4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	32b0      	adds	r2, #176	@ 0xb0
 8015ada:	2100      	movs	r1, #0
 8015adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015ae0:	2302      	movs	r3, #2
 8015ae2:	e0d4      	b.n	8015c8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015ae4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015ae8:	2100      	movs	r1, #0
 8015aea:	68f8      	ldr	r0, [r7, #12]
 8015aec:	f003 fb99 	bl	8019222 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	32b0      	adds	r2, #176	@ 0xb0
 8015afa:	68f9      	ldr	r1, [r7, #12]
 8015afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	32b0      	adds	r2, #176	@ 0xb0
 8015b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	7c1b      	ldrb	r3, [r3, #16]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d138      	bne.n	8015b8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8015c98 <USBD_CDC_Init+0x1e4>)
 8015b1e:	7819      	ldrb	r1, [r3, #0]
 8015b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b24:	2202      	movs	r2, #2
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f002 fbc3 	bl	80182b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8015c98 <USBD_CDC_Init+0x1e4>)
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	f003 020f 	and.w	r2, r3, #15
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	4613      	mov	r3, r2
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	4413      	add	r3, r2
 8015b3c:	009b      	lsls	r3, r3, #2
 8015b3e:	440b      	add	r3, r1
 8015b40:	3324      	adds	r3, #36	@ 0x24
 8015b42:	2201      	movs	r2, #1
 8015b44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015b46:	4b55      	ldr	r3, [pc, #340]	@ (8015c9c <USBD_CDC_Init+0x1e8>)
 8015b48:	7819      	ldrb	r1, [r3, #0]
 8015b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b4e:	2202      	movs	r2, #2
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f002 fbae 	bl	80182b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015b56:	4b51      	ldr	r3, [pc, #324]	@ (8015c9c <USBD_CDC_Init+0x1e8>)
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	f003 020f 	and.w	r2, r3, #15
 8015b5e:	6879      	ldr	r1, [r7, #4]
 8015b60:	4613      	mov	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	4413      	add	r3, r2
 8015b66:	009b      	lsls	r3, r3, #2
 8015b68:	440b      	add	r3, r1
 8015b6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b6e:	2201      	movs	r2, #1
 8015b70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015b72:	4b4b      	ldr	r3, [pc, #300]	@ (8015ca0 <USBD_CDC_Init+0x1ec>)
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	f003 020f 	and.w	r2, r3, #15
 8015b7a:	6879      	ldr	r1, [r7, #4]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	4413      	add	r3, r2
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	440b      	add	r3, r1
 8015b86:	3326      	adds	r3, #38	@ 0x26
 8015b88:	2210      	movs	r2, #16
 8015b8a:	801a      	strh	r2, [r3, #0]
 8015b8c:	e035      	b.n	8015bfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015b8e:	4b42      	ldr	r3, [pc, #264]	@ (8015c98 <USBD_CDC_Init+0x1e4>)
 8015b90:	7819      	ldrb	r1, [r3, #0]
 8015b92:	2340      	movs	r3, #64	@ 0x40
 8015b94:	2202      	movs	r2, #2
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f002 fb8b 	bl	80182b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8015c98 <USBD_CDC_Init+0x1e4>)
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	f003 020f 	and.w	r2, r3, #15
 8015ba4:	6879      	ldr	r1, [r7, #4]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	4413      	add	r3, r2
 8015bac:	009b      	lsls	r3, r3, #2
 8015bae:	440b      	add	r3, r1
 8015bb0:	3324      	adds	r3, #36	@ 0x24
 8015bb2:	2201      	movs	r2, #1
 8015bb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015bb6:	4b39      	ldr	r3, [pc, #228]	@ (8015c9c <USBD_CDC_Init+0x1e8>)
 8015bb8:	7819      	ldrb	r1, [r3, #0]
 8015bba:	2340      	movs	r3, #64	@ 0x40
 8015bbc:	2202      	movs	r2, #2
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f002 fb77 	bl	80182b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015bc4:	4b35      	ldr	r3, [pc, #212]	@ (8015c9c <USBD_CDC_Init+0x1e8>)
 8015bc6:	781b      	ldrb	r3, [r3, #0]
 8015bc8:	f003 020f 	and.w	r2, r3, #15
 8015bcc:	6879      	ldr	r1, [r7, #4]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	009b      	lsls	r3, r3, #2
 8015bd2:	4413      	add	r3, r2
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	440b      	add	r3, r1
 8015bd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bdc:	2201      	movs	r2, #1
 8015bde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015be0:	4b2f      	ldr	r3, [pc, #188]	@ (8015ca0 <USBD_CDC_Init+0x1ec>)
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	f003 020f 	and.w	r2, r3, #15
 8015be8:	6879      	ldr	r1, [r7, #4]
 8015bea:	4613      	mov	r3, r2
 8015bec:	009b      	lsls	r3, r3, #2
 8015bee:	4413      	add	r3, r2
 8015bf0:	009b      	lsls	r3, r3, #2
 8015bf2:	440b      	add	r3, r1
 8015bf4:	3326      	adds	r3, #38	@ 0x26
 8015bf6:	2210      	movs	r2, #16
 8015bf8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015bfa:	4b29      	ldr	r3, [pc, #164]	@ (8015ca0 <USBD_CDC_Init+0x1ec>)
 8015bfc:	7819      	ldrb	r1, [r3, #0]
 8015bfe:	2308      	movs	r3, #8
 8015c00:	2203      	movs	r2, #3
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f002 fb55 	bl	80182b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015c08:	4b25      	ldr	r3, [pc, #148]	@ (8015ca0 <USBD_CDC_Init+0x1ec>)
 8015c0a:	781b      	ldrb	r3, [r3, #0]
 8015c0c:	f003 020f 	and.w	r2, r3, #15
 8015c10:	6879      	ldr	r1, [r7, #4]
 8015c12:	4613      	mov	r3, r2
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	4413      	add	r3, r2
 8015c18:	009b      	lsls	r3, r3, #2
 8015c1a:	440b      	add	r3, r1
 8015c1c:	3324      	adds	r3, #36	@ 0x24
 8015c1e:	2201      	movs	r2, #1
 8015c20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2200      	movs	r2, #0
 8015c26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	33b0      	adds	r3, #176	@ 0xb0
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	4413      	add	r3, r2
 8015c38:	685b      	ldr	r3, [r3, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	2200      	movs	r2, #0
 8015c42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d101      	bne.n	8015c5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015c58:	2302      	movs	r3, #2
 8015c5a:	e018      	b.n	8015c8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	7c1b      	ldrb	r3, [r3, #16]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d10a      	bne.n	8015c7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c64:	4b0d      	ldr	r3, [pc, #52]	@ (8015c9c <USBD_CDC_Init+0x1e8>)
 8015c66:	7819      	ldrb	r1, [r3, #0]
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f002 fc0c 	bl	8018490 <USBD_LL_PrepareReceive>
 8015c78:	e008      	b.n	8015c8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015c7a:	4b08      	ldr	r3, [pc, #32]	@ (8015c9c <USBD_CDC_Init+0x1e8>)
 8015c7c:	7819      	ldrb	r1, [r3, #0]
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015c84:	2340      	movs	r3, #64	@ 0x40
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	f002 fc02 	bl	8018490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015c8c:	2300      	movs	r3, #0
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	240000af 	.word	0x240000af
 8015c9c:	240000b0 	.word	0x240000b0
 8015ca0:	240000b1 	.word	0x240000b1

08015ca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b082      	sub	sp, #8
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	460b      	mov	r3, r1
 8015cae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8015d9c <USBD_CDC_DeInit+0xf8>)
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f002 fb21 	bl	80182fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015cbc:	4b37      	ldr	r3, [pc, #220]	@ (8015d9c <USBD_CDC_DeInit+0xf8>)
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	f003 020f 	and.w	r2, r3, #15
 8015cc4:	6879      	ldr	r1, [r7, #4]
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	009b      	lsls	r3, r3, #2
 8015cca:	4413      	add	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	440b      	add	r3, r1
 8015cd0:	3324      	adds	r3, #36	@ 0x24
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015cd6:	4b32      	ldr	r3, [pc, #200]	@ (8015da0 <USBD_CDC_DeInit+0xfc>)
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	4619      	mov	r1, r3
 8015cdc:	6878      	ldr	r0, [r7, #4]
 8015cde:	f002 fb0e 	bl	80182fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8015da0 <USBD_CDC_DeInit+0xfc>)
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	f003 020f 	and.w	r2, r3, #15
 8015cea:	6879      	ldr	r1, [r7, #4]
 8015cec:	4613      	mov	r3, r2
 8015cee:	009b      	lsls	r3, r3, #2
 8015cf0:	4413      	add	r3, r2
 8015cf2:	009b      	lsls	r3, r3, #2
 8015cf4:	440b      	add	r3, r1
 8015cf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015cfe:	4b29      	ldr	r3, [pc, #164]	@ (8015da4 <USBD_CDC_DeInit+0x100>)
 8015d00:	781b      	ldrb	r3, [r3, #0]
 8015d02:	4619      	mov	r1, r3
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f002 fafa 	bl	80182fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015d0a:	4b26      	ldr	r3, [pc, #152]	@ (8015da4 <USBD_CDC_DeInit+0x100>)
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	f003 020f 	and.w	r2, r3, #15
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	4613      	mov	r3, r2
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	4413      	add	r3, r2
 8015d1a:	009b      	lsls	r3, r3, #2
 8015d1c:	440b      	add	r3, r1
 8015d1e:	3324      	adds	r3, #36	@ 0x24
 8015d20:	2200      	movs	r2, #0
 8015d22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015d24:	4b1f      	ldr	r3, [pc, #124]	@ (8015da4 <USBD_CDC_DeInit+0x100>)
 8015d26:	781b      	ldrb	r3, [r3, #0]
 8015d28:	f003 020f 	and.w	r2, r3, #15
 8015d2c:	6879      	ldr	r1, [r7, #4]
 8015d2e:	4613      	mov	r3, r2
 8015d30:	009b      	lsls	r3, r3, #2
 8015d32:	4413      	add	r3, r2
 8015d34:	009b      	lsls	r3, r3, #2
 8015d36:	440b      	add	r3, r1
 8015d38:	3326      	adds	r3, #38	@ 0x26
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	32b0      	adds	r2, #176	@ 0xb0
 8015d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d01f      	beq.n	8015d90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d56:	687a      	ldr	r2, [r7, #4]
 8015d58:	33b0      	adds	r3, #176	@ 0xb0
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	4413      	add	r3, r2
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	32b0      	adds	r2, #176	@ 0xb0
 8015d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f002 fbce 	bl	8018514 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	32b0      	adds	r2, #176	@ 0xb0
 8015d82:	2100      	movs	r1, #0
 8015d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015d90:	2300      	movs	r3, #0
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	240000af 	.word	0x240000af
 8015da0:	240000b0 	.word	0x240000b0
 8015da4:	240000b1 	.word	0x240000b1

08015da8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b086      	sub	sp, #24
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	32b0      	adds	r2, #176	@ 0xb0
 8015dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d101      	bne.n	8015dd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015dd4:	2303      	movs	r3, #3
 8015dd6:	e0bf      	b.n	8015f58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d050      	beq.n	8015e86 <USBD_CDC_Setup+0xde>
 8015de4:	2b20      	cmp	r3, #32
 8015de6:	f040 80af 	bne.w	8015f48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	88db      	ldrh	r3, [r3, #6]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d03a      	beq.n	8015e68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	b25b      	sxtb	r3, r3
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	da1b      	bge.n	8015e34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	33b0      	adds	r3, #176	@ 0xb0
 8015e06:	009b      	lsls	r3, r3, #2
 8015e08:	4413      	add	r3, r2
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	689b      	ldr	r3, [r3, #8]
 8015e0e:	683a      	ldr	r2, [r7, #0]
 8015e10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015e12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e14:	683a      	ldr	r2, [r7, #0]
 8015e16:	88d2      	ldrh	r2, [r2, #6]
 8015e18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	88db      	ldrh	r3, [r3, #6]
 8015e1e:	2b07      	cmp	r3, #7
 8015e20:	bf28      	it	cs
 8015e22:	2307      	movcs	r3, #7
 8015e24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	89fa      	ldrh	r2, [r7, #14]
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f001 fdbd 	bl	80179ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015e32:	e090      	b.n	8015f56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	785a      	ldrb	r2, [r3, #1]
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	88db      	ldrh	r3, [r3, #6]
 8015e42:	2b3f      	cmp	r3, #63	@ 0x3f
 8015e44:	d803      	bhi.n	8015e4e <USBD_CDC_Setup+0xa6>
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	88db      	ldrh	r3, [r3, #6]
 8015e4a:	b2da      	uxtb	r2, r3
 8015e4c:	e000      	b.n	8015e50 <USBD_CDC_Setup+0xa8>
 8015e4e:	2240      	movs	r2, #64	@ 0x40
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015e56:	6939      	ldr	r1, [r7, #16]
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015e5e:	461a      	mov	r2, r3
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f001 fdcf 	bl	8017a04 <USBD_CtlPrepareRx>
      break;
 8015e66:	e076      	b.n	8015f56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e6e:	687a      	ldr	r2, [r7, #4]
 8015e70:	33b0      	adds	r3, #176	@ 0xb0
 8015e72:	009b      	lsls	r3, r3, #2
 8015e74:	4413      	add	r3, r2
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	689b      	ldr	r3, [r3, #8]
 8015e7a:	683a      	ldr	r2, [r7, #0]
 8015e7c:	7850      	ldrb	r0, [r2, #1]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	6839      	ldr	r1, [r7, #0]
 8015e82:	4798      	blx	r3
      break;
 8015e84:	e067      	b.n	8015f56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	785b      	ldrb	r3, [r3, #1]
 8015e8a:	2b0b      	cmp	r3, #11
 8015e8c:	d851      	bhi.n	8015f32 <USBD_CDC_Setup+0x18a>
 8015e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8015e94 <USBD_CDC_Setup+0xec>)
 8015e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e94:	08015ec5 	.word	0x08015ec5
 8015e98:	08015f41 	.word	0x08015f41
 8015e9c:	08015f33 	.word	0x08015f33
 8015ea0:	08015f33 	.word	0x08015f33
 8015ea4:	08015f33 	.word	0x08015f33
 8015ea8:	08015f33 	.word	0x08015f33
 8015eac:	08015f33 	.word	0x08015f33
 8015eb0:	08015f33 	.word	0x08015f33
 8015eb4:	08015f33 	.word	0x08015f33
 8015eb8:	08015f33 	.word	0x08015f33
 8015ebc:	08015eef 	.word	0x08015eef
 8015ec0:	08015f19 	.word	0x08015f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eca:	b2db      	uxtb	r3, r3
 8015ecc:	2b03      	cmp	r3, #3
 8015ece:	d107      	bne.n	8015ee0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015ed0:	f107 030a 	add.w	r3, r7, #10
 8015ed4:	2202      	movs	r2, #2
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f001 fd67 	bl	80179ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015ede:	e032      	b.n	8015f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015ee0:	6839      	ldr	r1, [r7, #0]
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f001 fce5 	bl	80178b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015ee8:	2303      	movs	r3, #3
 8015eea:	75fb      	strb	r3, [r7, #23]
          break;
 8015eec:	e02b      	b.n	8015f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b03      	cmp	r3, #3
 8015ef8:	d107      	bne.n	8015f0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015efa:	f107 030d 	add.w	r3, r7, #13
 8015efe:	2201      	movs	r2, #1
 8015f00:	4619      	mov	r1, r3
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f001 fd52 	bl	80179ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015f08:	e01d      	b.n	8015f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015f0a:	6839      	ldr	r1, [r7, #0]
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f001 fcd0 	bl	80178b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f12:	2303      	movs	r3, #3
 8015f14:	75fb      	strb	r3, [r7, #23]
          break;
 8015f16:	e016      	b.n	8015f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015f1e:	b2db      	uxtb	r3, r3
 8015f20:	2b03      	cmp	r3, #3
 8015f22:	d00f      	beq.n	8015f44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015f24:	6839      	ldr	r1, [r7, #0]
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f001 fcc3 	bl	80178b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015f2c:	2303      	movs	r3, #3
 8015f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015f30:	e008      	b.n	8015f44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015f32:	6839      	ldr	r1, [r7, #0]
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f001 fcbc 	bl	80178b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8015f3a:	2303      	movs	r3, #3
 8015f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8015f3e:	e002      	b.n	8015f46 <USBD_CDC_Setup+0x19e>
          break;
 8015f40:	bf00      	nop
 8015f42:	e008      	b.n	8015f56 <USBD_CDC_Setup+0x1ae>
          break;
 8015f44:	bf00      	nop
      }
      break;
 8015f46:	e006      	b.n	8015f56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015f48:	6839      	ldr	r1, [r7, #0]
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f001 fcb1 	bl	80178b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8015f50:	2303      	movs	r3, #3
 8015f52:	75fb      	strb	r3, [r7, #23]
      break;
 8015f54:	bf00      	nop
  }

  return (uint8_t)ret;
 8015f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3718      	adds	r7, #24
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b084      	sub	sp, #16
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	32b0      	adds	r2, #176	@ 0xb0
 8015f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d101      	bne.n	8015f8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015f86:	2303      	movs	r3, #3
 8015f88:	e065      	b.n	8016056 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	32b0      	adds	r2, #176	@ 0xb0
 8015f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f9a:	78fb      	ldrb	r3, [r7, #3]
 8015f9c:	f003 020f 	and.w	r2, r3, #15
 8015fa0:	6879      	ldr	r1, [r7, #4]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	009b      	lsls	r3, r3, #2
 8015fa6:	4413      	add	r3, r2
 8015fa8:	009b      	lsls	r3, r3, #2
 8015faa:	440b      	add	r3, r1
 8015fac:	3318      	adds	r3, #24
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d02f      	beq.n	8016014 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015fb4:	78fb      	ldrb	r3, [r7, #3]
 8015fb6:	f003 020f 	and.w	r2, r3, #15
 8015fba:	6879      	ldr	r1, [r7, #4]
 8015fbc:	4613      	mov	r3, r2
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	4413      	add	r3, r2
 8015fc2:	009b      	lsls	r3, r3, #2
 8015fc4:	440b      	add	r3, r1
 8015fc6:	3318      	adds	r3, #24
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	78fb      	ldrb	r3, [r7, #3]
 8015fcc:	f003 010f 	and.w	r1, r3, #15
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	460b      	mov	r3, r1
 8015fd4:	00db      	lsls	r3, r3, #3
 8015fd6:	440b      	add	r3, r1
 8015fd8:	009b      	lsls	r3, r3, #2
 8015fda:	4403      	add	r3, r0
 8015fdc:	331c      	adds	r3, #28
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8015fe4:	fb01 f303 	mul.w	r3, r1, r3
 8015fe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d112      	bne.n	8016014 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015fee:	78fb      	ldrb	r3, [r7, #3]
 8015ff0:	f003 020f 	and.w	r2, r3, #15
 8015ff4:	6879      	ldr	r1, [r7, #4]
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	009b      	lsls	r3, r3, #2
 8015ffa:	4413      	add	r3, r2
 8015ffc:	009b      	lsls	r3, r3, #2
 8015ffe:	440b      	add	r3, r1
 8016000:	3318      	adds	r3, #24
 8016002:	2200      	movs	r2, #0
 8016004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016006:	78f9      	ldrb	r1, [r7, #3]
 8016008:	2300      	movs	r3, #0
 801600a:	2200      	movs	r2, #0
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f002 fa1e 	bl	801844e <USBD_LL_Transmit>
 8016012:	e01f      	b.n	8016054 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	2200      	movs	r2, #0
 8016018:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	33b0      	adds	r3, #176	@ 0xb0
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	4413      	add	r3, r2
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	691b      	ldr	r3, [r3, #16]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d010      	beq.n	8016054 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016038:	687a      	ldr	r2, [r7, #4]
 801603a:	33b0      	adds	r3, #176	@ 0xb0
 801603c:	009b      	lsls	r3, r3, #2
 801603e:	4413      	add	r3, r2
 8016040:	685b      	ldr	r3, [r3, #4]
 8016042:	691b      	ldr	r3, [r3, #16]
 8016044:	68ba      	ldr	r2, [r7, #8]
 8016046:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801604a:	68ba      	ldr	r2, [r7, #8]
 801604c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016050:	78fa      	ldrb	r2, [r7, #3]
 8016052:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016054:	2300      	movs	r3, #0
}
 8016056:	4618      	mov	r0, r3
 8016058:	3710      	adds	r7, #16
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}

0801605e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801605e:	b580      	push	{r7, lr}
 8016060:	b084      	sub	sp, #16
 8016062:	af00      	add	r7, sp, #0
 8016064:	6078      	str	r0, [r7, #4]
 8016066:	460b      	mov	r3, r1
 8016068:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	32b0      	adds	r2, #176	@ 0xb0
 8016074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	32b0      	adds	r2, #176	@ 0xb0
 8016084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d101      	bne.n	8016090 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801608c:	2303      	movs	r3, #3
 801608e:	e01a      	b.n	80160c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016090:	78fb      	ldrb	r3, [r7, #3]
 8016092:	4619      	mov	r1, r3
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f002 fa1c 	bl	80184d2 <USBD_LL_GetRxDataSize>
 801609a:	4602      	mov	r2, r0
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	33b0      	adds	r3, #176	@ 0xb0
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	4413      	add	r3, r2
 80160b0:	685b      	ldr	r3, [r3, #4]
 80160b2:	68db      	ldr	r3, [r3, #12]
 80160b4:	68fa      	ldr	r2, [r7, #12]
 80160b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80160c0:	4611      	mov	r1, r2
 80160c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80160c4:	2300      	movs	r3, #0
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3710      	adds	r7, #16
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}

080160ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80160ce:	b580      	push	{r7, lr}
 80160d0:	b084      	sub	sp, #16
 80160d2:	af00      	add	r7, sp, #0
 80160d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	32b0      	adds	r2, #176	@ 0xb0
 80160e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d101      	bne.n	80160f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80160ec:	2303      	movs	r3, #3
 80160ee:	e024      	b.n	801613a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160f6:	687a      	ldr	r2, [r7, #4]
 80160f8:	33b0      	adds	r3, #176	@ 0xb0
 80160fa:	009b      	lsls	r3, r3, #2
 80160fc:	4413      	add	r3, r2
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d019      	beq.n	8016138 <USBD_CDC_EP0_RxReady+0x6a>
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801610a:	2bff      	cmp	r3, #255	@ 0xff
 801610c:	d014      	beq.n	8016138 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016114:	687a      	ldr	r2, [r7, #4]
 8016116:	33b0      	adds	r3, #176	@ 0xb0
 8016118:	009b      	lsls	r3, r3, #2
 801611a:	4413      	add	r3, r2
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	689b      	ldr	r3, [r3, #8]
 8016120:	68fa      	ldr	r2, [r7, #12]
 8016122:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016126:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016128:	68fa      	ldr	r2, [r7, #12]
 801612a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801612e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	22ff      	movs	r2, #255	@ 0xff
 8016134:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016138:	2300      	movs	r3, #0
}
 801613a:	4618      	mov	r0, r3
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
	...

08016144 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b086      	sub	sp, #24
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801614c:	2182      	movs	r1, #130	@ 0x82
 801614e:	4818      	ldr	r0, [pc, #96]	@ (80161b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016150:	f000 fd4f 	bl	8016bf2 <USBD_GetEpDesc>
 8016154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016156:	2101      	movs	r1, #1
 8016158:	4815      	ldr	r0, [pc, #84]	@ (80161b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801615a:	f000 fd4a 	bl	8016bf2 <USBD_GetEpDesc>
 801615e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016160:	2181      	movs	r1, #129	@ 0x81
 8016162:	4813      	ldr	r0, [pc, #76]	@ (80161b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016164:	f000 fd45 	bl	8016bf2 <USBD_GetEpDesc>
 8016168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d002      	beq.n	8016176 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	2210      	movs	r2, #16
 8016174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d006      	beq.n	801618a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	2200      	movs	r2, #0
 8016180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016184:	711a      	strb	r2, [r3, #4]
 8016186:	2200      	movs	r2, #0
 8016188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d006      	beq.n	801619e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2200      	movs	r2, #0
 8016194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016198:	711a      	strb	r2, [r3, #4]
 801619a:	2200      	movs	r2, #0
 801619c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2243      	movs	r2, #67	@ 0x43
 80161a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161a4:	4b02      	ldr	r3, [pc, #8]	@ (80161b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3718      	adds	r7, #24
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	2400006c 	.word	0x2400006c

080161b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b086      	sub	sp, #24
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80161bc:	2182      	movs	r1, #130	@ 0x82
 80161be:	4818      	ldr	r0, [pc, #96]	@ (8016220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161c0:	f000 fd17 	bl	8016bf2 <USBD_GetEpDesc>
 80161c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161c6:	2101      	movs	r1, #1
 80161c8:	4815      	ldr	r0, [pc, #84]	@ (8016220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161ca:	f000 fd12 	bl	8016bf2 <USBD_GetEpDesc>
 80161ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161d0:	2181      	movs	r1, #129	@ 0x81
 80161d2:	4813      	ldr	r0, [pc, #76]	@ (8016220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80161d4:	f000 fd0d 	bl	8016bf2 <USBD_GetEpDesc>
 80161d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d002      	beq.n	80161e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	2210      	movs	r2, #16
 80161e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80161e6:	693b      	ldr	r3, [r7, #16]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d006      	beq.n	80161fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80161ec:	693b      	ldr	r3, [r7, #16]
 80161ee:	2200      	movs	r2, #0
 80161f0:	711a      	strb	r2, [r3, #4]
 80161f2:	2200      	movs	r2, #0
 80161f4:	f042 0202 	orr.w	r2, r2, #2
 80161f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d006      	beq.n	801620e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2200      	movs	r2, #0
 8016204:	711a      	strb	r2, [r3, #4]
 8016206:	2200      	movs	r2, #0
 8016208:	f042 0202 	orr.w	r2, r2, #2
 801620c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2243      	movs	r2, #67	@ 0x43
 8016212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016214:	4b02      	ldr	r3, [pc, #8]	@ (8016220 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016216:	4618      	mov	r0, r3
 8016218:	3718      	adds	r7, #24
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop
 8016220:	2400006c 	.word	0x2400006c

08016224 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b086      	sub	sp, #24
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801622c:	2182      	movs	r1, #130	@ 0x82
 801622e:	4818      	ldr	r0, [pc, #96]	@ (8016290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016230:	f000 fcdf 	bl	8016bf2 <USBD_GetEpDesc>
 8016234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016236:	2101      	movs	r1, #1
 8016238:	4815      	ldr	r0, [pc, #84]	@ (8016290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801623a:	f000 fcda 	bl	8016bf2 <USBD_GetEpDesc>
 801623e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016240:	2181      	movs	r1, #129	@ 0x81
 8016242:	4813      	ldr	r0, [pc, #76]	@ (8016290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016244:	f000 fcd5 	bl	8016bf2 <USBD_GetEpDesc>
 8016248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d002      	beq.n	8016256 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016250:	697b      	ldr	r3, [r7, #20]
 8016252:	2210      	movs	r2, #16
 8016254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016256:	693b      	ldr	r3, [r7, #16]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d006      	beq.n	801626a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	2200      	movs	r2, #0
 8016260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016264:	711a      	strb	r2, [r3, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d006      	beq.n	801627e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2200      	movs	r2, #0
 8016274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016278:	711a      	strb	r2, [r3, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2243      	movs	r2, #67	@ 0x43
 8016282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016284:	4b02      	ldr	r3, [pc, #8]	@ (8016290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016286:	4618      	mov	r0, r3
 8016288:	3718      	adds	r7, #24
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	2400006c 	.word	0x2400006c

08016294 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016294:	b480      	push	{r7}
 8016296:	b083      	sub	sp, #12
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	220a      	movs	r2, #10
 80162a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80162a2:	4b03      	ldr	r3, [pc, #12]	@ (80162b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	370c      	adds	r7, #12
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr
 80162b0:	24000028 	.word	0x24000028

080162b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80162b4:	b480      	push	{r7}
 80162b6:	b083      	sub	sp, #12
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
 80162bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80162c4:	2303      	movs	r3, #3
 80162c6:	e009      	b.n	80162dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80162ce:	687a      	ldr	r2, [r7, #4]
 80162d0:	33b0      	adds	r3, #176	@ 0xb0
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	4413      	add	r3, r2
 80162d6:	683a      	ldr	r2, [r7, #0]
 80162d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80162da:	2300      	movs	r3, #0
}
 80162dc:	4618      	mov	r0, r3
 80162de:	370c      	adds	r7, #12
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b087      	sub	sp, #28
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	32b0      	adds	r2, #176	@ 0xb0
 80162fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016302:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d101      	bne.n	801630e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801630a:	2303      	movs	r3, #3
 801630c:	e008      	b.n	8016320 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801630e:	697b      	ldr	r3, [r7, #20]
 8016310:	68ba      	ldr	r2, [r7, #8]
 8016312:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801631e:	2300      	movs	r3, #0
}
 8016320:	4618      	mov	r0, r3
 8016322:	371c      	adds	r7, #28
 8016324:	46bd      	mov	sp, r7
 8016326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632a:	4770      	bx	lr

0801632c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801632c:	b480      	push	{r7}
 801632e:	b085      	sub	sp, #20
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
 8016334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	32b0      	adds	r2, #176	@ 0xb0
 8016340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d101      	bne.n	8016350 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801634c:	2303      	movs	r3, #3
 801634e:	e004      	b.n	801635a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	683a      	ldr	r2, [r7, #0]
 8016354:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016358:	2300      	movs	r3, #0
}
 801635a:	4618      	mov	r0, r3
 801635c:	3714      	adds	r7, #20
 801635e:	46bd      	mov	sp, r7
 8016360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016364:	4770      	bx	lr
	...

08016368 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	32b0      	adds	r2, #176	@ 0xb0
 801637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801637e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016380:	2301      	movs	r3, #1
 8016382:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d101      	bne.n	801638e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801638a:	2303      	movs	r3, #3
 801638c:	e025      	b.n	80163da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016394:	2b00      	cmp	r3, #0
 8016396:	d11f      	bne.n	80163d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	2201      	movs	r2, #1
 801639c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80163a0:	4b10      	ldr	r3, [pc, #64]	@ (80163e4 <USBD_CDC_TransmitPacket+0x7c>)
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	f003 020f 	and.w	r2, r3, #15
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80163ae:	6878      	ldr	r0, [r7, #4]
 80163b0:	4613      	mov	r3, r2
 80163b2:	009b      	lsls	r3, r3, #2
 80163b4:	4413      	add	r3, r2
 80163b6:	009b      	lsls	r3, r3, #2
 80163b8:	4403      	add	r3, r0
 80163ba:	3318      	adds	r3, #24
 80163bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80163be:	4b09      	ldr	r3, [pc, #36]	@ (80163e4 <USBD_CDC_TransmitPacket+0x7c>)
 80163c0:	7819      	ldrb	r1, [r3, #0]
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	f002 f83d 	bl	801844e <USBD_LL_Transmit>

    ret = USBD_OK;
 80163d4:	2300      	movs	r3, #0
 80163d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80163d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163da:	4618      	mov	r0, r3
 80163dc:	3710      	adds	r7, #16
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	240000af 	.word	0x240000af

080163e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	32b0      	adds	r2, #176	@ 0xb0
 80163fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	32b0      	adds	r2, #176	@ 0xb0
 801640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d101      	bne.n	8016416 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016412:	2303      	movs	r3, #3
 8016414:	e018      	b.n	8016448 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	7c1b      	ldrb	r3, [r3, #16]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d10a      	bne.n	8016434 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801641e:	4b0c      	ldr	r3, [pc, #48]	@ (8016450 <USBD_CDC_ReceivePacket+0x68>)
 8016420:	7819      	ldrb	r1, [r3, #0]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f002 f82f 	bl	8018490 <USBD_LL_PrepareReceive>
 8016432:	e008      	b.n	8016446 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016434:	4b06      	ldr	r3, [pc, #24]	@ (8016450 <USBD_CDC_ReceivePacket+0x68>)
 8016436:	7819      	ldrb	r1, [r3, #0]
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801643e:	2340      	movs	r3, #64	@ 0x40
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f002 f825 	bl	8018490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016446:	2300      	movs	r3, #0
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}
 8016450:	240000b0 	.word	0x240000b0

08016454 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	4613      	mov	r3, r2
 8016460:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d101      	bne.n	801646c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016468:	2303      	movs	r3, #3
 801646a:	e01f      	b.n	80164ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2200      	movs	r2, #0
 8016470:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2200      	movs	r2, #0
 8016478:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2200      	movs	r2, #0
 8016480:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d003      	beq.n	8016492 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	68ba      	ldr	r2, [r7, #8]
 801648e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2201      	movs	r2, #1
 8016496:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	79fa      	ldrb	r2, [r7, #7]
 801649e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80164a0:	68f8      	ldr	r0, [r7, #12]
 80164a2:	f001 fe9b 	bl	80181dc <USBD_LL_Init>
 80164a6:	4603      	mov	r3, r0
 80164a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80164aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3718      	adds	r7, #24
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}

080164b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80164be:	2300      	movs	r3, #0
 80164c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d101      	bne.n	80164cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80164c8:	2303      	movs	r3, #3
 80164ca:	e025      	b.n	8016518 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	32ae      	adds	r2, #174	@ 0xae
 80164de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d00f      	beq.n	8016508 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	32ae      	adds	r2, #174	@ 0xae
 80164f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164f8:	f107 020e 	add.w	r2, r7, #14
 80164fc:	4610      	mov	r0, r2
 80164fe:	4798      	blx	r3
 8016500:	4602      	mov	r2, r0
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801650e:	1c5a      	adds	r2, r3, #1
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016516:	2300      	movs	r3, #0
}
 8016518:	4618      	mov	r0, r3
 801651a:	3710      	adds	r7, #16
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f001 fea7 	bl	801827c <USBD_LL_Start>
 801652e:	4603      	mov	r3, r0
}
 8016530:	4618      	mov	r0, r3
 8016532:	3708      	adds	r7, #8
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016538:	b480      	push	{r7}
 801653a:	b083      	sub	sp, #12
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016540:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016542:	4618      	mov	r0, r3
 8016544:	370c      	adds	r7, #12
 8016546:	46bd      	mov	sp, r7
 8016548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654c:	4770      	bx	lr

0801654e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801654e:	b580      	push	{r7, lr}
 8016550:	b084      	sub	sp, #16
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	460b      	mov	r3, r1
 8016558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801655a:	2300      	movs	r3, #0
 801655c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016564:	2b00      	cmp	r3, #0
 8016566:	d009      	beq.n	801657c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	78fa      	ldrb	r2, [r7, #3]
 8016572:	4611      	mov	r1, r2
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	4798      	blx	r3
 8016578:	4603      	mov	r3, r0
 801657a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801657c:	7bfb      	ldrb	r3, [r7, #15]
}
 801657e:	4618      	mov	r0, r3
 8016580:	3710      	adds	r7, #16
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}

08016586 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016586:	b580      	push	{r7, lr}
 8016588:	b084      	sub	sp, #16
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
 801658e:	460b      	mov	r3, r1
 8016590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016592:	2300      	movs	r3, #0
 8016594:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801659c:	685b      	ldr	r3, [r3, #4]
 801659e:	78fa      	ldrb	r2, [r7, #3]
 80165a0:	4611      	mov	r1, r2
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	4798      	blx	r3
 80165a6:	4603      	mov	r3, r0
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d001      	beq.n	80165b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80165ac:	2303      	movs	r3, #3
 80165ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80165b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	3710      	adds	r7, #16
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd80      	pop	{r7, pc}

080165ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b084      	sub	sp, #16
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80165ca:	6839      	ldr	r1, [r7, #0]
 80165cc:	4618      	mov	r0, r3
 80165ce:	f001 f936 	bl	801783e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2201      	movs	r2, #1
 80165d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80165e0:	461a      	mov	r2, r3
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80165ee:	f003 031f 	and.w	r3, r3, #31
 80165f2:	2b02      	cmp	r3, #2
 80165f4:	d01a      	beq.n	801662c <USBD_LL_SetupStage+0x72>
 80165f6:	2b02      	cmp	r3, #2
 80165f8:	d822      	bhi.n	8016640 <USBD_LL_SetupStage+0x86>
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d002      	beq.n	8016604 <USBD_LL_SetupStage+0x4a>
 80165fe:	2b01      	cmp	r3, #1
 8016600:	d00a      	beq.n	8016618 <USBD_LL_SetupStage+0x5e>
 8016602:	e01d      	b.n	8016640 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801660a:	4619      	mov	r1, r3
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	f000 fb63 	bl	8016cd8 <USBD_StdDevReq>
 8016612:	4603      	mov	r3, r0
 8016614:	73fb      	strb	r3, [r7, #15]
      break;
 8016616:	e020      	b.n	801665a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801661e:	4619      	mov	r1, r3
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f000 fbcb 	bl	8016dbc <USBD_StdItfReq>
 8016626:	4603      	mov	r3, r0
 8016628:	73fb      	strb	r3, [r7, #15]
      break;
 801662a:	e016      	b.n	801665a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016632:	4619      	mov	r1, r3
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f000 fc2d 	bl	8016e94 <USBD_StdEPReq>
 801663a:	4603      	mov	r3, r0
 801663c:	73fb      	strb	r3, [r7, #15]
      break;
 801663e:	e00c      	b.n	801665a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016646:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801664a:	b2db      	uxtb	r3, r3
 801664c:	4619      	mov	r1, r3
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f001 fe74 	bl	801833c <USBD_LL_StallEP>
 8016654:	4603      	mov	r3, r0
 8016656:	73fb      	strb	r3, [r7, #15]
      break;
 8016658:	bf00      	nop
  }

  return ret;
 801665a:	7bfb      	ldrb	r3, [r7, #15]
}
 801665c:	4618      	mov	r0, r3
 801665e:	3710      	adds	r7, #16
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b086      	sub	sp, #24
 8016668:	af00      	add	r7, sp, #0
 801666a:	60f8      	str	r0, [r7, #12]
 801666c:	460b      	mov	r3, r1
 801666e:	607a      	str	r2, [r7, #4]
 8016670:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016672:	2300      	movs	r3, #0
 8016674:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016676:	7afb      	ldrb	r3, [r7, #11]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d16e      	bne.n	801675a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016682:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801668a:	2b03      	cmp	r3, #3
 801668c:	f040 8098 	bne.w	80167c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	689a      	ldr	r2, [r3, #8]
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	68db      	ldr	r3, [r3, #12]
 8016698:	429a      	cmp	r2, r3
 801669a:	d913      	bls.n	80166c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	689a      	ldr	r2, [r3, #8]
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	1ad2      	subs	r2, r2, r3
 80166a6:	693b      	ldr	r3, [r7, #16]
 80166a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80166aa:	693b      	ldr	r3, [r7, #16]
 80166ac:	68da      	ldr	r2, [r3, #12]
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	689b      	ldr	r3, [r3, #8]
 80166b2:	4293      	cmp	r3, r2
 80166b4:	bf28      	it	cs
 80166b6:	4613      	movcs	r3, r2
 80166b8:	461a      	mov	r2, r3
 80166ba:	6879      	ldr	r1, [r7, #4]
 80166bc:	68f8      	ldr	r0, [r7, #12]
 80166be:	f001 f9be 	bl	8017a3e <USBD_CtlContinueRx>
 80166c2:	e07d      	b.n	80167c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80166ca:	f003 031f 	and.w	r3, r3, #31
 80166ce:	2b02      	cmp	r3, #2
 80166d0:	d014      	beq.n	80166fc <USBD_LL_DataOutStage+0x98>
 80166d2:	2b02      	cmp	r3, #2
 80166d4:	d81d      	bhi.n	8016712 <USBD_LL_DataOutStage+0xae>
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d002      	beq.n	80166e0 <USBD_LL_DataOutStage+0x7c>
 80166da:	2b01      	cmp	r3, #1
 80166dc:	d003      	beq.n	80166e6 <USBD_LL_DataOutStage+0x82>
 80166de:	e018      	b.n	8016712 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80166e0:	2300      	movs	r3, #0
 80166e2:	75bb      	strb	r3, [r7, #22]
            break;
 80166e4:	e018      	b.n	8016718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80166ec:	b2db      	uxtb	r3, r3
 80166ee:	4619      	mov	r1, r3
 80166f0:	68f8      	ldr	r0, [r7, #12]
 80166f2:	f000 fa64 	bl	8016bbe <USBD_CoreFindIF>
 80166f6:	4603      	mov	r3, r0
 80166f8:	75bb      	strb	r3, [r7, #22]
            break;
 80166fa:	e00d      	b.n	8016718 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016702:	b2db      	uxtb	r3, r3
 8016704:	4619      	mov	r1, r3
 8016706:	68f8      	ldr	r0, [r7, #12]
 8016708:	f000 fa66 	bl	8016bd8 <USBD_CoreFindEP>
 801670c:	4603      	mov	r3, r0
 801670e:	75bb      	strb	r3, [r7, #22]
            break;
 8016710:	e002      	b.n	8016718 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016712:	2300      	movs	r3, #0
 8016714:	75bb      	strb	r3, [r7, #22]
            break;
 8016716:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016718:	7dbb      	ldrb	r3, [r7, #22]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d119      	bne.n	8016752 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016724:	b2db      	uxtb	r3, r3
 8016726:	2b03      	cmp	r3, #3
 8016728:	d113      	bne.n	8016752 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801672a:	7dba      	ldrb	r2, [r7, #22]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	32ae      	adds	r2, #174	@ 0xae
 8016730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016734:	691b      	ldr	r3, [r3, #16]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d00b      	beq.n	8016752 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801673a:	7dba      	ldrb	r2, [r7, #22]
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016742:	7dba      	ldrb	r2, [r7, #22]
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	32ae      	adds	r2, #174	@ 0xae
 8016748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801674c:	691b      	ldr	r3, [r3, #16]
 801674e:	68f8      	ldr	r0, [r7, #12]
 8016750:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016752:	68f8      	ldr	r0, [r7, #12]
 8016754:	f001 f984 	bl	8017a60 <USBD_CtlSendStatus>
 8016758:	e032      	b.n	80167c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801675a:	7afb      	ldrb	r3, [r7, #11]
 801675c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016760:	b2db      	uxtb	r3, r3
 8016762:	4619      	mov	r1, r3
 8016764:	68f8      	ldr	r0, [r7, #12]
 8016766:	f000 fa37 	bl	8016bd8 <USBD_CoreFindEP>
 801676a:	4603      	mov	r3, r0
 801676c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801676e:	7dbb      	ldrb	r3, [r7, #22]
 8016770:	2bff      	cmp	r3, #255	@ 0xff
 8016772:	d025      	beq.n	80167c0 <USBD_LL_DataOutStage+0x15c>
 8016774:	7dbb      	ldrb	r3, [r7, #22]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d122      	bne.n	80167c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016780:	b2db      	uxtb	r3, r3
 8016782:	2b03      	cmp	r3, #3
 8016784:	d117      	bne.n	80167b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016786:	7dba      	ldrb	r2, [r7, #22]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	32ae      	adds	r2, #174	@ 0xae
 801678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016790:	699b      	ldr	r3, [r3, #24]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d00f      	beq.n	80167b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016796:	7dba      	ldrb	r2, [r7, #22]
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801679e:	7dba      	ldrb	r2, [r7, #22]
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	32ae      	adds	r2, #174	@ 0xae
 80167a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167a8:	699b      	ldr	r3, [r3, #24]
 80167aa:	7afa      	ldrb	r2, [r7, #11]
 80167ac:	4611      	mov	r1, r2
 80167ae:	68f8      	ldr	r0, [r7, #12]
 80167b0:	4798      	blx	r3
 80167b2:	4603      	mov	r3, r0
 80167b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80167b6:	7dfb      	ldrb	r3, [r7, #23]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d001      	beq.n	80167c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80167bc:	7dfb      	ldrb	r3, [r7, #23]
 80167be:	e000      	b.n	80167c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80167c0:	2300      	movs	r3, #0
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3718      	adds	r7, #24
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b086      	sub	sp, #24
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	60f8      	str	r0, [r7, #12]
 80167d2:	460b      	mov	r3, r1
 80167d4:	607a      	str	r2, [r7, #4]
 80167d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80167d8:	7afb      	ldrb	r3, [r7, #11]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d16f      	bne.n	80168be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	3314      	adds	r3, #20
 80167e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80167ea:	2b02      	cmp	r3, #2
 80167ec:	d15a      	bne.n	80168a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80167ee:	693b      	ldr	r3, [r7, #16]
 80167f0:	689a      	ldr	r2, [r3, #8]
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	68db      	ldr	r3, [r3, #12]
 80167f6:	429a      	cmp	r2, r3
 80167f8:	d914      	bls.n	8016824 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	689a      	ldr	r2, [r3, #8]
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	68db      	ldr	r3, [r3, #12]
 8016802:	1ad2      	subs	r2, r2, r3
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	689b      	ldr	r3, [r3, #8]
 801680c:	461a      	mov	r2, r3
 801680e:	6879      	ldr	r1, [r7, #4]
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f001 f8e6 	bl	80179e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016816:	2300      	movs	r3, #0
 8016818:	2200      	movs	r2, #0
 801681a:	2100      	movs	r1, #0
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f001 fe37 	bl	8018490 <USBD_LL_PrepareReceive>
 8016822:	e03f      	b.n	80168a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016824:	693b      	ldr	r3, [r7, #16]
 8016826:	68da      	ldr	r2, [r3, #12]
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	689b      	ldr	r3, [r3, #8]
 801682c:	429a      	cmp	r2, r3
 801682e:	d11c      	bne.n	801686a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	685a      	ldr	r2, [r3, #4]
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016838:	429a      	cmp	r2, r3
 801683a:	d316      	bcc.n	801686a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	685a      	ldr	r2, [r3, #4]
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016846:	429a      	cmp	r2, r3
 8016848:	d20f      	bcs.n	801686a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801684a:	2200      	movs	r2, #0
 801684c:	2100      	movs	r1, #0
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f001 f8c7 	bl	80179e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2200      	movs	r2, #0
 8016858:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801685c:	2300      	movs	r3, #0
 801685e:	2200      	movs	r2, #0
 8016860:	2100      	movs	r1, #0
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	f001 fe14 	bl	8018490 <USBD_LL_PrepareReceive>
 8016868:	e01c      	b.n	80168a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016870:	b2db      	uxtb	r3, r3
 8016872:	2b03      	cmp	r3, #3
 8016874:	d10f      	bne.n	8016896 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801687c:	68db      	ldr	r3, [r3, #12]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d009      	beq.n	8016896 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2200      	movs	r2, #0
 8016886:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	68f8      	ldr	r0, [r7, #12]
 8016894:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016896:	2180      	movs	r1, #128	@ 0x80
 8016898:	68f8      	ldr	r0, [r7, #12]
 801689a:	f001 fd4f 	bl	801833c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	f001 f8f1 	bl	8017a86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d03a      	beq.n	8016924 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80168ae:	68f8      	ldr	r0, [r7, #12]
 80168b0:	f7ff fe42 	bl	8016538 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2200      	movs	r2, #0
 80168b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80168bc:	e032      	b.n	8016924 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80168be:	7afb      	ldrb	r3, [r7, #11]
 80168c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80168c4:	b2db      	uxtb	r3, r3
 80168c6:	4619      	mov	r1, r3
 80168c8:	68f8      	ldr	r0, [r7, #12]
 80168ca:	f000 f985 	bl	8016bd8 <USBD_CoreFindEP>
 80168ce:	4603      	mov	r3, r0
 80168d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80168d2:	7dfb      	ldrb	r3, [r7, #23]
 80168d4:	2bff      	cmp	r3, #255	@ 0xff
 80168d6:	d025      	beq.n	8016924 <USBD_LL_DataInStage+0x15a>
 80168d8:	7dfb      	ldrb	r3, [r7, #23]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d122      	bne.n	8016924 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	2b03      	cmp	r3, #3
 80168e8:	d11c      	bne.n	8016924 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80168ea:	7dfa      	ldrb	r2, [r7, #23]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	32ae      	adds	r2, #174	@ 0xae
 80168f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168f4:	695b      	ldr	r3, [r3, #20]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d014      	beq.n	8016924 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80168fa:	7dfa      	ldrb	r2, [r7, #23]
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016902:	7dfa      	ldrb	r2, [r7, #23]
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	32ae      	adds	r2, #174	@ 0xae
 8016908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801690c:	695b      	ldr	r3, [r3, #20]
 801690e:	7afa      	ldrb	r2, [r7, #11]
 8016910:	4611      	mov	r1, r2
 8016912:	68f8      	ldr	r0, [r7, #12]
 8016914:	4798      	blx	r3
 8016916:	4603      	mov	r3, r0
 8016918:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801691a:	7dbb      	ldrb	r3, [r7, #22]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d001      	beq.n	8016924 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016920:	7dbb      	ldrb	r3, [r7, #22]
 8016922:	e000      	b.n	8016926 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016924:	2300      	movs	r3, #0
}
 8016926:	4618      	mov	r0, r3
 8016928:	3718      	adds	r7, #24
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b084      	sub	sp, #16
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016936:	2300      	movs	r3, #0
 8016938:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2201      	movs	r2, #1
 801693e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2200      	movs	r2, #0
 8016946:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2200      	movs	r2, #0
 801694e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2200      	movs	r2, #0
 801695c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016966:	2b00      	cmp	r3, #0
 8016968:	d014      	beq.n	8016994 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d00e      	beq.n	8016994 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	6852      	ldr	r2, [r2, #4]
 8016982:	b2d2      	uxtb	r2, r2
 8016984:	4611      	mov	r1, r2
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	4798      	blx	r3
 801698a:	4603      	mov	r3, r0
 801698c:	2b00      	cmp	r3, #0
 801698e:	d001      	beq.n	8016994 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016990:	2303      	movs	r3, #3
 8016992:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016994:	2340      	movs	r3, #64	@ 0x40
 8016996:	2200      	movs	r2, #0
 8016998:	2100      	movs	r1, #0
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f001 fc89 	bl	80182b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2201      	movs	r2, #1
 80169a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2240      	movs	r2, #64	@ 0x40
 80169ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80169b0:	2340      	movs	r3, #64	@ 0x40
 80169b2:	2200      	movs	r2, #0
 80169b4:	2180      	movs	r1, #128	@ 0x80
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f001 fc7b 	bl	80182b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2201      	movs	r2, #1
 80169c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2240      	movs	r2, #64	@ 0x40
 80169c6:	621a      	str	r2, [r3, #32]

  return ret;
 80169c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80169d2:	b480      	push	{r7}
 80169d4:	b083      	sub	sp, #12
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	460b      	mov	r3, r1
 80169dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	78fa      	ldrb	r2, [r7, #3]
 80169e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80169e4:	2300      	movs	r3, #0
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	370c      	adds	r7, #12
 80169ea:	46bd      	mov	sp, r7
 80169ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f0:	4770      	bx	lr

080169f2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80169f2:	b480      	push	{r7}
 80169f4:	b083      	sub	sp, #12
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	2b04      	cmp	r3, #4
 8016a04:	d006      	beq.n	8016a14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a0c:	b2da      	uxtb	r2, r3
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2204      	movs	r2, #4
 8016a18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	370c      	adds	r7, #12
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr

08016a2a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016a2a:	b480      	push	{r7}
 8016a2c:	b083      	sub	sp, #12
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a38:	b2db      	uxtb	r3, r3
 8016a3a:	2b04      	cmp	r3, #4
 8016a3c:	d106      	bne.n	8016a4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016a44:	b2da      	uxtb	r2, r3
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016a4c:	2300      	movs	r3, #0
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	370c      	adds	r7, #12
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr

08016a5a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016a5a:	b580      	push	{r7, lr}
 8016a5c:	b082      	sub	sp, #8
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a68:	b2db      	uxtb	r3, r3
 8016a6a:	2b03      	cmp	r3, #3
 8016a6c:	d110      	bne.n	8016a90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d00b      	beq.n	8016a90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a7e:	69db      	ldr	r3, [r3, #28]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d005      	beq.n	8016a90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a8a:	69db      	ldr	r3, [r3, #28]
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016a90:	2300      	movs	r3, #0
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3708      	adds	r7, #8
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}

08016a9a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016a9a:	b580      	push	{r7, lr}
 8016a9c:	b082      	sub	sp, #8
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	32ae      	adds	r2, #174	@ 0xae
 8016ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d101      	bne.n	8016abc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016ab8:	2303      	movs	r3, #3
 8016aba:	e01c      	b.n	8016af6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	2b03      	cmp	r3, #3
 8016ac6:	d115      	bne.n	8016af4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	32ae      	adds	r2, #174	@ 0xae
 8016ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ad6:	6a1b      	ldr	r3, [r3, #32]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00b      	beq.n	8016af4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	32ae      	adds	r2, #174	@ 0xae
 8016ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aea:	6a1b      	ldr	r3, [r3, #32]
 8016aec:	78fa      	ldrb	r2, [r7, #3]
 8016aee:	4611      	mov	r1, r2
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016af4:	2300      	movs	r3, #0
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b082      	sub	sp, #8
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
 8016b06:	460b      	mov	r3, r1
 8016b08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	32ae      	adds	r2, #174	@ 0xae
 8016b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d101      	bne.n	8016b20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016b1c:	2303      	movs	r3, #3
 8016b1e:	e01c      	b.n	8016b5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b26:	b2db      	uxtb	r3, r3
 8016b28:	2b03      	cmp	r3, #3
 8016b2a:	d115      	bne.n	8016b58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	32ae      	adds	r2, #174	@ 0xae
 8016b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00b      	beq.n	8016b58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	32ae      	adds	r2, #174	@ 0xae
 8016b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b50:	78fa      	ldrb	r2, [r7, #3]
 8016b52:	4611      	mov	r1, r2
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016b62:	b480      	push	{r7}
 8016b64:	b083      	sub	sp, #12
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b6a:	2300      	movs	r3, #0
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	370c      	adds	r7, #12
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016b80:	2300      	movs	r3, #0
 8016b82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2201      	movs	r2, #1
 8016b88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d00e      	beq.n	8016bb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	687a      	ldr	r2, [r7, #4]
 8016ba0:	6852      	ldr	r2, [r2, #4]
 8016ba2:	b2d2      	uxtb	r2, r2
 8016ba4:	4611      	mov	r1, r2
 8016ba6:	6878      	ldr	r0, [r7, #4]
 8016ba8:	4798      	blx	r3
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d001      	beq.n	8016bb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016bb0:	2303      	movs	r3, #3
 8016bb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3710      	adds	r7, #16
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016bbe:	b480      	push	{r7}
 8016bc0:	b083      	sub	sp, #12
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
 8016bc6:	460b      	mov	r3, r1
 8016bc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016bca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016bcc:	4618      	mov	r0, r3
 8016bce:	370c      	adds	r7, #12
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd6:	4770      	bx	lr

08016bd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b083      	sub	sp, #12
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	460b      	mov	r3, r1
 8016be2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016be4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	370c      	adds	r7, #12
 8016bea:	46bd      	mov	sp, r7
 8016bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf0:	4770      	bx	lr

08016bf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016bf2:	b580      	push	{r7, lr}
 8016bf4:	b086      	sub	sp, #24
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	6078      	str	r0, [r7, #4]
 8016bfa:	460b      	mov	r3, r1
 8016bfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016c06:	2300      	movs	r3, #0
 8016c08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	885b      	ldrh	r3, [r3, #2]
 8016c0e:	b29b      	uxth	r3, r3
 8016c10:	68fa      	ldr	r2, [r7, #12]
 8016c12:	7812      	ldrb	r2, [r2, #0]
 8016c14:	4293      	cmp	r3, r2
 8016c16:	d91f      	bls.n	8016c58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016c1e:	e013      	b.n	8016c48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016c20:	f107 030a 	add.w	r3, r7, #10
 8016c24:	4619      	mov	r1, r3
 8016c26:	6978      	ldr	r0, [r7, #20]
 8016c28:	f000 f81b 	bl	8016c62 <USBD_GetNextDesc>
 8016c2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	785b      	ldrb	r3, [r3, #1]
 8016c32:	2b05      	cmp	r3, #5
 8016c34:	d108      	bne.n	8016c48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016c3a:	693b      	ldr	r3, [r7, #16]
 8016c3c:	789b      	ldrb	r3, [r3, #2]
 8016c3e:	78fa      	ldrb	r2, [r7, #3]
 8016c40:	429a      	cmp	r2, r3
 8016c42:	d008      	beq.n	8016c56 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016c44:	2300      	movs	r3, #0
 8016c46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	885b      	ldrh	r3, [r3, #2]
 8016c4c:	b29a      	uxth	r2, r3
 8016c4e:	897b      	ldrh	r3, [r7, #10]
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d8e5      	bhi.n	8016c20 <USBD_GetEpDesc+0x2e>
 8016c54:	e000      	b.n	8016c58 <USBD_GetEpDesc+0x66>
          break;
 8016c56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016c58:	693b      	ldr	r3, [r7, #16]
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3718      	adds	r7, #24
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016c62:	b480      	push	{r7}
 8016c64:	b085      	sub	sp, #20
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	6078      	str	r0, [r7, #4]
 8016c6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	881b      	ldrh	r3, [r3, #0]
 8016c74:	68fa      	ldr	r2, [r7, #12]
 8016c76:	7812      	ldrb	r2, [r2, #0]
 8016c78:	4413      	add	r3, r2
 8016c7a:	b29a      	uxth	r2, r3
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	461a      	mov	r2, r3
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	4413      	add	r3, r2
 8016c8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
}
 8016c8e:	4618      	mov	r0, r3
 8016c90:	3714      	adds	r7, #20
 8016c92:	46bd      	mov	sp, r7
 8016c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c98:	4770      	bx	lr

08016c9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c9a:	b480      	push	{r7}
 8016c9c:	b087      	sub	sp, #28
 8016c9e:	af00      	add	r7, sp, #0
 8016ca0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016cac:	697b      	ldr	r3, [r7, #20]
 8016cae:	3301      	adds	r3, #1
 8016cb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	781b      	ldrb	r3, [r3, #0]
 8016cb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016cb8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016cbc:	021b      	lsls	r3, r3, #8
 8016cbe:	b21a      	sxth	r2, r3
 8016cc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016cc4:	4313      	orrs	r3, r2
 8016cc6:	b21b      	sxth	r3, r3
 8016cc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016cca:	89fb      	ldrh	r3, [r7, #14]
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	371c      	adds	r7, #28
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd6:	4770      	bx	lr

08016cd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016cee:	2b40      	cmp	r3, #64	@ 0x40
 8016cf0:	d005      	beq.n	8016cfe <USBD_StdDevReq+0x26>
 8016cf2:	2b40      	cmp	r3, #64	@ 0x40
 8016cf4:	d857      	bhi.n	8016da6 <USBD_StdDevReq+0xce>
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d00f      	beq.n	8016d1a <USBD_StdDevReq+0x42>
 8016cfa:	2b20      	cmp	r3, #32
 8016cfc:	d153      	bne.n	8016da6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	32ae      	adds	r2, #174	@ 0xae
 8016d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d0c:	689b      	ldr	r3, [r3, #8]
 8016d0e:	6839      	ldr	r1, [r7, #0]
 8016d10:	6878      	ldr	r0, [r7, #4]
 8016d12:	4798      	blx	r3
 8016d14:	4603      	mov	r3, r0
 8016d16:	73fb      	strb	r3, [r7, #15]
      break;
 8016d18:	e04a      	b.n	8016db0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	785b      	ldrb	r3, [r3, #1]
 8016d1e:	2b09      	cmp	r3, #9
 8016d20:	d83b      	bhi.n	8016d9a <USBD_StdDevReq+0xc2>
 8016d22:	a201      	add	r2, pc, #4	@ (adr r2, 8016d28 <USBD_StdDevReq+0x50>)
 8016d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d28:	08016d7d 	.word	0x08016d7d
 8016d2c:	08016d91 	.word	0x08016d91
 8016d30:	08016d9b 	.word	0x08016d9b
 8016d34:	08016d87 	.word	0x08016d87
 8016d38:	08016d9b 	.word	0x08016d9b
 8016d3c:	08016d5b 	.word	0x08016d5b
 8016d40:	08016d51 	.word	0x08016d51
 8016d44:	08016d9b 	.word	0x08016d9b
 8016d48:	08016d73 	.word	0x08016d73
 8016d4c:	08016d65 	.word	0x08016d65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016d50:	6839      	ldr	r1, [r7, #0]
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f000 fa3c 	bl	80171d0 <USBD_GetDescriptor>
          break;
 8016d58:	e024      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016d5a:	6839      	ldr	r1, [r7, #0]
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f000 fbcb 	bl	80174f8 <USBD_SetAddress>
          break;
 8016d62:	e01f      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016d64:	6839      	ldr	r1, [r7, #0]
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 fc0a 	bl	8017580 <USBD_SetConfig>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	73fb      	strb	r3, [r7, #15]
          break;
 8016d70:	e018      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016d72:	6839      	ldr	r1, [r7, #0]
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 fcad 	bl	80176d4 <USBD_GetConfig>
          break;
 8016d7a:	e013      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016d7c:	6839      	ldr	r1, [r7, #0]
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f000 fcde 	bl	8017740 <USBD_GetStatus>
          break;
 8016d84:	e00e      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016d86:	6839      	ldr	r1, [r7, #0]
 8016d88:	6878      	ldr	r0, [r7, #4]
 8016d8a:	f000 fd0d 	bl	80177a8 <USBD_SetFeature>
          break;
 8016d8e:	e009      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d90:	6839      	ldr	r1, [r7, #0]
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f000 fd31 	bl	80177fa <USBD_ClrFeature>
          break;
 8016d98:	e004      	b.n	8016da4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016d9a:	6839      	ldr	r1, [r7, #0]
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f000 fd88 	bl	80178b2 <USBD_CtlError>
          break;
 8016da2:	bf00      	nop
      }
      break;
 8016da4:	e004      	b.n	8016db0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016da6:	6839      	ldr	r1, [r7, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f000 fd82 	bl	80178b2 <USBD_CtlError>
      break;
 8016dae:	bf00      	nop
  }

  return ret;
 8016db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop

08016dbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b084      	sub	sp, #16
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
 8016dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016dd2:	2b40      	cmp	r3, #64	@ 0x40
 8016dd4:	d005      	beq.n	8016de2 <USBD_StdItfReq+0x26>
 8016dd6:	2b40      	cmp	r3, #64	@ 0x40
 8016dd8:	d852      	bhi.n	8016e80 <USBD_StdItfReq+0xc4>
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d001      	beq.n	8016de2 <USBD_StdItfReq+0x26>
 8016dde:	2b20      	cmp	r3, #32
 8016de0:	d14e      	bne.n	8016e80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	3b01      	subs	r3, #1
 8016dec:	2b02      	cmp	r3, #2
 8016dee:	d840      	bhi.n	8016e72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	889b      	ldrh	r3, [r3, #4]
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	2b01      	cmp	r3, #1
 8016df8:	d836      	bhi.n	8016e68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	889b      	ldrh	r3, [r3, #4]
 8016dfe:	b2db      	uxtb	r3, r3
 8016e00:	4619      	mov	r1, r3
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f7ff fedb 	bl	8016bbe <USBD_CoreFindIF>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016e0c:	7bbb      	ldrb	r3, [r7, #14]
 8016e0e:	2bff      	cmp	r3, #255	@ 0xff
 8016e10:	d01d      	beq.n	8016e4e <USBD_StdItfReq+0x92>
 8016e12:	7bbb      	ldrb	r3, [r7, #14]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d11a      	bne.n	8016e4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016e18:	7bba      	ldrb	r2, [r7, #14]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	32ae      	adds	r2, #174	@ 0xae
 8016e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e22:	689b      	ldr	r3, [r3, #8]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d00f      	beq.n	8016e48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016e28:	7bba      	ldrb	r2, [r7, #14]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016e30:	7bba      	ldrb	r2, [r7, #14]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	32ae      	adds	r2, #174	@ 0xae
 8016e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e3a:	689b      	ldr	r3, [r3, #8]
 8016e3c:	6839      	ldr	r1, [r7, #0]
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	4798      	blx	r3
 8016e42:	4603      	mov	r3, r0
 8016e44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e46:	e004      	b.n	8016e52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016e48:	2303      	movs	r3, #3
 8016e4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e4c:	e001      	b.n	8016e52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016e4e:	2303      	movs	r3, #3
 8016e50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	88db      	ldrh	r3, [r3, #6]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d110      	bne.n	8016e7c <USBD_StdItfReq+0xc0>
 8016e5a:	7bfb      	ldrb	r3, [r7, #15]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d10d      	bne.n	8016e7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f000 fdfd 	bl	8017a60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e66:	e009      	b.n	8016e7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016e68:	6839      	ldr	r1, [r7, #0]
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f000 fd21 	bl	80178b2 <USBD_CtlError>
          break;
 8016e70:	e004      	b.n	8016e7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016e72:	6839      	ldr	r1, [r7, #0]
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f000 fd1c 	bl	80178b2 <USBD_CtlError>
          break;
 8016e7a:	e000      	b.n	8016e7e <USBD_StdItfReq+0xc2>
          break;
 8016e7c:	bf00      	nop
      }
      break;
 8016e7e:	e004      	b.n	8016e8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016e80:	6839      	ldr	r1, [r7, #0]
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f000 fd15 	bl	80178b2 <USBD_CtlError>
      break;
 8016e88:	bf00      	nop
  }

  return ret;
 8016e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3710      	adds	r7, #16
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	889b      	ldrh	r3, [r3, #4]
 8016ea6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016eb0:	2b40      	cmp	r3, #64	@ 0x40
 8016eb2:	d007      	beq.n	8016ec4 <USBD_StdEPReq+0x30>
 8016eb4:	2b40      	cmp	r3, #64	@ 0x40
 8016eb6:	f200 817f 	bhi.w	80171b8 <USBD_StdEPReq+0x324>
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d02a      	beq.n	8016f14 <USBD_StdEPReq+0x80>
 8016ebe:	2b20      	cmp	r3, #32
 8016ec0:	f040 817a 	bne.w	80171b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016ec4:	7bbb      	ldrb	r3, [r7, #14]
 8016ec6:	4619      	mov	r1, r3
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f7ff fe85 	bl	8016bd8 <USBD_CoreFindEP>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ed2:	7b7b      	ldrb	r3, [r7, #13]
 8016ed4:	2bff      	cmp	r3, #255	@ 0xff
 8016ed6:	f000 8174 	beq.w	80171c2 <USBD_StdEPReq+0x32e>
 8016eda:	7b7b      	ldrb	r3, [r7, #13]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	f040 8170 	bne.w	80171c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016ee2:	7b7a      	ldrb	r2, [r7, #13]
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016eea:	7b7a      	ldrb	r2, [r7, #13]
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	32ae      	adds	r2, #174	@ 0xae
 8016ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ef4:	689b      	ldr	r3, [r3, #8]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	f000 8163 	beq.w	80171c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016efc:	7b7a      	ldrb	r2, [r7, #13]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	32ae      	adds	r2, #174	@ 0xae
 8016f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f06:	689b      	ldr	r3, [r3, #8]
 8016f08:	6839      	ldr	r1, [r7, #0]
 8016f0a:	6878      	ldr	r0, [r7, #4]
 8016f0c:	4798      	blx	r3
 8016f0e:	4603      	mov	r3, r0
 8016f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016f12:	e156      	b.n	80171c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	785b      	ldrb	r3, [r3, #1]
 8016f18:	2b03      	cmp	r3, #3
 8016f1a:	d008      	beq.n	8016f2e <USBD_StdEPReq+0x9a>
 8016f1c:	2b03      	cmp	r3, #3
 8016f1e:	f300 8145 	bgt.w	80171ac <USBD_StdEPReq+0x318>
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	f000 809b 	beq.w	801705e <USBD_StdEPReq+0x1ca>
 8016f28:	2b01      	cmp	r3, #1
 8016f2a:	d03c      	beq.n	8016fa6 <USBD_StdEPReq+0x112>
 8016f2c:	e13e      	b.n	80171ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	2b02      	cmp	r3, #2
 8016f38:	d002      	beq.n	8016f40 <USBD_StdEPReq+0xac>
 8016f3a:	2b03      	cmp	r3, #3
 8016f3c:	d016      	beq.n	8016f6c <USBD_StdEPReq+0xd8>
 8016f3e:	e02c      	b.n	8016f9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f40:	7bbb      	ldrb	r3, [r7, #14]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d00d      	beq.n	8016f62 <USBD_StdEPReq+0xce>
 8016f46:	7bbb      	ldrb	r3, [r7, #14]
 8016f48:	2b80      	cmp	r3, #128	@ 0x80
 8016f4a:	d00a      	beq.n	8016f62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f4c:	7bbb      	ldrb	r3, [r7, #14]
 8016f4e:	4619      	mov	r1, r3
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f001 f9f3 	bl	801833c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f56:	2180      	movs	r1, #128	@ 0x80
 8016f58:	6878      	ldr	r0, [r7, #4]
 8016f5a:	f001 f9ef 	bl	801833c <USBD_LL_StallEP>
 8016f5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f60:	e020      	b.n	8016fa4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016f62:	6839      	ldr	r1, [r7, #0]
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f000 fca4 	bl	80178b2 <USBD_CtlError>
              break;
 8016f6a:	e01b      	b.n	8016fa4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	885b      	ldrh	r3, [r3, #2]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d10e      	bne.n	8016f92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016f74:	7bbb      	ldrb	r3, [r7, #14]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d00b      	beq.n	8016f92 <USBD_StdEPReq+0xfe>
 8016f7a:	7bbb      	ldrb	r3, [r7, #14]
 8016f7c:	2b80      	cmp	r3, #128	@ 0x80
 8016f7e:	d008      	beq.n	8016f92 <USBD_StdEPReq+0xfe>
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	88db      	ldrh	r3, [r3, #6]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d104      	bne.n	8016f92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f88:	7bbb      	ldrb	r3, [r7, #14]
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f001 f9d5 	bl	801833c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f000 fd64 	bl	8017a60 <USBD_CtlSendStatus>

              break;
 8016f98:	e004      	b.n	8016fa4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016f9a:	6839      	ldr	r1, [r7, #0]
 8016f9c:	6878      	ldr	r0, [r7, #4]
 8016f9e:	f000 fc88 	bl	80178b2 <USBD_CtlError>
              break;
 8016fa2:	bf00      	nop
          }
          break;
 8016fa4:	e107      	b.n	80171b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	2b02      	cmp	r3, #2
 8016fb0:	d002      	beq.n	8016fb8 <USBD_StdEPReq+0x124>
 8016fb2:	2b03      	cmp	r3, #3
 8016fb4:	d016      	beq.n	8016fe4 <USBD_StdEPReq+0x150>
 8016fb6:	e04b      	b.n	8017050 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016fb8:	7bbb      	ldrb	r3, [r7, #14]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d00d      	beq.n	8016fda <USBD_StdEPReq+0x146>
 8016fbe:	7bbb      	ldrb	r3, [r7, #14]
 8016fc0:	2b80      	cmp	r3, #128	@ 0x80
 8016fc2:	d00a      	beq.n	8016fda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016fc4:	7bbb      	ldrb	r3, [r7, #14]
 8016fc6:	4619      	mov	r1, r3
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f001 f9b7 	bl	801833c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016fce:	2180      	movs	r1, #128	@ 0x80
 8016fd0:	6878      	ldr	r0, [r7, #4]
 8016fd2:	f001 f9b3 	bl	801833c <USBD_LL_StallEP>
 8016fd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016fd8:	e040      	b.n	801705c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016fda:	6839      	ldr	r1, [r7, #0]
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 fc68 	bl	80178b2 <USBD_CtlError>
              break;
 8016fe2:	e03b      	b.n	801705c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	885b      	ldrh	r3, [r3, #2]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d136      	bne.n	801705a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016fec:	7bbb      	ldrb	r3, [r7, #14]
 8016fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d004      	beq.n	8017000 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016ff6:	7bbb      	ldrb	r3, [r7, #14]
 8016ff8:	4619      	mov	r1, r3
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f001 f9bd 	bl	801837a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f000 fd2d 	bl	8017a60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017006:	7bbb      	ldrb	r3, [r7, #14]
 8017008:	4619      	mov	r1, r3
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f7ff fde4 	bl	8016bd8 <USBD_CoreFindEP>
 8017010:	4603      	mov	r3, r0
 8017012:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017014:	7b7b      	ldrb	r3, [r7, #13]
 8017016:	2bff      	cmp	r3, #255	@ 0xff
 8017018:	d01f      	beq.n	801705a <USBD_StdEPReq+0x1c6>
 801701a:	7b7b      	ldrb	r3, [r7, #13]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d11c      	bne.n	801705a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017020:	7b7a      	ldrb	r2, [r7, #13]
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017028:	7b7a      	ldrb	r2, [r7, #13]
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	32ae      	adds	r2, #174	@ 0xae
 801702e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017032:	689b      	ldr	r3, [r3, #8]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d010      	beq.n	801705a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017038:	7b7a      	ldrb	r2, [r7, #13]
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	32ae      	adds	r2, #174	@ 0xae
 801703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017042:	689b      	ldr	r3, [r3, #8]
 8017044:	6839      	ldr	r1, [r7, #0]
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	4798      	blx	r3
 801704a:	4603      	mov	r3, r0
 801704c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801704e:	e004      	b.n	801705a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017050:	6839      	ldr	r1, [r7, #0]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 fc2d 	bl	80178b2 <USBD_CtlError>
              break;
 8017058:	e000      	b.n	801705c <USBD_StdEPReq+0x1c8>
              break;
 801705a:	bf00      	nop
          }
          break;
 801705c:	e0ab      	b.n	80171b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017064:	b2db      	uxtb	r3, r3
 8017066:	2b02      	cmp	r3, #2
 8017068:	d002      	beq.n	8017070 <USBD_StdEPReq+0x1dc>
 801706a:	2b03      	cmp	r3, #3
 801706c:	d032      	beq.n	80170d4 <USBD_StdEPReq+0x240>
 801706e:	e097      	b.n	80171a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017070:	7bbb      	ldrb	r3, [r7, #14]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d007      	beq.n	8017086 <USBD_StdEPReq+0x1f2>
 8017076:	7bbb      	ldrb	r3, [r7, #14]
 8017078:	2b80      	cmp	r3, #128	@ 0x80
 801707a:	d004      	beq.n	8017086 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 fc17 	bl	80178b2 <USBD_CtlError>
                break;
 8017084:	e091      	b.n	80171aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801708a:	2b00      	cmp	r3, #0
 801708c:	da0b      	bge.n	80170a6 <USBD_StdEPReq+0x212>
 801708e:	7bbb      	ldrb	r3, [r7, #14]
 8017090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017094:	4613      	mov	r3, r2
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	4413      	add	r3, r2
 801709a:	009b      	lsls	r3, r3, #2
 801709c:	3310      	adds	r3, #16
 801709e:	687a      	ldr	r2, [r7, #4]
 80170a0:	4413      	add	r3, r2
 80170a2:	3304      	adds	r3, #4
 80170a4:	e00b      	b.n	80170be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80170a6:	7bbb      	ldrb	r3, [r7, #14]
 80170a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170ac:	4613      	mov	r3, r2
 80170ae:	009b      	lsls	r3, r3, #2
 80170b0:	4413      	add	r3, r2
 80170b2:	009b      	lsls	r3, r3, #2
 80170b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	4413      	add	r3, r2
 80170bc:	3304      	adds	r3, #4
 80170be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	2200      	movs	r2, #0
 80170c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	2202      	movs	r2, #2
 80170ca:	4619      	mov	r1, r3
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f000 fc6d 	bl	80179ac <USBD_CtlSendData>
              break;
 80170d2:	e06a      	b.n	80171aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80170d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	da11      	bge.n	8017100 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80170dc:	7bbb      	ldrb	r3, [r7, #14]
 80170de:	f003 020f 	and.w	r2, r3, #15
 80170e2:	6879      	ldr	r1, [r7, #4]
 80170e4:	4613      	mov	r3, r2
 80170e6:	009b      	lsls	r3, r3, #2
 80170e8:	4413      	add	r3, r2
 80170ea:	009b      	lsls	r3, r3, #2
 80170ec:	440b      	add	r3, r1
 80170ee:	3324      	adds	r3, #36	@ 0x24
 80170f0:	881b      	ldrh	r3, [r3, #0]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d117      	bne.n	8017126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80170f6:	6839      	ldr	r1, [r7, #0]
 80170f8:	6878      	ldr	r0, [r7, #4]
 80170fa:	f000 fbda 	bl	80178b2 <USBD_CtlError>
                  break;
 80170fe:	e054      	b.n	80171aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017100:	7bbb      	ldrb	r3, [r7, #14]
 8017102:	f003 020f 	and.w	r2, r3, #15
 8017106:	6879      	ldr	r1, [r7, #4]
 8017108:	4613      	mov	r3, r2
 801710a:	009b      	lsls	r3, r3, #2
 801710c:	4413      	add	r3, r2
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	440b      	add	r3, r1
 8017112:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017116:	881b      	ldrh	r3, [r3, #0]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d104      	bne.n	8017126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801711c:	6839      	ldr	r1, [r7, #0]
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f000 fbc7 	bl	80178b2 <USBD_CtlError>
                  break;
 8017124:	e041      	b.n	80171aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801712a:	2b00      	cmp	r3, #0
 801712c:	da0b      	bge.n	8017146 <USBD_StdEPReq+0x2b2>
 801712e:	7bbb      	ldrb	r3, [r7, #14]
 8017130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017134:	4613      	mov	r3, r2
 8017136:	009b      	lsls	r3, r3, #2
 8017138:	4413      	add	r3, r2
 801713a:	009b      	lsls	r3, r3, #2
 801713c:	3310      	adds	r3, #16
 801713e:	687a      	ldr	r2, [r7, #4]
 8017140:	4413      	add	r3, r2
 8017142:	3304      	adds	r3, #4
 8017144:	e00b      	b.n	801715e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017146:	7bbb      	ldrb	r3, [r7, #14]
 8017148:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801714c:	4613      	mov	r3, r2
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	4413      	add	r3, r2
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017158:	687a      	ldr	r2, [r7, #4]
 801715a:	4413      	add	r3, r2
 801715c:	3304      	adds	r3, #4
 801715e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017160:	7bbb      	ldrb	r3, [r7, #14]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d002      	beq.n	801716c <USBD_StdEPReq+0x2d8>
 8017166:	7bbb      	ldrb	r3, [r7, #14]
 8017168:	2b80      	cmp	r3, #128	@ 0x80
 801716a:	d103      	bne.n	8017174 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	2200      	movs	r2, #0
 8017170:	601a      	str	r2, [r3, #0]
 8017172:	e00e      	b.n	8017192 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017174:	7bbb      	ldrb	r3, [r7, #14]
 8017176:	4619      	mov	r1, r3
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f001 f91d 	bl	80183b8 <USBD_LL_IsStallEP>
 801717e:	4603      	mov	r3, r0
 8017180:	2b00      	cmp	r3, #0
 8017182:	d003      	beq.n	801718c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	2201      	movs	r2, #1
 8017188:	601a      	str	r2, [r3, #0]
 801718a:	e002      	b.n	8017192 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	2200      	movs	r2, #0
 8017190:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	2202      	movs	r2, #2
 8017196:	4619      	mov	r1, r3
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f000 fc07 	bl	80179ac <USBD_CtlSendData>
              break;
 801719e:	e004      	b.n	80171aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80171a0:	6839      	ldr	r1, [r7, #0]
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 fb85 	bl	80178b2 <USBD_CtlError>
              break;
 80171a8:	bf00      	nop
          }
          break;
 80171aa:	e004      	b.n	80171b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 fb7f 	bl	80178b2 <USBD_CtlError>
          break;
 80171b4:	bf00      	nop
      }
      break;
 80171b6:	e005      	b.n	80171c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80171b8:	6839      	ldr	r1, [r7, #0]
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f000 fb79 	bl	80178b2 <USBD_CtlError>
      break;
 80171c0:	e000      	b.n	80171c4 <USBD_StdEPReq+0x330>
      break;
 80171c2:	bf00      	nop
  }

  return ret;
 80171c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3710      	adds	r7, #16
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
	...

080171d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b084      	sub	sp, #16
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
 80171d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80171da:	2300      	movs	r3, #0
 80171dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80171de:	2300      	movs	r3, #0
 80171e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80171e2:	2300      	movs	r3, #0
 80171e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	885b      	ldrh	r3, [r3, #2]
 80171ea:	0a1b      	lsrs	r3, r3, #8
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	3b01      	subs	r3, #1
 80171f0:	2b0e      	cmp	r3, #14
 80171f2:	f200 8152 	bhi.w	801749a <USBD_GetDescriptor+0x2ca>
 80171f6:	a201      	add	r2, pc, #4	@ (adr r2, 80171fc <USBD_GetDescriptor+0x2c>)
 80171f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171fc:	0801726d 	.word	0x0801726d
 8017200:	08017285 	.word	0x08017285
 8017204:	080172c5 	.word	0x080172c5
 8017208:	0801749b 	.word	0x0801749b
 801720c:	0801749b 	.word	0x0801749b
 8017210:	0801743b 	.word	0x0801743b
 8017214:	08017467 	.word	0x08017467
 8017218:	0801749b 	.word	0x0801749b
 801721c:	0801749b 	.word	0x0801749b
 8017220:	0801749b 	.word	0x0801749b
 8017224:	0801749b 	.word	0x0801749b
 8017228:	0801749b 	.word	0x0801749b
 801722c:	0801749b 	.word	0x0801749b
 8017230:	0801749b 	.word	0x0801749b
 8017234:	08017239 	.word	0x08017239
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801723e:	69db      	ldr	r3, [r3, #28]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d00b      	beq.n	801725c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801724a:	69db      	ldr	r3, [r3, #28]
 801724c:	687a      	ldr	r2, [r7, #4]
 801724e:	7c12      	ldrb	r2, [r2, #16]
 8017250:	f107 0108 	add.w	r1, r7, #8
 8017254:	4610      	mov	r0, r2
 8017256:	4798      	blx	r3
 8017258:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801725a:	e126      	b.n	80174aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801725c:	6839      	ldr	r1, [r7, #0]
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f000 fb27 	bl	80178b2 <USBD_CtlError>
        err++;
 8017264:	7afb      	ldrb	r3, [r7, #11]
 8017266:	3301      	adds	r3, #1
 8017268:	72fb      	strb	r3, [r7, #11]
      break;
 801726a:	e11e      	b.n	80174aa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	687a      	ldr	r2, [r7, #4]
 8017276:	7c12      	ldrb	r2, [r2, #16]
 8017278:	f107 0108 	add.w	r1, r7, #8
 801727c:	4610      	mov	r0, r2
 801727e:	4798      	blx	r3
 8017280:	60f8      	str	r0, [r7, #12]
      break;
 8017282:	e112      	b.n	80174aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	7c1b      	ldrb	r3, [r3, #16]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d10d      	bne.n	80172a8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017294:	f107 0208 	add.w	r2, r7, #8
 8017298:	4610      	mov	r0, r2
 801729a:	4798      	blx	r3
 801729c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	3301      	adds	r3, #1
 80172a2:	2202      	movs	r2, #2
 80172a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80172a6:	e100      	b.n	80174aa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80172ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172b0:	f107 0208 	add.w	r2, r7, #8
 80172b4:	4610      	mov	r0, r2
 80172b6:	4798      	blx	r3
 80172b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	3301      	adds	r3, #1
 80172be:	2202      	movs	r2, #2
 80172c0:	701a      	strb	r2, [r3, #0]
      break;
 80172c2:	e0f2      	b.n	80174aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	885b      	ldrh	r3, [r3, #2]
 80172c8:	b2db      	uxtb	r3, r3
 80172ca:	2b05      	cmp	r3, #5
 80172cc:	f200 80ac 	bhi.w	8017428 <USBD_GetDescriptor+0x258>
 80172d0:	a201      	add	r2, pc, #4	@ (adr r2, 80172d8 <USBD_GetDescriptor+0x108>)
 80172d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172d6:	bf00      	nop
 80172d8:	080172f1 	.word	0x080172f1
 80172dc:	08017325 	.word	0x08017325
 80172e0:	08017359 	.word	0x08017359
 80172e4:	0801738d 	.word	0x0801738d
 80172e8:	080173c1 	.word	0x080173c1
 80172ec:	080173f5 	.word	0x080173f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80172f6:	685b      	ldr	r3, [r3, #4]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d00b      	beq.n	8017314 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017302:	685b      	ldr	r3, [r3, #4]
 8017304:	687a      	ldr	r2, [r7, #4]
 8017306:	7c12      	ldrb	r2, [r2, #16]
 8017308:	f107 0108 	add.w	r1, r7, #8
 801730c:	4610      	mov	r0, r2
 801730e:	4798      	blx	r3
 8017310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017312:	e091      	b.n	8017438 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017314:	6839      	ldr	r1, [r7, #0]
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f000 facb 	bl	80178b2 <USBD_CtlError>
            err++;
 801731c:	7afb      	ldrb	r3, [r7, #11]
 801731e:	3301      	adds	r3, #1
 8017320:	72fb      	strb	r3, [r7, #11]
          break;
 8017322:	e089      	b.n	8017438 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801732a:	689b      	ldr	r3, [r3, #8]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d00b      	beq.n	8017348 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	687a      	ldr	r2, [r7, #4]
 801733a:	7c12      	ldrb	r2, [r2, #16]
 801733c:	f107 0108 	add.w	r1, r7, #8
 8017340:	4610      	mov	r0, r2
 8017342:	4798      	blx	r3
 8017344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017346:	e077      	b.n	8017438 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017348:	6839      	ldr	r1, [r7, #0]
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f000 fab1 	bl	80178b2 <USBD_CtlError>
            err++;
 8017350:	7afb      	ldrb	r3, [r7, #11]
 8017352:	3301      	adds	r3, #1
 8017354:	72fb      	strb	r3, [r7, #11]
          break;
 8017356:	e06f      	b.n	8017438 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801735e:	68db      	ldr	r3, [r3, #12]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d00b      	beq.n	801737c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801736a:	68db      	ldr	r3, [r3, #12]
 801736c:	687a      	ldr	r2, [r7, #4]
 801736e:	7c12      	ldrb	r2, [r2, #16]
 8017370:	f107 0108 	add.w	r1, r7, #8
 8017374:	4610      	mov	r0, r2
 8017376:	4798      	blx	r3
 8017378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801737a:	e05d      	b.n	8017438 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801737c:	6839      	ldr	r1, [r7, #0]
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f000 fa97 	bl	80178b2 <USBD_CtlError>
            err++;
 8017384:	7afb      	ldrb	r3, [r7, #11]
 8017386:	3301      	adds	r3, #1
 8017388:	72fb      	strb	r3, [r7, #11]
          break;
 801738a:	e055      	b.n	8017438 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017392:	691b      	ldr	r3, [r3, #16]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00b      	beq.n	80173b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801739e:	691b      	ldr	r3, [r3, #16]
 80173a0:	687a      	ldr	r2, [r7, #4]
 80173a2:	7c12      	ldrb	r2, [r2, #16]
 80173a4:	f107 0108 	add.w	r1, r7, #8
 80173a8:	4610      	mov	r0, r2
 80173aa:	4798      	blx	r3
 80173ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173ae:	e043      	b.n	8017438 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173b0:	6839      	ldr	r1, [r7, #0]
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 fa7d 	bl	80178b2 <USBD_CtlError>
            err++;
 80173b8:	7afb      	ldrb	r3, [r7, #11]
 80173ba:	3301      	adds	r3, #1
 80173bc:	72fb      	strb	r3, [r7, #11]
          break;
 80173be:	e03b      	b.n	8017438 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173c6:	695b      	ldr	r3, [r3, #20]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d00b      	beq.n	80173e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173d2:	695b      	ldr	r3, [r3, #20]
 80173d4:	687a      	ldr	r2, [r7, #4]
 80173d6:	7c12      	ldrb	r2, [r2, #16]
 80173d8:	f107 0108 	add.w	r1, r7, #8
 80173dc:	4610      	mov	r0, r2
 80173de:	4798      	blx	r3
 80173e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173e2:	e029      	b.n	8017438 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173e4:	6839      	ldr	r1, [r7, #0]
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f000 fa63 	bl	80178b2 <USBD_CtlError>
            err++;
 80173ec:	7afb      	ldrb	r3, [r7, #11]
 80173ee:	3301      	adds	r3, #1
 80173f0:	72fb      	strb	r3, [r7, #11]
          break;
 80173f2:	e021      	b.n	8017438 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173fa:	699b      	ldr	r3, [r3, #24]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d00b      	beq.n	8017418 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017406:	699b      	ldr	r3, [r3, #24]
 8017408:	687a      	ldr	r2, [r7, #4]
 801740a:	7c12      	ldrb	r2, [r2, #16]
 801740c:	f107 0108 	add.w	r1, r7, #8
 8017410:	4610      	mov	r0, r2
 8017412:	4798      	blx	r3
 8017414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017416:	e00f      	b.n	8017438 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017418:	6839      	ldr	r1, [r7, #0]
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f000 fa49 	bl	80178b2 <USBD_CtlError>
            err++;
 8017420:	7afb      	ldrb	r3, [r7, #11]
 8017422:	3301      	adds	r3, #1
 8017424:	72fb      	strb	r3, [r7, #11]
          break;
 8017426:	e007      	b.n	8017438 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017428:	6839      	ldr	r1, [r7, #0]
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f000 fa41 	bl	80178b2 <USBD_CtlError>
          err++;
 8017430:	7afb      	ldrb	r3, [r7, #11]
 8017432:	3301      	adds	r3, #1
 8017434:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017436:	bf00      	nop
      }
      break;
 8017438:	e037      	b.n	80174aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	7c1b      	ldrb	r3, [r3, #16]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d109      	bne.n	8017456 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801744a:	f107 0208 	add.w	r2, r7, #8
 801744e:	4610      	mov	r0, r2
 8017450:	4798      	blx	r3
 8017452:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017454:	e029      	b.n	80174aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017456:	6839      	ldr	r1, [r7, #0]
 8017458:	6878      	ldr	r0, [r7, #4]
 801745a:	f000 fa2a 	bl	80178b2 <USBD_CtlError>
        err++;
 801745e:	7afb      	ldrb	r3, [r7, #11]
 8017460:	3301      	adds	r3, #1
 8017462:	72fb      	strb	r3, [r7, #11]
      break;
 8017464:	e021      	b.n	80174aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	7c1b      	ldrb	r3, [r3, #16]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d10d      	bne.n	801748a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017476:	f107 0208 	add.w	r2, r7, #8
 801747a:	4610      	mov	r0, r2
 801747c:	4798      	blx	r3
 801747e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	3301      	adds	r3, #1
 8017484:	2207      	movs	r2, #7
 8017486:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017488:	e00f      	b.n	80174aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801748a:	6839      	ldr	r1, [r7, #0]
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 fa10 	bl	80178b2 <USBD_CtlError>
        err++;
 8017492:	7afb      	ldrb	r3, [r7, #11]
 8017494:	3301      	adds	r3, #1
 8017496:	72fb      	strb	r3, [r7, #11]
      break;
 8017498:	e007      	b.n	80174aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801749a:	6839      	ldr	r1, [r7, #0]
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f000 fa08 	bl	80178b2 <USBD_CtlError>
      err++;
 80174a2:	7afb      	ldrb	r3, [r7, #11]
 80174a4:	3301      	adds	r3, #1
 80174a6:	72fb      	strb	r3, [r7, #11]
      break;
 80174a8:	bf00      	nop
  }

  if (err != 0U)
 80174aa:	7afb      	ldrb	r3, [r7, #11]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d11e      	bne.n	80174ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80174b0:	683b      	ldr	r3, [r7, #0]
 80174b2:	88db      	ldrh	r3, [r3, #6]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d016      	beq.n	80174e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80174b8:	893b      	ldrh	r3, [r7, #8]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d00e      	beq.n	80174dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80174be:	683b      	ldr	r3, [r7, #0]
 80174c0:	88da      	ldrh	r2, [r3, #6]
 80174c2:	893b      	ldrh	r3, [r7, #8]
 80174c4:	4293      	cmp	r3, r2
 80174c6:	bf28      	it	cs
 80174c8:	4613      	movcs	r3, r2
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80174ce:	893b      	ldrh	r3, [r7, #8]
 80174d0:	461a      	mov	r2, r3
 80174d2:	68f9      	ldr	r1, [r7, #12]
 80174d4:	6878      	ldr	r0, [r7, #4]
 80174d6:	f000 fa69 	bl	80179ac <USBD_CtlSendData>
 80174da:	e009      	b.n	80174f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80174dc:	6839      	ldr	r1, [r7, #0]
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f000 f9e7 	bl	80178b2 <USBD_CtlError>
 80174e4:	e004      	b.n	80174f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f000 faba 	bl	8017a60 <USBD_CtlSendStatus>
 80174ec:	e000      	b.n	80174f0 <USBD_GetDescriptor+0x320>
    return;
 80174ee:	bf00      	nop
  }
}
 80174f0:	3710      	adds	r7, #16
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}
 80174f6:	bf00      	nop

080174f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b084      	sub	sp, #16
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017502:	683b      	ldr	r3, [r7, #0]
 8017504:	889b      	ldrh	r3, [r3, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d131      	bne.n	801756e <USBD_SetAddress+0x76>
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	88db      	ldrh	r3, [r3, #6]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d12d      	bne.n	801756e <USBD_SetAddress+0x76>
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	885b      	ldrh	r3, [r3, #2]
 8017516:	2b7f      	cmp	r3, #127	@ 0x7f
 8017518:	d829      	bhi.n	801756e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	885b      	ldrh	r3, [r3, #2]
 801751e:	b2db      	uxtb	r3, r3
 8017520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801752c:	b2db      	uxtb	r3, r3
 801752e:	2b03      	cmp	r3, #3
 8017530:	d104      	bne.n	801753c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017532:	6839      	ldr	r1, [r7, #0]
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f000 f9bc 	bl	80178b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801753a:	e01d      	b.n	8017578 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	7bfa      	ldrb	r2, [r7, #15]
 8017540:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017544:	7bfb      	ldrb	r3, [r7, #15]
 8017546:	4619      	mov	r1, r3
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 ff61 	bl	8018410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f000 fa86 	bl	8017a60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017554:	7bfb      	ldrb	r3, [r7, #15]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d004      	beq.n	8017564 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	2202      	movs	r2, #2
 801755e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017562:	e009      	b.n	8017578 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	2201      	movs	r2, #1
 8017568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801756c:	e004      	b.n	8017578 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801756e:	6839      	ldr	r1, [r7, #0]
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f000 f99e 	bl	80178b2 <USBD_CtlError>
  }
}
 8017576:	bf00      	nop
 8017578:	bf00      	nop
 801757a:	3710      	adds	r7, #16
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}

08017580 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b084      	sub	sp, #16
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801758a:	2300      	movs	r3, #0
 801758c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	885b      	ldrh	r3, [r3, #2]
 8017592:	b2da      	uxtb	r2, r3
 8017594:	4b4e      	ldr	r3, [pc, #312]	@ (80176d0 <USBD_SetConfig+0x150>)
 8017596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017598:	4b4d      	ldr	r3, [pc, #308]	@ (80176d0 <USBD_SetConfig+0x150>)
 801759a:	781b      	ldrb	r3, [r3, #0]
 801759c:	2b01      	cmp	r3, #1
 801759e:	d905      	bls.n	80175ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80175a0:	6839      	ldr	r1, [r7, #0]
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f000 f985 	bl	80178b2 <USBD_CtlError>
    return USBD_FAIL;
 80175a8:	2303      	movs	r3, #3
 80175aa:	e08c      	b.n	80176c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175b2:	b2db      	uxtb	r3, r3
 80175b4:	2b02      	cmp	r3, #2
 80175b6:	d002      	beq.n	80175be <USBD_SetConfig+0x3e>
 80175b8:	2b03      	cmp	r3, #3
 80175ba:	d029      	beq.n	8017610 <USBD_SetConfig+0x90>
 80175bc:	e075      	b.n	80176aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80175be:	4b44      	ldr	r3, [pc, #272]	@ (80176d0 <USBD_SetConfig+0x150>)
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d020      	beq.n	8017608 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80175c6:	4b42      	ldr	r3, [pc, #264]	@ (80176d0 <USBD_SetConfig+0x150>)
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	461a      	mov	r2, r3
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80175d0:	4b3f      	ldr	r3, [pc, #252]	@ (80176d0 <USBD_SetConfig+0x150>)
 80175d2:	781b      	ldrb	r3, [r3, #0]
 80175d4:	4619      	mov	r1, r3
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f7fe ffb9 	bl	801654e <USBD_SetClassConfig>
 80175dc:	4603      	mov	r3, r0
 80175de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80175e0:	7bfb      	ldrb	r3, [r7, #15]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d008      	beq.n	80175f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80175e6:	6839      	ldr	r1, [r7, #0]
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f000 f962 	bl	80178b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2202      	movs	r2, #2
 80175f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80175f6:	e065      	b.n	80176c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80175f8:	6878      	ldr	r0, [r7, #4]
 80175fa:	f000 fa31 	bl	8017a60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2203      	movs	r2, #3
 8017602:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017606:	e05d      	b.n	80176c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017608:	6878      	ldr	r0, [r7, #4]
 801760a:	f000 fa29 	bl	8017a60 <USBD_CtlSendStatus>
      break;
 801760e:	e059      	b.n	80176c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017610:	4b2f      	ldr	r3, [pc, #188]	@ (80176d0 <USBD_SetConfig+0x150>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d112      	bne.n	801763e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2202      	movs	r2, #2
 801761c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017620:	4b2b      	ldr	r3, [pc, #172]	@ (80176d0 <USBD_SetConfig+0x150>)
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	461a      	mov	r2, r3
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801762a:	4b29      	ldr	r3, [pc, #164]	@ (80176d0 <USBD_SetConfig+0x150>)
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	4619      	mov	r1, r3
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7fe ffa8 	bl	8016586 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	f000 fa12 	bl	8017a60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801763c:	e042      	b.n	80176c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801763e:	4b24      	ldr	r3, [pc, #144]	@ (80176d0 <USBD_SetConfig+0x150>)
 8017640:	781b      	ldrb	r3, [r3, #0]
 8017642:	461a      	mov	r2, r3
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	685b      	ldr	r3, [r3, #4]
 8017648:	429a      	cmp	r2, r3
 801764a:	d02a      	beq.n	80176a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	685b      	ldr	r3, [r3, #4]
 8017650:	b2db      	uxtb	r3, r3
 8017652:	4619      	mov	r1, r3
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	f7fe ff96 	bl	8016586 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801765a:	4b1d      	ldr	r3, [pc, #116]	@ (80176d0 <USBD_SetConfig+0x150>)
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	461a      	mov	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017664:	4b1a      	ldr	r3, [pc, #104]	@ (80176d0 <USBD_SetConfig+0x150>)
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	4619      	mov	r1, r3
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7fe ff6f 	bl	801654e <USBD_SetClassConfig>
 8017670:	4603      	mov	r3, r0
 8017672:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017674:	7bfb      	ldrb	r3, [r7, #15]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d00f      	beq.n	801769a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801767a:	6839      	ldr	r1, [r7, #0]
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f000 f918 	bl	80178b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	b2db      	uxtb	r3, r3
 8017688:	4619      	mov	r1, r3
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f7fe ff7b 	bl	8016586 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2202      	movs	r2, #2
 8017694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017698:	e014      	b.n	80176c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f000 f9e0 	bl	8017a60 <USBD_CtlSendStatus>
      break;
 80176a0:	e010      	b.n	80176c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	f000 f9dc 	bl	8017a60 <USBD_CtlSendStatus>
      break;
 80176a8:	e00c      	b.n	80176c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80176aa:	6839      	ldr	r1, [r7, #0]
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f000 f900 	bl	80178b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80176b2:	4b07      	ldr	r3, [pc, #28]	@ (80176d0 <USBD_SetConfig+0x150>)
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	4619      	mov	r1, r3
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f7fe ff64 	bl	8016586 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80176be:	2303      	movs	r3, #3
 80176c0:	73fb      	strb	r3, [r7, #15]
      break;
 80176c2:	bf00      	nop
  }

  return ret;
 80176c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3710      	adds	r7, #16
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop
 80176d0:	24025d68 	.word	0x24025d68

080176d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	88db      	ldrh	r3, [r3, #6]
 80176e2:	2b01      	cmp	r3, #1
 80176e4:	d004      	beq.n	80176f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80176e6:	6839      	ldr	r1, [r7, #0]
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f000 f8e2 	bl	80178b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80176ee:	e023      	b.n	8017738 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	2b02      	cmp	r3, #2
 80176fa:	dc02      	bgt.n	8017702 <USBD_GetConfig+0x2e>
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	dc03      	bgt.n	8017708 <USBD_GetConfig+0x34>
 8017700:	e015      	b.n	801772e <USBD_GetConfig+0x5a>
 8017702:	2b03      	cmp	r3, #3
 8017704:	d00b      	beq.n	801771e <USBD_GetConfig+0x4a>
 8017706:	e012      	b.n	801772e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2200      	movs	r2, #0
 801770c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	3308      	adds	r3, #8
 8017712:	2201      	movs	r2, #1
 8017714:	4619      	mov	r1, r3
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f000 f948 	bl	80179ac <USBD_CtlSendData>
        break;
 801771c:	e00c      	b.n	8017738 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	3304      	adds	r3, #4
 8017722:	2201      	movs	r2, #1
 8017724:	4619      	mov	r1, r3
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f000 f940 	bl	80179ac <USBD_CtlSendData>
        break;
 801772c:	e004      	b.n	8017738 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801772e:	6839      	ldr	r1, [r7, #0]
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f000 f8be 	bl	80178b2 <USBD_CtlError>
        break;
 8017736:	bf00      	nop
}
 8017738:	bf00      	nop
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}

08017740 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017750:	b2db      	uxtb	r3, r3
 8017752:	3b01      	subs	r3, #1
 8017754:	2b02      	cmp	r3, #2
 8017756:	d81e      	bhi.n	8017796 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	88db      	ldrh	r3, [r3, #6]
 801775c:	2b02      	cmp	r3, #2
 801775e:	d004      	beq.n	801776a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017760:	6839      	ldr	r1, [r7, #0]
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f000 f8a5 	bl	80178b2 <USBD_CtlError>
        break;
 8017768:	e01a      	b.n	80177a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2201      	movs	r2, #1
 801776e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017776:	2b00      	cmp	r3, #0
 8017778:	d005      	beq.n	8017786 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	68db      	ldr	r3, [r3, #12]
 801777e:	f043 0202 	orr.w	r2, r3, #2
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	330c      	adds	r3, #12
 801778a:	2202      	movs	r2, #2
 801778c:	4619      	mov	r1, r3
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 f90c 	bl	80179ac <USBD_CtlSendData>
      break;
 8017794:	e004      	b.n	80177a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017796:	6839      	ldr	r1, [r7, #0]
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f000 f88a 	bl	80178b2 <USBD_CtlError>
      break;
 801779e:	bf00      	nop
  }
}
 80177a0:	bf00      	nop
 80177a2:	3708      	adds	r7, #8
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}

080177a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b082      	sub	sp, #8
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
 80177b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	885b      	ldrh	r3, [r3, #2]
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d107      	bne.n	80177ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2201      	movs	r2, #1
 80177be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80177c2:	6878      	ldr	r0, [r7, #4]
 80177c4:	f000 f94c 	bl	8017a60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80177c8:	e013      	b.n	80177f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	885b      	ldrh	r3, [r3, #2]
 80177ce:	2b02      	cmp	r3, #2
 80177d0:	d10b      	bne.n	80177ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	889b      	ldrh	r3, [r3, #4]
 80177d6:	0a1b      	lsrs	r3, r3, #8
 80177d8:	b29b      	uxth	r3, r3
 80177da:	b2da      	uxtb	r2, r3
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f000 f93c 	bl	8017a60 <USBD_CtlSendStatus>
}
 80177e8:	e003      	b.n	80177f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80177ea:	6839      	ldr	r1, [r7, #0]
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f000 f860 	bl	80178b2 <USBD_CtlError>
}
 80177f2:	bf00      	nop
 80177f4:	3708      	adds	r7, #8
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}

080177fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177fa:	b580      	push	{r7, lr}
 80177fc:	b082      	sub	sp, #8
 80177fe:	af00      	add	r7, sp, #0
 8017800:	6078      	str	r0, [r7, #4]
 8017802:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801780a:	b2db      	uxtb	r3, r3
 801780c:	3b01      	subs	r3, #1
 801780e:	2b02      	cmp	r3, #2
 8017810:	d80b      	bhi.n	801782a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	885b      	ldrh	r3, [r3, #2]
 8017816:	2b01      	cmp	r3, #1
 8017818:	d10c      	bne.n	8017834 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	2200      	movs	r2, #0
 801781e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f000 f91c 	bl	8017a60 <USBD_CtlSendStatus>
      }
      break;
 8017828:	e004      	b.n	8017834 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801782a:	6839      	ldr	r1, [r7, #0]
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f000 f840 	bl	80178b2 <USBD_CtlError>
      break;
 8017832:	e000      	b.n	8017836 <USBD_ClrFeature+0x3c>
      break;
 8017834:	bf00      	nop
  }
}
 8017836:	bf00      	nop
 8017838:	3708      	adds	r7, #8
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}

0801783e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801783e:	b580      	push	{r7, lr}
 8017840:	b084      	sub	sp, #16
 8017842:	af00      	add	r7, sp, #0
 8017844:	6078      	str	r0, [r7, #4]
 8017846:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	781a      	ldrb	r2, [r3, #0]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	3301      	adds	r3, #1
 8017858:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	781a      	ldrb	r2, [r3, #0]
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	3301      	adds	r3, #1
 8017866:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017868:	68f8      	ldr	r0, [r7, #12]
 801786a:	f7ff fa16 	bl	8016c9a <SWAPBYTE>
 801786e:	4603      	mov	r3, r0
 8017870:	461a      	mov	r2, r3
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	3301      	adds	r3, #1
 801787a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	3301      	adds	r3, #1
 8017880:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017882:	68f8      	ldr	r0, [r7, #12]
 8017884:	f7ff fa09 	bl	8016c9a <SWAPBYTE>
 8017888:	4603      	mov	r3, r0
 801788a:	461a      	mov	r2, r3
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	3301      	adds	r3, #1
 8017894:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	3301      	adds	r3, #1
 801789a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801789c:	68f8      	ldr	r0, [r7, #12]
 801789e:	f7ff f9fc 	bl	8016c9a <SWAPBYTE>
 80178a2:	4603      	mov	r3, r0
 80178a4:	461a      	mov	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	80da      	strh	r2, [r3, #6]
}
 80178aa:	bf00      	nop
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}

080178b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178b2:	b580      	push	{r7, lr}
 80178b4:	b082      	sub	sp, #8
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
 80178ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80178bc:	2180      	movs	r1, #128	@ 0x80
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f000 fd3c 	bl	801833c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80178c4:	2100      	movs	r1, #0
 80178c6:	6878      	ldr	r0, [r7, #4]
 80178c8:	f000 fd38 	bl	801833c <USBD_LL_StallEP>
}
 80178cc:	bf00      	nop
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b086      	sub	sp, #24
 80178d8:	af00      	add	r7, sp, #0
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80178e0:	2300      	movs	r3, #0
 80178e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d042      	beq.n	8017970 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80178ee:	6938      	ldr	r0, [r7, #16]
 80178f0:	f000 f842 	bl	8017978 <USBD_GetLen>
 80178f4:	4603      	mov	r3, r0
 80178f6:	3301      	adds	r3, #1
 80178f8:	005b      	lsls	r3, r3, #1
 80178fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178fe:	d808      	bhi.n	8017912 <USBD_GetString+0x3e>
 8017900:	6938      	ldr	r0, [r7, #16]
 8017902:	f000 f839 	bl	8017978 <USBD_GetLen>
 8017906:	4603      	mov	r3, r0
 8017908:	3301      	adds	r3, #1
 801790a:	b29b      	uxth	r3, r3
 801790c:	005b      	lsls	r3, r3, #1
 801790e:	b29a      	uxth	r2, r3
 8017910:	e001      	b.n	8017916 <USBD_GetString+0x42>
 8017912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801791a:	7dfb      	ldrb	r3, [r7, #23]
 801791c:	68ba      	ldr	r2, [r7, #8]
 801791e:	4413      	add	r3, r2
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	7812      	ldrb	r2, [r2, #0]
 8017924:	701a      	strb	r2, [r3, #0]
  idx++;
 8017926:	7dfb      	ldrb	r3, [r7, #23]
 8017928:	3301      	adds	r3, #1
 801792a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801792c:	7dfb      	ldrb	r3, [r7, #23]
 801792e:	68ba      	ldr	r2, [r7, #8]
 8017930:	4413      	add	r3, r2
 8017932:	2203      	movs	r2, #3
 8017934:	701a      	strb	r2, [r3, #0]
  idx++;
 8017936:	7dfb      	ldrb	r3, [r7, #23]
 8017938:	3301      	adds	r3, #1
 801793a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801793c:	e013      	b.n	8017966 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801793e:	7dfb      	ldrb	r3, [r7, #23]
 8017940:	68ba      	ldr	r2, [r7, #8]
 8017942:	4413      	add	r3, r2
 8017944:	693a      	ldr	r2, [r7, #16]
 8017946:	7812      	ldrb	r2, [r2, #0]
 8017948:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801794a:	693b      	ldr	r3, [r7, #16]
 801794c:	3301      	adds	r3, #1
 801794e:	613b      	str	r3, [r7, #16]
    idx++;
 8017950:	7dfb      	ldrb	r3, [r7, #23]
 8017952:	3301      	adds	r3, #1
 8017954:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017956:	7dfb      	ldrb	r3, [r7, #23]
 8017958:	68ba      	ldr	r2, [r7, #8]
 801795a:	4413      	add	r3, r2
 801795c:	2200      	movs	r2, #0
 801795e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017960:	7dfb      	ldrb	r3, [r7, #23]
 8017962:	3301      	adds	r3, #1
 8017964:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017966:	693b      	ldr	r3, [r7, #16]
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d1e7      	bne.n	801793e <USBD_GetString+0x6a>
 801796e:	e000      	b.n	8017972 <USBD_GetString+0x9e>
    return;
 8017970:	bf00      	nop
  }
}
 8017972:	3718      	adds	r7, #24
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017978:	b480      	push	{r7}
 801797a:	b085      	sub	sp, #20
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017980:	2300      	movs	r3, #0
 8017982:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017988:	e005      	b.n	8017996 <USBD_GetLen+0x1e>
  {
    len++;
 801798a:	7bfb      	ldrb	r3, [r7, #15]
 801798c:	3301      	adds	r3, #1
 801798e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	3301      	adds	r3, #1
 8017994:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017996:	68bb      	ldr	r3, [r7, #8]
 8017998:	781b      	ldrb	r3, [r3, #0]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1f5      	bne.n	801798a <USBD_GetLen+0x12>
  }

  return len;
 801799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3714      	adds	r7, #20
 80179a4:	46bd      	mov	sp, r7
 80179a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179aa:	4770      	bx	lr

080179ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	60f8      	str	r0, [r7, #12]
 80179b4:	60b9      	str	r1, [r7, #8]
 80179b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	2202      	movs	r2, #2
 80179bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	687a      	ldr	r2, [r7, #4]
 80179c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	68ba      	ldr	r2, [r7, #8]
 80179d0:	2100      	movs	r1, #0
 80179d2:	68f8      	ldr	r0, [r7, #12]
 80179d4:	f000 fd3b 	bl	801844e <USBD_LL_Transmit>

  return USBD_OK;
 80179d8:	2300      	movs	r3, #0
}
 80179da:	4618      	mov	r0, r3
 80179dc:	3710      	adds	r7, #16
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}

080179e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b084      	sub	sp, #16
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	60f8      	str	r0, [r7, #12]
 80179ea:	60b9      	str	r1, [r7, #8]
 80179ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	68ba      	ldr	r2, [r7, #8]
 80179f2:	2100      	movs	r1, #0
 80179f4:	68f8      	ldr	r0, [r7, #12]
 80179f6:	f000 fd2a 	bl	801844e <USBD_LL_Transmit>

  return USBD_OK;
 80179fa:	2300      	movs	r3, #0
}
 80179fc:	4618      	mov	r0, r3
 80179fe:	3710      	adds	r7, #16
 8017a00:	46bd      	mov	sp, r7
 8017a02:	bd80      	pop	{r7, pc}

08017a04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	2203      	movs	r2, #3
 8017a14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	687a      	ldr	r2, [r7, #4]
 8017a24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	68ba      	ldr	r2, [r7, #8]
 8017a2c:	2100      	movs	r1, #0
 8017a2e:	68f8      	ldr	r0, [r7, #12]
 8017a30:	f000 fd2e 	bl	8018490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a34:	2300      	movs	r3, #0
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	3710      	adds	r7, #16
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}

08017a3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b084      	sub	sp, #16
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	60f8      	str	r0, [r7, #12]
 8017a46:	60b9      	str	r1, [r7, #8]
 8017a48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	68ba      	ldr	r2, [r7, #8]
 8017a4e:	2100      	movs	r1, #0
 8017a50:	68f8      	ldr	r0, [r7, #12]
 8017a52:	f000 fd1d 	bl	8018490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a56:	2300      	movs	r3, #0
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3710      	adds	r7, #16
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2204      	movs	r2, #4
 8017a6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017a70:	2300      	movs	r3, #0
 8017a72:	2200      	movs	r2, #0
 8017a74:	2100      	movs	r1, #0
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f000 fce9 	bl	801844e <USBD_LL_Transmit>

  return USBD_OK;
 8017a7c:	2300      	movs	r3, #0
}
 8017a7e:	4618      	mov	r0, r3
 8017a80:	3708      	adds	r7, #8
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bd80      	pop	{r7, pc}

08017a86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017a86:	b580      	push	{r7, lr}
 8017a88:	b082      	sub	sp, #8
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2205      	movs	r2, #5
 8017a92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017a96:	2300      	movs	r3, #0
 8017a98:	2200      	movs	r2, #0
 8017a9a:	2100      	movs	r1, #0
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f000 fcf7 	bl	8018490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017aa2:	2300      	movs	r3, #0
}
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	4918      	ldr	r1, [pc, #96]	@ (8017b14 <MX_USB_DEVICE_Init+0x68>)
 8017ab4:	4818      	ldr	r0, [pc, #96]	@ (8017b18 <MX_USB_DEVICE_Init+0x6c>)
 8017ab6:	f7fe fccd 	bl	8016454 <USBD_Init>
 8017aba:	4603      	mov	r3, r0
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d001      	beq.n	8017ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ac0:	f7ea fbf8 	bl	80022b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017ac4:	4915      	ldr	r1, [pc, #84]	@ (8017b1c <MX_USB_DEVICE_Init+0x70>)
 8017ac6:	4814      	ldr	r0, [pc, #80]	@ (8017b18 <MX_USB_DEVICE_Init+0x6c>)
 8017ac8:	f7fe fcf4 	bl	80164b4 <USBD_RegisterClass>
 8017acc:	4603      	mov	r3, r0
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d001      	beq.n	8017ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017ad2:	f7ea fbef 	bl	80022b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017ad6:	4912      	ldr	r1, [pc, #72]	@ (8017b20 <MX_USB_DEVICE_Init+0x74>)
 8017ad8:	480f      	ldr	r0, [pc, #60]	@ (8017b18 <MX_USB_DEVICE_Init+0x6c>)
 8017ada:	f7fe fbeb 	bl	80162b4 <USBD_CDC_RegisterInterface>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d001      	beq.n	8017ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017ae4:	f7ea fbe6 	bl	80022b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017ae8:	480b      	ldr	r0, [pc, #44]	@ (8017b18 <MX_USB_DEVICE_Init+0x6c>)
 8017aea:	f7fe fd19 	bl	8016520 <USBD_Start>
 8017aee:	4603      	mov	r3, r0
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d001      	beq.n	8017af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017af4:	f7ea fbde 	bl	80022b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017af8:	f7f5 fb42 	bl	800d180 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017afc:	4b06      	ldr	r3, [pc, #24]	@ (8017b18 <MX_USB_DEVICE_Init+0x6c>)
 8017afe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017b02:	4a05      	ldr	r2, [pc, #20]	@ (8017b18 <MX_USB_DEVICE_Init+0x6c>)
 8017b04:	33b0      	adds	r3, #176	@ 0xb0
 8017b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b0a:	4a06      	ldr	r2, [pc, #24]	@ (8017b24 <MX_USB_DEVICE_Init+0x78>)
 8017b0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b0e:	bf00      	nop
 8017b10:	bd80      	pop	{r7, pc}
 8017b12:	bf00      	nop
 8017b14:	240000c8 	.word	0x240000c8
 8017b18:	24025d6c 	.word	0x24025d6c
 8017b1c:	24000034 	.word	0x24000034
 8017b20:	240000b4 	.word	0x240000b4
 8017b24:	24026048 	.word	0x24026048

08017b28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	4905      	ldr	r1, [pc, #20]	@ (8017b44 <CDC_Init_FS+0x1c>)
 8017b30:	4805      	ldr	r0, [pc, #20]	@ (8017b48 <CDC_Init_FS+0x20>)
 8017b32:	f7fe fbd9 	bl	80162e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b36:	4905      	ldr	r1, [pc, #20]	@ (8017b4c <CDC_Init_FS+0x24>)
 8017b38:	4803      	ldr	r0, [pc, #12]	@ (8017b48 <CDC_Init_FS+0x20>)
 8017b3a:	f7fe fbf7 	bl	801632c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017b3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	bd80      	pop	{r7, pc}
 8017b44:	2402684c 	.word	0x2402684c
 8017b48:	24025d6c 	.word	0x24025d6c
 8017b4c:	2402604c 	.word	0x2402604c

08017b50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b50:	b480      	push	{r7}
 8017b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017b54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr

08017b60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	4603      	mov	r3, r0
 8017b68:	6039      	str	r1, [r7, #0]
 8017b6a:	71fb      	strb	r3, [r7, #7]
 8017b6c:	4613      	mov	r3, r2
 8017b6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017b70:	79fb      	ldrb	r3, [r7, #7]
 8017b72:	2b23      	cmp	r3, #35	@ 0x23
 8017b74:	d84a      	bhi.n	8017c0c <CDC_Control_FS+0xac>
 8017b76:	a201      	add	r2, pc, #4	@ (adr r2, 8017b7c <CDC_Control_FS+0x1c>)
 8017b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b7c:	08017c0d 	.word	0x08017c0d
 8017b80:	08017c0d 	.word	0x08017c0d
 8017b84:	08017c0d 	.word	0x08017c0d
 8017b88:	08017c0d 	.word	0x08017c0d
 8017b8c:	08017c0d 	.word	0x08017c0d
 8017b90:	08017c0d 	.word	0x08017c0d
 8017b94:	08017c0d 	.word	0x08017c0d
 8017b98:	08017c0d 	.word	0x08017c0d
 8017b9c:	08017c0d 	.word	0x08017c0d
 8017ba0:	08017c0d 	.word	0x08017c0d
 8017ba4:	08017c0d 	.word	0x08017c0d
 8017ba8:	08017c0d 	.word	0x08017c0d
 8017bac:	08017c0d 	.word	0x08017c0d
 8017bb0:	08017c0d 	.word	0x08017c0d
 8017bb4:	08017c0d 	.word	0x08017c0d
 8017bb8:	08017c0d 	.word	0x08017c0d
 8017bbc:	08017c0d 	.word	0x08017c0d
 8017bc0:	08017c0d 	.word	0x08017c0d
 8017bc4:	08017c0d 	.word	0x08017c0d
 8017bc8:	08017c0d 	.word	0x08017c0d
 8017bcc:	08017c0d 	.word	0x08017c0d
 8017bd0:	08017c0d 	.word	0x08017c0d
 8017bd4:	08017c0d 	.word	0x08017c0d
 8017bd8:	08017c0d 	.word	0x08017c0d
 8017bdc:	08017c0d 	.word	0x08017c0d
 8017be0:	08017c0d 	.word	0x08017c0d
 8017be4:	08017c0d 	.word	0x08017c0d
 8017be8:	08017c0d 	.word	0x08017c0d
 8017bec:	08017c0d 	.word	0x08017c0d
 8017bf0:	08017c0d 	.word	0x08017c0d
 8017bf4:	08017c0d 	.word	0x08017c0d
 8017bf8:	08017c0d 	.word	0x08017c0d
 8017bfc:	08017c0d 	.word	0x08017c0d
 8017c00:	08017c0d 	.word	0x08017c0d
 8017c04:	08017c0d 	.word	0x08017c0d
 8017c08:	08017c0d 	.word	0x08017c0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017c0c:	bf00      	nop
  }

  return (USBD_OK);
 8017c0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	370c      	adds	r7, #12
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b084      	sub	sp, #16
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
 8017c24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017c26:	6879      	ldr	r1, [r7, #4]
 8017c28:	4811      	ldr	r0, [pc, #68]	@ (8017c70 <CDC_Receive_FS+0x54>)
 8017c2a:	f7fe fb7f 	bl	801632c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017c2e:	4810      	ldr	r0, [pc, #64]	@ (8017c70 <CDC_Receive_FS+0x54>)
 8017c30:	f7fe fbda 	bl	80163e8 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8017c34:	4b0f      	ldr	r3, [pc, #60]	@ (8017c74 <CDC_Receive_FS+0x58>)
 8017c36:	2201      	movs	r2, #1
 8017c38:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit(&huart1, Buf, *Len, 100)) {
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	b29a      	uxth	r2, r3
 8017c40:	2364      	movs	r3, #100	@ 0x64
 8017c42:	6879      	ldr	r1, [r7, #4]
 8017c44:	480c      	ldr	r0, [pc, #48]	@ (8017c78 <CDC_Receive_FS+0x5c>)
 8017c46:	f7fa fa59 	bl	80120fc <HAL_UART_Transmit>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d00a      	beq.n	8017c66 <CDC_Receive_FS+0x4a>
		uint8_t* usb_msg = "Failed to TX\n";
 8017c50:	4b0a      	ldr	r3, [pc, #40]	@ (8017c7c <CDC_Receive_FS+0x60>)
 8017c52:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8017c54:	68f8      	ldr	r0, [r7, #12]
 8017c56:	f7e8 fb93 	bl	8000380 <strlen>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	4619      	mov	r1, r3
 8017c60:	68f8      	ldr	r0, [r7, #12]
 8017c62:	f000 f80d 	bl	8017c80 <CDC_Transmit_FS>
	}

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017c66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3710      	adds	r7, #16
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	24025d6c 	.word	0x24025d6c
 8017c74:	24000940 	.word	0x24000940
 8017c78:	2400079c 	.word	0x2400079c
 8017c7c:	0801b3a8 	.word	0x0801b3a8

08017c80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b084      	sub	sp, #16
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	460b      	mov	r3, r1
 8017c8a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017c90:	4b0d      	ldr	r3, [pc, #52]	@ (8017cc8 <CDC_Transmit_FS+0x48>)
 8017c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017c96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d001      	beq.n	8017ca6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	e00b      	b.n	8017cbe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017ca6:	887b      	ldrh	r3, [r7, #2]
 8017ca8:	461a      	mov	r2, r3
 8017caa:	6879      	ldr	r1, [r7, #4]
 8017cac:	4806      	ldr	r0, [pc, #24]	@ (8017cc8 <CDC_Transmit_FS+0x48>)
 8017cae:	f7fe fb1b 	bl	80162e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017cb2:	4805      	ldr	r0, [pc, #20]	@ (8017cc8 <CDC_Transmit_FS+0x48>)
 8017cb4:	f7fe fb58 	bl	8016368 <USBD_CDC_TransmitPacket>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3710      	adds	r7, #16
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
 8017cc6:	bf00      	nop
 8017cc8:	24025d6c 	.word	0x24025d6c

08017ccc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017ccc:	b480      	push	{r7}
 8017cce:	b087      	sub	sp, #28
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	371c      	adds	r7, #28
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr
	...

08017cf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cf0:	b480      	push	{r7}
 8017cf2:	b083      	sub	sp, #12
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	6039      	str	r1, [r7, #0]
 8017cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017cfc:	683b      	ldr	r3, [r7, #0]
 8017cfe:	2212      	movs	r2, #18
 8017d00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017d02:	4b03      	ldr	r3, [pc, #12]	@ (8017d10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	370c      	adds	r7, #12
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0e:	4770      	bx	lr
 8017d10:	240000e8 	.word	0x240000e8

08017d14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d14:	b480      	push	{r7}
 8017d16:	b083      	sub	sp, #12
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	6039      	str	r1, [r7, #0]
 8017d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	2204      	movs	r2, #4
 8017d24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017d26:	4b03      	ldr	r3, [pc, #12]	@ (8017d34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	370c      	adds	r7, #12
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d32:	4770      	bx	lr
 8017d34:	240000fc 	.word	0x240000fc

08017d38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b082      	sub	sp, #8
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	4603      	mov	r3, r0
 8017d40:	6039      	str	r1, [r7, #0]
 8017d42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d44:	79fb      	ldrb	r3, [r7, #7]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d105      	bne.n	8017d56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d4a:	683a      	ldr	r2, [r7, #0]
 8017d4c:	4907      	ldr	r1, [pc, #28]	@ (8017d6c <USBD_FS_ProductStrDescriptor+0x34>)
 8017d4e:	4808      	ldr	r0, [pc, #32]	@ (8017d70 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d50:	f7ff fdc0 	bl	80178d4 <USBD_GetString>
 8017d54:	e004      	b.n	8017d60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017d56:	683a      	ldr	r2, [r7, #0]
 8017d58:	4904      	ldr	r1, [pc, #16]	@ (8017d6c <USBD_FS_ProductStrDescriptor+0x34>)
 8017d5a:	4805      	ldr	r0, [pc, #20]	@ (8017d70 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d5c:	f7ff fdba 	bl	80178d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d60:	4b02      	ldr	r3, [pc, #8]	@ (8017d6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017d62:	4618      	mov	r0, r3
 8017d64:	3708      	adds	r7, #8
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	2402704c 	.word	0x2402704c
 8017d70:	0801b3b8 	.word	0x0801b3b8

08017d74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b082      	sub	sp, #8
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	6039      	str	r1, [r7, #0]
 8017d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017d80:	683a      	ldr	r2, [r7, #0]
 8017d82:	4904      	ldr	r1, [pc, #16]	@ (8017d94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017d84:	4804      	ldr	r0, [pc, #16]	@ (8017d98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017d86:	f7ff fda5 	bl	80178d4 <USBD_GetString>
  return USBD_StrDesc;
 8017d8a:	4b02      	ldr	r3, [pc, #8]	@ (8017d94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3708      	adds	r7, #8
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	2402704c 	.word	0x2402704c
 8017d98:	0801b3d0 	.word	0x0801b3d0

08017d9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	4603      	mov	r3, r0
 8017da4:	6039      	str	r1, [r7, #0]
 8017da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	221a      	movs	r2, #26
 8017dac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017dae:	f000 f843 	bl	8017e38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017db2:	4b02      	ldr	r3, [pc, #8]	@ (8017dbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017db4:	4618      	mov	r0, r3
 8017db6:	3708      	adds	r7, #8
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	24000100 	.word	0x24000100

08017dc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b082      	sub	sp, #8
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	6039      	str	r1, [r7, #0]
 8017dca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017dcc:	79fb      	ldrb	r3, [r7, #7]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d105      	bne.n	8017dde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017dd2:	683a      	ldr	r2, [r7, #0]
 8017dd4:	4907      	ldr	r1, [pc, #28]	@ (8017df4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017dd6:	4808      	ldr	r0, [pc, #32]	@ (8017df8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017dd8:	f7ff fd7c 	bl	80178d4 <USBD_GetString>
 8017ddc:	e004      	b.n	8017de8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017dde:	683a      	ldr	r2, [r7, #0]
 8017de0:	4904      	ldr	r1, [pc, #16]	@ (8017df4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017de2:	4805      	ldr	r0, [pc, #20]	@ (8017df8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017de4:	f7ff fd76 	bl	80178d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017de8:	4b02      	ldr	r3, [pc, #8]	@ (8017df4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3708      	adds	r7, #8
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}
 8017df2:	bf00      	nop
 8017df4:	2402704c 	.word	0x2402704c
 8017df8:	0801b3e4 	.word	0x0801b3e4

08017dfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b082      	sub	sp, #8
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	4603      	mov	r3, r0
 8017e04:	6039      	str	r1, [r7, #0]
 8017e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017e08:	79fb      	ldrb	r3, [r7, #7]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d105      	bne.n	8017e1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e0e:	683a      	ldr	r2, [r7, #0]
 8017e10:	4907      	ldr	r1, [pc, #28]	@ (8017e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e12:	4808      	ldr	r0, [pc, #32]	@ (8017e34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e14:	f7ff fd5e 	bl	80178d4 <USBD_GetString>
 8017e18:	e004      	b.n	8017e24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017e1a:	683a      	ldr	r2, [r7, #0]
 8017e1c:	4904      	ldr	r1, [pc, #16]	@ (8017e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017e1e:	4805      	ldr	r0, [pc, #20]	@ (8017e34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017e20:	f7ff fd58 	bl	80178d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e24:	4b02      	ldr	r3, [pc, #8]	@ (8017e30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3708      	adds	r7, #8
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	bd80      	pop	{r7, pc}
 8017e2e:	bf00      	nop
 8017e30:	2402704c 	.word	0x2402704c
 8017e34:	0801b3f0 	.word	0x0801b3f0

08017e38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b084      	sub	sp, #16
 8017e3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8017e7c <Get_SerialNum+0x44>)
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017e44:	4b0e      	ldr	r3, [pc, #56]	@ (8017e80 <Get_SerialNum+0x48>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8017e84 <Get_SerialNum+0x4c>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017e50:	68fa      	ldr	r2, [r7, #12]
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	4413      	add	r3, r2
 8017e56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d009      	beq.n	8017e72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017e5e:	2208      	movs	r2, #8
 8017e60:	4909      	ldr	r1, [pc, #36]	@ (8017e88 <Get_SerialNum+0x50>)
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	f000 f814 	bl	8017e90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017e68:	2204      	movs	r2, #4
 8017e6a:	4908      	ldr	r1, [pc, #32]	@ (8017e8c <Get_SerialNum+0x54>)
 8017e6c:	68b8      	ldr	r0, [r7, #8]
 8017e6e:	f000 f80f 	bl	8017e90 <IntToUnicode>
  }
}
 8017e72:	bf00      	nop
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	1ff1e800 	.word	0x1ff1e800
 8017e80:	1ff1e804 	.word	0x1ff1e804
 8017e84:	1ff1e808 	.word	0x1ff1e808
 8017e88:	24000102 	.word	0x24000102
 8017e8c:	24000112 	.word	0x24000112

08017e90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b087      	sub	sp, #28
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	60f8      	str	r0, [r7, #12]
 8017e98:	60b9      	str	r1, [r7, #8]
 8017e9a:	4613      	mov	r3, r2
 8017e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	75fb      	strb	r3, [r7, #23]
 8017ea6:	e027      	b.n	8017ef8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	0f1b      	lsrs	r3, r3, #28
 8017eac:	2b09      	cmp	r3, #9
 8017eae:	d80b      	bhi.n	8017ec8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	0f1b      	lsrs	r3, r3, #28
 8017eb4:	b2da      	uxtb	r2, r3
 8017eb6:	7dfb      	ldrb	r3, [r7, #23]
 8017eb8:	005b      	lsls	r3, r3, #1
 8017eba:	4619      	mov	r1, r3
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	440b      	add	r3, r1
 8017ec0:	3230      	adds	r2, #48	@ 0x30
 8017ec2:	b2d2      	uxtb	r2, r2
 8017ec4:	701a      	strb	r2, [r3, #0]
 8017ec6:	e00a      	b.n	8017ede <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	0f1b      	lsrs	r3, r3, #28
 8017ecc:	b2da      	uxtb	r2, r3
 8017ece:	7dfb      	ldrb	r3, [r7, #23]
 8017ed0:	005b      	lsls	r3, r3, #1
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	440b      	add	r3, r1
 8017ed8:	3237      	adds	r2, #55	@ 0x37
 8017eda:	b2d2      	uxtb	r2, r2
 8017edc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	011b      	lsls	r3, r3, #4
 8017ee2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017ee4:	7dfb      	ldrb	r3, [r7, #23]
 8017ee6:	005b      	lsls	r3, r3, #1
 8017ee8:	3301      	adds	r3, #1
 8017eea:	68ba      	ldr	r2, [r7, #8]
 8017eec:	4413      	add	r3, r2
 8017eee:	2200      	movs	r2, #0
 8017ef0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017ef2:	7dfb      	ldrb	r3, [r7, #23]
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	75fb      	strb	r3, [r7, #23]
 8017ef8:	7dfa      	ldrb	r2, [r7, #23]
 8017efa:	79fb      	ldrb	r3, [r7, #7]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d3d3      	bcc.n	8017ea8 <IntToUnicode+0x18>
  }
}
 8017f00:	bf00      	nop
 8017f02:	bf00      	nop
 8017f04:	371c      	adds	r7, #28
 8017f06:	46bd      	mov	sp, r7
 8017f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0c:	4770      	bx	lr
	...

08017f10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b0ba      	sub	sp, #232	@ 0xe8
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	601a      	str	r2, [r3, #0]
 8017f20:	605a      	str	r2, [r3, #4]
 8017f22:	609a      	str	r2, [r3, #8]
 8017f24:	60da      	str	r2, [r3, #12]
 8017f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017f28:	f107 0310 	add.w	r3, r7, #16
 8017f2c:	22c0      	movs	r2, #192	@ 0xc0
 8017f2e:	2100      	movs	r1, #0
 8017f30:	4618      	mov	r0, r3
 8017f32:	f001 f976 	bl	8019222 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8017fec <HAL_PCD_MspInit+0xdc>)
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d151      	bne.n	8017fe4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017f40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017f44:	f04f 0300 	mov.w	r3, #0
 8017f48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017f4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017f54:	f107 0310 	add.w	r3, r7, #16
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f7f6 f907 	bl	800e16c <HAL_RCCEx_PeriphCLKConfig>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d001      	beq.n	8017f68 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017f64:	f7ea f9a6 	bl	80022b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017f68:	f7f5 f90a 	bl	800d180 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017f6c:	4b20      	ldr	r3, [pc, #128]	@ (8017ff0 <HAL_PCD_MspInit+0xe0>)
 8017f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017f72:	4a1f      	ldr	r2, [pc, #124]	@ (8017ff0 <HAL_PCD_MspInit+0xe0>)
 8017f74:	f043 0301 	orr.w	r3, r3, #1
 8017f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8017ff0 <HAL_PCD_MspInit+0xe0>)
 8017f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017f82:	f003 0301 	and.w	r3, r3, #1
 8017f86:	60fb      	str	r3, [r7, #12]
 8017f88:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017f8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f92:	2302      	movs	r3, #2
 8017f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017fa4:	230a      	movs	r3, #10
 8017fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017faa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017fae:	4619      	mov	r1, r3
 8017fb0:	4810      	ldr	r0, [pc, #64]	@ (8017ff4 <HAL_PCD_MspInit+0xe4>)
 8017fb2:	f7ef fa21 	bl	80073f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8017ff0 <HAL_PCD_MspInit+0xe0>)
 8017fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8017ff0 <HAL_PCD_MspInit+0xe0>)
 8017fbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8017ff0 <HAL_PCD_MspInit+0xe0>)
 8017fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017fd0:	60bb      	str	r3, [r7, #8]
 8017fd2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	2100      	movs	r1, #0
 8017fd8:	2065      	movs	r0, #101	@ 0x65
 8017fda:	f7eb fb7a 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017fde:	2065      	movs	r0, #101	@ 0x65
 8017fe0:	f7eb fb91 	bl	8003706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017fe4:	bf00      	nop
 8017fe6:	37e8      	adds	r7, #232	@ 0xe8
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}
 8017fec:	40080000 	.word	0x40080000
 8017ff0:	58024400 	.word	0x58024400
 8017ff4:	58020000 	.word	0x58020000

08017ff8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b082      	sub	sp, #8
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801800c:	4619      	mov	r1, r3
 801800e:	4610      	mov	r0, r2
 8018010:	f7fe fad3 	bl	80165ba <USBD_LL_SetupStage>
}
 8018014:	bf00      	nop
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}

0801801c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	460b      	mov	r3, r1
 8018026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801802e:	78fa      	ldrb	r2, [r7, #3]
 8018030:	6879      	ldr	r1, [r7, #4]
 8018032:	4613      	mov	r3, r2
 8018034:	00db      	lsls	r3, r3, #3
 8018036:	4413      	add	r3, r2
 8018038:	009b      	lsls	r3, r3, #2
 801803a:	440b      	add	r3, r1
 801803c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018040:	681a      	ldr	r2, [r3, #0]
 8018042:	78fb      	ldrb	r3, [r7, #3]
 8018044:	4619      	mov	r1, r3
 8018046:	f7fe fb0d 	bl	8016664 <USBD_LL_DataOutStage>
}
 801804a:	bf00      	nop
 801804c:	3708      	adds	r7, #8
 801804e:	46bd      	mov	sp, r7
 8018050:	bd80      	pop	{r7, pc}

08018052 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018052:	b580      	push	{r7, lr}
 8018054:	b082      	sub	sp, #8
 8018056:	af00      	add	r7, sp, #0
 8018058:	6078      	str	r0, [r7, #4]
 801805a:	460b      	mov	r3, r1
 801805c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018064:	78fa      	ldrb	r2, [r7, #3]
 8018066:	6879      	ldr	r1, [r7, #4]
 8018068:	4613      	mov	r3, r2
 801806a:	00db      	lsls	r3, r3, #3
 801806c:	4413      	add	r3, r2
 801806e:	009b      	lsls	r3, r3, #2
 8018070:	440b      	add	r3, r1
 8018072:	3320      	adds	r3, #32
 8018074:	681a      	ldr	r2, [r3, #0]
 8018076:	78fb      	ldrb	r3, [r7, #3]
 8018078:	4619      	mov	r1, r3
 801807a:	f7fe fba6 	bl	80167ca <USBD_LL_DataInStage>
}
 801807e:	bf00      	nop
 8018080:	3708      	adds	r7, #8
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018086:	b580      	push	{r7, lr}
 8018088:	b082      	sub	sp, #8
 801808a:	af00      	add	r7, sp, #0
 801808c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018094:	4618      	mov	r0, r3
 8018096:	f7fe fce0 	bl	8016a5a <USBD_LL_SOF>
}
 801809a:	bf00      	nop
 801809c:	3708      	adds	r7, #8
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}

080180a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180a2:	b580      	push	{r7, lr}
 80180a4:	b084      	sub	sp, #16
 80180a6:	af00      	add	r7, sp, #0
 80180a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80180aa:	2301      	movs	r3, #1
 80180ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	79db      	ldrb	r3, [r3, #7]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d102      	bne.n	80180bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80180b6:	2300      	movs	r3, #0
 80180b8:	73fb      	strb	r3, [r7, #15]
 80180ba:	e008      	b.n	80180ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	79db      	ldrb	r3, [r3, #7]
 80180c0:	2b02      	cmp	r3, #2
 80180c2:	d102      	bne.n	80180ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80180c4:	2301      	movs	r3, #1
 80180c6:	73fb      	strb	r3, [r7, #15]
 80180c8:	e001      	b.n	80180ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80180ca:	f7ea f8f3 	bl	80022b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180d4:	7bfa      	ldrb	r2, [r7, #15]
 80180d6:	4611      	mov	r1, r2
 80180d8:	4618      	mov	r0, r3
 80180da:	f7fe fc7a 	bl	80169d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180e4:	4618      	mov	r0, r3
 80180e6:	f7fe fc22 	bl	801692e <USBD_LL_Reset>
}
 80180ea:	bf00      	nop
 80180ec:	3710      	adds	r7, #16
 80180ee:	46bd      	mov	sp, r7
 80180f0:	bd80      	pop	{r7, pc}
	...

080180f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018102:	4618      	mov	r0, r3
 8018104:	f7fe fc75 	bl	80169f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	687a      	ldr	r2, [r7, #4]
 8018114:	6812      	ldr	r2, [r2, #0]
 8018116:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801811a:	f043 0301 	orr.w	r3, r3, #1
 801811e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	7adb      	ldrb	r3, [r3, #11]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d005      	beq.n	8018134 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018128:	4b04      	ldr	r3, [pc, #16]	@ (801813c <HAL_PCD_SuspendCallback+0x48>)
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	4a03      	ldr	r2, [pc, #12]	@ (801813c <HAL_PCD_SuspendCallback+0x48>)
 801812e:	f043 0306 	orr.w	r3, r3, #6
 8018132:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018134:	bf00      	nop
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	e000ed00 	.word	0xe000ed00

08018140 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b082      	sub	sp, #8
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801814e:	4618      	mov	r0, r3
 8018150:	f7fe fc6b 	bl	8016a2a <USBD_LL_Resume>
}
 8018154:	bf00      	nop
 8018156:	3708      	adds	r7, #8
 8018158:	46bd      	mov	sp, r7
 801815a:	bd80      	pop	{r7, pc}

0801815c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b082      	sub	sp, #8
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
 8018164:	460b      	mov	r3, r1
 8018166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801816e:	78fa      	ldrb	r2, [r7, #3]
 8018170:	4611      	mov	r1, r2
 8018172:	4618      	mov	r0, r3
 8018174:	f7fe fcc3 	bl	8016afe <USBD_LL_IsoOUTIncomplete>
}
 8018178:	bf00      	nop
 801817a:	3708      	adds	r7, #8
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}

08018180 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
 8018188:	460b      	mov	r3, r1
 801818a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018192:	78fa      	ldrb	r2, [r7, #3]
 8018194:	4611      	mov	r1, r2
 8018196:	4618      	mov	r0, r3
 8018198:	f7fe fc7f 	bl	8016a9a <USBD_LL_IsoINIncomplete>
}
 801819c:	bf00      	nop
 801819e:	3708      	adds	r7, #8
 80181a0:	46bd      	mov	sp, r7
 80181a2:	bd80      	pop	{r7, pc}

080181a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b082      	sub	sp, #8
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181b2:	4618      	mov	r0, r3
 80181b4:	f7fe fcd5 	bl	8016b62 <USBD_LL_DevConnected>
}
 80181b8:	bf00      	nop
 80181ba:	3708      	adds	r7, #8
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}

080181c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fe fcd2 	bl	8016b78 <USBD_LL_DevDisconnected>
}
 80181d4:	bf00      	nop
 80181d6:	3708      	adds	r7, #8
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}

080181dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b082      	sub	sp, #8
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d13e      	bne.n	801826a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80181ec:	4a21      	ldr	r2, [pc, #132]	@ (8018274 <USBD_LL_Init+0x98>)
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	4a1f      	ldr	r2, [pc, #124]	@ (8018274 <USBD_LL_Init+0x98>)
 80181f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181fc:	4b1d      	ldr	r3, [pc, #116]	@ (8018274 <USBD_LL_Init+0x98>)
 80181fe:	4a1e      	ldr	r2, [pc, #120]	@ (8018278 <USBD_LL_Init+0x9c>)
 8018200:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018202:	4b1c      	ldr	r3, [pc, #112]	@ (8018274 <USBD_LL_Init+0x98>)
 8018204:	2209      	movs	r2, #9
 8018206:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018208:	4b1a      	ldr	r3, [pc, #104]	@ (8018274 <USBD_LL_Init+0x98>)
 801820a:	2202      	movs	r2, #2
 801820c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801820e:	4b19      	ldr	r3, [pc, #100]	@ (8018274 <USBD_LL_Init+0x98>)
 8018210:	2200      	movs	r2, #0
 8018212:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018214:	4b17      	ldr	r3, [pc, #92]	@ (8018274 <USBD_LL_Init+0x98>)
 8018216:	2202      	movs	r2, #2
 8018218:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801821a:	4b16      	ldr	r3, [pc, #88]	@ (8018274 <USBD_LL_Init+0x98>)
 801821c:	2200      	movs	r2, #0
 801821e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018220:	4b14      	ldr	r3, [pc, #80]	@ (8018274 <USBD_LL_Init+0x98>)
 8018222:	2200      	movs	r2, #0
 8018224:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018226:	4b13      	ldr	r3, [pc, #76]	@ (8018274 <USBD_LL_Init+0x98>)
 8018228:	2200      	movs	r2, #0
 801822a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801822c:	4b11      	ldr	r3, [pc, #68]	@ (8018274 <USBD_LL_Init+0x98>)
 801822e:	2200      	movs	r2, #0
 8018230:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018232:	4b10      	ldr	r3, [pc, #64]	@ (8018274 <USBD_LL_Init+0x98>)
 8018234:	2200      	movs	r2, #0
 8018236:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018238:	4b0e      	ldr	r3, [pc, #56]	@ (8018274 <USBD_LL_Init+0x98>)
 801823a:	2200      	movs	r2, #0
 801823c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801823e:	480d      	ldr	r0, [pc, #52]	@ (8018274 <USBD_LL_Init+0x98>)
 8018240:	f7f3 fcc4 	bl	800bbcc <HAL_PCD_Init>
 8018244:	4603      	mov	r3, r0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d001      	beq.n	801824e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801824a:	f7ea f833 	bl	80022b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801824e:	2180      	movs	r1, #128	@ 0x80
 8018250:	4808      	ldr	r0, [pc, #32]	@ (8018274 <USBD_LL_Init+0x98>)
 8018252:	f7f4 ff1a 	bl	800d08a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018256:	2240      	movs	r2, #64	@ 0x40
 8018258:	2100      	movs	r1, #0
 801825a:	4806      	ldr	r0, [pc, #24]	@ (8018274 <USBD_LL_Init+0x98>)
 801825c:	f7f4 fece 	bl	800cffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018260:	2280      	movs	r2, #128	@ 0x80
 8018262:	2101      	movs	r1, #1
 8018264:	4803      	ldr	r0, [pc, #12]	@ (8018274 <USBD_LL_Init+0x98>)
 8018266:	f7f4 fec9 	bl	800cffc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801826a:	2300      	movs	r3, #0
}
 801826c:	4618      	mov	r0, r3
 801826e:	3708      	adds	r7, #8
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	2402724c 	.word	0x2402724c
 8018278:	40080000 	.word	0x40080000

0801827c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b084      	sub	sp, #16
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018284:	2300      	movs	r3, #0
 8018286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018288:	2300      	movs	r3, #0
 801828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018292:	4618      	mov	r0, r3
 8018294:	f7f3 fda6 	bl	800bde4 <HAL_PCD_Start>
 8018298:	4603      	mov	r3, r0
 801829a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801829c:	7bfb      	ldrb	r3, [r7, #15]
 801829e:	4618      	mov	r0, r3
 80182a0:	f000 f942 	bl	8018528 <USBD_Get_USB_Status>
 80182a4:	4603      	mov	r3, r0
 80182a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3710      	adds	r7, #16
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}

080182b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80182b2:	b580      	push	{r7, lr}
 80182b4:	b084      	sub	sp, #16
 80182b6:	af00      	add	r7, sp, #0
 80182b8:	6078      	str	r0, [r7, #4]
 80182ba:	4608      	mov	r0, r1
 80182bc:	4611      	mov	r1, r2
 80182be:	461a      	mov	r2, r3
 80182c0:	4603      	mov	r3, r0
 80182c2:	70fb      	strb	r3, [r7, #3]
 80182c4:	460b      	mov	r3, r1
 80182c6:	70bb      	strb	r3, [r7, #2]
 80182c8:	4613      	mov	r3, r2
 80182ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182cc:	2300      	movs	r3, #0
 80182ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182d0:	2300      	movs	r3, #0
 80182d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80182da:	78bb      	ldrb	r3, [r7, #2]
 80182dc:	883a      	ldrh	r2, [r7, #0]
 80182de:	78f9      	ldrb	r1, [r7, #3]
 80182e0:	f7f4 faa7 	bl	800c832 <HAL_PCD_EP_Open>
 80182e4:	4603      	mov	r3, r0
 80182e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182e8:	7bfb      	ldrb	r3, [r7, #15]
 80182ea:	4618      	mov	r0, r3
 80182ec:	f000 f91c 	bl	8018528 <USBD_Get_USB_Status>
 80182f0:	4603      	mov	r3, r0
 80182f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3710      	adds	r7, #16
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}

080182fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182fe:	b580      	push	{r7, lr}
 8018300:	b084      	sub	sp, #16
 8018302:	af00      	add	r7, sp, #0
 8018304:	6078      	str	r0, [r7, #4]
 8018306:	460b      	mov	r3, r1
 8018308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801830a:	2300      	movs	r3, #0
 801830c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801830e:	2300      	movs	r3, #0
 8018310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018318:	78fa      	ldrb	r2, [r7, #3]
 801831a:	4611      	mov	r1, r2
 801831c:	4618      	mov	r0, r3
 801831e:	f7f4 faf2 	bl	800c906 <HAL_PCD_EP_Close>
 8018322:	4603      	mov	r3, r0
 8018324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018326:	7bfb      	ldrb	r3, [r7, #15]
 8018328:	4618      	mov	r0, r3
 801832a:	f000 f8fd 	bl	8018528 <USBD_Get_USB_Status>
 801832e:	4603      	mov	r3, r0
 8018330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018332:	7bbb      	ldrb	r3, [r7, #14]
}
 8018334:	4618      	mov	r0, r3
 8018336:	3710      	adds	r7, #16
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	460b      	mov	r3, r1
 8018346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018348:	2300      	movs	r3, #0
 801834a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801834c:	2300      	movs	r3, #0
 801834e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018356:	78fa      	ldrb	r2, [r7, #3]
 8018358:	4611      	mov	r1, r2
 801835a:	4618      	mov	r0, r3
 801835c:	f7f4 fbaa 	bl	800cab4 <HAL_PCD_EP_SetStall>
 8018360:	4603      	mov	r3, r0
 8018362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018364:	7bfb      	ldrb	r3, [r7, #15]
 8018366:	4618      	mov	r0, r3
 8018368:	f000 f8de 	bl	8018528 <USBD_Get_USB_Status>
 801836c:	4603      	mov	r3, r0
 801836e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018370:	7bbb      	ldrb	r3, [r7, #14]
}
 8018372:	4618      	mov	r0, r3
 8018374:	3710      	adds	r7, #16
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}

0801837a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801837a:	b580      	push	{r7, lr}
 801837c:	b084      	sub	sp, #16
 801837e:	af00      	add	r7, sp, #0
 8018380:	6078      	str	r0, [r7, #4]
 8018382:	460b      	mov	r3, r1
 8018384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018386:	2300      	movs	r3, #0
 8018388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801838a:	2300      	movs	r3, #0
 801838c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018394:	78fa      	ldrb	r2, [r7, #3]
 8018396:	4611      	mov	r1, r2
 8018398:	4618      	mov	r0, r3
 801839a:	f7f4 fbee 	bl	800cb7a <HAL_PCD_EP_ClrStall>
 801839e:	4603      	mov	r3, r0
 80183a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183a2:	7bfb      	ldrb	r3, [r7, #15]
 80183a4:	4618      	mov	r0, r3
 80183a6:	f000 f8bf 	bl	8018528 <USBD_Get_USB_Status>
 80183aa:	4603      	mov	r3, r0
 80183ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3710      	adds	r7, #16
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd80      	pop	{r7, pc}

080183b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183b8:	b480      	push	{r7}
 80183ba:	b085      	sub	sp, #20
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	460b      	mov	r3, r1
 80183c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80183cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	da0b      	bge.n	80183ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80183d4:	78fb      	ldrb	r3, [r7, #3]
 80183d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80183da:	68f9      	ldr	r1, [r7, #12]
 80183dc:	4613      	mov	r3, r2
 80183de:	00db      	lsls	r3, r3, #3
 80183e0:	4413      	add	r3, r2
 80183e2:	009b      	lsls	r3, r3, #2
 80183e4:	440b      	add	r3, r1
 80183e6:	3316      	adds	r3, #22
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	e00b      	b.n	8018404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80183ec:	78fb      	ldrb	r3, [r7, #3]
 80183ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80183f2:	68f9      	ldr	r1, [r7, #12]
 80183f4:	4613      	mov	r3, r2
 80183f6:	00db      	lsls	r3, r3, #3
 80183f8:	4413      	add	r3, r2
 80183fa:	009b      	lsls	r3, r3, #2
 80183fc:	440b      	add	r3, r1
 80183fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018404:	4618      	mov	r0, r3
 8018406:	3714      	adds	r7, #20
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr

08018410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b084      	sub	sp, #16
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
 8018418:	460b      	mov	r3, r1
 801841a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801841c:	2300      	movs	r3, #0
 801841e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018420:	2300      	movs	r3, #0
 8018422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801842a:	78fa      	ldrb	r2, [r7, #3]
 801842c:	4611      	mov	r1, r2
 801842e:	4618      	mov	r0, r3
 8018430:	f7f4 f9db 	bl	800c7ea <HAL_PCD_SetAddress>
 8018434:	4603      	mov	r3, r0
 8018436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018438:	7bfb      	ldrb	r3, [r7, #15]
 801843a:	4618      	mov	r0, r3
 801843c:	f000 f874 	bl	8018528 <USBD_Get_USB_Status>
 8018440:	4603      	mov	r3, r0
 8018442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018444:	7bbb      	ldrb	r3, [r7, #14]
}
 8018446:	4618      	mov	r0, r3
 8018448:	3710      	adds	r7, #16
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}

0801844e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801844e:	b580      	push	{r7, lr}
 8018450:	b086      	sub	sp, #24
 8018452:	af00      	add	r7, sp, #0
 8018454:	60f8      	str	r0, [r7, #12]
 8018456:	607a      	str	r2, [r7, #4]
 8018458:	603b      	str	r3, [r7, #0]
 801845a:	460b      	mov	r3, r1
 801845c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801845e:	2300      	movs	r3, #0
 8018460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018462:	2300      	movs	r3, #0
 8018464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801846c:	7af9      	ldrb	r1, [r7, #11]
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	687a      	ldr	r2, [r7, #4]
 8018472:	f7f4 fae5 	bl	800ca40 <HAL_PCD_EP_Transmit>
 8018476:	4603      	mov	r3, r0
 8018478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801847a:	7dfb      	ldrb	r3, [r7, #23]
 801847c:	4618      	mov	r0, r3
 801847e:	f000 f853 	bl	8018528 <USBD_Get_USB_Status>
 8018482:	4603      	mov	r3, r0
 8018484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018486:	7dbb      	ldrb	r3, [r7, #22]
}
 8018488:	4618      	mov	r0, r3
 801848a:	3718      	adds	r7, #24
 801848c:	46bd      	mov	sp, r7
 801848e:	bd80      	pop	{r7, pc}

08018490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b086      	sub	sp, #24
 8018494:	af00      	add	r7, sp, #0
 8018496:	60f8      	str	r0, [r7, #12]
 8018498:	607a      	str	r2, [r7, #4]
 801849a:	603b      	str	r3, [r7, #0]
 801849c:	460b      	mov	r3, r1
 801849e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184a0:	2300      	movs	r3, #0
 80184a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184a4:	2300      	movs	r3, #0
 80184a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80184ae:	7af9      	ldrb	r1, [r7, #11]
 80184b0:	683b      	ldr	r3, [r7, #0]
 80184b2:	687a      	ldr	r2, [r7, #4]
 80184b4:	f7f4 fa71 	bl	800c99a <HAL_PCD_EP_Receive>
 80184b8:	4603      	mov	r3, r0
 80184ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184bc:	7dfb      	ldrb	r3, [r7, #23]
 80184be:	4618      	mov	r0, r3
 80184c0:	f000 f832 	bl	8018528 <USBD_Get_USB_Status>
 80184c4:	4603      	mov	r3, r0
 80184c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80184c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3718      	adds	r7, #24
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}

080184d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184d2:	b580      	push	{r7, lr}
 80184d4:	b082      	sub	sp, #8
 80184d6:	af00      	add	r7, sp, #0
 80184d8:	6078      	str	r0, [r7, #4]
 80184da:	460b      	mov	r3, r1
 80184dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184e4:	78fa      	ldrb	r2, [r7, #3]
 80184e6:	4611      	mov	r1, r2
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7f4 fa91 	bl	800ca10 <HAL_PCD_EP_GetRxCount>
 80184ee:	4603      	mov	r3, r0
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	3708      	adds	r7, #8
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}

080184f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80184f8:	b480      	push	{r7}
 80184fa:	b083      	sub	sp, #12
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018500:	4b03      	ldr	r3, [pc, #12]	@ (8018510 <USBD_static_malloc+0x18>)
}
 8018502:	4618      	mov	r0, r3
 8018504:	370c      	adds	r7, #12
 8018506:	46bd      	mov	sp, r7
 8018508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850c:	4770      	bx	lr
 801850e:	bf00      	nop
 8018510:	24027730 	.word	0x24027730

08018514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018514:	b480      	push	{r7}
 8018516:	b083      	sub	sp, #12
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801851c:	bf00      	nop
 801851e:	370c      	adds	r7, #12
 8018520:	46bd      	mov	sp, r7
 8018522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018526:	4770      	bx	lr

08018528 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018528:	b480      	push	{r7}
 801852a:	b085      	sub	sp, #20
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018532:	2300      	movs	r3, #0
 8018534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018536:	79fb      	ldrb	r3, [r7, #7]
 8018538:	2b03      	cmp	r3, #3
 801853a:	d817      	bhi.n	801856c <USBD_Get_USB_Status+0x44>
 801853c:	a201      	add	r2, pc, #4	@ (adr r2, 8018544 <USBD_Get_USB_Status+0x1c>)
 801853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018542:	bf00      	nop
 8018544:	08018555 	.word	0x08018555
 8018548:	0801855b 	.word	0x0801855b
 801854c:	08018561 	.word	0x08018561
 8018550:	08018567 	.word	0x08018567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018554:	2300      	movs	r3, #0
 8018556:	73fb      	strb	r3, [r7, #15]
    break;
 8018558:	e00b      	b.n	8018572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801855a:	2303      	movs	r3, #3
 801855c:	73fb      	strb	r3, [r7, #15]
    break;
 801855e:	e008      	b.n	8018572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018560:	2301      	movs	r3, #1
 8018562:	73fb      	strb	r3, [r7, #15]
    break;
 8018564:	e005      	b.n	8018572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018566:	2303      	movs	r3, #3
 8018568:	73fb      	strb	r3, [r7, #15]
    break;
 801856a:	e002      	b.n	8018572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801856c:	2303      	movs	r3, #3
 801856e:	73fb      	strb	r3, [r7, #15]
    break;
 8018570:	bf00      	nop
  }
  return usb_status;
 8018572:	7bfb      	ldrb	r3, [r7, #15]
}
 8018574:	4618      	mov	r0, r3
 8018576:	3714      	adds	r7, #20
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr

08018580 <malloc>:
 8018580:	4b02      	ldr	r3, [pc, #8]	@ (801858c <malloc+0xc>)
 8018582:	4601      	mov	r1, r0
 8018584:	6818      	ldr	r0, [r3, #0]
 8018586:	f000 b825 	b.w	80185d4 <_malloc_r>
 801858a:	bf00      	nop
 801858c:	24000128 	.word	0x24000128

08018590 <sbrk_aligned>:
 8018590:	b570      	push	{r4, r5, r6, lr}
 8018592:	4e0f      	ldr	r6, [pc, #60]	@ (80185d0 <sbrk_aligned+0x40>)
 8018594:	460c      	mov	r4, r1
 8018596:	6831      	ldr	r1, [r6, #0]
 8018598:	4605      	mov	r5, r0
 801859a:	b911      	cbnz	r1, 80185a2 <sbrk_aligned+0x12>
 801859c:	f000 fe82 	bl	80192a4 <_sbrk_r>
 80185a0:	6030      	str	r0, [r6, #0]
 80185a2:	4621      	mov	r1, r4
 80185a4:	4628      	mov	r0, r5
 80185a6:	f000 fe7d 	bl	80192a4 <_sbrk_r>
 80185aa:	1c43      	adds	r3, r0, #1
 80185ac:	d103      	bne.n	80185b6 <sbrk_aligned+0x26>
 80185ae:	f04f 34ff 	mov.w	r4, #4294967295
 80185b2:	4620      	mov	r0, r4
 80185b4:	bd70      	pop	{r4, r5, r6, pc}
 80185b6:	1cc4      	adds	r4, r0, #3
 80185b8:	f024 0403 	bic.w	r4, r4, #3
 80185bc:	42a0      	cmp	r0, r4
 80185be:	d0f8      	beq.n	80185b2 <sbrk_aligned+0x22>
 80185c0:	1a21      	subs	r1, r4, r0
 80185c2:	4628      	mov	r0, r5
 80185c4:	f000 fe6e 	bl	80192a4 <_sbrk_r>
 80185c8:	3001      	adds	r0, #1
 80185ca:	d1f2      	bne.n	80185b2 <sbrk_aligned+0x22>
 80185cc:	e7ef      	b.n	80185ae <sbrk_aligned+0x1e>
 80185ce:	bf00      	nop
 80185d0:	24027950 	.word	0x24027950

080185d4 <_malloc_r>:
 80185d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185d8:	1ccd      	adds	r5, r1, #3
 80185da:	f025 0503 	bic.w	r5, r5, #3
 80185de:	3508      	adds	r5, #8
 80185e0:	2d0c      	cmp	r5, #12
 80185e2:	bf38      	it	cc
 80185e4:	250c      	movcc	r5, #12
 80185e6:	2d00      	cmp	r5, #0
 80185e8:	4606      	mov	r6, r0
 80185ea:	db01      	blt.n	80185f0 <_malloc_r+0x1c>
 80185ec:	42a9      	cmp	r1, r5
 80185ee:	d904      	bls.n	80185fa <_malloc_r+0x26>
 80185f0:	230c      	movs	r3, #12
 80185f2:	6033      	str	r3, [r6, #0]
 80185f4:	2000      	movs	r0, #0
 80185f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80186d0 <_malloc_r+0xfc>
 80185fe:	f000 f869 	bl	80186d4 <__malloc_lock>
 8018602:	f8d8 3000 	ldr.w	r3, [r8]
 8018606:	461c      	mov	r4, r3
 8018608:	bb44      	cbnz	r4, 801865c <_malloc_r+0x88>
 801860a:	4629      	mov	r1, r5
 801860c:	4630      	mov	r0, r6
 801860e:	f7ff ffbf 	bl	8018590 <sbrk_aligned>
 8018612:	1c43      	adds	r3, r0, #1
 8018614:	4604      	mov	r4, r0
 8018616:	d158      	bne.n	80186ca <_malloc_r+0xf6>
 8018618:	f8d8 4000 	ldr.w	r4, [r8]
 801861c:	4627      	mov	r7, r4
 801861e:	2f00      	cmp	r7, #0
 8018620:	d143      	bne.n	80186aa <_malloc_r+0xd6>
 8018622:	2c00      	cmp	r4, #0
 8018624:	d04b      	beq.n	80186be <_malloc_r+0xea>
 8018626:	6823      	ldr	r3, [r4, #0]
 8018628:	4639      	mov	r1, r7
 801862a:	4630      	mov	r0, r6
 801862c:	eb04 0903 	add.w	r9, r4, r3
 8018630:	f000 fe38 	bl	80192a4 <_sbrk_r>
 8018634:	4581      	cmp	r9, r0
 8018636:	d142      	bne.n	80186be <_malloc_r+0xea>
 8018638:	6821      	ldr	r1, [r4, #0]
 801863a:	1a6d      	subs	r5, r5, r1
 801863c:	4629      	mov	r1, r5
 801863e:	4630      	mov	r0, r6
 8018640:	f7ff ffa6 	bl	8018590 <sbrk_aligned>
 8018644:	3001      	adds	r0, #1
 8018646:	d03a      	beq.n	80186be <_malloc_r+0xea>
 8018648:	6823      	ldr	r3, [r4, #0]
 801864a:	442b      	add	r3, r5
 801864c:	6023      	str	r3, [r4, #0]
 801864e:	f8d8 3000 	ldr.w	r3, [r8]
 8018652:	685a      	ldr	r2, [r3, #4]
 8018654:	bb62      	cbnz	r2, 80186b0 <_malloc_r+0xdc>
 8018656:	f8c8 7000 	str.w	r7, [r8]
 801865a:	e00f      	b.n	801867c <_malloc_r+0xa8>
 801865c:	6822      	ldr	r2, [r4, #0]
 801865e:	1b52      	subs	r2, r2, r5
 8018660:	d420      	bmi.n	80186a4 <_malloc_r+0xd0>
 8018662:	2a0b      	cmp	r2, #11
 8018664:	d917      	bls.n	8018696 <_malloc_r+0xc2>
 8018666:	1961      	adds	r1, r4, r5
 8018668:	42a3      	cmp	r3, r4
 801866a:	6025      	str	r5, [r4, #0]
 801866c:	bf18      	it	ne
 801866e:	6059      	strne	r1, [r3, #4]
 8018670:	6863      	ldr	r3, [r4, #4]
 8018672:	bf08      	it	eq
 8018674:	f8c8 1000 	streq.w	r1, [r8]
 8018678:	5162      	str	r2, [r4, r5]
 801867a:	604b      	str	r3, [r1, #4]
 801867c:	4630      	mov	r0, r6
 801867e:	f000 f82f 	bl	80186e0 <__malloc_unlock>
 8018682:	f104 000b 	add.w	r0, r4, #11
 8018686:	1d23      	adds	r3, r4, #4
 8018688:	f020 0007 	bic.w	r0, r0, #7
 801868c:	1ac2      	subs	r2, r0, r3
 801868e:	bf1c      	itt	ne
 8018690:	1a1b      	subne	r3, r3, r0
 8018692:	50a3      	strne	r3, [r4, r2]
 8018694:	e7af      	b.n	80185f6 <_malloc_r+0x22>
 8018696:	6862      	ldr	r2, [r4, #4]
 8018698:	42a3      	cmp	r3, r4
 801869a:	bf0c      	ite	eq
 801869c:	f8c8 2000 	streq.w	r2, [r8]
 80186a0:	605a      	strne	r2, [r3, #4]
 80186a2:	e7eb      	b.n	801867c <_malloc_r+0xa8>
 80186a4:	4623      	mov	r3, r4
 80186a6:	6864      	ldr	r4, [r4, #4]
 80186a8:	e7ae      	b.n	8018608 <_malloc_r+0x34>
 80186aa:	463c      	mov	r4, r7
 80186ac:	687f      	ldr	r7, [r7, #4]
 80186ae:	e7b6      	b.n	801861e <_malloc_r+0x4a>
 80186b0:	461a      	mov	r2, r3
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	42a3      	cmp	r3, r4
 80186b6:	d1fb      	bne.n	80186b0 <_malloc_r+0xdc>
 80186b8:	2300      	movs	r3, #0
 80186ba:	6053      	str	r3, [r2, #4]
 80186bc:	e7de      	b.n	801867c <_malloc_r+0xa8>
 80186be:	230c      	movs	r3, #12
 80186c0:	6033      	str	r3, [r6, #0]
 80186c2:	4630      	mov	r0, r6
 80186c4:	f000 f80c 	bl	80186e0 <__malloc_unlock>
 80186c8:	e794      	b.n	80185f4 <_malloc_r+0x20>
 80186ca:	6005      	str	r5, [r0, #0]
 80186cc:	e7d6      	b.n	801867c <_malloc_r+0xa8>
 80186ce:	bf00      	nop
 80186d0:	24027954 	.word	0x24027954

080186d4 <__malloc_lock>:
 80186d4:	4801      	ldr	r0, [pc, #4]	@ (80186dc <__malloc_lock+0x8>)
 80186d6:	f000 be32 	b.w	801933e <__retarget_lock_acquire_recursive>
 80186da:	bf00      	nop
 80186dc:	24027a98 	.word	0x24027a98

080186e0 <__malloc_unlock>:
 80186e0:	4801      	ldr	r0, [pc, #4]	@ (80186e8 <__malloc_unlock+0x8>)
 80186e2:	f000 be2d 	b.w	8019340 <__retarget_lock_release_recursive>
 80186e6:	bf00      	nop
 80186e8:	24027a98 	.word	0x24027a98

080186ec <rand>:
 80186ec:	4b16      	ldr	r3, [pc, #88]	@ (8018748 <rand+0x5c>)
 80186ee:	b510      	push	{r4, lr}
 80186f0:	681c      	ldr	r4, [r3, #0]
 80186f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80186f4:	b9b3      	cbnz	r3, 8018724 <rand+0x38>
 80186f6:	2018      	movs	r0, #24
 80186f8:	f7ff ff42 	bl	8018580 <malloc>
 80186fc:	4602      	mov	r2, r0
 80186fe:	6320      	str	r0, [r4, #48]	@ 0x30
 8018700:	b920      	cbnz	r0, 801870c <rand+0x20>
 8018702:	4b12      	ldr	r3, [pc, #72]	@ (801874c <rand+0x60>)
 8018704:	4812      	ldr	r0, [pc, #72]	@ (8018750 <rand+0x64>)
 8018706:	2152      	movs	r1, #82	@ 0x52
 8018708:	f000 fe2a 	bl	8019360 <__assert_func>
 801870c:	4911      	ldr	r1, [pc, #68]	@ (8018754 <rand+0x68>)
 801870e:	4b12      	ldr	r3, [pc, #72]	@ (8018758 <rand+0x6c>)
 8018710:	e9c0 1300 	strd	r1, r3, [r0]
 8018714:	4b11      	ldr	r3, [pc, #68]	@ (801875c <rand+0x70>)
 8018716:	6083      	str	r3, [r0, #8]
 8018718:	230b      	movs	r3, #11
 801871a:	8183      	strh	r3, [r0, #12]
 801871c:	2100      	movs	r1, #0
 801871e:	2001      	movs	r0, #1
 8018720:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018724:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018726:	480e      	ldr	r0, [pc, #56]	@ (8018760 <rand+0x74>)
 8018728:	690b      	ldr	r3, [r1, #16]
 801872a:	694c      	ldr	r4, [r1, #20]
 801872c:	4a0d      	ldr	r2, [pc, #52]	@ (8018764 <rand+0x78>)
 801872e:	4358      	muls	r0, r3
 8018730:	fb02 0004 	mla	r0, r2, r4, r0
 8018734:	fba3 3202 	umull	r3, r2, r3, r2
 8018738:	3301      	adds	r3, #1
 801873a:	eb40 0002 	adc.w	r0, r0, r2
 801873e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018742:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018746:	bd10      	pop	{r4, pc}
 8018748:	24000128 	.word	0x24000128
 801874c:	0801b6a0 	.word	0x0801b6a0
 8018750:	0801b6b7 	.word	0x0801b6b7
 8018754:	abcd330e 	.word	0xabcd330e
 8018758:	e66d1234 	.word	0xe66d1234
 801875c:	0005deec 	.word	0x0005deec
 8018760:	5851f42d 	.word	0x5851f42d
 8018764:	4c957f2d 	.word	0x4c957f2d

08018768 <__cvt>:
 8018768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876a:	ed2d 8b02 	vpush	{d8}
 801876e:	eeb0 8b40 	vmov.f64	d8, d0
 8018772:	b085      	sub	sp, #20
 8018774:	4617      	mov	r7, r2
 8018776:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018778:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801877a:	ee18 2a90 	vmov	r2, s17
 801877e:	f025 0520 	bic.w	r5, r5, #32
 8018782:	2a00      	cmp	r2, #0
 8018784:	bfb6      	itet	lt
 8018786:	222d      	movlt	r2, #45	@ 0x2d
 8018788:	2200      	movge	r2, #0
 801878a:	eeb1 8b40 	vneglt.f64	d8, d0
 801878e:	2d46      	cmp	r5, #70	@ 0x46
 8018790:	460c      	mov	r4, r1
 8018792:	701a      	strb	r2, [r3, #0]
 8018794:	d004      	beq.n	80187a0 <__cvt+0x38>
 8018796:	2d45      	cmp	r5, #69	@ 0x45
 8018798:	d100      	bne.n	801879c <__cvt+0x34>
 801879a:	3401      	adds	r4, #1
 801879c:	2102      	movs	r1, #2
 801879e:	e000      	b.n	80187a2 <__cvt+0x3a>
 80187a0:	2103      	movs	r1, #3
 80187a2:	ab03      	add	r3, sp, #12
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	ab02      	add	r3, sp, #8
 80187a8:	9300      	str	r3, [sp, #0]
 80187aa:	4622      	mov	r2, r4
 80187ac:	4633      	mov	r3, r6
 80187ae:	eeb0 0b48 	vmov.f64	d0, d8
 80187b2:	f000 fe7d 	bl	80194b0 <_dtoa_r>
 80187b6:	2d47      	cmp	r5, #71	@ 0x47
 80187b8:	d114      	bne.n	80187e4 <__cvt+0x7c>
 80187ba:	07fb      	lsls	r3, r7, #31
 80187bc:	d50a      	bpl.n	80187d4 <__cvt+0x6c>
 80187be:	1902      	adds	r2, r0, r4
 80187c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80187c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c8:	bf08      	it	eq
 80187ca:	9203      	streq	r2, [sp, #12]
 80187cc:	2130      	movs	r1, #48	@ 0x30
 80187ce:	9b03      	ldr	r3, [sp, #12]
 80187d0:	4293      	cmp	r3, r2
 80187d2:	d319      	bcc.n	8018808 <__cvt+0xa0>
 80187d4:	9b03      	ldr	r3, [sp, #12]
 80187d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80187d8:	1a1b      	subs	r3, r3, r0
 80187da:	6013      	str	r3, [r2, #0]
 80187dc:	b005      	add	sp, #20
 80187de:	ecbd 8b02 	vpop	{d8}
 80187e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187e4:	2d46      	cmp	r5, #70	@ 0x46
 80187e6:	eb00 0204 	add.w	r2, r0, r4
 80187ea:	d1e9      	bne.n	80187c0 <__cvt+0x58>
 80187ec:	7803      	ldrb	r3, [r0, #0]
 80187ee:	2b30      	cmp	r3, #48	@ 0x30
 80187f0:	d107      	bne.n	8018802 <__cvt+0x9a>
 80187f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80187f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fa:	bf1c      	itt	ne
 80187fc:	f1c4 0401 	rsbne	r4, r4, #1
 8018800:	6034      	strne	r4, [r6, #0]
 8018802:	6833      	ldr	r3, [r6, #0]
 8018804:	441a      	add	r2, r3
 8018806:	e7db      	b.n	80187c0 <__cvt+0x58>
 8018808:	1c5c      	adds	r4, r3, #1
 801880a:	9403      	str	r4, [sp, #12]
 801880c:	7019      	strb	r1, [r3, #0]
 801880e:	e7de      	b.n	80187ce <__cvt+0x66>

08018810 <__exponent>:
 8018810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018812:	2900      	cmp	r1, #0
 8018814:	bfba      	itte	lt
 8018816:	4249      	neglt	r1, r1
 8018818:	232d      	movlt	r3, #45	@ 0x2d
 801881a:	232b      	movge	r3, #43	@ 0x2b
 801881c:	2909      	cmp	r1, #9
 801881e:	7002      	strb	r2, [r0, #0]
 8018820:	7043      	strb	r3, [r0, #1]
 8018822:	dd29      	ble.n	8018878 <__exponent+0x68>
 8018824:	f10d 0307 	add.w	r3, sp, #7
 8018828:	461d      	mov	r5, r3
 801882a:	270a      	movs	r7, #10
 801882c:	461a      	mov	r2, r3
 801882e:	fbb1 f6f7 	udiv	r6, r1, r7
 8018832:	fb07 1416 	mls	r4, r7, r6, r1
 8018836:	3430      	adds	r4, #48	@ 0x30
 8018838:	f802 4c01 	strb.w	r4, [r2, #-1]
 801883c:	460c      	mov	r4, r1
 801883e:	2c63      	cmp	r4, #99	@ 0x63
 8018840:	f103 33ff 	add.w	r3, r3, #4294967295
 8018844:	4631      	mov	r1, r6
 8018846:	dcf1      	bgt.n	801882c <__exponent+0x1c>
 8018848:	3130      	adds	r1, #48	@ 0x30
 801884a:	1e94      	subs	r4, r2, #2
 801884c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018850:	1c41      	adds	r1, r0, #1
 8018852:	4623      	mov	r3, r4
 8018854:	42ab      	cmp	r3, r5
 8018856:	d30a      	bcc.n	801886e <__exponent+0x5e>
 8018858:	f10d 0309 	add.w	r3, sp, #9
 801885c:	1a9b      	subs	r3, r3, r2
 801885e:	42ac      	cmp	r4, r5
 8018860:	bf88      	it	hi
 8018862:	2300      	movhi	r3, #0
 8018864:	3302      	adds	r3, #2
 8018866:	4403      	add	r3, r0
 8018868:	1a18      	subs	r0, r3, r0
 801886a:	b003      	add	sp, #12
 801886c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801886e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018872:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018876:	e7ed      	b.n	8018854 <__exponent+0x44>
 8018878:	2330      	movs	r3, #48	@ 0x30
 801887a:	3130      	adds	r1, #48	@ 0x30
 801887c:	7083      	strb	r3, [r0, #2]
 801887e:	70c1      	strb	r1, [r0, #3]
 8018880:	1d03      	adds	r3, r0, #4
 8018882:	e7f1      	b.n	8018868 <__exponent+0x58>
 8018884:	0000      	movs	r0, r0
	...

08018888 <_printf_float>:
 8018888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888c:	b08d      	sub	sp, #52	@ 0x34
 801888e:	460c      	mov	r4, r1
 8018890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018894:	4616      	mov	r6, r2
 8018896:	461f      	mov	r7, r3
 8018898:	4605      	mov	r5, r0
 801889a:	f000 fccb 	bl	8019234 <_localeconv_r>
 801889e:	f8d0 b000 	ldr.w	fp, [r0]
 80188a2:	4658      	mov	r0, fp
 80188a4:	f7e7 fd6c 	bl	8000380 <strlen>
 80188a8:	2300      	movs	r3, #0
 80188aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80188ac:	f8d8 3000 	ldr.w	r3, [r8]
 80188b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80188b4:	6822      	ldr	r2, [r4, #0]
 80188b6:	9005      	str	r0, [sp, #20]
 80188b8:	3307      	adds	r3, #7
 80188ba:	f023 0307 	bic.w	r3, r3, #7
 80188be:	f103 0108 	add.w	r1, r3, #8
 80188c2:	f8c8 1000 	str.w	r1, [r8]
 80188c6:	ed93 0b00 	vldr	d0, [r3]
 80188ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8018b28 <_printf_float+0x2a0>
 80188ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80188d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80188d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80188de:	dd24      	ble.n	801892a <_printf_float+0xa2>
 80188e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80188e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e8:	d502      	bpl.n	80188f0 <_printf_float+0x68>
 80188ea:	232d      	movs	r3, #45	@ 0x2d
 80188ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80188f0:	498f      	ldr	r1, [pc, #572]	@ (8018b30 <_printf_float+0x2a8>)
 80188f2:	4b90      	ldr	r3, [pc, #576]	@ (8018b34 <_printf_float+0x2ac>)
 80188f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80188f8:	bf8c      	ite	hi
 80188fa:	4688      	movhi	r8, r1
 80188fc:	4698      	movls	r8, r3
 80188fe:	f022 0204 	bic.w	r2, r2, #4
 8018902:	2303      	movs	r3, #3
 8018904:	6123      	str	r3, [r4, #16]
 8018906:	6022      	str	r2, [r4, #0]
 8018908:	f04f 0a00 	mov.w	sl, #0
 801890c:	9700      	str	r7, [sp, #0]
 801890e:	4633      	mov	r3, r6
 8018910:	aa0b      	add	r2, sp, #44	@ 0x2c
 8018912:	4621      	mov	r1, r4
 8018914:	4628      	mov	r0, r5
 8018916:	f000 f9d1 	bl	8018cbc <_printf_common>
 801891a:	3001      	adds	r0, #1
 801891c:	f040 8089 	bne.w	8018a32 <_printf_float+0x1aa>
 8018920:	f04f 30ff 	mov.w	r0, #4294967295
 8018924:	b00d      	add	sp, #52	@ 0x34
 8018926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801892a:	eeb4 0b40 	vcmp.f64	d0, d0
 801892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018932:	d709      	bvc.n	8018948 <_printf_float+0xc0>
 8018934:	ee10 3a90 	vmov	r3, s1
 8018938:	2b00      	cmp	r3, #0
 801893a:	bfbc      	itt	lt
 801893c:	232d      	movlt	r3, #45	@ 0x2d
 801893e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8018942:	497d      	ldr	r1, [pc, #500]	@ (8018b38 <_printf_float+0x2b0>)
 8018944:	4b7d      	ldr	r3, [pc, #500]	@ (8018b3c <_printf_float+0x2b4>)
 8018946:	e7d5      	b.n	80188f4 <_printf_float+0x6c>
 8018948:	6863      	ldr	r3, [r4, #4]
 801894a:	1c59      	adds	r1, r3, #1
 801894c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8018950:	d139      	bne.n	80189c6 <_printf_float+0x13e>
 8018952:	2306      	movs	r3, #6
 8018954:	6063      	str	r3, [r4, #4]
 8018956:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801895a:	2300      	movs	r3, #0
 801895c:	6022      	str	r2, [r4, #0]
 801895e:	9303      	str	r3, [sp, #12]
 8018960:	ab0a      	add	r3, sp, #40	@ 0x28
 8018962:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018966:	ab09      	add	r3, sp, #36	@ 0x24
 8018968:	9300      	str	r3, [sp, #0]
 801896a:	6861      	ldr	r1, [r4, #4]
 801896c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8018970:	4628      	mov	r0, r5
 8018972:	f7ff fef9 	bl	8018768 <__cvt>
 8018976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801897a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801897c:	4680      	mov	r8, r0
 801897e:	d129      	bne.n	80189d4 <_printf_float+0x14c>
 8018980:	1cc8      	adds	r0, r1, #3
 8018982:	db02      	blt.n	801898a <_printf_float+0x102>
 8018984:	6863      	ldr	r3, [r4, #4]
 8018986:	4299      	cmp	r1, r3
 8018988:	dd41      	ble.n	8018a0e <_printf_float+0x186>
 801898a:	f1a9 0902 	sub.w	r9, r9, #2
 801898e:	fa5f f989 	uxtb.w	r9, r9
 8018992:	3901      	subs	r1, #1
 8018994:	464a      	mov	r2, r9
 8018996:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801899a:	9109      	str	r1, [sp, #36]	@ 0x24
 801899c:	f7ff ff38 	bl	8018810 <__exponent>
 80189a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80189a2:	1813      	adds	r3, r2, r0
 80189a4:	2a01      	cmp	r2, #1
 80189a6:	4682      	mov	sl, r0
 80189a8:	6123      	str	r3, [r4, #16]
 80189aa:	dc02      	bgt.n	80189b2 <_printf_float+0x12a>
 80189ac:	6822      	ldr	r2, [r4, #0]
 80189ae:	07d2      	lsls	r2, r2, #31
 80189b0:	d501      	bpl.n	80189b6 <_printf_float+0x12e>
 80189b2:	3301      	adds	r3, #1
 80189b4:	6123      	str	r3, [r4, #16]
 80189b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d0a6      	beq.n	801890c <_printf_float+0x84>
 80189be:	232d      	movs	r3, #45	@ 0x2d
 80189c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80189c4:	e7a2      	b.n	801890c <_printf_float+0x84>
 80189c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80189ca:	d1c4      	bne.n	8018956 <_printf_float+0xce>
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d1c2      	bne.n	8018956 <_printf_float+0xce>
 80189d0:	2301      	movs	r3, #1
 80189d2:	e7bf      	b.n	8018954 <_printf_float+0xcc>
 80189d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80189d8:	d9db      	bls.n	8018992 <_printf_float+0x10a>
 80189da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80189de:	d118      	bne.n	8018a12 <_printf_float+0x18a>
 80189e0:	2900      	cmp	r1, #0
 80189e2:	6863      	ldr	r3, [r4, #4]
 80189e4:	dd0b      	ble.n	80189fe <_printf_float+0x176>
 80189e6:	6121      	str	r1, [r4, #16]
 80189e8:	b913      	cbnz	r3, 80189f0 <_printf_float+0x168>
 80189ea:	6822      	ldr	r2, [r4, #0]
 80189ec:	07d0      	lsls	r0, r2, #31
 80189ee:	d502      	bpl.n	80189f6 <_printf_float+0x16e>
 80189f0:	3301      	adds	r3, #1
 80189f2:	440b      	add	r3, r1
 80189f4:	6123      	str	r3, [r4, #16]
 80189f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80189f8:	f04f 0a00 	mov.w	sl, #0
 80189fc:	e7db      	b.n	80189b6 <_printf_float+0x12e>
 80189fe:	b913      	cbnz	r3, 8018a06 <_printf_float+0x17e>
 8018a00:	6822      	ldr	r2, [r4, #0]
 8018a02:	07d2      	lsls	r2, r2, #31
 8018a04:	d501      	bpl.n	8018a0a <_printf_float+0x182>
 8018a06:	3302      	adds	r3, #2
 8018a08:	e7f4      	b.n	80189f4 <_printf_float+0x16c>
 8018a0a:	2301      	movs	r3, #1
 8018a0c:	e7f2      	b.n	80189f4 <_printf_float+0x16c>
 8018a0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8018a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a14:	4299      	cmp	r1, r3
 8018a16:	db05      	blt.n	8018a24 <_printf_float+0x19c>
 8018a18:	6823      	ldr	r3, [r4, #0]
 8018a1a:	6121      	str	r1, [r4, #16]
 8018a1c:	07d8      	lsls	r0, r3, #31
 8018a1e:	d5ea      	bpl.n	80189f6 <_printf_float+0x16e>
 8018a20:	1c4b      	adds	r3, r1, #1
 8018a22:	e7e7      	b.n	80189f4 <_printf_float+0x16c>
 8018a24:	2900      	cmp	r1, #0
 8018a26:	bfd4      	ite	le
 8018a28:	f1c1 0202 	rsble	r2, r1, #2
 8018a2c:	2201      	movgt	r2, #1
 8018a2e:	4413      	add	r3, r2
 8018a30:	e7e0      	b.n	80189f4 <_printf_float+0x16c>
 8018a32:	6823      	ldr	r3, [r4, #0]
 8018a34:	055a      	lsls	r2, r3, #21
 8018a36:	d407      	bmi.n	8018a48 <_printf_float+0x1c0>
 8018a38:	6923      	ldr	r3, [r4, #16]
 8018a3a:	4642      	mov	r2, r8
 8018a3c:	4631      	mov	r1, r6
 8018a3e:	4628      	mov	r0, r5
 8018a40:	47b8      	blx	r7
 8018a42:	3001      	adds	r0, #1
 8018a44:	d12a      	bne.n	8018a9c <_printf_float+0x214>
 8018a46:	e76b      	b.n	8018920 <_printf_float+0x98>
 8018a48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8018a4c:	f240 80e0 	bls.w	8018c10 <_printf_float+0x388>
 8018a50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018a54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a5c:	d133      	bne.n	8018ac6 <_printf_float+0x23e>
 8018a5e:	4a38      	ldr	r2, [pc, #224]	@ (8018b40 <_printf_float+0x2b8>)
 8018a60:	2301      	movs	r3, #1
 8018a62:	4631      	mov	r1, r6
 8018a64:	4628      	mov	r0, r5
 8018a66:	47b8      	blx	r7
 8018a68:	3001      	adds	r0, #1
 8018a6a:	f43f af59 	beq.w	8018920 <_printf_float+0x98>
 8018a6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8018a72:	4543      	cmp	r3, r8
 8018a74:	db02      	blt.n	8018a7c <_printf_float+0x1f4>
 8018a76:	6823      	ldr	r3, [r4, #0]
 8018a78:	07d8      	lsls	r0, r3, #31
 8018a7a:	d50f      	bpl.n	8018a9c <_printf_float+0x214>
 8018a7c:	9b05      	ldr	r3, [sp, #20]
 8018a7e:	465a      	mov	r2, fp
 8018a80:	4631      	mov	r1, r6
 8018a82:	4628      	mov	r0, r5
 8018a84:	47b8      	blx	r7
 8018a86:	3001      	adds	r0, #1
 8018a88:	f43f af4a 	beq.w	8018920 <_printf_float+0x98>
 8018a8c:	f04f 0900 	mov.w	r9, #0
 8018a90:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a94:	f104 0a1a 	add.w	sl, r4, #26
 8018a98:	45c8      	cmp	r8, r9
 8018a9a:	dc09      	bgt.n	8018ab0 <_printf_float+0x228>
 8018a9c:	6823      	ldr	r3, [r4, #0]
 8018a9e:	079b      	lsls	r3, r3, #30
 8018aa0:	f100 8107 	bmi.w	8018cb2 <_printf_float+0x42a>
 8018aa4:	68e0      	ldr	r0, [r4, #12]
 8018aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018aa8:	4298      	cmp	r0, r3
 8018aaa:	bfb8      	it	lt
 8018aac:	4618      	movlt	r0, r3
 8018aae:	e739      	b.n	8018924 <_printf_float+0x9c>
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	4652      	mov	r2, sl
 8018ab4:	4631      	mov	r1, r6
 8018ab6:	4628      	mov	r0, r5
 8018ab8:	47b8      	blx	r7
 8018aba:	3001      	adds	r0, #1
 8018abc:	f43f af30 	beq.w	8018920 <_printf_float+0x98>
 8018ac0:	f109 0901 	add.w	r9, r9, #1
 8018ac4:	e7e8      	b.n	8018a98 <_printf_float+0x210>
 8018ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	dc3b      	bgt.n	8018b44 <_printf_float+0x2bc>
 8018acc:	4a1c      	ldr	r2, [pc, #112]	@ (8018b40 <_printf_float+0x2b8>)
 8018ace:	2301      	movs	r3, #1
 8018ad0:	4631      	mov	r1, r6
 8018ad2:	4628      	mov	r0, r5
 8018ad4:	47b8      	blx	r7
 8018ad6:	3001      	adds	r0, #1
 8018ad8:	f43f af22 	beq.w	8018920 <_printf_float+0x98>
 8018adc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8018ae0:	ea59 0303 	orrs.w	r3, r9, r3
 8018ae4:	d102      	bne.n	8018aec <_printf_float+0x264>
 8018ae6:	6823      	ldr	r3, [r4, #0]
 8018ae8:	07d9      	lsls	r1, r3, #31
 8018aea:	d5d7      	bpl.n	8018a9c <_printf_float+0x214>
 8018aec:	9b05      	ldr	r3, [sp, #20]
 8018aee:	465a      	mov	r2, fp
 8018af0:	4631      	mov	r1, r6
 8018af2:	4628      	mov	r0, r5
 8018af4:	47b8      	blx	r7
 8018af6:	3001      	adds	r0, #1
 8018af8:	f43f af12 	beq.w	8018920 <_printf_float+0x98>
 8018afc:	f04f 0a00 	mov.w	sl, #0
 8018b00:	f104 0b1a 	add.w	fp, r4, #26
 8018b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b06:	425b      	negs	r3, r3
 8018b08:	4553      	cmp	r3, sl
 8018b0a:	dc01      	bgt.n	8018b10 <_printf_float+0x288>
 8018b0c:	464b      	mov	r3, r9
 8018b0e:	e794      	b.n	8018a3a <_printf_float+0x1b2>
 8018b10:	2301      	movs	r3, #1
 8018b12:	465a      	mov	r2, fp
 8018b14:	4631      	mov	r1, r6
 8018b16:	4628      	mov	r0, r5
 8018b18:	47b8      	blx	r7
 8018b1a:	3001      	adds	r0, #1
 8018b1c:	f43f af00 	beq.w	8018920 <_printf_float+0x98>
 8018b20:	f10a 0a01 	add.w	sl, sl, #1
 8018b24:	e7ee      	b.n	8018b04 <_printf_float+0x27c>
 8018b26:	bf00      	nop
 8018b28:	ffffffff 	.word	0xffffffff
 8018b2c:	7fefffff 	.word	0x7fefffff
 8018b30:	0801b713 	.word	0x0801b713
 8018b34:	0801b70f 	.word	0x0801b70f
 8018b38:	0801b71b 	.word	0x0801b71b
 8018b3c:	0801b717 	.word	0x0801b717
 8018b40:	0801b71f 	.word	0x0801b71f
 8018b44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8018b4a:	4553      	cmp	r3, sl
 8018b4c:	bfa8      	it	ge
 8018b4e:	4653      	movge	r3, sl
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	4699      	mov	r9, r3
 8018b54:	dc37      	bgt.n	8018bc6 <_printf_float+0x33e>
 8018b56:	2300      	movs	r3, #0
 8018b58:	9307      	str	r3, [sp, #28]
 8018b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b5e:	f104 021a 	add.w	r2, r4, #26
 8018b62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b64:	9907      	ldr	r1, [sp, #28]
 8018b66:	9306      	str	r3, [sp, #24]
 8018b68:	eba3 0309 	sub.w	r3, r3, r9
 8018b6c:	428b      	cmp	r3, r1
 8018b6e:	dc31      	bgt.n	8018bd4 <_printf_float+0x34c>
 8018b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b72:	459a      	cmp	sl, r3
 8018b74:	dc3b      	bgt.n	8018bee <_printf_float+0x366>
 8018b76:	6823      	ldr	r3, [r4, #0]
 8018b78:	07da      	lsls	r2, r3, #31
 8018b7a:	d438      	bmi.n	8018bee <_printf_float+0x366>
 8018b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b7e:	ebaa 0903 	sub.w	r9, sl, r3
 8018b82:	9b06      	ldr	r3, [sp, #24]
 8018b84:	ebaa 0303 	sub.w	r3, sl, r3
 8018b88:	4599      	cmp	r9, r3
 8018b8a:	bfa8      	it	ge
 8018b8c:	4699      	movge	r9, r3
 8018b8e:	f1b9 0f00 	cmp.w	r9, #0
 8018b92:	dc34      	bgt.n	8018bfe <_printf_float+0x376>
 8018b94:	f04f 0800 	mov.w	r8, #0
 8018b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018b9c:	f104 0b1a 	add.w	fp, r4, #26
 8018ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8018ba6:	eba3 0309 	sub.w	r3, r3, r9
 8018baa:	4543      	cmp	r3, r8
 8018bac:	f77f af76 	ble.w	8018a9c <_printf_float+0x214>
 8018bb0:	2301      	movs	r3, #1
 8018bb2:	465a      	mov	r2, fp
 8018bb4:	4631      	mov	r1, r6
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	47b8      	blx	r7
 8018bba:	3001      	adds	r0, #1
 8018bbc:	f43f aeb0 	beq.w	8018920 <_printf_float+0x98>
 8018bc0:	f108 0801 	add.w	r8, r8, #1
 8018bc4:	e7ec      	b.n	8018ba0 <_printf_float+0x318>
 8018bc6:	4642      	mov	r2, r8
 8018bc8:	4631      	mov	r1, r6
 8018bca:	4628      	mov	r0, r5
 8018bcc:	47b8      	blx	r7
 8018bce:	3001      	adds	r0, #1
 8018bd0:	d1c1      	bne.n	8018b56 <_printf_float+0x2ce>
 8018bd2:	e6a5      	b.n	8018920 <_printf_float+0x98>
 8018bd4:	2301      	movs	r3, #1
 8018bd6:	4631      	mov	r1, r6
 8018bd8:	4628      	mov	r0, r5
 8018bda:	9206      	str	r2, [sp, #24]
 8018bdc:	47b8      	blx	r7
 8018bde:	3001      	adds	r0, #1
 8018be0:	f43f ae9e 	beq.w	8018920 <_printf_float+0x98>
 8018be4:	9b07      	ldr	r3, [sp, #28]
 8018be6:	9a06      	ldr	r2, [sp, #24]
 8018be8:	3301      	adds	r3, #1
 8018bea:	9307      	str	r3, [sp, #28]
 8018bec:	e7b9      	b.n	8018b62 <_printf_float+0x2da>
 8018bee:	9b05      	ldr	r3, [sp, #20]
 8018bf0:	465a      	mov	r2, fp
 8018bf2:	4631      	mov	r1, r6
 8018bf4:	4628      	mov	r0, r5
 8018bf6:	47b8      	blx	r7
 8018bf8:	3001      	adds	r0, #1
 8018bfa:	d1bf      	bne.n	8018b7c <_printf_float+0x2f4>
 8018bfc:	e690      	b.n	8018920 <_printf_float+0x98>
 8018bfe:	9a06      	ldr	r2, [sp, #24]
 8018c00:	464b      	mov	r3, r9
 8018c02:	4442      	add	r2, r8
 8018c04:	4631      	mov	r1, r6
 8018c06:	4628      	mov	r0, r5
 8018c08:	47b8      	blx	r7
 8018c0a:	3001      	adds	r0, #1
 8018c0c:	d1c2      	bne.n	8018b94 <_printf_float+0x30c>
 8018c0e:	e687      	b.n	8018920 <_printf_float+0x98>
 8018c10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8018c14:	f1b9 0f01 	cmp.w	r9, #1
 8018c18:	dc01      	bgt.n	8018c1e <_printf_float+0x396>
 8018c1a:	07db      	lsls	r3, r3, #31
 8018c1c:	d536      	bpl.n	8018c8c <_printf_float+0x404>
 8018c1e:	2301      	movs	r3, #1
 8018c20:	4642      	mov	r2, r8
 8018c22:	4631      	mov	r1, r6
 8018c24:	4628      	mov	r0, r5
 8018c26:	47b8      	blx	r7
 8018c28:	3001      	adds	r0, #1
 8018c2a:	f43f ae79 	beq.w	8018920 <_printf_float+0x98>
 8018c2e:	9b05      	ldr	r3, [sp, #20]
 8018c30:	465a      	mov	r2, fp
 8018c32:	4631      	mov	r1, r6
 8018c34:	4628      	mov	r0, r5
 8018c36:	47b8      	blx	r7
 8018c38:	3001      	adds	r0, #1
 8018c3a:	f43f ae71 	beq.w	8018920 <_printf_float+0x98>
 8018c3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8018c42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c4e:	d018      	beq.n	8018c82 <_printf_float+0x3fa>
 8018c50:	464b      	mov	r3, r9
 8018c52:	f108 0201 	add.w	r2, r8, #1
 8018c56:	4631      	mov	r1, r6
 8018c58:	4628      	mov	r0, r5
 8018c5a:	47b8      	blx	r7
 8018c5c:	3001      	adds	r0, #1
 8018c5e:	d10c      	bne.n	8018c7a <_printf_float+0x3f2>
 8018c60:	e65e      	b.n	8018920 <_printf_float+0x98>
 8018c62:	2301      	movs	r3, #1
 8018c64:	465a      	mov	r2, fp
 8018c66:	4631      	mov	r1, r6
 8018c68:	4628      	mov	r0, r5
 8018c6a:	47b8      	blx	r7
 8018c6c:	3001      	adds	r0, #1
 8018c6e:	f43f ae57 	beq.w	8018920 <_printf_float+0x98>
 8018c72:	f108 0801 	add.w	r8, r8, #1
 8018c76:	45c8      	cmp	r8, r9
 8018c78:	dbf3      	blt.n	8018c62 <_printf_float+0x3da>
 8018c7a:	4653      	mov	r3, sl
 8018c7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8018c80:	e6dc      	b.n	8018a3c <_printf_float+0x1b4>
 8018c82:	f04f 0800 	mov.w	r8, #0
 8018c86:	f104 0b1a 	add.w	fp, r4, #26
 8018c8a:	e7f4      	b.n	8018c76 <_printf_float+0x3ee>
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	4642      	mov	r2, r8
 8018c90:	e7e1      	b.n	8018c56 <_printf_float+0x3ce>
 8018c92:	2301      	movs	r3, #1
 8018c94:	464a      	mov	r2, r9
 8018c96:	4631      	mov	r1, r6
 8018c98:	4628      	mov	r0, r5
 8018c9a:	47b8      	blx	r7
 8018c9c:	3001      	adds	r0, #1
 8018c9e:	f43f ae3f 	beq.w	8018920 <_printf_float+0x98>
 8018ca2:	f108 0801 	add.w	r8, r8, #1
 8018ca6:	68e3      	ldr	r3, [r4, #12]
 8018ca8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018caa:	1a5b      	subs	r3, r3, r1
 8018cac:	4543      	cmp	r3, r8
 8018cae:	dcf0      	bgt.n	8018c92 <_printf_float+0x40a>
 8018cb0:	e6f8      	b.n	8018aa4 <_printf_float+0x21c>
 8018cb2:	f04f 0800 	mov.w	r8, #0
 8018cb6:	f104 0919 	add.w	r9, r4, #25
 8018cba:	e7f4      	b.n	8018ca6 <_printf_float+0x41e>

08018cbc <_printf_common>:
 8018cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cc0:	4616      	mov	r6, r2
 8018cc2:	4698      	mov	r8, r3
 8018cc4:	688a      	ldr	r2, [r1, #8]
 8018cc6:	690b      	ldr	r3, [r1, #16]
 8018cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018ccc:	4293      	cmp	r3, r2
 8018cce:	bfb8      	it	lt
 8018cd0:	4613      	movlt	r3, r2
 8018cd2:	6033      	str	r3, [r6, #0]
 8018cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018cd8:	4607      	mov	r7, r0
 8018cda:	460c      	mov	r4, r1
 8018cdc:	b10a      	cbz	r2, 8018ce2 <_printf_common+0x26>
 8018cde:	3301      	adds	r3, #1
 8018ce0:	6033      	str	r3, [r6, #0]
 8018ce2:	6823      	ldr	r3, [r4, #0]
 8018ce4:	0699      	lsls	r1, r3, #26
 8018ce6:	bf42      	ittt	mi
 8018ce8:	6833      	ldrmi	r3, [r6, #0]
 8018cea:	3302      	addmi	r3, #2
 8018cec:	6033      	strmi	r3, [r6, #0]
 8018cee:	6825      	ldr	r5, [r4, #0]
 8018cf0:	f015 0506 	ands.w	r5, r5, #6
 8018cf4:	d106      	bne.n	8018d04 <_printf_common+0x48>
 8018cf6:	f104 0a19 	add.w	sl, r4, #25
 8018cfa:	68e3      	ldr	r3, [r4, #12]
 8018cfc:	6832      	ldr	r2, [r6, #0]
 8018cfe:	1a9b      	subs	r3, r3, r2
 8018d00:	42ab      	cmp	r3, r5
 8018d02:	dc26      	bgt.n	8018d52 <_printf_common+0x96>
 8018d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018d08:	6822      	ldr	r2, [r4, #0]
 8018d0a:	3b00      	subs	r3, #0
 8018d0c:	bf18      	it	ne
 8018d0e:	2301      	movne	r3, #1
 8018d10:	0692      	lsls	r2, r2, #26
 8018d12:	d42b      	bmi.n	8018d6c <_printf_common+0xb0>
 8018d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018d18:	4641      	mov	r1, r8
 8018d1a:	4638      	mov	r0, r7
 8018d1c:	47c8      	blx	r9
 8018d1e:	3001      	adds	r0, #1
 8018d20:	d01e      	beq.n	8018d60 <_printf_common+0xa4>
 8018d22:	6823      	ldr	r3, [r4, #0]
 8018d24:	6922      	ldr	r2, [r4, #16]
 8018d26:	f003 0306 	and.w	r3, r3, #6
 8018d2a:	2b04      	cmp	r3, #4
 8018d2c:	bf02      	ittt	eq
 8018d2e:	68e5      	ldreq	r5, [r4, #12]
 8018d30:	6833      	ldreq	r3, [r6, #0]
 8018d32:	1aed      	subeq	r5, r5, r3
 8018d34:	68a3      	ldr	r3, [r4, #8]
 8018d36:	bf0c      	ite	eq
 8018d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d3c:	2500      	movne	r5, #0
 8018d3e:	4293      	cmp	r3, r2
 8018d40:	bfc4      	itt	gt
 8018d42:	1a9b      	subgt	r3, r3, r2
 8018d44:	18ed      	addgt	r5, r5, r3
 8018d46:	2600      	movs	r6, #0
 8018d48:	341a      	adds	r4, #26
 8018d4a:	42b5      	cmp	r5, r6
 8018d4c:	d11a      	bne.n	8018d84 <_printf_common+0xc8>
 8018d4e:	2000      	movs	r0, #0
 8018d50:	e008      	b.n	8018d64 <_printf_common+0xa8>
 8018d52:	2301      	movs	r3, #1
 8018d54:	4652      	mov	r2, sl
 8018d56:	4641      	mov	r1, r8
 8018d58:	4638      	mov	r0, r7
 8018d5a:	47c8      	blx	r9
 8018d5c:	3001      	adds	r0, #1
 8018d5e:	d103      	bne.n	8018d68 <_printf_common+0xac>
 8018d60:	f04f 30ff 	mov.w	r0, #4294967295
 8018d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d68:	3501      	adds	r5, #1
 8018d6a:	e7c6      	b.n	8018cfa <_printf_common+0x3e>
 8018d6c:	18e1      	adds	r1, r4, r3
 8018d6e:	1c5a      	adds	r2, r3, #1
 8018d70:	2030      	movs	r0, #48	@ 0x30
 8018d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018d76:	4422      	add	r2, r4
 8018d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018d80:	3302      	adds	r3, #2
 8018d82:	e7c7      	b.n	8018d14 <_printf_common+0x58>
 8018d84:	2301      	movs	r3, #1
 8018d86:	4622      	mov	r2, r4
 8018d88:	4641      	mov	r1, r8
 8018d8a:	4638      	mov	r0, r7
 8018d8c:	47c8      	blx	r9
 8018d8e:	3001      	adds	r0, #1
 8018d90:	d0e6      	beq.n	8018d60 <_printf_common+0xa4>
 8018d92:	3601      	adds	r6, #1
 8018d94:	e7d9      	b.n	8018d4a <_printf_common+0x8e>
	...

08018d98 <_printf_i>:
 8018d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d9c:	7e0f      	ldrb	r7, [r1, #24]
 8018d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018da0:	2f78      	cmp	r7, #120	@ 0x78
 8018da2:	4691      	mov	r9, r2
 8018da4:	4680      	mov	r8, r0
 8018da6:	460c      	mov	r4, r1
 8018da8:	469a      	mov	sl, r3
 8018daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018dae:	d807      	bhi.n	8018dc0 <_printf_i+0x28>
 8018db0:	2f62      	cmp	r7, #98	@ 0x62
 8018db2:	d80a      	bhi.n	8018dca <_printf_i+0x32>
 8018db4:	2f00      	cmp	r7, #0
 8018db6:	f000 80d1 	beq.w	8018f5c <_printf_i+0x1c4>
 8018dba:	2f58      	cmp	r7, #88	@ 0x58
 8018dbc:	f000 80b8 	beq.w	8018f30 <_printf_i+0x198>
 8018dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018dc8:	e03a      	b.n	8018e40 <_printf_i+0xa8>
 8018dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018dce:	2b15      	cmp	r3, #21
 8018dd0:	d8f6      	bhi.n	8018dc0 <_printf_i+0x28>
 8018dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8018dd8 <_printf_i+0x40>)
 8018dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018dd8:	08018e31 	.word	0x08018e31
 8018ddc:	08018e45 	.word	0x08018e45
 8018de0:	08018dc1 	.word	0x08018dc1
 8018de4:	08018dc1 	.word	0x08018dc1
 8018de8:	08018dc1 	.word	0x08018dc1
 8018dec:	08018dc1 	.word	0x08018dc1
 8018df0:	08018e45 	.word	0x08018e45
 8018df4:	08018dc1 	.word	0x08018dc1
 8018df8:	08018dc1 	.word	0x08018dc1
 8018dfc:	08018dc1 	.word	0x08018dc1
 8018e00:	08018dc1 	.word	0x08018dc1
 8018e04:	08018f43 	.word	0x08018f43
 8018e08:	08018e6f 	.word	0x08018e6f
 8018e0c:	08018efd 	.word	0x08018efd
 8018e10:	08018dc1 	.word	0x08018dc1
 8018e14:	08018dc1 	.word	0x08018dc1
 8018e18:	08018f65 	.word	0x08018f65
 8018e1c:	08018dc1 	.word	0x08018dc1
 8018e20:	08018e6f 	.word	0x08018e6f
 8018e24:	08018dc1 	.word	0x08018dc1
 8018e28:	08018dc1 	.word	0x08018dc1
 8018e2c:	08018f05 	.word	0x08018f05
 8018e30:	6833      	ldr	r3, [r6, #0]
 8018e32:	1d1a      	adds	r2, r3, #4
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	6032      	str	r2, [r6, #0]
 8018e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018e40:	2301      	movs	r3, #1
 8018e42:	e09c      	b.n	8018f7e <_printf_i+0x1e6>
 8018e44:	6833      	ldr	r3, [r6, #0]
 8018e46:	6820      	ldr	r0, [r4, #0]
 8018e48:	1d19      	adds	r1, r3, #4
 8018e4a:	6031      	str	r1, [r6, #0]
 8018e4c:	0606      	lsls	r6, r0, #24
 8018e4e:	d501      	bpl.n	8018e54 <_printf_i+0xbc>
 8018e50:	681d      	ldr	r5, [r3, #0]
 8018e52:	e003      	b.n	8018e5c <_printf_i+0xc4>
 8018e54:	0645      	lsls	r5, r0, #25
 8018e56:	d5fb      	bpl.n	8018e50 <_printf_i+0xb8>
 8018e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018e5c:	2d00      	cmp	r5, #0
 8018e5e:	da03      	bge.n	8018e68 <_printf_i+0xd0>
 8018e60:	232d      	movs	r3, #45	@ 0x2d
 8018e62:	426d      	negs	r5, r5
 8018e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e68:	4858      	ldr	r0, [pc, #352]	@ (8018fcc <_printf_i+0x234>)
 8018e6a:	230a      	movs	r3, #10
 8018e6c:	e011      	b.n	8018e92 <_printf_i+0xfa>
 8018e6e:	6821      	ldr	r1, [r4, #0]
 8018e70:	6833      	ldr	r3, [r6, #0]
 8018e72:	0608      	lsls	r0, r1, #24
 8018e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8018e78:	d402      	bmi.n	8018e80 <_printf_i+0xe8>
 8018e7a:	0649      	lsls	r1, r1, #25
 8018e7c:	bf48      	it	mi
 8018e7e:	b2ad      	uxthmi	r5, r5
 8018e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8018e82:	4852      	ldr	r0, [pc, #328]	@ (8018fcc <_printf_i+0x234>)
 8018e84:	6033      	str	r3, [r6, #0]
 8018e86:	bf14      	ite	ne
 8018e88:	230a      	movne	r3, #10
 8018e8a:	2308      	moveq	r3, #8
 8018e8c:	2100      	movs	r1, #0
 8018e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018e92:	6866      	ldr	r6, [r4, #4]
 8018e94:	60a6      	str	r6, [r4, #8]
 8018e96:	2e00      	cmp	r6, #0
 8018e98:	db05      	blt.n	8018ea6 <_printf_i+0x10e>
 8018e9a:	6821      	ldr	r1, [r4, #0]
 8018e9c:	432e      	orrs	r6, r5
 8018e9e:	f021 0104 	bic.w	r1, r1, #4
 8018ea2:	6021      	str	r1, [r4, #0]
 8018ea4:	d04b      	beq.n	8018f3e <_printf_i+0x1a6>
 8018ea6:	4616      	mov	r6, r2
 8018ea8:	fbb5 f1f3 	udiv	r1, r5, r3
 8018eac:	fb03 5711 	mls	r7, r3, r1, r5
 8018eb0:	5dc7      	ldrb	r7, [r0, r7]
 8018eb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018eb6:	462f      	mov	r7, r5
 8018eb8:	42bb      	cmp	r3, r7
 8018eba:	460d      	mov	r5, r1
 8018ebc:	d9f4      	bls.n	8018ea8 <_printf_i+0x110>
 8018ebe:	2b08      	cmp	r3, #8
 8018ec0:	d10b      	bne.n	8018eda <_printf_i+0x142>
 8018ec2:	6823      	ldr	r3, [r4, #0]
 8018ec4:	07df      	lsls	r7, r3, #31
 8018ec6:	d508      	bpl.n	8018eda <_printf_i+0x142>
 8018ec8:	6923      	ldr	r3, [r4, #16]
 8018eca:	6861      	ldr	r1, [r4, #4]
 8018ecc:	4299      	cmp	r1, r3
 8018ece:	bfde      	ittt	le
 8018ed0:	2330      	movle	r3, #48	@ 0x30
 8018ed2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018ed6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018eda:	1b92      	subs	r2, r2, r6
 8018edc:	6122      	str	r2, [r4, #16]
 8018ede:	f8cd a000 	str.w	sl, [sp]
 8018ee2:	464b      	mov	r3, r9
 8018ee4:	aa03      	add	r2, sp, #12
 8018ee6:	4621      	mov	r1, r4
 8018ee8:	4640      	mov	r0, r8
 8018eea:	f7ff fee7 	bl	8018cbc <_printf_common>
 8018eee:	3001      	adds	r0, #1
 8018ef0:	d14a      	bne.n	8018f88 <_printf_i+0x1f0>
 8018ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ef6:	b004      	add	sp, #16
 8018ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018efc:	6823      	ldr	r3, [r4, #0]
 8018efe:	f043 0320 	orr.w	r3, r3, #32
 8018f02:	6023      	str	r3, [r4, #0]
 8018f04:	4832      	ldr	r0, [pc, #200]	@ (8018fd0 <_printf_i+0x238>)
 8018f06:	2778      	movs	r7, #120	@ 0x78
 8018f08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018f0c:	6823      	ldr	r3, [r4, #0]
 8018f0e:	6831      	ldr	r1, [r6, #0]
 8018f10:	061f      	lsls	r7, r3, #24
 8018f12:	f851 5b04 	ldr.w	r5, [r1], #4
 8018f16:	d402      	bmi.n	8018f1e <_printf_i+0x186>
 8018f18:	065f      	lsls	r7, r3, #25
 8018f1a:	bf48      	it	mi
 8018f1c:	b2ad      	uxthmi	r5, r5
 8018f1e:	6031      	str	r1, [r6, #0]
 8018f20:	07d9      	lsls	r1, r3, #31
 8018f22:	bf44      	itt	mi
 8018f24:	f043 0320 	orrmi.w	r3, r3, #32
 8018f28:	6023      	strmi	r3, [r4, #0]
 8018f2a:	b11d      	cbz	r5, 8018f34 <_printf_i+0x19c>
 8018f2c:	2310      	movs	r3, #16
 8018f2e:	e7ad      	b.n	8018e8c <_printf_i+0xf4>
 8018f30:	4826      	ldr	r0, [pc, #152]	@ (8018fcc <_printf_i+0x234>)
 8018f32:	e7e9      	b.n	8018f08 <_printf_i+0x170>
 8018f34:	6823      	ldr	r3, [r4, #0]
 8018f36:	f023 0320 	bic.w	r3, r3, #32
 8018f3a:	6023      	str	r3, [r4, #0]
 8018f3c:	e7f6      	b.n	8018f2c <_printf_i+0x194>
 8018f3e:	4616      	mov	r6, r2
 8018f40:	e7bd      	b.n	8018ebe <_printf_i+0x126>
 8018f42:	6833      	ldr	r3, [r6, #0]
 8018f44:	6825      	ldr	r5, [r4, #0]
 8018f46:	6961      	ldr	r1, [r4, #20]
 8018f48:	1d18      	adds	r0, r3, #4
 8018f4a:	6030      	str	r0, [r6, #0]
 8018f4c:	062e      	lsls	r6, r5, #24
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	d501      	bpl.n	8018f56 <_printf_i+0x1be>
 8018f52:	6019      	str	r1, [r3, #0]
 8018f54:	e002      	b.n	8018f5c <_printf_i+0x1c4>
 8018f56:	0668      	lsls	r0, r5, #25
 8018f58:	d5fb      	bpl.n	8018f52 <_printf_i+0x1ba>
 8018f5a:	8019      	strh	r1, [r3, #0]
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	6123      	str	r3, [r4, #16]
 8018f60:	4616      	mov	r6, r2
 8018f62:	e7bc      	b.n	8018ede <_printf_i+0x146>
 8018f64:	6833      	ldr	r3, [r6, #0]
 8018f66:	1d1a      	adds	r2, r3, #4
 8018f68:	6032      	str	r2, [r6, #0]
 8018f6a:	681e      	ldr	r6, [r3, #0]
 8018f6c:	6862      	ldr	r2, [r4, #4]
 8018f6e:	2100      	movs	r1, #0
 8018f70:	4630      	mov	r0, r6
 8018f72:	f7e7 f9b5 	bl	80002e0 <memchr>
 8018f76:	b108      	cbz	r0, 8018f7c <_printf_i+0x1e4>
 8018f78:	1b80      	subs	r0, r0, r6
 8018f7a:	6060      	str	r0, [r4, #4]
 8018f7c:	6863      	ldr	r3, [r4, #4]
 8018f7e:	6123      	str	r3, [r4, #16]
 8018f80:	2300      	movs	r3, #0
 8018f82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018f86:	e7aa      	b.n	8018ede <_printf_i+0x146>
 8018f88:	6923      	ldr	r3, [r4, #16]
 8018f8a:	4632      	mov	r2, r6
 8018f8c:	4649      	mov	r1, r9
 8018f8e:	4640      	mov	r0, r8
 8018f90:	47d0      	blx	sl
 8018f92:	3001      	adds	r0, #1
 8018f94:	d0ad      	beq.n	8018ef2 <_printf_i+0x15a>
 8018f96:	6823      	ldr	r3, [r4, #0]
 8018f98:	079b      	lsls	r3, r3, #30
 8018f9a:	d413      	bmi.n	8018fc4 <_printf_i+0x22c>
 8018f9c:	68e0      	ldr	r0, [r4, #12]
 8018f9e:	9b03      	ldr	r3, [sp, #12]
 8018fa0:	4298      	cmp	r0, r3
 8018fa2:	bfb8      	it	lt
 8018fa4:	4618      	movlt	r0, r3
 8018fa6:	e7a6      	b.n	8018ef6 <_printf_i+0x15e>
 8018fa8:	2301      	movs	r3, #1
 8018faa:	4632      	mov	r2, r6
 8018fac:	4649      	mov	r1, r9
 8018fae:	4640      	mov	r0, r8
 8018fb0:	47d0      	blx	sl
 8018fb2:	3001      	adds	r0, #1
 8018fb4:	d09d      	beq.n	8018ef2 <_printf_i+0x15a>
 8018fb6:	3501      	adds	r5, #1
 8018fb8:	68e3      	ldr	r3, [r4, #12]
 8018fba:	9903      	ldr	r1, [sp, #12]
 8018fbc:	1a5b      	subs	r3, r3, r1
 8018fbe:	42ab      	cmp	r3, r5
 8018fc0:	dcf2      	bgt.n	8018fa8 <_printf_i+0x210>
 8018fc2:	e7eb      	b.n	8018f9c <_printf_i+0x204>
 8018fc4:	2500      	movs	r5, #0
 8018fc6:	f104 0619 	add.w	r6, r4, #25
 8018fca:	e7f5      	b.n	8018fb8 <_printf_i+0x220>
 8018fcc:	0801b721 	.word	0x0801b721
 8018fd0:	0801b732 	.word	0x0801b732

08018fd4 <std>:
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	b510      	push	{r4, lr}
 8018fd8:	4604      	mov	r4, r0
 8018fda:	e9c0 3300 	strd	r3, r3, [r0]
 8018fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018fe2:	6083      	str	r3, [r0, #8]
 8018fe4:	8181      	strh	r1, [r0, #12]
 8018fe6:	6643      	str	r3, [r0, #100]	@ 0x64
 8018fe8:	81c2      	strh	r2, [r0, #14]
 8018fea:	6183      	str	r3, [r0, #24]
 8018fec:	4619      	mov	r1, r3
 8018fee:	2208      	movs	r2, #8
 8018ff0:	305c      	adds	r0, #92	@ 0x5c
 8018ff2:	f000 f916 	bl	8019222 <memset>
 8018ff6:	4b0d      	ldr	r3, [pc, #52]	@ (801902c <std+0x58>)
 8018ff8:	6263      	str	r3, [r4, #36]	@ 0x24
 8018ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8019030 <std+0x5c>)
 8018ffc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8019034 <std+0x60>)
 8019000:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019002:	4b0d      	ldr	r3, [pc, #52]	@ (8019038 <std+0x64>)
 8019004:	6323      	str	r3, [r4, #48]	@ 0x30
 8019006:	4b0d      	ldr	r3, [pc, #52]	@ (801903c <std+0x68>)
 8019008:	6224      	str	r4, [r4, #32]
 801900a:	429c      	cmp	r4, r3
 801900c:	d006      	beq.n	801901c <std+0x48>
 801900e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019012:	4294      	cmp	r4, r2
 8019014:	d002      	beq.n	801901c <std+0x48>
 8019016:	33d0      	adds	r3, #208	@ 0xd0
 8019018:	429c      	cmp	r4, r3
 801901a:	d105      	bne.n	8019028 <std+0x54>
 801901c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019024:	f000 b98a 	b.w	801933c <__retarget_lock_init_recursive>
 8019028:	bd10      	pop	{r4, pc}
 801902a:	bf00      	nop
 801902c:	0801919d 	.word	0x0801919d
 8019030:	080191bf 	.word	0x080191bf
 8019034:	080191f7 	.word	0x080191f7
 8019038:	0801921b 	.word	0x0801921b
 801903c:	24027958 	.word	0x24027958

08019040 <stdio_exit_handler>:
 8019040:	4a02      	ldr	r2, [pc, #8]	@ (801904c <stdio_exit_handler+0xc>)
 8019042:	4903      	ldr	r1, [pc, #12]	@ (8019050 <stdio_exit_handler+0x10>)
 8019044:	4803      	ldr	r0, [pc, #12]	@ (8019054 <stdio_exit_handler+0x14>)
 8019046:	f000 b869 	b.w	801911c <_fwalk_sglue>
 801904a:	bf00      	nop
 801904c:	2400011c 	.word	0x2400011c
 8019050:	0801aaad 	.word	0x0801aaad
 8019054:	2400012c 	.word	0x2400012c

08019058 <cleanup_stdio>:
 8019058:	6841      	ldr	r1, [r0, #4]
 801905a:	4b0c      	ldr	r3, [pc, #48]	@ (801908c <cleanup_stdio+0x34>)
 801905c:	4299      	cmp	r1, r3
 801905e:	b510      	push	{r4, lr}
 8019060:	4604      	mov	r4, r0
 8019062:	d001      	beq.n	8019068 <cleanup_stdio+0x10>
 8019064:	f001 fd22 	bl	801aaac <_fflush_r>
 8019068:	68a1      	ldr	r1, [r4, #8]
 801906a:	4b09      	ldr	r3, [pc, #36]	@ (8019090 <cleanup_stdio+0x38>)
 801906c:	4299      	cmp	r1, r3
 801906e:	d002      	beq.n	8019076 <cleanup_stdio+0x1e>
 8019070:	4620      	mov	r0, r4
 8019072:	f001 fd1b 	bl	801aaac <_fflush_r>
 8019076:	68e1      	ldr	r1, [r4, #12]
 8019078:	4b06      	ldr	r3, [pc, #24]	@ (8019094 <cleanup_stdio+0x3c>)
 801907a:	4299      	cmp	r1, r3
 801907c:	d004      	beq.n	8019088 <cleanup_stdio+0x30>
 801907e:	4620      	mov	r0, r4
 8019080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019084:	f001 bd12 	b.w	801aaac <_fflush_r>
 8019088:	bd10      	pop	{r4, pc}
 801908a:	bf00      	nop
 801908c:	24027958 	.word	0x24027958
 8019090:	240279c0 	.word	0x240279c0
 8019094:	24027a28 	.word	0x24027a28

08019098 <global_stdio_init.part.0>:
 8019098:	b510      	push	{r4, lr}
 801909a:	4b0b      	ldr	r3, [pc, #44]	@ (80190c8 <global_stdio_init.part.0+0x30>)
 801909c:	4c0b      	ldr	r4, [pc, #44]	@ (80190cc <global_stdio_init.part.0+0x34>)
 801909e:	4a0c      	ldr	r2, [pc, #48]	@ (80190d0 <global_stdio_init.part.0+0x38>)
 80190a0:	601a      	str	r2, [r3, #0]
 80190a2:	4620      	mov	r0, r4
 80190a4:	2200      	movs	r2, #0
 80190a6:	2104      	movs	r1, #4
 80190a8:	f7ff ff94 	bl	8018fd4 <std>
 80190ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80190b0:	2201      	movs	r2, #1
 80190b2:	2109      	movs	r1, #9
 80190b4:	f7ff ff8e 	bl	8018fd4 <std>
 80190b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80190bc:	2202      	movs	r2, #2
 80190be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190c2:	2112      	movs	r1, #18
 80190c4:	f7ff bf86 	b.w	8018fd4 <std>
 80190c8:	24027a90 	.word	0x24027a90
 80190cc:	24027958 	.word	0x24027958
 80190d0:	08019041 	.word	0x08019041

080190d4 <__sfp_lock_acquire>:
 80190d4:	4801      	ldr	r0, [pc, #4]	@ (80190dc <__sfp_lock_acquire+0x8>)
 80190d6:	f000 b932 	b.w	801933e <__retarget_lock_acquire_recursive>
 80190da:	bf00      	nop
 80190dc:	24027a99 	.word	0x24027a99

080190e0 <__sfp_lock_release>:
 80190e0:	4801      	ldr	r0, [pc, #4]	@ (80190e8 <__sfp_lock_release+0x8>)
 80190e2:	f000 b92d 	b.w	8019340 <__retarget_lock_release_recursive>
 80190e6:	bf00      	nop
 80190e8:	24027a99 	.word	0x24027a99

080190ec <__sinit>:
 80190ec:	b510      	push	{r4, lr}
 80190ee:	4604      	mov	r4, r0
 80190f0:	f7ff fff0 	bl	80190d4 <__sfp_lock_acquire>
 80190f4:	6a23      	ldr	r3, [r4, #32]
 80190f6:	b11b      	cbz	r3, 8019100 <__sinit+0x14>
 80190f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190fc:	f7ff bff0 	b.w	80190e0 <__sfp_lock_release>
 8019100:	4b04      	ldr	r3, [pc, #16]	@ (8019114 <__sinit+0x28>)
 8019102:	6223      	str	r3, [r4, #32]
 8019104:	4b04      	ldr	r3, [pc, #16]	@ (8019118 <__sinit+0x2c>)
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d1f5      	bne.n	80190f8 <__sinit+0xc>
 801910c:	f7ff ffc4 	bl	8019098 <global_stdio_init.part.0>
 8019110:	e7f2      	b.n	80190f8 <__sinit+0xc>
 8019112:	bf00      	nop
 8019114:	08019059 	.word	0x08019059
 8019118:	24027a90 	.word	0x24027a90

0801911c <_fwalk_sglue>:
 801911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019120:	4607      	mov	r7, r0
 8019122:	4688      	mov	r8, r1
 8019124:	4614      	mov	r4, r2
 8019126:	2600      	movs	r6, #0
 8019128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801912c:	f1b9 0901 	subs.w	r9, r9, #1
 8019130:	d505      	bpl.n	801913e <_fwalk_sglue+0x22>
 8019132:	6824      	ldr	r4, [r4, #0]
 8019134:	2c00      	cmp	r4, #0
 8019136:	d1f7      	bne.n	8019128 <_fwalk_sglue+0xc>
 8019138:	4630      	mov	r0, r6
 801913a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801913e:	89ab      	ldrh	r3, [r5, #12]
 8019140:	2b01      	cmp	r3, #1
 8019142:	d907      	bls.n	8019154 <_fwalk_sglue+0x38>
 8019144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019148:	3301      	adds	r3, #1
 801914a:	d003      	beq.n	8019154 <_fwalk_sglue+0x38>
 801914c:	4629      	mov	r1, r5
 801914e:	4638      	mov	r0, r7
 8019150:	47c0      	blx	r8
 8019152:	4306      	orrs	r6, r0
 8019154:	3568      	adds	r5, #104	@ 0x68
 8019156:	e7e9      	b.n	801912c <_fwalk_sglue+0x10>

08019158 <siprintf>:
 8019158:	b40e      	push	{r1, r2, r3}
 801915a:	b510      	push	{r4, lr}
 801915c:	b09d      	sub	sp, #116	@ 0x74
 801915e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019160:	9002      	str	r0, [sp, #8]
 8019162:	9006      	str	r0, [sp, #24]
 8019164:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019168:	480a      	ldr	r0, [pc, #40]	@ (8019194 <siprintf+0x3c>)
 801916a:	9107      	str	r1, [sp, #28]
 801916c:	9104      	str	r1, [sp, #16]
 801916e:	490a      	ldr	r1, [pc, #40]	@ (8019198 <siprintf+0x40>)
 8019170:	f853 2b04 	ldr.w	r2, [r3], #4
 8019174:	9105      	str	r1, [sp, #20]
 8019176:	2400      	movs	r4, #0
 8019178:	a902      	add	r1, sp, #8
 801917a:	6800      	ldr	r0, [r0, #0]
 801917c:	9301      	str	r3, [sp, #4]
 801917e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019180:	f001 fb14 	bl	801a7ac <_svfiprintf_r>
 8019184:	9b02      	ldr	r3, [sp, #8]
 8019186:	701c      	strb	r4, [r3, #0]
 8019188:	b01d      	add	sp, #116	@ 0x74
 801918a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801918e:	b003      	add	sp, #12
 8019190:	4770      	bx	lr
 8019192:	bf00      	nop
 8019194:	24000128 	.word	0x24000128
 8019198:	ffff0208 	.word	0xffff0208

0801919c <__sread>:
 801919c:	b510      	push	{r4, lr}
 801919e:	460c      	mov	r4, r1
 80191a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191a4:	f000 f86c 	bl	8019280 <_read_r>
 80191a8:	2800      	cmp	r0, #0
 80191aa:	bfab      	itete	ge
 80191ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80191ae:	89a3      	ldrhlt	r3, [r4, #12]
 80191b0:	181b      	addge	r3, r3, r0
 80191b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80191b6:	bfac      	ite	ge
 80191b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80191ba:	81a3      	strhlt	r3, [r4, #12]
 80191bc:	bd10      	pop	{r4, pc}

080191be <__swrite>:
 80191be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191c2:	461f      	mov	r7, r3
 80191c4:	898b      	ldrh	r3, [r1, #12]
 80191c6:	05db      	lsls	r3, r3, #23
 80191c8:	4605      	mov	r5, r0
 80191ca:	460c      	mov	r4, r1
 80191cc:	4616      	mov	r6, r2
 80191ce:	d505      	bpl.n	80191dc <__swrite+0x1e>
 80191d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191d4:	2302      	movs	r3, #2
 80191d6:	2200      	movs	r2, #0
 80191d8:	f000 f840 	bl	801925c <_lseek_r>
 80191dc:	89a3      	ldrh	r3, [r4, #12]
 80191de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80191e6:	81a3      	strh	r3, [r4, #12]
 80191e8:	4632      	mov	r2, r6
 80191ea:	463b      	mov	r3, r7
 80191ec:	4628      	mov	r0, r5
 80191ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191f2:	f000 b867 	b.w	80192c4 <_write_r>

080191f6 <__sseek>:
 80191f6:	b510      	push	{r4, lr}
 80191f8:	460c      	mov	r4, r1
 80191fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191fe:	f000 f82d 	bl	801925c <_lseek_r>
 8019202:	1c43      	adds	r3, r0, #1
 8019204:	89a3      	ldrh	r3, [r4, #12]
 8019206:	bf15      	itete	ne
 8019208:	6560      	strne	r0, [r4, #84]	@ 0x54
 801920a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801920e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019212:	81a3      	strheq	r3, [r4, #12]
 8019214:	bf18      	it	ne
 8019216:	81a3      	strhne	r3, [r4, #12]
 8019218:	bd10      	pop	{r4, pc}

0801921a <__sclose>:
 801921a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801921e:	f000 b80d 	b.w	801923c <_close_r>

08019222 <memset>:
 8019222:	4402      	add	r2, r0
 8019224:	4603      	mov	r3, r0
 8019226:	4293      	cmp	r3, r2
 8019228:	d100      	bne.n	801922c <memset+0xa>
 801922a:	4770      	bx	lr
 801922c:	f803 1b01 	strb.w	r1, [r3], #1
 8019230:	e7f9      	b.n	8019226 <memset+0x4>
	...

08019234 <_localeconv_r>:
 8019234:	4800      	ldr	r0, [pc, #0]	@ (8019238 <_localeconv_r+0x4>)
 8019236:	4770      	bx	lr
 8019238:	24000268 	.word	0x24000268

0801923c <_close_r>:
 801923c:	b538      	push	{r3, r4, r5, lr}
 801923e:	4d06      	ldr	r5, [pc, #24]	@ (8019258 <_close_r+0x1c>)
 8019240:	2300      	movs	r3, #0
 8019242:	4604      	mov	r4, r0
 8019244:	4608      	mov	r0, r1
 8019246:	602b      	str	r3, [r5, #0]
 8019248:	f7e9 fe6e 	bl	8002f28 <_close>
 801924c:	1c43      	adds	r3, r0, #1
 801924e:	d102      	bne.n	8019256 <_close_r+0x1a>
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	b103      	cbz	r3, 8019256 <_close_r+0x1a>
 8019254:	6023      	str	r3, [r4, #0]
 8019256:	bd38      	pop	{r3, r4, r5, pc}
 8019258:	24027a94 	.word	0x24027a94

0801925c <_lseek_r>:
 801925c:	b538      	push	{r3, r4, r5, lr}
 801925e:	4d07      	ldr	r5, [pc, #28]	@ (801927c <_lseek_r+0x20>)
 8019260:	4604      	mov	r4, r0
 8019262:	4608      	mov	r0, r1
 8019264:	4611      	mov	r1, r2
 8019266:	2200      	movs	r2, #0
 8019268:	602a      	str	r2, [r5, #0]
 801926a:	461a      	mov	r2, r3
 801926c:	f7e9 fe83 	bl	8002f76 <_lseek>
 8019270:	1c43      	adds	r3, r0, #1
 8019272:	d102      	bne.n	801927a <_lseek_r+0x1e>
 8019274:	682b      	ldr	r3, [r5, #0]
 8019276:	b103      	cbz	r3, 801927a <_lseek_r+0x1e>
 8019278:	6023      	str	r3, [r4, #0]
 801927a:	bd38      	pop	{r3, r4, r5, pc}
 801927c:	24027a94 	.word	0x24027a94

08019280 <_read_r>:
 8019280:	b538      	push	{r3, r4, r5, lr}
 8019282:	4d07      	ldr	r5, [pc, #28]	@ (80192a0 <_read_r+0x20>)
 8019284:	4604      	mov	r4, r0
 8019286:	4608      	mov	r0, r1
 8019288:	4611      	mov	r1, r2
 801928a:	2200      	movs	r2, #0
 801928c:	602a      	str	r2, [r5, #0]
 801928e:	461a      	mov	r2, r3
 8019290:	f7e9 fe11 	bl	8002eb6 <_read>
 8019294:	1c43      	adds	r3, r0, #1
 8019296:	d102      	bne.n	801929e <_read_r+0x1e>
 8019298:	682b      	ldr	r3, [r5, #0]
 801929a:	b103      	cbz	r3, 801929e <_read_r+0x1e>
 801929c:	6023      	str	r3, [r4, #0]
 801929e:	bd38      	pop	{r3, r4, r5, pc}
 80192a0:	24027a94 	.word	0x24027a94

080192a4 <_sbrk_r>:
 80192a4:	b538      	push	{r3, r4, r5, lr}
 80192a6:	4d06      	ldr	r5, [pc, #24]	@ (80192c0 <_sbrk_r+0x1c>)
 80192a8:	2300      	movs	r3, #0
 80192aa:	4604      	mov	r4, r0
 80192ac:	4608      	mov	r0, r1
 80192ae:	602b      	str	r3, [r5, #0]
 80192b0:	f7e9 fe6e 	bl	8002f90 <_sbrk>
 80192b4:	1c43      	adds	r3, r0, #1
 80192b6:	d102      	bne.n	80192be <_sbrk_r+0x1a>
 80192b8:	682b      	ldr	r3, [r5, #0]
 80192ba:	b103      	cbz	r3, 80192be <_sbrk_r+0x1a>
 80192bc:	6023      	str	r3, [r4, #0]
 80192be:	bd38      	pop	{r3, r4, r5, pc}
 80192c0:	24027a94 	.word	0x24027a94

080192c4 <_write_r>:
 80192c4:	b538      	push	{r3, r4, r5, lr}
 80192c6:	4d07      	ldr	r5, [pc, #28]	@ (80192e4 <_write_r+0x20>)
 80192c8:	4604      	mov	r4, r0
 80192ca:	4608      	mov	r0, r1
 80192cc:	4611      	mov	r1, r2
 80192ce:	2200      	movs	r2, #0
 80192d0:	602a      	str	r2, [r5, #0]
 80192d2:	461a      	mov	r2, r3
 80192d4:	f7e9 fe0c 	bl	8002ef0 <_write>
 80192d8:	1c43      	adds	r3, r0, #1
 80192da:	d102      	bne.n	80192e2 <_write_r+0x1e>
 80192dc:	682b      	ldr	r3, [r5, #0]
 80192de:	b103      	cbz	r3, 80192e2 <_write_r+0x1e>
 80192e0:	6023      	str	r3, [r4, #0]
 80192e2:	bd38      	pop	{r3, r4, r5, pc}
 80192e4:	24027a94 	.word	0x24027a94

080192e8 <__errno>:
 80192e8:	4b01      	ldr	r3, [pc, #4]	@ (80192f0 <__errno+0x8>)
 80192ea:	6818      	ldr	r0, [r3, #0]
 80192ec:	4770      	bx	lr
 80192ee:	bf00      	nop
 80192f0:	24000128 	.word	0x24000128

080192f4 <__libc_init_array>:
 80192f4:	b570      	push	{r4, r5, r6, lr}
 80192f6:	4d0d      	ldr	r5, [pc, #52]	@ (801932c <__libc_init_array+0x38>)
 80192f8:	4c0d      	ldr	r4, [pc, #52]	@ (8019330 <__libc_init_array+0x3c>)
 80192fa:	1b64      	subs	r4, r4, r5
 80192fc:	10a4      	asrs	r4, r4, #2
 80192fe:	2600      	movs	r6, #0
 8019300:	42a6      	cmp	r6, r4
 8019302:	d109      	bne.n	8019318 <__libc_init_array+0x24>
 8019304:	4d0b      	ldr	r5, [pc, #44]	@ (8019334 <__libc_init_array+0x40>)
 8019306:	4c0c      	ldr	r4, [pc, #48]	@ (8019338 <__libc_init_array+0x44>)
 8019308:	f001 ff32 	bl	801b170 <_init>
 801930c:	1b64      	subs	r4, r4, r5
 801930e:	10a4      	asrs	r4, r4, #2
 8019310:	2600      	movs	r6, #0
 8019312:	42a6      	cmp	r6, r4
 8019314:	d105      	bne.n	8019322 <__libc_init_array+0x2e>
 8019316:	bd70      	pop	{r4, r5, r6, pc}
 8019318:	f855 3b04 	ldr.w	r3, [r5], #4
 801931c:	4798      	blx	r3
 801931e:	3601      	adds	r6, #1
 8019320:	e7ee      	b.n	8019300 <__libc_init_array+0xc>
 8019322:	f855 3b04 	ldr.w	r3, [r5], #4
 8019326:	4798      	blx	r3
 8019328:	3601      	adds	r6, #1
 801932a:	e7f2      	b.n	8019312 <__libc_init_array+0x1e>
 801932c:	0801ba74 	.word	0x0801ba74
 8019330:	0801ba74 	.word	0x0801ba74
 8019334:	0801ba74 	.word	0x0801ba74
 8019338:	0801ba78 	.word	0x0801ba78

0801933c <__retarget_lock_init_recursive>:
 801933c:	4770      	bx	lr

0801933e <__retarget_lock_acquire_recursive>:
 801933e:	4770      	bx	lr

08019340 <__retarget_lock_release_recursive>:
 8019340:	4770      	bx	lr

08019342 <memcpy>:
 8019342:	440a      	add	r2, r1
 8019344:	4291      	cmp	r1, r2
 8019346:	f100 33ff 	add.w	r3, r0, #4294967295
 801934a:	d100      	bne.n	801934e <memcpy+0xc>
 801934c:	4770      	bx	lr
 801934e:	b510      	push	{r4, lr}
 8019350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019358:	4291      	cmp	r1, r2
 801935a:	d1f9      	bne.n	8019350 <memcpy+0xe>
 801935c:	bd10      	pop	{r4, pc}
	...

08019360 <__assert_func>:
 8019360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019362:	4614      	mov	r4, r2
 8019364:	461a      	mov	r2, r3
 8019366:	4b09      	ldr	r3, [pc, #36]	@ (801938c <__assert_func+0x2c>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	4605      	mov	r5, r0
 801936c:	68d8      	ldr	r0, [r3, #12]
 801936e:	b14c      	cbz	r4, 8019384 <__assert_func+0x24>
 8019370:	4b07      	ldr	r3, [pc, #28]	@ (8019390 <__assert_func+0x30>)
 8019372:	9100      	str	r1, [sp, #0]
 8019374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019378:	4906      	ldr	r1, [pc, #24]	@ (8019394 <__assert_func+0x34>)
 801937a:	462b      	mov	r3, r5
 801937c:	f001 fbbe 	bl	801aafc <fiprintf>
 8019380:	f001 fbe8 	bl	801ab54 <abort>
 8019384:	4b04      	ldr	r3, [pc, #16]	@ (8019398 <__assert_func+0x38>)
 8019386:	461c      	mov	r4, r3
 8019388:	e7f3      	b.n	8019372 <__assert_func+0x12>
 801938a:	bf00      	nop
 801938c:	24000128 	.word	0x24000128
 8019390:	0801b743 	.word	0x0801b743
 8019394:	0801b750 	.word	0x0801b750
 8019398:	0801b77e 	.word	0x0801b77e

0801939c <quorem>:
 801939c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a0:	6903      	ldr	r3, [r0, #16]
 80193a2:	690c      	ldr	r4, [r1, #16]
 80193a4:	42a3      	cmp	r3, r4
 80193a6:	4607      	mov	r7, r0
 80193a8:	db7e      	blt.n	80194a8 <quorem+0x10c>
 80193aa:	3c01      	subs	r4, #1
 80193ac:	f101 0814 	add.w	r8, r1, #20
 80193b0:	00a3      	lsls	r3, r4, #2
 80193b2:	f100 0514 	add.w	r5, r0, #20
 80193b6:	9300      	str	r3, [sp, #0]
 80193b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80193bc:	9301      	str	r3, [sp, #4]
 80193be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80193c6:	3301      	adds	r3, #1
 80193c8:	429a      	cmp	r2, r3
 80193ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80193ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80193d2:	d32e      	bcc.n	8019432 <quorem+0x96>
 80193d4:	f04f 0a00 	mov.w	sl, #0
 80193d8:	46c4      	mov	ip, r8
 80193da:	46ae      	mov	lr, r5
 80193dc:	46d3      	mov	fp, sl
 80193de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80193e2:	b298      	uxth	r0, r3
 80193e4:	fb06 a000 	mla	r0, r6, r0, sl
 80193e8:	0c02      	lsrs	r2, r0, #16
 80193ea:	0c1b      	lsrs	r3, r3, #16
 80193ec:	fb06 2303 	mla	r3, r6, r3, r2
 80193f0:	f8de 2000 	ldr.w	r2, [lr]
 80193f4:	b280      	uxth	r0, r0
 80193f6:	b292      	uxth	r2, r2
 80193f8:	1a12      	subs	r2, r2, r0
 80193fa:	445a      	add	r2, fp
 80193fc:	f8de 0000 	ldr.w	r0, [lr]
 8019400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019404:	b29b      	uxth	r3, r3
 8019406:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801940a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801940e:	b292      	uxth	r2, r2
 8019410:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019414:	45e1      	cmp	r9, ip
 8019416:	f84e 2b04 	str.w	r2, [lr], #4
 801941a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801941e:	d2de      	bcs.n	80193de <quorem+0x42>
 8019420:	9b00      	ldr	r3, [sp, #0]
 8019422:	58eb      	ldr	r3, [r5, r3]
 8019424:	b92b      	cbnz	r3, 8019432 <quorem+0x96>
 8019426:	9b01      	ldr	r3, [sp, #4]
 8019428:	3b04      	subs	r3, #4
 801942a:	429d      	cmp	r5, r3
 801942c:	461a      	mov	r2, r3
 801942e:	d32f      	bcc.n	8019490 <quorem+0xf4>
 8019430:	613c      	str	r4, [r7, #16]
 8019432:	4638      	mov	r0, r7
 8019434:	f001 f856 	bl	801a4e4 <__mcmp>
 8019438:	2800      	cmp	r0, #0
 801943a:	db25      	blt.n	8019488 <quorem+0xec>
 801943c:	4629      	mov	r1, r5
 801943e:	2000      	movs	r0, #0
 8019440:	f858 2b04 	ldr.w	r2, [r8], #4
 8019444:	f8d1 c000 	ldr.w	ip, [r1]
 8019448:	fa1f fe82 	uxth.w	lr, r2
 801944c:	fa1f f38c 	uxth.w	r3, ip
 8019450:	eba3 030e 	sub.w	r3, r3, lr
 8019454:	4403      	add	r3, r0
 8019456:	0c12      	lsrs	r2, r2, #16
 8019458:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801945c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019460:	b29b      	uxth	r3, r3
 8019462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019466:	45c1      	cmp	r9, r8
 8019468:	f841 3b04 	str.w	r3, [r1], #4
 801946c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019470:	d2e6      	bcs.n	8019440 <quorem+0xa4>
 8019472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801947a:	b922      	cbnz	r2, 8019486 <quorem+0xea>
 801947c:	3b04      	subs	r3, #4
 801947e:	429d      	cmp	r5, r3
 8019480:	461a      	mov	r2, r3
 8019482:	d30b      	bcc.n	801949c <quorem+0x100>
 8019484:	613c      	str	r4, [r7, #16]
 8019486:	3601      	adds	r6, #1
 8019488:	4630      	mov	r0, r6
 801948a:	b003      	add	sp, #12
 801948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019490:	6812      	ldr	r2, [r2, #0]
 8019492:	3b04      	subs	r3, #4
 8019494:	2a00      	cmp	r2, #0
 8019496:	d1cb      	bne.n	8019430 <quorem+0x94>
 8019498:	3c01      	subs	r4, #1
 801949a:	e7c6      	b.n	801942a <quorem+0x8e>
 801949c:	6812      	ldr	r2, [r2, #0]
 801949e:	3b04      	subs	r3, #4
 80194a0:	2a00      	cmp	r2, #0
 80194a2:	d1ef      	bne.n	8019484 <quorem+0xe8>
 80194a4:	3c01      	subs	r4, #1
 80194a6:	e7ea      	b.n	801947e <quorem+0xe2>
 80194a8:	2000      	movs	r0, #0
 80194aa:	e7ee      	b.n	801948a <quorem+0xee>
 80194ac:	0000      	movs	r0, r0
	...

080194b0 <_dtoa_r>:
 80194b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b4:	ed2d 8b02 	vpush	{d8}
 80194b8:	69c7      	ldr	r7, [r0, #28]
 80194ba:	b091      	sub	sp, #68	@ 0x44
 80194bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80194c0:	ec55 4b10 	vmov	r4, r5, d0
 80194c4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80194c6:	9107      	str	r1, [sp, #28]
 80194c8:	4681      	mov	r9, r0
 80194ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80194cc:	930d      	str	r3, [sp, #52]	@ 0x34
 80194ce:	b97f      	cbnz	r7, 80194f0 <_dtoa_r+0x40>
 80194d0:	2010      	movs	r0, #16
 80194d2:	f7ff f855 	bl	8018580 <malloc>
 80194d6:	4602      	mov	r2, r0
 80194d8:	f8c9 001c 	str.w	r0, [r9, #28]
 80194dc:	b920      	cbnz	r0, 80194e8 <_dtoa_r+0x38>
 80194de:	4ba0      	ldr	r3, [pc, #640]	@ (8019760 <_dtoa_r+0x2b0>)
 80194e0:	21ef      	movs	r1, #239	@ 0xef
 80194e2:	48a0      	ldr	r0, [pc, #640]	@ (8019764 <_dtoa_r+0x2b4>)
 80194e4:	f7ff ff3c 	bl	8019360 <__assert_func>
 80194e8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80194ec:	6007      	str	r7, [r0, #0]
 80194ee:	60c7      	str	r7, [r0, #12]
 80194f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80194f4:	6819      	ldr	r1, [r3, #0]
 80194f6:	b159      	cbz	r1, 8019510 <_dtoa_r+0x60>
 80194f8:	685a      	ldr	r2, [r3, #4]
 80194fa:	604a      	str	r2, [r1, #4]
 80194fc:	2301      	movs	r3, #1
 80194fe:	4093      	lsls	r3, r2
 8019500:	608b      	str	r3, [r1, #8]
 8019502:	4648      	mov	r0, r9
 8019504:	f000 fdbc 	bl	801a080 <_Bfree>
 8019508:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801950c:	2200      	movs	r2, #0
 801950e:	601a      	str	r2, [r3, #0]
 8019510:	1e2b      	subs	r3, r5, #0
 8019512:	bfbb      	ittet	lt
 8019514:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019518:	9303      	strlt	r3, [sp, #12]
 801951a:	2300      	movge	r3, #0
 801951c:	2201      	movlt	r2, #1
 801951e:	bfac      	ite	ge
 8019520:	6033      	strge	r3, [r6, #0]
 8019522:	6032      	strlt	r2, [r6, #0]
 8019524:	4b90      	ldr	r3, [pc, #576]	@ (8019768 <_dtoa_r+0x2b8>)
 8019526:	9e03      	ldr	r6, [sp, #12]
 8019528:	43b3      	bics	r3, r6
 801952a:	d110      	bne.n	801954e <_dtoa_r+0x9e>
 801952c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801952e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019532:	6013      	str	r3, [r2, #0]
 8019534:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019538:	4323      	orrs	r3, r4
 801953a:	f000 84e6 	beq.w	8019f0a <_dtoa_r+0xa5a>
 801953e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019540:	4f8a      	ldr	r7, [pc, #552]	@ (801976c <_dtoa_r+0x2bc>)
 8019542:	2b00      	cmp	r3, #0
 8019544:	f000 84e8 	beq.w	8019f18 <_dtoa_r+0xa68>
 8019548:	1cfb      	adds	r3, r7, #3
 801954a:	f000 bce3 	b.w	8019f14 <_dtoa_r+0xa64>
 801954e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019552:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801955a:	d10a      	bne.n	8019572 <_dtoa_r+0xc2>
 801955c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801955e:	2301      	movs	r3, #1
 8019560:	6013      	str	r3, [r2, #0]
 8019562:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019564:	b113      	cbz	r3, 801956c <_dtoa_r+0xbc>
 8019566:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019568:	4b81      	ldr	r3, [pc, #516]	@ (8019770 <_dtoa_r+0x2c0>)
 801956a:	6013      	str	r3, [r2, #0]
 801956c:	4f81      	ldr	r7, [pc, #516]	@ (8019774 <_dtoa_r+0x2c4>)
 801956e:	f000 bcd3 	b.w	8019f18 <_dtoa_r+0xa68>
 8019572:	aa0e      	add	r2, sp, #56	@ 0x38
 8019574:	a90f      	add	r1, sp, #60	@ 0x3c
 8019576:	4648      	mov	r0, r9
 8019578:	eeb0 0b48 	vmov.f64	d0, d8
 801957c:	f001 f862 	bl	801a644 <__d2b>
 8019580:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019586:	9001      	str	r0, [sp, #4]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d045      	beq.n	8019618 <_dtoa_r+0x168>
 801958c:	eeb0 7b48 	vmov.f64	d7, d8
 8019590:	ee18 1a90 	vmov	r1, s17
 8019594:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019598:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801959c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80195a0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80195a4:	2500      	movs	r5, #0
 80195a6:	ee07 1a90 	vmov	s15, r1
 80195aa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80195ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019748 <_dtoa_r+0x298>
 80195b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80195b6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019750 <_dtoa_r+0x2a0>
 80195ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80195be:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019758 <_dtoa_r+0x2a8>
 80195c2:	ee07 3a90 	vmov	s15, r3
 80195c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80195ca:	eeb0 7b46 	vmov.f64	d7, d6
 80195ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80195d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80195d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80195da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195de:	ee16 8a90 	vmov	r8, s13
 80195e2:	d508      	bpl.n	80195f6 <_dtoa_r+0x146>
 80195e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80195e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80195ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f0:	bf18      	it	ne
 80195f2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80195f6:	f1b8 0f16 	cmp.w	r8, #22
 80195fa:	d82b      	bhi.n	8019654 <_dtoa_r+0x1a4>
 80195fc:	495e      	ldr	r1, [pc, #376]	@ (8019778 <_dtoa_r+0x2c8>)
 80195fe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019602:	ed91 7b00 	vldr	d7, [r1]
 8019606:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801960e:	d501      	bpl.n	8019614 <_dtoa_r+0x164>
 8019610:	f108 38ff 	add.w	r8, r8, #4294967295
 8019614:	2100      	movs	r1, #0
 8019616:	e01e      	b.n	8019656 <_dtoa_r+0x1a6>
 8019618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801961a:	4413      	add	r3, r2
 801961c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019620:	2920      	cmp	r1, #32
 8019622:	bfc1      	itttt	gt
 8019624:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019628:	408e      	lslgt	r6, r1
 801962a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801962e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019632:	bfd6      	itet	le
 8019634:	f1c1 0120 	rsble	r1, r1, #32
 8019638:	4331      	orrgt	r1, r6
 801963a:	fa04 f101 	lslle.w	r1, r4, r1
 801963e:	ee07 1a90 	vmov	s15, r1
 8019642:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019646:	3b01      	subs	r3, #1
 8019648:	ee17 1a90 	vmov	r1, s15
 801964c:	2501      	movs	r5, #1
 801964e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019652:	e7a8      	b.n	80195a6 <_dtoa_r+0xf6>
 8019654:	2101      	movs	r1, #1
 8019656:	1ad2      	subs	r2, r2, r3
 8019658:	1e53      	subs	r3, r2, #1
 801965a:	9306      	str	r3, [sp, #24]
 801965c:	bf45      	ittet	mi
 801965e:	f1c2 0301 	rsbmi	r3, r2, #1
 8019662:	9304      	strmi	r3, [sp, #16]
 8019664:	2300      	movpl	r3, #0
 8019666:	2300      	movmi	r3, #0
 8019668:	bf4c      	ite	mi
 801966a:	9306      	strmi	r3, [sp, #24]
 801966c:	9304      	strpl	r3, [sp, #16]
 801966e:	f1b8 0f00 	cmp.w	r8, #0
 8019672:	910c      	str	r1, [sp, #48]	@ 0x30
 8019674:	db18      	blt.n	80196a8 <_dtoa_r+0x1f8>
 8019676:	9b06      	ldr	r3, [sp, #24]
 8019678:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801967c:	4443      	add	r3, r8
 801967e:	9306      	str	r3, [sp, #24]
 8019680:	2300      	movs	r3, #0
 8019682:	9a07      	ldr	r2, [sp, #28]
 8019684:	2a09      	cmp	r2, #9
 8019686:	d845      	bhi.n	8019714 <_dtoa_r+0x264>
 8019688:	2a05      	cmp	r2, #5
 801968a:	bfc4      	itt	gt
 801968c:	3a04      	subgt	r2, #4
 801968e:	9207      	strgt	r2, [sp, #28]
 8019690:	9a07      	ldr	r2, [sp, #28]
 8019692:	f1a2 0202 	sub.w	r2, r2, #2
 8019696:	bfcc      	ite	gt
 8019698:	2400      	movgt	r4, #0
 801969a:	2401      	movle	r4, #1
 801969c:	2a03      	cmp	r2, #3
 801969e:	d844      	bhi.n	801972a <_dtoa_r+0x27a>
 80196a0:	e8df f002 	tbb	[pc, r2]
 80196a4:	0b173634 	.word	0x0b173634
 80196a8:	9b04      	ldr	r3, [sp, #16]
 80196aa:	2200      	movs	r2, #0
 80196ac:	eba3 0308 	sub.w	r3, r3, r8
 80196b0:	9304      	str	r3, [sp, #16]
 80196b2:	920a      	str	r2, [sp, #40]	@ 0x28
 80196b4:	f1c8 0300 	rsb	r3, r8, #0
 80196b8:	e7e3      	b.n	8019682 <_dtoa_r+0x1d2>
 80196ba:	2201      	movs	r2, #1
 80196bc:	9208      	str	r2, [sp, #32]
 80196be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196c0:	eb08 0b02 	add.w	fp, r8, r2
 80196c4:	f10b 0a01 	add.w	sl, fp, #1
 80196c8:	4652      	mov	r2, sl
 80196ca:	2a01      	cmp	r2, #1
 80196cc:	bfb8      	it	lt
 80196ce:	2201      	movlt	r2, #1
 80196d0:	e006      	b.n	80196e0 <_dtoa_r+0x230>
 80196d2:	2201      	movs	r2, #1
 80196d4:	9208      	str	r2, [sp, #32]
 80196d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196d8:	2a00      	cmp	r2, #0
 80196da:	dd29      	ble.n	8019730 <_dtoa_r+0x280>
 80196dc:	4693      	mov	fp, r2
 80196de:	4692      	mov	sl, r2
 80196e0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80196e4:	2100      	movs	r1, #0
 80196e6:	2004      	movs	r0, #4
 80196e8:	f100 0614 	add.w	r6, r0, #20
 80196ec:	4296      	cmp	r6, r2
 80196ee:	d926      	bls.n	801973e <_dtoa_r+0x28e>
 80196f0:	6079      	str	r1, [r7, #4]
 80196f2:	4648      	mov	r0, r9
 80196f4:	9305      	str	r3, [sp, #20]
 80196f6:	f000 fc83 	bl	801a000 <_Balloc>
 80196fa:	9b05      	ldr	r3, [sp, #20]
 80196fc:	4607      	mov	r7, r0
 80196fe:	2800      	cmp	r0, #0
 8019700:	d13e      	bne.n	8019780 <_dtoa_r+0x2d0>
 8019702:	4b1e      	ldr	r3, [pc, #120]	@ (801977c <_dtoa_r+0x2cc>)
 8019704:	4602      	mov	r2, r0
 8019706:	f240 11af 	movw	r1, #431	@ 0x1af
 801970a:	e6ea      	b.n	80194e2 <_dtoa_r+0x32>
 801970c:	2200      	movs	r2, #0
 801970e:	e7e1      	b.n	80196d4 <_dtoa_r+0x224>
 8019710:	2200      	movs	r2, #0
 8019712:	e7d3      	b.n	80196bc <_dtoa_r+0x20c>
 8019714:	2401      	movs	r4, #1
 8019716:	2200      	movs	r2, #0
 8019718:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801971c:	f04f 3bff 	mov.w	fp, #4294967295
 8019720:	2100      	movs	r1, #0
 8019722:	46da      	mov	sl, fp
 8019724:	2212      	movs	r2, #18
 8019726:	9109      	str	r1, [sp, #36]	@ 0x24
 8019728:	e7da      	b.n	80196e0 <_dtoa_r+0x230>
 801972a:	2201      	movs	r2, #1
 801972c:	9208      	str	r2, [sp, #32]
 801972e:	e7f5      	b.n	801971c <_dtoa_r+0x26c>
 8019730:	f04f 0b01 	mov.w	fp, #1
 8019734:	46da      	mov	sl, fp
 8019736:	465a      	mov	r2, fp
 8019738:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801973c:	e7d0      	b.n	80196e0 <_dtoa_r+0x230>
 801973e:	3101      	adds	r1, #1
 8019740:	0040      	lsls	r0, r0, #1
 8019742:	e7d1      	b.n	80196e8 <_dtoa_r+0x238>
 8019744:	f3af 8000 	nop.w
 8019748:	636f4361 	.word	0x636f4361
 801974c:	3fd287a7 	.word	0x3fd287a7
 8019750:	8b60c8b3 	.word	0x8b60c8b3
 8019754:	3fc68a28 	.word	0x3fc68a28
 8019758:	509f79fb 	.word	0x509f79fb
 801975c:	3fd34413 	.word	0x3fd34413
 8019760:	0801b6a0 	.word	0x0801b6a0
 8019764:	0801b78c 	.word	0x0801b78c
 8019768:	7ff00000 	.word	0x7ff00000
 801976c:	0801b788 	.word	0x0801b788
 8019770:	0801b720 	.word	0x0801b720
 8019774:	0801b71f 	.word	0x0801b71f
 8019778:	0801b8a0 	.word	0x0801b8a0
 801977c:	0801b7e4 	.word	0x0801b7e4
 8019780:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019784:	f1ba 0f0e 	cmp.w	sl, #14
 8019788:	6010      	str	r0, [r2, #0]
 801978a:	d86e      	bhi.n	801986a <_dtoa_r+0x3ba>
 801978c:	2c00      	cmp	r4, #0
 801978e:	d06c      	beq.n	801986a <_dtoa_r+0x3ba>
 8019790:	f1b8 0f00 	cmp.w	r8, #0
 8019794:	f340 80b4 	ble.w	8019900 <_dtoa_r+0x450>
 8019798:	4ac8      	ldr	r2, [pc, #800]	@ (8019abc <_dtoa_r+0x60c>)
 801979a:	f008 010f 	and.w	r1, r8, #15
 801979e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80197a2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80197a6:	ed92 7b00 	vldr	d7, [r2]
 80197aa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80197ae:	f000 809b 	beq.w	80198e8 <_dtoa_r+0x438>
 80197b2:	4ac3      	ldr	r2, [pc, #780]	@ (8019ac0 <_dtoa_r+0x610>)
 80197b4:	ed92 6b08 	vldr	d6, [r2, #32]
 80197b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80197bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80197c0:	f001 010f 	and.w	r1, r1, #15
 80197c4:	2203      	movs	r2, #3
 80197c6:	48be      	ldr	r0, [pc, #760]	@ (8019ac0 <_dtoa_r+0x610>)
 80197c8:	2900      	cmp	r1, #0
 80197ca:	f040 808f 	bne.w	80198ec <_dtoa_r+0x43c>
 80197ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80197d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80197d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80197da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80197dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80197e0:	2900      	cmp	r1, #0
 80197e2:	f000 80b3 	beq.w	801994c <_dtoa_r+0x49c>
 80197e6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80197ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80197ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f2:	f140 80ab 	bpl.w	801994c <_dtoa_r+0x49c>
 80197f6:	f1ba 0f00 	cmp.w	sl, #0
 80197fa:	f000 80a7 	beq.w	801994c <_dtoa_r+0x49c>
 80197fe:	f1bb 0f00 	cmp.w	fp, #0
 8019802:	dd30      	ble.n	8019866 <_dtoa_r+0x3b6>
 8019804:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019808:	ee27 7b06 	vmul.f64	d7, d7, d6
 801980c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019810:	f108 31ff 	add.w	r1, r8, #4294967295
 8019814:	9105      	str	r1, [sp, #20]
 8019816:	3201      	adds	r2, #1
 8019818:	465c      	mov	r4, fp
 801981a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801981e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019822:	ee07 2a90 	vmov	s15, r2
 8019826:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801982a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801982e:	ee15 2a90 	vmov	r2, s11
 8019832:	ec51 0b15 	vmov	r0, r1, d5
 8019836:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801983a:	2c00      	cmp	r4, #0
 801983c:	f040 808a 	bne.w	8019954 <_dtoa_r+0x4a4>
 8019840:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019844:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019848:	ec41 0b17 	vmov	d7, r0, r1
 801984c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019854:	f300 826a 	bgt.w	8019d2c <_dtoa_r+0x87c>
 8019858:	eeb1 7b47 	vneg.f64	d7, d7
 801985c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019864:	d423      	bmi.n	80198ae <_dtoa_r+0x3fe>
 8019866:	ed8d 8b02 	vstr	d8, [sp, #8]
 801986a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801986c:	2a00      	cmp	r2, #0
 801986e:	f2c0 8129 	blt.w	8019ac4 <_dtoa_r+0x614>
 8019872:	f1b8 0f0e 	cmp.w	r8, #14
 8019876:	f300 8125 	bgt.w	8019ac4 <_dtoa_r+0x614>
 801987a:	4b90      	ldr	r3, [pc, #576]	@ (8019abc <_dtoa_r+0x60c>)
 801987c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019880:	ed93 6b00 	vldr	d6, [r3]
 8019884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019886:	2b00      	cmp	r3, #0
 8019888:	f280 80c8 	bge.w	8019a1c <_dtoa_r+0x56c>
 801988c:	f1ba 0f00 	cmp.w	sl, #0
 8019890:	f300 80c4 	bgt.w	8019a1c <_dtoa_r+0x56c>
 8019894:	d10b      	bne.n	80198ae <_dtoa_r+0x3fe>
 8019896:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801989a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801989e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80198a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198aa:	f2c0 823c 	blt.w	8019d26 <_dtoa_r+0x876>
 80198ae:	2400      	movs	r4, #0
 80198b0:	4625      	mov	r5, r4
 80198b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198b4:	43db      	mvns	r3, r3
 80198b6:	9305      	str	r3, [sp, #20]
 80198b8:	463e      	mov	r6, r7
 80198ba:	f04f 0800 	mov.w	r8, #0
 80198be:	4621      	mov	r1, r4
 80198c0:	4648      	mov	r0, r9
 80198c2:	f000 fbdd 	bl	801a080 <_Bfree>
 80198c6:	2d00      	cmp	r5, #0
 80198c8:	f000 80a2 	beq.w	8019a10 <_dtoa_r+0x560>
 80198cc:	f1b8 0f00 	cmp.w	r8, #0
 80198d0:	d005      	beq.n	80198de <_dtoa_r+0x42e>
 80198d2:	45a8      	cmp	r8, r5
 80198d4:	d003      	beq.n	80198de <_dtoa_r+0x42e>
 80198d6:	4641      	mov	r1, r8
 80198d8:	4648      	mov	r0, r9
 80198da:	f000 fbd1 	bl	801a080 <_Bfree>
 80198de:	4629      	mov	r1, r5
 80198e0:	4648      	mov	r0, r9
 80198e2:	f000 fbcd 	bl	801a080 <_Bfree>
 80198e6:	e093      	b.n	8019a10 <_dtoa_r+0x560>
 80198e8:	2202      	movs	r2, #2
 80198ea:	e76c      	b.n	80197c6 <_dtoa_r+0x316>
 80198ec:	07cc      	lsls	r4, r1, #31
 80198ee:	d504      	bpl.n	80198fa <_dtoa_r+0x44a>
 80198f0:	ed90 6b00 	vldr	d6, [r0]
 80198f4:	3201      	adds	r2, #1
 80198f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80198fa:	1049      	asrs	r1, r1, #1
 80198fc:	3008      	adds	r0, #8
 80198fe:	e763      	b.n	80197c8 <_dtoa_r+0x318>
 8019900:	d022      	beq.n	8019948 <_dtoa_r+0x498>
 8019902:	f1c8 0100 	rsb	r1, r8, #0
 8019906:	4a6d      	ldr	r2, [pc, #436]	@ (8019abc <_dtoa_r+0x60c>)
 8019908:	f001 000f 	and.w	r0, r1, #15
 801990c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8019910:	ed92 7b00 	vldr	d7, [r2]
 8019914:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019918:	ed8d 7b02 	vstr	d7, [sp, #8]
 801991c:	4868      	ldr	r0, [pc, #416]	@ (8019ac0 <_dtoa_r+0x610>)
 801991e:	1109      	asrs	r1, r1, #4
 8019920:	2400      	movs	r4, #0
 8019922:	2202      	movs	r2, #2
 8019924:	b929      	cbnz	r1, 8019932 <_dtoa_r+0x482>
 8019926:	2c00      	cmp	r4, #0
 8019928:	f43f af57 	beq.w	80197da <_dtoa_r+0x32a>
 801992c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019930:	e753      	b.n	80197da <_dtoa_r+0x32a>
 8019932:	07ce      	lsls	r6, r1, #31
 8019934:	d505      	bpl.n	8019942 <_dtoa_r+0x492>
 8019936:	ed90 6b00 	vldr	d6, [r0]
 801993a:	3201      	adds	r2, #1
 801993c:	2401      	movs	r4, #1
 801993e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019942:	1049      	asrs	r1, r1, #1
 8019944:	3008      	adds	r0, #8
 8019946:	e7ed      	b.n	8019924 <_dtoa_r+0x474>
 8019948:	2202      	movs	r2, #2
 801994a:	e746      	b.n	80197da <_dtoa_r+0x32a>
 801994c:	f8cd 8014 	str.w	r8, [sp, #20]
 8019950:	4654      	mov	r4, sl
 8019952:	e762      	b.n	801981a <_dtoa_r+0x36a>
 8019954:	4a59      	ldr	r2, [pc, #356]	@ (8019abc <_dtoa_r+0x60c>)
 8019956:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801995a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801995e:	9a08      	ldr	r2, [sp, #32]
 8019960:	ec41 0b17 	vmov	d7, r0, r1
 8019964:	443c      	add	r4, r7
 8019966:	b34a      	cbz	r2, 80199bc <_dtoa_r+0x50c>
 8019968:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801996c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8019970:	463e      	mov	r6, r7
 8019972:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019976:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801997a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801997e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019982:	ee14 2a90 	vmov	r2, s9
 8019986:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801998a:	3230      	adds	r2, #48	@ 0x30
 801998c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019990:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019998:	f806 2b01 	strb.w	r2, [r6], #1
 801999c:	d438      	bmi.n	8019a10 <_dtoa_r+0x560>
 801999e:	ee32 5b46 	vsub.f64	d5, d2, d6
 80199a2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80199a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199aa:	d46e      	bmi.n	8019a8a <_dtoa_r+0x5da>
 80199ac:	42a6      	cmp	r6, r4
 80199ae:	f43f af5a 	beq.w	8019866 <_dtoa_r+0x3b6>
 80199b2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80199b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80199ba:	e7e0      	b.n	801997e <_dtoa_r+0x4ce>
 80199bc:	4621      	mov	r1, r4
 80199be:	463e      	mov	r6, r7
 80199c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80199c4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80199c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80199cc:	ee14 2a90 	vmov	r2, s9
 80199d0:	3230      	adds	r2, #48	@ 0x30
 80199d2:	f806 2b01 	strb.w	r2, [r6], #1
 80199d6:	42a6      	cmp	r6, r4
 80199d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80199dc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80199e0:	d119      	bne.n	8019a16 <_dtoa_r+0x566>
 80199e2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80199e6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80199ea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80199ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199f2:	dc4a      	bgt.n	8019a8a <_dtoa_r+0x5da>
 80199f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80199f8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80199fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a00:	f57f af31 	bpl.w	8019866 <_dtoa_r+0x3b6>
 8019a04:	460e      	mov	r6, r1
 8019a06:	3901      	subs	r1, #1
 8019a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019a0c:	2b30      	cmp	r3, #48	@ 0x30
 8019a0e:	d0f9      	beq.n	8019a04 <_dtoa_r+0x554>
 8019a10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019a14:	e027      	b.n	8019a66 <_dtoa_r+0x5b6>
 8019a16:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019a1a:	e7d5      	b.n	80199c8 <_dtoa_r+0x518>
 8019a1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a20:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019a24:	463e      	mov	r6, r7
 8019a26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019a2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019a2e:	ee15 3a10 	vmov	r3, s10
 8019a32:	3330      	adds	r3, #48	@ 0x30
 8019a34:	f806 3b01 	strb.w	r3, [r6], #1
 8019a38:	1bf3      	subs	r3, r6, r7
 8019a3a:	459a      	cmp	sl, r3
 8019a3c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019a40:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019a44:	d132      	bne.n	8019aac <_dtoa_r+0x5fc>
 8019a46:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019a4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a52:	dc18      	bgt.n	8019a86 <_dtoa_r+0x5d6>
 8019a54:	eeb4 7b46 	vcmp.f64	d7, d6
 8019a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a5c:	d103      	bne.n	8019a66 <_dtoa_r+0x5b6>
 8019a5e:	ee15 3a10 	vmov	r3, s10
 8019a62:	07db      	lsls	r3, r3, #31
 8019a64:	d40f      	bmi.n	8019a86 <_dtoa_r+0x5d6>
 8019a66:	9901      	ldr	r1, [sp, #4]
 8019a68:	4648      	mov	r0, r9
 8019a6a:	f000 fb09 	bl	801a080 <_Bfree>
 8019a6e:	2300      	movs	r3, #0
 8019a70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019a72:	7033      	strb	r3, [r6, #0]
 8019a74:	f108 0301 	add.w	r3, r8, #1
 8019a78:	6013      	str	r3, [r2, #0]
 8019a7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	f000 824b 	beq.w	8019f18 <_dtoa_r+0xa68>
 8019a82:	601e      	str	r6, [r3, #0]
 8019a84:	e248      	b.n	8019f18 <_dtoa_r+0xa68>
 8019a86:	f8cd 8014 	str.w	r8, [sp, #20]
 8019a8a:	4633      	mov	r3, r6
 8019a8c:	461e      	mov	r6, r3
 8019a8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019a92:	2a39      	cmp	r2, #57	@ 0x39
 8019a94:	d106      	bne.n	8019aa4 <_dtoa_r+0x5f4>
 8019a96:	429f      	cmp	r7, r3
 8019a98:	d1f8      	bne.n	8019a8c <_dtoa_r+0x5dc>
 8019a9a:	9a05      	ldr	r2, [sp, #20]
 8019a9c:	3201      	adds	r2, #1
 8019a9e:	9205      	str	r2, [sp, #20]
 8019aa0:	2230      	movs	r2, #48	@ 0x30
 8019aa2:	703a      	strb	r2, [r7, #0]
 8019aa4:	781a      	ldrb	r2, [r3, #0]
 8019aa6:	3201      	adds	r2, #1
 8019aa8:	701a      	strb	r2, [r3, #0]
 8019aaa:	e7b1      	b.n	8019a10 <_dtoa_r+0x560>
 8019aac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019ab0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ab8:	d1b5      	bne.n	8019a26 <_dtoa_r+0x576>
 8019aba:	e7d4      	b.n	8019a66 <_dtoa_r+0x5b6>
 8019abc:	0801b8a0 	.word	0x0801b8a0
 8019ac0:	0801b878 	.word	0x0801b878
 8019ac4:	9908      	ldr	r1, [sp, #32]
 8019ac6:	2900      	cmp	r1, #0
 8019ac8:	f000 80e9 	beq.w	8019c9e <_dtoa_r+0x7ee>
 8019acc:	9907      	ldr	r1, [sp, #28]
 8019ace:	2901      	cmp	r1, #1
 8019ad0:	f300 80cb 	bgt.w	8019c6a <_dtoa_r+0x7ba>
 8019ad4:	2d00      	cmp	r5, #0
 8019ad6:	f000 80c4 	beq.w	8019c62 <_dtoa_r+0x7b2>
 8019ada:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019ade:	9e04      	ldr	r6, [sp, #16]
 8019ae0:	461c      	mov	r4, r3
 8019ae2:	9305      	str	r3, [sp, #20]
 8019ae4:	9b04      	ldr	r3, [sp, #16]
 8019ae6:	4413      	add	r3, r2
 8019ae8:	9304      	str	r3, [sp, #16]
 8019aea:	9b06      	ldr	r3, [sp, #24]
 8019aec:	2101      	movs	r1, #1
 8019aee:	4413      	add	r3, r2
 8019af0:	4648      	mov	r0, r9
 8019af2:	9306      	str	r3, [sp, #24]
 8019af4:	f000 fb78 	bl	801a1e8 <__i2b>
 8019af8:	9b05      	ldr	r3, [sp, #20]
 8019afa:	4605      	mov	r5, r0
 8019afc:	b166      	cbz	r6, 8019b18 <_dtoa_r+0x668>
 8019afe:	9a06      	ldr	r2, [sp, #24]
 8019b00:	2a00      	cmp	r2, #0
 8019b02:	dd09      	ble.n	8019b18 <_dtoa_r+0x668>
 8019b04:	42b2      	cmp	r2, r6
 8019b06:	9904      	ldr	r1, [sp, #16]
 8019b08:	bfa8      	it	ge
 8019b0a:	4632      	movge	r2, r6
 8019b0c:	1a89      	subs	r1, r1, r2
 8019b0e:	9104      	str	r1, [sp, #16]
 8019b10:	9906      	ldr	r1, [sp, #24]
 8019b12:	1ab6      	subs	r6, r6, r2
 8019b14:	1a8a      	subs	r2, r1, r2
 8019b16:	9206      	str	r2, [sp, #24]
 8019b18:	b30b      	cbz	r3, 8019b5e <_dtoa_r+0x6ae>
 8019b1a:	9a08      	ldr	r2, [sp, #32]
 8019b1c:	2a00      	cmp	r2, #0
 8019b1e:	f000 80c5 	beq.w	8019cac <_dtoa_r+0x7fc>
 8019b22:	2c00      	cmp	r4, #0
 8019b24:	f000 80bf 	beq.w	8019ca6 <_dtoa_r+0x7f6>
 8019b28:	4629      	mov	r1, r5
 8019b2a:	4622      	mov	r2, r4
 8019b2c:	4648      	mov	r0, r9
 8019b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b30:	f000 fc12 	bl	801a358 <__pow5mult>
 8019b34:	9a01      	ldr	r2, [sp, #4]
 8019b36:	4601      	mov	r1, r0
 8019b38:	4605      	mov	r5, r0
 8019b3a:	4648      	mov	r0, r9
 8019b3c:	f000 fb6a 	bl	801a214 <__multiply>
 8019b40:	9901      	ldr	r1, [sp, #4]
 8019b42:	9005      	str	r0, [sp, #20]
 8019b44:	4648      	mov	r0, r9
 8019b46:	f000 fa9b 	bl	801a080 <_Bfree>
 8019b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b4c:	1b1b      	subs	r3, r3, r4
 8019b4e:	f000 80b0 	beq.w	8019cb2 <_dtoa_r+0x802>
 8019b52:	9905      	ldr	r1, [sp, #20]
 8019b54:	461a      	mov	r2, r3
 8019b56:	4648      	mov	r0, r9
 8019b58:	f000 fbfe 	bl	801a358 <__pow5mult>
 8019b5c:	9001      	str	r0, [sp, #4]
 8019b5e:	2101      	movs	r1, #1
 8019b60:	4648      	mov	r0, r9
 8019b62:	f000 fb41 	bl	801a1e8 <__i2b>
 8019b66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b68:	4604      	mov	r4, r0
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	f000 81da 	beq.w	8019f24 <_dtoa_r+0xa74>
 8019b70:	461a      	mov	r2, r3
 8019b72:	4601      	mov	r1, r0
 8019b74:	4648      	mov	r0, r9
 8019b76:	f000 fbef 	bl	801a358 <__pow5mult>
 8019b7a:	9b07      	ldr	r3, [sp, #28]
 8019b7c:	2b01      	cmp	r3, #1
 8019b7e:	4604      	mov	r4, r0
 8019b80:	f300 80a0 	bgt.w	8019cc4 <_dtoa_r+0x814>
 8019b84:	9b02      	ldr	r3, [sp, #8]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	f040 8096 	bne.w	8019cb8 <_dtoa_r+0x808>
 8019b8c:	9b03      	ldr	r3, [sp, #12]
 8019b8e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019b92:	2a00      	cmp	r2, #0
 8019b94:	f040 8092 	bne.w	8019cbc <_dtoa_r+0x80c>
 8019b98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019b9c:	0d12      	lsrs	r2, r2, #20
 8019b9e:	0512      	lsls	r2, r2, #20
 8019ba0:	2a00      	cmp	r2, #0
 8019ba2:	f000 808d 	beq.w	8019cc0 <_dtoa_r+0x810>
 8019ba6:	9b04      	ldr	r3, [sp, #16]
 8019ba8:	3301      	adds	r3, #1
 8019baa:	9304      	str	r3, [sp, #16]
 8019bac:	9b06      	ldr	r3, [sp, #24]
 8019bae:	3301      	adds	r3, #1
 8019bb0:	9306      	str	r3, [sp, #24]
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019bb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	f000 81b9 	beq.w	8019f30 <_dtoa_r+0xa80>
 8019bbe:	6922      	ldr	r2, [r4, #16]
 8019bc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019bc4:	6910      	ldr	r0, [r2, #16]
 8019bc6:	f000 fac3 	bl	801a150 <__hi0bits>
 8019bca:	f1c0 0020 	rsb	r0, r0, #32
 8019bce:	9b06      	ldr	r3, [sp, #24]
 8019bd0:	4418      	add	r0, r3
 8019bd2:	f010 001f 	ands.w	r0, r0, #31
 8019bd6:	f000 8081 	beq.w	8019cdc <_dtoa_r+0x82c>
 8019bda:	f1c0 0220 	rsb	r2, r0, #32
 8019bde:	2a04      	cmp	r2, #4
 8019be0:	dd73      	ble.n	8019cca <_dtoa_r+0x81a>
 8019be2:	9b04      	ldr	r3, [sp, #16]
 8019be4:	f1c0 001c 	rsb	r0, r0, #28
 8019be8:	4403      	add	r3, r0
 8019bea:	9304      	str	r3, [sp, #16]
 8019bec:	9b06      	ldr	r3, [sp, #24]
 8019bee:	4406      	add	r6, r0
 8019bf0:	4403      	add	r3, r0
 8019bf2:	9306      	str	r3, [sp, #24]
 8019bf4:	9b04      	ldr	r3, [sp, #16]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	dd05      	ble.n	8019c06 <_dtoa_r+0x756>
 8019bfa:	9901      	ldr	r1, [sp, #4]
 8019bfc:	461a      	mov	r2, r3
 8019bfe:	4648      	mov	r0, r9
 8019c00:	f000 fc04 	bl	801a40c <__lshift>
 8019c04:	9001      	str	r0, [sp, #4]
 8019c06:	9b06      	ldr	r3, [sp, #24]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	dd05      	ble.n	8019c18 <_dtoa_r+0x768>
 8019c0c:	4621      	mov	r1, r4
 8019c0e:	461a      	mov	r2, r3
 8019c10:	4648      	mov	r0, r9
 8019c12:	f000 fbfb 	bl	801a40c <__lshift>
 8019c16:	4604      	mov	r4, r0
 8019c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d060      	beq.n	8019ce0 <_dtoa_r+0x830>
 8019c1e:	9801      	ldr	r0, [sp, #4]
 8019c20:	4621      	mov	r1, r4
 8019c22:	f000 fc5f 	bl	801a4e4 <__mcmp>
 8019c26:	2800      	cmp	r0, #0
 8019c28:	da5a      	bge.n	8019ce0 <_dtoa_r+0x830>
 8019c2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8019c2e:	9305      	str	r3, [sp, #20]
 8019c30:	9901      	ldr	r1, [sp, #4]
 8019c32:	2300      	movs	r3, #0
 8019c34:	220a      	movs	r2, #10
 8019c36:	4648      	mov	r0, r9
 8019c38:	f000 fa44 	bl	801a0c4 <__multadd>
 8019c3c:	9b08      	ldr	r3, [sp, #32]
 8019c3e:	9001      	str	r0, [sp, #4]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	f000 8177 	beq.w	8019f34 <_dtoa_r+0xa84>
 8019c46:	4629      	mov	r1, r5
 8019c48:	2300      	movs	r3, #0
 8019c4a:	220a      	movs	r2, #10
 8019c4c:	4648      	mov	r0, r9
 8019c4e:	f000 fa39 	bl	801a0c4 <__multadd>
 8019c52:	f1bb 0f00 	cmp.w	fp, #0
 8019c56:	4605      	mov	r5, r0
 8019c58:	dc6e      	bgt.n	8019d38 <_dtoa_r+0x888>
 8019c5a:	9b07      	ldr	r3, [sp, #28]
 8019c5c:	2b02      	cmp	r3, #2
 8019c5e:	dc48      	bgt.n	8019cf2 <_dtoa_r+0x842>
 8019c60:	e06a      	b.n	8019d38 <_dtoa_r+0x888>
 8019c62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019c68:	e739      	b.n	8019ade <_dtoa_r+0x62e>
 8019c6a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8019c6e:	42a3      	cmp	r3, r4
 8019c70:	db07      	blt.n	8019c82 <_dtoa_r+0x7d2>
 8019c72:	f1ba 0f00 	cmp.w	sl, #0
 8019c76:	eba3 0404 	sub.w	r4, r3, r4
 8019c7a:	db0b      	blt.n	8019c94 <_dtoa_r+0x7e4>
 8019c7c:	9e04      	ldr	r6, [sp, #16]
 8019c7e:	4652      	mov	r2, sl
 8019c80:	e72f      	b.n	8019ae2 <_dtoa_r+0x632>
 8019c82:	1ae2      	subs	r2, r4, r3
 8019c84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c86:	9e04      	ldr	r6, [sp, #16]
 8019c88:	4413      	add	r3, r2
 8019c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8019c8c:	4652      	mov	r2, sl
 8019c8e:	4623      	mov	r3, r4
 8019c90:	2400      	movs	r4, #0
 8019c92:	e726      	b.n	8019ae2 <_dtoa_r+0x632>
 8019c94:	9a04      	ldr	r2, [sp, #16]
 8019c96:	eba2 060a 	sub.w	r6, r2, sl
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	e721      	b.n	8019ae2 <_dtoa_r+0x632>
 8019c9e:	9e04      	ldr	r6, [sp, #16]
 8019ca0:	9d08      	ldr	r5, [sp, #32]
 8019ca2:	461c      	mov	r4, r3
 8019ca4:	e72a      	b.n	8019afc <_dtoa_r+0x64c>
 8019ca6:	9a01      	ldr	r2, [sp, #4]
 8019ca8:	9205      	str	r2, [sp, #20]
 8019caa:	e752      	b.n	8019b52 <_dtoa_r+0x6a2>
 8019cac:	9901      	ldr	r1, [sp, #4]
 8019cae:	461a      	mov	r2, r3
 8019cb0:	e751      	b.n	8019b56 <_dtoa_r+0x6a6>
 8019cb2:	9b05      	ldr	r3, [sp, #20]
 8019cb4:	9301      	str	r3, [sp, #4]
 8019cb6:	e752      	b.n	8019b5e <_dtoa_r+0x6ae>
 8019cb8:	2300      	movs	r3, #0
 8019cba:	e77b      	b.n	8019bb4 <_dtoa_r+0x704>
 8019cbc:	9b02      	ldr	r3, [sp, #8]
 8019cbe:	e779      	b.n	8019bb4 <_dtoa_r+0x704>
 8019cc0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019cc2:	e778      	b.n	8019bb6 <_dtoa_r+0x706>
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cc8:	e779      	b.n	8019bbe <_dtoa_r+0x70e>
 8019cca:	d093      	beq.n	8019bf4 <_dtoa_r+0x744>
 8019ccc:	9b04      	ldr	r3, [sp, #16]
 8019cce:	321c      	adds	r2, #28
 8019cd0:	4413      	add	r3, r2
 8019cd2:	9304      	str	r3, [sp, #16]
 8019cd4:	9b06      	ldr	r3, [sp, #24]
 8019cd6:	4416      	add	r6, r2
 8019cd8:	4413      	add	r3, r2
 8019cda:	e78a      	b.n	8019bf2 <_dtoa_r+0x742>
 8019cdc:	4602      	mov	r2, r0
 8019cde:	e7f5      	b.n	8019ccc <_dtoa_r+0x81c>
 8019ce0:	f1ba 0f00 	cmp.w	sl, #0
 8019ce4:	f8cd 8014 	str.w	r8, [sp, #20]
 8019ce8:	46d3      	mov	fp, sl
 8019cea:	dc21      	bgt.n	8019d30 <_dtoa_r+0x880>
 8019cec:	9b07      	ldr	r3, [sp, #28]
 8019cee:	2b02      	cmp	r3, #2
 8019cf0:	dd1e      	ble.n	8019d30 <_dtoa_r+0x880>
 8019cf2:	f1bb 0f00 	cmp.w	fp, #0
 8019cf6:	f47f addc 	bne.w	80198b2 <_dtoa_r+0x402>
 8019cfa:	4621      	mov	r1, r4
 8019cfc:	465b      	mov	r3, fp
 8019cfe:	2205      	movs	r2, #5
 8019d00:	4648      	mov	r0, r9
 8019d02:	f000 f9df 	bl	801a0c4 <__multadd>
 8019d06:	4601      	mov	r1, r0
 8019d08:	4604      	mov	r4, r0
 8019d0a:	9801      	ldr	r0, [sp, #4]
 8019d0c:	f000 fbea 	bl	801a4e4 <__mcmp>
 8019d10:	2800      	cmp	r0, #0
 8019d12:	f77f adce 	ble.w	80198b2 <_dtoa_r+0x402>
 8019d16:	463e      	mov	r6, r7
 8019d18:	2331      	movs	r3, #49	@ 0x31
 8019d1a:	f806 3b01 	strb.w	r3, [r6], #1
 8019d1e:	9b05      	ldr	r3, [sp, #20]
 8019d20:	3301      	adds	r3, #1
 8019d22:	9305      	str	r3, [sp, #20]
 8019d24:	e5c9      	b.n	80198ba <_dtoa_r+0x40a>
 8019d26:	f8cd 8014 	str.w	r8, [sp, #20]
 8019d2a:	4654      	mov	r4, sl
 8019d2c:	4625      	mov	r5, r4
 8019d2e:	e7f2      	b.n	8019d16 <_dtoa_r+0x866>
 8019d30:	9b08      	ldr	r3, [sp, #32]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	f000 8102 	beq.w	8019f3c <_dtoa_r+0xa8c>
 8019d38:	2e00      	cmp	r6, #0
 8019d3a:	dd05      	ble.n	8019d48 <_dtoa_r+0x898>
 8019d3c:	4629      	mov	r1, r5
 8019d3e:	4632      	mov	r2, r6
 8019d40:	4648      	mov	r0, r9
 8019d42:	f000 fb63 	bl	801a40c <__lshift>
 8019d46:	4605      	mov	r5, r0
 8019d48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d058      	beq.n	8019e00 <_dtoa_r+0x950>
 8019d4e:	6869      	ldr	r1, [r5, #4]
 8019d50:	4648      	mov	r0, r9
 8019d52:	f000 f955 	bl	801a000 <_Balloc>
 8019d56:	4606      	mov	r6, r0
 8019d58:	b928      	cbnz	r0, 8019d66 <_dtoa_r+0x8b6>
 8019d5a:	4b82      	ldr	r3, [pc, #520]	@ (8019f64 <_dtoa_r+0xab4>)
 8019d5c:	4602      	mov	r2, r0
 8019d5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8019d62:	f7ff bbbe 	b.w	80194e2 <_dtoa_r+0x32>
 8019d66:	692a      	ldr	r2, [r5, #16]
 8019d68:	3202      	adds	r2, #2
 8019d6a:	0092      	lsls	r2, r2, #2
 8019d6c:	f105 010c 	add.w	r1, r5, #12
 8019d70:	300c      	adds	r0, #12
 8019d72:	f7ff fae6 	bl	8019342 <memcpy>
 8019d76:	2201      	movs	r2, #1
 8019d78:	4631      	mov	r1, r6
 8019d7a:	4648      	mov	r0, r9
 8019d7c:	f000 fb46 	bl	801a40c <__lshift>
 8019d80:	1c7b      	adds	r3, r7, #1
 8019d82:	9304      	str	r3, [sp, #16]
 8019d84:	eb07 030b 	add.w	r3, r7, fp
 8019d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d8a:	9b02      	ldr	r3, [sp, #8]
 8019d8c:	f003 0301 	and.w	r3, r3, #1
 8019d90:	46a8      	mov	r8, r5
 8019d92:	9308      	str	r3, [sp, #32]
 8019d94:	4605      	mov	r5, r0
 8019d96:	9b04      	ldr	r3, [sp, #16]
 8019d98:	9801      	ldr	r0, [sp, #4]
 8019d9a:	4621      	mov	r1, r4
 8019d9c:	f103 3bff 	add.w	fp, r3, #4294967295
 8019da0:	f7ff fafc 	bl	801939c <quorem>
 8019da4:	4641      	mov	r1, r8
 8019da6:	9002      	str	r0, [sp, #8]
 8019da8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019dac:	9801      	ldr	r0, [sp, #4]
 8019dae:	f000 fb99 	bl	801a4e4 <__mcmp>
 8019db2:	462a      	mov	r2, r5
 8019db4:	9006      	str	r0, [sp, #24]
 8019db6:	4621      	mov	r1, r4
 8019db8:	4648      	mov	r0, r9
 8019dba:	f000 fbaf 	bl	801a51c <__mdiff>
 8019dbe:	68c2      	ldr	r2, [r0, #12]
 8019dc0:	4606      	mov	r6, r0
 8019dc2:	b9fa      	cbnz	r2, 8019e04 <_dtoa_r+0x954>
 8019dc4:	4601      	mov	r1, r0
 8019dc6:	9801      	ldr	r0, [sp, #4]
 8019dc8:	f000 fb8c 	bl	801a4e4 <__mcmp>
 8019dcc:	4602      	mov	r2, r0
 8019dce:	4631      	mov	r1, r6
 8019dd0:	4648      	mov	r0, r9
 8019dd2:	920a      	str	r2, [sp, #40]	@ 0x28
 8019dd4:	f000 f954 	bl	801a080 <_Bfree>
 8019dd8:	9b07      	ldr	r3, [sp, #28]
 8019dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019ddc:	9e04      	ldr	r6, [sp, #16]
 8019dde:	ea42 0103 	orr.w	r1, r2, r3
 8019de2:	9b08      	ldr	r3, [sp, #32]
 8019de4:	4319      	orrs	r1, r3
 8019de6:	d10f      	bne.n	8019e08 <_dtoa_r+0x958>
 8019de8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019dec:	d028      	beq.n	8019e40 <_dtoa_r+0x990>
 8019dee:	9b06      	ldr	r3, [sp, #24]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	dd02      	ble.n	8019dfa <_dtoa_r+0x94a>
 8019df4:	9b02      	ldr	r3, [sp, #8]
 8019df6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8019dfa:	f88b a000 	strb.w	sl, [fp]
 8019dfe:	e55e      	b.n	80198be <_dtoa_r+0x40e>
 8019e00:	4628      	mov	r0, r5
 8019e02:	e7bd      	b.n	8019d80 <_dtoa_r+0x8d0>
 8019e04:	2201      	movs	r2, #1
 8019e06:	e7e2      	b.n	8019dce <_dtoa_r+0x91e>
 8019e08:	9b06      	ldr	r3, [sp, #24]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	db04      	blt.n	8019e18 <_dtoa_r+0x968>
 8019e0e:	9907      	ldr	r1, [sp, #28]
 8019e10:	430b      	orrs	r3, r1
 8019e12:	9908      	ldr	r1, [sp, #32]
 8019e14:	430b      	orrs	r3, r1
 8019e16:	d120      	bne.n	8019e5a <_dtoa_r+0x9aa>
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	ddee      	ble.n	8019dfa <_dtoa_r+0x94a>
 8019e1c:	9901      	ldr	r1, [sp, #4]
 8019e1e:	2201      	movs	r2, #1
 8019e20:	4648      	mov	r0, r9
 8019e22:	f000 faf3 	bl	801a40c <__lshift>
 8019e26:	4621      	mov	r1, r4
 8019e28:	9001      	str	r0, [sp, #4]
 8019e2a:	f000 fb5b 	bl	801a4e4 <__mcmp>
 8019e2e:	2800      	cmp	r0, #0
 8019e30:	dc03      	bgt.n	8019e3a <_dtoa_r+0x98a>
 8019e32:	d1e2      	bne.n	8019dfa <_dtoa_r+0x94a>
 8019e34:	f01a 0f01 	tst.w	sl, #1
 8019e38:	d0df      	beq.n	8019dfa <_dtoa_r+0x94a>
 8019e3a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e3e:	d1d9      	bne.n	8019df4 <_dtoa_r+0x944>
 8019e40:	2339      	movs	r3, #57	@ 0x39
 8019e42:	f88b 3000 	strb.w	r3, [fp]
 8019e46:	4633      	mov	r3, r6
 8019e48:	461e      	mov	r6, r3
 8019e4a:	3b01      	subs	r3, #1
 8019e4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019e50:	2a39      	cmp	r2, #57	@ 0x39
 8019e52:	d052      	beq.n	8019efa <_dtoa_r+0xa4a>
 8019e54:	3201      	adds	r2, #1
 8019e56:	701a      	strb	r2, [r3, #0]
 8019e58:	e531      	b.n	80198be <_dtoa_r+0x40e>
 8019e5a:	2a00      	cmp	r2, #0
 8019e5c:	dd07      	ble.n	8019e6e <_dtoa_r+0x9be>
 8019e5e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8019e62:	d0ed      	beq.n	8019e40 <_dtoa_r+0x990>
 8019e64:	f10a 0301 	add.w	r3, sl, #1
 8019e68:	f88b 3000 	strb.w	r3, [fp]
 8019e6c:	e527      	b.n	80198be <_dtoa_r+0x40e>
 8019e6e:	9b04      	ldr	r3, [sp, #16]
 8019e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e72:	f803 ac01 	strb.w	sl, [r3, #-1]
 8019e76:	4293      	cmp	r3, r2
 8019e78:	d029      	beq.n	8019ece <_dtoa_r+0xa1e>
 8019e7a:	9901      	ldr	r1, [sp, #4]
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	220a      	movs	r2, #10
 8019e80:	4648      	mov	r0, r9
 8019e82:	f000 f91f 	bl	801a0c4 <__multadd>
 8019e86:	45a8      	cmp	r8, r5
 8019e88:	9001      	str	r0, [sp, #4]
 8019e8a:	f04f 0300 	mov.w	r3, #0
 8019e8e:	f04f 020a 	mov.w	r2, #10
 8019e92:	4641      	mov	r1, r8
 8019e94:	4648      	mov	r0, r9
 8019e96:	d107      	bne.n	8019ea8 <_dtoa_r+0x9f8>
 8019e98:	f000 f914 	bl	801a0c4 <__multadd>
 8019e9c:	4680      	mov	r8, r0
 8019e9e:	4605      	mov	r5, r0
 8019ea0:	9b04      	ldr	r3, [sp, #16]
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	9304      	str	r3, [sp, #16]
 8019ea6:	e776      	b.n	8019d96 <_dtoa_r+0x8e6>
 8019ea8:	f000 f90c 	bl	801a0c4 <__multadd>
 8019eac:	4629      	mov	r1, r5
 8019eae:	4680      	mov	r8, r0
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	220a      	movs	r2, #10
 8019eb4:	4648      	mov	r0, r9
 8019eb6:	f000 f905 	bl	801a0c4 <__multadd>
 8019eba:	4605      	mov	r5, r0
 8019ebc:	e7f0      	b.n	8019ea0 <_dtoa_r+0x9f0>
 8019ebe:	f1bb 0f00 	cmp.w	fp, #0
 8019ec2:	bfcc      	ite	gt
 8019ec4:	465e      	movgt	r6, fp
 8019ec6:	2601      	movle	r6, #1
 8019ec8:	443e      	add	r6, r7
 8019eca:	f04f 0800 	mov.w	r8, #0
 8019ece:	9901      	ldr	r1, [sp, #4]
 8019ed0:	2201      	movs	r2, #1
 8019ed2:	4648      	mov	r0, r9
 8019ed4:	f000 fa9a 	bl	801a40c <__lshift>
 8019ed8:	4621      	mov	r1, r4
 8019eda:	9001      	str	r0, [sp, #4]
 8019edc:	f000 fb02 	bl	801a4e4 <__mcmp>
 8019ee0:	2800      	cmp	r0, #0
 8019ee2:	dcb0      	bgt.n	8019e46 <_dtoa_r+0x996>
 8019ee4:	d102      	bne.n	8019eec <_dtoa_r+0xa3c>
 8019ee6:	f01a 0f01 	tst.w	sl, #1
 8019eea:	d1ac      	bne.n	8019e46 <_dtoa_r+0x996>
 8019eec:	4633      	mov	r3, r6
 8019eee:	461e      	mov	r6, r3
 8019ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019ef4:	2a30      	cmp	r2, #48	@ 0x30
 8019ef6:	d0fa      	beq.n	8019eee <_dtoa_r+0xa3e>
 8019ef8:	e4e1      	b.n	80198be <_dtoa_r+0x40e>
 8019efa:	429f      	cmp	r7, r3
 8019efc:	d1a4      	bne.n	8019e48 <_dtoa_r+0x998>
 8019efe:	9b05      	ldr	r3, [sp, #20]
 8019f00:	3301      	adds	r3, #1
 8019f02:	9305      	str	r3, [sp, #20]
 8019f04:	2331      	movs	r3, #49	@ 0x31
 8019f06:	703b      	strb	r3, [r7, #0]
 8019f08:	e4d9      	b.n	80198be <_dtoa_r+0x40e>
 8019f0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019f0c:	4f16      	ldr	r7, [pc, #88]	@ (8019f68 <_dtoa_r+0xab8>)
 8019f0e:	b11b      	cbz	r3, 8019f18 <_dtoa_r+0xa68>
 8019f10:	f107 0308 	add.w	r3, r7, #8
 8019f14:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019f16:	6013      	str	r3, [r2, #0]
 8019f18:	4638      	mov	r0, r7
 8019f1a:	b011      	add	sp, #68	@ 0x44
 8019f1c:	ecbd 8b02 	vpop	{d8}
 8019f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f24:	9b07      	ldr	r3, [sp, #28]
 8019f26:	2b01      	cmp	r3, #1
 8019f28:	f77f ae2c 	ble.w	8019b84 <_dtoa_r+0x6d4>
 8019f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019f30:	2001      	movs	r0, #1
 8019f32:	e64c      	b.n	8019bce <_dtoa_r+0x71e>
 8019f34:	f1bb 0f00 	cmp.w	fp, #0
 8019f38:	f77f aed8 	ble.w	8019cec <_dtoa_r+0x83c>
 8019f3c:	463e      	mov	r6, r7
 8019f3e:	9801      	ldr	r0, [sp, #4]
 8019f40:	4621      	mov	r1, r4
 8019f42:	f7ff fa2b 	bl	801939c <quorem>
 8019f46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8019f4a:	f806 ab01 	strb.w	sl, [r6], #1
 8019f4e:	1bf2      	subs	r2, r6, r7
 8019f50:	4593      	cmp	fp, r2
 8019f52:	ddb4      	ble.n	8019ebe <_dtoa_r+0xa0e>
 8019f54:	9901      	ldr	r1, [sp, #4]
 8019f56:	2300      	movs	r3, #0
 8019f58:	220a      	movs	r2, #10
 8019f5a:	4648      	mov	r0, r9
 8019f5c:	f000 f8b2 	bl	801a0c4 <__multadd>
 8019f60:	9001      	str	r0, [sp, #4]
 8019f62:	e7ec      	b.n	8019f3e <_dtoa_r+0xa8e>
 8019f64:	0801b7e4 	.word	0x0801b7e4
 8019f68:	0801b77f 	.word	0x0801b77f

08019f6c <_free_r>:
 8019f6c:	b538      	push	{r3, r4, r5, lr}
 8019f6e:	4605      	mov	r5, r0
 8019f70:	2900      	cmp	r1, #0
 8019f72:	d041      	beq.n	8019ff8 <_free_r+0x8c>
 8019f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f78:	1f0c      	subs	r4, r1, #4
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	bfb8      	it	lt
 8019f7e:	18e4      	addlt	r4, r4, r3
 8019f80:	f7fe fba8 	bl	80186d4 <__malloc_lock>
 8019f84:	4a1d      	ldr	r2, [pc, #116]	@ (8019ffc <_free_r+0x90>)
 8019f86:	6813      	ldr	r3, [r2, #0]
 8019f88:	b933      	cbnz	r3, 8019f98 <_free_r+0x2c>
 8019f8a:	6063      	str	r3, [r4, #4]
 8019f8c:	6014      	str	r4, [r2, #0]
 8019f8e:	4628      	mov	r0, r5
 8019f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f94:	f7fe bba4 	b.w	80186e0 <__malloc_unlock>
 8019f98:	42a3      	cmp	r3, r4
 8019f9a:	d908      	bls.n	8019fae <_free_r+0x42>
 8019f9c:	6820      	ldr	r0, [r4, #0]
 8019f9e:	1821      	adds	r1, r4, r0
 8019fa0:	428b      	cmp	r3, r1
 8019fa2:	bf01      	itttt	eq
 8019fa4:	6819      	ldreq	r1, [r3, #0]
 8019fa6:	685b      	ldreq	r3, [r3, #4]
 8019fa8:	1809      	addeq	r1, r1, r0
 8019faa:	6021      	streq	r1, [r4, #0]
 8019fac:	e7ed      	b.n	8019f8a <_free_r+0x1e>
 8019fae:	461a      	mov	r2, r3
 8019fb0:	685b      	ldr	r3, [r3, #4]
 8019fb2:	b10b      	cbz	r3, 8019fb8 <_free_r+0x4c>
 8019fb4:	42a3      	cmp	r3, r4
 8019fb6:	d9fa      	bls.n	8019fae <_free_r+0x42>
 8019fb8:	6811      	ldr	r1, [r2, #0]
 8019fba:	1850      	adds	r0, r2, r1
 8019fbc:	42a0      	cmp	r0, r4
 8019fbe:	d10b      	bne.n	8019fd8 <_free_r+0x6c>
 8019fc0:	6820      	ldr	r0, [r4, #0]
 8019fc2:	4401      	add	r1, r0
 8019fc4:	1850      	adds	r0, r2, r1
 8019fc6:	4283      	cmp	r3, r0
 8019fc8:	6011      	str	r1, [r2, #0]
 8019fca:	d1e0      	bne.n	8019f8e <_free_r+0x22>
 8019fcc:	6818      	ldr	r0, [r3, #0]
 8019fce:	685b      	ldr	r3, [r3, #4]
 8019fd0:	6053      	str	r3, [r2, #4]
 8019fd2:	4408      	add	r0, r1
 8019fd4:	6010      	str	r0, [r2, #0]
 8019fd6:	e7da      	b.n	8019f8e <_free_r+0x22>
 8019fd8:	d902      	bls.n	8019fe0 <_free_r+0x74>
 8019fda:	230c      	movs	r3, #12
 8019fdc:	602b      	str	r3, [r5, #0]
 8019fde:	e7d6      	b.n	8019f8e <_free_r+0x22>
 8019fe0:	6820      	ldr	r0, [r4, #0]
 8019fe2:	1821      	adds	r1, r4, r0
 8019fe4:	428b      	cmp	r3, r1
 8019fe6:	bf04      	itt	eq
 8019fe8:	6819      	ldreq	r1, [r3, #0]
 8019fea:	685b      	ldreq	r3, [r3, #4]
 8019fec:	6063      	str	r3, [r4, #4]
 8019fee:	bf04      	itt	eq
 8019ff0:	1809      	addeq	r1, r1, r0
 8019ff2:	6021      	streq	r1, [r4, #0]
 8019ff4:	6054      	str	r4, [r2, #4]
 8019ff6:	e7ca      	b.n	8019f8e <_free_r+0x22>
 8019ff8:	bd38      	pop	{r3, r4, r5, pc}
 8019ffa:	bf00      	nop
 8019ffc:	24027954 	.word	0x24027954

0801a000 <_Balloc>:
 801a000:	b570      	push	{r4, r5, r6, lr}
 801a002:	69c6      	ldr	r6, [r0, #28]
 801a004:	4604      	mov	r4, r0
 801a006:	460d      	mov	r5, r1
 801a008:	b976      	cbnz	r6, 801a028 <_Balloc+0x28>
 801a00a:	2010      	movs	r0, #16
 801a00c:	f7fe fab8 	bl	8018580 <malloc>
 801a010:	4602      	mov	r2, r0
 801a012:	61e0      	str	r0, [r4, #28]
 801a014:	b920      	cbnz	r0, 801a020 <_Balloc+0x20>
 801a016:	4b18      	ldr	r3, [pc, #96]	@ (801a078 <_Balloc+0x78>)
 801a018:	4818      	ldr	r0, [pc, #96]	@ (801a07c <_Balloc+0x7c>)
 801a01a:	216b      	movs	r1, #107	@ 0x6b
 801a01c:	f7ff f9a0 	bl	8019360 <__assert_func>
 801a020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a024:	6006      	str	r6, [r0, #0]
 801a026:	60c6      	str	r6, [r0, #12]
 801a028:	69e6      	ldr	r6, [r4, #28]
 801a02a:	68f3      	ldr	r3, [r6, #12]
 801a02c:	b183      	cbz	r3, 801a050 <_Balloc+0x50>
 801a02e:	69e3      	ldr	r3, [r4, #28]
 801a030:	68db      	ldr	r3, [r3, #12]
 801a032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a036:	b9b8      	cbnz	r0, 801a068 <_Balloc+0x68>
 801a038:	2101      	movs	r1, #1
 801a03a:	fa01 f605 	lsl.w	r6, r1, r5
 801a03e:	1d72      	adds	r2, r6, #5
 801a040:	0092      	lsls	r2, r2, #2
 801a042:	4620      	mov	r0, r4
 801a044:	f000 fd8d 	bl	801ab62 <_calloc_r>
 801a048:	b160      	cbz	r0, 801a064 <_Balloc+0x64>
 801a04a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a04e:	e00e      	b.n	801a06e <_Balloc+0x6e>
 801a050:	2221      	movs	r2, #33	@ 0x21
 801a052:	2104      	movs	r1, #4
 801a054:	4620      	mov	r0, r4
 801a056:	f000 fd84 	bl	801ab62 <_calloc_r>
 801a05a:	69e3      	ldr	r3, [r4, #28]
 801a05c:	60f0      	str	r0, [r6, #12]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d1e4      	bne.n	801a02e <_Balloc+0x2e>
 801a064:	2000      	movs	r0, #0
 801a066:	bd70      	pop	{r4, r5, r6, pc}
 801a068:	6802      	ldr	r2, [r0, #0]
 801a06a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a06e:	2300      	movs	r3, #0
 801a070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a074:	e7f7      	b.n	801a066 <_Balloc+0x66>
 801a076:	bf00      	nop
 801a078:	0801b6a0 	.word	0x0801b6a0
 801a07c:	0801b7f5 	.word	0x0801b7f5

0801a080 <_Bfree>:
 801a080:	b570      	push	{r4, r5, r6, lr}
 801a082:	69c6      	ldr	r6, [r0, #28]
 801a084:	4605      	mov	r5, r0
 801a086:	460c      	mov	r4, r1
 801a088:	b976      	cbnz	r6, 801a0a8 <_Bfree+0x28>
 801a08a:	2010      	movs	r0, #16
 801a08c:	f7fe fa78 	bl	8018580 <malloc>
 801a090:	4602      	mov	r2, r0
 801a092:	61e8      	str	r0, [r5, #28]
 801a094:	b920      	cbnz	r0, 801a0a0 <_Bfree+0x20>
 801a096:	4b09      	ldr	r3, [pc, #36]	@ (801a0bc <_Bfree+0x3c>)
 801a098:	4809      	ldr	r0, [pc, #36]	@ (801a0c0 <_Bfree+0x40>)
 801a09a:	218f      	movs	r1, #143	@ 0x8f
 801a09c:	f7ff f960 	bl	8019360 <__assert_func>
 801a0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a0a4:	6006      	str	r6, [r0, #0]
 801a0a6:	60c6      	str	r6, [r0, #12]
 801a0a8:	b13c      	cbz	r4, 801a0ba <_Bfree+0x3a>
 801a0aa:	69eb      	ldr	r3, [r5, #28]
 801a0ac:	6862      	ldr	r2, [r4, #4]
 801a0ae:	68db      	ldr	r3, [r3, #12]
 801a0b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0b4:	6021      	str	r1, [r4, #0]
 801a0b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a0ba:	bd70      	pop	{r4, r5, r6, pc}
 801a0bc:	0801b6a0 	.word	0x0801b6a0
 801a0c0:	0801b7f5 	.word	0x0801b7f5

0801a0c4 <__multadd>:
 801a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0c8:	690d      	ldr	r5, [r1, #16]
 801a0ca:	4607      	mov	r7, r0
 801a0cc:	460c      	mov	r4, r1
 801a0ce:	461e      	mov	r6, r3
 801a0d0:	f101 0c14 	add.w	ip, r1, #20
 801a0d4:	2000      	movs	r0, #0
 801a0d6:	f8dc 3000 	ldr.w	r3, [ip]
 801a0da:	b299      	uxth	r1, r3
 801a0dc:	fb02 6101 	mla	r1, r2, r1, r6
 801a0e0:	0c1e      	lsrs	r6, r3, #16
 801a0e2:	0c0b      	lsrs	r3, r1, #16
 801a0e4:	fb02 3306 	mla	r3, r2, r6, r3
 801a0e8:	b289      	uxth	r1, r1
 801a0ea:	3001      	adds	r0, #1
 801a0ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801a0f0:	4285      	cmp	r5, r0
 801a0f2:	f84c 1b04 	str.w	r1, [ip], #4
 801a0f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801a0fa:	dcec      	bgt.n	801a0d6 <__multadd+0x12>
 801a0fc:	b30e      	cbz	r6, 801a142 <__multadd+0x7e>
 801a0fe:	68a3      	ldr	r3, [r4, #8]
 801a100:	42ab      	cmp	r3, r5
 801a102:	dc19      	bgt.n	801a138 <__multadd+0x74>
 801a104:	6861      	ldr	r1, [r4, #4]
 801a106:	4638      	mov	r0, r7
 801a108:	3101      	adds	r1, #1
 801a10a:	f7ff ff79 	bl	801a000 <_Balloc>
 801a10e:	4680      	mov	r8, r0
 801a110:	b928      	cbnz	r0, 801a11e <__multadd+0x5a>
 801a112:	4602      	mov	r2, r0
 801a114:	4b0c      	ldr	r3, [pc, #48]	@ (801a148 <__multadd+0x84>)
 801a116:	480d      	ldr	r0, [pc, #52]	@ (801a14c <__multadd+0x88>)
 801a118:	21ba      	movs	r1, #186	@ 0xba
 801a11a:	f7ff f921 	bl	8019360 <__assert_func>
 801a11e:	6922      	ldr	r2, [r4, #16]
 801a120:	3202      	adds	r2, #2
 801a122:	f104 010c 	add.w	r1, r4, #12
 801a126:	0092      	lsls	r2, r2, #2
 801a128:	300c      	adds	r0, #12
 801a12a:	f7ff f90a 	bl	8019342 <memcpy>
 801a12e:	4621      	mov	r1, r4
 801a130:	4638      	mov	r0, r7
 801a132:	f7ff ffa5 	bl	801a080 <_Bfree>
 801a136:	4644      	mov	r4, r8
 801a138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a13c:	3501      	adds	r5, #1
 801a13e:	615e      	str	r6, [r3, #20]
 801a140:	6125      	str	r5, [r4, #16]
 801a142:	4620      	mov	r0, r4
 801a144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a148:	0801b7e4 	.word	0x0801b7e4
 801a14c:	0801b7f5 	.word	0x0801b7f5

0801a150 <__hi0bits>:
 801a150:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801a154:	4603      	mov	r3, r0
 801a156:	bf36      	itet	cc
 801a158:	0403      	lslcc	r3, r0, #16
 801a15a:	2000      	movcs	r0, #0
 801a15c:	2010      	movcc	r0, #16
 801a15e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a162:	bf3c      	itt	cc
 801a164:	021b      	lslcc	r3, r3, #8
 801a166:	3008      	addcc	r0, #8
 801a168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a16c:	bf3c      	itt	cc
 801a16e:	011b      	lslcc	r3, r3, #4
 801a170:	3004      	addcc	r0, #4
 801a172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a176:	bf3c      	itt	cc
 801a178:	009b      	lslcc	r3, r3, #2
 801a17a:	3002      	addcc	r0, #2
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	db05      	blt.n	801a18c <__hi0bits+0x3c>
 801a180:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801a184:	f100 0001 	add.w	r0, r0, #1
 801a188:	bf08      	it	eq
 801a18a:	2020      	moveq	r0, #32
 801a18c:	4770      	bx	lr

0801a18e <__lo0bits>:
 801a18e:	6803      	ldr	r3, [r0, #0]
 801a190:	4602      	mov	r2, r0
 801a192:	f013 0007 	ands.w	r0, r3, #7
 801a196:	d00b      	beq.n	801a1b0 <__lo0bits+0x22>
 801a198:	07d9      	lsls	r1, r3, #31
 801a19a:	d421      	bmi.n	801a1e0 <__lo0bits+0x52>
 801a19c:	0798      	lsls	r0, r3, #30
 801a19e:	bf49      	itett	mi
 801a1a0:	085b      	lsrmi	r3, r3, #1
 801a1a2:	089b      	lsrpl	r3, r3, #2
 801a1a4:	2001      	movmi	r0, #1
 801a1a6:	6013      	strmi	r3, [r2, #0]
 801a1a8:	bf5c      	itt	pl
 801a1aa:	6013      	strpl	r3, [r2, #0]
 801a1ac:	2002      	movpl	r0, #2
 801a1ae:	4770      	bx	lr
 801a1b0:	b299      	uxth	r1, r3
 801a1b2:	b909      	cbnz	r1, 801a1b8 <__lo0bits+0x2a>
 801a1b4:	0c1b      	lsrs	r3, r3, #16
 801a1b6:	2010      	movs	r0, #16
 801a1b8:	b2d9      	uxtb	r1, r3
 801a1ba:	b909      	cbnz	r1, 801a1c0 <__lo0bits+0x32>
 801a1bc:	3008      	adds	r0, #8
 801a1be:	0a1b      	lsrs	r3, r3, #8
 801a1c0:	0719      	lsls	r1, r3, #28
 801a1c2:	bf04      	itt	eq
 801a1c4:	091b      	lsreq	r3, r3, #4
 801a1c6:	3004      	addeq	r0, #4
 801a1c8:	0799      	lsls	r1, r3, #30
 801a1ca:	bf04      	itt	eq
 801a1cc:	089b      	lsreq	r3, r3, #2
 801a1ce:	3002      	addeq	r0, #2
 801a1d0:	07d9      	lsls	r1, r3, #31
 801a1d2:	d403      	bmi.n	801a1dc <__lo0bits+0x4e>
 801a1d4:	085b      	lsrs	r3, r3, #1
 801a1d6:	f100 0001 	add.w	r0, r0, #1
 801a1da:	d003      	beq.n	801a1e4 <__lo0bits+0x56>
 801a1dc:	6013      	str	r3, [r2, #0]
 801a1de:	4770      	bx	lr
 801a1e0:	2000      	movs	r0, #0
 801a1e2:	4770      	bx	lr
 801a1e4:	2020      	movs	r0, #32
 801a1e6:	4770      	bx	lr

0801a1e8 <__i2b>:
 801a1e8:	b510      	push	{r4, lr}
 801a1ea:	460c      	mov	r4, r1
 801a1ec:	2101      	movs	r1, #1
 801a1ee:	f7ff ff07 	bl	801a000 <_Balloc>
 801a1f2:	4602      	mov	r2, r0
 801a1f4:	b928      	cbnz	r0, 801a202 <__i2b+0x1a>
 801a1f6:	4b05      	ldr	r3, [pc, #20]	@ (801a20c <__i2b+0x24>)
 801a1f8:	4805      	ldr	r0, [pc, #20]	@ (801a210 <__i2b+0x28>)
 801a1fa:	f240 1145 	movw	r1, #325	@ 0x145
 801a1fe:	f7ff f8af 	bl	8019360 <__assert_func>
 801a202:	2301      	movs	r3, #1
 801a204:	6144      	str	r4, [r0, #20]
 801a206:	6103      	str	r3, [r0, #16]
 801a208:	bd10      	pop	{r4, pc}
 801a20a:	bf00      	nop
 801a20c:	0801b7e4 	.word	0x0801b7e4
 801a210:	0801b7f5 	.word	0x0801b7f5

0801a214 <__multiply>:
 801a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a218:	4617      	mov	r7, r2
 801a21a:	690a      	ldr	r2, [r1, #16]
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	429a      	cmp	r2, r3
 801a220:	bfa8      	it	ge
 801a222:	463b      	movge	r3, r7
 801a224:	4689      	mov	r9, r1
 801a226:	bfa4      	itt	ge
 801a228:	460f      	movge	r7, r1
 801a22a:	4699      	movge	r9, r3
 801a22c:	693d      	ldr	r5, [r7, #16]
 801a22e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	6879      	ldr	r1, [r7, #4]
 801a236:	eb05 060a 	add.w	r6, r5, sl
 801a23a:	42b3      	cmp	r3, r6
 801a23c:	b085      	sub	sp, #20
 801a23e:	bfb8      	it	lt
 801a240:	3101      	addlt	r1, #1
 801a242:	f7ff fedd 	bl	801a000 <_Balloc>
 801a246:	b930      	cbnz	r0, 801a256 <__multiply+0x42>
 801a248:	4602      	mov	r2, r0
 801a24a:	4b41      	ldr	r3, [pc, #260]	@ (801a350 <__multiply+0x13c>)
 801a24c:	4841      	ldr	r0, [pc, #260]	@ (801a354 <__multiply+0x140>)
 801a24e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801a252:	f7ff f885 	bl	8019360 <__assert_func>
 801a256:	f100 0414 	add.w	r4, r0, #20
 801a25a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801a25e:	4623      	mov	r3, r4
 801a260:	2200      	movs	r2, #0
 801a262:	4573      	cmp	r3, lr
 801a264:	d320      	bcc.n	801a2a8 <__multiply+0x94>
 801a266:	f107 0814 	add.w	r8, r7, #20
 801a26a:	f109 0114 	add.w	r1, r9, #20
 801a26e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801a272:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801a276:	9302      	str	r3, [sp, #8]
 801a278:	1beb      	subs	r3, r5, r7
 801a27a:	3b15      	subs	r3, #21
 801a27c:	f023 0303 	bic.w	r3, r3, #3
 801a280:	3304      	adds	r3, #4
 801a282:	3715      	adds	r7, #21
 801a284:	42bd      	cmp	r5, r7
 801a286:	bf38      	it	cc
 801a288:	2304      	movcc	r3, #4
 801a28a:	9301      	str	r3, [sp, #4]
 801a28c:	9b02      	ldr	r3, [sp, #8]
 801a28e:	9103      	str	r1, [sp, #12]
 801a290:	428b      	cmp	r3, r1
 801a292:	d80c      	bhi.n	801a2ae <__multiply+0x9a>
 801a294:	2e00      	cmp	r6, #0
 801a296:	dd03      	ble.n	801a2a0 <__multiply+0x8c>
 801a298:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d055      	beq.n	801a34c <__multiply+0x138>
 801a2a0:	6106      	str	r6, [r0, #16]
 801a2a2:	b005      	add	sp, #20
 801a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2a8:	f843 2b04 	str.w	r2, [r3], #4
 801a2ac:	e7d9      	b.n	801a262 <__multiply+0x4e>
 801a2ae:	f8b1 a000 	ldrh.w	sl, [r1]
 801a2b2:	f1ba 0f00 	cmp.w	sl, #0
 801a2b6:	d01f      	beq.n	801a2f8 <__multiply+0xe4>
 801a2b8:	46c4      	mov	ip, r8
 801a2ba:	46a1      	mov	r9, r4
 801a2bc:	2700      	movs	r7, #0
 801a2be:	f85c 2b04 	ldr.w	r2, [ip], #4
 801a2c2:	f8d9 3000 	ldr.w	r3, [r9]
 801a2c6:	fa1f fb82 	uxth.w	fp, r2
 801a2ca:	b29b      	uxth	r3, r3
 801a2cc:	fb0a 330b 	mla	r3, sl, fp, r3
 801a2d0:	443b      	add	r3, r7
 801a2d2:	f8d9 7000 	ldr.w	r7, [r9]
 801a2d6:	0c12      	lsrs	r2, r2, #16
 801a2d8:	0c3f      	lsrs	r7, r7, #16
 801a2da:	fb0a 7202 	mla	r2, sl, r2, r7
 801a2de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2e8:	4565      	cmp	r5, ip
 801a2ea:	f849 3b04 	str.w	r3, [r9], #4
 801a2ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801a2f2:	d8e4      	bhi.n	801a2be <__multiply+0xaa>
 801a2f4:	9b01      	ldr	r3, [sp, #4]
 801a2f6:	50e7      	str	r7, [r4, r3]
 801a2f8:	9b03      	ldr	r3, [sp, #12]
 801a2fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801a2fe:	3104      	adds	r1, #4
 801a300:	f1b9 0f00 	cmp.w	r9, #0
 801a304:	d020      	beq.n	801a348 <__multiply+0x134>
 801a306:	6823      	ldr	r3, [r4, #0]
 801a308:	4647      	mov	r7, r8
 801a30a:	46a4      	mov	ip, r4
 801a30c:	f04f 0a00 	mov.w	sl, #0
 801a310:	f8b7 b000 	ldrh.w	fp, [r7]
 801a314:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801a318:	fb09 220b 	mla	r2, r9, fp, r2
 801a31c:	4452      	add	r2, sl
 801a31e:	b29b      	uxth	r3, r3
 801a320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a324:	f84c 3b04 	str.w	r3, [ip], #4
 801a328:	f857 3b04 	ldr.w	r3, [r7], #4
 801a32c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a330:	f8bc 3000 	ldrh.w	r3, [ip]
 801a334:	fb09 330a 	mla	r3, r9, sl, r3
 801a338:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801a33c:	42bd      	cmp	r5, r7
 801a33e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a342:	d8e5      	bhi.n	801a310 <__multiply+0xfc>
 801a344:	9a01      	ldr	r2, [sp, #4]
 801a346:	50a3      	str	r3, [r4, r2]
 801a348:	3404      	adds	r4, #4
 801a34a:	e79f      	b.n	801a28c <__multiply+0x78>
 801a34c:	3e01      	subs	r6, #1
 801a34e:	e7a1      	b.n	801a294 <__multiply+0x80>
 801a350:	0801b7e4 	.word	0x0801b7e4
 801a354:	0801b7f5 	.word	0x0801b7f5

0801a358 <__pow5mult>:
 801a358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a35c:	4615      	mov	r5, r2
 801a35e:	f012 0203 	ands.w	r2, r2, #3
 801a362:	4607      	mov	r7, r0
 801a364:	460e      	mov	r6, r1
 801a366:	d007      	beq.n	801a378 <__pow5mult+0x20>
 801a368:	4c25      	ldr	r4, [pc, #148]	@ (801a400 <__pow5mult+0xa8>)
 801a36a:	3a01      	subs	r2, #1
 801a36c:	2300      	movs	r3, #0
 801a36e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a372:	f7ff fea7 	bl	801a0c4 <__multadd>
 801a376:	4606      	mov	r6, r0
 801a378:	10ad      	asrs	r5, r5, #2
 801a37a:	d03d      	beq.n	801a3f8 <__pow5mult+0xa0>
 801a37c:	69fc      	ldr	r4, [r7, #28]
 801a37e:	b97c      	cbnz	r4, 801a3a0 <__pow5mult+0x48>
 801a380:	2010      	movs	r0, #16
 801a382:	f7fe f8fd 	bl	8018580 <malloc>
 801a386:	4602      	mov	r2, r0
 801a388:	61f8      	str	r0, [r7, #28]
 801a38a:	b928      	cbnz	r0, 801a398 <__pow5mult+0x40>
 801a38c:	4b1d      	ldr	r3, [pc, #116]	@ (801a404 <__pow5mult+0xac>)
 801a38e:	481e      	ldr	r0, [pc, #120]	@ (801a408 <__pow5mult+0xb0>)
 801a390:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801a394:	f7fe ffe4 	bl	8019360 <__assert_func>
 801a398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a39c:	6004      	str	r4, [r0, #0]
 801a39e:	60c4      	str	r4, [r0, #12]
 801a3a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801a3a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a3a8:	b94c      	cbnz	r4, 801a3be <__pow5mult+0x66>
 801a3aa:	f240 2171 	movw	r1, #625	@ 0x271
 801a3ae:	4638      	mov	r0, r7
 801a3b0:	f7ff ff1a 	bl	801a1e8 <__i2b>
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	f8c8 0008 	str.w	r0, [r8, #8]
 801a3ba:	4604      	mov	r4, r0
 801a3bc:	6003      	str	r3, [r0, #0]
 801a3be:	f04f 0900 	mov.w	r9, #0
 801a3c2:	07eb      	lsls	r3, r5, #31
 801a3c4:	d50a      	bpl.n	801a3dc <__pow5mult+0x84>
 801a3c6:	4631      	mov	r1, r6
 801a3c8:	4622      	mov	r2, r4
 801a3ca:	4638      	mov	r0, r7
 801a3cc:	f7ff ff22 	bl	801a214 <__multiply>
 801a3d0:	4631      	mov	r1, r6
 801a3d2:	4680      	mov	r8, r0
 801a3d4:	4638      	mov	r0, r7
 801a3d6:	f7ff fe53 	bl	801a080 <_Bfree>
 801a3da:	4646      	mov	r6, r8
 801a3dc:	106d      	asrs	r5, r5, #1
 801a3de:	d00b      	beq.n	801a3f8 <__pow5mult+0xa0>
 801a3e0:	6820      	ldr	r0, [r4, #0]
 801a3e2:	b938      	cbnz	r0, 801a3f4 <__pow5mult+0x9c>
 801a3e4:	4622      	mov	r2, r4
 801a3e6:	4621      	mov	r1, r4
 801a3e8:	4638      	mov	r0, r7
 801a3ea:	f7ff ff13 	bl	801a214 <__multiply>
 801a3ee:	6020      	str	r0, [r4, #0]
 801a3f0:	f8c0 9000 	str.w	r9, [r0]
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	e7e4      	b.n	801a3c2 <__pow5mult+0x6a>
 801a3f8:	4630      	mov	r0, r6
 801a3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3fe:	bf00      	nop
 801a400:	0801b86c 	.word	0x0801b86c
 801a404:	0801b6a0 	.word	0x0801b6a0
 801a408:	0801b7f5 	.word	0x0801b7f5

0801a40c <__lshift>:
 801a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a410:	460c      	mov	r4, r1
 801a412:	6849      	ldr	r1, [r1, #4]
 801a414:	6923      	ldr	r3, [r4, #16]
 801a416:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a41a:	68a3      	ldr	r3, [r4, #8]
 801a41c:	4607      	mov	r7, r0
 801a41e:	4691      	mov	r9, r2
 801a420:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a424:	f108 0601 	add.w	r6, r8, #1
 801a428:	42b3      	cmp	r3, r6
 801a42a:	db0b      	blt.n	801a444 <__lshift+0x38>
 801a42c:	4638      	mov	r0, r7
 801a42e:	f7ff fde7 	bl	801a000 <_Balloc>
 801a432:	4605      	mov	r5, r0
 801a434:	b948      	cbnz	r0, 801a44a <__lshift+0x3e>
 801a436:	4602      	mov	r2, r0
 801a438:	4b28      	ldr	r3, [pc, #160]	@ (801a4dc <__lshift+0xd0>)
 801a43a:	4829      	ldr	r0, [pc, #164]	@ (801a4e0 <__lshift+0xd4>)
 801a43c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801a440:	f7fe ff8e 	bl	8019360 <__assert_func>
 801a444:	3101      	adds	r1, #1
 801a446:	005b      	lsls	r3, r3, #1
 801a448:	e7ee      	b.n	801a428 <__lshift+0x1c>
 801a44a:	2300      	movs	r3, #0
 801a44c:	f100 0114 	add.w	r1, r0, #20
 801a450:	f100 0210 	add.w	r2, r0, #16
 801a454:	4618      	mov	r0, r3
 801a456:	4553      	cmp	r3, sl
 801a458:	db33      	blt.n	801a4c2 <__lshift+0xb6>
 801a45a:	6920      	ldr	r0, [r4, #16]
 801a45c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a460:	f104 0314 	add.w	r3, r4, #20
 801a464:	f019 091f 	ands.w	r9, r9, #31
 801a468:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a46c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a470:	d02b      	beq.n	801a4ca <__lshift+0xbe>
 801a472:	f1c9 0e20 	rsb	lr, r9, #32
 801a476:	468a      	mov	sl, r1
 801a478:	2200      	movs	r2, #0
 801a47a:	6818      	ldr	r0, [r3, #0]
 801a47c:	fa00 f009 	lsl.w	r0, r0, r9
 801a480:	4310      	orrs	r0, r2
 801a482:	f84a 0b04 	str.w	r0, [sl], #4
 801a486:	f853 2b04 	ldr.w	r2, [r3], #4
 801a48a:	459c      	cmp	ip, r3
 801a48c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a490:	d8f3      	bhi.n	801a47a <__lshift+0x6e>
 801a492:	ebac 0304 	sub.w	r3, ip, r4
 801a496:	3b15      	subs	r3, #21
 801a498:	f023 0303 	bic.w	r3, r3, #3
 801a49c:	3304      	adds	r3, #4
 801a49e:	f104 0015 	add.w	r0, r4, #21
 801a4a2:	4560      	cmp	r0, ip
 801a4a4:	bf88      	it	hi
 801a4a6:	2304      	movhi	r3, #4
 801a4a8:	50ca      	str	r2, [r1, r3]
 801a4aa:	b10a      	cbz	r2, 801a4b0 <__lshift+0xa4>
 801a4ac:	f108 0602 	add.w	r6, r8, #2
 801a4b0:	3e01      	subs	r6, #1
 801a4b2:	4638      	mov	r0, r7
 801a4b4:	612e      	str	r6, [r5, #16]
 801a4b6:	4621      	mov	r1, r4
 801a4b8:	f7ff fde2 	bl	801a080 <_Bfree>
 801a4bc:	4628      	mov	r0, r5
 801a4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4c2:	f842 0f04 	str.w	r0, [r2, #4]!
 801a4c6:	3301      	adds	r3, #1
 801a4c8:	e7c5      	b.n	801a456 <__lshift+0x4a>
 801a4ca:	3904      	subs	r1, #4
 801a4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4d0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a4d4:	459c      	cmp	ip, r3
 801a4d6:	d8f9      	bhi.n	801a4cc <__lshift+0xc0>
 801a4d8:	e7ea      	b.n	801a4b0 <__lshift+0xa4>
 801a4da:	bf00      	nop
 801a4dc:	0801b7e4 	.word	0x0801b7e4
 801a4e0:	0801b7f5 	.word	0x0801b7f5

0801a4e4 <__mcmp>:
 801a4e4:	690a      	ldr	r2, [r1, #16]
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	6900      	ldr	r0, [r0, #16]
 801a4ea:	1a80      	subs	r0, r0, r2
 801a4ec:	b530      	push	{r4, r5, lr}
 801a4ee:	d10e      	bne.n	801a50e <__mcmp+0x2a>
 801a4f0:	3314      	adds	r3, #20
 801a4f2:	3114      	adds	r1, #20
 801a4f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801a4f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801a4fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a504:	4295      	cmp	r5, r2
 801a506:	d003      	beq.n	801a510 <__mcmp+0x2c>
 801a508:	d205      	bcs.n	801a516 <__mcmp+0x32>
 801a50a:	f04f 30ff 	mov.w	r0, #4294967295
 801a50e:	bd30      	pop	{r4, r5, pc}
 801a510:	42a3      	cmp	r3, r4
 801a512:	d3f3      	bcc.n	801a4fc <__mcmp+0x18>
 801a514:	e7fb      	b.n	801a50e <__mcmp+0x2a>
 801a516:	2001      	movs	r0, #1
 801a518:	e7f9      	b.n	801a50e <__mcmp+0x2a>
	...

0801a51c <__mdiff>:
 801a51c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a520:	4689      	mov	r9, r1
 801a522:	4606      	mov	r6, r0
 801a524:	4611      	mov	r1, r2
 801a526:	4648      	mov	r0, r9
 801a528:	4614      	mov	r4, r2
 801a52a:	f7ff ffdb 	bl	801a4e4 <__mcmp>
 801a52e:	1e05      	subs	r5, r0, #0
 801a530:	d112      	bne.n	801a558 <__mdiff+0x3c>
 801a532:	4629      	mov	r1, r5
 801a534:	4630      	mov	r0, r6
 801a536:	f7ff fd63 	bl	801a000 <_Balloc>
 801a53a:	4602      	mov	r2, r0
 801a53c:	b928      	cbnz	r0, 801a54a <__mdiff+0x2e>
 801a53e:	4b3f      	ldr	r3, [pc, #252]	@ (801a63c <__mdiff+0x120>)
 801a540:	f240 2137 	movw	r1, #567	@ 0x237
 801a544:	483e      	ldr	r0, [pc, #248]	@ (801a640 <__mdiff+0x124>)
 801a546:	f7fe ff0b 	bl	8019360 <__assert_func>
 801a54a:	2301      	movs	r3, #1
 801a54c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a550:	4610      	mov	r0, r2
 801a552:	b003      	add	sp, #12
 801a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a558:	bfbc      	itt	lt
 801a55a:	464b      	movlt	r3, r9
 801a55c:	46a1      	movlt	r9, r4
 801a55e:	4630      	mov	r0, r6
 801a560:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801a564:	bfba      	itte	lt
 801a566:	461c      	movlt	r4, r3
 801a568:	2501      	movlt	r5, #1
 801a56a:	2500      	movge	r5, #0
 801a56c:	f7ff fd48 	bl	801a000 <_Balloc>
 801a570:	4602      	mov	r2, r0
 801a572:	b918      	cbnz	r0, 801a57c <__mdiff+0x60>
 801a574:	4b31      	ldr	r3, [pc, #196]	@ (801a63c <__mdiff+0x120>)
 801a576:	f240 2145 	movw	r1, #581	@ 0x245
 801a57a:	e7e3      	b.n	801a544 <__mdiff+0x28>
 801a57c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801a580:	6926      	ldr	r6, [r4, #16]
 801a582:	60c5      	str	r5, [r0, #12]
 801a584:	f109 0310 	add.w	r3, r9, #16
 801a588:	f109 0514 	add.w	r5, r9, #20
 801a58c:	f104 0e14 	add.w	lr, r4, #20
 801a590:	f100 0b14 	add.w	fp, r0, #20
 801a594:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801a598:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801a59c:	9301      	str	r3, [sp, #4]
 801a59e:	46d9      	mov	r9, fp
 801a5a0:	f04f 0c00 	mov.w	ip, #0
 801a5a4:	9b01      	ldr	r3, [sp, #4]
 801a5a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801a5aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 801a5ae:	9301      	str	r3, [sp, #4]
 801a5b0:	fa1f f38a 	uxth.w	r3, sl
 801a5b4:	4619      	mov	r1, r3
 801a5b6:	b283      	uxth	r3, r0
 801a5b8:	1acb      	subs	r3, r1, r3
 801a5ba:	0c00      	lsrs	r0, r0, #16
 801a5bc:	4463      	add	r3, ip
 801a5be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801a5c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801a5cc:	4576      	cmp	r6, lr
 801a5ce:	f849 3b04 	str.w	r3, [r9], #4
 801a5d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a5d6:	d8e5      	bhi.n	801a5a4 <__mdiff+0x88>
 801a5d8:	1b33      	subs	r3, r6, r4
 801a5da:	3b15      	subs	r3, #21
 801a5dc:	f023 0303 	bic.w	r3, r3, #3
 801a5e0:	3415      	adds	r4, #21
 801a5e2:	3304      	adds	r3, #4
 801a5e4:	42a6      	cmp	r6, r4
 801a5e6:	bf38      	it	cc
 801a5e8:	2304      	movcc	r3, #4
 801a5ea:	441d      	add	r5, r3
 801a5ec:	445b      	add	r3, fp
 801a5ee:	461e      	mov	r6, r3
 801a5f0:	462c      	mov	r4, r5
 801a5f2:	4544      	cmp	r4, r8
 801a5f4:	d30e      	bcc.n	801a614 <__mdiff+0xf8>
 801a5f6:	f108 0103 	add.w	r1, r8, #3
 801a5fa:	1b49      	subs	r1, r1, r5
 801a5fc:	f021 0103 	bic.w	r1, r1, #3
 801a600:	3d03      	subs	r5, #3
 801a602:	45a8      	cmp	r8, r5
 801a604:	bf38      	it	cc
 801a606:	2100      	movcc	r1, #0
 801a608:	440b      	add	r3, r1
 801a60a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a60e:	b191      	cbz	r1, 801a636 <__mdiff+0x11a>
 801a610:	6117      	str	r7, [r2, #16]
 801a612:	e79d      	b.n	801a550 <__mdiff+0x34>
 801a614:	f854 1b04 	ldr.w	r1, [r4], #4
 801a618:	46e6      	mov	lr, ip
 801a61a:	0c08      	lsrs	r0, r1, #16
 801a61c:	fa1c fc81 	uxtah	ip, ip, r1
 801a620:	4471      	add	r1, lr
 801a622:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801a626:	b289      	uxth	r1, r1
 801a628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801a62c:	f846 1b04 	str.w	r1, [r6], #4
 801a630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801a634:	e7dd      	b.n	801a5f2 <__mdiff+0xd6>
 801a636:	3f01      	subs	r7, #1
 801a638:	e7e7      	b.n	801a60a <__mdiff+0xee>
 801a63a:	bf00      	nop
 801a63c:	0801b7e4 	.word	0x0801b7e4
 801a640:	0801b7f5 	.word	0x0801b7f5

0801a644 <__d2b>:
 801a644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a648:	460f      	mov	r7, r1
 801a64a:	2101      	movs	r1, #1
 801a64c:	ec59 8b10 	vmov	r8, r9, d0
 801a650:	4616      	mov	r6, r2
 801a652:	f7ff fcd5 	bl	801a000 <_Balloc>
 801a656:	4604      	mov	r4, r0
 801a658:	b930      	cbnz	r0, 801a668 <__d2b+0x24>
 801a65a:	4602      	mov	r2, r0
 801a65c:	4b23      	ldr	r3, [pc, #140]	@ (801a6ec <__d2b+0xa8>)
 801a65e:	4824      	ldr	r0, [pc, #144]	@ (801a6f0 <__d2b+0xac>)
 801a660:	f240 310f 	movw	r1, #783	@ 0x30f
 801a664:	f7fe fe7c 	bl	8019360 <__assert_func>
 801a668:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a66c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a670:	b10d      	cbz	r5, 801a676 <__d2b+0x32>
 801a672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a676:	9301      	str	r3, [sp, #4]
 801a678:	f1b8 0300 	subs.w	r3, r8, #0
 801a67c:	d023      	beq.n	801a6c6 <__d2b+0x82>
 801a67e:	4668      	mov	r0, sp
 801a680:	9300      	str	r3, [sp, #0]
 801a682:	f7ff fd84 	bl	801a18e <__lo0bits>
 801a686:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a68a:	b1d0      	cbz	r0, 801a6c2 <__d2b+0x7e>
 801a68c:	f1c0 0320 	rsb	r3, r0, #32
 801a690:	fa02 f303 	lsl.w	r3, r2, r3
 801a694:	430b      	orrs	r3, r1
 801a696:	40c2      	lsrs	r2, r0
 801a698:	6163      	str	r3, [r4, #20]
 801a69a:	9201      	str	r2, [sp, #4]
 801a69c:	9b01      	ldr	r3, [sp, #4]
 801a69e:	61a3      	str	r3, [r4, #24]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	bf0c      	ite	eq
 801a6a4:	2201      	moveq	r2, #1
 801a6a6:	2202      	movne	r2, #2
 801a6a8:	6122      	str	r2, [r4, #16]
 801a6aa:	b1a5      	cbz	r5, 801a6d6 <__d2b+0x92>
 801a6ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801a6b0:	4405      	add	r5, r0
 801a6b2:	603d      	str	r5, [r7, #0]
 801a6b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801a6b8:	6030      	str	r0, [r6, #0]
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	b003      	add	sp, #12
 801a6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6c2:	6161      	str	r1, [r4, #20]
 801a6c4:	e7ea      	b.n	801a69c <__d2b+0x58>
 801a6c6:	a801      	add	r0, sp, #4
 801a6c8:	f7ff fd61 	bl	801a18e <__lo0bits>
 801a6cc:	9b01      	ldr	r3, [sp, #4]
 801a6ce:	6163      	str	r3, [r4, #20]
 801a6d0:	3020      	adds	r0, #32
 801a6d2:	2201      	movs	r2, #1
 801a6d4:	e7e8      	b.n	801a6a8 <__d2b+0x64>
 801a6d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a6da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801a6de:	6038      	str	r0, [r7, #0]
 801a6e0:	6918      	ldr	r0, [r3, #16]
 801a6e2:	f7ff fd35 	bl	801a150 <__hi0bits>
 801a6e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a6ea:	e7e5      	b.n	801a6b8 <__d2b+0x74>
 801a6ec:	0801b7e4 	.word	0x0801b7e4
 801a6f0:	0801b7f5 	.word	0x0801b7f5

0801a6f4 <__ssputs_r>:
 801a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a6f8:	688e      	ldr	r6, [r1, #8]
 801a6fa:	461f      	mov	r7, r3
 801a6fc:	42be      	cmp	r6, r7
 801a6fe:	680b      	ldr	r3, [r1, #0]
 801a700:	4682      	mov	sl, r0
 801a702:	460c      	mov	r4, r1
 801a704:	4690      	mov	r8, r2
 801a706:	d82d      	bhi.n	801a764 <__ssputs_r+0x70>
 801a708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a70c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a710:	d026      	beq.n	801a760 <__ssputs_r+0x6c>
 801a712:	6965      	ldr	r5, [r4, #20]
 801a714:	6909      	ldr	r1, [r1, #16]
 801a716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a71a:	eba3 0901 	sub.w	r9, r3, r1
 801a71e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a722:	1c7b      	adds	r3, r7, #1
 801a724:	444b      	add	r3, r9
 801a726:	106d      	asrs	r5, r5, #1
 801a728:	429d      	cmp	r5, r3
 801a72a:	bf38      	it	cc
 801a72c:	461d      	movcc	r5, r3
 801a72e:	0553      	lsls	r3, r2, #21
 801a730:	d527      	bpl.n	801a782 <__ssputs_r+0x8e>
 801a732:	4629      	mov	r1, r5
 801a734:	f7fd ff4e 	bl	80185d4 <_malloc_r>
 801a738:	4606      	mov	r6, r0
 801a73a:	b360      	cbz	r0, 801a796 <__ssputs_r+0xa2>
 801a73c:	6921      	ldr	r1, [r4, #16]
 801a73e:	464a      	mov	r2, r9
 801a740:	f7fe fdff 	bl	8019342 <memcpy>
 801a744:	89a3      	ldrh	r3, [r4, #12]
 801a746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a74e:	81a3      	strh	r3, [r4, #12]
 801a750:	6126      	str	r6, [r4, #16]
 801a752:	6165      	str	r5, [r4, #20]
 801a754:	444e      	add	r6, r9
 801a756:	eba5 0509 	sub.w	r5, r5, r9
 801a75a:	6026      	str	r6, [r4, #0]
 801a75c:	60a5      	str	r5, [r4, #8]
 801a75e:	463e      	mov	r6, r7
 801a760:	42be      	cmp	r6, r7
 801a762:	d900      	bls.n	801a766 <__ssputs_r+0x72>
 801a764:	463e      	mov	r6, r7
 801a766:	6820      	ldr	r0, [r4, #0]
 801a768:	4632      	mov	r2, r6
 801a76a:	4641      	mov	r1, r8
 801a76c:	f000 f9d8 	bl	801ab20 <memmove>
 801a770:	68a3      	ldr	r3, [r4, #8]
 801a772:	1b9b      	subs	r3, r3, r6
 801a774:	60a3      	str	r3, [r4, #8]
 801a776:	6823      	ldr	r3, [r4, #0]
 801a778:	4433      	add	r3, r6
 801a77a:	6023      	str	r3, [r4, #0]
 801a77c:	2000      	movs	r0, #0
 801a77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a782:	462a      	mov	r2, r5
 801a784:	f000 fa13 	bl	801abae <_realloc_r>
 801a788:	4606      	mov	r6, r0
 801a78a:	2800      	cmp	r0, #0
 801a78c:	d1e0      	bne.n	801a750 <__ssputs_r+0x5c>
 801a78e:	6921      	ldr	r1, [r4, #16]
 801a790:	4650      	mov	r0, sl
 801a792:	f7ff fbeb 	bl	8019f6c <_free_r>
 801a796:	230c      	movs	r3, #12
 801a798:	f8ca 3000 	str.w	r3, [sl]
 801a79c:	89a3      	ldrh	r3, [r4, #12]
 801a79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7a2:	81a3      	strh	r3, [r4, #12]
 801a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7a8:	e7e9      	b.n	801a77e <__ssputs_r+0x8a>
	...

0801a7ac <_svfiprintf_r>:
 801a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b0:	4698      	mov	r8, r3
 801a7b2:	898b      	ldrh	r3, [r1, #12]
 801a7b4:	061b      	lsls	r3, r3, #24
 801a7b6:	b09d      	sub	sp, #116	@ 0x74
 801a7b8:	4607      	mov	r7, r0
 801a7ba:	460d      	mov	r5, r1
 801a7bc:	4614      	mov	r4, r2
 801a7be:	d510      	bpl.n	801a7e2 <_svfiprintf_r+0x36>
 801a7c0:	690b      	ldr	r3, [r1, #16]
 801a7c2:	b973      	cbnz	r3, 801a7e2 <_svfiprintf_r+0x36>
 801a7c4:	2140      	movs	r1, #64	@ 0x40
 801a7c6:	f7fd ff05 	bl	80185d4 <_malloc_r>
 801a7ca:	6028      	str	r0, [r5, #0]
 801a7cc:	6128      	str	r0, [r5, #16]
 801a7ce:	b930      	cbnz	r0, 801a7de <_svfiprintf_r+0x32>
 801a7d0:	230c      	movs	r3, #12
 801a7d2:	603b      	str	r3, [r7, #0]
 801a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a7d8:	b01d      	add	sp, #116	@ 0x74
 801a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7de:	2340      	movs	r3, #64	@ 0x40
 801a7e0:	616b      	str	r3, [r5, #20]
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7e6:	2320      	movs	r3, #32
 801a7e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7f0:	2330      	movs	r3, #48	@ 0x30
 801a7f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a990 <_svfiprintf_r+0x1e4>
 801a7f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a7fa:	f04f 0901 	mov.w	r9, #1
 801a7fe:	4623      	mov	r3, r4
 801a800:	469a      	mov	sl, r3
 801a802:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a806:	b10a      	cbz	r2, 801a80c <_svfiprintf_r+0x60>
 801a808:	2a25      	cmp	r2, #37	@ 0x25
 801a80a:	d1f9      	bne.n	801a800 <_svfiprintf_r+0x54>
 801a80c:	ebba 0b04 	subs.w	fp, sl, r4
 801a810:	d00b      	beq.n	801a82a <_svfiprintf_r+0x7e>
 801a812:	465b      	mov	r3, fp
 801a814:	4622      	mov	r2, r4
 801a816:	4629      	mov	r1, r5
 801a818:	4638      	mov	r0, r7
 801a81a:	f7ff ff6b 	bl	801a6f4 <__ssputs_r>
 801a81e:	3001      	adds	r0, #1
 801a820:	f000 80a7 	beq.w	801a972 <_svfiprintf_r+0x1c6>
 801a824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a826:	445a      	add	r2, fp
 801a828:	9209      	str	r2, [sp, #36]	@ 0x24
 801a82a:	f89a 3000 	ldrb.w	r3, [sl]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	f000 809f 	beq.w	801a972 <_svfiprintf_r+0x1c6>
 801a834:	2300      	movs	r3, #0
 801a836:	f04f 32ff 	mov.w	r2, #4294967295
 801a83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a83e:	f10a 0a01 	add.w	sl, sl, #1
 801a842:	9304      	str	r3, [sp, #16]
 801a844:	9307      	str	r3, [sp, #28]
 801a846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a84a:	931a      	str	r3, [sp, #104]	@ 0x68
 801a84c:	4654      	mov	r4, sl
 801a84e:	2205      	movs	r2, #5
 801a850:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a854:	484e      	ldr	r0, [pc, #312]	@ (801a990 <_svfiprintf_r+0x1e4>)
 801a856:	f7e5 fd43 	bl	80002e0 <memchr>
 801a85a:	9a04      	ldr	r2, [sp, #16]
 801a85c:	b9d8      	cbnz	r0, 801a896 <_svfiprintf_r+0xea>
 801a85e:	06d0      	lsls	r0, r2, #27
 801a860:	bf44      	itt	mi
 801a862:	2320      	movmi	r3, #32
 801a864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a868:	0711      	lsls	r1, r2, #28
 801a86a:	bf44      	itt	mi
 801a86c:	232b      	movmi	r3, #43	@ 0x2b
 801a86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a872:	f89a 3000 	ldrb.w	r3, [sl]
 801a876:	2b2a      	cmp	r3, #42	@ 0x2a
 801a878:	d015      	beq.n	801a8a6 <_svfiprintf_r+0xfa>
 801a87a:	9a07      	ldr	r2, [sp, #28]
 801a87c:	4654      	mov	r4, sl
 801a87e:	2000      	movs	r0, #0
 801a880:	f04f 0c0a 	mov.w	ip, #10
 801a884:	4621      	mov	r1, r4
 801a886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a88a:	3b30      	subs	r3, #48	@ 0x30
 801a88c:	2b09      	cmp	r3, #9
 801a88e:	d94b      	bls.n	801a928 <_svfiprintf_r+0x17c>
 801a890:	b1b0      	cbz	r0, 801a8c0 <_svfiprintf_r+0x114>
 801a892:	9207      	str	r2, [sp, #28]
 801a894:	e014      	b.n	801a8c0 <_svfiprintf_r+0x114>
 801a896:	eba0 0308 	sub.w	r3, r0, r8
 801a89a:	fa09 f303 	lsl.w	r3, r9, r3
 801a89e:	4313      	orrs	r3, r2
 801a8a0:	9304      	str	r3, [sp, #16]
 801a8a2:	46a2      	mov	sl, r4
 801a8a4:	e7d2      	b.n	801a84c <_svfiprintf_r+0xa0>
 801a8a6:	9b03      	ldr	r3, [sp, #12]
 801a8a8:	1d19      	adds	r1, r3, #4
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	9103      	str	r1, [sp, #12]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	bfbb      	ittet	lt
 801a8b2:	425b      	neglt	r3, r3
 801a8b4:	f042 0202 	orrlt.w	r2, r2, #2
 801a8b8:	9307      	strge	r3, [sp, #28]
 801a8ba:	9307      	strlt	r3, [sp, #28]
 801a8bc:	bfb8      	it	lt
 801a8be:	9204      	strlt	r2, [sp, #16]
 801a8c0:	7823      	ldrb	r3, [r4, #0]
 801a8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a8c4:	d10a      	bne.n	801a8dc <_svfiprintf_r+0x130>
 801a8c6:	7863      	ldrb	r3, [r4, #1]
 801a8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8ca:	d132      	bne.n	801a932 <_svfiprintf_r+0x186>
 801a8cc:	9b03      	ldr	r3, [sp, #12]
 801a8ce:	1d1a      	adds	r2, r3, #4
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	9203      	str	r2, [sp, #12]
 801a8d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a8d8:	3402      	adds	r4, #2
 801a8da:	9305      	str	r3, [sp, #20]
 801a8dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a9a0 <_svfiprintf_r+0x1f4>
 801a8e0:	7821      	ldrb	r1, [r4, #0]
 801a8e2:	2203      	movs	r2, #3
 801a8e4:	4650      	mov	r0, sl
 801a8e6:	f7e5 fcfb 	bl	80002e0 <memchr>
 801a8ea:	b138      	cbz	r0, 801a8fc <_svfiprintf_r+0x150>
 801a8ec:	9b04      	ldr	r3, [sp, #16]
 801a8ee:	eba0 000a 	sub.w	r0, r0, sl
 801a8f2:	2240      	movs	r2, #64	@ 0x40
 801a8f4:	4082      	lsls	r2, r0
 801a8f6:	4313      	orrs	r3, r2
 801a8f8:	3401      	adds	r4, #1
 801a8fa:	9304      	str	r3, [sp, #16]
 801a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a900:	4824      	ldr	r0, [pc, #144]	@ (801a994 <_svfiprintf_r+0x1e8>)
 801a902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a906:	2206      	movs	r2, #6
 801a908:	f7e5 fcea 	bl	80002e0 <memchr>
 801a90c:	2800      	cmp	r0, #0
 801a90e:	d036      	beq.n	801a97e <_svfiprintf_r+0x1d2>
 801a910:	4b21      	ldr	r3, [pc, #132]	@ (801a998 <_svfiprintf_r+0x1ec>)
 801a912:	bb1b      	cbnz	r3, 801a95c <_svfiprintf_r+0x1b0>
 801a914:	9b03      	ldr	r3, [sp, #12]
 801a916:	3307      	adds	r3, #7
 801a918:	f023 0307 	bic.w	r3, r3, #7
 801a91c:	3308      	adds	r3, #8
 801a91e:	9303      	str	r3, [sp, #12]
 801a920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a922:	4433      	add	r3, r6
 801a924:	9309      	str	r3, [sp, #36]	@ 0x24
 801a926:	e76a      	b.n	801a7fe <_svfiprintf_r+0x52>
 801a928:	fb0c 3202 	mla	r2, ip, r2, r3
 801a92c:	460c      	mov	r4, r1
 801a92e:	2001      	movs	r0, #1
 801a930:	e7a8      	b.n	801a884 <_svfiprintf_r+0xd8>
 801a932:	2300      	movs	r3, #0
 801a934:	3401      	adds	r4, #1
 801a936:	9305      	str	r3, [sp, #20]
 801a938:	4619      	mov	r1, r3
 801a93a:	f04f 0c0a 	mov.w	ip, #10
 801a93e:	4620      	mov	r0, r4
 801a940:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a944:	3a30      	subs	r2, #48	@ 0x30
 801a946:	2a09      	cmp	r2, #9
 801a948:	d903      	bls.n	801a952 <_svfiprintf_r+0x1a6>
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d0c6      	beq.n	801a8dc <_svfiprintf_r+0x130>
 801a94e:	9105      	str	r1, [sp, #20]
 801a950:	e7c4      	b.n	801a8dc <_svfiprintf_r+0x130>
 801a952:	fb0c 2101 	mla	r1, ip, r1, r2
 801a956:	4604      	mov	r4, r0
 801a958:	2301      	movs	r3, #1
 801a95a:	e7f0      	b.n	801a93e <_svfiprintf_r+0x192>
 801a95c:	ab03      	add	r3, sp, #12
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	462a      	mov	r2, r5
 801a962:	4b0e      	ldr	r3, [pc, #56]	@ (801a99c <_svfiprintf_r+0x1f0>)
 801a964:	a904      	add	r1, sp, #16
 801a966:	4638      	mov	r0, r7
 801a968:	f7fd ff8e 	bl	8018888 <_printf_float>
 801a96c:	1c42      	adds	r2, r0, #1
 801a96e:	4606      	mov	r6, r0
 801a970:	d1d6      	bne.n	801a920 <_svfiprintf_r+0x174>
 801a972:	89ab      	ldrh	r3, [r5, #12]
 801a974:	065b      	lsls	r3, r3, #25
 801a976:	f53f af2d 	bmi.w	801a7d4 <_svfiprintf_r+0x28>
 801a97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a97c:	e72c      	b.n	801a7d8 <_svfiprintf_r+0x2c>
 801a97e:	ab03      	add	r3, sp, #12
 801a980:	9300      	str	r3, [sp, #0]
 801a982:	462a      	mov	r2, r5
 801a984:	4b05      	ldr	r3, [pc, #20]	@ (801a99c <_svfiprintf_r+0x1f0>)
 801a986:	a904      	add	r1, sp, #16
 801a988:	4638      	mov	r0, r7
 801a98a:	f7fe fa05 	bl	8018d98 <_printf_i>
 801a98e:	e7ed      	b.n	801a96c <_svfiprintf_r+0x1c0>
 801a990:	0801b84e 	.word	0x0801b84e
 801a994:	0801b858 	.word	0x0801b858
 801a998:	08018889 	.word	0x08018889
 801a99c:	0801a6f5 	.word	0x0801a6f5
 801a9a0:	0801b854 	.word	0x0801b854

0801a9a4 <__sflush_r>:
 801a9a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ac:	0716      	lsls	r6, r2, #28
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	460c      	mov	r4, r1
 801a9b2:	d454      	bmi.n	801aa5e <__sflush_r+0xba>
 801a9b4:	684b      	ldr	r3, [r1, #4]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	dc02      	bgt.n	801a9c0 <__sflush_r+0x1c>
 801a9ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	dd48      	ble.n	801aa52 <__sflush_r+0xae>
 801a9c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a9c2:	2e00      	cmp	r6, #0
 801a9c4:	d045      	beq.n	801aa52 <__sflush_r+0xae>
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a9cc:	682f      	ldr	r7, [r5, #0]
 801a9ce:	6a21      	ldr	r1, [r4, #32]
 801a9d0:	602b      	str	r3, [r5, #0]
 801a9d2:	d030      	beq.n	801aa36 <__sflush_r+0x92>
 801a9d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a9d6:	89a3      	ldrh	r3, [r4, #12]
 801a9d8:	0759      	lsls	r1, r3, #29
 801a9da:	d505      	bpl.n	801a9e8 <__sflush_r+0x44>
 801a9dc:	6863      	ldr	r3, [r4, #4]
 801a9de:	1ad2      	subs	r2, r2, r3
 801a9e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a9e2:	b10b      	cbz	r3, 801a9e8 <__sflush_r+0x44>
 801a9e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a9e6:	1ad2      	subs	r2, r2, r3
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a9ec:	6a21      	ldr	r1, [r4, #32]
 801a9ee:	4628      	mov	r0, r5
 801a9f0:	47b0      	blx	r6
 801a9f2:	1c43      	adds	r3, r0, #1
 801a9f4:	89a3      	ldrh	r3, [r4, #12]
 801a9f6:	d106      	bne.n	801aa06 <__sflush_r+0x62>
 801a9f8:	6829      	ldr	r1, [r5, #0]
 801a9fa:	291d      	cmp	r1, #29
 801a9fc:	d82b      	bhi.n	801aa56 <__sflush_r+0xb2>
 801a9fe:	4a2a      	ldr	r2, [pc, #168]	@ (801aaa8 <__sflush_r+0x104>)
 801aa00:	40ca      	lsrs	r2, r1
 801aa02:	07d6      	lsls	r6, r2, #31
 801aa04:	d527      	bpl.n	801aa56 <__sflush_r+0xb2>
 801aa06:	2200      	movs	r2, #0
 801aa08:	6062      	str	r2, [r4, #4]
 801aa0a:	04d9      	lsls	r1, r3, #19
 801aa0c:	6922      	ldr	r2, [r4, #16]
 801aa0e:	6022      	str	r2, [r4, #0]
 801aa10:	d504      	bpl.n	801aa1c <__sflush_r+0x78>
 801aa12:	1c42      	adds	r2, r0, #1
 801aa14:	d101      	bne.n	801aa1a <__sflush_r+0x76>
 801aa16:	682b      	ldr	r3, [r5, #0]
 801aa18:	b903      	cbnz	r3, 801aa1c <__sflush_r+0x78>
 801aa1a:	6560      	str	r0, [r4, #84]	@ 0x54
 801aa1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801aa1e:	602f      	str	r7, [r5, #0]
 801aa20:	b1b9      	cbz	r1, 801aa52 <__sflush_r+0xae>
 801aa22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801aa26:	4299      	cmp	r1, r3
 801aa28:	d002      	beq.n	801aa30 <__sflush_r+0x8c>
 801aa2a:	4628      	mov	r0, r5
 801aa2c:	f7ff fa9e 	bl	8019f6c <_free_r>
 801aa30:	2300      	movs	r3, #0
 801aa32:	6363      	str	r3, [r4, #52]	@ 0x34
 801aa34:	e00d      	b.n	801aa52 <__sflush_r+0xae>
 801aa36:	2301      	movs	r3, #1
 801aa38:	4628      	mov	r0, r5
 801aa3a:	47b0      	blx	r6
 801aa3c:	4602      	mov	r2, r0
 801aa3e:	1c50      	adds	r0, r2, #1
 801aa40:	d1c9      	bne.n	801a9d6 <__sflush_r+0x32>
 801aa42:	682b      	ldr	r3, [r5, #0]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d0c6      	beq.n	801a9d6 <__sflush_r+0x32>
 801aa48:	2b1d      	cmp	r3, #29
 801aa4a:	d001      	beq.n	801aa50 <__sflush_r+0xac>
 801aa4c:	2b16      	cmp	r3, #22
 801aa4e:	d11e      	bne.n	801aa8e <__sflush_r+0xea>
 801aa50:	602f      	str	r7, [r5, #0]
 801aa52:	2000      	movs	r0, #0
 801aa54:	e022      	b.n	801aa9c <__sflush_r+0xf8>
 801aa56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa5a:	b21b      	sxth	r3, r3
 801aa5c:	e01b      	b.n	801aa96 <__sflush_r+0xf2>
 801aa5e:	690f      	ldr	r7, [r1, #16]
 801aa60:	2f00      	cmp	r7, #0
 801aa62:	d0f6      	beq.n	801aa52 <__sflush_r+0xae>
 801aa64:	0793      	lsls	r3, r2, #30
 801aa66:	680e      	ldr	r6, [r1, #0]
 801aa68:	bf08      	it	eq
 801aa6a:	694b      	ldreq	r3, [r1, #20]
 801aa6c:	600f      	str	r7, [r1, #0]
 801aa6e:	bf18      	it	ne
 801aa70:	2300      	movne	r3, #0
 801aa72:	eba6 0807 	sub.w	r8, r6, r7
 801aa76:	608b      	str	r3, [r1, #8]
 801aa78:	f1b8 0f00 	cmp.w	r8, #0
 801aa7c:	dde9      	ble.n	801aa52 <__sflush_r+0xae>
 801aa7e:	6a21      	ldr	r1, [r4, #32]
 801aa80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801aa82:	4643      	mov	r3, r8
 801aa84:	463a      	mov	r2, r7
 801aa86:	4628      	mov	r0, r5
 801aa88:	47b0      	blx	r6
 801aa8a:	2800      	cmp	r0, #0
 801aa8c:	dc08      	bgt.n	801aaa0 <__sflush_r+0xfc>
 801aa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aa96:	81a3      	strh	r3, [r4, #12]
 801aa98:	f04f 30ff 	mov.w	r0, #4294967295
 801aa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aaa0:	4407      	add	r7, r0
 801aaa2:	eba8 0800 	sub.w	r8, r8, r0
 801aaa6:	e7e7      	b.n	801aa78 <__sflush_r+0xd4>
 801aaa8:	20400001 	.word	0x20400001

0801aaac <_fflush_r>:
 801aaac:	b538      	push	{r3, r4, r5, lr}
 801aaae:	690b      	ldr	r3, [r1, #16]
 801aab0:	4605      	mov	r5, r0
 801aab2:	460c      	mov	r4, r1
 801aab4:	b913      	cbnz	r3, 801aabc <_fflush_r+0x10>
 801aab6:	2500      	movs	r5, #0
 801aab8:	4628      	mov	r0, r5
 801aaba:	bd38      	pop	{r3, r4, r5, pc}
 801aabc:	b118      	cbz	r0, 801aac6 <_fflush_r+0x1a>
 801aabe:	6a03      	ldr	r3, [r0, #32]
 801aac0:	b90b      	cbnz	r3, 801aac6 <_fflush_r+0x1a>
 801aac2:	f7fe fb13 	bl	80190ec <__sinit>
 801aac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d0f3      	beq.n	801aab6 <_fflush_r+0xa>
 801aace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801aad0:	07d0      	lsls	r0, r2, #31
 801aad2:	d404      	bmi.n	801aade <_fflush_r+0x32>
 801aad4:	0599      	lsls	r1, r3, #22
 801aad6:	d402      	bmi.n	801aade <_fflush_r+0x32>
 801aad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aada:	f7fe fc30 	bl	801933e <__retarget_lock_acquire_recursive>
 801aade:	4628      	mov	r0, r5
 801aae0:	4621      	mov	r1, r4
 801aae2:	f7ff ff5f 	bl	801a9a4 <__sflush_r>
 801aae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801aae8:	07da      	lsls	r2, r3, #31
 801aaea:	4605      	mov	r5, r0
 801aaec:	d4e4      	bmi.n	801aab8 <_fflush_r+0xc>
 801aaee:	89a3      	ldrh	r3, [r4, #12]
 801aaf0:	059b      	lsls	r3, r3, #22
 801aaf2:	d4e1      	bmi.n	801aab8 <_fflush_r+0xc>
 801aaf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801aaf6:	f7fe fc23 	bl	8019340 <__retarget_lock_release_recursive>
 801aafa:	e7dd      	b.n	801aab8 <_fflush_r+0xc>

0801aafc <fiprintf>:
 801aafc:	b40e      	push	{r1, r2, r3}
 801aafe:	b503      	push	{r0, r1, lr}
 801ab00:	4601      	mov	r1, r0
 801ab02:	ab03      	add	r3, sp, #12
 801ab04:	4805      	ldr	r0, [pc, #20]	@ (801ab1c <fiprintf+0x20>)
 801ab06:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab0a:	6800      	ldr	r0, [r0, #0]
 801ab0c:	9301      	str	r3, [sp, #4]
 801ab0e:	f000 f8b3 	bl	801ac78 <_vfiprintf_r>
 801ab12:	b002      	add	sp, #8
 801ab14:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab18:	b003      	add	sp, #12
 801ab1a:	4770      	bx	lr
 801ab1c:	24000128 	.word	0x24000128

0801ab20 <memmove>:
 801ab20:	4288      	cmp	r0, r1
 801ab22:	b510      	push	{r4, lr}
 801ab24:	eb01 0402 	add.w	r4, r1, r2
 801ab28:	d902      	bls.n	801ab30 <memmove+0x10>
 801ab2a:	4284      	cmp	r4, r0
 801ab2c:	4623      	mov	r3, r4
 801ab2e:	d807      	bhi.n	801ab40 <memmove+0x20>
 801ab30:	1e43      	subs	r3, r0, #1
 801ab32:	42a1      	cmp	r1, r4
 801ab34:	d008      	beq.n	801ab48 <memmove+0x28>
 801ab36:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab3e:	e7f8      	b.n	801ab32 <memmove+0x12>
 801ab40:	4402      	add	r2, r0
 801ab42:	4601      	mov	r1, r0
 801ab44:	428a      	cmp	r2, r1
 801ab46:	d100      	bne.n	801ab4a <memmove+0x2a>
 801ab48:	bd10      	pop	{r4, pc}
 801ab4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ab4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ab52:	e7f7      	b.n	801ab44 <memmove+0x24>

0801ab54 <abort>:
 801ab54:	b508      	push	{r3, lr}
 801ab56:	2006      	movs	r0, #6
 801ab58:	f000 fa62 	bl	801b020 <raise>
 801ab5c:	2001      	movs	r0, #1
 801ab5e:	f7e8 f99f 	bl	8002ea0 <_exit>

0801ab62 <_calloc_r>:
 801ab62:	b570      	push	{r4, r5, r6, lr}
 801ab64:	fba1 5402 	umull	r5, r4, r1, r2
 801ab68:	b934      	cbnz	r4, 801ab78 <_calloc_r+0x16>
 801ab6a:	4629      	mov	r1, r5
 801ab6c:	f7fd fd32 	bl	80185d4 <_malloc_r>
 801ab70:	4606      	mov	r6, r0
 801ab72:	b928      	cbnz	r0, 801ab80 <_calloc_r+0x1e>
 801ab74:	4630      	mov	r0, r6
 801ab76:	bd70      	pop	{r4, r5, r6, pc}
 801ab78:	220c      	movs	r2, #12
 801ab7a:	6002      	str	r2, [r0, #0]
 801ab7c:	2600      	movs	r6, #0
 801ab7e:	e7f9      	b.n	801ab74 <_calloc_r+0x12>
 801ab80:	462a      	mov	r2, r5
 801ab82:	4621      	mov	r1, r4
 801ab84:	f7fe fb4d 	bl	8019222 <memset>
 801ab88:	e7f4      	b.n	801ab74 <_calloc_r+0x12>

0801ab8a <__ascii_mbtowc>:
 801ab8a:	b082      	sub	sp, #8
 801ab8c:	b901      	cbnz	r1, 801ab90 <__ascii_mbtowc+0x6>
 801ab8e:	a901      	add	r1, sp, #4
 801ab90:	b142      	cbz	r2, 801aba4 <__ascii_mbtowc+0x1a>
 801ab92:	b14b      	cbz	r3, 801aba8 <__ascii_mbtowc+0x1e>
 801ab94:	7813      	ldrb	r3, [r2, #0]
 801ab96:	600b      	str	r3, [r1, #0]
 801ab98:	7812      	ldrb	r2, [r2, #0]
 801ab9a:	1e10      	subs	r0, r2, #0
 801ab9c:	bf18      	it	ne
 801ab9e:	2001      	movne	r0, #1
 801aba0:	b002      	add	sp, #8
 801aba2:	4770      	bx	lr
 801aba4:	4610      	mov	r0, r2
 801aba6:	e7fb      	b.n	801aba0 <__ascii_mbtowc+0x16>
 801aba8:	f06f 0001 	mvn.w	r0, #1
 801abac:	e7f8      	b.n	801aba0 <__ascii_mbtowc+0x16>

0801abae <_realloc_r>:
 801abae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abb2:	4607      	mov	r7, r0
 801abb4:	4614      	mov	r4, r2
 801abb6:	460d      	mov	r5, r1
 801abb8:	b921      	cbnz	r1, 801abc4 <_realloc_r+0x16>
 801abba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abbe:	4611      	mov	r1, r2
 801abc0:	f7fd bd08 	b.w	80185d4 <_malloc_r>
 801abc4:	b92a      	cbnz	r2, 801abd2 <_realloc_r+0x24>
 801abc6:	f7ff f9d1 	bl	8019f6c <_free_r>
 801abca:	4625      	mov	r5, r4
 801abcc:	4628      	mov	r0, r5
 801abce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abd2:	f000 fa41 	bl	801b058 <_malloc_usable_size_r>
 801abd6:	4284      	cmp	r4, r0
 801abd8:	4606      	mov	r6, r0
 801abda:	d802      	bhi.n	801abe2 <_realloc_r+0x34>
 801abdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801abe0:	d8f4      	bhi.n	801abcc <_realloc_r+0x1e>
 801abe2:	4621      	mov	r1, r4
 801abe4:	4638      	mov	r0, r7
 801abe6:	f7fd fcf5 	bl	80185d4 <_malloc_r>
 801abea:	4680      	mov	r8, r0
 801abec:	b908      	cbnz	r0, 801abf2 <_realloc_r+0x44>
 801abee:	4645      	mov	r5, r8
 801abf0:	e7ec      	b.n	801abcc <_realloc_r+0x1e>
 801abf2:	42b4      	cmp	r4, r6
 801abf4:	4622      	mov	r2, r4
 801abf6:	4629      	mov	r1, r5
 801abf8:	bf28      	it	cs
 801abfa:	4632      	movcs	r2, r6
 801abfc:	f7fe fba1 	bl	8019342 <memcpy>
 801ac00:	4629      	mov	r1, r5
 801ac02:	4638      	mov	r0, r7
 801ac04:	f7ff f9b2 	bl	8019f6c <_free_r>
 801ac08:	e7f1      	b.n	801abee <_realloc_r+0x40>

0801ac0a <__ascii_wctomb>:
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	4608      	mov	r0, r1
 801ac0e:	b141      	cbz	r1, 801ac22 <__ascii_wctomb+0x18>
 801ac10:	2aff      	cmp	r2, #255	@ 0xff
 801ac12:	d904      	bls.n	801ac1e <__ascii_wctomb+0x14>
 801ac14:	228a      	movs	r2, #138	@ 0x8a
 801ac16:	601a      	str	r2, [r3, #0]
 801ac18:	f04f 30ff 	mov.w	r0, #4294967295
 801ac1c:	4770      	bx	lr
 801ac1e:	700a      	strb	r2, [r1, #0]
 801ac20:	2001      	movs	r0, #1
 801ac22:	4770      	bx	lr

0801ac24 <__sfputc_r>:
 801ac24:	6893      	ldr	r3, [r2, #8]
 801ac26:	3b01      	subs	r3, #1
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	b410      	push	{r4}
 801ac2c:	6093      	str	r3, [r2, #8]
 801ac2e:	da08      	bge.n	801ac42 <__sfputc_r+0x1e>
 801ac30:	6994      	ldr	r4, [r2, #24]
 801ac32:	42a3      	cmp	r3, r4
 801ac34:	db01      	blt.n	801ac3a <__sfputc_r+0x16>
 801ac36:	290a      	cmp	r1, #10
 801ac38:	d103      	bne.n	801ac42 <__sfputc_r+0x1e>
 801ac3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac3e:	f000 b933 	b.w	801aea8 <__swbuf_r>
 801ac42:	6813      	ldr	r3, [r2, #0]
 801ac44:	1c58      	adds	r0, r3, #1
 801ac46:	6010      	str	r0, [r2, #0]
 801ac48:	7019      	strb	r1, [r3, #0]
 801ac4a:	4608      	mov	r0, r1
 801ac4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac50:	4770      	bx	lr

0801ac52 <__sfputs_r>:
 801ac52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac54:	4606      	mov	r6, r0
 801ac56:	460f      	mov	r7, r1
 801ac58:	4614      	mov	r4, r2
 801ac5a:	18d5      	adds	r5, r2, r3
 801ac5c:	42ac      	cmp	r4, r5
 801ac5e:	d101      	bne.n	801ac64 <__sfputs_r+0x12>
 801ac60:	2000      	movs	r0, #0
 801ac62:	e007      	b.n	801ac74 <__sfputs_r+0x22>
 801ac64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac68:	463a      	mov	r2, r7
 801ac6a:	4630      	mov	r0, r6
 801ac6c:	f7ff ffda 	bl	801ac24 <__sfputc_r>
 801ac70:	1c43      	adds	r3, r0, #1
 801ac72:	d1f3      	bne.n	801ac5c <__sfputs_r+0xa>
 801ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ac78 <_vfiprintf_r>:
 801ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7c:	460d      	mov	r5, r1
 801ac7e:	b09d      	sub	sp, #116	@ 0x74
 801ac80:	4614      	mov	r4, r2
 801ac82:	4698      	mov	r8, r3
 801ac84:	4606      	mov	r6, r0
 801ac86:	b118      	cbz	r0, 801ac90 <_vfiprintf_r+0x18>
 801ac88:	6a03      	ldr	r3, [r0, #32]
 801ac8a:	b90b      	cbnz	r3, 801ac90 <_vfiprintf_r+0x18>
 801ac8c:	f7fe fa2e 	bl	80190ec <__sinit>
 801ac90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ac92:	07d9      	lsls	r1, r3, #31
 801ac94:	d405      	bmi.n	801aca2 <_vfiprintf_r+0x2a>
 801ac96:	89ab      	ldrh	r3, [r5, #12]
 801ac98:	059a      	lsls	r2, r3, #22
 801ac9a:	d402      	bmi.n	801aca2 <_vfiprintf_r+0x2a>
 801ac9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ac9e:	f7fe fb4e 	bl	801933e <__retarget_lock_acquire_recursive>
 801aca2:	89ab      	ldrh	r3, [r5, #12]
 801aca4:	071b      	lsls	r3, r3, #28
 801aca6:	d501      	bpl.n	801acac <_vfiprintf_r+0x34>
 801aca8:	692b      	ldr	r3, [r5, #16]
 801acaa:	b99b      	cbnz	r3, 801acd4 <_vfiprintf_r+0x5c>
 801acac:	4629      	mov	r1, r5
 801acae:	4630      	mov	r0, r6
 801acb0:	f000 f938 	bl	801af24 <__swsetup_r>
 801acb4:	b170      	cbz	r0, 801acd4 <_vfiprintf_r+0x5c>
 801acb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801acb8:	07dc      	lsls	r4, r3, #31
 801acba:	d504      	bpl.n	801acc6 <_vfiprintf_r+0x4e>
 801acbc:	f04f 30ff 	mov.w	r0, #4294967295
 801acc0:	b01d      	add	sp, #116	@ 0x74
 801acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acc6:	89ab      	ldrh	r3, [r5, #12]
 801acc8:	0598      	lsls	r0, r3, #22
 801acca:	d4f7      	bmi.n	801acbc <_vfiprintf_r+0x44>
 801accc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801acce:	f7fe fb37 	bl	8019340 <__retarget_lock_release_recursive>
 801acd2:	e7f3      	b.n	801acbc <_vfiprintf_r+0x44>
 801acd4:	2300      	movs	r3, #0
 801acd6:	9309      	str	r3, [sp, #36]	@ 0x24
 801acd8:	2320      	movs	r3, #32
 801acda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801acde:	f8cd 800c 	str.w	r8, [sp, #12]
 801ace2:	2330      	movs	r3, #48	@ 0x30
 801ace4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ae94 <_vfiprintf_r+0x21c>
 801ace8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801acec:	f04f 0901 	mov.w	r9, #1
 801acf0:	4623      	mov	r3, r4
 801acf2:	469a      	mov	sl, r3
 801acf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acf8:	b10a      	cbz	r2, 801acfe <_vfiprintf_r+0x86>
 801acfa:	2a25      	cmp	r2, #37	@ 0x25
 801acfc:	d1f9      	bne.n	801acf2 <_vfiprintf_r+0x7a>
 801acfe:	ebba 0b04 	subs.w	fp, sl, r4
 801ad02:	d00b      	beq.n	801ad1c <_vfiprintf_r+0xa4>
 801ad04:	465b      	mov	r3, fp
 801ad06:	4622      	mov	r2, r4
 801ad08:	4629      	mov	r1, r5
 801ad0a:	4630      	mov	r0, r6
 801ad0c:	f7ff ffa1 	bl	801ac52 <__sfputs_r>
 801ad10:	3001      	adds	r0, #1
 801ad12:	f000 80a7 	beq.w	801ae64 <_vfiprintf_r+0x1ec>
 801ad16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ad18:	445a      	add	r2, fp
 801ad1a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ad1c:	f89a 3000 	ldrb.w	r3, [sl]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	f000 809f 	beq.w	801ae64 <_vfiprintf_r+0x1ec>
 801ad26:	2300      	movs	r3, #0
 801ad28:	f04f 32ff 	mov.w	r2, #4294967295
 801ad2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad30:	f10a 0a01 	add.w	sl, sl, #1
 801ad34:	9304      	str	r3, [sp, #16]
 801ad36:	9307      	str	r3, [sp, #28]
 801ad38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ad3c:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad3e:	4654      	mov	r4, sl
 801ad40:	2205      	movs	r2, #5
 801ad42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad46:	4853      	ldr	r0, [pc, #332]	@ (801ae94 <_vfiprintf_r+0x21c>)
 801ad48:	f7e5 faca 	bl	80002e0 <memchr>
 801ad4c:	9a04      	ldr	r2, [sp, #16]
 801ad4e:	b9d8      	cbnz	r0, 801ad88 <_vfiprintf_r+0x110>
 801ad50:	06d1      	lsls	r1, r2, #27
 801ad52:	bf44      	itt	mi
 801ad54:	2320      	movmi	r3, #32
 801ad56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad5a:	0713      	lsls	r3, r2, #28
 801ad5c:	bf44      	itt	mi
 801ad5e:	232b      	movmi	r3, #43	@ 0x2b
 801ad60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ad64:	f89a 3000 	ldrb.w	r3, [sl]
 801ad68:	2b2a      	cmp	r3, #42	@ 0x2a
 801ad6a:	d015      	beq.n	801ad98 <_vfiprintf_r+0x120>
 801ad6c:	9a07      	ldr	r2, [sp, #28]
 801ad6e:	4654      	mov	r4, sl
 801ad70:	2000      	movs	r0, #0
 801ad72:	f04f 0c0a 	mov.w	ip, #10
 801ad76:	4621      	mov	r1, r4
 801ad78:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad7c:	3b30      	subs	r3, #48	@ 0x30
 801ad7e:	2b09      	cmp	r3, #9
 801ad80:	d94b      	bls.n	801ae1a <_vfiprintf_r+0x1a2>
 801ad82:	b1b0      	cbz	r0, 801adb2 <_vfiprintf_r+0x13a>
 801ad84:	9207      	str	r2, [sp, #28]
 801ad86:	e014      	b.n	801adb2 <_vfiprintf_r+0x13a>
 801ad88:	eba0 0308 	sub.w	r3, r0, r8
 801ad8c:	fa09 f303 	lsl.w	r3, r9, r3
 801ad90:	4313      	orrs	r3, r2
 801ad92:	9304      	str	r3, [sp, #16]
 801ad94:	46a2      	mov	sl, r4
 801ad96:	e7d2      	b.n	801ad3e <_vfiprintf_r+0xc6>
 801ad98:	9b03      	ldr	r3, [sp, #12]
 801ad9a:	1d19      	adds	r1, r3, #4
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	9103      	str	r1, [sp, #12]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	bfbb      	ittet	lt
 801ada4:	425b      	neglt	r3, r3
 801ada6:	f042 0202 	orrlt.w	r2, r2, #2
 801adaa:	9307      	strge	r3, [sp, #28]
 801adac:	9307      	strlt	r3, [sp, #28]
 801adae:	bfb8      	it	lt
 801adb0:	9204      	strlt	r2, [sp, #16]
 801adb2:	7823      	ldrb	r3, [r4, #0]
 801adb4:	2b2e      	cmp	r3, #46	@ 0x2e
 801adb6:	d10a      	bne.n	801adce <_vfiprintf_r+0x156>
 801adb8:	7863      	ldrb	r3, [r4, #1]
 801adba:	2b2a      	cmp	r3, #42	@ 0x2a
 801adbc:	d132      	bne.n	801ae24 <_vfiprintf_r+0x1ac>
 801adbe:	9b03      	ldr	r3, [sp, #12]
 801adc0:	1d1a      	adds	r2, r3, #4
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	9203      	str	r2, [sp, #12]
 801adc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801adca:	3402      	adds	r4, #2
 801adcc:	9305      	str	r3, [sp, #20]
 801adce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801aea4 <_vfiprintf_r+0x22c>
 801add2:	7821      	ldrb	r1, [r4, #0]
 801add4:	2203      	movs	r2, #3
 801add6:	4650      	mov	r0, sl
 801add8:	f7e5 fa82 	bl	80002e0 <memchr>
 801addc:	b138      	cbz	r0, 801adee <_vfiprintf_r+0x176>
 801adde:	9b04      	ldr	r3, [sp, #16]
 801ade0:	eba0 000a 	sub.w	r0, r0, sl
 801ade4:	2240      	movs	r2, #64	@ 0x40
 801ade6:	4082      	lsls	r2, r0
 801ade8:	4313      	orrs	r3, r2
 801adea:	3401      	adds	r4, #1
 801adec:	9304      	str	r3, [sp, #16]
 801adee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adf2:	4829      	ldr	r0, [pc, #164]	@ (801ae98 <_vfiprintf_r+0x220>)
 801adf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801adf8:	2206      	movs	r2, #6
 801adfa:	f7e5 fa71 	bl	80002e0 <memchr>
 801adfe:	2800      	cmp	r0, #0
 801ae00:	d03f      	beq.n	801ae82 <_vfiprintf_r+0x20a>
 801ae02:	4b26      	ldr	r3, [pc, #152]	@ (801ae9c <_vfiprintf_r+0x224>)
 801ae04:	bb1b      	cbnz	r3, 801ae4e <_vfiprintf_r+0x1d6>
 801ae06:	9b03      	ldr	r3, [sp, #12]
 801ae08:	3307      	adds	r3, #7
 801ae0a:	f023 0307 	bic.w	r3, r3, #7
 801ae0e:	3308      	adds	r3, #8
 801ae10:	9303      	str	r3, [sp, #12]
 801ae12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae14:	443b      	add	r3, r7
 801ae16:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae18:	e76a      	b.n	801acf0 <_vfiprintf_r+0x78>
 801ae1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae1e:	460c      	mov	r4, r1
 801ae20:	2001      	movs	r0, #1
 801ae22:	e7a8      	b.n	801ad76 <_vfiprintf_r+0xfe>
 801ae24:	2300      	movs	r3, #0
 801ae26:	3401      	adds	r4, #1
 801ae28:	9305      	str	r3, [sp, #20]
 801ae2a:	4619      	mov	r1, r3
 801ae2c:	f04f 0c0a 	mov.w	ip, #10
 801ae30:	4620      	mov	r0, r4
 801ae32:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae36:	3a30      	subs	r2, #48	@ 0x30
 801ae38:	2a09      	cmp	r2, #9
 801ae3a:	d903      	bls.n	801ae44 <_vfiprintf_r+0x1cc>
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d0c6      	beq.n	801adce <_vfiprintf_r+0x156>
 801ae40:	9105      	str	r1, [sp, #20]
 801ae42:	e7c4      	b.n	801adce <_vfiprintf_r+0x156>
 801ae44:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae48:	4604      	mov	r4, r0
 801ae4a:	2301      	movs	r3, #1
 801ae4c:	e7f0      	b.n	801ae30 <_vfiprintf_r+0x1b8>
 801ae4e:	ab03      	add	r3, sp, #12
 801ae50:	9300      	str	r3, [sp, #0]
 801ae52:	462a      	mov	r2, r5
 801ae54:	4b12      	ldr	r3, [pc, #72]	@ (801aea0 <_vfiprintf_r+0x228>)
 801ae56:	a904      	add	r1, sp, #16
 801ae58:	4630      	mov	r0, r6
 801ae5a:	f7fd fd15 	bl	8018888 <_printf_float>
 801ae5e:	4607      	mov	r7, r0
 801ae60:	1c78      	adds	r0, r7, #1
 801ae62:	d1d6      	bne.n	801ae12 <_vfiprintf_r+0x19a>
 801ae64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ae66:	07d9      	lsls	r1, r3, #31
 801ae68:	d405      	bmi.n	801ae76 <_vfiprintf_r+0x1fe>
 801ae6a:	89ab      	ldrh	r3, [r5, #12]
 801ae6c:	059a      	lsls	r2, r3, #22
 801ae6e:	d402      	bmi.n	801ae76 <_vfiprintf_r+0x1fe>
 801ae70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ae72:	f7fe fa65 	bl	8019340 <__retarget_lock_release_recursive>
 801ae76:	89ab      	ldrh	r3, [r5, #12]
 801ae78:	065b      	lsls	r3, r3, #25
 801ae7a:	f53f af1f 	bmi.w	801acbc <_vfiprintf_r+0x44>
 801ae7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ae80:	e71e      	b.n	801acc0 <_vfiprintf_r+0x48>
 801ae82:	ab03      	add	r3, sp, #12
 801ae84:	9300      	str	r3, [sp, #0]
 801ae86:	462a      	mov	r2, r5
 801ae88:	4b05      	ldr	r3, [pc, #20]	@ (801aea0 <_vfiprintf_r+0x228>)
 801ae8a:	a904      	add	r1, sp, #16
 801ae8c:	4630      	mov	r0, r6
 801ae8e:	f7fd ff83 	bl	8018d98 <_printf_i>
 801ae92:	e7e4      	b.n	801ae5e <_vfiprintf_r+0x1e6>
 801ae94:	0801b84e 	.word	0x0801b84e
 801ae98:	0801b858 	.word	0x0801b858
 801ae9c:	08018889 	.word	0x08018889
 801aea0:	0801ac53 	.word	0x0801ac53
 801aea4:	0801b854 	.word	0x0801b854

0801aea8 <__swbuf_r>:
 801aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeaa:	460e      	mov	r6, r1
 801aeac:	4614      	mov	r4, r2
 801aeae:	4605      	mov	r5, r0
 801aeb0:	b118      	cbz	r0, 801aeba <__swbuf_r+0x12>
 801aeb2:	6a03      	ldr	r3, [r0, #32]
 801aeb4:	b90b      	cbnz	r3, 801aeba <__swbuf_r+0x12>
 801aeb6:	f7fe f919 	bl	80190ec <__sinit>
 801aeba:	69a3      	ldr	r3, [r4, #24]
 801aebc:	60a3      	str	r3, [r4, #8]
 801aebe:	89a3      	ldrh	r3, [r4, #12]
 801aec0:	071a      	lsls	r2, r3, #28
 801aec2:	d501      	bpl.n	801aec8 <__swbuf_r+0x20>
 801aec4:	6923      	ldr	r3, [r4, #16]
 801aec6:	b943      	cbnz	r3, 801aeda <__swbuf_r+0x32>
 801aec8:	4621      	mov	r1, r4
 801aeca:	4628      	mov	r0, r5
 801aecc:	f000 f82a 	bl	801af24 <__swsetup_r>
 801aed0:	b118      	cbz	r0, 801aeda <__swbuf_r+0x32>
 801aed2:	f04f 37ff 	mov.w	r7, #4294967295
 801aed6:	4638      	mov	r0, r7
 801aed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeda:	6823      	ldr	r3, [r4, #0]
 801aedc:	6922      	ldr	r2, [r4, #16]
 801aede:	1a98      	subs	r0, r3, r2
 801aee0:	6963      	ldr	r3, [r4, #20]
 801aee2:	b2f6      	uxtb	r6, r6
 801aee4:	4283      	cmp	r3, r0
 801aee6:	4637      	mov	r7, r6
 801aee8:	dc05      	bgt.n	801aef6 <__swbuf_r+0x4e>
 801aeea:	4621      	mov	r1, r4
 801aeec:	4628      	mov	r0, r5
 801aeee:	f7ff fddd 	bl	801aaac <_fflush_r>
 801aef2:	2800      	cmp	r0, #0
 801aef4:	d1ed      	bne.n	801aed2 <__swbuf_r+0x2a>
 801aef6:	68a3      	ldr	r3, [r4, #8]
 801aef8:	3b01      	subs	r3, #1
 801aefa:	60a3      	str	r3, [r4, #8]
 801aefc:	6823      	ldr	r3, [r4, #0]
 801aefe:	1c5a      	adds	r2, r3, #1
 801af00:	6022      	str	r2, [r4, #0]
 801af02:	701e      	strb	r6, [r3, #0]
 801af04:	6962      	ldr	r2, [r4, #20]
 801af06:	1c43      	adds	r3, r0, #1
 801af08:	429a      	cmp	r2, r3
 801af0a:	d004      	beq.n	801af16 <__swbuf_r+0x6e>
 801af0c:	89a3      	ldrh	r3, [r4, #12]
 801af0e:	07db      	lsls	r3, r3, #31
 801af10:	d5e1      	bpl.n	801aed6 <__swbuf_r+0x2e>
 801af12:	2e0a      	cmp	r6, #10
 801af14:	d1df      	bne.n	801aed6 <__swbuf_r+0x2e>
 801af16:	4621      	mov	r1, r4
 801af18:	4628      	mov	r0, r5
 801af1a:	f7ff fdc7 	bl	801aaac <_fflush_r>
 801af1e:	2800      	cmp	r0, #0
 801af20:	d0d9      	beq.n	801aed6 <__swbuf_r+0x2e>
 801af22:	e7d6      	b.n	801aed2 <__swbuf_r+0x2a>

0801af24 <__swsetup_r>:
 801af24:	b538      	push	{r3, r4, r5, lr}
 801af26:	4b29      	ldr	r3, [pc, #164]	@ (801afcc <__swsetup_r+0xa8>)
 801af28:	4605      	mov	r5, r0
 801af2a:	6818      	ldr	r0, [r3, #0]
 801af2c:	460c      	mov	r4, r1
 801af2e:	b118      	cbz	r0, 801af38 <__swsetup_r+0x14>
 801af30:	6a03      	ldr	r3, [r0, #32]
 801af32:	b90b      	cbnz	r3, 801af38 <__swsetup_r+0x14>
 801af34:	f7fe f8da 	bl	80190ec <__sinit>
 801af38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af3c:	0719      	lsls	r1, r3, #28
 801af3e:	d422      	bmi.n	801af86 <__swsetup_r+0x62>
 801af40:	06da      	lsls	r2, r3, #27
 801af42:	d407      	bmi.n	801af54 <__swsetup_r+0x30>
 801af44:	2209      	movs	r2, #9
 801af46:	602a      	str	r2, [r5, #0]
 801af48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801af4c:	81a3      	strh	r3, [r4, #12]
 801af4e:	f04f 30ff 	mov.w	r0, #4294967295
 801af52:	e033      	b.n	801afbc <__swsetup_r+0x98>
 801af54:	0758      	lsls	r0, r3, #29
 801af56:	d512      	bpl.n	801af7e <__swsetup_r+0x5a>
 801af58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801af5a:	b141      	cbz	r1, 801af6e <__swsetup_r+0x4a>
 801af5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801af60:	4299      	cmp	r1, r3
 801af62:	d002      	beq.n	801af6a <__swsetup_r+0x46>
 801af64:	4628      	mov	r0, r5
 801af66:	f7ff f801 	bl	8019f6c <_free_r>
 801af6a:	2300      	movs	r3, #0
 801af6c:	6363      	str	r3, [r4, #52]	@ 0x34
 801af6e:	89a3      	ldrh	r3, [r4, #12]
 801af70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801af74:	81a3      	strh	r3, [r4, #12]
 801af76:	2300      	movs	r3, #0
 801af78:	6063      	str	r3, [r4, #4]
 801af7a:	6923      	ldr	r3, [r4, #16]
 801af7c:	6023      	str	r3, [r4, #0]
 801af7e:	89a3      	ldrh	r3, [r4, #12]
 801af80:	f043 0308 	orr.w	r3, r3, #8
 801af84:	81a3      	strh	r3, [r4, #12]
 801af86:	6923      	ldr	r3, [r4, #16]
 801af88:	b94b      	cbnz	r3, 801af9e <__swsetup_r+0x7a>
 801af8a:	89a3      	ldrh	r3, [r4, #12]
 801af8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801af90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801af94:	d003      	beq.n	801af9e <__swsetup_r+0x7a>
 801af96:	4621      	mov	r1, r4
 801af98:	4628      	mov	r0, r5
 801af9a:	f000 f88b 	bl	801b0b4 <__smakebuf_r>
 801af9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801afa2:	f013 0201 	ands.w	r2, r3, #1
 801afa6:	d00a      	beq.n	801afbe <__swsetup_r+0x9a>
 801afa8:	2200      	movs	r2, #0
 801afaa:	60a2      	str	r2, [r4, #8]
 801afac:	6962      	ldr	r2, [r4, #20]
 801afae:	4252      	negs	r2, r2
 801afb0:	61a2      	str	r2, [r4, #24]
 801afb2:	6922      	ldr	r2, [r4, #16]
 801afb4:	b942      	cbnz	r2, 801afc8 <__swsetup_r+0xa4>
 801afb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801afba:	d1c5      	bne.n	801af48 <__swsetup_r+0x24>
 801afbc:	bd38      	pop	{r3, r4, r5, pc}
 801afbe:	0799      	lsls	r1, r3, #30
 801afc0:	bf58      	it	pl
 801afc2:	6962      	ldrpl	r2, [r4, #20]
 801afc4:	60a2      	str	r2, [r4, #8]
 801afc6:	e7f4      	b.n	801afb2 <__swsetup_r+0x8e>
 801afc8:	2000      	movs	r0, #0
 801afca:	e7f7      	b.n	801afbc <__swsetup_r+0x98>
 801afcc:	24000128 	.word	0x24000128

0801afd0 <_raise_r>:
 801afd0:	291f      	cmp	r1, #31
 801afd2:	b538      	push	{r3, r4, r5, lr}
 801afd4:	4605      	mov	r5, r0
 801afd6:	460c      	mov	r4, r1
 801afd8:	d904      	bls.n	801afe4 <_raise_r+0x14>
 801afda:	2316      	movs	r3, #22
 801afdc:	6003      	str	r3, [r0, #0]
 801afde:	f04f 30ff 	mov.w	r0, #4294967295
 801afe2:	bd38      	pop	{r3, r4, r5, pc}
 801afe4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801afe6:	b112      	cbz	r2, 801afee <_raise_r+0x1e>
 801afe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afec:	b94b      	cbnz	r3, 801b002 <_raise_r+0x32>
 801afee:	4628      	mov	r0, r5
 801aff0:	f000 f830 	bl	801b054 <_getpid_r>
 801aff4:	4622      	mov	r2, r4
 801aff6:	4601      	mov	r1, r0
 801aff8:	4628      	mov	r0, r5
 801affa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801affe:	f000 b817 	b.w	801b030 <_kill_r>
 801b002:	2b01      	cmp	r3, #1
 801b004:	d00a      	beq.n	801b01c <_raise_r+0x4c>
 801b006:	1c59      	adds	r1, r3, #1
 801b008:	d103      	bne.n	801b012 <_raise_r+0x42>
 801b00a:	2316      	movs	r3, #22
 801b00c:	6003      	str	r3, [r0, #0]
 801b00e:	2001      	movs	r0, #1
 801b010:	e7e7      	b.n	801afe2 <_raise_r+0x12>
 801b012:	2100      	movs	r1, #0
 801b014:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b018:	4620      	mov	r0, r4
 801b01a:	4798      	blx	r3
 801b01c:	2000      	movs	r0, #0
 801b01e:	e7e0      	b.n	801afe2 <_raise_r+0x12>

0801b020 <raise>:
 801b020:	4b02      	ldr	r3, [pc, #8]	@ (801b02c <raise+0xc>)
 801b022:	4601      	mov	r1, r0
 801b024:	6818      	ldr	r0, [r3, #0]
 801b026:	f7ff bfd3 	b.w	801afd0 <_raise_r>
 801b02a:	bf00      	nop
 801b02c:	24000128 	.word	0x24000128

0801b030 <_kill_r>:
 801b030:	b538      	push	{r3, r4, r5, lr}
 801b032:	4d07      	ldr	r5, [pc, #28]	@ (801b050 <_kill_r+0x20>)
 801b034:	2300      	movs	r3, #0
 801b036:	4604      	mov	r4, r0
 801b038:	4608      	mov	r0, r1
 801b03a:	4611      	mov	r1, r2
 801b03c:	602b      	str	r3, [r5, #0]
 801b03e:	f7e7 ff1f 	bl	8002e80 <_kill>
 801b042:	1c43      	adds	r3, r0, #1
 801b044:	d102      	bne.n	801b04c <_kill_r+0x1c>
 801b046:	682b      	ldr	r3, [r5, #0]
 801b048:	b103      	cbz	r3, 801b04c <_kill_r+0x1c>
 801b04a:	6023      	str	r3, [r4, #0]
 801b04c:	bd38      	pop	{r3, r4, r5, pc}
 801b04e:	bf00      	nop
 801b050:	24027a94 	.word	0x24027a94

0801b054 <_getpid_r>:
 801b054:	f7e7 bf0c 	b.w	8002e70 <_getpid>

0801b058 <_malloc_usable_size_r>:
 801b058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b05c:	1f18      	subs	r0, r3, #4
 801b05e:	2b00      	cmp	r3, #0
 801b060:	bfbc      	itt	lt
 801b062:	580b      	ldrlt	r3, [r1, r0]
 801b064:	18c0      	addlt	r0, r0, r3
 801b066:	4770      	bx	lr

0801b068 <__swhatbuf_r>:
 801b068:	b570      	push	{r4, r5, r6, lr}
 801b06a:	460c      	mov	r4, r1
 801b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b070:	2900      	cmp	r1, #0
 801b072:	b096      	sub	sp, #88	@ 0x58
 801b074:	4615      	mov	r5, r2
 801b076:	461e      	mov	r6, r3
 801b078:	da0d      	bge.n	801b096 <__swhatbuf_r+0x2e>
 801b07a:	89a3      	ldrh	r3, [r4, #12]
 801b07c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b080:	f04f 0100 	mov.w	r1, #0
 801b084:	bf14      	ite	ne
 801b086:	2340      	movne	r3, #64	@ 0x40
 801b088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b08c:	2000      	movs	r0, #0
 801b08e:	6031      	str	r1, [r6, #0]
 801b090:	602b      	str	r3, [r5, #0]
 801b092:	b016      	add	sp, #88	@ 0x58
 801b094:	bd70      	pop	{r4, r5, r6, pc}
 801b096:	466a      	mov	r2, sp
 801b098:	f000 f848 	bl	801b12c <_fstat_r>
 801b09c:	2800      	cmp	r0, #0
 801b09e:	dbec      	blt.n	801b07a <__swhatbuf_r+0x12>
 801b0a0:	9901      	ldr	r1, [sp, #4]
 801b0a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b0a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b0aa:	4259      	negs	r1, r3
 801b0ac:	4159      	adcs	r1, r3
 801b0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b0b2:	e7eb      	b.n	801b08c <__swhatbuf_r+0x24>

0801b0b4 <__smakebuf_r>:
 801b0b4:	898b      	ldrh	r3, [r1, #12]
 801b0b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b0b8:	079d      	lsls	r5, r3, #30
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	460c      	mov	r4, r1
 801b0be:	d507      	bpl.n	801b0d0 <__smakebuf_r+0x1c>
 801b0c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b0c4:	6023      	str	r3, [r4, #0]
 801b0c6:	6123      	str	r3, [r4, #16]
 801b0c8:	2301      	movs	r3, #1
 801b0ca:	6163      	str	r3, [r4, #20]
 801b0cc:	b003      	add	sp, #12
 801b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0d0:	ab01      	add	r3, sp, #4
 801b0d2:	466a      	mov	r2, sp
 801b0d4:	f7ff ffc8 	bl	801b068 <__swhatbuf_r>
 801b0d8:	9f00      	ldr	r7, [sp, #0]
 801b0da:	4605      	mov	r5, r0
 801b0dc:	4639      	mov	r1, r7
 801b0de:	4630      	mov	r0, r6
 801b0e0:	f7fd fa78 	bl	80185d4 <_malloc_r>
 801b0e4:	b948      	cbnz	r0, 801b0fa <__smakebuf_r+0x46>
 801b0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0ea:	059a      	lsls	r2, r3, #22
 801b0ec:	d4ee      	bmi.n	801b0cc <__smakebuf_r+0x18>
 801b0ee:	f023 0303 	bic.w	r3, r3, #3
 801b0f2:	f043 0302 	orr.w	r3, r3, #2
 801b0f6:	81a3      	strh	r3, [r4, #12]
 801b0f8:	e7e2      	b.n	801b0c0 <__smakebuf_r+0xc>
 801b0fa:	89a3      	ldrh	r3, [r4, #12]
 801b0fc:	6020      	str	r0, [r4, #0]
 801b0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b102:	81a3      	strh	r3, [r4, #12]
 801b104:	9b01      	ldr	r3, [sp, #4]
 801b106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b10a:	b15b      	cbz	r3, 801b124 <__smakebuf_r+0x70>
 801b10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b110:	4630      	mov	r0, r6
 801b112:	f000 f81d 	bl	801b150 <_isatty_r>
 801b116:	b128      	cbz	r0, 801b124 <__smakebuf_r+0x70>
 801b118:	89a3      	ldrh	r3, [r4, #12]
 801b11a:	f023 0303 	bic.w	r3, r3, #3
 801b11e:	f043 0301 	orr.w	r3, r3, #1
 801b122:	81a3      	strh	r3, [r4, #12]
 801b124:	89a3      	ldrh	r3, [r4, #12]
 801b126:	431d      	orrs	r5, r3
 801b128:	81a5      	strh	r5, [r4, #12]
 801b12a:	e7cf      	b.n	801b0cc <__smakebuf_r+0x18>

0801b12c <_fstat_r>:
 801b12c:	b538      	push	{r3, r4, r5, lr}
 801b12e:	4d07      	ldr	r5, [pc, #28]	@ (801b14c <_fstat_r+0x20>)
 801b130:	2300      	movs	r3, #0
 801b132:	4604      	mov	r4, r0
 801b134:	4608      	mov	r0, r1
 801b136:	4611      	mov	r1, r2
 801b138:	602b      	str	r3, [r5, #0]
 801b13a:	f7e7 ff01 	bl	8002f40 <_fstat>
 801b13e:	1c43      	adds	r3, r0, #1
 801b140:	d102      	bne.n	801b148 <_fstat_r+0x1c>
 801b142:	682b      	ldr	r3, [r5, #0]
 801b144:	b103      	cbz	r3, 801b148 <_fstat_r+0x1c>
 801b146:	6023      	str	r3, [r4, #0]
 801b148:	bd38      	pop	{r3, r4, r5, pc}
 801b14a:	bf00      	nop
 801b14c:	24027a94 	.word	0x24027a94

0801b150 <_isatty_r>:
 801b150:	b538      	push	{r3, r4, r5, lr}
 801b152:	4d06      	ldr	r5, [pc, #24]	@ (801b16c <_isatty_r+0x1c>)
 801b154:	2300      	movs	r3, #0
 801b156:	4604      	mov	r4, r0
 801b158:	4608      	mov	r0, r1
 801b15a:	602b      	str	r3, [r5, #0]
 801b15c:	f7e7 ff00 	bl	8002f60 <_isatty>
 801b160:	1c43      	adds	r3, r0, #1
 801b162:	d102      	bne.n	801b16a <_isatty_r+0x1a>
 801b164:	682b      	ldr	r3, [r5, #0]
 801b166:	b103      	cbz	r3, 801b16a <_isatty_r+0x1a>
 801b168:	6023      	str	r3, [r4, #0]
 801b16a:	bd38      	pop	{r3, r4, r5, pc}
 801b16c:	24027a94 	.word	0x24027a94

0801b170 <_init>:
 801b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b172:	bf00      	nop
 801b174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b176:	bc08      	pop	{r3}
 801b178:	469e      	mov	lr, r3
 801b17a:	4770      	bx	lr

0801b17c <_fini>:
 801b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b17e:	bf00      	nop
 801b180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b182:	bc08      	pop	{r3}
 801b184:	469e      	mov	lr, r3
 801b186:	4770      	bx	lr
